
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ce80  0800ce80  0001ce80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cec0  0800cec0  0003721c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cec0  0800cec0  0001cec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cec8  0800cec8  0003721c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cec8  0800cec8  0001cec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cecc  0800cecc  0001cecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001715c  24000000  0800ced0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2401715c  0802402c  0003715c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240171bc  0802408c  000371bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c810  2401721c  080240ec  0003721c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24023a2c  080240ec  00043a2c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0003721c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00031f58  00000000  00000000  0003724a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004786  00000000  00000000  000691a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001aa8  00000000  00000000  0006d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001950  00000000  00000000  0006f3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d75c  00000000  00000000  00070d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021cd0  00000000  00000000  000ae47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00196990  00000000  00000000  000d014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00266adc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000073c0  00000000  00000000  00266b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2401721c 	.word	0x2401721c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ce68 	.word	0x0800ce68

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24017220 	.word	0x24017220
 80002d4:	0800ce68 	.word	0x0800ce68

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <LCD_init>:

//การสั่งขา D/C หรือ A0 เพื่อส่ง command หรือ parameter
//เปลี่ยนแปลง data command ให้เป็น high เพื่อส่ง parameter
//เปลี่ยนแปลง data command ให้เป็น low เพื่อส่ง command
//ส่งข้อมูลภาพไปในจอใช้ขา data command high
void LCD_init(LCDHandle *lcd){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	//reset LCD
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	b29b      	uxth	r3, r3
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	f005 fa85 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fd0e 	bl	8002140 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6858      	ldr	r0, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	b29b      	uxth	r3, r3
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	f005 fa79 	bl	8005c28 <HAL_GPIO_WritePin>

	//select SPI CS
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	b29b      	uxth	r3, r3
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f005 fa70 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 fcf9 	bl	8002140 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6898      	ldr	r0, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f005 fa64 	bl	8005c28 <HAL_GPIO_WritePin>

	//write reset , sleep out, display on, scan order
	//write command 0x01, 0x11, 0x29, 0x36
	//4 = 4 commands
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f005 fa5b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2204      	movs	r2, #4
 800077a:	4938      	ldr	r1, [pc, #224]	; (800085c <LCD_init+0x158>)
 800077c:	f008 fd00 	bl	8009180 <HAL_SPI_Transmit>

	//write parameter of scan order
	//write parameter 0b01001000
	//&LCDSTARTUPSeq[4] offset ไป 4 ตำแหน่ง
	//1 = 1 parameter
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68d8      	ldr	r0, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	b29b      	uxth	r3, r3
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f005 fa4b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	2201      	movs	r2, #1
 800079a:	4931      	ldr	r1, [pc, #196]	; (8000860 <LCD_init+0x15c>)
 800079c:	f008 fcf0 	bl	8009180 <HAL_SPI_Transmit>

	//write set C area
	//write command 0x2a
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f005 fa3b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	492a      	ldr	r1, [pc, #168]	; (8000864 <LCD_init+0x160>)
 80007bc:	f008 fce0 	bl	8009180 <HAL_SPI_Transmit>

	//write set C area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68d8      	ldr	r0, [r3, #12]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	f005 fa2b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2204      	movs	r2, #4
 80007da:	4923      	ldr	r1, [pc, #140]	; (8000868 <LCD_init+0x164>)
 80007dc:	f008 fcd0 	bl	8009180 <HAL_SPI_Transmit>

	//write set R area
	//write command 0x2b
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68d8      	ldr	r0, [r3, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f005 fa1b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2201      	movs	r2, #1
 80007fa:	491c      	ldr	r1, [pc, #112]	; (800086c <LCD_init+0x168>)
 80007fc:	f008 fcc0 	bl	8009180 <HAL_SPI_Transmit>

	//write set R area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68d8      	ldr	r0, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	b29b      	uxth	r3, r3
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	f005 fa0b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2204      	movs	r2, #4
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <LCD_init+0x16c>)
 800081c:	f008 fcb0 	bl	8009180 <HAL_SPI_Transmit>

	//write to graphic memory
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68d8      	ldr	r0, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f005 f9fb 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	2201      	movs	r2, #1
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LCD_init+0x170>)
 800083c:	f008 fca0 	bl	8009180 <HAL_SPI_Transmit>

	//set DC to high to read & send image data
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68d8      	ldr	r0, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	b29b      	uxth	r3, r3
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f005 f9eb 	bl	8005c28 <HAL_GPIO_WritePin>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000008 	.word	0x24000008
 8000860:	2400000c 	.word	0x2400000c
 8000864:	2400000d 	.word	0x2400000d
 8000868:	2400000e 	.word	0x2400000e
 800086c:	24000012 	.word	0x24000012
 8000870:	24000013 	.word	0x24000013
 8000874:	24000017 	.word	0x24000017

08000878 <LCD_flush>:

//ส่งข้อมูลของ frame ไปให้จอ
void LCD_flush(LCDHandle *lcd)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	//circular dma
	//Framememory มีขนาดเท่ากับหน้าจอ
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000888:	4903      	ldr	r1, [pc, #12]	; (8000898 <LCD_flush+0x20>)
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fe6a 	bl	8009564 <HAL_SPI_Transmit_DMA>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24017238 	.word	0x24017238

0800089c <LCD_timer>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void LCD_timer(uint8_t timer)
{
 800089c:	b480      	push	{r7}
 800089e:	b093      	sub	sp, #76	; 0x4c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	switch(timer)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b60      	cmp	r3, #96	; 0x60
 80008aa:	f000 80a6 	beq.w	80009fa <LCD_timer+0x15e>
 80008ae:	2b60      	cmp	r3, #96	; 0x60
 80008b0:	f300 80c8 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008b4:	2b45      	cmp	r3, #69	; 0x45
 80008b6:	d07b      	beq.n	80009b0 <LCD_timer+0x114>
 80008b8:	2b45      	cmp	r3, #69	; 0x45
 80008ba:	f300 80c3 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008be:	2b30      	cmp	r3, #48	; 0x30
 80008c0:	d051      	beq.n	8000966 <LCD_timer+0xca>
 80008c2:	2b30      	cmp	r3, #48	; 0x30
 80008c4:	f300 80be 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <LCD_timer+0x36>
 80008cc:	2b15      	cmp	r3, #21
 80008ce:	d025      	beq.n	800091c <LCD_timer+0x80>
			}
		}
			break;

		default:
			break;
 80008d0:	e0b8      	b.n	8000a44 <LCD_timer+0x1a8>
			int k= 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i = 180; i < 15156; i = i+384 )
 80008d6:	23b4      	movs	r3, #180	; 0xb4
 80008d8:	647b      	str	r3, [r7, #68]	; 0x44
 80008da:	e019      	b.n	8000910 <LCD_timer+0x74>
				for(j=0;j<120;j++)
 80008dc:	2300      	movs	r3, #0
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
 80008e0:	e00c      	b.n	80008fc <LCD_timer+0x60>
					Framememory[i+j] = n0[j+k];
 80008e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80008e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e6:	441a      	add	r2, r3
 80008e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80008ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008ec:	440b      	add	r3, r1
 80008ee:	4959      	ldr	r1, [pc, #356]	; (8000a54 <LCD_timer+0x1b8>)
 80008f0:	5c89      	ldrb	r1, [r1, r2]
 80008f2:	4a59      	ldr	r2, [pc, #356]	; (8000a58 <LCD_timer+0x1bc>)
 80008f4:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 80008f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f8:	3301      	adds	r3, #1
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
 80008fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008fe:	2b77      	cmp	r3, #119	; 0x77
 8000900:	ddef      	ble.n	80008e2 <LCD_timer+0x46>
				k = k +120;
 8000902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000904:	3378      	adds	r3, #120	; 0x78
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i = 180; i < 15156; i = i+384 )
 8000908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800090a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
 8000910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000912:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000916:	4293      	cmp	r3, r2
 8000918:	dde0      	ble.n	80008dc <LCD_timer+0x40>
			break;
 800091a:	e094      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
			for(i = 180; i < 15156; i = i+384 )
 8000920:	23b4      	movs	r3, #180	; 0xb4
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
 8000924:	e019      	b.n	800095a <LCD_timer+0xbe>
				for(j=0;j<120;j++)
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
 800092a:	e00c      	b.n	8000946 <LCD_timer+0xaa>
					Framememory[i+j] = n15[j+k];
 800092c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800092e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000930:	441a      	add	r2, r3
 8000932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000936:	440b      	add	r3, r1
 8000938:	4948      	ldr	r1, [pc, #288]	; (8000a5c <LCD_timer+0x1c0>)
 800093a:	5c89      	ldrb	r1, [r1, r2]
 800093c:	4a46      	ldr	r2, [pc, #280]	; (8000a58 <LCD_timer+0x1bc>)
 800093e:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	3301      	adds	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
 8000946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000948:	2b77      	cmp	r3, #119	; 0x77
 800094a:	ddef      	ble.n	800092c <LCD_timer+0x90>
				k = k +120;
 800094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094e:	3378      	adds	r3, #120	; 0x78
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
			for(i = 180; i < 15156; i = i+384 )
 8000952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000954:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
 800095a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800095c:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000960:	4293      	cmp	r3, r2
 8000962:	dde0      	ble.n	8000926 <LCD_timer+0x8a>
			break;
 8000964:	e06f      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 180; i < 15156; i = i+384 )
 800096a:	23b4      	movs	r3, #180	; 0xb4
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800096e:	e019      	b.n	80009a4 <LCD_timer+0x108>
				for(j=0;j<120;j++)
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
 8000974:	e00c      	b.n	8000990 <LCD_timer+0xf4>
					Framememory[i+j] = n30[j+k];
 8000976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	441a      	add	r2, r3
 800097c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	440b      	add	r3, r1
 8000982:	4937      	ldr	r1, [pc, #220]	; (8000a60 <LCD_timer+0x1c4>)
 8000984:	5c89      	ldrb	r1, [r1, r2]
 8000986:	4a34      	ldr	r2, [pc, #208]	; (8000a58 <LCD_timer+0x1bc>)
 8000988:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 800098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098c:	3301      	adds	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000992:	2b77      	cmp	r3, #119	; 0x77
 8000994:	ddef      	ble.n	8000976 <LCD_timer+0xda>
				k = k +120;
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	3378      	adds	r3, #120	; 0x78
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 180; i < 15156; i = i+384 )
 800099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a6:	f643 3233 	movw	r2, #15155	; 0x3b33
 80009aa:	4293      	cmp	r3, r2
 80009ac:	dde0      	ble.n	8000970 <LCD_timer+0xd4>
			break;
 80009ae:	e04a      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
			for(i = 180; i < 15156; i = i+384 )
 80009b4:	23b4      	movs	r3, #180	; 0xb4
 80009b6:	623b      	str	r3, [r7, #32]
 80009b8:	e019      	b.n	80009ee <LCD_timer+0x152>
				for(j=0;j<120;j++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	e00c      	b.n	80009da <LCD_timer+0x13e>
					Framememory[i+j] = n45[j+k];
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	441a      	add	r2, r3
 80009c6:	6a39      	ldr	r1, [r7, #32]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	440b      	add	r3, r1
 80009cc:	4925      	ldr	r1, [pc, #148]	; (8000a64 <LCD_timer+0x1c8>)
 80009ce:	5c89      	ldrb	r1, [r1, r2]
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <LCD_timer+0x1bc>)
 80009d2:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	2b77      	cmp	r3, #119	; 0x77
 80009de:	ddef      	ble.n	80009c0 <LCD_timer+0x124>
				k = k +120;
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	3378      	adds	r3, #120	; 0x78
 80009e4:	61bb      	str	r3, [r7, #24]
			for(i = 180; i < 15156; i = i+384 )
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	f643 3233 	movw	r2, #15155	; 0x3b33
 80009f4:	4293      	cmp	r3, r2
 80009f6:	dde0      	ble.n	80009ba <LCD_timer+0x11e>
			break;
 80009f8:	e025      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
			for(i = 180; i < 15156; i = i+384 )
 80009fe:	23b4      	movs	r3, #180	; 0xb4
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e019      	b.n	8000a38 <LCD_timer+0x19c>
				for(j=0;j<120;j++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	e00c      	b.n	8000a24 <LCD_timer+0x188>
					Framememory[i+j] = n60[j+k];
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	441a      	add	r2, r3
 8000a10:	6979      	ldr	r1, [r7, #20]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	440b      	add	r3, r1
 8000a16:	4914      	ldr	r1, [pc, #80]	; (8000a68 <LCD_timer+0x1cc>)
 8000a18:	5c89      	ldrb	r1, [r1, r2]
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <LCD_timer+0x1bc>)
 8000a1c:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	3301      	adds	r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2b77      	cmp	r3, #119	; 0x77
 8000a28:	ddef      	ble.n	8000a0a <LCD_timer+0x16e>
				k = k +120;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3378      	adds	r3, #120	; 0x78
 8000a2e:	60fb      	str	r3, [r7, #12]
			for(i = 180; i < 15156; i = i+384 )
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	dde0      	ble.n	8000a04 <LCD_timer+0x168>
			break;
 8000a42:	e000      	b.n	8000a46 <LCD_timer+0x1aa>
			break;
 8000a44:	bf00      	nop
	}
}
 8000a46:	bf00      	nop
 8000a48:	374c      	adds	r7, #76	; 0x4c
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	24011390 	.word	0x24011390
 8000a58:	24017238 	.word	0x24017238
 8000a5c:	24012650 	.word	0x24012650
 8000a60:	24013910 	.word	0x24013910
 8000a64:	24014bd0 	.word	0x24014bd0
 8000a68:	24015e90 	.word	0x24015e90

08000a6c <LCD_fan>:

void LCD_fan(uint8_t RTC_ON)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	switch(RTC_ON)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <LCD_fan+0x16>
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d026      	beq.n	8000ace <LCD_fan+0x62>
			}
		}
			break;

		default:
			break;
 8000a80:	e04b      	b.n	8000b1a <LCD_fan+0xae>
			int a,b,c = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
			for(a = 23100; a <= 39996; a = a+384 )
 8000a86:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e019      	b.n	8000ac2 <LCD_fan+0x56>
				for(b=0;b<135;b++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	e00c      	b.n	8000aae <LCD_fan+0x42>
					Framememory[a+b] = fan_off[b+c];
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	441a      	add	r2, r3
 8000a9a:	69f9      	ldr	r1, [r7, #28]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	4921      	ldr	r1, [pc, #132]	; (8000b28 <LCD_fan+0xbc>)
 8000aa2:	5c89      	ldrb	r1, [r1, r2]
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <LCD_fan+0xc0>)
 8000aa6:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	2b86      	cmp	r3, #134	; 0x86
 8000ab2:	ddef      	ble.n	8000a94 <LCD_fan+0x28>
				c = c +135;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3387      	adds	r3, #135	; 0x87
 8000ab8:	617b      	str	r3, [r7, #20]
			for(a = 23100; a <= 39996; a = a+384 )
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	dde0      	ble.n	8000a8e <LCD_fan+0x22>
			break;
 8000acc:	e025      	b.n	8000b1a <LCD_fan+0xae>
			int a,b,c = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
			for(a = 23100; a <= 39996; a = a+384 )
 8000ad2:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	e019      	b.n	8000b0e <LCD_fan+0xa2>
				for(b=0;b<135;b++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e00c      	b.n	8000afa <LCD_fan+0x8e>
					Framememory[a+b] = fan_on[b+c];
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	6939      	ldr	r1, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	440b      	add	r3, r1
 8000aec:	4910      	ldr	r1, [pc, #64]	; (8000b30 <LCD_fan+0xc4>)
 8000aee:	5c89      	ldrb	r1, [r1, r2]
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LCD_fan+0xc0>)
 8000af2:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b86      	cmp	r3, #134	; 0x86
 8000afe:	ddef      	ble.n	8000ae0 <LCD_fan+0x74>
				c = c +135;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	3387      	adds	r3, #135	; 0x87
 8000b04:	60bb      	str	r3, [r7, #8]
			for(a = 23100; a <= 39996; a = a+384 )
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000b14:	4293      	cmp	r3, r2
 8000b16:	dde0      	ble.n	8000ada <LCD_fan+0x6e>
			break;
 8000b18:	bf00      	nop
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2400c018 	.word	0x2400c018
 8000b2c:	24017238 	.word	0x24017238
 8000b30:	2400d7d4 	.word	0x2400d7d4

08000b34 <LCD_speed>:

void LCD_speed(uint8_t speed)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b08d      	sub	sp, #52	; 0x34
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	switch(speed)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d052      	beq.n	8000bea <LCD_speed+0xb6>
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	dc76      	bgt.n	8000c36 <LCD_speed+0x102>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d002      	beq.n	8000b52 <LCD_speed+0x1e>
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d026      	beq.n	8000b9e <LCD_speed+0x6a>
		}
			break;


		default:
			break;
 8000b50:	e071      	b.n	8000c36 <LCD_speed+0x102>
			int i,j,n = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 25956; i <= 37760; i = i+384 )
 8000b56:	f246 5364 	movw	r3, #25956	; 0x6564
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b5c:	e019      	b.n	8000b92 <LCD_speed+0x5e>
				for(j=0;j<96;j++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b62:	e00c      	b.n	8000b7e <LCD_speed+0x4a>
					Framememory[i+j] = speed1[j+n];
 8000b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	441a      	add	r2, r3
 8000b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6e:	440b      	add	r3, r1
 8000b70:	4934      	ldr	r1, [pc, #208]	; (8000c44 <LCD_speed+0x110>)
 8000b72:	5c89      	ldrb	r1, [r1, r2]
 8000b74:	4a34      	ldr	r2, [pc, #208]	; (8000c48 <LCD_speed+0x114>)
 8000b76:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b80:	2b5f      	cmp	r3, #95	; 0x5f
 8000b82:	ddef      	ble.n	8000b64 <LCD_speed+0x30>
				n = n +96;
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	3360      	adds	r3, #96	; 0x60
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 25956; i <= 37760; i = i+384 )
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	f249 3280 	movw	r2, #37760	; 0x9380
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	dde0      	ble.n	8000b5e <LCD_speed+0x2a>
			break;
 8000b9c:	e04c      	b.n	8000c38 <LCD_speed+0x104>
			int i,j,n = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
			for(i = 25956; i <= 37760; i = i+384 )
 8000ba2:	f246 5364 	movw	r3, #25956	; 0x6564
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	e019      	b.n	8000bde <LCD_speed+0xaa>
				for(j=0;j<96;j++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	e00c      	b.n	8000bca <LCD_speed+0x96>
					Framememory[i+j] = speed2[j+n];
 8000bb0:	69fa      	ldr	r2, [r7, #28]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	441a      	add	r2, r3
 8000bb6:	6a39      	ldr	r1, [r7, #32]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	440b      	add	r3, r1
 8000bbc:	4923      	ldr	r1, [pc, #140]	; (8000c4c <LCD_speed+0x118>)
 8000bbe:	5c89      	ldrb	r1, [r1, r2]
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <LCD_speed+0x114>)
 8000bc2:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	2b5f      	cmp	r3, #95	; 0x5f
 8000bce:	ddef      	ble.n	8000bb0 <LCD_speed+0x7c>
				n = n +96;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	3360      	adds	r3, #96	; 0x60
 8000bd4:	61bb      	str	r3, [r7, #24]
			for(i = 25956; i <= 37760; i = i+384 )
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	f249 3280 	movw	r2, #37760	; 0x9380
 8000be4:	4293      	cmp	r3, r2
 8000be6:	dde0      	ble.n	8000baa <LCD_speed+0x76>
			break;
 8000be8:	e026      	b.n	8000c38 <LCD_speed+0x104>
			int i,j,n = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
			for(i = 25956; i <= 37760; i = i+384 )
 8000bee:	f246 5364 	movw	r3, #25956	; 0x6564
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	e019      	b.n	8000c2a <LCD_speed+0xf6>
				for(j=0;j<96;j++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	e00c      	b.n	8000c16 <LCD_speed+0xe2>
					Framememory[i+j] = speed3[j+n];
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	441a      	add	r2, r3
 8000c02:	6979      	ldr	r1, [r7, #20]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	440b      	add	r3, r1
 8000c08:	4911      	ldr	r1, [pc, #68]	; (8000c50 <LCD_speed+0x11c>)
 8000c0a:	5c89      	ldrb	r1, [r1, r2]
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <LCD_speed+0x114>)
 8000c0e:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	3301      	adds	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	2b5f      	cmp	r3, #95	; 0x5f
 8000c1a:	ddef      	ble.n	8000bfc <LCD_speed+0xc8>
				n = n +96;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3360      	adds	r3, #96	; 0x60
 8000c20:	60fb      	str	r3, [r7, #12]
			for(i = 25956; i <= 37760; i = i+384 )
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f249 3280 	movw	r2, #37760	; 0x9380
 8000c30:	4293      	cmp	r3, r2
 8000c32:	dde0      	ble.n	8000bf6 <LCD_speed+0xc2>
			break;
 8000c34:	e000      	b.n	8000c38 <LCD_speed+0x104>
			break;
 8000c36:	bf00      	nop
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3734      	adds	r7, #52	; 0x34
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	2400ef90 	.word	0x2400ef90
 8000c48:	24017238 	.word	0x24017238
 8000c4c:	2400fb90 	.word	0x2400fb90
 8000c50:	24010790 	.word	0x24010790

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000c60:	bf00      	nop
 8000c62:	4baf      	ldr	r3, [pc, #700]	; (8000f20 <main+0x2cc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d004      	beq.n	8000c78 <main+0x24>
 8000c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dcf4      	bgt.n	8000c62 <main+0xe>
		;
	if (timeout < 0) {
 8000c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da01      	bge.n	8000c82 <main+0x2e>
		Error_Handler();
 8000c7e:	f000 fd99 	bl	80017b4 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c82:	f001 f9cb 	bl	800201c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c86:	f000 f9a5 	bl	8000fd4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000c8a:	4ba5      	ldr	r3, [pc, #660]	; (8000f20 <main+0x2cc>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4aa3      	ldr	r2, [pc, #652]	; (8000f20 <main+0x2cc>)
 8000c92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4ba1      	ldr	r3, [pc, #644]	; (8000f20 <main+0x2cc>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f004 ffd7 	bl	8005c5c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f004 ffed 	bl	8005c90 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000cbc:	bf00      	nop
 8000cbe:	4b98      	ldr	r3, [pc, #608]	; (8000f20 <main+0x2cc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d104      	bne.n	8000cd4 <main+0x80>
 8000cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dcf4      	bgt.n	8000cbe <main+0x6a>
		;
	if (timeout < 0) {
 8000cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da01      	bge.n	8000cde <main+0x8a>
		Error_Handler();
 8000cda:	f000 fd6b 	bl	80017b4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f000 fc8f 	bl	8001600 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ce2:	f000 f9fd 	bl	80010e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ce6:	f000 fbdd 	bl	80014a4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000cea:	f000 fc59 	bl	80015a0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cee:	f000 fad5 	bl	800129c <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cf2:	f000 fc23 	bl	800153c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000cf6:	f000 fb29 	bl	800134c <MX_TIM1_Init>
  MX_RTC_Init();
 8000cfa:	f000 fa3d 	bl	8001178 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  	//�?ำหนดขา pin
	ST7735.hspi = &hspi1;
 8000cfe:	4b89      	ldr	r3, [pc, #548]	; (8000f24 <main+0x2d0>)
 8000d00:	4a89      	ldr	r2, [pc, #548]	; (8000f28 <main+0x2d4>)
 8000d02:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 8000d04:	4b87      	ldr	r3, [pc, #540]	; (8000f24 <main+0x2d0>)
 8000d06:	4a89      	ldr	r2, [pc, #548]	; (8000f2c <main+0x2d8>)
 8000d08:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 8000d0a:	4b86      	ldr	r3, [pc, #536]	; (8000f24 <main+0x2d0>)
 8000d0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d10:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 8000d12:	4b84      	ldr	r3, [pc, #528]	; (8000f24 <main+0x2d0>)
 8000d14:	4a85      	ldr	r2, [pc, #532]	; (8000f2c <main+0x2d8>)
 8000d16:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 8000d18:	4b82      	ldr	r3, [pc, #520]	; (8000f24 <main+0x2d0>)
 8000d1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d1e:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 8000d20:	4b80      	ldr	r3, [pc, #512]	; (8000f24 <main+0x2d0>)
 8000d22:	4a83      	ldr	r2, [pc, #524]	; (8000f30 <main+0x2dc>)
 8000d24:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 8000d26:	4b7f      	ldr	r3, [pc, #508]	; (8000f24 <main+0x2d0>)
 8000d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2c:	611a      	str	r2, [r3, #16]
	//เริ่ม�?ารเขียน sequence data
	LCD_init(&ST7735);
 8000d2e:	487d      	ldr	r0, [pc, #500]	; (8000f24 <main+0x2d0>)
 8000d30:	f7ff fce8 	bl	8000704 <LCD_init>

	//start pwm
	//tim1 @APB2 timer clock 100 MHz
	//counter period 10000 -> 10 kHz
	//couter period 10000 = pwm 100%
	HAL_TIM_Base_Start(&htim1);
 8000d34:	487f      	ldr	r0, [pc, #508]	; (8000f34 <main+0x2e0>)
 8000d36:	f009 f91b 	bl	8009f70 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	487d      	ldr	r0, [pc, #500]	; (8000f34 <main+0x2e0>)
 8000d3e:	f009 f9e1 	bl	800a104 <HAL_TIM_PWM_Start>

	//initial parameter
	shareMemory->PWM = 2500; //pwm @ 25%
 8000d42:	4b7d      	ldr	r3, [pc, #500]	; (8000f38 <main+0x2e4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d4a:	601a      	str	r2, [r3, #0]
	shareMemory->fan_mode = 1; //fan low speed
 8000d4c:	4b7a      	ldr	r3, [pc, #488]	; (8000f38 <main+0x2e4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2201      	movs	r2, #1
 8000d52:	711a      	strb	r2, [r3, #4]
	shareMemory->mode_change = 0; //if fan changes mode
 8000d54:	4b78      	ldr	r3, [pc, #480]	; (8000f38 <main+0x2e4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	715a      	strb	r2, [r3, #5]
	shareMemory->RTC_ON = 0; //does rtc work?
 8000d5c:	4b76      	ldr	r3, [pc, #472]	; (8000f38 <main+0x2e4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	719a      	strb	r2, [r3, #6]
	shareMemory->RTC_change = 0; //rtc change
 8000d64:	4b74      	ldr	r3, [pc, #464]	; (8000f38 <main+0x2e4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	71da      	strb	r2, [r3, #7]
	shareMemory->finish = 0; //does fan work 1 min?
 8000d6c:	4b72      	ldr	r3, [pc, #456]	; (8000f38 <main+0x2e4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2200      	movs	r2, #0
 8000d72:	721a      	strb	r2, [r3, #8]
	shareMemory->led1 = 0; //led1 status
 8000d74:	4b70      	ldr	r3, [pc, #448]	; (8000f38 <main+0x2e4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	725a      	strb	r2, [r3, #9]
	shareMemory->led2 = 1; //led2 status
 8000d7c:	4b6e      	ldr	r3, [pc, #440]	; (8000f38 <main+0x2e4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2201      	movs	r2, #1
 8000d82:	729a      	strb	r2, [r3, #10]
	shareMemory->led3 = 1; //led3 status
 8000d84:	4b6c      	ldr	r3, [pc, #432]	; (8000f38 <main+0x2e4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	72da      	strb	r2, [r3, #11]

	//led setup
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, shareMemory->led1); //show led1
 8000d8c:	4b6a      	ldr	r3, [pc, #424]	; (8000f38 <main+0x2e4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	7a5b      	ldrb	r3, [r3, #9]
 8000d92:	461a      	mov	r2, r3
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4868      	ldr	r0, [pc, #416]	; (8000f3c <main+0x2e8>)
 8000d9a:	f004 ff45 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, shareMemory->led2); //close led2
 8000d9e:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <main+0x2e4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	7a9b      	ldrb	r3, [r3, #10]
 8000da4:	461a      	mov	r2, r3
 8000da6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000daa:	4864      	ldr	r0, [pc, #400]	; (8000f3c <main+0x2e8>)
 8000dac:	f004 ff3c 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, shareMemory->led3); //close led3
 8000db0:	4b61      	ldr	r3, [pc, #388]	; (8000f38 <main+0x2e4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	7adb      	ldrb	r3, [r3, #11]
 8000db6:	461a      	mov	r2, r3
 8000db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dbc:	485f      	ldr	r0, [pc, #380]	; (8000f3c <main+0x2e8>)
 8000dbe:	f004 ff33 	bl	8005c28 <HAL_GPIO_WritePin>

	//lcd UI
	memcpy(Framememory,fan,sizeof(fan)); //background
 8000dc2:	4a5f      	ldr	r2, [pc, #380]	; (8000f40 <main+0x2ec>)
 8000dc4:	4b5f      	ldr	r3, [pc, #380]	; (8000f44 <main+0x2f0>)
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dce:	461a      	mov	r2, r3
 8000dd0:	f00c f834 	bl	800ce3c <memcpy>
	LCD_speed(shareMemory->fan_mode); //show fan mode
 8000dd4:	4b58      	ldr	r3, [pc, #352]	; (8000f38 <main+0x2e4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	791b      	ldrb	r3, [r3, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff feaa 	bl	8000b34 <LCD_speed>
	LCD_fan(shareMemory->RTC_ON); //show rtc status
 8000de0:	4b55      	ldr	r3, [pc, #340]	; (8000f38 <main+0x2e4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	799b      	ldrb	r3, [r3, #6]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fe40 	bl	8000a6c <LCD_fan>
	LCD_timer(0x00); //show timer
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fd55 	bl	800089c <LCD_timer>
	//flush ข้อมูล dma
	LCD_flush(&ST7735);
 8000df2:	484c      	ldr	r0, [pc, #304]	; (8000f24 <main+0x2d0>)
 8000df4:	f7ff fd40 	bl	8000878 <LCD_flush>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_HSEM_FastTake(1) == HAL_OK) //hsem cm7 is ready
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f004 ff2f 	bl	8005c5c <HAL_HSEM_FastTake>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f9      	bne.n	8000df8 <main+0x1a4>
		{

			if (shareMemory->RTC_change ) //rtc status change
 8000e04:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <main+0x2e4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	79db      	ldrb	r3, [r3, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d021      	beq.n	8000e52 <main+0x1fe>
			{
				LCD_fan(shareMemory->RTC_ON); //show fan status on
 8000e0e:	4b4a      	ldr	r3, [pc, #296]	; (8000f38 <main+0x2e4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	799b      	ldrb	r3, [r3, #6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe29 	bl	8000a6c <LCD_fan>
				LCD_flush(&ST7735); //spi transmit dma normal
 8000e1a:	4842      	ldr	r0, [pc, #264]	; (8000f24 <main+0x2d0>)
 8000e1c:	f7ff fd2c 	bl	8000878 <LCD_flush>
				shareMemory->RTC_change = 0; //change rtc status (reset)
 8000e20:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <main+0x2e4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2200      	movs	r2, #0
 8000e26:	71da      	strb	r2, [r3, #7]

				//rtc work
				//start clock
				RTC_TimeTypeDef sTime = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
				sTime.Hours =0x00; //0x14 (2 pm.)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	753b      	strb	r3, [r7, #20]
				sTime.Minutes =0x00; //0x30 (half hour or 30 min)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	757b      	strb	r3, [r7, #21]
				sTime.Seconds = 0x00; // 0 second
 8000e40:	2300      	movs	r3, #0
 8000e42:	75bb      	strb	r3, [r7, #22]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);//set rtc
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	483e      	ldr	r0, [pc, #248]	; (8000f48 <main+0x2f4>)
 8000e4e:	f007 fc5b 	bl	8008708 <HAL_RTC_SetTime>

			}

			if (shareMemory->mode_change) //fan mode chande
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <main+0x2e4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	795b      	ldrb	r3, [r3, #5]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d027      	beq.n	8000eac <main+0x258>
			{
				LCD_speed(shareMemory->fan_mode); //change fan speed
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <main+0x2e4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	791b      	ldrb	r3, [r3, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe66 	bl	8000b34 <LCD_speed>
				LCD_flush(&ST7735); //spi transmit dma normal
 8000e68:	482e      	ldr	r0, [pc, #184]	; (8000f24 <main+0x2d0>)
 8000e6a:	f7ff fd05 	bl	8000878 <LCD_flush>
				shareMemory->mode_change = 0; ////change fan status (reset)
 8000e6e:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <main+0x2e4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2200      	movs	r2, #0
 8000e74:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, shareMemory->led1); //show led1
 8000e76:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <main+0x2e4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	7a5b      	ldrb	r3, [r3, #9]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e82:	482e      	ldr	r0, [pc, #184]	; (8000f3c <main+0x2e8>)
 8000e84:	f004 fed0 	bl	8005c28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, shareMemory->led2); //show led2
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <main+0x2e4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	7a9b      	ldrb	r3, [r3, #10]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e94:	4829      	ldr	r0, [pc, #164]	; (8000f3c <main+0x2e8>)
 8000e96:	f004 fec7 	bl	8005c28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, shareMemory->led3); //show led3
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <main+0x2e4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	7adb      	ldrb	r3, [r3, #11]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea6:	4825      	ldr	r0, [pc, #148]	; (8000f3c <main+0x2e8>)
 8000ea8:	f004 febe 	bl	8005c28 <HAL_GPIO_WritePin>
			}

			if (shareMemory->RTC_ON == 1) //if rtc work
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <main+0x2e4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	799b      	ldrb	r3, [r3, #6]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d172      	bne.n	8000f9c <main+0x348>
			{
				RTC_TimeTypeDef sTime = NowTime; //save time
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <main+0x2f8>)
 8000eb8:	463c      	mov	r4, r7
 8000eba:	461d      	mov	r5, r3
 8000ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	6023      	str	r3, [r4, #0]

				//time over flow
				if (sTime.Seconds >= 0x60)
 8000ec4:	78bb      	ldrb	r3, [r7, #2]
 8000ec6:	2b5f      	cmp	r3, #95	; 0x5f
 8000ec8:	d919      	bls.n	8000efe <main+0x2aa>
				{
					sTime.Seconds -= 0x60;
 8000eca:	78bb      	ldrb	r3, [r7, #2]
 8000ecc:	3b60      	subs	r3, #96	; 0x60
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	70bb      	strb	r3, [r7, #2]
					sTime.Minutes++;
 8000ed2:	787b      	ldrb	r3, [r7, #1]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	707b      	strb	r3, [r7, #1]
					if (sTime.Minutes >= 0x60)
 8000eda:	787b      	ldrb	r3, [r7, #1]
 8000edc:	2b5f      	cmp	r3, #95	; 0x5f
 8000ede:	d90e      	bls.n	8000efe <main+0x2aa>
					{
						sTime.Minutes -= 0x60;
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	3b60      	subs	r3, #96	; 0x60
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	707b      	strb	r3, [r7, #1]
						sTime.Hours++;
 8000ee8:	783b      	ldrb	r3, [r7, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	703b      	strb	r3, [r7, #0]
						if (sTime.Hours >= 0x24)
 8000ef0:	783b      	ldrb	r3, [r7, #0]
 8000ef2:	2b23      	cmp	r3, #35	; 0x23
 8000ef4:	d903      	bls.n	8000efe <main+0x2aa>
						{
							sTime.Hours -= 0x24;
 8000ef6:	783b      	ldrb	r3, [r7, #0]
 8000ef8:	3b24      	subs	r3, #36	; 0x24
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	703b      	strb	r3, [r7, #0]
						}
					}
				}

				//if fan does not work for 1 min
				if (sTime.Minutes < 0x01)
 8000efe:	787b      	ldrb	r3, [r7, #1]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d133      	bne.n	8000f6c <main+0x318>
				{
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, shareMemory->PWM); //drive motor
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <main+0x2e4>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <main+0x2e0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34

					//show timer every 15 sec
					if (sTime.Seconds == 0x00 || sTime.Seconds == 0x15 || sTime.Seconds ==0x30 ||sTime.Seconds == 0x45)
 8000f10:	78bb      	ldrb	r3, [r7, #2]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d022      	beq.n	8000f5c <main+0x308>
 8000f16:	78bb      	ldrb	r3, [r7, #2]
 8000f18:	2b15      	cmp	r3, #21
 8000f1a:	d01f      	beq.n	8000f5c <main+0x308>
 8000f1c:	e018      	b.n	8000f50 <main+0x2fc>
 8000f1e:	bf00      	nop
 8000f20:	58024400 	.word	0x58024400
 8000f24:	24023238 	.word	0x24023238
 8000f28:	24023858 	.word	0x24023858
 8000f2c:	58020c00 	.word	0x58020c00
 8000f30:	58021800 	.word	0x58021800
 8000f34:	2402380c 	.word	0x2402380c
 8000f38:	24017150 	.word	0x24017150
 8000f3c:	58020800 	.word	0x58020800
 8000f40:	24017238 	.word	0x24017238
 8000f44:	24000018 	.word	0x24000018
 8000f48:	240237e8 	.word	0x240237e8
 8000f4c:	240238e0 	.word	0x240238e0
 8000f50:	78bb      	ldrb	r3, [r7, #2]
 8000f52:	2b30      	cmp	r3, #48	; 0x30
 8000f54:	d002      	beq.n	8000f5c <main+0x308>
 8000f56:	78bb      	ldrb	r3, [r7, #2]
 8000f58:	2b45      	cmp	r3, #69	; 0x45
 8000f5a:	d11f      	bne.n	8000f9c <main+0x348>
					{
						LCD_timer(sTime.Seconds); //show timer
 8000f5c:	78bb      	ldrb	r3, [r7, #2]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fc9c 	bl	800089c <LCD_timer>
						LCD_flush(&ST7735); //spi transmit dma normal
 8000f64:	4815      	ldr	r0, [pc, #84]	; (8000fbc <main+0x368>)
 8000f66:	f7ff fc87 	bl	8000878 <LCD_flush>
 8000f6a:	e017      	b.n	8000f9c <main+0x348>

				}
				//if fan works for 1 min
				else
				{
					shareMemory->RTC_ON = 0; //rtc work done (reset)
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <main+0x36c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	719a      	strb	r2, [r3, #6]
					shareMemory->finish = 1; //work for 1 min is done
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <main+0x36c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	721a      	strb	r2, [r3, #8]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0); //stop driving motor
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <main+0x370>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2200      	movs	r2, #0
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34

					LCD_timer(0x60); //show 60 sec
 8000f84:	2060      	movs	r0, #96	; 0x60
 8000f86:	f7ff fc89 	bl	800089c <LCD_timer>
					LCD_fan(shareMemory->RTC_ON); //show rtc status
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <main+0x36c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	799b      	ldrb	r3, [r3, #6]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fd6b 	bl	8000a6c <LCD_fan>
					LCD_flush(&ST7735); //spi transmit dma normal
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <main+0x368>)
 8000f98:	f7ff fc6e 	bl	8000878 <LCD_flush>

				}
			}

			//read RTC
			HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	490a      	ldr	r1, [pc, #40]	; (8000fc8 <main+0x374>)
 8000fa0:	480a      	ldr	r0, [pc, #40]	; (8000fcc <main+0x378>)
 8000fa2:	f007 fc4f 	bl	8008844 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4909      	ldr	r1, [pc, #36]	; (8000fd0 <main+0x37c>)
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <main+0x378>)
 8000fac:	f007 fd2e 	bl	8008a0c <HAL_RTC_GetDate>

			//hsem release
			HAL_HSEM_Release(1, 0);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f004 fe6c 	bl	8005c90 <HAL_HSEM_Release>
		if (HAL_HSEM_FastTake(1) == HAL_OK) //hsem cm7 is ready
 8000fb8:	e71e      	b.n	8000df8 <main+0x1a4>
 8000fba:	bf00      	nop
 8000fbc:	24023238 	.word	0x24023238
 8000fc0:	24017150 	.word	0x24017150
 8000fc4:	2402380c 	.word	0x2402380c
 8000fc8:	240238e0 	.word	0x240238e0
 8000fcc:	240237e8 	.word	0x240237e8
 8000fd0:	240237e4 	.word	0x240237e4

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b09c      	sub	sp, #112	; 0x70
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	224c      	movs	r2, #76	; 0x4c
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00b ff38 	bl	800ce58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2220      	movs	r2, #32
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00b ff32 	bl	800ce58 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ff4:	2004      	movs	r0, #4
 8000ff6:	f004 ffa7 	bl	8005f48 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <SystemClock_Config+0x100>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a34      	ldr	r2, [pc, #208]	; (80010d4 <SystemClock_Config+0x100>)
 8001004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <SystemClock_Config+0x100>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <SystemClock_Config+0x104>)
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <SystemClock_Config+0x104>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <SystemClock_Config+0x104>)
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800102c:	bf00      	nop
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <SystemClock_Config+0x100>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800103a:	d1f8      	bne.n	800102e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <SystemClock_Config+0x108>)
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	f023 0303 	bic.w	r3, r3, #3
 8001044:	4a25      	ldr	r2, [pc, #148]	; (80010dc <SystemClock_Config+0x108>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800104c:	2309      	movs	r3, #9
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001050:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001056:	2301      	movs	r3, #1
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105e:	2302      	movs	r3, #2
 8001060:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001066:	2319      	movs	r3, #25
 8001068:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800106a:	2302      	movs	r3, #2
 800106c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800106e:	2302      	movs	r3, #2
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001076:	230c      	movs	r3, #12
 8001078:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800107a:	2300      	movs	r3, #0
 800107c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4618      	mov	r0, r3
 8001088:	f004 ffc8 	bl	800601c <HAL_RCC_OscConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001092:	f000 fb8f 	bl	80017b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001096:	233f      	movs	r3, #63	; 0x3f
 8001098:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109a:	2303      	movs	r3, #3
 800109c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010a6:	2340      	movs	r3, #64	; 0x40
 80010a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010aa:	2340      	movs	r3, #64	; 0x40
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010b4:	2340      	movs	r3, #64	; 0x40
 80010b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f005 fbbd 	bl	800683c <HAL_RCC_ClockConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80010c8:	f000 fb74 	bl	80017b4 <Error_Handler>
  }
}
 80010cc:	bf00      	nop
 80010ce:	3770      	adds	r7, #112	; 0x70
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	58024800 	.word	0x58024800
 80010d8:	58000400 	.word	0x58000400
 80010dc:	58024400 	.word	0x58024400

080010e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <MX_ETH_Init+0x80>)
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <MX_ETH_Init+0x84>)
 80010e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_ETH_Init+0x88>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_ETH_Init+0x88>)
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_ETH_Init+0x88>)
 80010f8:	22e1      	movs	r2, #225	; 0xe1
 80010fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_ETH_Init+0x88>)
 80010fe:	2200      	movs	r2, #0
 8001100:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_ETH_Init+0x88>)
 8001104:	2200      	movs	r2, #0
 8001106:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_ETH_Init+0x88>)
 800110a:	2200      	movs	r2, #0
 800110c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_ETH_Init+0x80>)
 8001110:	4a15      	ldr	r2, [pc, #84]	; (8001168 <MX_ETH_Init+0x88>)
 8001112:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_ETH_Init+0x80>)
 8001116:	2201      	movs	r2, #1
 8001118:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_ETH_Init+0x80>)
 800111c:	4a13      	ldr	r2, [pc, #76]	; (800116c <MX_ETH_Init+0x8c>)
 800111e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_ETH_Init+0x80>)
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <MX_ETH_Init+0x90>)
 8001124:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_ETH_Init+0x80>)
 8001128:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800112c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <MX_ETH_Init+0x80>)
 8001130:	f003 ffb4 	bl	800509c <HAL_ETH_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800113a:	f000 fb3b 	bl	80017b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800113e:	2234      	movs	r2, #52	; 0x34
 8001140:	2100      	movs	r1, #0
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_ETH_Init+0x94>)
 8001144:	f00b fe88 	bl	800ce58 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_ETH_Init+0x94>)
 800114a:	2221      	movs	r2, #33	; 0x21
 800114c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_ETH_Init+0x94>)
 8001150:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001154:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_ETH_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	240238f4 	.word	0x240238f4
 8001164:	40028000 	.word	0x40028000
 8001168:	24023254 	.word	0x24023254
 800116c:	240171bc 	.word	0x240171bc
 8001170:	2401715c 	.word	0x2401715c
 8001174:	2402397c 	.word	0x2402397c

08001178 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b090      	sub	sp, #64	; 0x40
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800117e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2228      	movs	r2, #40	; 0x28
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f00b fe5d 	bl	800ce58 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800119e:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <MX_RTC_Init+0x118>)
 80011a0:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <MX_RTC_Init+0x11c>)
 80011a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <MX_RTC_Init+0x118>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <MX_RTC_Init+0x118>)
 80011ac:	227f      	movs	r2, #127	; 0x7f
 80011ae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <MX_RTC_Init+0x118>)
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <MX_RTC_Init+0x118>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <MX_RTC_Init+0x118>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <MX_RTC_Init+0x118>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <MX_RTC_Init+0x118>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011ce:	4830      	ldr	r0, [pc, #192]	; (8001290 <MX_RTC_Init+0x118>)
 80011d0:	f007 fa22 	bl	8008618 <HAL_RTC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80011da:	f000 faeb 	bl	80017b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	2201      	movs	r2, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	4823      	ldr	r0, [pc, #140]	; (8001290 <MX_RTC_Init+0x118>)
 8001202:	f007 fa81 	bl	8008708 <HAL_RTC_SetTime>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800120c:	f000 fad2 	bl	80017b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001210:	2301      	movs	r3, #1
 8001212:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001216:	2301      	movs	r3, #1
 8001218:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800121c:	2301      	movs	r3, #1
 800121e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001222:	2300      	movs	r3, #0
 8001224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	4817      	ldr	r0, [pc, #92]	; (8001290 <MX_RTC_Init+0x118>)
 8001232:	f007 fb63 	bl	80088fc <HAL_RTC_SetDate>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800123c:	f000 faba 	bl	80017b4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001240:	2300      	movs	r3, #0
 8001242:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001244:	2300      	movs	r3, #0
 8001246:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001248:	2300      	movs	r3, #0
 800124a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_RTC_Init+0x120>)
 800125a:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001264:	2301      	movs	r3, #1
 8001266:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800126a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	2201      	movs	r2, #1
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_RTC_Init+0x118>)
 8001278:	f007 fc16 	bl	8008aa8 <HAL_RTC_SetAlarm_IT>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001282:	f000 fa97 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3740      	adds	r7, #64	; 0x40
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	240237e8 	.word	0x240237e8
 8001294:	58004000 	.word	0x58004000
 8001298:	00808080 	.word	0x00808080

0800129c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <MX_SPI1_Init+0xac>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012d2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80012d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001300:	2200      	movs	r2, #0
 8001302:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001306:	2200      	movs	r2, #0
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_SPI1_Init+0xa8>)
 800130c:	2200      	movs	r2, #0
 800130e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001312:	2200      	movs	r2, #0
 8001314:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001318:	2200      	movs	r2, #0
 800131a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_SPI1_Init+0xa8>)
 800131e:	2200      	movs	r2, #0
 8001320:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_SPI1_Init+0xa8>)
 800132c:	2200      	movs	r2, #0
 800132e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001332:	f007 fe23 	bl	8008f7c <HAL_SPI_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800133c:	f000 fa3a 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	24023858 	.word	0x24023858
 8001348:	40013000 	.word	0x40013000

0800134c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b09a      	sub	sp, #104	; 0x68
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	222c      	movs	r2, #44	; 0x2c
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f00b fd66 	bl	800ce58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138c:	4b43      	ldr	r3, [pc, #268]	; (800149c <MX_TIM1_Init+0x150>)
 800138e:	4a44      	ldr	r2, [pc, #272]	; (80014a0 <MX_TIM1_Init+0x154>)
 8001390:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001392:	4b42      	ldr	r3, [pc, #264]	; (800149c <MX_TIM1_Init+0x150>)
 8001394:	2200      	movs	r2, #0
 8001396:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <MX_TIM1_Init+0x150>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800139e:	4b3f      	ldr	r3, [pc, #252]	; (800149c <MX_TIM1_Init+0x150>)
 80013a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80013a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <MX_TIM1_Init+0x150>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <MX_TIM1_Init+0x150>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <MX_TIM1_Init+0x150>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b8:	4838      	ldr	r0, [pc, #224]	; (800149c <MX_TIM1_Init+0x150>)
 80013ba:	f008 fd82 	bl	8009ec2 <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 f9f6 	bl	80017b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013d2:	4619      	mov	r1, r3
 80013d4:	4831      	ldr	r0, [pc, #196]	; (800149c <MX_TIM1_Init+0x150>)
 80013d6:	f009 f8ad 	bl	800a534 <HAL_TIM_ConfigClockSource>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013e0:	f000 f9e8 	bl	80017b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e4:	482d      	ldr	r0, [pc, #180]	; (800149c <MX_TIM1_Init+0x150>)
 80013e6:	f008 fe2b 	bl	800a040 <HAL_TIM_PWM_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013f0:	f000 f9e0 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001400:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001404:	4619      	mov	r1, r3
 8001406:	4825      	ldr	r0, [pc, #148]	; (800149c <MX_TIM1_Init+0x150>)
 8001408:	f009 fdb4 	bl	800af74 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001412:	f000 f9cf 	bl	80017b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001416:	2360      	movs	r3, #96	; 0x60
 8001418:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001422:	2300      	movs	r3, #0
 8001424:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	4818      	ldr	r0, [pc, #96]	; (800149c <MX_TIM1_Init+0x150>)
 800143c:	f008 ff6a 	bl	800a314 <HAL_TIM_PWM_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001446:	f000 f9b5 	bl	80017b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800145e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001462:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800146c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <MX_TIM1_Init+0x150>)
 8001480:	f009 fe00 	bl	800b084 <HAL_TIMEx_ConfigBreakDeadTime>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800148a:	f000 f993 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <MX_TIM1_Init+0x150>)
 8001490:	f000 fb9c 	bl	8001bcc <HAL_TIM_MspPostInit>

}
 8001494:	bf00      	nop
 8001496:	3768      	adds	r7, #104	; 0x68
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2402380c 	.word	0x2402380c
 80014a0:	40010000 	.word	0x40010000

080014a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <MX_USART3_UART_Init+0x94>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014ee:	f009 fe47 	bl	800b180 <HAL_UART_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014f8:	f000 f95c 	bl	80017b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001500:	f00b f8ef 	bl	800c6e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800150a:	f000 f953 	bl	80017b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150e:	2100      	movs	r1, #0
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001512:	f00b f924 	bl	800c75e <HAL_UARTEx_SetRxFifoThreshold>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800151c:	f000 f94a 	bl	80017b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001522:	f00b f8a5 	bl	800c670 <HAL_UARTEx_DisableFifoMode>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800152c:	f000 f942 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	240232d4 	.word	0x240232d4
 8001538:	40004800 	.word	0x40004800

0800153c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001542:	4a16      	ldr	r2, [pc, #88]	; (800159c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001544:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001548:	2209      	movs	r2, #9
 800154a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800154e:	2202      	movs	r2, #2
 8001550:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800155a:	2202      	movs	r2, #2
 800155c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001560:	2200      	movs	r2, #0
 8001562:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001566:	2200      	movs	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001572:	2201      	movs	r2, #1
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001578:	2201      	movs	r2, #1
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800157e:	2200      	movs	r2, #0
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001584:	f004 fb98 	bl	8005cb8 <HAL_PCD_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800158e:	f000 f911 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	24023364 	.word	0x24023364
 800159c:	40080000 	.word	0x40080000

080015a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <MX_DMA_Init+0x5c>)
 80015a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <MX_DMA_Init+0x5c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_DMA_Init+0x5c>)
 80015b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	200b      	movs	r0, #11
 80015ca:	f000 fed8 	bl	800237e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015ce:	200b      	movs	r0, #11
 80015d0:	f000 feef 	bl	80023b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	200c      	movs	r0, #12
 80015da:	f000 fed0 	bl	800237e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015de:	200c      	movs	r0, #12
 80015e0:	f000 fee7 	bl	80023b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	200d      	movs	r0, #13
 80015ea:	f000 fec8 	bl	800237e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80015ee:	200d      	movs	r0, #13
 80015f0:	f000 fedf 	bl	80023b2 <HAL_NVIC_EnableIRQ>

}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	58024400 	.word	0x58024400

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	4a60      	ldr	r2, [pc, #384]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001626:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
 8001632:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001634:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	4a59      	ldr	r2, [pc, #356]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 800163c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001662:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	4a4a      	ldr	r2, [pc, #296]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168e:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	4a42      	ldr	r2, [pc, #264]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	4a3b      	ldr	r2, [pc, #236]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016b4:	f043 0308 	orr.w	r3, r3, #8
 80016b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2101      	movs	r1, #1
 80016ec:	482d      	ldr	r0, [pc, #180]	; (80017a4 <MX_GPIO_Init+0x1a4>)
 80016ee:	f004 fa9b 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f8:	482b      	ldr	r0, [pc, #172]	; (80017a8 <MX_GPIO_Init+0x1a8>)
 80016fa:	f004 fa95 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001704:	4828      	ldr	r0, [pc, #160]	; (80017a8 <MX_GPIO_Init+0x1a8>)
 8001706:	f004 fa8f 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001710:	4826      	ldr	r0, [pc, #152]	; (80017ac <MX_GPIO_Init+0x1ac>)
 8001712:	f004 fa89 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171c:	4824      	ldr	r0, [pc, #144]	; (80017b0 <MX_GPIO_Init+0x1b0>)
 800171e:	f004 fa83 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001722:	2301      	movs	r3, #1
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	481a      	ldr	r0, [pc, #104]	; (80017a4 <MX_GPIO_Init+0x1a4>)
 800173a:	f004 f8c5 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 800173e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <MX_GPIO_Init+0x1a8>)
 8001758:	f004 f8b6 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led3_Pin led2_Pin led1_Pin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 800175c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <MX_GPIO_Init+0x1ac>)
 8001776:	f004 f8a7 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800177a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <MX_GPIO_Init+0x1b0>)
 8001794:	f004 f898 	bl	80058c8 <HAL_GPIO_Init>

}
 8001798:	bf00      	nop
 800179a:	3730      	adds	r7, #48	; 0x30
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	58024400 	.word	0x58024400
 80017a4:	58020400 	.word	0x58020400
 80017a8:	58020c00 	.word	0x58020c00
 80017ac:	58020800 	.word	0x58020800
 80017b0:	58021800 	.word	0x58021800

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>
	...

080017c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_MspInit+0x30>)
 80017c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017cc:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_MspInit+0x30>)
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_MspInit+0x30>)
 80017d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	58024400 	.word	0x58024400

080017f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08e      	sub	sp, #56	; 0x38
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a59      	ldr	r2, [pc, #356]	; (8001978 <HAL_ETH_MspInit+0x184>)
 8001812:	4293      	cmp	r3, r2
 8001814:	f040 80ab 	bne.w	800196e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_ETH_MspInit+0x188>)
 800181a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800181e:	4a57      	ldr	r2, [pc, #348]	; (800197c <HAL_ETH_MspInit+0x188>)
 8001820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001824:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001828:	4b54      	ldr	r3, [pc, #336]	; (800197c <HAL_ETH_MspInit+0x188>)
 800182a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800182e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001832:	623b      	str	r3, [r7, #32]
 8001834:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <HAL_ETH_MspInit+0x188>)
 8001838:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800183c:	4a4f      	ldr	r2, [pc, #316]	; (800197c <HAL_ETH_MspInit+0x188>)
 800183e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001842:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001846:	4b4d      	ldr	r3, [pc, #308]	; (800197c <HAL_ETH_MspInit+0x188>)
 8001848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001854:	4b49      	ldr	r3, [pc, #292]	; (800197c <HAL_ETH_MspInit+0x188>)
 8001856:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800185a:	4a48      	ldr	r2, [pc, #288]	; (800197c <HAL_ETH_MspInit+0x188>)
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001864:	4b45      	ldr	r3, [pc, #276]	; (800197c <HAL_ETH_MspInit+0x188>)
 8001866:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001872:	4b42      	ldr	r3, [pc, #264]	; (800197c <HAL_ETH_MspInit+0x188>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	4a40      	ldr	r2, [pc, #256]	; (800197c <HAL_ETH_MspInit+0x188>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001882:	4b3e      	ldr	r3, [pc, #248]	; (800197c <HAL_ETH_MspInit+0x188>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b3a      	ldr	r3, [pc, #232]	; (800197c <HAL_ETH_MspInit+0x188>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	4a39      	ldr	r2, [pc, #228]	; (800197c <HAL_ETH_MspInit+0x188>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a0:	4b36      	ldr	r3, [pc, #216]	; (800197c <HAL_ETH_MspInit+0x188>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b33      	ldr	r3, [pc, #204]	; (800197c <HAL_ETH_MspInit+0x188>)
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b4:	4a31      	ldr	r2, [pc, #196]	; (800197c <HAL_ETH_MspInit+0x188>)
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <HAL_ETH_MspInit+0x188>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_ETH_MspInit+0x188>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d2:	4a2a      	ldr	r2, [pc, #168]	; (800197c <HAL_ETH_MspInit+0x188>)
 80018d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <HAL_ETH_MspInit+0x188>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80018ea:	2332      	movs	r3, #50	; 0x32
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018fa:	230b      	movs	r3, #11
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	4619      	mov	r1, r3
 8001904:	481e      	ldr	r0, [pc, #120]	; (8001980 <HAL_ETH_MspInit+0x18c>)
 8001906:	f003 ffdf 	bl	80058c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800190a:	2386      	movs	r3, #134	; 0x86
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800191a:	230b      	movs	r3, #11
 800191c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001922:	4619      	mov	r1, r3
 8001924:	4817      	ldr	r0, [pc, #92]	; (8001984 <HAL_ETH_MspInit+0x190>)
 8001926:	f003 ffcf 	bl	80058c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800192a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800193c:	230b      	movs	r3, #11
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001944:	4619      	mov	r1, r3
 8001946:	4810      	ldr	r0, [pc, #64]	; (8001988 <HAL_ETH_MspInit+0x194>)
 8001948:	f003 ffbe 	bl	80058c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800194c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800195e:	230b      	movs	r3, #11
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <HAL_ETH_MspInit+0x198>)
 800196a:	f003 ffad 	bl	80058c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3738      	adds	r7, #56	; 0x38
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40028000 	.word	0x40028000
 800197c:	58024400 	.word	0x58024400
 8001980:	58020800 	.word	0x58020800
 8001984:	58020000 	.word	0x58020000
 8001988:	58020400 	.word	0x58020400
 800198c:	58021800 	.word	0x58021800

08001990 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b0b2      	sub	sp, #200	; 0xc8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	22bc      	movs	r2, #188	; 0xbc
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00b fa59 	bl	800ce58 <memset>
  if(hrtc->Instance==RTC)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <HAL_RTC_MspInit+0x68>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d11e      	bne.n	80019ee <HAL_RTC_MspInit+0x5e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	4618      	mov	r0, r3
 80019c4:	f005 fac6 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80019ce:	f7ff fef1 	bl	80017b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_RTC_MspInit+0x6c>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <HAL_RTC_MspInit+0x6c>)
 80019d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2029      	movs	r0, #41	; 0x29
 80019e4:	f000 fccb 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019e8:	2029      	movs	r0, #41	; 0x29
 80019ea:	f000 fce2 	bl	80023b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	37c8      	adds	r7, #200	; 0xc8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	58004000 	.word	0x58004000
 80019fc:	58024400 	.word	0x58024400

08001a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0ba      	sub	sp, #232	; 0xe8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f107 0318 	add.w	r3, r7, #24
 8001a1c:	22bc      	movs	r2, #188	; 0xbc
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00b fa19 	bl	800ce58 <memset>
  if(hspi->Instance==SPI1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <HAL_SPI_MspInit+0x170>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	f040 809b 	bne.w	8001b68 <HAL_SPI_MspInit+0x168>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3c:	f107 0318 	add.w	r3, r7, #24
 8001a40:	4618      	mov	r0, r3
 8001a42:	f005 fa87 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001a4c:	f7ff feb2 	bl	80017b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a50:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <HAL_SPI_MspInit+0x174>)
 8001a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a56:	4a47      	ldr	r2, [pc, #284]	; (8001b74 <HAL_SPI_MspInit+0x174>)
 8001a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a60:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <HAL_SPI_MspInit+0x174>)
 8001a62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_SPI_MspInit+0x174>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	4a3f      	ldr	r2, [pc, #252]	; (8001b74 <HAL_SPI_MspInit+0x174>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_SPI_MspInit+0x174>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_SPI_MspInit+0x174>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <HAL_SPI_MspInit+0x174>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9c:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <HAL_SPI_MspInit+0x174>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001acc:	4619      	mov	r1, r3
 8001ace:	482a      	ldr	r0, [pc, #168]	; (8001b78 <HAL_SPI_MspInit+0x178>)
 8001ad0:	f003 fefa 	bl	80058c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aec:	2305      	movs	r3, #5
 8001aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001af6:	4619      	mov	r1, r3
 8001af8:	4820      	ldr	r0, [pc, #128]	; (8001b7c <HAL_SPI_MspInit+0x17c>)
 8001afa:	f003 fee5 	bl	80058c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b00:	4a20      	ldr	r2, [pc, #128]	; (8001b84 <HAL_SPI_MspInit+0x184>)
 8001b02:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b06:	2226      	movs	r2, #38	; 0x26
 8001b08:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b0c:	2240      	movs	r2, #64	; 0x40
 8001b0e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b1c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b3c:	4810      	ldr	r0, [pc, #64]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b3e:	f000 fc67 	bl	8002410 <HAL_DMA_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8001b48:	f7ff fe34 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b50:	679a      	str	r2, [r3, #120]	; 0x78
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <HAL_SPI_MspInit+0x180>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2023      	movs	r0, #35	; 0x23
 8001b5e:	f000 fc0e 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b62:	2023      	movs	r0, #35	; 0x23
 8001b64:	f000 fc25 	bl	80023b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	37e8      	adds	r7, #232	; 0xe8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40013000 	.word	0x40013000
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58020000 	.word	0x58020000
 8001b7c:	58020400 	.word	0x58020400
 8001b80:	240239b0 	.word	0x240239b0
 8001b84:	40020010 	.word	0x40020010

08001b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10e      	bne.n	8001bb8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_TIM_Base_MspInit+0x40>)
 8001b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba0:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <HAL_TIM_Base_MspInit+0x40>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_TIM_Base_MspInit+0x40>)
 8001bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	58024400 	.word	0x58024400

08001bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <HAL_TIM_MspPostInit+0x6c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d11f      	bne.n	8001c2e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_TIM_MspPostInit+0x70>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <HAL_TIM_MspPostInit+0x70>)
 8001bf6:	f043 0310 	orr.w	r3, r3, #16
 8001bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_TIM_MspPostInit+0x70>)
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <HAL_TIM_MspPostInit+0x74>)
 8001c2a:	f003 fe4d 	bl	80058c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c2e:	bf00      	nop
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	58024400 	.word	0x58024400
 8001c40:	58021000 	.word	0x58021000

08001c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0b8      	sub	sp, #224	; 0xe0
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	22bc      	movs	r2, #188	; 0xbc
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f00b f8f7 	bl	800ce58 <memset>
  if(huart->Instance==USART3)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a57      	ldr	r2, [pc, #348]	; (8001dcc <HAL_UART_MspInit+0x188>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f040 80a6 	bne.w	8001dc2 <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c76:	2302      	movs	r3, #2
 8001c78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	4618      	mov	r0, r3
 8001c86:	f005 f965 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c90:	f7ff fd90 	bl	80017b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c94:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <HAL_UART_MspInit+0x18c>)
 8001c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c9a:	4a4d      	ldr	r2, [pc, #308]	; (8001dd0 <HAL_UART_MspInit+0x18c>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_UART_MspInit+0x18c>)
 8001ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_UART_MspInit+0x18c>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	4a45      	ldr	r2, [pc, #276]	; (8001dd0 <HAL_UART_MspInit+0x18c>)
 8001cba:	f043 0308 	orr.w	r3, r3, #8
 8001cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_UART_MspInit+0x18c>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001cd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cea:	2307      	movs	r3, #7
 8001cec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4837      	ldr	r0, [pc, #220]	; (8001dd4 <HAL_UART_MspInit+0x190>)
 8001cf8:	f003 fde6 	bl	80058c8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001cfc:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001cfe:	4a37      	ldr	r2, [pc, #220]	; (8001ddc <HAL_UART_MspInit+0x198>)
 8001d00:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d04:	222d      	movs	r2, #45	; 0x2d
 8001d06:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d08:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0e:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d1c:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d22:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d3c:	4826      	ldr	r0, [pc, #152]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d3e:	f000 fb67 	bl	8002410 <HAL_DMA_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001d48:	f7ff fd34 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d50:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d52:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <HAL_UART_MspInit+0x194>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001d58:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d5a:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <HAL_UART_MspInit+0x1a0>)
 8001d5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d60:	222e      	movs	r2, #46	; 0x2e
 8001d62:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d66:	2240      	movs	r2, #64	; 0x40
 8001d68:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d76:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001d96:	4812      	ldr	r0, [pc, #72]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001d98:	f000 fb3a 	bl	8002410 <HAL_DMA_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001da2:	f7ff fd07 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001daa:	679a      	str	r2, [r3, #120]	; 0x78
 8001dac:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <HAL_UART_MspInit+0x19c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	2027      	movs	r0, #39	; 0x27
 8001db8:	f000 fae1 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dbc:	2027      	movs	r0, #39	; 0x27
 8001dbe:	f000 faf8 	bl	80023b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	37e0      	adds	r7, #224	; 0xe0
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40004800 	.word	0x40004800
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	58020c00 	.word	0x58020c00
 8001dd8:	2402325c 	.word	0x2402325c
 8001ddc:	40020028 	.word	0x40020028
 8001de0:	2402376c 	.word	0x2402376c
 8001de4:	40020040 	.word	0x40020040

08001de8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0b8      	sub	sp, #224	; 0xe0
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	22bc      	movs	r2, #188	; 0xbc
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00b f825 	bl	800ce58 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a37      	ldr	r2, [pc, #220]	; (8001ef0 <HAL_PCD_MspInit+0x108>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d166      	bne.n	8001ee6 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001e22:	2312      	movs	r3, #18
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e26:	2302      	movs	r3, #2
 8001e28:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001e32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001e38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e3c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001e3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f005 f882 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001e56:	f7ff fcad 	bl	80017b4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e5a:	f004 f8cf 	bl	8005ffc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_PCD_MspInit+0x10c>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <HAL_PCD_MspInit+0x10c>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_PCD_MspInit+0x10c>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e7c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001e96:	230a      	movs	r3, #10
 8001e98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4815      	ldr	r0, [pc, #84]	; (8001ef8 <HAL_PCD_MspInit+0x110>)
 8001ea4:	f003 fd10 	bl	80058c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <HAL_PCD_MspInit+0x110>)
 8001ec4:	f003 fd00 	bl	80058c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_PCD_MspInit+0x10c>)
 8001eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_PCD_MspInit+0x10c>)
 8001ed0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ed4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_PCD_MspInit+0x10c>)
 8001eda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	37e0      	adds	r7, #224	; 0xe0
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40080000 	.word	0x40080000
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58020000 	.word	0x58020000

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <NMI_Handler+0x4>

08001f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f000 f8da 	bl	8002100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <DMA1_Stream0_IRQHandler+0x10>)
 8001f56:	f001 fd83 	bl	8003a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	240239b0 	.word	0x240239b0

08001f64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA1_Stream1_IRQHandler+0x10>)
 8001f6a:	f001 fd79 	bl	8003a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2402325c 	.word	0x2402325c

08001f78 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA1_Stream2_IRQHandler+0x10>)
 8001f7e:	f001 fd6f 	bl	8003a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2402376c 	.word	0x2402376c

08001f8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <SPI1_IRQHandler+0x10>)
 8001f92:	f007 fc2d 	bl	80097f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	24023858 	.word	0x24023858

08001fa0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <USART3_IRQHandler+0x10>)
 8001fa6:	f009 f93b 	bl	800b220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	240232d4 	.word	0x240232d4

08001fb4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <RTC_Alarm_IRQHandler+0x10>)
 8001fba:	f006 feab 	bl	8008d14 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	240237e8 	.word	0x240237e8

08001fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002000 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fcc:	f7fe fb00 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd0:	480c      	ldr	r0, [pc, #48]	; (8002004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fd2:	490d      	ldr	r1, [pc, #52]	; (8002008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	; (8002014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f00a fefd 	bl	800cdf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffa:	f7fe fe2b 	bl	8000c54 <main>
  bx  lr
 8001ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002000:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002004:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002008:	2401715c 	.word	0x2401715c
  ldr r2, =_sidata
 800200c:	0800ced0 	.word	0x0800ced0
  ldr r2, =_sbss
 8002010:	2401721c 	.word	0x2401721c
  ldr r4, =_ebss
 8002014:	24023a2c 	.word	0x24023a2c

08002018 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC3_IRQHandler>
	...

0800201c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002022:	2003      	movs	r0, #3
 8002024:	f000 f9a0 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002028:	f004 fdbe 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_Init+0x68>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	4913      	ldr	r1, [pc, #76]	; (8002088 <HAL_Init+0x6c>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
 8002044:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_Init+0x68>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_Init+0x6c>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <HAL_Init+0x70>)
 800205e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002060:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_Init+0x74>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002066:	2000      	movs	r0, #0
 8002068:	f000 f814 	bl	8002094 <HAL_InitTick>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e002      	b.n	800207c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002076:	f7ff fba3 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	58024400 	.word	0x58024400
 8002088:	0800ce80 	.word	0x0800ce80
 800208c:	24000004 	.word	0x24000004
 8002090:	24000000 	.word	0x24000000

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_InitTick+0x60>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e021      	b.n	80020ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_InitTick+0x64>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_InitTick+0x60>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f985 	bl	80023ce <HAL_SYSTICK_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00e      	b.n	80020ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	d80a      	bhi.n	80020ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d4:	2200      	movs	r2, #0
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f000 f94f 	bl	800237e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <HAL_InitTick+0x68>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	24017158 	.word	0x24017158
 80020f8:	24000000 	.word	0x24000000
 80020fc:	24017154 	.word	0x24017154

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	24017158 	.word	0x24017158
 8002124:	24023a28 	.word	0x24023a28

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	24023a28 	.word	0x24023a28

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d005      	beq.n	8002166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_Delay+0x44>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002166:	bf00      	nop
 8002168:	f7ff ffde 	bl	8002128 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8f7      	bhi.n	8002168 <HAL_Delay+0x28>
  {
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	24017158 	.word	0x24017158

08002188 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_GetREVID+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0c1b      	lsrs	r3, r3, #16
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	5c001000 	.word	0x5c001000

080021a0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80021b0:	4904      	ldr	r1, [pc, #16]	; (80021c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	58000400 	.word	0x58000400

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <__NVIC_SetPriorityGrouping+0x40>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <__NVIC_SetPriorityGrouping+0x40>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00
 800220c:	05fa0000 	.word	0x05fa0000

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	; (8002264 <__NVIC_EnableIRQ+0x38>)
 8002246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	; (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	; (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002334:	d301      	bcc.n	800233a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <SysTick_Config+0x40>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002342:	210f      	movs	r1, #15
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f7ff ff8e 	bl	8002268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <SysTick_Config+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <SysTick_Config+0x40>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff29 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800238c:	f7ff ff40 	bl	8002210 <__NVIC_GetPriorityGrouping>
 8002390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f7ff ff90 	bl	80022bc <NVIC_EncodePriority>
 800239c:	4602      	mov	r2, r0
 800239e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff5f 	bl	8002268 <__NVIC_SetPriority>
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff33 	bl	800222c <__NVIC_EnableIRQ>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ffa4 	bl	8002324 <SysTick_Config>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_GetCurrentCPUID+0x24>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	2b07      	cmp	r3, #7
 80023f8:	d101      	bne.n	80023fe <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e000      	b.n	8002400 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80023fe:	2301      	movs	r3, #1
  }
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff fe86 	bl	8002128 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e316      	b.n	8002a56 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a66      	ldr	r2, [pc, #408]	; (80025c8 <HAL_DMA_Init+0x1b8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d04a      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a65      	ldr	r2, [pc, #404]	; (80025cc <HAL_DMA_Init+0x1bc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d045      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a63      	ldr	r2, [pc, #396]	; (80025d0 <HAL_DMA_Init+0x1c0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d040      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a62      	ldr	r2, [pc, #392]	; (80025d4 <HAL_DMA_Init+0x1c4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d03b      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a60      	ldr	r2, [pc, #384]	; (80025d8 <HAL_DMA_Init+0x1c8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d036      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a5f      	ldr	r2, [pc, #380]	; (80025dc <HAL_DMA_Init+0x1cc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d031      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a5d      	ldr	r2, [pc, #372]	; (80025e0 <HAL_DMA_Init+0x1d0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d02c      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a5c      	ldr	r2, [pc, #368]	; (80025e4 <HAL_DMA_Init+0x1d4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d027      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5a      	ldr	r2, [pc, #360]	; (80025e8 <HAL_DMA_Init+0x1d8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d022      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a59      	ldr	r2, [pc, #356]	; (80025ec <HAL_DMA_Init+0x1dc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d01d      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a57      	ldr	r2, [pc, #348]	; (80025f0 <HAL_DMA_Init+0x1e0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d018      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a56      	ldr	r2, [pc, #344]	; (80025f4 <HAL_DMA_Init+0x1e4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d013      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a54      	ldr	r2, [pc, #336]	; (80025f8 <HAL_DMA_Init+0x1e8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00e      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a53      	ldr	r2, [pc, #332]	; (80025fc <HAL_DMA_Init+0x1ec>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a51      	ldr	r2, [pc, #324]	; (8002600 <HAL_DMA_Init+0x1f0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_DMA_Init+0xb8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a50      	ldr	r2, [pc, #320]	; (8002604 <HAL_DMA_Init+0x1f4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_DMA_Init+0xbc>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_DMA_Init+0xbe>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 813b 	beq.w	800274a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a37      	ldr	r2, [pc, #220]	; (80025c8 <HAL_DMA_Init+0x1b8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d04a      	beq.n	8002584 <HAL_DMA_Init+0x174>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a36      	ldr	r2, [pc, #216]	; (80025cc <HAL_DMA_Init+0x1bc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d045      	beq.n	8002584 <HAL_DMA_Init+0x174>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a34      	ldr	r2, [pc, #208]	; (80025d0 <HAL_DMA_Init+0x1c0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d040      	beq.n	8002584 <HAL_DMA_Init+0x174>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <HAL_DMA_Init+0x1c4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d03b      	beq.n	8002584 <HAL_DMA_Init+0x174>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a31      	ldr	r2, [pc, #196]	; (80025d8 <HAL_DMA_Init+0x1c8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d036      	beq.n	8002584 <HAL_DMA_Init+0x174>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a30      	ldr	r2, [pc, #192]	; (80025dc <HAL_DMA_Init+0x1cc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d031      	beq.n	8002584 <HAL_DMA_Init+0x174>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a2e      	ldr	r2, [pc, #184]	; (80025e0 <HAL_DMA_Init+0x1d0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d02c      	beq.n	8002584 <HAL_DMA_Init+0x174>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a2d      	ldr	r2, [pc, #180]	; (80025e4 <HAL_DMA_Init+0x1d4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d027      	beq.n	8002584 <HAL_DMA_Init+0x174>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2b      	ldr	r2, [pc, #172]	; (80025e8 <HAL_DMA_Init+0x1d8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d022      	beq.n	8002584 <HAL_DMA_Init+0x174>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2a      	ldr	r2, [pc, #168]	; (80025ec <HAL_DMA_Init+0x1dc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d01d      	beq.n	8002584 <HAL_DMA_Init+0x174>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <HAL_DMA_Init+0x1e0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d018      	beq.n	8002584 <HAL_DMA_Init+0x174>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_DMA_Init+0x1e4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d013      	beq.n	8002584 <HAL_DMA_Init+0x174>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <HAL_DMA_Init+0x1e8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00e      	beq.n	8002584 <HAL_DMA_Init+0x174>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a24      	ldr	r2, [pc, #144]	; (80025fc <HAL_DMA_Init+0x1ec>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_DMA_Init+0x174>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a22      	ldr	r2, [pc, #136]	; (8002600 <HAL_DMA_Init+0x1f0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d004      	beq.n	8002584 <HAL_DMA_Init+0x174>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a21      	ldr	r2, [pc, #132]	; (8002604 <HAL_DMA_Init+0x1f4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d108      	bne.n	8002596 <HAL_DMA_Init+0x186>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e007      	b.n	80025a6 <HAL_DMA_Init+0x196>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0201 	bic.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025a6:	e02f      	b.n	8002608 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a8:	f7ff fdbe 	bl	8002128 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d928      	bls.n	8002608 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2203      	movs	r2, #3
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e246      	b.n	8002a56 <HAL_DMA_Init+0x646>
 80025c8:	40020010 	.word	0x40020010
 80025cc:	40020028 	.word	0x40020028
 80025d0:	40020040 	.word	0x40020040
 80025d4:	40020058 	.word	0x40020058
 80025d8:	40020070 	.word	0x40020070
 80025dc:	40020088 	.word	0x40020088
 80025e0:	400200a0 	.word	0x400200a0
 80025e4:	400200b8 	.word	0x400200b8
 80025e8:	40020410 	.word	0x40020410
 80025ec:	40020428 	.word	0x40020428
 80025f0:	40020440 	.word	0x40020440
 80025f4:	40020458 	.word	0x40020458
 80025f8:	40020470 	.word	0x40020470
 80025fc:	40020488 	.word	0x40020488
 8002600:	400204a0 	.word	0x400204a0
 8002604:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1c8      	bne.n	80025a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4b83      	ldr	r3, [pc, #524]	; (8002830 <HAL_DMA_Init+0x420>)
 8002622:	4013      	ands	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800262e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002646:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	2b04      	cmp	r3, #4
 800265a:	d107      	bne.n	800266c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4313      	orrs	r3, r2
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800266c:	4b71      	ldr	r3, [pc, #452]	; (8002834 <HAL_DMA_Init+0x424>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b71      	ldr	r3, [pc, #452]	; (8002838 <HAL_DMA_Init+0x428>)
 8002672:	4013      	ands	r3, r2
 8002674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002678:	d328      	bcc.n	80026cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b28      	cmp	r3, #40	; 0x28
 8002680:	d903      	bls.n	800268a <HAL_DMA_Init+0x27a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b2e      	cmp	r3, #46	; 0x2e
 8002688:	d917      	bls.n	80026ba <HAL_DMA_Init+0x2aa>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b3e      	cmp	r3, #62	; 0x3e
 8002690:	d903      	bls.n	800269a <HAL_DMA_Init+0x28a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b42      	cmp	r3, #66	; 0x42
 8002698:	d90f      	bls.n	80026ba <HAL_DMA_Init+0x2aa>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b46      	cmp	r3, #70	; 0x46
 80026a0:	d903      	bls.n	80026aa <HAL_DMA_Init+0x29a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b48      	cmp	r3, #72	; 0x48
 80026a8:	d907      	bls.n	80026ba <HAL_DMA_Init+0x2aa>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b4e      	cmp	r3, #78	; 0x4e
 80026b0:	d905      	bls.n	80026be <HAL_DMA_Init+0x2ae>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b52      	cmp	r3, #82	; 0x52
 80026b8:	d801      	bhi.n	80026be <HAL_DMA_Init+0x2ae>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_DMA_Init+0x2b0>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f023 0307 	bic.w	r3, r3, #7
 80026e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d117      	bne.n	8002726 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f002 fb3d 	bl	8004d88 <DMA_CheckFifoParam>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e197      	b.n	8002a56 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f002 fa78 	bl	8004c24 <DMA_CalcBaseAndBitshift>
 8002734:	4603      	mov	r3, r0
 8002736:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	223f      	movs	r2, #63	; 0x3f
 8002742:	409a      	lsls	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	e0cd      	b.n	80028e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3b      	ldr	r2, [pc, #236]	; (800283c <HAL_DMA_Init+0x42c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d022      	beq.n	800279a <HAL_DMA_Init+0x38a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a39      	ldr	r2, [pc, #228]	; (8002840 <HAL_DMA_Init+0x430>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01d      	beq.n	800279a <HAL_DMA_Init+0x38a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a38      	ldr	r2, [pc, #224]	; (8002844 <HAL_DMA_Init+0x434>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d018      	beq.n	800279a <HAL_DMA_Init+0x38a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a36      	ldr	r2, [pc, #216]	; (8002848 <HAL_DMA_Init+0x438>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_DMA_Init+0x38a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a35      	ldr	r2, [pc, #212]	; (800284c <HAL_DMA_Init+0x43c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00e      	beq.n	800279a <HAL_DMA_Init+0x38a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a33      	ldr	r2, [pc, #204]	; (8002850 <HAL_DMA_Init+0x440>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d009      	beq.n	800279a <HAL_DMA_Init+0x38a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a32      	ldr	r2, [pc, #200]	; (8002854 <HAL_DMA_Init+0x444>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_DMA_Init+0x38a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a30      	ldr	r2, [pc, #192]	; (8002858 <HAL_DMA_Init+0x448>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_DMA_Init+0x38e>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_DMA_Init+0x390>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8097 	beq.w	80028d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a24      	ldr	r2, [pc, #144]	; (800283c <HAL_DMA_Init+0x42c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d021      	beq.n	80027f4 <HAL_DMA_Init+0x3e4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a22      	ldr	r2, [pc, #136]	; (8002840 <HAL_DMA_Init+0x430>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01c      	beq.n	80027f4 <HAL_DMA_Init+0x3e4>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <HAL_DMA_Init+0x434>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d017      	beq.n	80027f4 <HAL_DMA_Init+0x3e4>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <HAL_DMA_Init+0x438>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d012      	beq.n	80027f4 <HAL_DMA_Init+0x3e4>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1e      	ldr	r2, [pc, #120]	; (800284c <HAL_DMA_Init+0x43c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00d      	beq.n	80027f4 <HAL_DMA_Init+0x3e4>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <HAL_DMA_Init+0x440>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d008      	beq.n	80027f4 <HAL_DMA_Init+0x3e4>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <HAL_DMA_Init+0x444>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <HAL_DMA_Init+0x3e4>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <HAL_DMA_Init+0x448>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_DMA_Init+0x44c>)
 8002812:	4013      	ands	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b40      	cmp	r3, #64	; 0x40
 800281c:	d020      	beq.n	8002860 <HAL_DMA_Init+0x450>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d102      	bne.n	800282c <HAL_DMA_Init+0x41c>
 8002826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800282a:	e01a      	b.n	8002862 <HAL_DMA_Init+0x452>
 800282c:	2300      	movs	r3, #0
 800282e:	e018      	b.n	8002862 <HAL_DMA_Init+0x452>
 8002830:	fe10803f 	.word	0xfe10803f
 8002834:	5c001000 	.word	0x5c001000
 8002838:	ffff0000 	.word	0xffff0000
 800283c:	58025408 	.word	0x58025408
 8002840:	5802541c 	.word	0x5802541c
 8002844:	58025430 	.word	0x58025430
 8002848:	58025444 	.word	0x58025444
 800284c:	58025458 	.word	0x58025458
 8002850:	5802546c 	.word	0x5802546c
 8002854:	58025480 	.word	0x58025480
 8002858:	58025494 	.word	0x58025494
 800285c:	fffe000f 	.word	0xfffe000f
 8002860:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002868:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002870:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002878:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002880:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002888:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002890:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b6e      	ldr	r3, [pc, #440]	; (8002a60 <HAL_DMA_Init+0x650>)
 80028a8:	4413      	add	r3, r2
 80028aa:	4a6e      	ldr	r2, [pc, #440]	; (8002a64 <HAL_DMA_Init+0x654>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	009a      	lsls	r2, r3, #2
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f002 f9b3 	bl	8004c24 <DMA_CalcBaseAndBitshift>
 80028be:	4603      	mov	r3, r0
 80028c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2201      	movs	r2, #1
 80028cc:	409a      	lsls	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e008      	b.n	80028e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2240      	movs	r2, #64	; 0x40
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2203      	movs	r2, #3
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0b7      	b.n	8002a56 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a5f      	ldr	r2, [pc, #380]	; (8002a68 <HAL_DMA_Init+0x658>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d072      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a5d      	ldr	r2, [pc, #372]	; (8002a6c <HAL_DMA_Init+0x65c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d06d      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a5c      	ldr	r2, [pc, #368]	; (8002a70 <HAL_DMA_Init+0x660>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d068      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a5a      	ldr	r2, [pc, #360]	; (8002a74 <HAL_DMA_Init+0x664>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d063      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a59      	ldr	r2, [pc, #356]	; (8002a78 <HAL_DMA_Init+0x668>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d05e      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a57      	ldr	r2, [pc, #348]	; (8002a7c <HAL_DMA_Init+0x66c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d059      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a56      	ldr	r2, [pc, #344]	; (8002a80 <HAL_DMA_Init+0x670>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d054      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a54      	ldr	r2, [pc, #336]	; (8002a84 <HAL_DMA_Init+0x674>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d04f      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a53      	ldr	r2, [pc, #332]	; (8002a88 <HAL_DMA_Init+0x678>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d04a      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a51      	ldr	r2, [pc, #324]	; (8002a8c <HAL_DMA_Init+0x67c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d045      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a50      	ldr	r2, [pc, #320]	; (8002a90 <HAL_DMA_Init+0x680>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d040      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4e      	ldr	r2, [pc, #312]	; (8002a94 <HAL_DMA_Init+0x684>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d03b      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a4d      	ldr	r2, [pc, #308]	; (8002a98 <HAL_DMA_Init+0x688>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d036      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a4b      	ldr	r2, [pc, #300]	; (8002a9c <HAL_DMA_Init+0x68c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d031      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a4a      	ldr	r2, [pc, #296]	; (8002aa0 <HAL_DMA_Init+0x690>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d02c      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a48      	ldr	r2, [pc, #288]	; (8002aa4 <HAL_DMA_Init+0x694>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d027      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a47      	ldr	r2, [pc, #284]	; (8002aa8 <HAL_DMA_Init+0x698>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a45      	ldr	r2, [pc, #276]	; (8002aac <HAL_DMA_Init+0x69c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01d      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a44      	ldr	r2, [pc, #272]	; (8002ab0 <HAL_DMA_Init+0x6a0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d018      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a42      	ldr	r2, [pc, #264]	; (8002ab4 <HAL_DMA_Init+0x6a4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a41      	ldr	r2, [pc, #260]	; (8002ab8 <HAL_DMA_Init+0x6a8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00e      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a3f      	ldr	r2, [pc, #252]	; (8002abc <HAL_DMA_Init+0x6ac>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d009      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a3e      	ldr	r2, [pc, #248]	; (8002ac0 <HAL_DMA_Init+0x6b0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_DMA_Init+0x5c6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a3c      	ldr	r2, [pc, #240]	; (8002ac4 <HAL_DMA_Init+0x6b4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_DMA_Init+0x5ca>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_DMA_Init+0x5cc>
 80029da:	2300      	movs	r3, #0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d032      	beq.n	8002a46 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f002 fa4d 	bl	8004e80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b80      	cmp	r3, #128	; 0x80
 80029ec:	d102      	bne.n	80029f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d010      	beq.n	8002a34 <HAL_DMA_Init+0x624>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d80c      	bhi.n	8002a34 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f002 faca 	bl	8004fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	e008      	b.n	8002a46 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	a7fdabf8 	.word	0xa7fdabf8
 8002a64:	cccccccd 	.word	0xcccccccd
 8002a68:	40020010 	.word	0x40020010
 8002a6c:	40020028 	.word	0x40020028
 8002a70:	40020040 	.word	0x40020040
 8002a74:	40020058 	.word	0x40020058
 8002a78:	40020070 	.word	0x40020070
 8002a7c:	40020088 	.word	0x40020088
 8002a80:	400200a0 	.word	0x400200a0
 8002a84:	400200b8 	.word	0x400200b8
 8002a88:	40020410 	.word	0x40020410
 8002a8c:	40020428 	.word	0x40020428
 8002a90:	40020440 	.word	0x40020440
 8002a94:	40020458 	.word	0x40020458
 8002a98:	40020470 	.word	0x40020470
 8002a9c:	40020488 	.word	0x40020488
 8002aa0:	400204a0 	.word	0x400204a0
 8002aa4:	400204b8 	.word	0x400204b8
 8002aa8:	58025408 	.word	0x58025408
 8002aac:	5802541c 	.word	0x5802541c
 8002ab0:	58025430 	.word	0x58025430
 8002ab4:	58025444 	.word	0x58025444
 8002ab8:	58025458 	.word	0x58025458
 8002abc:	5802546c 	.word	0x5802546c
 8002ac0:	58025480 	.word	0x58025480
 8002ac4:	58025494 	.word	0x58025494

08002ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e226      	b.n	8002f32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_DMA_Start_IT+0x2a>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e21f      	b.n	8002f32 <HAL_DMA_Start_IT+0x46a>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	f040 820a 	bne.w	8002f1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a68      	ldr	r2, [pc, #416]	; (8002cbc <HAL_DMA_Start_IT+0x1f4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d04a      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a66      	ldr	r2, [pc, #408]	; (8002cc0 <HAL_DMA_Start_IT+0x1f8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d045      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a65      	ldr	r2, [pc, #404]	; (8002cc4 <HAL_DMA_Start_IT+0x1fc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d040      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a63      	ldr	r2, [pc, #396]	; (8002cc8 <HAL_DMA_Start_IT+0x200>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d03b      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a62      	ldr	r2, [pc, #392]	; (8002ccc <HAL_DMA_Start_IT+0x204>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d036      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a60      	ldr	r2, [pc, #384]	; (8002cd0 <HAL_DMA_Start_IT+0x208>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d031      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a5f      	ldr	r2, [pc, #380]	; (8002cd4 <HAL_DMA_Start_IT+0x20c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d02c      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5d      	ldr	r2, [pc, #372]	; (8002cd8 <HAL_DMA_Start_IT+0x210>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d027      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5c      	ldr	r2, [pc, #368]	; (8002cdc <HAL_DMA_Start_IT+0x214>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d022      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a5a      	ldr	r2, [pc, #360]	; (8002ce0 <HAL_DMA_Start_IT+0x218>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01d      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a59      	ldr	r2, [pc, #356]	; (8002ce4 <HAL_DMA_Start_IT+0x21c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d018      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_DMA_Start_IT+0x220>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a56      	ldr	r2, [pc, #344]	; (8002cec <HAL_DMA_Start_IT+0x224>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00e      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a54      	ldr	r2, [pc, #336]	; (8002cf0 <HAL_DMA_Start_IT+0x228>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a53      	ldr	r2, [pc, #332]	; (8002cf4 <HAL_DMA_Start_IT+0x22c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a51      	ldr	r2, [pc, #324]	; (8002cf8 <HAL_DMA_Start_IT+0x230>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d108      	bne.n	8002bc8 <HAL_DMA_Start_IT+0x100>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e007      	b.n	8002bd8 <HAL_DMA_Start_IT+0x110>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f001 fe74 	bl	80048cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a34      	ldr	r2, [pc, #208]	; (8002cbc <HAL_DMA_Start_IT+0x1f4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d04a      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a33      	ldr	r2, [pc, #204]	; (8002cc0 <HAL_DMA_Start_IT+0x1f8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d045      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a31      	ldr	r2, [pc, #196]	; (8002cc4 <HAL_DMA_Start_IT+0x1fc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d040      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a30      	ldr	r2, [pc, #192]	; (8002cc8 <HAL_DMA_Start_IT+0x200>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d03b      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2e      	ldr	r2, [pc, #184]	; (8002ccc <HAL_DMA_Start_IT+0x204>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d036      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a2d      	ldr	r2, [pc, #180]	; (8002cd0 <HAL_DMA_Start_IT+0x208>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d031      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2b      	ldr	r2, [pc, #172]	; (8002cd4 <HAL_DMA_Start_IT+0x20c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d02c      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a2a      	ldr	r2, [pc, #168]	; (8002cd8 <HAL_DMA_Start_IT+0x210>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d027      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a28      	ldr	r2, [pc, #160]	; (8002cdc <HAL_DMA_Start_IT+0x214>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d022      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a27      	ldr	r2, [pc, #156]	; (8002ce0 <HAL_DMA_Start_IT+0x218>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d01d      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a25      	ldr	r2, [pc, #148]	; (8002ce4 <HAL_DMA_Start_IT+0x21c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d018      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a24      	ldr	r2, [pc, #144]	; (8002ce8 <HAL_DMA_Start_IT+0x220>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d013      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a22      	ldr	r2, [pc, #136]	; (8002cec <HAL_DMA_Start_IT+0x224>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00e      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <HAL_DMA_Start_IT+0x228>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d009      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_DMA_Start_IT+0x22c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_DMA_Start_IT+0x1bc>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <HAL_DMA_Start_IT+0x230>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d101      	bne.n	8002c88 <HAL_DMA_Start_IT+0x1c0>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <HAL_DMA_Start_IT+0x1c2>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d036      	beq.n	8002cfc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 021e 	bic.w	r2, r3, #30
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0216 	orr.w	r2, r2, #22
 8002ca0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d03e      	beq.n	8002d28 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0208 	orr.w	r2, r2, #8
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e035      	b.n	8002d28 <HAL_DMA_Start_IT+0x260>
 8002cbc:	40020010 	.word	0x40020010
 8002cc0:	40020028 	.word	0x40020028
 8002cc4:	40020040 	.word	0x40020040
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	40020070 	.word	0x40020070
 8002cd0:	40020088 	.word	0x40020088
 8002cd4:	400200a0 	.word	0x400200a0
 8002cd8:	400200b8 	.word	0x400200b8
 8002cdc:	40020410 	.word	0x40020410
 8002ce0:	40020428 	.word	0x40020428
 8002ce4:	40020440 	.word	0x40020440
 8002ce8:	40020458 	.word	0x40020458
 8002cec:	40020470 	.word	0x40020470
 8002cf0:	40020488 	.word	0x40020488
 8002cf4:	400204a0 	.word	0x400204a0
 8002cf8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 020e 	bic.w	r2, r3, #14
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 020a 	orr.w	r2, r2, #10
 8002d0e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0204 	orr.w	r2, r2, #4
 8002d26:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a83      	ldr	r2, [pc, #524]	; (8002f3c <HAL_DMA_Start_IT+0x474>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d072      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a82      	ldr	r2, [pc, #520]	; (8002f40 <HAL_DMA_Start_IT+0x478>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d06d      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a80      	ldr	r2, [pc, #512]	; (8002f44 <HAL_DMA_Start_IT+0x47c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d068      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7f      	ldr	r2, [pc, #508]	; (8002f48 <HAL_DMA_Start_IT+0x480>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d063      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a7d      	ldr	r2, [pc, #500]	; (8002f4c <HAL_DMA_Start_IT+0x484>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d05e      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a7c      	ldr	r2, [pc, #496]	; (8002f50 <HAL_DMA_Start_IT+0x488>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d059      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a7a      	ldr	r2, [pc, #488]	; (8002f54 <HAL_DMA_Start_IT+0x48c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d054      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a79      	ldr	r2, [pc, #484]	; (8002f58 <HAL_DMA_Start_IT+0x490>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04f      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a77      	ldr	r2, [pc, #476]	; (8002f5c <HAL_DMA_Start_IT+0x494>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d04a      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a76      	ldr	r2, [pc, #472]	; (8002f60 <HAL_DMA_Start_IT+0x498>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d045      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a74      	ldr	r2, [pc, #464]	; (8002f64 <HAL_DMA_Start_IT+0x49c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d040      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a73      	ldr	r2, [pc, #460]	; (8002f68 <HAL_DMA_Start_IT+0x4a0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d03b      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a71      	ldr	r2, [pc, #452]	; (8002f6c <HAL_DMA_Start_IT+0x4a4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d036      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a70      	ldr	r2, [pc, #448]	; (8002f70 <HAL_DMA_Start_IT+0x4a8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d031      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6e      	ldr	r2, [pc, #440]	; (8002f74 <HAL_DMA_Start_IT+0x4ac>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02c      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6d      	ldr	r2, [pc, #436]	; (8002f78 <HAL_DMA_Start_IT+0x4b0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d027      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a6b      	ldr	r2, [pc, #428]	; (8002f7c <HAL_DMA_Start_IT+0x4b4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a6a      	ldr	r2, [pc, #424]	; (8002f80 <HAL_DMA_Start_IT+0x4b8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d01d      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a68      	ldr	r2, [pc, #416]	; (8002f84 <HAL_DMA_Start_IT+0x4bc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a67      	ldr	r2, [pc, #412]	; (8002f88 <HAL_DMA_Start_IT+0x4c0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a65      	ldr	r2, [pc, #404]	; (8002f8c <HAL_DMA_Start_IT+0x4c4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a64      	ldr	r2, [pc, #400]	; (8002f90 <HAL_DMA_Start_IT+0x4c8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a62      	ldr	r2, [pc, #392]	; (8002f94 <HAL_DMA_Start_IT+0x4cc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_DMA_Start_IT+0x350>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a61      	ldr	r2, [pc, #388]	; (8002f98 <HAL_DMA_Start_IT+0x4d0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_DMA_Start_IT+0x354>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_DMA_Start_IT+0x356>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01a      	beq.n	8002e58 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e3e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e56:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a37      	ldr	r2, [pc, #220]	; (8002f3c <HAL_DMA_Start_IT+0x474>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d04a      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a36      	ldr	r2, [pc, #216]	; (8002f40 <HAL_DMA_Start_IT+0x478>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d045      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a34      	ldr	r2, [pc, #208]	; (8002f44 <HAL_DMA_Start_IT+0x47c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d040      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a33      	ldr	r2, [pc, #204]	; (8002f48 <HAL_DMA_Start_IT+0x480>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d03b      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a31      	ldr	r2, [pc, #196]	; (8002f4c <HAL_DMA_Start_IT+0x484>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d036      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <HAL_DMA_Start_IT+0x488>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d031      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2e      	ldr	r2, [pc, #184]	; (8002f54 <HAL_DMA_Start_IT+0x48c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d02c      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2d      	ldr	r2, [pc, #180]	; (8002f58 <HAL_DMA_Start_IT+0x490>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d027      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <HAL_DMA_Start_IT+0x494>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d022      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a2a      	ldr	r2, [pc, #168]	; (8002f60 <HAL_DMA_Start_IT+0x498>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d01d      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a28      	ldr	r2, [pc, #160]	; (8002f64 <HAL_DMA_Start_IT+0x49c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d018      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <HAL_DMA_Start_IT+0x4a0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <HAL_DMA_Start_IT+0x4a4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00e      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a24      	ldr	r2, [pc, #144]	; (8002f70 <HAL_DMA_Start_IT+0x4a8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <HAL_DMA_Start_IT+0x4ac>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x430>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <HAL_DMA_Start_IT+0x4b0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d108      	bne.n	8002f0a <HAL_DMA_Start_IT+0x442>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e012      	b.n	8002f30 <HAL_DMA_Start_IT+0x468>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	e009      	b.n	8002f30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40020010 	.word	0x40020010
 8002f40:	40020028 	.word	0x40020028
 8002f44:	40020040 	.word	0x40020040
 8002f48:	40020058 	.word	0x40020058
 8002f4c:	40020070 	.word	0x40020070
 8002f50:	40020088 	.word	0x40020088
 8002f54:	400200a0 	.word	0x400200a0
 8002f58:	400200b8 	.word	0x400200b8
 8002f5c:	40020410 	.word	0x40020410
 8002f60:	40020428 	.word	0x40020428
 8002f64:	40020440 	.word	0x40020440
 8002f68:	40020458 	.word	0x40020458
 8002f6c:	40020470 	.word	0x40020470
 8002f70:	40020488 	.word	0x40020488
 8002f74:	400204a0 	.word	0x400204a0
 8002f78:	400204b8 	.word	0x400204b8
 8002f7c:	58025408 	.word	0x58025408
 8002f80:	5802541c 	.word	0x5802541c
 8002f84:	58025430 	.word	0x58025430
 8002f88:	58025444 	.word	0x58025444
 8002f8c:	58025458 	.word	0x58025458
 8002f90:	5802546c 	.word	0x5802546c
 8002f94:	58025480 	.word	0x58025480
 8002f98:	58025494 	.word	0x58025494

08002f9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002fa4:	f7ff f8c0 	bl	8002128 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e2dc      	b.n	800356e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d008      	beq.n	8002fd2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e2cd      	b.n	800356e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a76      	ldr	r2, [pc, #472]	; (80031b0 <HAL_DMA_Abort+0x214>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d04a      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a74      	ldr	r2, [pc, #464]	; (80031b4 <HAL_DMA_Abort+0x218>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d045      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a73      	ldr	r2, [pc, #460]	; (80031b8 <HAL_DMA_Abort+0x21c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d040      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a71      	ldr	r2, [pc, #452]	; (80031bc <HAL_DMA_Abort+0x220>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d03b      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a70      	ldr	r2, [pc, #448]	; (80031c0 <HAL_DMA_Abort+0x224>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d036      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a6e      	ldr	r2, [pc, #440]	; (80031c4 <HAL_DMA_Abort+0x228>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d031      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a6d      	ldr	r2, [pc, #436]	; (80031c8 <HAL_DMA_Abort+0x22c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d02c      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a6b      	ldr	r2, [pc, #428]	; (80031cc <HAL_DMA_Abort+0x230>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d027      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a6a      	ldr	r2, [pc, #424]	; (80031d0 <HAL_DMA_Abort+0x234>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a68      	ldr	r2, [pc, #416]	; (80031d4 <HAL_DMA_Abort+0x238>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01d      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a67      	ldr	r2, [pc, #412]	; (80031d8 <HAL_DMA_Abort+0x23c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d018      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a65      	ldr	r2, [pc, #404]	; (80031dc <HAL_DMA_Abort+0x240>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a64      	ldr	r2, [pc, #400]	; (80031e0 <HAL_DMA_Abort+0x244>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a62      	ldr	r2, [pc, #392]	; (80031e4 <HAL_DMA_Abort+0x248>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d009      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a61      	ldr	r2, [pc, #388]	; (80031e8 <HAL_DMA_Abort+0x24c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_DMA_Abort+0xd6>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a5f      	ldr	r2, [pc, #380]	; (80031ec <HAL_DMA_Abort+0x250>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_DMA_Abort+0xda>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_DMA_Abort+0xdc>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 021e 	bic.w	r2, r2, #30
 800308a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	e00a      	b.n	80030ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 020e 	bic.w	r2, r2, #14
 80030b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a3c      	ldr	r2, [pc, #240]	; (80031b0 <HAL_DMA_Abort+0x214>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d072      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a3a      	ldr	r2, [pc, #232]	; (80031b4 <HAL_DMA_Abort+0x218>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d06d      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a39      	ldr	r2, [pc, #228]	; (80031b8 <HAL_DMA_Abort+0x21c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d068      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a37      	ldr	r2, [pc, #220]	; (80031bc <HAL_DMA_Abort+0x220>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d063      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a36      	ldr	r2, [pc, #216]	; (80031c0 <HAL_DMA_Abort+0x224>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d05e      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a34      	ldr	r2, [pc, #208]	; (80031c4 <HAL_DMA_Abort+0x228>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d059      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a33      	ldr	r2, [pc, #204]	; (80031c8 <HAL_DMA_Abort+0x22c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d054      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a31      	ldr	r2, [pc, #196]	; (80031cc <HAL_DMA_Abort+0x230>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d04f      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <HAL_DMA_Abort+0x234>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d04a      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2e      	ldr	r2, [pc, #184]	; (80031d4 <HAL_DMA_Abort+0x238>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d045      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2d      	ldr	r2, [pc, #180]	; (80031d8 <HAL_DMA_Abort+0x23c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d040      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <HAL_DMA_Abort+0x240>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d03b      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2a      	ldr	r2, [pc, #168]	; (80031e0 <HAL_DMA_Abort+0x244>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d036      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <HAL_DMA_Abort+0x248>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d031      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <HAL_DMA_Abort+0x24c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d02c      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a25      	ldr	r2, [pc, #148]	; (80031ec <HAL_DMA_Abort+0x250>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d027      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <HAL_DMA_Abort+0x254>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d022      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a22      	ldr	r2, [pc, #136]	; (80031f4 <HAL_DMA_Abort+0x258>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01d      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <HAL_DMA_Abort+0x25c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d018      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <HAL_DMA_Abort+0x260>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d013      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1e      	ldr	r2, [pc, #120]	; (8003200 <HAL_DMA_Abort+0x264>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00e      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <HAL_DMA_Abort+0x268>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d009      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_DMA_Abort+0x26c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_DMA_Abort+0x20e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_DMA_Abort+0x270>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d132      	bne.n	8003210 <HAL_DMA_Abort+0x274>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e031      	b.n	8003212 <HAL_DMA_Abort+0x276>
 80031ae:	bf00      	nop
 80031b0:	40020010 	.word	0x40020010
 80031b4:	40020028 	.word	0x40020028
 80031b8:	40020040 	.word	0x40020040
 80031bc:	40020058 	.word	0x40020058
 80031c0:	40020070 	.word	0x40020070
 80031c4:	40020088 	.word	0x40020088
 80031c8:	400200a0 	.word	0x400200a0
 80031cc:	400200b8 	.word	0x400200b8
 80031d0:	40020410 	.word	0x40020410
 80031d4:	40020428 	.word	0x40020428
 80031d8:	40020440 	.word	0x40020440
 80031dc:	40020458 	.word	0x40020458
 80031e0:	40020470 	.word	0x40020470
 80031e4:	40020488 	.word	0x40020488
 80031e8:	400204a0 	.word	0x400204a0
 80031ec:	400204b8 	.word	0x400204b8
 80031f0:	58025408 	.word	0x58025408
 80031f4:	5802541c 	.word	0x5802541c
 80031f8:	58025430 	.word	0x58025430
 80031fc:	58025444 	.word	0x58025444
 8003200:	58025458 	.word	0x58025458
 8003204:	5802546c 	.word	0x5802546c
 8003208:	58025480 	.word	0x58025480
 800320c:	58025494 	.word	0x58025494
 8003210:	2300      	movs	r3, #0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003224:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6d      	ldr	r2, [pc, #436]	; (80033e0 <HAL_DMA_Abort+0x444>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d04a      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6b      	ldr	r2, [pc, #428]	; (80033e4 <HAL_DMA_Abort+0x448>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d045      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6a      	ldr	r2, [pc, #424]	; (80033e8 <HAL_DMA_Abort+0x44c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d040      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a68      	ldr	r2, [pc, #416]	; (80033ec <HAL_DMA_Abort+0x450>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d03b      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a67      	ldr	r2, [pc, #412]	; (80033f0 <HAL_DMA_Abort+0x454>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d036      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a65      	ldr	r2, [pc, #404]	; (80033f4 <HAL_DMA_Abort+0x458>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d031      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a64      	ldr	r2, [pc, #400]	; (80033f8 <HAL_DMA_Abort+0x45c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d02c      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a62      	ldr	r2, [pc, #392]	; (80033fc <HAL_DMA_Abort+0x460>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d027      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a61      	ldr	r2, [pc, #388]	; (8003400 <HAL_DMA_Abort+0x464>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a5f      	ldr	r2, [pc, #380]	; (8003404 <HAL_DMA_Abort+0x468>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01d      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5e      	ldr	r2, [pc, #376]	; (8003408 <HAL_DMA_Abort+0x46c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5c      	ldr	r2, [pc, #368]	; (800340c <HAL_DMA_Abort+0x470>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5b      	ldr	r2, [pc, #364]	; (8003410 <HAL_DMA_Abort+0x474>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a59      	ldr	r2, [pc, #356]	; (8003414 <HAL_DMA_Abort+0x478>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_DMA_Abort+0x47c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_DMA_Abort+0x32a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a56      	ldr	r2, [pc, #344]	; (800341c <HAL_DMA_Abort+0x480>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d108      	bne.n	80032d8 <HAL_DMA_Abort+0x33c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e007      	b.n	80032e8 <HAL_DMA_Abort+0x34c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032e8:	e013      	b.n	8003312 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ea:	f7fe ff1d 	bl	8002128 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d90c      	bls.n	8003312 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2203      	movs	r2, #3
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e12d      	b.n	800356e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e5      	bne.n	80032ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2f      	ldr	r2, [pc, #188]	; (80033e0 <HAL_DMA_Abort+0x444>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d04a      	beq.n	80033be <HAL_DMA_Abort+0x422>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a2d      	ldr	r2, [pc, #180]	; (80033e4 <HAL_DMA_Abort+0x448>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d045      	beq.n	80033be <HAL_DMA_Abort+0x422>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2c      	ldr	r2, [pc, #176]	; (80033e8 <HAL_DMA_Abort+0x44c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d040      	beq.n	80033be <HAL_DMA_Abort+0x422>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <HAL_DMA_Abort+0x450>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d03b      	beq.n	80033be <HAL_DMA_Abort+0x422>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <HAL_DMA_Abort+0x454>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d036      	beq.n	80033be <HAL_DMA_Abort+0x422>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <HAL_DMA_Abort+0x458>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d031      	beq.n	80033be <HAL_DMA_Abort+0x422>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <HAL_DMA_Abort+0x45c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d02c      	beq.n	80033be <HAL_DMA_Abort+0x422>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a24      	ldr	r2, [pc, #144]	; (80033fc <HAL_DMA_Abort+0x460>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d027      	beq.n	80033be <HAL_DMA_Abort+0x422>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a23      	ldr	r2, [pc, #140]	; (8003400 <HAL_DMA_Abort+0x464>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d022      	beq.n	80033be <HAL_DMA_Abort+0x422>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a21      	ldr	r2, [pc, #132]	; (8003404 <HAL_DMA_Abort+0x468>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01d      	beq.n	80033be <HAL_DMA_Abort+0x422>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a20      	ldr	r2, [pc, #128]	; (8003408 <HAL_DMA_Abort+0x46c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d018      	beq.n	80033be <HAL_DMA_Abort+0x422>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1e      	ldr	r2, [pc, #120]	; (800340c <HAL_DMA_Abort+0x470>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_DMA_Abort+0x422>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <HAL_DMA_Abort+0x474>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00e      	beq.n	80033be <HAL_DMA_Abort+0x422>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <HAL_DMA_Abort+0x478>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d009      	beq.n	80033be <HAL_DMA_Abort+0x422>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <HAL_DMA_Abort+0x47c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_DMA_Abort+0x422>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_DMA_Abort+0x480>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d101      	bne.n	80033c2 <HAL_DMA_Abort+0x426>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_DMA_Abort+0x428>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02b      	beq.n	8003420 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	223f      	movs	r2, #63	; 0x3f
 80033d8:	409a      	lsls	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	e02a      	b.n	8003436 <HAL_DMA_Abort+0x49a>
 80033e0:	40020010 	.word	0x40020010
 80033e4:	40020028 	.word	0x40020028
 80033e8:	40020040 	.word	0x40020040
 80033ec:	40020058 	.word	0x40020058
 80033f0:	40020070 	.word	0x40020070
 80033f4:	40020088 	.word	0x40020088
 80033f8:	400200a0 	.word	0x400200a0
 80033fc:	400200b8 	.word	0x400200b8
 8003400:	40020410 	.word	0x40020410
 8003404:	40020428 	.word	0x40020428
 8003408:	40020440 	.word	0x40020440
 800340c:	40020458 	.word	0x40020458
 8003410:	40020470 	.word	0x40020470
 8003414:	40020488 	.word	0x40020488
 8003418:	400204a0 	.word	0x400204a0
 800341c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2201      	movs	r2, #1
 8003430:	409a      	lsls	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a4f      	ldr	r2, [pc, #316]	; (8003578 <HAL_DMA_Abort+0x5dc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d072      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a4d      	ldr	r2, [pc, #308]	; (800357c <HAL_DMA_Abort+0x5e0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d06d      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_DMA_Abort+0x5e4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d068      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a4a      	ldr	r2, [pc, #296]	; (8003584 <HAL_DMA_Abort+0x5e8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d063      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a49      	ldr	r2, [pc, #292]	; (8003588 <HAL_DMA_Abort+0x5ec>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d05e      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a47      	ldr	r2, [pc, #284]	; (800358c <HAL_DMA_Abort+0x5f0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d059      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a46      	ldr	r2, [pc, #280]	; (8003590 <HAL_DMA_Abort+0x5f4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d054      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a44      	ldr	r2, [pc, #272]	; (8003594 <HAL_DMA_Abort+0x5f8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d04f      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a43      	ldr	r2, [pc, #268]	; (8003598 <HAL_DMA_Abort+0x5fc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d04a      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a41      	ldr	r2, [pc, #260]	; (800359c <HAL_DMA_Abort+0x600>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d045      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a40      	ldr	r2, [pc, #256]	; (80035a0 <HAL_DMA_Abort+0x604>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d040      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a3e      	ldr	r2, [pc, #248]	; (80035a4 <HAL_DMA_Abort+0x608>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d03b      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a3d      	ldr	r2, [pc, #244]	; (80035a8 <HAL_DMA_Abort+0x60c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d036      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3b      	ldr	r2, [pc, #236]	; (80035ac <HAL_DMA_Abort+0x610>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d031      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3a      	ldr	r2, [pc, #232]	; (80035b0 <HAL_DMA_Abort+0x614>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d02c      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a38      	ldr	r2, [pc, #224]	; (80035b4 <HAL_DMA_Abort+0x618>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d027      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a37      	ldr	r2, [pc, #220]	; (80035b8 <HAL_DMA_Abort+0x61c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a35      	ldr	r2, [pc, #212]	; (80035bc <HAL_DMA_Abort+0x620>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01d      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a34      	ldr	r2, [pc, #208]	; (80035c0 <HAL_DMA_Abort+0x624>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d018      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a32      	ldr	r2, [pc, #200]	; (80035c4 <HAL_DMA_Abort+0x628>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a31      	ldr	r2, [pc, #196]	; (80035c8 <HAL_DMA_Abort+0x62c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a2f      	ldr	r2, [pc, #188]	; (80035cc <HAL_DMA_Abort+0x630>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2e      	ldr	r2, [pc, #184]	; (80035d0 <HAL_DMA_Abort+0x634>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_DMA_Abort+0x58a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a2c      	ldr	r2, [pc, #176]	; (80035d4 <HAL_DMA_Abort+0x638>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <HAL_DMA_Abort+0x58e>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_DMA_Abort+0x590>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003538:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800354c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003550:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800355a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40020010 	.word	0x40020010
 800357c:	40020028 	.word	0x40020028
 8003580:	40020040 	.word	0x40020040
 8003584:	40020058 	.word	0x40020058
 8003588:	40020070 	.word	0x40020070
 800358c:	40020088 	.word	0x40020088
 8003590:	400200a0 	.word	0x400200a0
 8003594:	400200b8 	.word	0x400200b8
 8003598:	40020410 	.word	0x40020410
 800359c:	40020428 	.word	0x40020428
 80035a0:	40020440 	.word	0x40020440
 80035a4:	40020458 	.word	0x40020458
 80035a8:	40020470 	.word	0x40020470
 80035ac:	40020488 	.word	0x40020488
 80035b0:	400204a0 	.word	0x400204a0
 80035b4:	400204b8 	.word	0x400204b8
 80035b8:	58025408 	.word	0x58025408
 80035bc:	5802541c 	.word	0x5802541c
 80035c0:	58025430 	.word	0x58025430
 80035c4:	58025444 	.word	0x58025444
 80035c8:	58025458 	.word	0x58025458
 80035cc:	5802546c 	.word	0x5802546c
 80035d0:	58025480 	.word	0x58025480
 80035d4:	58025494 	.word	0x58025494

080035d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e205      	b.n	80039f6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d004      	beq.n	8003600 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e1fa      	b.n	80039f6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a8c      	ldr	r2, [pc, #560]	; (8003838 <HAL_DMA_Abort_IT+0x260>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d04a      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a8b      	ldr	r2, [pc, #556]	; (800383c <HAL_DMA_Abort_IT+0x264>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d045      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a89      	ldr	r2, [pc, #548]	; (8003840 <HAL_DMA_Abort_IT+0x268>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d040      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a88      	ldr	r2, [pc, #544]	; (8003844 <HAL_DMA_Abort_IT+0x26c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d03b      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a86      	ldr	r2, [pc, #536]	; (8003848 <HAL_DMA_Abort_IT+0x270>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d036      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a85      	ldr	r2, [pc, #532]	; (800384c <HAL_DMA_Abort_IT+0x274>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d031      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a83      	ldr	r2, [pc, #524]	; (8003850 <HAL_DMA_Abort_IT+0x278>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02c      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a82      	ldr	r2, [pc, #520]	; (8003854 <HAL_DMA_Abort_IT+0x27c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d027      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a80      	ldr	r2, [pc, #512]	; (8003858 <HAL_DMA_Abort_IT+0x280>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d022      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a7f      	ldr	r2, [pc, #508]	; (800385c <HAL_DMA_Abort_IT+0x284>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d01d      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a7d      	ldr	r2, [pc, #500]	; (8003860 <HAL_DMA_Abort_IT+0x288>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d018      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a7c      	ldr	r2, [pc, #496]	; (8003864 <HAL_DMA_Abort_IT+0x28c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a7a      	ldr	r2, [pc, #488]	; (8003868 <HAL_DMA_Abort_IT+0x290>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00e      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a79      	ldr	r2, [pc, #484]	; (800386c <HAL_DMA_Abort_IT+0x294>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d009      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a77      	ldr	r2, [pc, #476]	; (8003870 <HAL_DMA_Abort_IT+0x298>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xc8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a76      	ldr	r2, [pc, #472]	; (8003874 <HAL_DMA_Abort_IT+0x29c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_DMA_Abort_IT+0xcc>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_DMA_Abort_IT+0xce>
 80036a4:	2300      	movs	r3, #0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d065      	beq.n	8003776 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2204      	movs	r2, #4
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a60      	ldr	r2, [pc, #384]	; (8003838 <HAL_DMA_Abort_IT+0x260>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d04a      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a5e      	ldr	r2, [pc, #376]	; (800383c <HAL_DMA_Abort_IT+0x264>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d045      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a5d      	ldr	r2, [pc, #372]	; (8003840 <HAL_DMA_Abort_IT+0x268>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d040      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a5b      	ldr	r2, [pc, #364]	; (8003844 <HAL_DMA_Abort_IT+0x26c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d03b      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a5a      	ldr	r2, [pc, #360]	; (8003848 <HAL_DMA_Abort_IT+0x270>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d036      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a58      	ldr	r2, [pc, #352]	; (800384c <HAL_DMA_Abort_IT+0x274>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d031      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a57      	ldr	r2, [pc, #348]	; (8003850 <HAL_DMA_Abort_IT+0x278>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d02c      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a55      	ldr	r2, [pc, #340]	; (8003854 <HAL_DMA_Abort_IT+0x27c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d027      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a54      	ldr	r2, [pc, #336]	; (8003858 <HAL_DMA_Abort_IT+0x280>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a52      	ldr	r2, [pc, #328]	; (800385c <HAL_DMA_Abort_IT+0x284>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01d      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a51      	ldr	r2, [pc, #324]	; (8003860 <HAL_DMA_Abort_IT+0x288>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d018      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a4f      	ldr	r2, [pc, #316]	; (8003864 <HAL_DMA_Abort_IT+0x28c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a4e      	ldr	r2, [pc, #312]	; (8003868 <HAL_DMA_Abort_IT+0x290>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a4c      	ldr	r2, [pc, #304]	; (800386c <HAL_DMA_Abort_IT+0x294>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <HAL_DMA_Abort_IT+0x298>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_DMA_Abort_IT+0x17a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a49      	ldr	r2, [pc, #292]	; (8003874 <HAL_DMA_Abort_IT+0x29c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d108      	bne.n	8003764 <HAL_DMA_Abort_IT+0x18c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e147      	b.n	80039f4 <HAL_DMA_Abort_IT+0x41c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e13e      	b.n	80039f4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 020e 	bic.w	r2, r2, #14
 8003784:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2b      	ldr	r2, [pc, #172]	; (8003838 <HAL_DMA_Abort_IT+0x260>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d04a      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a29      	ldr	r2, [pc, #164]	; (800383c <HAL_DMA_Abort_IT+0x264>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d045      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a28      	ldr	r2, [pc, #160]	; (8003840 <HAL_DMA_Abort_IT+0x268>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d040      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <HAL_DMA_Abort_IT+0x26c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d03b      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a25      	ldr	r2, [pc, #148]	; (8003848 <HAL_DMA_Abort_IT+0x270>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d036      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a23      	ldr	r2, [pc, #140]	; (800384c <HAL_DMA_Abort_IT+0x274>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d031      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a22      	ldr	r2, [pc, #136]	; (8003850 <HAL_DMA_Abort_IT+0x278>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d02c      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a20      	ldr	r2, [pc, #128]	; (8003854 <HAL_DMA_Abort_IT+0x27c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d027      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_DMA_Abort_IT+0x280>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_DMA_Abort_IT+0x284>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01d      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <HAL_DMA_Abort_IT+0x288>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_DMA_Abort_IT+0x28c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_DMA_Abort_IT+0x290>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a17      	ldr	r2, [pc, #92]	; (800386c <HAL_DMA_Abort_IT+0x294>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a16      	ldr	r2, [pc, #88]	; (8003870 <HAL_DMA_Abort_IT+0x298>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_DMA_Abort_IT+0x24e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <HAL_DMA_Abort_IT+0x29c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d128      	bne.n	8003878 <HAL_DMA_Abort_IT+0x2a0>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e027      	b.n	8003888 <HAL_DMA_Abort_IT+0x2b0>
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a5c      	ldr	r2, [pc, #368]	; (8003a00 <HAL_DMA_Abort_IT+0x428>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d072      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a5b      	ldr	r2, [pc, #364]	; (8003a04 <HAL_DMA_Abort_IT+0x42c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d06d      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a59      	ldr	r2, [pc, #356]	; (8003a08 <HAL_DMA_Abort_IT+0x430>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d068      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_DMA_Abort_IT+0x434>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d063      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a56      	ldr	r2, [pc, #344]	; (8003a10 <HAL_DMA_Abort_IT+0x438>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d05e      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <HAL_DMA_Abort_IT+0x43c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d059      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a53      	ldr	r2, [pc, #332]	; (8003a18 <HAL_DMA_Abort_IT+0x440>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d054      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <HAL_DMA_Abort_IT+0x444>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d04f      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a50      	ldr	r2, [pc, #320]	; (8003a20 <HAL_DMA_Abort_IT+0x448>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d04a      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4f      	ldr	r2, [pc, #316]	; (8003a24 <HAL_DMA_Abort_IT+0x44c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d045      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a4d      	ldr	r2, [pc, #308]	; (8003a28 <HAL_DMA_Abort_IT+0x450>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d040      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a4c      	ldr	r2, [pc, #304]	; (8003a2c <HAL_DMA_Abort_IT+0x454>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d03b      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <HAL_DMA_Abort_IT+0x458>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d036      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a49      	ldr	r2, [pc, #292]	; (8003a34 <HAL_DMA_Abort_IT+0x45c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d031      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a47      	ldr	r2, [pc, #284]	; (8003a38 <HAL_DMA_Abort_IT+0x460>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d02c      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a46      	ldr	r2, [pc, #280]	; (8003a3c <HAL_DMA_Abort_IT+0x464>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d027      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a44      	ldr	r2, [pc, #272]	; (8003a40 <HAL_DMA_Abort_IT+0x468>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d022      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a43      	ldr	r2, [pc, #268]	; (8003a44 <HAL_DMA_Abort_IT+0x46c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d01d      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a41      	ldr	r2, [pc, #260]	; (8003a48 <HAL_DMA_Abort_IT+0x470>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d018      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a40      	ldr	r2, [pc, #256]	; (8003a4c <HAL_DMA_Abort_IT+0x474>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a3e      	ldr	r2, [pc, #248]	; (8003a50 <HAL_DMA_Abort_IT+0x478>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00e      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a3d      	ldr	r2, [pc, #244]	; (8003a54 <HAL_DMA_Abort_IT+0x47c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a3b      	ldr	r2, [pc, #236]	; (8003a58 <HAL_DMA_Abort_IT+0x480>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_DMA_Abort_IT+0x3a0>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <HAL_DMA_Abort_IT+0x484>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_DMA_Abort_IT+0x3a4>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_DMA_Abort_IT+0x3a6>
 800397c:	2300      	movs	r3, #0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d028      	beq.n	80039d4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003990:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2201      	movs	r2, #1
 80039a2:	409a      	lsls	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40020010 	.word	0x40020010
 8003a04:	40020028 	.word	0x40020028
 8003a08:	40020040 	.word	0x40020040
 8003a0c:	40020058 	.word	0x40020058
 8003a10:	40020070 	.word	0x40020070
 8003a14:	40020088 	.word	0x40020088
 8003a18:	400200a0 	.word	0x400200a0
 8003a1c:	400200b8 	.word	0x400200b8
 8003a20:	40020410 	.word	0x40020410
 8003a24:	40020428 	.word	0x40020428
 8003a28:	40020440 	.word	0x40020440
 8003a2c:	40020458 	.word	0x40020458
 8003a30:	40020470 	.word	0x40020470
 8003a34:	40020488 	.word	0x40020488
 8003a38:	400204a0 	.word	0x400204a0
 8003a3c:	400204b8 	.word	0x400204b8
 8003a40:	58025408 	.word	0x58025408
 8003a44:	5802541c 	.word	0x5802541c
 8003a48:	58025430 	.word	0x58025430
 8003a4c:	58025444 	.word	0x58025444
 8003a50:	58025458 	.word	0x58025458
 8003a54:	5802546c 	.word	0x5802546c
 8003a58:	58025480 	.word	0x58025480
 8003a5c:	58025494 	.word	0x58025494

08003a60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a6c:	4b67      	ldr	r3, [pc, #412]	; (8003c0c <HAL_DMA_IRQHandler+0x1ac>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a67      	ldr	r2, [pc, #412]	; (8003c10 <HAL_DMA_IRQHandler+0x1b0>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0a9b      	lsrs	r3, r3, #10
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a5f      	ldr	r2, [pc, #380]	; (8003c14 <HAL_DMA_IRQHandler+0x1b4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d04a      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5d      	ldr	r2, [pc, #372]	; (8003c18 <HAL_DMA_IRQHandler+0x1b8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d045      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a5c      	ldr	r2, [pc, #368]	; (8003c1c <HAL_DMA_IRQHandler+0x1bc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d040      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a5a      	ldr	r2, [pc, #360]	; (8003c20 <HAL_DMA_IRQHandler+0x1c0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d03b      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a59      	ldr	r2, [pc, #356]	; (8003c24 <HAL_DMA_IRQHandler+0x1c4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d036      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a57      	ldr	r2, [pc, #348]	; (8003c28 <HAL_DMA_IRQHandler+0x1c8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d031      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a56      	ldr	r2, [pc, #344]	; (8003c2c <HAL_DMA_IRQHandler+0x1cc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d02c      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a54      	ldr	r2, [pc, #336]	; (8003c30 <HAL_DMA_IRQHandler+0x1d0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d027      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <HAL_DMA_IRQHandler+0x1d4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a51      	ldr	r2, [pc, #324]	; (8003c38 <HAL_DMA_IRQHandler+0x1d8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01d      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a50      	ldr	r2, [pc, #320]	; (8003c3c <HAL_DMA_IRQHandler+0x1dc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d018      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a4e      	ldr	r2, [pc, #312]	; (8003c40 <HAL_DMA_IRQHandler+0x1e0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a4d      	ldr	r2, [pc, #308]	; (8003c44 <HAL_DMA_IRQHandler+0x1e4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a4b      	ldr	r2, [pc, #300]	; (8003c48 <HAL_DMA_IRQHandler+0x1e8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a4a      	ldr	r2, [pc, #296]	; (8003c4c <HAL_DMA_IRQHandler+0x1ec>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xd2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a48      	ldr	r2, [pc, #288]	; (8003c50 <HAL_DMA_IRQHandler+0x1f0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_DMA_IRQHandler+0xd6>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_DMA_IRQHandler+0xd8>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 842b 	beq.w	8004394 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2208      	movs	r2, #8
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80a2 	beq.w	8003c98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2e      	ldr	r2, [pc, #184]	; (8003c14 <HAL_DMA_IRQHandler+0x1b4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d04a      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2d      	ldr	r2, [pc, #180]	; (8003c18 <HAL_DMA_IRQHandler+0x1b8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d045      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a2b      	ldr	r2, [pc, #172]	; (8003c1c <HAL_DMA_IRQHandler+0x1bc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d040      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2a      	ldr	r2, [pc, #168]	; (8003c20 <HAL_DMA_IRQHandler+0x1c0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d03b      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <HAL_DMA_IRQHandler+0x1c4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d036      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <HAL_DMA_IRQHandler+0x1c8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d031      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <HAL_DMA_IRQHandler+0x1cc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02c      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a24      	ldr	r2, [pc, #144]	; (8003c30 <HAL_DMA_IRQHandler+0x1d0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d027      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <HAL_DMA_IRQHandler+0x1d4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d022      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a21      	ldr	r2, [pc, #132]	; (8003c38 <HAL_DMA_IRQHandler+0x1d8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d01d      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <HAL_DMA_IRQHandler+0x1dc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d018      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <HAL_DMA_IRQHandler+0x1e0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_DMA_IRQHandler+0x1e4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00e      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <HAL_DMA_IRQHandler+0x1e8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d009      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <HAL_DMA_IRQHandler+0x1ec>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x194>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_DMA_IRQHandler+0x1f0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d12f      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x1f4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e02e      	b.n	8003c68 <HAL_DMA_IRQHandler+0x208>
 8003c0a:	bf00      	nop
 8003c0c:	24000000 	.word	0x24000000
 8003c10:	1b4e81b5 	.word	0x1b4e81b5
 8003c14:	40020010 	.word	0x40020010
 8003c18:	40020028 	.word	0x40020028
 8003c1c:	40020040 	.word	0x40020040
 8003c20:	40020058 	.word	0x40020058
 8003c24:	40020070 	.word	0x40020070
 8003c28:	40020088 	.word	0x40020088
 8003c2c:	400200a0 	.word	0x400200a0
 8003c30:	400200b8 	.word	0x400200b8
 8003c34:	40020410 	.word	0x40020410
 8003c38:	40020428 	.word	0x40020428
 8003c3c:	40020440 	.word	0x40020440
 8003c40:	40020458 	.word	0x40020458
 8003c44:	40020470 	.word	0x40020470
 8003c48:	40020488 	.word	0x40020488
 8003c4c:	400204a0 	.word	0x400204a0
 8003c50:	400204b8 	.word	0x400204b8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bf14      	ite	ne
 8003c62:	2301      	movne	r3, #1
 8003c64:	2300      	moveq	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d015      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0204 	bic.w	r2, r2, #4
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2208      	movs	r2, #8
 8003c86:	409a      	lsls	r2, r3
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	f043 0201 	orr.w	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d06e      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a69      	ldr	r2, [pc, #420]	; (8003e58 <HAL_DMA_IRQHandler+0x3f8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d04a      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <HAL_DMA_IRQHandler+0x3fc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d045      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a66      	ldr	r2, [pc, #408]	; (8003e60 <HAL_DMA_IRQHandler+0x400>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d040      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a64      	ldr	r2, [pc, #400]	; (8003e64 <HAL_DMA_IRQHandler+0x404>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d03b      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a63      	ldr	r2, [pc, #396]	; (8003e68 <HAL_DMA_IRQHandler+0x408>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d036      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a61      	ldr	r2, [pc, #388]	; (8003e6c <HAL_DMA_IRQHandler+0x40c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d031      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a60      	ldr	r2, [pc, #384]	; (8003e70 <HAL_DMA_IRQHandler+0x410>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d02c      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a5e      	ldr	r2, [pc, #376]	; (8003e74 <HAL_DMA_IRQHandler+0x414>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d027      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a5d      	ldr	r2, [pc, #372]	; (8003e78 <HAL_DMA_IRQHandler+0x418>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d022      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a5b      	ldr	r2, [pc, #364]	; (8003e7c <HAL_DMA_IRQHandler+0x41c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01d      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5a      	ldr	r2, [pc, #360]	; (8003e80 <HAL_DMA_IRQHandler+0x420>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d018      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_DMA_IRQHandler+0x424>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a57      	ldr	r2, [pc, #348]	; (8003e88 <HAL_DMA_IRQHandler+0x428>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a55      	ldr	r2, [pc, #340]	; (8003e8c <HAL_DMA_IRQHandler+0x42c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a54      	ldr	r2, [pc, #336]	; (8003e90 <HAL_DMA_IRQHandler+0x430>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2ee>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a52      	ldr	r2, [pc, #328]	; (8003e94 <HAL_DMA_IRQHandler+0x434>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10a      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x304>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e003      	b.n	8003d6c <HAL_DMA_IRQHandler+0x30c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2201      	movs	r2, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	f043 0202 	orr.w	r2, r3, #2
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	2204      	movs	r2, #4
 8003d96:	409a      	lsls	r2, r3
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 808f 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a2c      	ldr	r2, [pc, #176]	; (8003e58 <HAL_DMA_IRQHandler+0x3f8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d04a      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <HAL_DMA_IRQHandler+0x3fc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d045      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <HAL_DMA_IRQHandler+0x400>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d040      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a27      	ldr	r2, [pc, #156]	; (8003e64 <HAL_DMA_IRQHandler+0x404>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d03b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a26      	ldr	r2, [pc, #152]	; (8003e68 <HAL_DMA_IRQHandler+0x408>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d036      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <HAL_DMA_IRQHandler+0x40c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d031      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <HAL_DMA_IRQHandler+0x410>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d02c      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <HAL_DMA_IRQHandler+0x414>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d027      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a20      	ldr	r2, [pc, #128]	; (8003e78 <HAL_DMA_IRQHandler+0x418>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d022      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <HAL_DMA_IRQHandler+0x41c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01d      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <HAL_DMA_IRQHandler+0x420>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d018      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <HAL_DMA_IRQHandler+0x424>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1a      	ldr	r2, [pc, #104]	; (8003e88 <HAL_DMA_IRQHandler+0x428>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <HAL_DMA_IRQHandler+0x42c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_DMA_IRQHandler+0x430>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x3e2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_DMA_IRQHandler+0x434>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d12a      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x438>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e023      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x440>
 8003e58:	40020010 	.word	0x40020010
 8003e5c:	40020028 	.word	0x40020028
 8003e60:	40020040 	.word	0x40020040
 8003e64:	40020058 	.word	0x40020058
 8003e68:	40020070 	.word	0x40020070
 8003e6c:	40020088 	.word	0x40020088
 8003e70:	400200a0 	.word	0x400200a0
 8003e74:	400200b8 	.word	0x400200b8
 8003e78:	40020410 	.word	0x40020410
 8003e7c:	40020428 	.word	0x40020428
 8003e80:	40020440 	.word	0x40020440
 8003e84:	40020458 	.word	0x40020458
 8003e88:	40020470 	.word	0x40020470
 8003e8c:	40020488 	.word	0x40020488
 8003e90:	400204a0 	.word	0x400204a0
 8003e94:	400204b8 	.word	0x400204b8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	2204      	movs	r2, #4
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	f043 0204 	orr.w	r2, r3, #4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2210      	movs	r2, #16
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80a6 	beq.w	8004022 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a85      	ldr	r2, [pc, #532]	; (80040f0 <HAL_DMA_IRQHandler+0x690>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d04a      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a83      	ldr	r2, [pc, #524]	; (80040f4 <HAL_DMA_IRQHandler+0x694>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d045      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a82      	ldr	r2, [pc, #520]	; (80040f8 <HAL_DMA_IRQHandler+0x698>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d040      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a80      	ldr	r2, [pc, #512]	; (80040fc <HAL_DMA_IRQHandler+0x69c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d03b      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a7f      	ldr	r2, [pc, #508]	; (8004100 <HAL_DMA_IRQHandler+0x6a0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d036      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7d      	ldr	r2, [pc, #500]	; (8004104 <HAL_DMA_IRQHandler+0x6a4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a7c      	ldr	r2, [pc, #496]	; (8004108 <HAL_DMA_IRQHandler+0x6a8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d02c      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a7a      	ldr	r2, [pc, #488]	; (800410c <HAL_DMA_IRQHandler+0x6ac>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d027      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a79      	ldr	r2, [pc, #484]	; (8004110 <HAL_DMA_IRQHandler+0x6b0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a77      	ldr	r2, [pc, #476]	; (8004114 <HAL_DMA_IRQHandler+0x6b4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01d      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a76      	ldr	r2, [pc, #472]	; (8004118 <HAL_DMA_IRQHandler+0x6b8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a74      	ldr	r2, [pc, #464]	; (800411c <HAL_DMA_IRQHandler+0x6bc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a73      	ldr	r2, [pc, #460]	; (8004120 <HAL_DMA_IRQHandler+0x6c0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a71      	ldr	r2, [pc, #452]	; (8004124 <HAL_DMA_IRQHandler+0x6c4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a70      	ldr	r2, [pc, #448]	; (8004128 <HAL_DMA_IRQHandler+0x6c8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x516>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6e      	ldr	r2, [pc, #440]	; (800412c <HAL_DMA_IRQHandler+0x6cc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10a      	bne.n	8003f8c <HAL_DMA_IRQHandler+0x52c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e009      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x540>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d03e      	beq.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2210      	movs	r2, #16
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d018      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d108      	bne.n	8003fe2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d024      	beq.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	4798      	blx	r3
 8003fe0:	e01f      	b.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01b      	beq.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
 8003ff2:	e016      	b.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0208 	bic.w	r2, r2, #8
 8004010:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	2220      	movs	r2, #32
 800402c:	409a      	lsls	r2, r3
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8110 	beq.w	8004258 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <HAL_DMA_IRQHandler+0x690>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2b      	ldr	r2, [pc, #172]	; (80040f4 <HAL_DMA_IRQHandler+0x694>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <HAL_DMA_IRQHandler+0x698>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a28      	ldr	r2, [pc, #160]	; (80040fc <HAL_DMA_IRQHandler+0x69c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a26      	ldr	r2, [pc, #152]	; (8004100 <HAL_DMA_IRQHandler+0x6a0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a25      	ldr	r2, [pc, #148]	; (8004104 <HAL_DMA_IRQHandler+0x6a4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a23      	ldr	r2, [pc, #140]	; (8004108 <HAL_DMA_IRQHandler+0x6a8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a22      	ldr	r2, [pc, #136]	; (800410c <HAL_DMA_IRQHandler+0x6ac>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <HAL_DMA_IRQHandler+0x6b0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <HAL_DMA_IRQHandler+0x6b4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <HAL_DMA_IRQHandler+0x6b8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_DMA_IRQHandler+0x6bc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1a      	ldr	r2, [pc, #104]	; (8004120 <HAL_DMA_IRQHandler+0x6c0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a19      	ldr	r2, [pc, #100]	; (8004124 <HAL_DMA_IRQHandler+0x6c4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_DMA_IRQHandler+0x6c8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x678>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a16      	ldr	r2, [pc, #88]	; (800412c <HAL_DMA_IRQHandler+0x6cc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d12b      	bne.n	8004130 <HAL_DMA_IRQHandler+0x6d0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e02a      	b.n	8004144 <HAL_DMA_IRQHandler+0x6e4>
 80040ee:	bf00      	nop
 80040f0:	40020010 	.word	0x40020010
 80040f4:	40020028 	.word	0x40020028
 80040f8:	40020040 	.word	0x40020040
 80040fc:	40020058 	.word	0x40020058
 8004100:	40020070 	.word	0x40020070
 8004104:	40020088 	.word	0x40020088
 8004108:	400200a0 	.word	0x400200a0
 800410c:	400200b8 	.word	0x400200b8
 8004110:	40020410 	.word	0x40020410
 8004114:	40020428 	.word	0x40020428
 8004118:	40020440 	.word	0x40020440
 800411c:	40020458 	.word	0x40020458
 8004120:	40020470 	.word	0x40020470
 8004124:	40020488 	.word	0x40020488
 8004128:	400204a0 	.word	0x400204a0
 800412c:	400204b8 	.word	0x400204b8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8087 	beq.w	8004258 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	2220      	movs	r2, #32
 8004154:	409a      	lsls	r2, r3
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b04      	cmp	r3, #4
 8004164:	d139      	bne.n	80041da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0216 	bic.w	r2, r2, #22
 8004174:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004184:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_DMA_IRQHandler+0x736>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0208 	bic.w	r2, r2, #8
 80041a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	223f      	movs	r2, #63	; 0x3f
 80041b0:	409a      	lsls	r2, r3
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 834a 	beq.w	8004864 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
          }
          return;
 80041d8:	e344      	b.n	8004864 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d018      	beq.n	800421a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d108      	bne.n	8004208 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d02c      	beq.n	8004258 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
 8004206:	e027      	b.n	8004258 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
 8004218:	e01e      	b.n	8004258 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10f      	bne.n	8004248 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0210 	bic.w	r2, r2, #16
 8004236:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8306 	beq.w	800486e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8088 	beq.w	8004380 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2204      	movs	r2, #4
 8004274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a7a      	ldr	r2, [pc, #488]	; (8004468 <HAL_DMA_IRQHandler+0xa08>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d04a      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a79      	ldr	r2, [pc, #484]	; (800446c <HAL_DMA_IRQHandler+0xa0c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d045      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a77      	ldr	r2, [pc, #476]	; (8004470 <HAL_DMA_IRQHandler+0xa10>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d040      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a76      	ldr	r2, [pc, #472]	; (8004474 <HAL_DMA_IRQHandler+0xa14>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d03b      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a74      	ldr	r2, [pc, #464]	; (8004478 <HAL_DMA_IRQHandler+0xa18>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d036      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a73      	ldr	r2, [pc, #460]	; (800447c <HAL_DMA_IRQHandler+0xa1c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d031      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a71      	ldr	r2, [pc, #452]	; (8004480 <HAL_DMA_IRQHandler+0xa20>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d02c      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a70      	ldr	r2, [pc, #448]	; (8004484 <HAL_DMA_IRQHandler+0xa24>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d027      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a6e      	ldr	r2, [pc, #440]	; (8004488 <HAL_DMA_IRQHandler+0xa28>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a6d      	ldr	r2, [pc, #436]	; (800448c <HAL_DMA_IRQHandler+0xa2c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d01d      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a6b      	ldr	r2, [pc, #428]	; (8004490 <HAL_DMA_IRQHandler+0xa30>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6a      	ldr	r2, [pc, #424]	; (8004494 <HAL_DMA_IRQHandler+0xa34>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a68      	ldr	r2, [pc, #416]	; (8004498 <HAL_DMA_IRQHandler+0xa38>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a67      	ldr	r2, [pc, #412]	; (800449c <HAL_DMA_IRQHandler+0xa3c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a65      	ldr	r2, [pc, #404]	; (80044a0 <HAL_DMA_IRQHandler+0xa40>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_DMA_IRQHandler+0x8b8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a64      	ldr	r2, [pc, #400]	; (80044a4 <HAL_DMA_IRQHandler+0xa44>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d108      	bne.n	800432a <HAL_DMA_IRQHandler+0x8ca>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e007      	b.n	800433a <HAL_DMA_IRQHandler+0x8da>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3301      	adds	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004342:	429a      	cmp	r2, r3
 8004344:	d307      	bcc.n	8004356 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f2      	bne.n	800433a <HAL_DMA_IRQHandler+0x8da>
 8004354:	e000      	b.n	8004358 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004356:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2203      	movs	r2, #3
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004376:	e003      	b.n	8004380 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8272 	beq.w	800486e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
 8004392:	e26c      	b.n	800486e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a43      	ldr	r2, [pc, #268]	; (80044a8 <HAL_DMA_IRQHandler+0xa48>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d022      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a42      	ldr	r2, [pc, #264]	; (80044ac <HAL_DMA_IRQHandler+0xa4c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d01d      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a40      	ldr	r2, [pc, #256]	; (80044b0 <HAL_DMA_IRQHandler+0xa50>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a3f      	ldr	r2, [pc, #252]	; (80044b4 <HAL_DMA_IRQHandler+0xa54>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3d      	ldr	r2, [pc, #244]	; (80044b8 <HAL_DMA_IRQHandler+0xa58>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3c      	ldr	r2, [pc, #240]	; (80044bc <HAL_DMA_IRQHandler+0xa5c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3a      	ldr	r2, [pc, #232]	; (80044c0 <HAL_DMA_IRQHandler+0xa60>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x984>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a39      	ldr	r2, [pc, #228]	; (80044c4 <HAL_DMA_IRQHandler+0xa64>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d101      	bne.n	80043e8 <HAL_DMA_IRQHandler+0x988>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <HAL_DMA_IRQHandler+0x98a>
 80043e8:	2300      	movs	r3, #0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 823f 	beq.w	800486e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2204      	movs	r2, #4
 8004402:	409a      	lsls	r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80cd 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xb48>
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80c7 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2204      	movs	r2, #4
 8004424:	409a      	lsls	r2, r3
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d049      	beq.n	80044c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8210 	beq.w	8004868 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004450:	e20a      	b.n	8004868 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8206 	beq.w	8004868 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004464:	e200      	b.n	8004868 <HAL_DMA_IRQHandler+0xe08>
 8004466:	bf00      	nop
 8004468:	40020010 	.word	0x40020010
 800446c:	40020028 	.word	0x40020028
 8004470:	40020040 	.word	0x40020040
 8004474:	40020058 	.word	0x40020058
 8004478:	40020070 	.word	0x40020070
 800447c:	40020088 	.word	0x40020088
 8004480:	400200a0 	.word	0x400200a0
 8004484:	400200b8 	.word	0x400200b8
 8004488:	40020410 	.word	0x40020410
 800448c:	40020428 	.word	0x40020428
 8004490:	40020440 	.word	0x40020440
 8004494:	40020458 	.word	0x40020458
 8004498:	40020470 	.word	0x40020470
 800449c:	40020488 	.word	0x40020488
 80044a0:	400204a0 	.word	0x400204a0
 80044a4:	400204b8 	.word	0x400204b8
 80044a8:	58025408 	.word	0x58025408
 80044ac:	5802541c 	.word	0x5802541c
 80044b0:	58025430 	.word	0x58025430
 80044b4:	58025444 	.word	0x58025444
 80044b8:	58025458 	.word	0x58025458
 80044bc:	5802546c 	.word	0x5802546c
 80044c0:	58025480 	.word	0x58025480
 80044c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d160      	bne.n	8004594 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a8c      	ldr	r2, [pc, #560]	; (8004708 <HAL_DMA_IRQHandler+0xca8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d04a      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a8a      	ldr	r2, [pc, #552]	; (800470c <HAL_DMA_IRQHandler+0xcac>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d045      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a89      	ldr	r2, [pc, #548]	; (8004710 <HAL_DMA_IRQHandler+0xcb0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d040      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a87      	ldr	r2, [pc, #540]	; (8004714 <HAL_DMA_IRQHandler+0xcb4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d03b      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a86      	ldr	r2, [pc, #536]	; (8004718 <HAL_DMA_IRQHandler+0xcb8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d036      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a84      	ldr	r2, [pc, #528]	; (800471c <HAL_DMA_IRQHandler+0xcbc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d031      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a83      	ldr	r2, [pc, #524]	; (8004720 <HAL_DMA_IRQHandler+0xcc0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d02c      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a81      	ldr	r2, [pc, #516]	; (8004724 <HAL_DMA_IRQHandler+0xcc4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d027      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a80      	ldr	r2, [pc, #512]	; (8004728 <HAL_DMA_IRQHandler+0xcc8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d022      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a7e      	ldr	r2, [pc, #504]	; (800472c <HAL_DMA_IRQHandler+0xccc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01d      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a7d      	ldr	r2, [pc, #500]	; (8004730 <HAL_DMA_IRQHandler+0xcd0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d018      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a7b      	ldr	r2, [pc, #492]	; (8004734 <HAL_DMA_IRQHandler+0xcd4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7a      	ldr	r2, [pc, #488]	; (8004738 <HAL_DMA_IRQHandler+0xcd8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00e      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a78      	ldr	r2, [pc, #480]	; (800473c <HAL_DMA_IRQHandler+0xcdc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a77      	ldr	r2, [pc, #476]	; (8004740 <HAL_DMA_IRQHandler+0xce0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <HAL_DMA_IRQHandler+0xb12>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a75      	ldr	r2, [pc, #468]	; (8004744 <HAL_DMA_IRQHandler+0xce4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d108      	bne.n	8004584 <HAL_DMA_IRQHandler+0xb24>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0208 	bic.w	r2, r2, #8
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e007      	b.n	8004594 <HAL_DMA_IRQHandler+0xb34>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0204 	bic.w	r2, r2, #4
 8004592:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8165 	beq.w	8004868 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045a6:	e15f      	b.n	8004868 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	2202      	movs	r2, #2
 80045b2:	409a      	lsls	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80c5 	beq.w	8004748 <HAL_DMA_IRQHandler+0xce8>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80bf 	beq.w	8004748 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2202      	movs	r2, #2
 80045d4:	409a      	lsls	r2, r3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d018      	beq.n	8004616 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 813a 	beq.w	800486c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004600:	e134      	b.n	800486c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8130 	beq.w	800486c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004614:	e12a      	b.n	800486c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d168      	bne.n	80046f2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a38      	ldr	r2, [pc, #224]	; (8004708 <HAL_DMA_IRQHandler+0xca8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d04a      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a37      	ldr	r2, [pc, #220]	; (800470c <HAL_DMA_IRQHandler+0xcac>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d045      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a35      	ldr	r2, [pc, #212]	; (8004710 <HAL_DMA_IRQHandler+0xcb0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d040      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a34      	ldr	r2, [pc, #208]	; (8004714 <HAL_DMA_IRQHandler+0xcb4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d03b      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a32      	ldr	r2, [pc, #200]	; (8004718 <HAL_DMA_IRQHandler+0xcb8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d036      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a31      	ldr	r2, [pc, #196]	; (800471c <HAL_DMA_IRQHandler+0xcbc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d031      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2f      	ldr	r2, [pc, #188]	; (8004720 <HAL_DMA_IRQHandler+0xcc0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d02c      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2e      	ldr	r2, [pc, #184]	; (8004724 <HAL_DMA_IRQHandler+0xcc4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d027      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <HAL_DMA_IRQHandler+0xcc8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d022      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2b      	ldr	r2, [pc, #172]	; (800472c <HAL_DMA_IRQHandler+0xccc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d01d      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a29      	ldr	r2, [pc, #164]	; (8004730 <HAL_DMA_IRQHandler+0xcd0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d018      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a28      	ldr	r2, [pc, #160]	; (8004734 <HAL_DMA_IRQHandler+0xcd4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a26      	ldr	r2, [pc, #152]	; (8004738 <HAL_DMA_IRQHandler+0xcd8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00e      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a25      	ldr	r2, [pc, #148]	; (800473c <HAL_DMA_IRQHandler+0xcdc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a23      	ldr	r2, [pc, #140]	; (8004740 <HAL_DMA_IRQHandler+0xce0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xc60>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a22      	ldr	r2, [pc, #136]	; (8004744 <HAL_DMA_IRQHandler+0xce4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d108      	bne.n	80046d2 <HAL_DMA_IRQHandler+0xc72>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0214 	bic.w	r2, r2, #20
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e007      	b.n	80046e2 <HAL_DMA_IRQHandler+0xc82>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 020a 	bic.w	r2, r2, #10
 80046e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80b8 	beq.w	800486c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004704:	e0b2      	b.n	800486c <HAL_DMA_IRQHandler+0xe0c>
 8004706:	bf00      	nop
 8004708:	40020010 	.word	0x40020010
 800470c:	40020028 	.word	0x40020028
 8004710:	40020040 	.word	0x40020040
 8004714:	40020058 	.word	0x40020058
 8004718:	40020070 	.word	0x40020070
 800471c:	40020088 	.word	0x40020088
 8004720:	400200a0 	.word	0x400200a0
 8004724:	400200b8 	.word	0x400200b8
 8004728:	40020410 	.word	0x40020410
 800472c:	40020428 	.word	0x40020428
 8004730:	40020440 	.word	0x40020440
 8004734:	40020458 	.word	0x40020458
 8004738:	40020470 	.word	0x40020470
 800473c:	40020488 	.word	0x40020488
 8004740:	400204a0 	.word	0x400204a0
 8004744:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2208      	movs	r2, #8
 8004752:	409a      	lsls	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	4013      	ands	r3, r2
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8088 	beq.w	800486e <HAL_DMA_IRQHandler+0xe0e>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8082 	beq.w	800486e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a41      	ldr	r2, [pc, #260]	; (8004874 <HAL_DMA_IRQHandler+0xe14>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d04a      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a3f      	ldr	r2, [pc, #252]	; (8004878 <HAL_DMA_IRQHandler+0xe18>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d045      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a3e      	ldr	r2, [pc, #248]	; (800487c <HAL_DMA_IRQHandler+0xe1c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d040      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a3c      	ldr	r2, [pc, #240]	; (8004880 <HAL_DMA_IRQHandler+0xe20>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d03b      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a3b      	ldr	r2, [pc, #236]	; (8004884 <HAL_DMA_IRQHandler+0xe24>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d036      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a39      	ldr	r2, [pc, #228]	; (8004888 <HAL_DMA_IRQHandler+0xe28>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d031      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a38      	ldr	r2, [pc, #224]	; (800488c <HAL_DMA_IRQHandler+0xe2c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d02c      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a36      	ldr	r2, [pc, #216]	; (8004890 <HAL_DMA_IRQHandler+0xe30>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d027      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a35      	ldr	r2, [pc, #212]	; (8004894 <HAL_DMA_IRQHandler+0xe34>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d022      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a33      	ldr	r2, [pc, #204]	; (8004898 <HAL_DMA_IRQHandler+0xe38>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01d      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a32      	ldr	r2, [pc, #200]	; (800489c <HAL_DMA_IRQHandler+0xe3c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d018      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a30      	ldr	r2, [pc, #192]	; (80048a0 <HAL_DMA_IRQHandler+0xe40>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2f      	ldr	r2, [pc, #188]	; (80048a4 <HAL_DMA_IRQHandler+0xe44>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <HAL_DMA_IRQHandler+0xe48>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <HAL_DMA_IRQHandler+0xe4c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_DMA_IRQHandler+0xdaa>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <HAL_DMA_IRQHandler+0xe50>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <HAL_DMA_IRQHandler+0xdbc>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 021c 	bic.w	r2, r2, #28
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e007      	b.n	800482c <HAL_DMA_IRQHandler+0xdcc>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 020e 	bic.w	r2, r2, #14
 800482a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2201      	movs	r2, #1
 8004836:	409a      	lsls	r2, r3
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
 8004862:	e004      	b.n	800486e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004864:	bf00      	nop
 8004866:	e002      	b.n	800486e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004868:	bf00      	nop
 800486a:	e000      	b.n	800486e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800486e:	3728      	adds	r7, #40	; 0x28
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40020010 	.word	0x40020010
 8004878:	40020028 	.word	0x40020028
 800487c:	40020040 	.word	0x40020040
 8004880:	40020058 	.word	0x40020058
 8004884:	40020070 	.word	0x40020070
 8004888:	40020088 	.word	0x40020088
 800488c:	400200a0 	.word	0x400200a0
 8004890:	400200b8 	.word	0x400200b8
 8004894:	40020410 	.word	0x40020410
 8004898:	40020428 	.word	0x40020428
 800489c:	40020440 	.word	0x40020440
 80048a0:	40020458 	.word	0x40020458
 80048a4:	40020470 	.word	0x40020470
 80048a8:	40020488 	.word	0x40020488
 80048ac:	400204a0 	.word	0x400204a0
 80048b0:	400204b8 	.word	0x400204b8

080048b4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a84      	ldr	r2, [pc, #528]	; (8004afc <DMA_SetConfig+0x230>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d072      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a82      	ldr	r2, [pc, #520]	; (8004b00 <DMA_SetConfig+0x234>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d06d      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a81      	ldr	r2, [pc, #516]	; (8004b04 <DMA_SetConfig+0x238>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d068      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a7f      	ldr	r2, [pc, #508]	; (8004b08 <DMA_SetConfig+0x23c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d063      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7e      	ldr	r2, [pc, #504]	; (8004b0c <DMA_SetConfig+0x240>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d05e      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a7c      	ldr	r2, [pc, #496]	; (8004b10 <DMA_SetConfig+0x244>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d059      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7b      	ldr	r2, [pc, #492]	; (8004b14 <DMA_SetConfig+0x248>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d054      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a79      	ldr	r2, [pc, #484]	; (8004b18 <DMA_SetConfig+0x24c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d04f      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a78      	ldr	r2, [pc, #480]	; (8004b1c <DMA_SetConfig+0x250>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d04a      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a76      	ldr	r2, [pc, #472]	; (8004b20 <DMA_SetConfig+0x254>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d045      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a75      	ldr	r2, [pc, #468]	; (8004b24 <DMA_SetConfig+0x258>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d040      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a73      	ldr	r2, [pc, #460]	; (8004b28 <DMA_SetConfig+0x25c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d03b      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a72      	ldr	r2, [pc, #456]	; (8004b2c <DMA_SetConfig+0x260>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d036      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a70      	ldr	r2, [pc, #448]	; (8004b30 <DMA_SetConfig+0x264>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d031      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a6f      	ldr	r2, [pc, #444]	; (8004b34 <DMA_SetConfig+0x268>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d02c      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a6d      	ldr	r2, [pc, #436]	; (8004b38 <DMA_SetConfig+0x26c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d027      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6c      	ldr	r2, [pc, #432]	; (8004b3c <DMA_SetConfig+0x270>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a6a      	ldr	r2, [pc, #424]	; (8004b40 <DMA_SetConfig+0x274>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01d      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a69      	ldr	r2, [pc, #420]	; (8004b44 <DMA_SetConfig+0x278>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a67      	ldr	r2, [pc, #412]	; (8004b48 <DMA_SetConfig+0x27c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a66      	ldr	r2, [pc, #408]	; (8004b4c <DMA_SetConfig+0x280>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a64      	ldr	r2, [pc, #400]	; (8004b50 <DMA_SetConfig+0x284>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a63      	ldr	r2, [pc, #396]	; (8004b54 <DMA_SetConfig+0x288>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <DMA_SetConfig+0x10a>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a61      	ldr	r2, [pc, #388]	; (8004b58 <DMA_SetConfig+0x28c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <DMA_SetConfig+0x10e>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <DMA_SetConfig+0x110>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3e      	ldr	r2, [pc, #248]	; (8004afc <DMA_SetConfig+0x230>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d04a      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a3d      	ldr	r2, [pc, #244]	; (8004b00 <DMA_SetConfig+0x234>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d045      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <DMA_SetConfig+0x238>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d040      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a3a      	ldr	r2, [pc, #232]	; (8004b08 <DMA_SetConfig+0x23c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d03b      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a38      	ldr	r2, [pc, #224]	; (8004b0c <DMA_SetConfig+0x240>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d036      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a37      	ldr	r2, [pc, #220]	; (8004b10 <DMA_SetConfig+0x244>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d031      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a35      	ldr	r2, [pc, #212]	; (8004b14 <DMA_SetConfig+0x248>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d02c      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a34      	ldr	r2, [pc, #208]	; (8004b18 <DMA_SetConfig+0x24c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d027      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a32      	ldr	r2, [pc, #200]	; (8004b1c <DMA_SetConfig+0x250>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d022      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a31      	ldr	r2, [pc, #196]	; (8004b20 <DMA_SetConfig+0x254>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d01d      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2f      	ldr	r2, [pc, #188]	; (8004b24 <DMA_SetConfig+0x258>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d018      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2e      	ldr	r2, [pc, #184]	; (8004b28 <DMA_SetConfig+0x25c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2c      	ldr	r2, [pc, #176]	; (8004b2c <DMA_SetConfig+0x260>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00e      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2b      	ldr	r2, [pc, #172]	; (8004b30 <DMA_SetConfig+0x264>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d009      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a29      	ldr	r2, [pc, #164]	; (8004b34 <DMA_SetConfig+0x268>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d004      	beq.n	8004a9c <DMA_SetConfig+0x1d0>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a28      	ldr	r2, [pc, #160]	; (8004b38 <DMA_SetConfig+0x26c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d101      	bne.n	8004aa0 <DMA_SetConfig+0x1d4>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <DMA_SetConfig+0x1d6>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d05a      	beq.n	8004b5c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	223f      	movs	r2, #63	; 0x3f
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ac4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d108      	bne.n	8004ae8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ae6:	e087      	b.n	8004bf8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	60da      	str	r2, [r3, #12]
}
 8004af8:	e07e      	b.n	8004bf8 <DMA_SetConfig+0x32c>
 8004afa:	bf00      	nop
 8004afc:	40020010 	.word	0x40020010
 8004b00:	40020028 	.word	0x40020028
 8004b04:	40020040 	.word	0x40020040
 8004b08:	40020058 	.word	0x40020058
 8004b0c:	40020070 	.word	0x40020070
 8004b10:	40020088 	.word	0x40020088
 8004b14:	400200a0 	.word	0x400200a0
 8004b18:	400200b8 	.word	0x400200b8
 8004b1c:	40020410 	.word	0x40020410
 8004b20:	40020428 	.word	0x40020428
 8004b24:	40020440 	.word	0x40020440
 8004b28:	40020458 	.word	0x40020458
 8004b2c:	40020470 	.word	0x40020470
 8004b30:	40020488 	.word	0x40020488
 8004b34:	400204a0 	.word	0x400204a0
 8004b38:	400204b8 	.word	0x400204b8
 8004b3c:	58025408 	.word	0x58025408
 8004b40:	5802541c 	.word	0x5802541c
 8004b44:	58025430 	.word	0x58025430
 8004b48:	58025444 	.word	0x58025444
 8004b4c:	58025458 	.word	0x58025458
 8004b50:	5802546c 	.word	0x5802546c
 8004b54:	58025480 	.word	0x58025480
 8004b58:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a28      	ldr	r2, [pc, #160]	; (8004c04 <DMA_SetConfig+0x338>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d022      	beq.n	8004bac <DMA_SetConfig+0x2e0>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a27      	ldr	r2, [pc, #156]	; (8004c08 <DMA_SetConfig+0x33c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d01d      	beq.n	8004bac <DMA_SetConfig+0x2e0>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a25      	ldr	r2, [pc, #148]	; (8004c0c <DMA_SetConfig+0x340>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d018      	beq.n	8004bac <DMA_SetConfig+0x2e0>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a24      	ldr	r2, [pc, #144]	; (8004c10 <DMA_SetConfig+0x344>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <DMA_SetConfig+0x2e0>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a22      	ldr	r2, [pc, #136]	; (8004c14 <DMA_SetConfig+0x348>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00e      	beq.n	8004bac <DMA_SetConfig+0x2e0>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a21      	ldr	r2, [pc, #132]	; (8004c18 <DMA_SetConfig+0x34c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <DMA_SetConfig+0x2e0>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <DMA_SetConfig+0x350>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <DMA_SetConfig+0x2e0>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <DMA_SetConfig+0x354>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d101      	bne.n	8004bb0 <DMA_SetConfig+0x2e4>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <DMA_SetConfig+0x2e6>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d020      	beq.n	8004bf8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d108      	bne.n	8004be8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	60da      	str	r2, [r3, #12]
}
 8004be6:	e007      	b.n	8004bf8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	58025408 	.word	0x58025408
 8004c08:	5802541c 	.word	0x5802541c
 8004c0c:	58025430 	.word	0x58025430
 8004c10:	58025444 	.word	0x58025444
 8004c14:	58025458 	.word	0x58025458
 8004c18:	5802546c 	.word	0x5802546c
 8004c1c:	58025480 	.word	0x58025480
 8004c20:	58025494 	.word	0x58025494

08004c24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a42      	ldr	r2, [pc, #264]	; (8004d3c <DMA_CalcBaseAndBitshift+0x118>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d04a      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a41      	ldr	r2, [pc, #260]	; (8004d40 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d045      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a3f      	ldr	r2, [pc, #252]	; (8004d44 <DMA_CalcBaseAndBitshift+0x120>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d040      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3e      	ldr	r2, [pc, #248]	; (8004d48 <DMA_CalcBaseAndBitshift+0x124>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d03b      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a3c      	ldr	r2, [pc, #240]	; (8004d4c <DMA_CalcBaseAndBitshift+0x128>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d036      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a3b      	ldr	r2, [pc, #236]	; (8004d50 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d031      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a39      	ldr	r2, [pc, #228]	; (8004d54 <DMA_CalcBaseAndBitshift+0x130>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d02c      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a38      	ldr	r2, [pc, #224]	; (8004d58 <DMA_CalcBaseAndBitshift+0x134>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d027      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a36      	ldr	r2, [pc, #216]	; (8004d5c <DMA_CalcBaseAndBitshift+0x138>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d022      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a35      	ldr	r2, [pc, #212]	; (8004d60 <DMA_CalcBaseAndBitshift+0x13c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d01d      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a33      	ldr	r2, [pc, #204]	; (8004d64 <DMA_CalcBaseAndBitshift+0x140>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a32      	ldr	r2, [pc, #200]	; (8004d68 <DMA_CalcBaseAndBitshift+0x144>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a30      	ldr	r2, [pc, #192]	; (8004d6c <DMA_CalcBaseAndBitshift+0x148>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <DMA_CalcBaseAndBitshift+0x14c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2d      	ldr	r2, [pc, #180]	; (8004d74 <DMA_CalcBaseAndBitshift+0x150>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <DMA_CalcBaseAndBitshift+0xa8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2c      	ldr	r2, [pc, #176]	; (8004d78 <DMA_CalcBaseAndBitshift+0x154>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <DMA_CalcBaseAndBitshift+0xac>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <DMA_CalcBaseAndBitshift+0xae>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d024      	beq.n	8004d20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	3b10      	subs	r3, #16
 8004cde:	4a27      	ldr	r2, [pc, #156]	; (8004d7c <DMA_CalcBaseAndBitshift+0x158>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	4a24      	ldr	r2, [pc, #144]	; (8004d80 <DMA_CalcBaseAndBitshift+0x15c>)
 8004cf0:	5cd3      	ldrb	r3, [r2, r3]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d908      	bls.n	8004d10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	4b1f      	ldr	r3, [pc, #124]	; (8004d84 <DMA_CalcBaseAndBitshift+0x160>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	1d1a      	adds	r2, r3, #4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	659a      	str	r2, [r3, #88]	; 0x58
 8004d0e:	e00d      	b.n	8004d2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <DMA_CalcBaseAndBitshift+0x160>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d1e:	e005      	b.n	8004d2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40020010 	.word	0x40020010
 8004d40:	40020028 	.word	0x40020028
 8004d44:	40020040 	.word	0x40020040
 8004d48:	40020058 	.word	0x40020058
 8004d4c:	40020070 	.word	0x40020070
 8004d50:	40020088 	.word	0x40020088
 8004d54:	400200a0 	.word	0x400200a0
 8004d58:	400200b8 	.word	0x400200b8
 8004d5c:	40020410 	.word	0x40020410
 8004d60:	40020428 	.word	0x40020428
 8004d64:	40020440 	.word	0x40020440
 8004d68:	40020458 	.word	0x40020458
 8004d6c:	40020470 	.word	0x40020470
 8004d70:	40020488 	.word	0x40020488
 8004d74:	400204a0 	.word	0x400204a0
 8004d78:	400204b8 	.word	0x400204b8
 8004d7c:	aaaaaaab 	.word	0xaaaaaaab
 8004d80:	0800ce90 	.word	0x0800ce90
 8004d84:	fffffc00 	.word	0xfffffc00

08004d88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d120      	bne.n	8004dde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d858      	bhi.n	8004e56 <DMA_CheckFifoParam+0xce>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <DMA_CheckFifoParam+0x24>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004dcf 	.word	0x08004dcf
 8004db4:	08004dbd 	.word	0x08004dbd
 8004db8:	08004e57 	.word	0x08004e57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d048      	beq.n	8004e5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dcc:	e045      	b.n	8004e5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dd6:	d142      	bne.n	8004e5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ddc:	e03f      	b.n	8004e5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de6:	d123      	bne.n	8004e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d838      	bhi.n	8004e62 <DMA_CheckFifoParam+0xda>
 8004df0:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <DMA_CheckFifoParam+0x70>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e0f 	.word	0x08004e0f
 8004e00:	08004e09 	.word	0x08004e09
 8004e04:	08004e21 	.word	0x08004e21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e0c:	e030      	b.n	8004e70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d025      	beq.n	8004e66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e1e:	e022      	b.n	8004e66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e28:	d11f      	bne.n	8004e6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e2e:	e01c      	b.n	8004e6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d902      	bls.n	8004e3e <DMA_CheckFifoParam+0xb6>
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d003      	beq.n	8004e44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e3c:	e018      	b.n	8004e70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
        break;
 8004e42:	e015      	b.n	8004e70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
    break;
 8004e54:	e00b      	b.n	8004e6e <DMA_CheckFifoParam+0xe6>
        break;
 8004e56:	bf00      	nop
 8004e58:	e00a      	b.n	8004e70 <DMA_CheckFifoParam+0xe8>
        break;
 8004e5a:	bf00      	nop
 8004e5c:	e008      	b.n	8004e70 <DMA_CheckFifoParam+0xe8>
        break;
 8004e5e:	bf00      	nop
 8004e60:	e006      	b.n	8004e70 <DMA_CheckFifoParam+0xe8>
        break;
 8004e62:	bf00      	nop
 8004e64:	e004      	b.n	8004e70 <DMA_CheckFifoParam+0xe8>
        break;
 8004e66:	bf00      	nop
 8004e68:	e002      	b.n	8004e70 <DMA_CheckFifoParam+0xe8>
        break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <DMA_CheckFifoParam+0xe8>
    break;
 8004e6e:	bf00      	nop
    }
  }

  return status;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop

08004e80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a38      	ldr	r2, [pc, #224]	; (8004f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a36      	ldr	r2, [pc, #216]	; (8004f78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a35      	ldr	r2, [pc, #212]	; (8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a33      	ldr	r2, [pc, #204]	; (8004f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a32      	ldr	r2, [pc, #200]	; (8004f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a30      	ldr	r2, [pc, #192]	; (8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2f      	ldr	r2, [pc, #188]	; (8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2d      	ldr	r2, [pc, #180]	; (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01a      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	3b08      	subs	r3, #8
 8004ef0:	4a28      	ldr	r2, [pc, #160]	; (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	091b      	lsrs	r3, r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	461a      	mov	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	2201      	movs	r2, #1
 8004f16:	409a      	lsls	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f1c:	e024      	b.n	8004f68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	3b10      	subs	r3, #16
 8004f26:	4a1e      	ldr	r2, [pc, #120]	; (8004fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d806      	bhi.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d902      	bls.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3308      	adds	r3, #8
 8004f44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4b18      	ldr	r3, [pc, #96]	; (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	2201      	movs	r2, #1
 8004f62:	409a      	lsls	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	58025408 	.word	0x58025408
 8004f78:	5802541c 	.word	0x5802541c
 8004f7c:	58025430 	.word	0x58025430
 8004f80:	58025444 	.word	0x58025444
 8004f84:	58025458 	.word	0x58025458
 8004f88:	5802546c 	.word	0x5802546c
 8004f8c:	58025480 	.word	0x58025480
 8004f90:	58025494 	.word	0x58025494
 8004f94:	cccccccd 	.word	0xcccccccd
 8004f98:	16009600 	.word	0x16009600
 8004f9c:	58025880 	.word	0x58025880
 8004fa0:	aaaaaaab 	.word	0xaaaaaaab
 8004fa4:	400204b8 	.word	0x400204b8
 8004fa8:	4002040f 	.word	0x4002040f
 8004fac:	10008200 	.word	0x10008200
 8004fb0:	40020880 	.word	0x40020880

08004fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d04a      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d847      	bhi.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a25      	ldr	r2, [pc, #148]	; (800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d022      	beq.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a24      	ldr	r2, [pc, #144]	; (8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d01d      	beq.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a22      	ldr	r2, [pc, #136]	; (8005074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d018      	beq.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a21      	ldr	r2, [pc, #132]	; (8005078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1f      	ldr	r2, [pc, #124]	; (800507c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00e      	beq.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1c      	ldr	r2, [pc, #112]	; (8005084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d101      	bne.n	8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4b17      	ldr	r3, [pc, #92]	; (800508c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	461a      	mov	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a15      	ldr	r2, [pc, #84]	; (8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800503c:	671a      	str	r2, [r3, #112]	; 0x70
 800503e:	e009      	b.n	8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4b14      	ldr	r3, [pc, #80]	; (8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	461a      	mov	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a11      	ldr	r2, [pc, #68]	; (8005098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005052:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3b01      	subs	r3, #1
 8005058:	2201      	movs	r2, #1
 800505a:	409a      	lsls	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	58025408 	.word	0x58025408
 8005070:	5802541c 	.word	0x5802541c
 8005074:	58025430 	.word	0x58025430
 8005078:	58025444 	.word	0x58025444
 800507c:	58025458 	.word	0x58025458
 8005080:	5802546c 	.word	0x5802546c
 8005084:	58025480 	.word	0x58025480
 8005088:	58025494 	.word	0x58025494
 800508c:	1600963f 	.word	0x1600963f
 8005090:	58025940 	.word	0x58025940
 8005094:	1000823f 	.word	0x1000823f
 8005098:	40020940 	.word	0x40020940

0800509c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e0c6      	b.n	800523c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d102      	bne.n	80050bc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc fb9c 	bl	80017f4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2223      	movs	r2, #35	; 0x23
 80050c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050c2:	4b60      	ldr	r3, [pc, #384]	; (8005244 <HAL_ETH_Init+0x1a8>)
 80050c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050c8:	4a5e      	ldr	r2, [pc, #376]	; (8005244 <HAL_ETH_Init+0x1a8>)
 80050ca:	f043 0302 	orr.w	r3, r3, #2
 80050ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050d2:	4b5c      	ldr	r3, [pc, #368]	; (8005244 <HAL_ETH_Init+0x1a8>)
 80050d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	7a1b      	ldrb	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d103      	bne.n	80050f0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80050e8:	2000      	movs	r0, #0
 80050ea:	f7fd f859 	bl	80021a0 <HAL_SYSCFG_ETHInterfaceSelect>
 80050ee:	e003      	b.n	80050f8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80050f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80050f4:	f7fd f854 	bl	80021a0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005110:	f7fd f80a 	bl	8002128 <HAL_GetTick>
 8005114:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005116:	e00f      	b.n	8005138 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005118:	f7fd f806 	bl	8002128 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005126:	d907      	bls.n	8005138 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2204      	movs	r2, #4
 800512c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	22e0      	movs	r2, #224	; 0xe0
 8005132:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e081      	b.n	800523c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e6      	bne.n	8005118 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fac0 	bl	80056d0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005150:	f001 fea4 	bl	8006e9c <HAL_RCC_GetHCLKFreq>
 8005154:	4603      	mov	r3, r0
 8005156:	4a3c      	ldr	r2, [pc, #240]	; (8005248 <HAL_ETH_Init+0x1ac>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	0c9a      	lsrs	r2, r3, #18
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3a01      	subs	r2, #1
 8005164:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fa13 	bl	8005594 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005184:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005188:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	22e0      	movs	r2, #224	; 0xe0
 80051a0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e04a      	b.n	800523c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80051ae:	4413      	add	r3, r2
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	4b26      	ldr	r3, [pc, #152]	; (800524c <HAL_ETH_Init+0x1b0>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6952      	ldr	r2, [r2, #20]
 80051ba:	0052      	lsls	r2, r2, #1
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	6809      	ldr	r1, [r1, #0]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	f241 1308 	movw	r3, #4360	; 0x1108
 80051c6:	440b      	add	r3, r1
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fad8 	bl	8005780 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fb1c 	bl	800580e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	3305      	adds	r3, #5
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	021a      	lsls	r2, r3, #8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	3304      	adds	r3, #4
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	4619      	mov	r1, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	3303      	adds	r3, #3
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	061a      	lsls	r2, r3, #24
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	3302      	adds	r3, #2
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	3301      	adds	r3, #1
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005214:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005222:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005224:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2210      	movs	r2, #16
 8005232:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2210      	movs	r2, #16
 8005238:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	58024400 	.word	0x58024400
 8005248:	431bde83 	.word	0x431bde83
 800524c:	ffff8001 	.word	0xffff8001

08005250 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005262:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	791b      	ldrb	r3, [r3, #4]
 8005268:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800526a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	7b1b      	ldrb	r3, [r3, #12]
 8005270:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005272:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	7b5b      	ldrb	r3, [r3, #13]
 8005278:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800527a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	7b9b      	ldrb	r3, [r3, #14]
 8005280:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005282:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	7bdb      	ldrb	r3, [r3, #15]
 8005288:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800528a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	7c12      	ldrb	r2, [r2, #16]
 8005290:	2a00      	cmp	r2, #0
 8005292:	d102      	bne.n	800529a <ETH_SetMACConfig+0x4a>
 8005294:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005298:	e000      	b.n	800529c <ETH_SetMACConfig+0x4c>
 800529a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800529c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	7c52      	ldrb	r2, [r2, #17]
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	d102      	bne.n	80052ac <ETH_SetMACConfig+0x5c>
 80052a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052aa:	e000      	b.n	80052ae <ETH_SetMACConfig+0x5e>
 80052ac:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80052ae:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	7c9b      	ldrb	r3, [r3, #18]
 80052b4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80052b6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80052bc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80052c2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	7f1b      	ldrb	r3, [r3, #28]
 80052c8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80052ca:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	7f5b      	ldrb	r3, [r3, #29]
 80052d0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80052d2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	7f92      	ldrb	r2, [r2, #30]
 80052d8:	2a00      	cmp	r2, #0
 80052da:	d102      	bne.n	80052e2 <ETH_SetMACConfig+0x92>
 80052dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052e0:	e000      	b.n	80052e4 <ETH_SetMACConfig+0x94>
 80052e2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80052e4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	7fdb      	ldrb	r3, [r3, #31]
 80052ea:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80052ec:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80052f4:	2a00      	cmp	r2, #0
 80052f6:	d102      	bne.n	80052fe <ETH_SetMACConfig+0xae>
 80052f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052fc:	e000      	b.n	8005300 <ETH_SetMACConfig+0xb0>
 80052fe:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005300:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005306:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800530e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005310:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b56      	ldr	r3, [pc, #344]	; (800547c <ETH_SetMACConfig+0x22c>)
 8005322:	4013      	ands	r3, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	430b      	orrs	r3, r1
 800532c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800533a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800533c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005344:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005346:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800534e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005350:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005358:	2a00      	cmp	r2, #0
 800535a:	d102      	bne.n	8005362 <ETH_SetMACConfig+0x112>
 800535c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005360:	e000      	b.n	8005364 <ETH_SetMACConfig+0x114>
 8005362:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005364:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	4b42      	ldr	r3, [pc, #264]	; (8005480 <ETH_SetMACConfig+0x230>)
 8005376:	4013      	ands	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	430b      	orrs	r3, r1
 8005380:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005388:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <ETH_SetMACConfig+0x234>)
 800539a:	4013      	ands	r3, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	68f9      	ldr	r1, [r7, #12]
 80053a2:	430b      	orrs	r3, r1
 80053a4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80053ac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053b2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80053ba:	2a00      	cmp	r2, #0
 80053bc:	d101      	bne.n	80053c2 <ETH_SetMACConfig+0x172>
 80053be:	2280      	movs	r2, #128	; 0x80
 80053c0:	e000      	b.n	80053c4 <ETH_SetMACConfig+0x174>
 80053c2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80053c4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053d6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80053da:	4013      	ands	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	68f9      	ldr	r1, [r7, #12]
 80053e2:	430b      	orrs	r3, r1
 80053e4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80053ec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80053f4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005402:	f023 0103 	bic.w	r1, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	430a      	orrs	r2, r1
 800540e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800541a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005436:	2a00      	cmp	r2, #0
 8005438:	d101      	bne.n	800543e <ETH_SetMACConfig+0x1ee>
 800543a:	2240      	movs	r2, #64	; 0x40
 800543c:	e000      	b.n	8005440 <ETH_SetMACConfig+0x1f0>
 800543e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005440:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005448:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800544a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005452:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005460:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	430a      	orrs	r2, r1
 800546c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	00048083 	.word	0x00048083
 8005480:	c0f88000 	.word	0xc0f88000
 8005484:	fffffef0 	.word	0xfffffef0

08005488 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4b38      	ldr	r3, [pc, #224]	; (8005580 <ETH_SetDMAConfig+0xf8>)
 800549e:	4013      	ands	r3, r2
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	6809      	ldr	r1, [r1, #0]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80054ae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	791b      	ldrb	r3, [r3, #4]
 80054b4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054ba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	7b1b      	ldrb	r3, [r3, #12]
 80054c0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	f241 0304 	movw	r3, #4100	; 0x1004
 80054ce:	4413      	add	r3, r2
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b2c      	ldr	r3, [pc, #176]	; (8005584 <ETH_SetDMAConfig+0xfc>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6811      	ldr	r1, [r2, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	431a      	orrs	r2, r3
 80054de:	f241 0304 	movw	r3, #4100	; 0x1004
 80054e2:	440b      	add	r3, r1
 80054e4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	7b5b      	ldrb	r3, [r3, #13]
 80054ea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b22      	ldr	r3, [pc, #136]	; (8005588 <ETH_SetDMAConfig+0x100>)
 8005500:	4013      	ands	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6811      	ldr	r1, [r2, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	431a      	orrs	r2, r3
 800550a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800550e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	7d1b      	ldrb	r3, [r3, #20]
 8005518:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800551a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	7f5b      	ldrb	r3, [r3, #29]
 8005520:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	f241 1304 	movw	r3, #4356	; 0x1104
 800552e:	4413      	add	r3, r2
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b16      	ldr	r3, [pc, #88]	; (800558c <ETH_SetDMAConfig+0x104>)
 8005534:	4013      	ands	r3, r2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6811      	ldr	r1, [r2, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	431a      	orrs	r2, r3
 800553e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005542:	440b      	add	r3, r1
 8005544:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	7f1b      	ldrb	r3, [r3, #28]
 800554a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	f241 1308 	movw	r3, #4360	; 0x1108
 800555c:	4413      	add	r3, r2
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <ETH_SetDMAConfig+0x108>)
 8005562:	4013      	ands	r3, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6811      	ldr	r1, [r2, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	431a      	orrs	r2, r3
 800556c:	f241 1308 	movw	r3, #4360	; 0x1108
 8005570:	440b      	add	r3, r1
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	ffff87fd 	.word	0xffff87fd
 8005584:	ffff2ffe 	.word	0xffff2ffe
 8005588:	fffec000 	.word	0xfffec000
 800558c:	ffc0efef 	.word	0xffc0efef
 8005590:	7fc0ffff 	.word	0x7fc0ffff

08005594 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b0a4      	sub	sp, #144	; 0x90
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80055a2:	2300      	movs	r3, #0
 80055a4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80055c4:	2300      	movs	r3, #0
 80055c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80055d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055d4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80055dc:	2300      	movs	r3, #0
 80055de:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80055ec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80055f0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80055f8:	2300      	movs	r3, #0
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005602:	2300      	movs	r3, #0
 8005604:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800560e:	2300      	movs	r3, #0
 8005610:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005612:	2300      	movs	r3, #0
 8005614:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005616:	2300      	movs	r3, #0
 8005618:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800561a:	2300      	movs	r3, #0
 800561c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005620:	2300      	movs	r3, #0
 8005622:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800562c:	2320      	movs	r3, #32
 800562e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005638:	2300      	movs	r3, #0
 800563a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800563e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005648:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800564a:	2300      	movs	r3, #0
 800564c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005650:	2302      	movs	r3, #2
 8005652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005656:	2300      	movs	r3, #0
 8005658:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800565c:	2300      	movs	r3, #0
 800565e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005662:	2300      	movs	r3, #0
 8005664:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800566e:	2300      	movs	r3, #0
 8005670:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fde6 	bl	8005250 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005684:	2301      	movs	r3, #1
 8005686:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005688:	2301      	movs	r3, #1
 800568a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800568c:	2300      	movs	r3, #0
 800568e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005690:	2300      	movs	r3, #0
 8005692:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005696:	2300      	movs	r3, #0
 8005698:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800569a:	2300      	movs	r3, #0
 800569c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800569e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80056a4:	2300      	movs	r3, #0
 80056a6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80056a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80056b4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff fee1 	bl	8005488 <ETH_SetDMAConfig>
}
 80056c6:	bf00      	nop
 80056c8:	3790      	adds	r7, #144	; 0x90
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80056ea:	f001 fbd7 	bl	8006e9c <HAL_RCC_GetHCLKFreq>
 80056ee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4a1e      	ldr	r2, [pc, #120]	; (800576c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d908      	bls.n	800570a <ETH_MAC_MDIO_ClkConfig+0x3a>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d804      	bhi.n	800570a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e027      	b.n	800575a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4a18      	ldr	r2, [pc, #96]	; (8005770 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d908      	bls.n	8005724 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4a17      	ldr	r2, [pc, #92]	; (8005774 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d204      	bcs.n	8005724 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e01a      	b.n	800575a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4a13      	ldr	r2, [pc, #76]	; (8005774 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d303      	bcc.n	8005734 <ETH_MAC_MDIO_ClkConfig+0x64>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a12      	ldr	r2, [pc, #72]	; (8005778 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d911      	bls.n	8005758 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4a10      	ldr	r2, [pc, #64]	; (8005778 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d908      	bls.n	800574e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4a0f      	ldr	r2, [pc, #60]	; (800577c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d804      	bhi.n	800574e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e005      	b.n	800575a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e000      	b.n	800575a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005758:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	01312cff 	.word	0x01312cff
 8005770:	02160ebf 	.word	0x02160ebf
 8005774:	03938700 	.word	0x03938700
 8005778:	05f5e0ff 	.word	0x05f5e0ff
 800577c:	08f0d17f 	.word	0x08f0d17f

08005780 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e01d      	b.n	80057ca <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68d9      	ldr	r1, [r3, #12]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	4413      	add	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	440b      	add	r3, r1
 800579e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2200      	movs	r2, #0
 80057aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2200      	movs	r2, #0
 80057b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	3206      	adds	r2, #6
 80057c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3301      	adds	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d9de      	bls.n	800578e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	f241 132c 	movw	r3, #4396	; 0x112c
 80057de:	4413      	add	r3, r2
 80057e0:	2203      	movs	r2, #3
 80057e2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68d9      	ldr	r1, [r3, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	f241 1314 	movw	r3, #4372	; 0x1114
 80057f0:	4413      	add	r3, r2
 80057f2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005800:	601a      	str	r2, [r3, #0]
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	e024      	b.n	8005866 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6919      	ldr	r1, [r3, #16]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4613      	mov	r3, r2
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4413      	add	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	440b      	add	r3, r1
 800582c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2200      	movs	r2, #0
 8005838:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2200      	movs	r2, #0
 800583e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2200      	movs	r2, #0
 8005844:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2200      	movs	r2, #0
 800584a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2200      	movs	r2, #0
 8005850:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3310      	adds	r3, #16
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d9d7      	bls.n	800581c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	f241 1330 	movw	r3, #4400	; 0x1130
 8005892:	4413      	add	r3, r2
 8005894:	2203      	movs	r2, #3
 8005896:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6919      	ldr	r1, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80058a4:	4413      	add	r3, r2
 80058a6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	f241 1328 	movw	r3, #4392	; 0x1128
 80058b8:	4413      	add	r3, r2
 80058ba:	6019      	str	r1, [r3, #0]
}
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80058d6:	4b89      	ldr	r3, [pc, #548]	; (8005afc <HAL_GPIO_Init+0x234>)
 80058d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058da:	e194      	b.n	8005c06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	2101      	movs	r1, #1
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	fa01 f303 	lsl.w	r3, r1, r3
 80058e8:	4013      	ands	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8186 	beq.w	8005c00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d00b      	beq.n	8005914 <HAL_GPIO_Init+0x4c>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d007      	beq.n	8005914 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005908:	2b11      	cmp	r3, #17
 800590a:	d003      	beq.n	8005914 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2b12      	cmp	r3, #18
 8005912:	d130      	bne.n	8005976 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	2203      	movs	r2, #3
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	43db      	mvns	r3, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4013      	ands	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4313      	orrs	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800594a:	2201      	movs	r2, #1
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	43db      	mvns	r3, r3
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	4013      	ands	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	091b      	lsrs	r3, r3, #4
 8005960:	f003 0201 	and.w	r2, r3, #1
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	fa02 f303 	lsl.w	r3, r2, r3
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	4313      	orrs	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	2203      	movs	r2, #3
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4013      	ands	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	4313      	orrs	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0xee>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b12      	cmp	r3, #18
 80059b4:	d123      	bne.n	80059fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	08da      	lsrs	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3208      	adds	r2, #8
 80059be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	220f      	movs	r2, #15
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	08da      	lsrs	r2, r3, #3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3208      	adds	r2, #8
 80059f8:	69b9      	ldr	r1, [r7, #24]
 80059fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	2203      	movs	r2, #3
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4013      	ands	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f003 0203 	and.w	r2, r3, #3
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80e0 	beq.w	8005c00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a40:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <HAL_GPIO_Init+0x238>)
 8005a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a46:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <HAL_GPIO_Init+0x238>)
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a50:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <HAL_GPIO_Init+0x238>)
 8005a52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a5e:	4a29      	ldr	r2, [pc, #164]	; (8005b04 <HAL_GPIO_Init+0x23c>)
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	089b      	lsrs	r3, r3, #2
 8005a64:	3302      	adds	r3, #2
 8005a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	220f      	movs	r2, #15
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <HAL_GPIO_Init+0x240>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d052      	beq.n	8005b30 <HAL_GPIO_Init+0x268>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <HAL_GPIO_Init+0x244>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d031      	beq.n	8005af6 <HAL_GPIO_Init+0x22e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1e      	ldr	r2, [pc, #120]	; (8005b10 <HAL_GPIO_Init+0x248>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d02b      	beq.n	8005af2 <HAL_GPIO_Init+0x22a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <HAL_GPIO_Init+0x24c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d025      	beq.n	8005aee <HAL_GPIO_Init+0x226>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <HAL_GPIO_Init+0x250>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01f      	beq.n	8005aea <HAL_GPIO_Init+0x222>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <HAL_GPIO_Init+0x254>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d019      	beq.n	8005ae6 <HAL_GPIO_Init+0x21e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1a      	ldr	r2, [pc, #104]	; (8005b20 <HAL_GPIO_Init+0x258>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <HAL_GPIO_Init+0x21a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <HAL_GPIO_Init+0x25c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00d      	beq.n	8005ade <HAL_GPIO_Init+0x216>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a18      	ldr	r2, [pc, #96]	; (8005b28 <HAL_GPIO_Init+0x260>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <HAL_GPIO_Init+0x212>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <HAL_GPIO_Init+0x264>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d101      	bne.n	8005ad6 <HAL_GPIO_Init+0x20e>
 8005ad2:	2309      	movs	r3, #9
 8005ad4:	e02d      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005ad6:	230a      	movs	r3, #10
 8005ad8:	e02b      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005ada:	2308      	movs	r3, #8
 8005adc:	e029      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005ade:	2307      	movs	r3, #7
 8005ae0:	e027      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005ae2:	2306      	movs	r3, #6
 8005ae4:	e025      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005ae6:	2305      	movs	r3, #5
 8005ae8:	e023      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005aea:	2304      	movs	r3, #4
 8005aec:	e021      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005aee:	2303      	movs	r3, #3
 8005af0:	e01f      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e01d      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e01b      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005afa:	bf00      	nop
 8005afc:	58000080 	.word	0x58000080
 8005b00:	58024400 	.word	0x58024400
 8005b04:	58000400 	.word	0x58000400
 8005b08:	58020000 	.word	0x58020000
 8005b0c:	58020400 	.word	0x58020400
 8005b10:	58020800 	.word	0x58020800
 8005b14:	58020c00 	.word	0x58020c00
 8005b18:	58021000 	.word	0x58021000
 8005b1c:	58021400 	.word	0x58021400
 8005b20:	58021800 	.word	0x58021800
 8005b24:	58021c00 	.word	0x58021c00
 8005b28:	58022000 	.word	0x58022000
 8005b2c:	58022400 	.word	0x58022400
 8005b30:	2300      	movs	r3, #0
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	f002 0203 	and.w	r2, r2, #3
 8005b38:	0092      	lsls	r2, r2, #2
 8005b3a:	4093      	lsls	r3, r2
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b42:	4938      	ldr	r1, [pc, #224]	; (8005c24 <HAL_GPIO_Init+0x35c>)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	3302      	adds	r3, #2
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	43db      	mvns	r3, r3
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	4013      	ands	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4013      	ands	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	3301      	adds	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f ae63 	bne.w	80058dc <HAL_GPIO_Init+0x14>
  }
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	3724      	adds	r7, #36	; 0x24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	58000400 	.word	0x58000400

08005c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
 8005c34:	4613      	mov	r3, r2
 8005c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c38:	787b      	ldrb	r3, [r7, #1]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c3e:	887a      	ldrh	r2, [r7, #2]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c44:	e003      	b.n	8005c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c46:	887b      	ldrh	r3, [r7, #2]
 8005c48:	041a      	lsls	r2, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	619a      	str	r2, [r3, #24]
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005c64:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <HAL_HSEM_FastTake+0x2c>)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3320      	adds	r3, #32
 8005c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6e:	4a07      	ldr	r2, [pc, #28]	; (8005c8c <HAL_HSEM_FastTake+0x30>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d101      	bne.n	8005c78 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e000      	b.n	8005c7a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	58026400 	.word	0x58026400
 8005c8c:	80000300 	.word	0x80000300

08005c90 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005c9a:	4906      	ldr	r1, [pc, #24]	; (8005cb4 <HAL_HSEM_Release+0x24>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	58026400 	.word	0x58026400

08005cb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cba:	b08f      	sub	sp, #60	; 0x3c
 8005cbc:	af0a      	add	r7, sp, #40	; 0x28
 8005cbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e116      	b.n	8005ef8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fc f87f 	bl	8001de8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2203      	movs	r2, #3
 8005cee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f006 fe23 	bl	800c954 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	687e      	ldr	r6, [r7, #4]
 8005d16:	466d      	mov	r5, sp
 8005d18:	f106 0410 	add.w	r4, r6, #16
 8005d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d28:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d2c:	1d33      	adds	r3, r6, #4
 8005d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d30:	6838      	ldr	r0, [r7, #0]
 8005d32:	f006 fda1 	bl	800c878 <USB_CoreInit>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0d7      	b.n	8005ef8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f006 fe11 	bl	800c976 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
 8005d58:	e04a      	b.n	8005df0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	333d      	adds	r3, #61	; 0x3d
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d6e:	7bfa      	ldrb	r2, [r7, #15]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	333c      	adds	r3, #60	; 0x3c
 8005d7e:	7bfa      	ldrb	r2, [r7, #15]
 8005d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d82:	7bfa      	ldrb	r2, [r7, #15]
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	b298      	uxth	r0, r3
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	3342      	adds	r3, #66	; 0x42
 8005d96:	4602      	mov	r2, r0
 8005d98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d9a:	7bfa      	ldrb	r2, [r7, #15]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	333f      	adds	r3, #63	; 0x3f
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005dae:	7bfa      	ldrb	r2, [r7, #15]
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	1a9b      	subs	r3, r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	440b      	add	r3, r1
 8005dbc:	3344      	adds	r3, #68	; 0x44
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005dc2:	7bfa      	ldrb	r2, [r7, #15]
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	3348      	adds	r3, #72	; 0x48
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005dd6:	7bfa      	ldrb	r2, [r7, #15]
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	3350      	adds	r3, #80	; 0x50
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	3301      	adds	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
 8005df0:	7bfa      	ldrb	r2, [r7, #15]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d3af      	bcc.n	8005d5a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
 8005dfe:	e044      	b.n	8005e8a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e00:	7bfa      	ldrb	r2, [r7, #15]
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	4613      	mov	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e16:	7bfa      	ldrb	r2, [r7, #15]
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005e28:	7bfa      	ldrb	r2, [r7, #15]
 8005e2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e2c:	7bfa      	ldrb	r2, [r7, #15]
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e42:	7bfa      	ldrb	r2, [r7, #15]
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e58:	7bfa      	ldrb	r2, [r7, #15]
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e6e:	7bfa      	ldrb	r2, [r7, #15]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	3301      	adds	r3, #1
 8005e88:	73fb      	strb	r3, [r7, #15]
 8005e8a:	7bfa      	ldrb	r2, [r7, #15]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d3b5      	bcc.n	8005e00 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	687e      	ldr	r6, [r7, #4]
 8005e9c:	466d      	mov	r5, sp
 8005e9e:	f106 0410 	add.w	r4, r6, #16
 8005ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005eae:	e885 0003 	stmia.w	r5, {r0, r1}
 8005eb2:	1d33      	adds	r3, r6, #4
 8005eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eb6:	6838      	ldr	r0, [r7, #0]
 8005eb8:	f006 fd88 	bl	800c9cc <USB_DevInit>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e014      	b.n	8005ef8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d102      	bne.n	8005eec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f80a 	bl	8005f00 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f006 ff2a 	bl	800cd4a <USB_DevDisconnect>

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2e:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <HAL_PCDEx_ActivateLPM+0x44>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	10000003 	.word	0x10000003

08005f48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005f50:	4b29      	ldr	r3, [pc, #164]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	2b06      	cmp	r3, #6
 8005f5a:	d00a      	beq.n	8005f72 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f5c:	4b26      	ldr	r3, [pc, #152]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d001      	beq.n	8005f6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e040      	b.n	8005ff0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e03e      	b.n	8005ff0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f72:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005f7a:	491f      	ldr	r1, [pc, #124]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f82:	f7fc f8d1 	bl	8002128 <HAL_GetTick>
 8005f86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f88:	e009      	b.n	8005f9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f8a:	f7fc f8cd 	bl	8002128 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f98:	d901      	bls.n	8005f9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e028      	b.n	8005ff0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f9e:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005faa:	d1ee      	bne.n	8005f8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b1e      	cmp	r3, #30
 8005fb0:	d008      	beq.n	8005fc4 <HAL_PWREx_ConfigSupply+0x7c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb6:	d005      	beq.n	8005fc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b1d      	cmp	r3, #29
 8005fbc:	d002      	beq.n	8005fc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b2d      	cmp	r3, #45	; 0x2d
 8005fc2:	d114      	bne.n	8005fee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005fc4:	f7fc f8b0 	bl	8002128 <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005fca:	e009      	b.n	8005fe0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005fcc:	f7fc f8ac 	bl	8002128 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fda:	d901      	bls.n	8005fe0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e007      	b.n	8005ff0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005fe0:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fec:	d1ee      	bne.n	8005fcc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	58024800 	.word	0x58024800

08005ffc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a04      	ldr	r2, [pc, #16]	; (8006018 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800600a:	60d3      	str	r3, [r2, #12]
}
 800600c:	bf00      	nop
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	58024800 	.word	0x58024800

0800601c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	; 0x30
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e3ff      	b.n	800682e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8087 	beq.w	800614a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800603c:	4b99      	ldr	r3, [pc, #612]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006046:	4b97      	ldr	r3, [pc, #604]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	2b10      	cmp	r3, #16
 8006050:	d007      	beq.n	8006062 <HAL_RCC_OscConfig+0x46>
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	2b18      	cmp	r3, #24
 8006056:	d110      	bne.n	800607a <HAL_RCC_OscConfig+0x5e>
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d10b      	bne.n	800607a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006062:	4b90      	ldr	r3, [pc, #576]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d06c      	beq.n	8006148 <HAL_RCC_OscConfig+0x12c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d168      	bne.n	8006148 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e3d9      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006082:	d106      	bne.n	8006092 <HAL_RCC_OscConfig+0x76>
 8006084:	4b87      	ldr	r3, [pc, #540]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a86      	ldr	r2, [pc, #536]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800608a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	e02e      	b.n	80060f0 <HAL_RCC_OscConfig+0xd4>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10c      	bne.n	80060b4 <HAL_RCC_OscConfig+0x98>
 800609a:	4b82      	ldr	r3, [pc, #520]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a81      	ldr	r2, [pc, #516]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	4b7f      	ldr	r3, [pc, #508]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a7e      	ldr	r2, [pc, #504]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e01d      	b.n	80060f0 <HAL_RCC_OscConfig+0xd4>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0xbc>
 80060be:	4b79      	ldr	r3, [pc, #484]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a78      	ldr	r2, [pc, #480]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b76      	ldr	r3, [pc, #472]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a75      	ldr	r2, [pc, #468]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e00b      	b.n	80060f0 <HAL_RCC_OscConfig+0xd4>
 80060d8:	4b72      	ldr	r3, [pc, #456]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a71      	ldr	r2, [pc, #452]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b6f      	ldr	r3, [pc, #444]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a6e      	ldr	r2, [pc, #440]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fc f816 	bl	8002128 <HAL_GetTick>
 80060fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006100:	f7fc f812 	bl	8002128 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	; 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e38d      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006112:	4b64      	ldr	r3, [pc, #400]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0xe4>
 800611e:	e014      	b.n	800614a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fc f802 	bl	8002128 <HAL_GetTick>
 8006124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006128:	f7fb fffe 	bl	8002128 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b64      	cmp	r3, #100	; 0x64
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e379      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800613a:	4b5a      	ldr	r3, [pc, #360]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x10c>
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80ae 	beq.w	80062b4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006158:	4b52      	ldr	r3, [pc, #328]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006160:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006162:	4b50      	ldr	r3, [pc, #320]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <HAL_RCC_OscConfig+0x162>
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	2b18      	cmp	r3, #24
 8006172:	d13a      	bne.n	80061ea <HAL_RCC_OscConfig+0x1ce>
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d135      	bne.n	80061ea <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800617e:	4b49      	ldr	r3, [pc, #292]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <HAL_RCC_OscConfig+0x17a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e34b      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006196:	f7fb fff7 	bl	8002188 <HAL_GetREVID>
 800619a:	4603      	mov	r3, r0
 800619c:	f241 0203 	movw	r2, #4099	; 0x1003
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d817      	bhi.n	80061d4 <HAL_RCC_OscConfig+0x1b8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d108      	bne.n	80061be <HAL_RCC_OscConfig+0x1a2>
 80061ac:	4b3d      	ldr	r3, [pc, #244]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061b4:	4a3b      	ldr	r2, [pc, #236]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061bc:	e07a      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	4b39      	ldr	r3, [pc, #228]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	031b      	lsls	r3, r3, #12
 80061cc:	4935      	ldr	r1, [pc, #212]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061d2:	e06f      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d4:	4b33      	ldr	r3, [pc, #204]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	061b      	lsls	r3, r3, #24
 80061e2:	4930      	ldr	r1, [pc, #192]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e8:	e064      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d045      	beq.n	800627e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061f2:	4b2c      	ldr	r3, [pc, #176]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f023 0219 	bic.w	r2, r3, #25
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	4929      	ldr	r1, [pc, #164]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006200:	4313      	orrs	r3, r2
 8006202:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006204:	f7fb ff90 	bl	8002128 <HAL_GetTick>
 8006208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800620c:	f7fb ff8c 	bl	8002128 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e307      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800621e:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622a:	f7fb ffad 	bl	8002188 <HAL_GetREVID>
 800622e:	4603      	mov	r3, r0
 8006230:	f241 0203 	movw	r2, #4099	; 0x1003
 8006234:	4293      	cmp	r3, r2
 8006236:	d817      	bhi.n	8006268 <HAL_RCC_OscConfig+0x24c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d108      	bne.n	8006252 <HAL_RCC_OscConfig+0x236>
 8006240:	4b18      	ldr	r3, [pc, #96]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006248:	4a16      	ldr	r2, [pc, #88]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800624a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800624e:	6053      	str	r3, [r2, #4]
 8006250:	e030      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
 8006252:	4b14      	ldr	r3, [pc, #80]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	031b      	lsls	r3, r3, #12
 8006260:	4910      	ldr	r1, [pc, #64]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006262:	4313      	orrs	r3, r2
 8006264:	604b      	str	r3, [r1, #4]
 8006266:	e025      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
 8006268:	4b0e      	ldr	r3, [pc, #56]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	061b      	lsls	r3, r3, #24
 8006276:	490b      	ldr	r1, [pc, #44]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006278:	4313      	orrs	r3, r2
 800627a:	604b      	str	r3, [r1, #4]
 800627c:	e01a      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a08      	ldr	r2, [pc, #32]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006284:	f023 0301 	bic.w	r3, r3, #1
 8006288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628a:	f7fb ff4d 	bl	8002128 <HAL_GetTick>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006290:	e00a      	b.n	80062a8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006292:	f7fb ff49 	bl	8002128 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d903      	bls.n	80062a8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e2c4      	b.n	800682e <HAL_RCC_OscConfig+0x812>
 80062a4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062a8:	4ba4      	ldr	r3, [pc, #656]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1ee      	bne.n	8006292 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80a9 	beq.w	8006414 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062c2:	4b9e      	ldr	r3, [pc, #632]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062cc:	4b9b      	ldr	r3, [pc, #620]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d007      	beq.n	80062e8 <HAL_RCC_OscConfig+0x2cc>
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2b18      	cmp	r3, #24
 80062dc:	d13a      	bne.n	8006354 <HAL_RCC_OscConfig+0x338>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f003 0303 	and.w	r3, r3, #3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d135      	bne.n	8006354 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062e8:	4b94      	ldr	r3, [pc, #592]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_RCC_OscConfig+0x2e4>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e296      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006300:	f7fb ff42 	bl	8002188 <HAL_GetREVID>
 8006304:	4603      	mov	r3, r0
 8006306:	f241 0203 	movw	r2, #4099	; 0x1003
 800630a:	4293      	cmp	r3, r2
 800630c:	d817      	bhi.n	800633e <HAL_RCC_OscConfig+0x322>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	2b20      	cmp	r3, #32
 8006314:	d108      	bne.n	8006328 <HAL_RCC_OscConfig+0x30c>
 8006316:	4b89      	ldr	r3, [pc, #548]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800631e:	4a87      	ldr	r2, [pc, #540]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006320:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006324:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006326:	e075      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006328:	4b84      	ldr	r3, [pc, #528]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	069b      	lsls	r3, r3, #26
 8006336:	4981      	ldr	r1, [pc, #516]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006338:	4313      	orrs	r3, r2
 800633a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800633c:	e06a      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800633e:	4b7f      	ldr	r3, [pc, #508]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	061b      	lsls	r3, r3, #24
 800634c:	497b      	ldr	r1, [pc, #492]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800634e:	4313      	orrs	r3, r2
 8006350:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006352:	e05f      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d042      	beq.n	80063e2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800635c:	4b77      	ldr	r3, [pc, #476]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a76      	ldr	r2, [pc, #472]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006368:	f7fb fede 	bl	8002128 <HAL_GetTick>
 800636c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006370:	f7fb feda 	bl	8002128 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e255      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006382:	4b6e      	ldr	r3, [pc, #440]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f0      	beq.n	8006370 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800638e:	f7fb fefb 	bl	8002188 <HAL_GetREVID>
 8006392:	4603      	mov	r3, r0
 8006394:	f241 0203 	movw	r2, #4099	; 0x1003
 8006398:	4293      	cmp	r3, r2
 800639a:	d817      	bhi.n	80063cc <HAL_RCC_OscConfig+0x3b0>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d108      	bne.n	80063b6 <HAL_RCC_OscConfig+0x39a>
 80063a4:	4b65      	ldr	r3, [pc, #404]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063ac:	4a63      	ldr	r2, [pc, #396]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063b2:	6053      	str	r3, [r2, #4]
 80063b4:	e02e      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
 80063b6:	4b61      	ldr	r3, [pc, #388]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	069b      	lsls	r3, r3, #26
 80063c4:	495d      	ldr	r1, [pc, #372]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	604b      	str	r3, [r1, #4]
 80063ca:	e023      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
 80063cc:	4b5b      	ldr	r3, [pc, #364]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	061b      	lsls	r3, r3, #24
 80063da:	4958      	ldr	r1, [pc, #352]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	60cb      	str	r3, [r1, #12]
 80063e0:	e018      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80063e2:	4b56      	ldr	r3, [pc, #344]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a55      	ldr	r2, [pc, #340]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ee:	f7fb fe9b 	bl	8002128 <HAL_GetTick>
 80063f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80063f6:	f7fb fe97 	bl	8002128 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e212      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006408:	4b4c      	ldr	r3, [pc, #304]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f0      	bne.n	80063f6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d036      	beq.n	800648e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d019      	beq.n	800645c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006428:	4b44      	ldr	r3, [pc, #272]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800642a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642c:	4a43      	ldr	r2, [pc, #268]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006434:	f7fb fe78 	bl	8002128 <HAL_GetTick>
 8006438:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800643c:	f7fb fe74 	bl	8002128 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e1ef      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800644e:	4b3b      	ldr	r3, [pc, #236]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f0      	beq.n	800643c <HAL_RCC_OscConfig+0x420>
 800645a:	e018      	b.n	800648e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800645c:	4b37      	ldr	r3, [pc, #220]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800645e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006460:	4a36      	ldr	r2, [pc, #216]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006462:	f023 0301 	bic.w	r3, r3, #1
 8006466:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006468:	f7fb fe5e 	bl	8002128 <HAL_GetTick>
 800646c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006470:	f7fb fe5a 	bl	8002128 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e1d5      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006482:	4b2e      	ldr	r3, [pc, #184]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f0      	bne.n	8006470 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d036      	beq.n	8006508 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d019      	beq.n	80064d6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064a2:	4b26      	ldr	r3, [pc, #152]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a25      	ldr	r2, [pc, #148]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064ae:	f7fb fe3b 	bl	8002128 <HAL_GetTick>
 80064b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064b6:	f7fb fe37 	bl	8002128 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e1b2      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064c8:	4b1c      	ldr	r3, [pc, #112]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x49a>
 80064d4:	e018      	b.n	8006508 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064d6:	4b19      	ldr	r3, [pc, #100]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a18      	ldr	r2, [pc, #96]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064e2:	f7fb fe21 	bl	8002128 <HAL_GetTick>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064ea:	f7fb fe1d 	bl	8002128 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e198      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f0      	bne.n	80064ea <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8085 	beq.w	8006620 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006516:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <HAL_RCC_OscConfig+0x524>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a09      	ldr	r2, [pc, #36]	; (8006540 <HAL_RCC_OscConfig+0x524>)
 800651c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006520:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006522:	f7fb fe01 	bl	8002128 <HAL_GetTick>
 8006526:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006528:	e00c      	b.n	8006544 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800652a:	f7fb fdfd 	bl	8002128 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b64      	cmp	r3, #100	; 0x64
 8006536:	d905      	bls.n	8006544 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e178      	b.n	800682e <HAL_RCC_OscConfig+0x812>
 800653c:	58024400 	.word	0x58024400
 8006540:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006544:	4b96      	ldr	r3, [pc, #600]	; (80067a0 <HAL_RCC_OscConfig+0x784>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0ec      	beq.n	800652a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d106      	bne.n	8006566 <HAL_RCC_OscConfig+0x54a>
 8006558:	4b92      	ldr	r3, [pc, #584]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	4a91      	ldr	r2, [pc, #580]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	6713      	str	r3, [r2, #112]	; 0x70
 8006564:	e02d      	b.n	80065c2 <HAL_RCC_OscConfig+0x5a6>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10c      	bne.n	8006588 <HAL_RCC_OscConfig+0x56c>
 800656e:	4b8d      	ldr	r3, [pc, #564]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	4a8c      	ldr	r2, [pc, #560]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	6713      	str	r3, [r2, #112]	; 0x70
 800657a:	4b8a      	ldr	r3, [pc, #552]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	4a89      	ldr	r2, [pc, #548]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006580:	f023 0304 	bic.w	r3, r3, #4
 8006584:	6713      	str	r3, [r2, #112]	; 0x70
 8006586:	e01c      	b.n	80065c2 <HAL_RCC_OscConfig+0x5a6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b05      	cmp	r3, #5
 800658e:	d10c      	bne.n	80065aa <HAL_RCC_OscConfig+0x58e>
 8006590:	4b84      	ldr	r3, [pc, #528]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006594:	4a83      	ldr	r2, [pc, #524]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006596:	f043 0304 	orr.w	r3, r3, #4
 800659a:	6713      	str	r3, [r2, #112]	; 0x70
 800659c:	4b81      	ldr	r3, [pc, #516]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800659e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a0:	4a80      	ldr	r2, [pc, #512]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	6713      	str	r3, [r2, #112]	; 0x70
 80065a8:	e00b      	b.n	80065c2 <HAL_RCC_OscConfig+0x5a6>
 80065aa:	4b7e      	ldr	r3, [pc, #504]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	4a7d      	ldr	r2, [pc, #500]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	6713      	str	r3, [r2, #112]	; 0x70
 80065b6:	4b7b      	ldr	r3, [pc, #492]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	4a7a      	ldr	r2, [pc, #488]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065bc:	f023 0304 	bic.w	r3, r3, #4
 80065c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d015      	beq.n	80065f6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ca:	f7fb fdad 	bl	8002128 <HAL_GetTick>
 80065ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065d0:	e00a      	b.n	80065e8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065d2:	f7fb fda9 	bl	8002128 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e122      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065e8:	4b6e      	ldr	r3, [pc, #440]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0ee      	beq.n	80065d2 <HAL_RCC_OscConfig+0x5b6>
 80065f4:	e014      	b.n	8006620 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f6:	f7fb fd97 	bl	8002128 <HAL_GetTick>
 80065fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065fc:	e00a      	b.n	8006614 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065fe:	f7fb fd93 	bl	8002128 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f241 3288 	movw	r2, #5000	; 0x1388
 800660c:	4293      	cmp	r3, r2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e10c      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006614:	4b63      	ldr	r3, [pc, #396]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1ee      	bne.n	80065fe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 8101 	beq.w	800682c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800662a:	4b5e      	ldr	r3, [pc, #376]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006632:	2b18      	cmp	r3, #24
 8006634:	f000 80bc 	beq.w	80067b0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	2b02      	cmp	r3, #2
 800663e:	f040 8095 	bne.w	800676c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006642:	4b58      	ldr	r3, [pc, #352]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a57      	ldr	r2, [pc, #348]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800664c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664e:	f7fb fd6b 	bl	8002128 <HAL_GetTick>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006656:	f7fb fd67 	bl	8002128 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e0e2      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006668:	4b4e      	ldr	r3, [pc, #312]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f0      	bne.n	8006656 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006674:	4b4b      	ldr	r3, [pc, #300]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006678:	4b4b      	ldr	r3, [pc, #300]	; (80067a8 <HAL_RCC_OscConfig+0x78c>)
 800667a:	4013      	ands	r3, r2
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006684:	0112      	lsls	r2, r2, #4
 8006686:	430a      	orrs	r2, r1
 8006688:	4946      	ldr	r1, [pc, #280]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800668a:	4313      	orrs	r3, r2
 800668c:	628b      	str	r3, [r1, #40]	; 0x28
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	3b01      	subs	r3, #1
 8006694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	3b01      	subs	r3, #1
 800669e:	025b      	lsls	r3, r3, #9
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	3b01      	subs	r3, #1
 80066aa:	041b      	lsls	r3, r3, #16
 80066ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	3b01      	subs	r3, #1
 80066b8:	061b      	lsls	r3, r3, #24
 80066ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066be:	4939      	ldr	r1, [pc, #228]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80066c4:	4b37      	ldr	r3, [pc, #220]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	4a36      	ldr	r2, [pc, #216]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066ca:	f023 0301 	bic.w	r3, r3, #1
 80066ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066d0:	4b34      	ldr	r3, [pc, #208]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d4:	4b35      	ldr	r3, [pc, #212]	; (80067ac <HAL_RCC_OscConfig+0x790>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066dc:	00d2      	lsls	r2, r2, #3
 80066de:	4931      	ldr	r1, [pc, #196]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80066e4:	4b2f      	ldr	r3, [pc, #188]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f023 020c 	bic.w	r2, r3, #12
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	492c      	ldr	r1, [pc, #176]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80066f6:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	f023 0202 	bic.w	r2, r3, #2
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	4928      	ldr	r1, [pc, #160]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006704:	4313      	orrs	r3, r2
 8006706:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006708:	4b26      	ldr	r3, [pc, #152]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	4a25      	ldr	r2, [pc, #148]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800670e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006714:	4b23      	ldr	r3, [pc, #140]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4a22      	ldr	r2, [pc, #136]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006720:	4b20      	ldr	r3, [pc, #128]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800672a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800672c:	4b1d      	ldr	r3, [pc, #116]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006732:	f043 0301 	orr.w	r3, r3, #1
 8006736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006738:	4b1a      	ldr	r3, [pc, #104]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800673e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006744:	f7fb fcf0 	bl	8002128 <HAL_GetTick>
 8006748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800674c:	f7fb fcec 	bl	8002128 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e067      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800675e:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f0      	beq.n	800674c <HAL_RCC_OscConfig+0x730>
 800676a:	e05f      	b.n	800682c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676c:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0c      	ldr	r2, [pc, #48]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fb fcd6 	bl	8002128 <HAL_GetTick>
 800677c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006780:	f7fb fcd2 	bl	8002128 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e04d      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006792:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f0      	bne.n	8006780 <HAL_RCC_OscConfig+0x764>
 800679e:	e045      	b.n	800682c <HAL_RCC_OscConfig+0x810>
 80067a0:	58024800 	.word	0x58024800
 80067a4:	58024400 	.word	0x58024400
 80067a8:	fffffc0c 	.word	0xfffffc0c
 80067ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067b0:	4b21      	ldr	r3, [pc, #132]	; (8006838 <HAL_RCC_OscConfig+0x81c>)
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067b6:	4b20      	ldr	r3, [pc, #128]	; (8006838 <HAL_RCC_OscConfig+0x81c>)
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d031      	beq.n	8006828 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f003 0203 	and.w	r2, r3, #3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d12a      	bne.n	8006828 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	091b      	lsrs	r3, r3, #4
 80067d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067de:	429a      	cmp	r2, r3
 80067e0:	d122      	bne.n	8006828 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d11a      	bne.n	8006828 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	0a5b      	lsrs	r3, r3, #9
 80067f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006800:	429a      	cmp	r2, r3
 8006802:	d111      	bne.n	8006828 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006812:	429a      	cmp	r2, r3
 8006814:	d108      	bne.n	8006828 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	0e1b      	lsrs	r3, r3, #24
 800681a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006822:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3730      	adds	r7, #48	; 0x30
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	58024400 	.word	0x58024400

0800683c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e19c      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006850:	4b8a      	ldr	r3, [pc, #552]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d910      	bls.n	8006880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685e:	4b87      	ldr	r3, [pc, #540]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 020f 	bic.w	r2, r3, #15
 8006866:	4985      	ldr	r1, [pc, #532]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b83      	ldr	r3, [pc, #524]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e184      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d010      	beq.n	80068ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	4b7b      	ldr	r3, [pc, #492]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006898:	429a      	cmp	r2, r3
 800689a:	d908      	bls.n	80068ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800689c:	4b78      	ldr	r3, [pc, #480]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	4975      	ldr	r1, [pc, #468]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d010      	beq.n	80068dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	4b70      	ldr	r3, [pc, #448]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d908      	bls.n	80068dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068ca:	4b6d      	ldr	r3, [pc, #436]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	496a      	ldr	r1, [pc, #424]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d010      	beq.n	800690a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699a      	ldr	r2, [r3, #24]
 80068ec:	4b64      	ldr	r3, [pc, #400]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d908      	bls.n	800690a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068f8:	4b61      	ldr	r3, [pc, #388]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	495e      	ldr	r1, [pc, #376]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006906:	4313      	orrs	r3, r2
 8006908:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	d010      	beq.n	8006938 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69da      	ldr	r2, [r3, #28]
 800691a:	4b59      	ldr	r3, [pc, #356]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006922:	429a      	cmp	r2, r3
 8006924:	d908      	bls.n	8006938 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006926:	4b56      	ldr	r3, [pc, #344]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	4953      	ldr	r1, [pc, #332]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006934:	4313      	orrs	r3, r2
 8006936:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d010      	beq.n	8006966 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	4b4d      	ldr	r3, [pc, #308]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	429a      	cmp	r2, r3
 8006952:	d908      	bls.n	8006966 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006954:	4b4a      	ldr	r3, [pc, #296]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f023 020f 	bic.w	r2, r3, #15
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4947      	ldr	r1, [pc, #284]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006962:	4313      	orrs	r3, r2
 8006964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d055      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006972:	4b43      	ldr	r3, [pc, #268]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	4940      	ldr	r1, [pc, #256]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006980:	4313      	orrs	r3, r2
 8006982:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d107      	bne.n	800699c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800698c:	4b3c      	ldr	r3, [pc, #240]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d121      	bne.n	80069dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0f6      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d107      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069a4:	4b36      	ldr	r3, [pc, #216]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d115      	bne.n	80069dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0ea      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d107      	bne.n	80069cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069bc:	4b30      	ldr	r3, [pc, #192]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d109      	bne.n	80069dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0de      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069cc:	4b2c      	ldr	r3, [pc, #176]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0d6      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069dc:	4b28      	ldr	r3, [pc, #160]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f023 0207 	bic.w	r2, r3, #7
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4925      	ldr	r1, [pc, #148]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ee:	f7fb fb9b 	bl	8002128 <HAL_GetTick>
 80069f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f4:	e00a      	b.n	8006a0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069f6:	f7fb fb97 	bl	8002128 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e0be      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a0c:	4b1c      	ldr	r3, [pc, #112]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d1eb      	bne.n	80069f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d010      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	4b14      	ldr	r3, [pc, #80]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d208      	bcs.n	8006a4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a3a:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f023 020f 	bic.w	r2, r3, #15
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	490e      	ldr	r1, [pc, #56]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d214      	bcs.n	8006a84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5a:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f023 020f 	bic.w	r2, r3, #15
 8006a62:	4906      	ldr	r1, [pc, #24]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a6a:	4b04      	ldr	r3, [pc, #16]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d005      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e086      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
 8006a7c:	52002000 	.word	0x52002000
 8006a80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d010      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	4b3f      	ldr	r3, [pc, #252]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d208      	bcs.n	8006ab2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006aa0:	4b3c      	ldr	r3, [pc, #240]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	4939      	ldr	r1, [pc, #228]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d010      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695a      	ldr	r2, [r3, #20]
 8006ac2:	4b34      	ldr	r3, [pc, #208]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d208      	bcs.n	8006ae0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ace:	4b31      	ldr	r3, [pc, #196]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	492e      	ldr	r1, [pc, #184]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d010      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d208      	bcs.n	8006b0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006afc:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	4922      	ldr	r1, [pc, #136]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d010      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69da      	ldr	r2, [r3, #28]
 8006b1e:	4b1d      	ldr	r3, [pc, #116]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d208      	bcs.n	8006b3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b2a:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	4917      	ldr	r1, [pc, #92]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b3c:	f000 f834 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8006b40:	4602      	mov	r2, r0
 8006b42:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	0a1b      	lsrs	r3, r3, #8
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	4912      	ldr	r1, [pc, #72]	; (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b4e:	5ccb      	ldrb	r3, [r1, r3]
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
 8006b58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	4a0d      	ldr	r2, [pc, #52]	; (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b64:	5cd3      	ldrb	r3, [r2, r3]
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b70:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <HAL_RCC_ClockConfig+0x360>)
 8006b72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b74:	4a0a      	ldr	r2, [pc, #40]	; (8006ba0 <HAL_RCC_ClockConfig+0x364>)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <HAL_RCC_ClockConfig+0x368>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fb fa88 	bl	8002094 <HAL_InitTick>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	58024400 	.word	0x58024400
 8006b98:	0800ce80 	.word	0x0800ce80
 8006b9c:	24000004 	.word	0x24000004
 8006ba0:	24000000 	.word	0x24000000
 8006ba4:	24017154 	.word	0x24017154

08006ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b089      	sub	sp, #36	; 0x24
 8006bac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bae:	4bb3      	ldr	r3, [pc, #716]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bb6:	2b18      	cmp	r3, #24
 8006bb8:	f200 8155 	bhi.w	8006e66 <HAL_RCC_GetSysClockFreq+0x2be>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006c29 	.word	0x08006c29
 8006bc8:	08006e67 	.word	0x08006e67
 8006bcc:	08006e67 	.word	0x08006e67
 8006bd0:	08006e67 	.word	0x08006e67
 8006bd4:	08006e67 	.word	0x08006e67
 8006bd8:	08006e67 	.word	0x08006e67
 8006bdc:	08006e67 	.word	0x08006e67
 8006be0:	08006e67 	.word	0x08006e67
 8006be4:	08006c4f 	.word	0x08006c4f
 8006be8:	08006e67 	.word	0x08006e67
 8006bec:	08006e67 	.word	0x08006e67
 8006bf0:	08006e67 	.word	0x08006e67
 8006bf4:	08006e67 	.word	0x08006e67
 8006bf8:	08006e67 	.word	0x08006e67
 8006bfc:	08006e67 	.word	0x08006e67
 8006c00:	08006e67 	.word	0x08006e67
 8006c04:	08006c55 	.word	0x08006c55
 8006c08:	08006e67 	.word	0x08006e67
 8006c0c:	08006e67 	.word	0x08006e67
 8006c10:	08006e67 	.word	0x08006e67
 8006c14:	08006e67 	.word	0x08006e67
 8006c18:	08006e67 	.word	0x08006e67
 8006c1c:	08006e67 	.word	0x08006e67
 8006c20:	08006e67 	.word	0x08006e67
 8006c24:	08006c5b 	.word	0x08006c5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c28:	4b94      	ldr	r3, [pc, #592]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d009      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c34:	4b91      	ldr	r3, [pc, #580]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	08db      	lsrs	r3, r3, #3
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	4a90      	ldr	r2, [pc, #576]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c40:	fa22 f303 	lsr.w	r3, r2, r3
 8006c44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c46:	e111      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c48:	4b8d      	ldr	r3, [pc, #564]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c4a:	61bb      	str	r3, [r7, #24]
    break;
 8006c4c:	e10e      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c4e:	4b8d      	ldr	r3, [pc, #564]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c50:	61bb      	str	r3, [r7, #24]
    break;
 8006c52:	e10b      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c54:	4b8c      	ldr	r3, [pc, #560]	; (8006e88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c56:	61bb      	str	r3, [r7, #24]
    break;
 8006c58:	e108      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c5a:	4b88      	ldr	r3, [pc, #544]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006c64:	4b85      	ldr	r3, [pc, #532]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	091b      	lsrs	r3, r3, #4
 8006c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c70:	4b82      	ldr	r3, [pc, #520]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006c7a:	4b80      	ldr	r3, [pc, #512]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7e:	08db      	lsrs	r3, r3, #3
 8006c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	fb02 f303 	mul.w	r3, r2, r3
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80e1 	beq.w	8006e60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	f000 8083 	beq.w	8006dac <HAL_RCC_GetSysClockFreq+0x204>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	f200 80a1 	bhi.w	8006df0 <HAL_RCC_GetSysClockFreq+0x248>
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_RCC_GetSysClockFreq+0x114>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d056      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006cba:	e099      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cbc:	4b6f      	ldr	r3, [pc, #444]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02d      	beq.n	8006d24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cc8:	4b6c      	ldr	r3, [pc, #432]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	08db      	lsrs	r3, r3, #3
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	4a6b      	ldr	r2, [pc, #428]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b62      	ldr	r3, [pc, #392]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006d22:	e087      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006e90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d36:	4b51      	ldr	r3, [pc, #324]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d66:	e065      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006e94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7a:	4b40      	ldr	r3, [pc, #256]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006daa:	e043      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006e98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dbe:	4b2f      	ldr	r3, [pc, #188]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dee:	e021      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006e94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e02:	4b1e      	ldr	r3, [pc, #120]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e32:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006e34:	4b11      	ldr	r3, [pc, #68]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	0a5b      	lsrs	r3, r3, #9
 8006e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e3e:	3301      	adds	r3, #1
 8006e40:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e58:	ee17 3a90 	vmov	r3, s15
 8006e5c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e5e:	e005      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	61bb      	str	r3, [r7, #24]
    break;
 8006e64:	e002      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006e66:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e68:	61bb      	str	r3, [r7, #24]
    break;
 8006e6a:	bf00      	nop
  }

  return sysclockfreq;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3724      	adds	r7, #36	; 0x24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	58024400 	.word	0x58024400
 8006e80:	03d09000 	.word	0x03d09000
 8006e84:	003d0900 	.word	0x003d0900
 8006e88:	007a1200 	.word	0x007a1200
 8006e8c:	46000000 	.word	0x46000000
 8006e90:	4c742400 	.word	0x4c742400
 8006e94:	4a742400 	.word	0x4a742400
 8006e98:	4af42400 	.word	0x4af42400

08006e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ea2:	f7ff fe81 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	4b10      	ldr	r3, [pc, #64]	; (8006eec <HAL_RCC_GetHCLKFreq+0x50>)
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	0a1b      	lsrs	r3, r3, #8
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	490f      	ldr	r1, [pc, #60]	; (8006ef0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006eb4:	5ccb      	ldrb	r3, [r1, r3]
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <HAL_RCC_GetHCLKFreq+0x50>)
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006eca:	5cd3      	ldrb	r3, [r2, r3]
 8006ecc:	f003 031f 	and.w	r3, r3, #31
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed6:	4a07      	ldr	r2, [pc, #28]	; (8006ef4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ed8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006eda:	4a07      	ldr	r2, [pc, #28]	; (8006ef8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ee0:	4b04      	ldr	r3, [pc, #16]	; (8006ef4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	58024400 	.word	0x58024400
 8006ef0:	0800ce80 	.word	0x0800ce80
 8006ef4:	24000004 	.word	0x24000004
 8006ef8:	24000000 	.word	0x24000000

08006efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f00:	f7ff ffcc 	bl	8006e9c <HAL_RCC_GetHCLKFreq>
 8006f04:	4602      	mov	r2, r0
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	4904      	ldr	r1, [pc, #16]	; (8006f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f12:	5ccb      	ldrb	r3, [r1, r3]
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	58024400 	.word	0x58024400
 8006f24:	0800ce80 	.word	0x0800ce80

08006f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006f2c:	f7ff ffb6 	bl	8006e9c <HAL_RCC_GetHCLKFreq>
 8006f30:	4602      	mov	r2, r0
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	0a1b      	lsrs	r3, r3, #8
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	4904      	ldr	r1, [pc, #16]	; (8006f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f3e:	5ccb      	ldrb	r3, [r1, r3]
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	0800ce80 	.word	0x0800ce80

08006f54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f60:	2300      	movs	r3, #0
 8006f62:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d03f      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f78:	d02a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f7e:	d824      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f84:	d018      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f8a:	d81e      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f94:	d007      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f96:	e018      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f98:	4bab      	ldr	r3, [pc, #684]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	4aaa      	ldr	r2, [pc, #680]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fa4:	e015      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	2102      	movs	r1, #2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 f9cf 	bl	8008350 <RCCEx_PLL2_Config>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fb6:	e00c      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3324      	adds	r3, #36	; 0x24
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fa78 	bl	80084b4 <RCCEx_PLL3_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fc8:	e003      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006fce:	e000      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006fd8:	4b9b      	ldr	r3, [pc, #620]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe4:	4998      	ldr	r1, [pc, #608]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	650b      	str	r3, [r1, #80]	; 0x50
 8006fea:	e001      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d03d      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	2b04      	cmp	r3, #4
 8007002:	d826      	bhi.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	08007021 	.word	0x08007021
 8007010:	0800702f 	.word	0x0800702f
 8007014:	08007041 	.word	0x08007041
 8007018:	08007059 	.word	0x08007059
 800701c:	08007059 	.word	0x08007059
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007020:	4b89      	ldr	r3, [pc, #548]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	4a88      	ldr	r2, [pc, #544]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800702c:	e015      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	3304      	adds	r3, #4
 8007032:	2100      	movs	r1, #0
 8007034:	4618      	mov	r0, r3
 8007036:	f001 f98b 	bl	8008350 <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800703e:	e00c      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3324      	adds	r3, #36	; 0x24
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f001 fa34 	bl	80084b4 <RCCEx_PLL3_Config>
 800704c:	4603      	mov	r3, r0
 800704e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007050:	e003      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
      break;
 8007056:	e000      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007060:	4b79      	ldr	r3, [pc, #484]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007064:	f023 0207 	bic.w	r2, r3, #7
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706c:	4976      	ldr	r1, [pc, #472]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800706e:	4313      	orrs	r3, r2
 8007070:	650b      	str	r3, [r1, #80]	; 0x50
 8007072:	e001      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007080:	2b00      	cmp	r3, #0
 8007082:	d042      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708c:	d02b      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800708e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007092:	d825      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007094:	2bc0      	cmp	r3, #192	; 0xc0
 8007096:	d028      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007098:	2bc0      	cmp	r3, #192	; 0xc0
 800709a:	d821      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800709c:	2b80      	cmp	r3, #128	; 0x80
 800709e:	d016      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80070a0:	2b80      	cmp	r3, #128	; 0x80
 80070a2:	d81d      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80070a8:	2b40      	cmp	r3, #64	; 0x40
 80070aa:	d007      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80070ac:	e018      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ae:	4b66      	ldr	r3, [pc, #408]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	4a65      	ldr	r2, [pc, #404]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070ba:	e017      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3304      	adds	r3, #4
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 f944 	bl	8008350 <RCCEx_PLL2_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070cc:	e00e      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3324      	adds	r3, #36	; 0x24
 80070d2:	2100      	movs	r1, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 f9ed 	bl	80084b4 <RCCEx_PLL3_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070de:	e005      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
      break;
 80070e4:	e002      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80070ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80070f2:	4b55      	ldr	r3, [pc, #340]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fe:	4952      	ldr	r1, [pc, #328]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007100:	4313      	orrs	r3, r2
 8007102:	650b      	str	r3, [r1, #80]	; 0x50
 8007104:	e001      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007106:	7dfb      	ldrb	r3, [r7, #23]
 8007108:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007112:	2b00      	cmp	r3, #0
 8007114:	d049      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800711c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007120:	d030      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007122:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007126:	d82a      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007128:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800712c:	d02c      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800712e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007132:	d824      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007138:	d018      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800713a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800713e:	d81e      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007148:	d007      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800714a:	e018      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800714c:	4b3e      	ldr	r3, [pc, #248]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	4a3d      	ldr	r2, [pc, #244]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007158:	e017      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3304      	adds	r3, #4
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f001 f8f5 	bl	8008350 <RCCEx_PLL2_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800716a:	e00e      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3324      	adds	r3, #36	; 0x24
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f001 f99e 	bl	80084b4 <RCCEx_PLL3_Config>
 8007178:	4603      	mov	r3, r0
 800717a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800717c:	e005      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]
      break;
 8007182:	e002      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007184:	bf00      	nop
 8007186:	e000      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007190:	4b2d      	ldr	r3, [pc, #180]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007194:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800719e:	492a      	ldr	r1, [pc, #168]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	658b      	str	r3, [r1, #88]	; 0x58
 80071a4:	e001      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d04c      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071c0:	d030      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80071c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071c6:	d82a      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071cc:	d02c      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80071ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071d2:	d824      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071d8:	d018      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80071da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071de:	d81e      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80071e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071e8:	d007      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80071ea:	e018      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ec:	4b16      	ldr	r3, [pc, #88]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	4a15      	ldr	r2, [pc, #84]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071f8:	e017      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3304      	adds	r3, #4
 80071fe:	2100      	movs	r1, #0
 8007200:	4618      	mov	r0, r3
 8007202:	f001 f8a5 	bl	8008350 <RCCEx_PLL2_Config>
 8007206:	4603      	mov	r3, r0
 8007208:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800720a:	e00e      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3324      	adds	r3, #36	; 0x24
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f001 f94e 	bl	80084b4 <RCCEx_PLL3_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800721c:	e005      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	75fb      	strb	r3, [r7, #23]
      break;
 8007222:	e002      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10d      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007234:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800723e:	4902      	ldr	r1, [pc, #8]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007240:	4313      	orrs	r3, r2
 8007242:	658b      	str	r3, [r1, #88]	; 0x58
 8007244:	e004      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007246:	bf00      	nop
 8007248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d032      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007260:	2b30      	cmp	r3, #48	; 0x30
 8007262:	d01c      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007264:	2b30      	cmp	r3, #48	; 0x30
 8007266:	d817      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007268:	2b20      	cmp	r3, #32
 800726a:	d00c      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800726c:	2b20      	cmp	r3, #32
 800726e:	d813      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007270:	2b00      	cmp	r3, #0
 8007272:	d016      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007274:	2b10      	cmp	r3, #16
 8007276:	d10f      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007278:	4baf      	ldr	r3, [pc, #700]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	4aae      	ldr	r2, [pc, #696]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800727e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007282:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007284:	e00e      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3304      	adds	r3, #4
 800728a:	2102      	movs	r1, #2
 800728c:	4618      	mov	r0, r3
 800728e:	f001 f85f 	bl	8008350 <RCCEx_PLL2_Config>
 8007292:	4603      	mov	r3, r0
 8007294:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007296:	e005      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	75fb      	strb	r3, [r7, #23]
      break;
 800729c:	e002      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800729e:	bf00      	nop
 80072a0:	e000      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80072a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d109      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072aa:	4ba3      	ldr	r3, [pc, #652]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b6:	49a0      	ldr	r1, [pc, #640]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072bc:	e001      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d047      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d6:	d030      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80072d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072dc:	d82a      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80072de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072e2:	d02c      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80072e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072e8:	d824      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80072ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ee:	d018      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80072f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f4:	d81e      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fe:	d007      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007300:	e018      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007302:	4b8d      	ldr	r3, [pc, #564]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	4a8c      	ldr	r2, [pc, #560]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800730c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800730e:	e017      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3304      	adds	r3, #4
 8007314:	2100      	movs	r1, #0
 8007316:	4618      	mov	r0, r3
 8007318:	f001 f81a 	bl	8008350 <RCCEx_PLL2_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007320:	e00e      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3324      	adds	r3, #36	; 0x24
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f001 f8c3 	bl	80084b4 <RCCEx_PLL3_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007332:	e005      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	75fb      	strb	r3, [r7, #23]
      break;
 8007338:	e002      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800733a:	bf00      	nop
 800733c:	e000      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800733e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007346:	4b7c      	ldr	r3, [pc, #496]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007352:	4979      	ldr	r1, [pc, #484]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007354:	4313      	orrs	r3, r2
 8007356:	650b      	str	r3, [r1, #80]	; 0x50
 8007358:	e001      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d049      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800736e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007372:	d02e      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007378:	d828      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800737a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800737e:	d02a      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007384:	d822      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007386:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800738a:	d026      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x486>
 800738c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007390:	d81c      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007396:	d010      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800739c:	d816      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01d      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80073a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a6:	d111      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	2101      	movs	r1, #1
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 ffce 	bl	8008350 <RCCEx_PLL2_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073b8:	e012      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3324      	adds	r3, #36	; 0x24
 80073be:	2101      	movs	r1, #1
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 f877 	bl	80084b4 <RCCEx_PLL3_Config>
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073ca:	e009      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	75fb      	strb	r3, [r7, #23]
      break;
 80073d0:	e006      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80073d2:	bf00      	nop
 80073d4:	e004      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80073d6:	bf00      	nop
 80073d8:	e002      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80073da:	bf00      	nop
 80073dc:	e000      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80073de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073e6:	4b54      	ldr	r3, [pc, #336]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f2:	4951      	ldr	r1, [pc, #324]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	650b      	str	r3, [r1, #80]	; 0x50
 80073f8:	e001      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d04b      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007414:	d02e      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800741a:	d828      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800741c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007420:	d02a      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007426:	d822      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007428:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800742c:	d026      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800742e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007432:	d81c      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007438:	d010      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800743a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800743e:	d816      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01d      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007448:	d111      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3304      	adds	r3, #4
 800744e:	2101      	movs	r1, #1
 8007450:	4618      	mov	r0, r3
 8007452:	f000 ff7d 	bl	8008350 <RCCEx_PLL2_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800745a:	e012      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3324      	adds	r3, #36	; 0x24
 8007460:	2101      	movs	r1, #1
 8007462:	4618      	mov	r0, r3
 8007464:	f001 f826 	bl	80084b4 <RCCEx_PLL3_Config>
 8007468:	4603      	mov	r3, r0
 800746a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800746c:	e009      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]
      break;
 8007472:	e006      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007474:	bf00      	nop
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007478:	bf00      	nop
 800747a:	e002      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800747c:	bf00      	nop
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007488:	4b2b      	ldr	r3, [pc, #172]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800748a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007496:	4928      	ldr	r1, [pc, #160]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007498:	4313      	orrs	r3, r2
 800749a:	658b      	str	r3, [r1, #88]	; 0x58
 800749c:	e001      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d02f      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b6:	d00e      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80074b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074bc:	d814      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d015      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80074c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074c6:	d10f      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c8:	4b1b      	ldr	r3, [pc, #108]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a1a      	ldr	r2, [pc, #104]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80074d4:	e00c      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	2101      	movs	r1, #1
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 ff37 	bl	8008350 <RCCEx_PLL2_Config>
 80074e2:	4603      	mov	r3, r0
 80074e4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80074e6:	e003      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	75fb      	strb	r3, [r7, #23]
      break;
 80074ec:	e000      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80074ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007502:	490d      	ldr	r1, [pc, #52]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007504:	4313      	orrs	r3, r2
 8007506:	650b      	str	r3, [r1, #80]	; 0x50
 8007508:	e001      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d033      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	2b03      	cmp	r3, #3
 8007520:	d81c      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	08007563 	.word	0x08007563
 800752c:	0800753d 	.word	0x0800753d
 8007530:	0800754b 	.word	0x0800754b
 8007534:	08007563 	.word	0x08007563
 8007538:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753c:	4bb8      	ldr	r3, [pc, #736]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	4ab7      	ldr	r2, [pc, #732]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007548:	e00c      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	2102      	movs	r1, #2
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fefd 	bl	8008350 <RCCEx_PLL2_Config>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800755a:	e003      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
      break;
 8007560:	e000      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d109      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800756a:	4bad      	ldr	r3, [pc, #692]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800756c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756e:	f023 0203 	bic.w	r2, r3, #3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007576:	49aa      	ldr	r1, [pc, #680]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007578:	4313      	orrs	r3, r2
 800757a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800757c:	e001      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 8086 	beq.w	800769c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007590:	4ba4      	ldr	r3, [pc, #656]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4aa3      	ldr	r2, [pc, #652]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800759a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800759c:	f7fa fdc4 	bl	8002128 <HAL_GetTick>
 80075a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075a2:	e009      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a4:	f7fa fdc0 	bl	8002128 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b64      	cmp	r3, #100	; 0x64
 80075b0:	d902      	bls.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	75fb      	strb	r3, [r7, #23]
        break;
 80075b6:	e005      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075b8:	4b9a      	ldr	r3, [pc, #616]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0ef      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d166      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075ca:	4b95      	ldr	r3, [pc, #596]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075d4:	4053      	eors	r3, r2
 80075d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d013      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075de:	4b90      	ldr	r3, [pc, #576]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075e8:	4b8d      	ldr	r3, [pc, #564]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ec:	4a8c      	ldr	r2, [pc, #560]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075f4:	4b8a      	ldr	r3, [pc, #552]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f8:	4a89      	ldr	r2, [pc, #548]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007600:	4a87      	ldr	r2, [pc, #540]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800760c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007610:	d115      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007612:	f7fa fd89 	bl	8002128 <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007618:	e00b      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800761a:	f7fa fd85 	bl	8002128 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	f241 3288 	movw	r2, #5000	; 0x1388
 8007628:	4293      	cmp	r3, r2
 800762a:	d902      	bls.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	75fb      	strb	r3, [r7, #23]
            break;
 8007630:	e005      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007632:	4b7b      	ldr	r3, [pc, #492]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0ed      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d126      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800764a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800764e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007652:	d10d      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007654:	4b72      	ldr	r3, [pc, #456]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007662:	0919      	lsrs	r1, r3, #4
 8007664:	4b70      	ldr	r3, [pc, #448]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007666:	400b      	ands	r3, r1
 8007668:	496d      	ldr	r1, [pc, #436]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800766a:	4313      	orrs	r3, r2
 800766c:	610b      	str	r3, [r1, #16]
 800766e:	e005      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007670:	4b6b      	ldr	r3, [pc, #428]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	4a6a      	ldr	r2, [pc, #424]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007676:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800767a:	6113      	str	r3, [r2, #16]
 800767c:	4b68      	ldr	r3, [pc, #416]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800767e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800768a:	4965      	ldr	r1, [pc, #404]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800768c:	4313      	orrs	r3, r2
 800768e:	670b      	str	r3, [r1, #112]	; 0x70
 8007690:	e004      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	75bb      	strb	r3, [r7, #22]
 8007696:	e001      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d07e      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ac:	2b28      	cmp	r3, #40	; 0x28
 80076ae:	d867      	bhi.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80076b0:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	08007787 	.word	0x08007787
 80076bc:	08007781 	.word	0x08007781
 80076c0:	08007781 	.word	0x08007781
 80076c4:	08007781 	.word	0x08007781
 80076c8:	08007781 	.word	0x08007781
 80076cc:	08007781 	.word	0x08007781
 80076d0:	08007781 	.word	0x08007781
 80076d4:	08007781 	.word	0x08007781
 80076d8:	0800775d 	.word	0x0800775d
 80076dc:	08007781 	.word	0x08007781
 80076e0:	08007781 	.word	0x08007781
 80076e4:	08007781 	.word	0x08007781
 80076e8:	08007781 	.word	0x08007781
 80076ec:	08007781 	.word	0x08007781
 80076f0:	08007781 	.word	0x08007781
 80076f4:	08007781 	.word	0x08007781
 80076f8:	0800776f 	.word	0x0800776f
 80076fc:	08007781 	.word	0x08007781
 8007700:	08007781 	.word	0x08007781
 8007704:	08007781 	.word	0x08007781
 8007708:	08007781 	.word	0x08007781
 800770c:	08007781 	.word	0x08007781
 8007710:	08007781 	.word	0x08007781
 8007714:	08007781 	.word	0x08007781
 8007718:	08007787 	.word	0x08007787
 800771c:	08007781 	.word	0x08007781
 8007720:	08007781 	.word	0x08007781
 8007724:	08007781 	.word	0x08007781
 8007728:	08007781 	.word	0x08007781
 800772c:	08007781 	.word	0x08007781
 8007730:	08007781 	.word	0x08007781
 8007734:	08007781 	.word	0x08007781
 8007738:	08007787 	.word	0x08007787
 800773c:	08007781 	.word	0x08007781
 8007740:	08007781 	.word	0x08007781
 8007744:	08007781 	.word	0x08007781
 8007748:	08007781 	.word	0x08007781
 800774c:	08007781 	.word	0x08007781
 8007750:	08007781 	.word	0x08007781
 8007754:	08007781 	.word	0x08007781
 8007758:	08007787 	.word	0x08007787
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3304      	adds	r3, #4
 8007760:	2101      	movs	r1, #1
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fdf4 	bl	8008350 <RCCEx_PLL2_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800776c:	e00c      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3324      	adds	r3, #36	; 0x24
 8007772:	2101      	movs	r1, #1
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fe9d 	bl	80084b4 <RCCEx_PLL3_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800777e:	e003      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	75fb      	strb	r3, [r7, #23]
      break;
 8007784:	e000      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800778e:	4b24      	ldr	r3, [pc, #144]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007792:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800779a:	4921      	ldr	r1, [pc, #132]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800779c:	4313      	orrs	r3, r2
 800779e:	654b      	str	r3, [r1, #84]	; 0x54
 80077a0:	e001      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d03e      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b6:	2b05      	cmp	r3, #5
 80077b8:	d820      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	08007803 	.word	0x08007803
 80077c4:	080077d9 	.word	0x080077d9
 80077c8:	080077eb 	.word	0x080077eb
 80077cc:	08007803 	.word	0x08007803
 80077d0:	08007803 	.word	0x08007803
 80077d4:	08007803 	.word	0x08007803
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3304      	adds	r3, #4
 80077dc:	2101      	movs	r1, #1
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fdb6 	bl	8008350 <RCCEx_PLL2_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077e8:	e00c      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3324      	adds	r3, #36	; 0x24
 80077ee:	2101      	movs	r1, #1
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fe5f 	bl	80084b4 <RCCEx_PLL3_Config>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077fa:	e003      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007800:	e000      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d110      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800780a:	4b05      	ldr	r3, [pc, #20]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800780c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780e:	f023 0207 	bic.w	r2, r3, #7
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007816:	4902      	ldr	r1, [pc, #8]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007818:	4313      	orrs	r3, r2
 800781a:	654b      	str	r3, [r1, #84]	; 0x54
 800781c:	e008      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800781e:	bf00      	nop
 8007820:	58024400 	.word	0x58024400
 8007824:	58024800 	.word	0x58024800
 8007828:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d039      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007842:	2b05      	cmp	r3, #5
 8007844:	d820      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	0800788f 	.word	0x0800788f
 8007850:	08007865 	.word	0x08007865
 8007854:	08007877 	.word	0x08007877
 8007858:	0800788f 	.word	0x0800788f
 800785c:	0800788f 	.word	0x0800788f
 8007860:	0800788f 	.word	0x0800788f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3304      	adds	r3, #4
 8007868:	2101      	movs	r1, #1
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fd70 	bl	8008350 <RCCEx_PLL2_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007874:	e00c      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3324      	adds	r3, #36	; 0x24
 800787a:	2101      	movs	r1, #1
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fe19 	bl	80084b4 <RCCEx_PLL3_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007886:	e003      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
      break;
 800788c:	e000      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800788e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10a      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007896:	4bb7      	ldr	r3, [pc, #732]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789a:	f023 0207 	bic.w	r2, r3, #7
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a4:	49b3      	ldr	r1, [pc, #716]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	658b      	str	r3, [r1, #88]	; 0x58
 80078aa:	e001      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0320 	and.w	r3, r3, #32
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d04b      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c6:	d02e      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80078c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078cc:	d828      	bhi.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d2:	d02a      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d8:	d822      	bhi.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078de:	d026      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80078e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078e4:	d81c      	bhi.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ea:	d010      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80078ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f0:	d816      	bhi.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d01d      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80078f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078fa:	d111      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	2100      	movs	r1, #0
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fd24 	bl	8008350 <RCCEx_PLL2_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800790c:	e012      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3324      	adds	r3, #36	; 0x24
 8007912:	2102      	movs	r1, #2
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fdcd 	bl	80084b4 <RCCEx_PLL3_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800791e:	e009      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	75fb      	strb	r3, [r7, #23]
      break;
 8007924:	e006      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007926:	bf00      	nop
 8007928:	e004      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800792a:	bf00      	nop
 800792c:	e002      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800792e:	bf00      	nop
 8007930:	e000      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800793a:	4b8e      	ldr	r3, [pc, #568]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800793c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007948:	498a      	ldr	r1, [pc, #552]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800794a:	4313      	orrs	r3, r2
 800794c:	654b      	str	r3, [r1, #84]	; 0x54
 800794e:	e001      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d04b      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007966:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800796a:	d02e      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800796c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007970:	d828      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007976:	d02a      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800797c:	d822      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800797e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007982:	d026      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007988:	d81c      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800798a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800798e:	d010      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007994:	d816      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01d      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800799a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800799e:	d111      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3304      	adds	r3, #4
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fcd2 	bl	8008350 <RCCEx_PLL2_Config>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079b0:	e012      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	3324      	adds	r3, #36	; 0x24
 80079b6:	2102      	movs	r1, #2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fd7b 	bl	80084b4 <RCCEx_PLL3_Config>
 80079be:	4603      	mov	r3, r0
 80079c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079c2:	e009      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	75fb      	strb	r3, [r7, #23]
      break;
 80079c8:	e006      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079ca:	bf00      	nop
 80079cc:	e004      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079ce:	bf00      	nop
 80079d0:	e002      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079d2:	bf00      	nop
 80079d4:	e000      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10a      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079de:	4b65      	ldr	r3, [pc, #404]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079ec:	4961      	ldr	r1, [pc, #388]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	658b      	str	r3, [r1, #88]	; 0x58
 80079f2:	e001      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d04b      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a0e:	d02e      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007a10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a14:	d828      	bhi.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1a:	d02a      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a20:	d822      	bhi.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a26:	d026      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007a28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a2c:	d81c      	bhi.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a32:	d010      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a38:	d816      	bhi.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d01d      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a42:	d111      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3304      	adds	r3, #4
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fc80 	bl	8008350 <RCCEx_PLL2_Config>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a54:	e012      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3324      	adds	r3, #36	; 0x24
 8007a5a:	2102      	movs	r1, #2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fd29 	bl	80084b4 <RCCEx_PLL3_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a66:	e009      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6c:	e006      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a6e:	bf00      	nop
 8007a70:	e004      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a72:	bf00      	nop
 8007a74:	e002      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a76:	bf00      	nop
 8007a78:	e000      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a82:	4b3c      	ldr	r3, [pc, #240]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a90:	4938      	ldr	r1, [pc, #224]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	658b      	str	r3, [r1, #88]	; 0x58
 8007a96:	e001      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01a      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab2:	d10a      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3324      	adds	r3, #36	; 0x24
 8007ab8:	2102      	movs	r1, #2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fcfa 	bl	80084b4 <RCCEx_PLL3_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007aca:	4b2a      	ldr	r3, [pc, #168]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ace:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad8:	4926      	ldr	r1, [pc, #152]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0310 	and.w	r3, r3, #16
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d01a      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af4:	d10a      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3324      	adds	r3, #36	; 0x24
 8007afa:	2102      	movs	r1, #2
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fcd9 	bl	80084b4 <RCCEx_PLL3_Config>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b0c:	4b19      	ldr	r3, [pc, #100]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b1a:	4916      	ldr	r1, [pc, #88]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d036      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b36:	d01f      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b3c:	d817      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b46:	d009      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007b48:	e011      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	2100      	movs	r1, #0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fbfd 	bl	8008350 <RCCEx_PLL2_Config>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b5a:	e00e      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	2102      	movs	r1, #2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fca6 	bl	80084b4 <RCCEx_PLL3_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b6c:	e005      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	75fb      	strb	r3, [r7, #23]
      break;
 8007b72:	e002      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007b74:	58024400 	.word	0x58024400
      break;
 8007b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b80:	4b93      	ldr	r3, [pc, #588]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b8e:	4990      	ldr	r1, [pc, #576]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	658b      	str	r3, [r1, #88]	; 0x58
 8007b94:	e001      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d033      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bb0:	d01c      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007bb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bb6:	d816      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bbc:	d003      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bc2:	d007      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007bc4:	e00f      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc6:	4b82      	ldr	r3, [pc, #520]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	4a81      	ldr	r2, [pc, #516]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007bd2:	e00c      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3324      	adds	r3, #36	; 0x24
 8007bd8:	2101      	movs	r1, #1
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fc6a 	bl	80084b4 <RCCEx_PLL3_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007be4:	e003      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bea:	e000      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10a      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bf4:	4b76      	ldr	r3, [pc, #472]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c02:	4973      	ldr	r1, [pc, #460]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	654b      	str	r3, [r1, #84]	; 0x54
 8007c08:	e001      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d029      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c26:	d007      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007c28:	e00f      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c2a:	4b69      	ldr	r3, [pc, #420]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	4a68      	ldr	r2, [pc, #416]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c36:	e00b      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	2102      	movs	r1, #2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fb86 	bl	8008350 <RCCEx_PLL2_Config>
 8007c44:	4603      	mov	r3, r0
 8007c46:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c48:	e002      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c56:	4b5e      	ldr	r3, [pc, #376]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c62:	495b      	ldr	r1, [pc, #364]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c68:	e001      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3324      	adds	r3, #36	; 0x24
 8007c7e:	2102      	movs	r1, #2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fc17 	bl	80084b4 <RCCEx_PLL3_Config>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d030      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ca4:	d017      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007caa:	d811      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb0:	d013      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb6:	d80b      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d010      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc0:	d106      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc2:	4b43      	ldr	r3, [pc, #268]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	4a42      	ldr	r2, [pc, #264]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007cce:	e007      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd4:	e004      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007cd6:	bf00      	nop
 8007cd8:	e002      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007cda:	bf00      	nop
 8007cdc:	e000      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ce6:	4b3a      	ldr	r3, [pc, #232]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf2:	4937      	ldr	r1, [pc, #220]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	654b      	str	r3, [r1, #84]	; 0x54
 8007cf8:	e001      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d008      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d0a:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	492e      	ldr	r1, [pc, #184]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d009      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007d28:	4b29      	ldr	r3, [pc, #164]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d36:	4926      	ldr	r1, [pc, #152]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d008      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d48:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d54:	491e      	ldr	r1, [pc, #120]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00d      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d66:	4b1a      	ldr	r3, [pc, #104]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	4a19      	ldr	r2, [pc, #100]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d70:	6113      	str	r3, [r2, #16]
 8007d72:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007d7c:	4914      	ldr	r1, [pc, #80]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	da08      	bge.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d8a:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d96:	490e      	ldr	r1, [pc, #56]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d009      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007da8:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db6:	4906      	ldr	r1, [pc, #24]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007dbc:	7dbb      	ldrb	r3, [r7, #22]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e000      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	58024400 	.word	0x58024400

08007dd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007dd8:	f7ff f860 	bl	8006e9c <HAL_RCC_GetHCLKFreq>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	091b      	lsrs	r3, r3, #4
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	4904      	ldr	r1, [pc, #16]	; (8007dfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007dea:	5ccb      	ldrb	r3, [r1, r3]
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	0800ce80 	.word	0x0800ce80

08007e00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b089      	sub	sp, #36	; 0x24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e08:	4ba1      	ldr	r3, [pc, #644]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007e12:	4b9f      	ldr	r3, [pc, #636]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e16:	0b1b      	lsrs	r3, r3, #12
 8007e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007e1e:	4b9c      	ldr	r3, [pc, #624]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	091b      	lsrs	r3, r3, #4
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007e2a:	4b99      	ldr	r3, [pc, #612]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2e:	08db      	lsrs	r3, r3, #3
 8007e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8111 	beq.w	8008070 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	f000 8083 	beq.w	8007f5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	f200 80a1 	bhi.w	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d056      	beq.n	8007f18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e6a:	e099      	b.n	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e6c:	4b88      	ldr	r3, [pc, #544]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d02d      	beq.n	8007ed4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e78:	4b85      	ldr	r3, [pc, #532]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	08db      	lsrs	r3, r3, #3
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	4a84      	ldr	r2, [pc, #528]	; (8008094 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e84:	fa22 f303 	lsr.w	r3, r2, r3
 8007e88:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	ee07 3a90 	vmov	s15, r3
 8007e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea2:	4b7b      	ldr	r3, [pc, #492]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ece:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ed2:	e087      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ede:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800809c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee6:	4b6a      	ldr	r3, [pc, #424]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007efa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f16:	e065      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2a:	4b59      	ldr	r3, [pc, #356]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f5a:	e043      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80080a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6e:	4b48      	ldr	r3, [pc, #288]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f9e:	e021      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007faa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb2:	4b37      	ldr	r3, [pc, #220]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fe2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007fe4:	4b2a      	ldr	r3, [pc, #168]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	0a5b      	lsrs	r3, r3, #9
 8007fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ffe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800800a:	ee17 2a90 	vmov	r2, s15
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008012:	4b1f      	ldr	r3, [pc, #124]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	0c1b      	lsrs	r3, r3, #16
 8008018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800802c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008038:	ee17 2a90 	vmov	r2, s15
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008040:	4b13      	ldr	r3, [pc, #76]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008044:	0e1b      	lsrs	r3, r3, #24
 8008046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800805a:	edd7 6a07 	vldr	s13, [r7, #28]
 800805e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008066:	ee17 2a90 	vmov	r2, s15
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800806e:	e008      	b.n	8008082 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	609a      	str	r2, [r3, #8]
}
 8008082:	bf00      	nop
 8008084:	3724      	adds	r7, #36	; 0x24
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	58024400 	.word	0x58024400
 8008094:	03d09000 	.word	0x03d09000
 8008098:	46000000 	.word	0x46000000
 800809c:	4c742400 	.word	0x4c742400
 80080a0:	4a742400 	.word	0x4a742400
 80080a4:	4af42400 	.word	0x4af42400

080080a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b089      	sub	sp, #36	; 0x24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080b0:	4ba1      	ldr	r3, [pc, #644]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80080ba:	4b9f      	ldr	r3, [pc, #636]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	0d1b      	lsrs	r3, r3, #20
 80080c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80080c6:	4b9c      	ldr	r3, [pc, #624]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ca:	0a1b      	lsrs	r3, r3, #8
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80080d2:	4b99      	ldr	r3, [pc, #612]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d6:	08db      	lsrs	r3, r3, #3
 80080d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	fb02 f303 	mul.w	r3, r2, r3
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 8111 	beq.w	8008318 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	f000 8083 	beq.w	8008204 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b02      	cmp	r3, #2
 8008102:	f200 80a1 	bhi.w	8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d056      	beq.n	80081c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008112:	e099      	b.n	8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008114:	4b88      	ldr	r3, [pc, #544]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	d02d      	beq.n	800817c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008120:	4b85      	ldr	r3, [pc, #532]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	08db      	lsrs	r3, r3, #3
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	4a84      	ldr	r2, [pc, #528]	; (800833c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800812c:	fa22 f303 	lsr.w	r3, r2, r3
 8008130:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	ee07 3a90 	vmov	s15, r3
 8008138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814a:	4b7b      	ldr	r3, [pc, #492]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815a:	ed97 6a03 	vldr	s12, [r7, #12]
 800815e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008176:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800817a:	e087      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008186:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008344 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800818a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818e:	4b6a      	ldr	r3, [pc, #424]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819e:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081be:	e065      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d2:	4b59      	ldr	r3, [pc, #356]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008202:	e043      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800834c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008216:	4b48      	ldr	r3, [pc, #288]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008226:	ed97 6a03 	vldr	s12, [r7, #12]
 800822a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800822e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800823a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800823e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008246:	e021      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825a:	4b37      	ldr	r3, [pc, #220]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826a:	ed97 6a03 	vldr	s12, [r7, #12]
 800826e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800827e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008286:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800828a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800828c:	4b2a      	ldr	r3, [pc, #168]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	0a5b      	lsrs	r3, r3, #9
 8008292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082b2:	ee17 2a90 	vmov	r2, s15
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80082ba:	4b1f      	ldr	r3, [pc, #124]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c4:	ee07 3a90 	vmov	s15, r3
 80082c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80082d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082e0:	ee17 2a90 	vmov	r2, s15
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80082e8:	4b13      	ldr	r3, [pc, #76]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	0e1b      	lsrs	r3, r3, #24
 80082ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008302:	edd7 6a07 	vldr	s13, [r7, #28]
 8008306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800830a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800830e:	ee17 2a90 	vmov	r2, s15
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008316:	e008      	b.n	800832a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	609a      	str	r2, [r3, #8]
}
 800832a:	bf00      	nop
 800832c:	3724      	adds	r7, #36	; 0x24
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	58024400 	.word	0x58024400
 800833c:	03d09000 	.word	0x03d09000
 8008340:	46000000 	.word	0x46000000
 8008344:	4c742400 	.word	0x4c742400
 8008348:	4a742400 	.word	0x4a742400
 800834c:	4af42400 	.word	0x4af42400

08008350 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800835e:	4b53      	ldr	r3, [pc, #332]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b03      	cmp	r3, #3
 8008368:	d101      	bne.n	800836e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e099      	b.n	80084a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800836e:	4b4f      	ldr	r3, [pc, #316]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a4e      	ldr	r2, [pc, #312]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008374:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800837a:	f7f9 fed5 	bl	8002128 <HAL_GetTick>
 800837e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008380:	e008      	b.n	8008394 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008382:	f7f9 fed1 	bl	8002128 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b02      	cmp	r3, #2
 800838e:	d901      	bls.n	8008394 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e086      	b.n	80084a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008394:	4b45      	ldr	r3, [pc, #276]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1f0      	bne.n	8008382 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80083a0:	4b42      	ldr	r3, [pc, #264]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	031b      	lsls	r3, r3, #12
 80083ae:	493f      	ldr	r1, [pc, #252]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	628b      	str	r3, [r1, #40]	; 0x28
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	025b      	lsls	r3, r3, #9
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	431a      	orrs	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	041b      	lsls	r3, r3, #16
 80083d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	3b01      	subs	r3, #1
 80083de:	061b      	lsls	r3, r3, #24
 80083e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083e4:	4931      	ldr	r1, [pc, #196]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80083ea:	4b30      	ldr	r3, [pc, #192]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	492d      	ldr	r1, [pc, #180]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083fc:	4b2b      	ldr	r3, [pc, #172]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	f023 0220 	bic.w	r2, r3, #32
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	4928      	ldr	r1, [pc, #160]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 800840a:	4313      	orrs	r3, r2
 800840c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800840e:	4b27      	ldr	r3, [pc, #156]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008412:	4a26      	ldr	r2, [pc, #152]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008414:	f023 0310 	bic.w	r3, r3, #16
 8008418:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800841a:	4b24      	ldr	r3, [pc, #144]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 800841c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800841e:	4b24      	ldr	r3, [pc, #144]	; (80084b0 <RCCEx_PLL2_Config+0x160>)
 8008420:	4013      	ands	r3, r2
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	69d2      	ldr	r2, [r2, #28]
 8008426:	00d2      	lsls	r2, r2, #3
 8008428:	4920      	ldr	r1, [pc, #128]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 800842a:	4313      	orrs	r3, r2
 800842c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800842e:	4b1f      	ldr	r3, [pc, #124]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008432:	4a1e      	ldr	r2, [pc, #120]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008434:	f043 0310 	orr.w	r3, r3, #16
 8008438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d106      	bne.n	800844e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008440:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	4a19      	ldr	r2, [pc, #100]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800844a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800844c:	e00f      	b.n	800846e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d106      	bne.n	8008462 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008454:	4b15      	ldr	r3, [pc, #84]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	4a14      	ldr	r2, [pc, #80]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 800845a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800845e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008460:	e005      	b.n	800846e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008462:	4b12      	ldr	r3, [pc, #72]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	4a11      	ldr	r2, [pc, #68]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800846c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800846e:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a0e      	ldr	r2, [pc, #56]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800847a:	f7f9 fe55 	bl	8002128 <HAL_GetTick>
 800847e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008480:	e008      	b.n	8008494 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008482:	f7f9 fe51 	bl	8002128 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b02      	cmp	r3, #2
 800848e:	d901      	bls.n	8008494 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e006      	b.n	80084a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d0f0      	beq.n	8008482 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	58024400 	.word	0x58024400
 80084b0:	ffff0007 	.word	0xffff0007

080084b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084c2:	4b53      	ldr	r3, [pc, #332]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80084c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c6:	f003 0303 	and.w	r3, r3, #3
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d101      	bne.n	80084d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e099      	b.n	8008606 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80084d2:	4b4f      	ldr	r3, [pc, #316]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a4e      	ldr	r2, [pc, #312]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80084d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084de:	f7f9 fe23 	bl	8002128 <HAL_GetTick>
 80084e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084e4:	e008      	b.n	80084f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80084e6:	f7f9 fe1f 	bl	8002128 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d901      	bls.n	80084f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e086      	b.n	8008606 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084f8:	4b45      	ldr	r3, [pc, #276]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1f0      	bne.n	80084e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008504:	4b42      	ldr	r3, [pc, #264]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	051b      	lsls	r3, r3, #20
 8008512:	493f      	ldr	r1, [pc, #252]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008514:	4313      	orrs	r3, r2
 8008516:	628b      	str	r3, [r1, #40]	; 0x28
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	3b01      	subs	r3, #1
 800851e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	3b01      	subs	r3, #1
 8008528:	025b      	lsls	r3, r3, #9
 800852a:	b29b      	uxth	r3, r3
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	3b01      	subs	r3, #1
 8008534:	041b      	lsls	r3, r3, #16
 8008536:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	3b01      	subs	r3, #1
 8008542:	061b      	lsls	r3, r3, #24
 8008544:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008548:	4931      	ldr	r1, [pc, #196]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 800854a:	4313      	orrs	r3, r2
 800854c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800854e:	4b30      	ldr	r3, [pc, #192]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	492d      	ldr	r1, [pc, #180]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 800855c:	4313      	orrs	r3, r2
 800855e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008560:	4b2b      	ldr	r3, [pc, #172]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	4928      	ldr	r1, [pc, #160]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 800856e:	4313      	orrs	r3, r2
 8008570:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008572:	4b27      	ldr	r3, [pc, #156]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	4a26      	ldr	r2, [pc, #152]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800857c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800857e:	4b24      	ldr	r3, [pc, #144]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008582:	4b24      	ldr	r3, [pc, #144]	; (8008614 <RCCEx_PLL3_Config+0x160>)
 8008584:	4013      	ands	r3, r2
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	69d2      	ldr	r2, [r2, #28]
 800858a:	00d2      	lsls	r2, r2, #3
 800858c:	4920      	ldr	r1, [pc, #128]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 800858e:	4313      	orrs	r3, r2
 8008590:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008592:	4b1f      	ldr	r3, [pc, #124]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800859c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d106      	bne.n	80085b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80085a4:	4b1a      	ldr	r3, [pc, #104]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	4a19      	ldr	r2, [pc, #100]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085b0:	e00f      	b.n	80085d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d106      	bne.n	80085c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80085b8:	4b15      	ldr	r3, [pc, #84]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	4a14      	ldr	r2, [pc, #80]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085c4:	e005      	b.n	80085d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80085c6:	4b12      	ldr	r3, [pc, #72]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ca:	4a11      	ldr	r2, [pc, #68]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80085d2:	4b0f      	ldr	r3, [pc, #60]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a0e      	ldr	r2, [pc, #56]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085de:	f7f9 fda3 	bl	8002128 <HAL_GetTick>
 80085e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085e4:	e008      	b.n	80085f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085e6:	f7f9 fd9f 	bl	8002128 <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d901      	bls.n	80085f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e006      	b.n	8008606 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0f0      	beq.n	80085e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	58024400 	.word	0x58024400
 8008614:	ffff0007 	.word	0xffff0007

08008618 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d067      	beq.n	80086fa <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7f9 f9a6 	bl	8001990 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	22ca      	movs	r2, #202	; 0xca
 8008652:	625a      	str	r2, [r3, #36]	; 0x24
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2253      	movs	r2, #83	; 0x53
 800865a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fbdb 	bl	8008e18 <RTC_EnterInitMode>
 8008662:	4603      	mov	r3, r0
 8008664:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d13b      	bne.n	80086e4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6899      	ldr	r1, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	4b23      	ldr	r3, [pc, #140]	; (8008704 <HAL_RTC_Init+0xec>)
 8008678:	400b      	ands	r3, r1
 800867a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6899      	ldr	r1, [r3, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	0419      	lsls	r1, r3, #16
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fbe3 	bl	8008e78 <RTC_ExitInitMode>
 80086b2:	4603      	mov	r3, r0
 80086b4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d113      	bne.n	80086e4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0203 	bic.w	r2, r2, #3
 80086ca:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	69da      	ldr	r2, [r3, #28]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	430a      	orrs	r2, r1
 80086e2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	22ff      	movs	r2, #255	; 0xff
 80086ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d103      	bne.n	80086fa <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	ff8fffbf 	.word	0xff8fffbf

08008708 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008708:	b590      	push	{r4, r7, lr}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <HAL_RTC_SetTime+0x1a>
 800871e:	2302      	movs	r3, #2
 8008720:	e089      	b.n	8008836 <HAL_RTC_SetTime+0x12e>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2202      	movs	r2, #2
 800872e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	22ca      	movs	r2, #202	; 0xca
 8008738:	625a      	str	r2, [r3, #36]	; 0x24
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2253      	movs	r2, #83	; 0x53
 8008740:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 fb68 	bl	8008e18 <RTC_EnterInitMode>
 8008748:	4603      	mov	r3, r0
 800874a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800874c:	7cfb      	ldrb	r3, [r7, #19]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d161      	bne.n	8008816 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d126      	bne.n	80087a6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	d102      	bne.n	800876c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2200      	movs	r2, #0
 800876a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 fbbf 	bl	8008ef4 <RTC_ByteToBcd2>
 8008776:	4603      	mov	r3, r0
 8008778:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	785b      	ldrb	r3, [r3, #1]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fbb8 	bl	8008ef4 <RTC_ByteToBcd2>
 8008784:	4603      	mov	r3, r0
 8008786:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008788:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	789b      	ldrb	r3, [r3, #2]
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fbb0 	bl	8008ef4 <RTC_ByteToBcd2>
 8008794:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008796:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	78db      	ldrb	r3, [r3, #3]
 800879e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087a0:	4313      	orrs	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	e018      	b.n	80087d8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087c6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087cc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	78db      	ldrb	r3, [r3, #3]
 80087d2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087d4:	4313      	orrs	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	6979      	ldr	r1, [r7, #20]
 80087de:	4b18      	ldr	r3, [pc, #96]	; (8008840 <HAL_RTC_SetTime+0x138>)
 80087e0:	400b      	ands	r3, r1
 80087e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80087f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6899      	ldr	r1, [r3, #8]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	431a      	orrs	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 fb33 	bl	8008e78 <RTC_ExitInitMode>
 8008812:	4603      	mov	r3, r0
 8008814:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	22ff      	movs	r2, #255	; 0xff
 800881c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800881e:	7cfb      	ldrb	r3, [r7, #19]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d103      	bne.n	800882c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008834:	7cfb      	ldrb	r3, [r7, #19]
}
 8008836:	4618      	mov	r0, r3
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	bd90      	pop	{r4, r7, pc}
 800883e:	bf00      	nop
 8008840:	007f7f7f 	.word	0x007f7f7f

08008844 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b22      	ldr	r3, [pc, #136]	; (80088f8 <HAL_RTC_GetTime+0xb4>)
 8008870:	4013      	ands	r3, r2
 8008872:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	0c1b      	lsrs	r3, r3, #16
 8008878:	b2db      	uxtb	r3, r3
 800887a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800887e:	b2da      	uxtb	r2, r3
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	0a1b      	lsrs	r3, r3, #8
 8008888:	b2db      	uxtb	r3, r3
 800888a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888e:	b2da      	uxtb	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800889c:	b2da      	uxtb	r2, r3
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	0d9b      	lsrs	r3, r3, #22
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d11a      	bne.n	80088ee <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fb39 	bl	8008f34 <RTC_Bcd2ToByte>
 80088c2:	4603      	mov	r3, r0
 80088c4:	461a      	mov	r2, r3
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fb30 	bl	8008f34 <RTC_Bcd2ToByte>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	789b      	ldrb	r3, [r3, #2]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fb27 	bl	8008f34 <RTC_Bcd2ToByte>
 80088e6:	4603      	mov	r3, r0
 80088e8:	461a      	mov	r2, r3
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3718      	adds	r7, #24
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	007f7f7f 	.word	0x007f7f7f

080088fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80088fc:	b590      	push	{r4, r7, lr}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_RTC_SetDate+0x1a>
 8008912:	2302      	movs	r3, #2
 8008914:	e073      	b.n	80089fe <HAL_RTC_SetDate+0x102>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2202      	movs	r2, #2
 8008922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10e      	bne.n	800894a <HAL_RTC_SetDate+0x4e>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	785b      	ldrb	r3, [r3, #1]
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	2b00      	cmp	r3, #0
 8008936:	d008      	beq.n	800894a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	f023 0310 	bic.w	r3, r3, #16
 8008940:	b2db      	uxtb	r3, r3
 8008942:	330a      	adds	r3, #10
 8008944:	b2da      	uxtb	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d11c      	bne.n	800898a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	78db      	ldrb	r3, [r3, #3]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 facd 	bl	8008ef4 <RTC_ByteToBcd2>
 800895a:	4603      	mov	r3, r0
 800895c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fac6 	bl	8008ef4 <RTC_ByteToBcd2>
 8008968:	4603      	mov	r3, r0
 800896a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800896c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	789b      	ldrb	r3, [r3, #2]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fabe 	bl	8008ef4 <RTC_ByteToBcd2>
 8008978:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800897a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008984:	4313      	orrs	r3, r2
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e00e      	b.n	80089a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	78db      	ldrb	r3, [r3, #3]
 800898e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008996:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800899c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80089a4:	4313      	orrs	r3, r2
 80089a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	22ca      	movs	r2, #202	; 0xca
 80089ae:	625a      	str	r2, [r3, #36]	; 0x24
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2253      	movs	r2, #83	; 0x53
 80089b6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fa2d 	bl	8008e18 <RTC_EnterInitMode>
 80089be:	4603      	mov	r3, r0
 80089c0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80089c2:	7cfb      	ldrb	r3, [r7, #19]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	6979      	ldr	r1, [r7, #20]
 80089ce:	4b0e      	ldr	r3, [pc, #56]	; (8008a08 <HAL_RTC_SetDate+0x10c>)
 80089d0:	400b      	ands	r3, r1
 80089d2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 fa4f 	bl	8008e78 <RTC_ExitInitMode>
 80089da:	4603      	mov	r3, r0
 80089dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	22ff      	movs	r2, #255	; 0xff
 80089e4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80089e6:	7cfb      	ldrb	r3, [r7, #19]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d103      	bne.n	80089f4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80089fc:	7cfb      	ldrb	r3, [r7, #19]


}
 80089fe:	4618      	mov	r0, r3
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd90      	pop	{r4, r7, pc}
 8008a06:	bf00      	nop
 8008a08:	00ffff3f 	.word	0x00ffff3f

08008a0c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	4b21      	ldr	r3, [pc, #132]	; (8008aa4 <HAL_RTC_GetDate+0x98>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	0a1b      	lsrs	r3, r3, #8
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	0b5b      	lsrs	r3, r3, #13
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d11a      	bne.n	8008a98 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	78db      	ldrb	r3, [r3, #3]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fa64 	bl	8008f34 <RTC_Bcd2ToByte>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461a      	mov	r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	785b      	ldrb	r3, [r3, #1]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fa5b 	bl	8008f34 <RTC_Bcd2ToByte>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	461a      	mov	r2, r3
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	789b      	ldrb	r3, [r3, #2]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fa52 	bl	8008f34 <RTC_Bcd2ToByte>
 8008a90:	4603      	mov	r3, r0
 8008a92:	461a      	mov	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	00ffff3f 	.word	0x00ffff3f

08008aa8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008aa8:	b590      	push	{r4, r7, lr}
 8008aaa:	b089      	sub	sp, #36	; 0x24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <HAL_RTC_SetAlarm_IT+0x1a>
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e123      	b.n	8008d0a <HAL_RTC_SetAlarm_IT+0x262>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2202      	movs	r2, #2
 8008ace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d137      	bne.n	8008b48 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f9ff 	bl	8008ef4 <RTC_ByteToBcd2>
 8008af6:	4603      	mov	r3, r0
 8008af8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f9f8 	bl	8008ef4 <RTC_ByteToBcd2>
 8008b04:	4603      	mov	r3, r0
 8008b06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b08:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	789b      	ldrb	r3, [r3, #2]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f9f0 	bl	8008ef4 <RTC_ByteToBcd2>
 8008b14:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b16:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	78db      	ldrb	r3, [r3, #3]
 8008b1e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008b20:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f9e2 	bl	8008ef4 <RTC_ByteToBcd2>
 8008b30:	4603      	mov	r3, r0
 8008b32:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008b34:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008b3c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b42:	4313      	orrs	r3, r2
 8008b44:	61fb      	str	r3, [r7, #28]
 8008b46:	e023      	b.n	8008b90 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d102      	bne.n	8008b5c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	785b      	ldrb	r3, [r3, #1]
 8008b66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008b68:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008b6e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	78db      	ldrb	r3, [r3, #3]
 8008b74:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008b76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b7e:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008b80:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008b86:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	22ca      	movs	r2, #202	; 0xca
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2253      	movs	r2, #83	; 0x53
 8008baa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb4:	d14a      	bne.n	8008c4c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bc4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008bd6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008bd8:	f7f9 faa6 	bl	8002128 <HAL_GetTick>
 8008bdc:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008bde:	e015      	b.n	8008c0c <HAL_RTC_SetAlarm_IT+0x164>
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008be0:	f7f9 faa2 	bl	8002128 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bee:	d90d      	bls.n	8008c0c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	22ff      	movs	r2, #255	; 0xff
 8008bf6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e07e      	b.n	8008d0a <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0e2      	beq.n	8008be0 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c38:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c48:	609a      	str	r2, [r3, #8]
 8008c4a:	e049      	b.n	8008ce0 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c5a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008c6c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008c6e:	f7f9 fa5b 	bl	8002128 <HAL_GetTick>
 8008c72:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008c74:	e015      	b.n	8008ca2 <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c76:	f7f9 fa57 	bl	8002128 <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c84:	d90d      	bls.n	8008ca2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	22ff      	movs	r2, #255	; 0xff
 8008c8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2203      	movs	r2, #3
 8008c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e033      	b.n	8008d0a <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0e2      	beq.n	8008c76 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cce:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cde:	609a      	str	r2, [r3, #8]
#if !defined(DUAL_CORE)
  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cee:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	22ff      	movs	r2, #255	; 0xff
 8008cf6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3724      	adds	r7, #36	; 0x24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd90      	pop	{r4, r7, pc}
	...

08008d14 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
#if defined(DUAL_CORE)
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8008d1c:	f7f9 fb64 	bl	80023e8 <HAL_GetCurrentCPUID>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d104      	bne.n	8008d30 <HAL_RTC_AlarmIRQHandler+0x1c>
  {
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008d26:	4b22      	ldr	r3, [pc, #136]	; (8008db0 <HAL_RTC_AlarmIRQHandler+0x9c>)
 8008d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d2c:	609a      	str	r2, [r3, #8]
 8008d2e:	e003      	b.n	8008d38 <HAL_RTC_AlarmIRQHandler+0x24>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
 8008d30:	4b20      	ldr	r3, [pc, #128]	; (8008db4 <HAL_RTC_AlarmIRQHandler+0xa0>)
 8008d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d36:	609a      	str	r2, [r3, #8]
  }
#endif /* RTC_MISR_ALRBMF */

#if defined(RTC_ISR_ALRAF)
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d012      	beq.n	8008d6c <HAL_RTC_AlarmIRQHandler+0x58>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <HAL_RTC_AlarmIRQHandler+0x58>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008d64:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f826 	bl	8008db8 <HAL_RTC_AlarmAEventCallback>
  }
#endif /* RTC_ISR_ALRAF */

#if defined(RTC_ISR_ALRBF)
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d012      	beq.n	8008da0 <HAL_RTC_AlarmIRQHandler+0x8c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00b      	beq.n	8008da0 <HAL_RTC_AlarmIRQHandler+0x8c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008d98:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f8e4 	bl	8008f68 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	58000080 	.word	0x58000080
 8008db4:	580000c0 	.word	0x580000c0

08008db8 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008de2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008de4:	f7f9 f9a0 	bl	8002128 <HAL_GetTick>
 8008de8:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008dea:	e009      	b.n	8008e00 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008dec:	f7f9 f99c 	bl	8002128 <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dfa:	d901      	bls.n	8008e00 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e007      	b.n	8008e10 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0ee      	beq.n	8008dec <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d11d      	bne.n	8008e6e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f04f 32ff 	mov.w	r2, #4294967295
 8008e3a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008e3c:	f7f9 f974 	bl	8002128 <HAL_GetTick>
 8008e40:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008e42:	e00d      	b.n	8008e60 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008e44:	f7f9 f970 	bl	8002128 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e52:	d905      	bls.n	8008e60 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2203      	movs	r2, #3
 8008e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d0ea      	beq.n	8008e44 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008e84:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <RTC_ExitInitMode+0x78>)
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	4a19      	ldr	r2, [pc, #100]	; (8008ef0 <RTC_ExitInitMode+0x78>)
 8008e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e8e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008e90:	4b17      	ldr	r3, [pc, #92]	; (8008ef0 <RTC_ExitInitMode+0x78>)
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f003 0320 	and.w	r3, r3, #32
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10c      	bne.n	8008eb6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff ff95 	bl	8008dcc <HAL_RTC_WaitForSynchro>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d01e      	beq.n	8008ee6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2203      	movs	r2, #3
 8008eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	73fb      	strb	r3, [r7, #15]
 8008eb4:	e017      	b.n	8008ee6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008eb6:	4b0e      	ldr	r3, [pc, #56]	; (8008ef0 <RTC_ExitInitMode+0x78>)
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	4a0d      	ldr	r2, [pc, #52]	; (8008ef0 <RTC_ExitInitMode+0x78>)
 8008ebc:	f023 0320 	bic.w	r3, r3, #32
 8008ec0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ff82 	bl	8008dcc <HAL_RTC_WaitForSynchro>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008eda:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <RTC_ExitInitMode+0x78>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	4a04      	ldr	r2, [pc, #16]	; (8008ef0 <RTC_ExitInitMode+0x78>)
 8008ee0:	f043 0320 	orr.w	r3, r3, #32
 8008ee4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	58004000 	.word	0x58004000

08008ef4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8008f06:	e005      	b.n	8008f14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008f0e:	7afb      	ldrb	r3, [r7, #11]
 8008f10:	3b0a      	subs	r3, #10
 8008f12:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008f14:	7afb      	ldrb	r3, [r7, #11]
 8008f16:	2b09      	cmp	r3, #9
 8008f18:	d8f6      	bhi.n	8008f08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	7afb      	ldrb	r3, [r7, #11]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	b2db      	uxtb	r3, r3
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	091b      	lsrs	r3, r3, #4
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	0092      	lsls	r2, r2, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	f003 030f 	and.w	r3, r3, #15
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	4413      	add	r3, r2
 8008f5a:	b2db      	uxtb	r3, r3
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e0eb      	b.n	800916a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a75      	ldr	r2, [pc, #468]	; (8009174 <HAL_SPI_Init+0x1f8>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00f      	beq.n	8008fc2 <HAL_SPI_Init+0x46>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a74      	ldr	r2, [pc, #464]	; (8009178 <HAL_SPI_Init+0x1fc>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d00a      	beq.n	8008fc2 <HAL_SPI_Init+0x46>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a72      	ldr	r2, [pc, #456]	; (800917c <HAL_SPI_Init+0x200>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d005      	beq.n	8008fc2 <HAL_SPI_Init+0x46>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	2b0f      	cmp	r3, #15
 8008fbc:	d901      	bls.n	8008fc2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e0d3      	b.n	800916a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 ff62 	bl	8009e8c <SPI_GetPacketSize>
 8008fc8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a69      	ldr	r2, [pc, #420]	; (8009174 <HAL_SPI_Init+0x1f8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d00c      	beq.n	8008fee <HAL_SPI_Init+0x72>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a67      	ldr	r2, [pc, #412]	; (8009178 <HAL_SPI_Init+0x1fc>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d007      	beq.n	8008fee <HAL_SPI_Init+0x72>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a66      	ldr	r2, [pc, #408]	; (800917c <HAL_SPI_Init+0x200>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d002      	beq.n	8008fee <HAL_SPI_Init+0x72>
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b08      	cmp	r3, #8
 8008fec:	d811      	bhi.n	8009012 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008ff2:	4a60      	ldr	r2, [pc, #384]	; (8009174 <HAL_SPI_Init+0x1f8>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d009      	beq.n	800900c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a5e      	ldr	r2, [pc, #376]	; (8009178 <HAL_SPI_Init+0x1fc>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d004      	beq.n	800900c <HAL_SPI_Init+0x90>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a5d      	ldr	r2, [pc, #372]	; (800917c <HAL_SPI_Init+0x200>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d104      	bne.n	8009016 <HAL_SPI_Init+0x9a>
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2b10      	cmp	r3, #16
 8009010:	d901      	bls.n	8009016 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e0a9      	b.n	800916a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7f8 fce8 	bl	8001a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0201 	bic.w	r2, r2, #1
 8009046:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009050:	d119      	bne.n	8009086 <HAL_SPI_Init+0x10a>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800905a:	d103      	bne.n	8009064 <HAL_SPI_Init+0xe8>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009060:	2b00      	cmp	r3, #0
 8009062:	d008      	beq.n	8009076 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10c      	bne.n	8009086 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009074:	d107      	bne.n	8009086 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009084:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	69da      	ldr	r2, [r3, #28]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908e:	431a      	orrs	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	431a      	orrs	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009098:	ea42 0103 	orr.w	r1, r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b0:	431a      	orrs	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b6:	431a      	orrs	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	431a      	orrs	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	431a      	orrs	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	695b      	ldr	r3, [r3, #20]
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	431a      	orrs	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	431a      	orrs	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	431a      	orrs	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090e6:	ea42 0103 	orr.w	r1, r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d113      	bne.n	8009126 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009110:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009124:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0201 	bic.w	r2, r2, #1
 8009134:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00a      	beq.n	8009158 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	40013000 	.word	0x40013000
 8009178:	40003800 	.word	0x40003800
 800917c:	40003c00 	.word	0x40003c00

08009180 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	; 0x28
 8009184:	af02      	add	r7, sp, #8
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	603b      	str	r3, [r7, #0]
 800918c:	4613      	mov	r3, r2
 800918e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3320      	adds	r3, #32
 8009196:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <HAL_SPI_Transmit+0x2a>
 80091a6:	2302      	movs	r3, #2
 80091a8:	e1d7      	b.n	800955a <HAL_SPI_Transmit+0x3da>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091b2:	f7f8 ffb9 	bl	8002128 <HAL_GetTick>
 80091b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d007      	beq.n	80091d4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80091c4:	2302      	movs	r3, #2
 80091c6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80091d0:	7efb      	ldrb	r3, [r7, #27]
 80091d2:	e1c2      	b.n	800955a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d002      	beq.n	80091e0 <HAL_SPI_Transmit+0x60>
 80091da:	88fb      	ldrh	r3, [r7, #6]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d107      	bne.n	80091f0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80091ec:	7efb      	ldrb	r3, [r7, #27]
 80091ee:	e1b4      	b.n	800955a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2203      	movs	r2, #3
 80091f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	88fa      	ldrh	r2, [r7, #6]
 800920a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	88fa      	ldrh	r2, [r7, #6]
 8009212:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009240:	d107      	bne.n	8009252 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009250:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	4b96      	ldr	r3, [pc, #600]	; (80094b4 <HAL_SPI_Transmit+0x334>)
 800925a:	4013      	ands	r3, r2
 800925c:	88f9      	ldrh	r1, [r7, #6]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	430b      	orrs	r3, r1
 8009264:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f042 0201 	orr.w	r2, r2, #1
 8009274:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800927e:	d107      	bne.n	8009290 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800928e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	2b0f      	cmp	r3, #15
 8009296:	d947      	bls.n	8009328 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009298:	e03f      	b.n	800931a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	f003 0302 	and.w	r3, r3, #2
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d114      	bne.n	80092d2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6812      	ldr	r2, [r2, #0]
 80092b2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092b8:	1d1a      	adds	r2, r3, #4
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	3b01      	subs	r3, #1
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80092d0:	e023      	b.n	800931a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092d2:	f7f8 ff29 	bl	8002128 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d803      	bhi.n	80092ea <HAL_SPI_Transmit+0x16a>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d102      	bne.n	80092f0 <HAL_SPI_Transmit+0x170>
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d114      	bne.n	800931a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 fcfd 	bl	8009cf0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009304:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e11f      	b.n	800955a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1b9      	bne.n	800929a <HAL_SPI_Transmit+0x11a>
 8009326:	e0f2      	b.n	800950e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	2b07      	cmp	r3, #7
 800932e:	f240 80e7 	bls.w	8009500 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009332:	e05d      	b.n	80093f0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b02      	cmp	r3, #2
 8009340:	d132      	bne.n	80093a8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009348:	b29b      	uxth	r3, r3
 800934a:	2b01      	cmp	r3, #1
 800934c:	d918      	bls.n	8009380 <HAL_SPI_Transmit+0x200>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009352:	2b00      	cmp	r3, #0
 8009354:	d014      	beq.n	8009380 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6812      	ldr	r2, [r2, #0]
 8009360:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009366:	1d1a      	adds	r2, r3, #4
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009372:	b29b      	uxth	r3, r3
 8009374:	3b02      	subs	r3, #2
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800937e:	e037      	b.n	80093f0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009384:	881a      	ldrh	r2, [r3, #0]
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938e:	1c9a      	adds	r2, r3, #2
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800939a:	b29b      	uxth	r3, r3
 800939c:	3b01      	subs	r3, #1
 800939e:	b29a      	uxth	r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093a6:	e023      	b.n	80093f0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093a8:	f7f8 febe 	bl	8002128 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d803      	bhi.n	80093c0 <HAL_SPI_Transmit+0x240>
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093be:	d102      	bne.n	80093c6 <HAL_SPI_Transmit+0x246>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d114      	bne.n	80093f0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fc92 	bl	8009cf0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e0b4      	b.n	800955a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d19b      	bne.n	8009334 <HAL_SPI_Transmit+0x1b4>
 80093fc:	e087      	b.n	800950e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b02      	cmp	r3, #2
 800940a:	d155      	bne.n	80094b8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009412:	b29b      	uxth	r3, r3
 8009414:	2b03      	cmp	r3, #3
 8009416:	d918      	bls.n	800944a <HAL_SPI_Transmit+0x2ca>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941c:	2b40      	cmp	r3, #64	; 0x40
 800941e:	d914      	bls.n	800944a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6812      	ldr	r2, [r2, #0]
 800942a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009430:	1d1a      	adds	r2, r3, #4
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b04      	subs	r3, #4
 8009440:	b29a      	uxth	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009448:	e05a      	b.n	8009500 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009450:	b29b      	uxth	r3, r3
 8009452:	2b01      	cmp	r3, #1
 8009454:	d917      	bls.n	8009486 <HAL_SPI_Transmit+0x306>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945a:	2b00      	cmp	r3, #0
 800945c:	d013      	beq.n	8009486 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009462:	881a      	ldrh	r2, [r3, #0]
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800946c:	1c9a      	adds	r2, r3, #2
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009478:	b29b      	uxth	r3, r3
 800947a:	3b02      	subs	r3, #2
 800947c:	b29a      	uxth	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009484:	e03c      	b.n	8009500 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3320      	adds	r3, #32
 8009490:	7812      	ldrb	r2, [r2, #0]
 8009492:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	3b01      	subs	r3, #1
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80094b0:	e026      	b.n	8009500 <HAL_SPI_Transmit+0x380>
 80094b2:	bf00      	nop
 80094b4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094b8:	f7f8 fe36 	bl	8002128 <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d803      	bhi.n	80094d0 <HAL_SPI_Transmit+0x350>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ce:	d102      	bne.n	80094d6 <HAL_SPI_Transmit+0x356>
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d114      	bne.n	8009500 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 fc0a 	bl	8009cf0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e02c      	b.n	800955a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009506:	b29b      	uxth	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	f47f af78 	bne.w	80093fe <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2200      	movs	r2, #0
 8009516:	2108      	movs	r1, #8
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 fc89 	bl	8009e30 <SPI_WaitOnFlagUntilTimeout>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d007      	beq.n	8009534 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800952a:	f043 0220 	orr.w	r2, r3, #32
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 fbdb 	bl	8009cf0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e000      	b.n	800955a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009558:	7efb      	ldrb	r3, [r7, #27]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3720      	adds	r7, #32
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop

08009564 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	4613      	mov	r3, r2
 8009570:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800957c:	2b01      	cmp	r3, #1
 800957e:	d101      	bne.n	8009584 <HAL_SPI_Transmit_DMA+0x20>
 8009580:	2302      	movs	r3, #2
 8009582:	e128      	b.n	80097d6 <HAL_SPI_Transmit_DMA+0x272>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b01      	cmp	r3, #1
 8009596:	d007      	beq.n	80095a8 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8009598:	2302      	movs	r3, #2
 800959a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	e116      	b.n	80097d6 <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d002      	beq.n	80095b4 <HAL_SPI_Transmit_DMA+0x50>
 80095ae:	88fb      	ldrh	r3, [r7, #6]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d107      	bne.n	80095c4 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
 80095c2:	e108      	b.n	80097d6 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2203      	movs	r2, #3
 80095c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	88fa      	ldrh	r2, [r7, #6]
 80095de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	88fa      	ldrh	r2, [r7, #6]
 80095e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009614:	d107      	bne.n	8009626 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009624:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	2b0f      	cmp	r3, #15
 800962c:	d905      	bls.n	800963a <HAL_SPI_Transmit_DMA+0xd6>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009638:	d10f      	bne.n	800965a <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800963e:	2b07      	cmp	r3, #7
 8009640:	d913      	bls.n	800966a <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800964c:	d00d      	beq.n	800966a <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009652:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009658:	d007      	beq.n	800966a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	e0b5      	b.n	80097d6 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	2b07      	cmp	r3, #7
 8009670:	d820      	bhi.n	80096b4 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800967c:	d109      	bne.n	8009692 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009684:	b29b      	uxth	r3, r3
 8009686:	3301      	adds	r3, #1
 8009688:	105b      	asrs	r3, r3, #1
 800968a:	b29a      	uxth	r2, r3
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800969c:	d11e      	bne.n	80096dc <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	3303      	adds	r3, #3
 80096a8:	109b      	asrs	r3, r3, #2
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80096b2:	e013      	b.n	80096dc <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	2b0f      	cmp	r3, #15
 80096ba:	d80f      	bhi.n	80096dc <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096c6:	d109      	bne.n	80096dc <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	3301      	adds	r3, #1
 80096d2:	105b      	asrs	r3, r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096e0:	4a3f      	ldr	r2, [pc, #252]	; (80097e0 <HAL_SPI_Transmit_DMA+0x27c>)
 80096e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096e8:	4a3e      	ldr	r2, [pc, #248]	; (80097e4 <HAL_SPI_Transmit_DMA+0x280>)
 80096ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096f0:	4a3d      	ldr	r2, [pc, #244]	; (80097e8 <HAL_SPI_Transmit_DMA+0x284>)
 80096f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096f8:	2200      	movs	r2, #0
 80096fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689a      	ldr	r2, [r3, #8]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800970a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009714:	4619      	mov	r1, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3320      	adds	r3, #32
 800971c:	461a      	mov	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009724:	b29b      	uxth	r3, r3
 8009726:	f7f9 f9cf 	bl	8002ac8 <HAL_DMA_Start_IT>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00f      	beq.n	8009750 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009736:	f043 0210 	orr.w	r2, r3, #16
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
 800974e:	e042      	b.n	80097d6 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800975a:	d108      	bne.n	800976e <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6859      	ldr	r1, [r3, #4]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	4b21      	ldr	r3, [pc, #132]	; (80097ec <HAL_SPI_Transmit_DMA+0x288>)
 8009768:	400b      	ands	r3, r1
 800976a:	6053      	str	r3, [r2, #4]
 800976c:	e009      	b.n	8009782 <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	4b1d      	ldr	r3, [pc, #116]	; (80097ec <HAL_SPI_Transmit_DMA+0x288>)
 8009776:	4013      	ands	r3, r2
 8009778:	88f9      	ldrh	r1, [r7, #6]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	6812      	ldr	r2, [r2, #0]
 800977e:	430b      	orrs	r3, r1
 8009780:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	689a      	ldr	r2, [r3, #8]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009790:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80097a0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f042 0201 	orr.w	r2, r2, #1
 80097b0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097ba:	d107      	bne.n	80097cc <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ca:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	08009c5b 	.word	0x08009c5b
 80097e4:	08009c15 	.word	0x08009c15
 80097e8:	08009c77 	.word	0x08009c77
 80097ec:	ffff0000 	.word	0xffff0000

080097f0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08a      	sub	sp, #40	; 0x28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009808:	6a3a      	ldr	r2, [r7, #32]
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	4013      	ands	r3, r2
 800980e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009818:	2300      	movs	r3, #0
 800981a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009822:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3330      	adds	r3, #48	; 0x30
 800982a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009832:	2b00      	cmp	r3, #0
 8009834:	d113      	bne.n	800985e <HAL_SPI_IRQHandler+0x6e>
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10e      	bne.n	800985e <HAL_SPI_IRQHandler+0x6e>
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	f003 0304 	and.w	r3, r3, #4
 8009846:	2b00      	cmp	r3, #0
 8009848:	d009      	beq.n	800985e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	4798      	blx	r3
    handled = 1UL;
 800985a:	2301      	movs	r3, #1
 800985c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10f      	bne.n	8009888 <HAL_SPI_IRQHandler+0x98>
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <HAL_SPI_IRQHandler+0x98>
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b00      	cmp	r3, #0
 800987a:	d105      	bne.n	8009888 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	4798      	blx	r3
    handled = 1UL;
 8009884:	2301      	movs	r3, #1
 8009886:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	f003 0320 	and.w	r3, r3, #32
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10f      	bne.n	80098b2 <HAL_SPI_IRQHandler+0xc2>
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00a      	beq.n	80098b2 <HAL_SPI_IRQHandler+0xc2>
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	f003 0304 	and.w	r3, r3, #4
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d105      	bne.n	80098b2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	4798      	blx	r3
    handled = 1UL;
 80098ae:	2301      	movs	r3, #1
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f040 816f 	bne.w	8009b98 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f003 0308 	and.w	r3, r3, #8
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 80a0 	beq.w	8009a06 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	699a      	ldr	r2, [r3, #24]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f042 0208 	orr.w	r2, r2, #8
 80098d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	699a      	ldr	r2, [r3, #24]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0210 	orr.w	r2, r2, #16
 80098e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	699a      	ldr	r2, [r3, #24]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098f4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	691a      	ldr	r2, [r3, #16]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 0208 	bic.w	r2, r2, #8
 8009904:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00f      	beq.n	8009930 <HAL_SPI_IRQHandler+0x140>
 8009910:	7cfb      	ldrb	r3, [r7, #19]
 8009912:	2b04      	cmp	r3, #4
 8009914:	d004      	beq.n	8009920 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d007      	beq.n	8009930 <HAL_SPI_IRQHandler+0x140>
 8009920:	7cfb      	ldrb	r3, [r7, #19]
 8009922:	2b03      	cmp	r3, #3
 8009924:	d059      	beq.n	80099da <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d154      	bne.n	80099da <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d13d      	bne.n	80099ba <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800993e:	e036      	b.n	80099ae <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	2b0f      	cmp	r3, #15
 8009946:	d90b      	bls.n	8009960 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009950:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009952:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009958:	1d1a      	adds	r2, r3, #4
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	665a      	str	r2, [r3, #100]	; 0x64
 800995e:	e01d      	b.n	800999c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	2b07      	cmp	r3, #7
 8009966:	d90b      	bls.n	8009980 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	8812      	ldrh	r2, [r2, #0]
 8009970:	b292      	uxth	r2, r2
 8009972:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009978:	1c9a      	adds	r2, r3, #2
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	665a      	str	r2, [r3, #100]	; 0x64
 800997e:	e00d      	b.n	800999c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800998c:	7812      	ldrb	r2, [r2, #0]
 800998e:	b2d2      	uxtb	r2, r2
 8009990:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009996:	1c5a      	adds	r2, r3, #1
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	3b01      	subs	r3, #1
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1c2      	bne.n	8009940 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f998 	bl	8009cf0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f914 	bl	8009c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80099d8:	e0e3      	b.n	8009ba2 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80099da:	7cfb      	ldrb	r3, [r7, #19]
 80099dc:	2b05      	cmp	r3, #5
 80099de:	d103      	bne.n	80099e8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f8f9 	bl	8009bd8 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 80099e6:	e0d9      	b.n	8009b9c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80099e8:	7cfb      	ldrb	r3, [r7, #19]
 80099ea:	2b04      	cmp	r3, #4
 80099ec:	d103      	bne.n	80099f6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f8e8 	bl	8009bc4 <HAL_SPI_RxCpltCallback>
    return;
 80099f4:	e0d2      	b.n	8009b9c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80099f6:	7cfb      	ldrb	r3, [r7, #19]
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	f040 80cf 	bne.w	8009b9c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f8d6 	bl	8009bb0 <HAL_SPI_TxCpltCallback>
    return;
 8009a04:	e0ca      	b.n	8009b9c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00d      	beq.n	8009a2c <HAL_SPI_IRQHandler+0x23c>
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	f003 0308 	and.w	r3, r3, #8
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d008      	beq.n	8009a2c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	699a      	ldr	r2, [r3, #24]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a28:	619a      	str	r2, [r3, #24]

    return;
 8009a2a:	e0ba      	b.n	8009ba2 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 80b5 	beq.w	8009ba2 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00f      	beq.n	8009a62 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a48:	f043 0204 	orr.w	r2, r3, #4
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a60:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00f      	beq.n	8009a8c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a72:	f043 0201 	orr.w	r2, r3, #1
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699a      	ldr	r2, [r3, #24]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a8a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00f      	beq.n	8009ab6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a9c:	f043 0208 	orr.w	r2, r3, #8
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	699a      	ldr	r2, [r3, #24]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ab4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	f003 0320 	and.w	r3, r3, #32
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00f      	beq.n	8009ae0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ac6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	699a      	ldr	r2, [r3, #24]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f042 0220 	orr.w	r2, r2, #32
 8009ade:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d05a      	beq.n	8009ba0 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f022 0201 	bic.w	r2, r2, #1
 8009af8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6919      	ldr	r1, [r3, #16]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	4b28      	ldr	r3, [pc, #160]	; (8009ba8 <HAL_SPI_IRQHandler+0x3b8>)
 8009b06:	400b      	ands	r3, r1
 8009b08:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b14:	d138      	bne.n	8009b88 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009b24:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d013      	beq.n	8009b56 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b32:	4a1e      	ldr	r2, [pc, #120]	; (8009bac <HAL_SPI_IRQHandler+0x3bc>)
 8009b34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7f9 fd4c 	bl	80035d8 <HAL_DMA_Abort_IT>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d007      	beq.n	8009b56 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d020      	beq.n	8009ba0 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b62:	4a12      	ldr	r2, [pc, #72]	; (8009bac <HAL_SPI_IRQHandler+0x3bc>)
 8009b64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7f9 fd34 	bl	80035d8 <HAL_DMA_Abort_IT>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d014      	beq.n	8009ba0 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009b86:	e00b      	b.n	8009ba0 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f835 	bl	8009c00 <HAL_SPI_ErrorCallback>
    return;
 8009b96:	e003      	b.n	8009ba0 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009b98:	bf00      	nop
 8009b9a:	e002      	b.n	8009ba2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009b9c:	bf00      	nop
 8009b9e:	e000      	b.n	8009ba2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009ba0:	bf00      	nop
  }
}
 8009ba2:	3728      	adds	r7, #40	; 0x28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	fffffc94 	.word	0xfffffc94
 8009bac:	08009cbd 	.word	0x08009cbd

08009bb0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c20:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b07      	cmp	r3, #7
 8009c2c:	d011      	beq.n	8009c52 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c38:	d103      	bne.n	8009c42 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7ff ffb8 	bl	8009bb0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009c40:	e007      	b.n	8009c52 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	691a      	ldr	r2, [r3, #16]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f042 0208 	orr.w	r2, r2, #8
 8009c50:	611a      	str	r2, [r3, #16]
}
 8009c52:	bf00      	nop
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c66:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff ffbf 	bl	8009bec <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7fa fe15 	bl	80048b4 <HAL_DMA_GetError>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d011      	beq.n	8009cb4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 f82d 	bl	8009cf0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c9c:	f043 0210 	orr.w	r2, r3, #16
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7ff ffa6 	bl	8009c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7ff ff8c 	bl	8009c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ce8:	bf00      	nop
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	699a      	ldr	r2, [r3, #24]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0208 	orr.w	r2, r2, #8
 8009d0e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	699a      	ldr	r2, [r3, #24]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0210 	orr.w	r2, r2, #16
 8009d1e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f022 0201 	bic.w	r2, r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6919      	ldr	r1, [r3, #16]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	4b3c      	ldr	r3, [pc, #240]	; (8009e2c <SPI_CloseTransfer+0x13c>)
 8009d3c:	400b      	ands	r3, r1
 8009d3e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009d4e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b04      	cmp	r3, #4
 8009d5a:	d014      	beq.n	8009d86 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f003 0320 	and.w	r3, r3, #32
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00f      	beq.n	8009d86 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	699a      	ldr	r2, [r3, #24]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f042 0220 	orr.w	r2, r2, #32
 8009d84:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d014      	beq.n	8009dbc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00f      	beq.n	8009dbc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009da2:	f043 0204 	orr.w	r2, r3, #4
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699a      	ldr	r2, [r3, #24]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00f      	beq.n	8009de6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dcc:	f043 0201 	orr.w	r2, r3, #1
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	699a      	ldr	r2, [r3, #24]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009de4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00f      	beq.n	8009e10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009df6:	f043 0208 	orr.w	r2, r3, #8
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	699a      	ldr	r2, [r3, #24]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009e20:	bf00      	nop
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	fffffc90 	.word	0xfffffc90

08009e30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e40:	e010      	b.n	8009e64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e42:	f7f8 f971 	bl	8002128 <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	69ba      	ldr	r2, [r7, #24]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d803      	bhi.n	8009e5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e58:	d102      	bne.n	8009e60 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e00f      	b.n	8009e84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	695a      	ldr	r2, [r3, #20]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	bf0c      	ite	eq
 8009e74:	2301      	moveq	r3, #1
 8009e76:	2300      	movne	r3, #0
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d0df      	beq.n	8009e42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e98:	095b      	lsrs	r3, r3, #5
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	3307      	adds	r3, #7
 8009eaa:	08db      	lsrs	r3, r3, #3
 8009eac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	fb02 f303 	mul.w	r3, r2, r3
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e049      	b.n	8009f68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d106      	bne.n	8009eee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7f7 fe4d 	bl	8001b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4619      	mov	r1, r3
 8009f00:	4610      	mov	r0, r2
 8009f02:	f000 fc0b 	bl	800a71c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d001      	beq.n	8009f88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e047      	b.n	800a018 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a23      	ldr	r2, [pc, #140]	; (800a024 <HAL_TIM_Base_Start+0xb4>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d01d      	beq.n	8009fd6 <HAL_TIM_Base_Start+0x66>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fa2:	d018      	beq.n	8009fd6 <HAL_TIM_Base_Start+0x66>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a1f      	ldr	r2, [pc, #124]	; (800a028 <HAL_TIM_Base_Start+0xb8>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d013      	beq.n	8009fd6 <HAL_TIM_Base_Start+0x66>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a1e      	ldr	r2, [pc, #120]	; (800a02c <HAL_TIM_Base_Start+0xbc>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d00e      	beq.n	8009fd6 <HAL_TIM_Base_Start+0x66>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a1c      	ldr	r2, [pc, #112]	; (800a030 <HAL_TIM_Base_Start+0xc0>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d009      	beq.n	8009fd6 <HAL_TIM_Base_Start+0x66>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a1b      	ldr	r2, [pc, #108]	; (800a034 <HAL_TIM_Base_Start+0xc4>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d004      	beq.n	8009fd6 <HAL_TIM_Base_Start+0x66>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a19      	ldr	r2, [pc, #100]	; (800a038 <HAL_TIM_Base_Start+0xc8>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d115      	bne.n	800a002 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	4b17      	ldr	r3, [pc, #92]	; (800a03c <HAL_TIM_Base_Start+0xcc>)
 8009fde:	4013      	ands	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2b06      	cmp	r3, #6
 8009fe6:	d015      	beq.n	800a014 <HAL_TIM_Base_Start+0xa4>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fee:	d011      	beq.n	800a014 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f042 0201 	orr.w	r2, r2, #1
 8009ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a000:	e008      	b.n	800a014 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f042 0201 	orr.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	e000      	b.n	800a016 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	40010000 	.word	0x40010000
 800a028:	40000400 	.word	0x40000400
 800a02c:	40000800 	.word	0x40000800
 800a030:	40000c00 	.word	0x40000c00
 800a034:	40010400 	.word	0x40010400
 800a038:	40001800 	.word	0x40001800
 800a03c:	00010007 	.word	0x00010007

0800a040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e049      	b.n	800a0e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f841 	bl	800a0ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2202      	movs	r2, #2
 800a070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3304      	adds	r3, #4
 800a07c:	4619      	mov	r1, r3
 800a07e:	4610      	mov	r0, r2
 800a080:	f000 fb4c 	bl	800a71c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0f6:	bf00      	nop
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
	...

0800a104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d109      	bne.n	800a128 <HAL_TIM_PWM_Start+0x24>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	bf14      	ite	ne
 800a120:	2301      	movne	r3, #1
 800a122:	2300      	moveq	r3, #0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	e03c      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x9e>
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2b04      	cmp	r3, #4
 800a12c:	d109      	bne.n	800a142 <HAL_TIM_PWM_Start+0x3e>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b01      	cmp	r3, #1
 800a138:	bf14      	ite	ne
 800a13a:	2301      	movne	r3, #1
 800a13c:	2300      	moveq	r3, #0
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	e02f      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x9e>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b08      	cmp	r3, #8
 800a146:	d109      	bne.n	800a15c <HAL_TIM_PWM_Start+0x58>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b01      	cmp	r3, #1
 800a152:	bf14      	ite	ne
 800a154:	2301      	movne	r3, #1
 800a156:	2300      	moveq	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	e022      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x9e>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b0c      	cmp	r3, #12
 800a160:	d109      	bne.n	800a176 <HAL_TIM_PWM_Start+0x72>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	bf14      	ite	ne
 800a16e:	2301      	movne	r3, #1
 800a170:	2300      	moveq	r3, #0
 800a172:	b2db      	uxtb	r3, r3
 800a174:	e015      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x9e>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b10      	cmp	r3, #16
 800a17a:	d109      	bne.n	800a190 <HAL_TIM_PWM_Start+0x8c>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	bf14      	ite	ne
 800a188:	2301      	movne	r3, #1
 800a18a:	2300      	moveq	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	e008      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x9e>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	bf14      	ite	ne
 800a19c:	2301      	movne	r3, #1
 800a19e:	2300      	moveq	r3, #0
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e09c      	b.n	800a2e4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d104      	bne.n	800a1ba <HAL_TIM_PWM_Start+0xb6>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1b8:	e023      	b.n	800a202 <HAL_TIM_PWM_Start+0xfe>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	d104      	bne.n	800a1ca <HAL_TIM_PWM_Start+0xc6>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1c8:	e01b      	b.n	800a202 <HAL_TIM_PWM_Start+0xfe>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d104      	bne.n	800a1da <HAL_TIM_PWM_Start+0xd6>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1d8:	e013      	b.n	800a202 <HAL_TIM_PWM_Start+0xfe>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b0c      	cmp	r3, #12
 800a1de:	d104      	bne.n	800a1ea <HAL_TIM_PWM_Start+0xe6>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1e8:	e00b      	b.n	800a202 <HAL_TIM_PWM_Start+0xfe>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b10      	cmp	r3, #16
 800a1ee:	d104      	bne.n	800a1fa <HAL_TIM_PWM_Start+0xf6>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1f8:	e003      	b.n	800a202 <HAL_TIM_PWM_Start+0xfe>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2201      	movs	r2, #1
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 fe8c 	bl	800af28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a35      	ldr	r2, [pc, #212]	; (800a2ec <HAL_TIM_PWM_Start+0x1e8>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d013      	beq.n	800a242 <HAL_TIM_PWM_Start+0x13e>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a34      	ldr	r2, [pc, #208]	; (800a2f0 <HAL_TIM_PWM_Start+0x1ec>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d00e      	beq.n	800a242 <HAL_TIM_PWM_Start+0x13e>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a32      	ldr	r2, [pc, #200]	; (800a2f4 <HAL_TIM_PWM_Start+0x1f0>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d009      	beq.n	800a242 <HAL_TIM_PWM_Start+0x13e>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a31      	ldr	r2, [pc, #196]	; (800a2f8 <HAL_TIM_PWM_Start+0x1f4>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d004      	beq.n	800a242 <HAL_TIM_PWM_Start+0x13e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a2f      	ldr	r2, [pc, #188]	; (800a2fc <HAL_TIM_PWM_Start+0x1f8>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d101      	bne.n	800a246 <HAL_TIM_PWM_Start+0x142>
 800a242:	2301      	movs	r3, #1
 800a244:	e000      	b.n	800a248 <HAL_TIM_PWM_Start+0x144>
 800a246:	2300      	movs	r3, #0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d007      	beq.n	800a25c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a25a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a22      	ldr	r2, [pc, #136]	; (800a2ec <HAL_TIM_PWM_Start+0x1e8>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d01d      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x19e>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a26e:	d018      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x19e>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a22      	ldr	r2, [pc, #136]	; (800a300 <HAL_TIM_PWM_Start+0x1fc>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d013      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x19e>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a21      	ldr	r2, [pc, #132]	; (800a304 <HAL_TIM_PWM_Start+0x200>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d00e      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x19e>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1f      	ldr	r2, [pc, #124]	; (800a308 <HAL_TIM_PWM_Start+0x204>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d009      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x19e>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a17      	ldr	r2, [pc, #92]	; (800a2f0 <HAL_TIM_PWM_Start+0x1ec>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d004      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x19e>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a1b      	ldr	r2, [pc, #108]	; (800a30c <HAL_TIM_PWM_Start+0x208>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d115      	bne.n	800a2ce <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	689a      	ldr	r2, [r3, #8]
 800a2a8:	4b19      	ldr	r3, [pc, #100]	; (800a310 <HAL_TIM_PWM_Start+0x20c>)
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b06      	cmp	r3, #6
 800a2b2:	d015      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1dc>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ba:	d011      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f042 0201 	orr.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2cc:	e008      	b.n	800a2e0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f042 0201 	orr.w	r2, r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	e000      	b.n	800a2e2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	40010000 	.word	0x40010000
 800a2f0:	40010400 	.word	0x40010400
 800a2f4:	40014000 	.word	0x40014000
 800a2f8:	40014400 	.word	0x40014400
 800a2fc:	40014800 	.word	0x40014800
 800a300:	40000400 	.word	0x40000400
 800a304:	40000800 	.word	0x40000800
 800a308:	40000c00 	.word	0x40000c00
 800a30c:	40001800 	.word	0x40001800
 800a310:	00010007 	.word	0x00010007

0800a314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e0fd      	b.n	800a52a <HAL_TIM_PWM_ConfigChannel+0x216>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b14      	cmp	r3, #20
 800a33a:	f200 80f0 	bhi.w	800a51e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a33e:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a344:	0800a399 	.word	0x0800a399
 800a348:	0800a51f 	.word	0x0800a51f
 800a34c:	0800a51f 	.word	0x0800a51f
 800a350:	0800a51f 	.word	0x0800a51f
 800a354:	0800a3d9 	.word	0x0800a3d9
 800a358:	0800a51f 	.word	0x0800a51f
 800a35c:	0800a51f 	.word	0x0800a51f
 800a360:	0800a51f 	.word	0x0800a51f
 800a364:	0800a41b 	.word	0x0800a41b
 800a368:	0800a51f 	.word	0x0800a51f
 800a36c:	0800a51f 	.word	0x0800a51f
 800a370:	0800a51f 	.word	0x0800a51f
 800a374:	0800a45b 	.word	0x0800a45b
 800a378:	0800a51f 	.word	0x0800a51f
 800a37c:	0800a51f 	.word	0x0800a51f
 800a380:	0800a51f 	.word	0x0800a51f
 800a384:	0800a49d 	.word	0x0800a49d
 800a388:	0800a51f 	.word	0x0800a51f
 800a38c:	0800a51f 	.word	0x0800a51f
 800a390:	0800a51f 	.word	0x0800a51f
 800a394:	0800a4dd 	.word	0x0800a4dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 fa56 	bl	800a850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	699a      	ldr	r2, [r3, #24]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f042 0208 	orr.w	r2, r2, #8
 800a3b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	699a      	ldr	r2, [r3, #24]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f022 0204 	bic.w	r2, r2, #4
 800a3c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6999      	ldr	r1, [r3, #24]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	691a      	ldr	r2, [r3, #16]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	619a      	str	r2, [r3, #24]
      break;
 800a3d6:	e0a3      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68b9      	ldr	r1, [r7, #8]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 fac6 	bl	800a970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	699a      	ldr	r2, [r3, #24]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6999      	ldr	r1, [r3, #24]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	021a      	lsls	r2, r3, #8
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	430a      	orrs	r2, r1
 800a416:	619a      	str	r2, [r3, #24]
      break;
 800a418:	e082      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68b9      	ldr	r1, [r7, #8]
 800a420:	4618      	mov	r0, r3
 800a422:	f000 fb2f 	bl	800aa84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	69da      	ldr	r2, [r3, #28]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f042 0208 	orr.w	r2, r2, #8
 800a434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	69da      	ldr	r2, [r3, #28]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0204 	bic.w	r2, r2, #4
 800a444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	69d9      	ldr	r1, [r3, #28]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	691a      	ldr	r2, [r3, #16]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	430a      	orrs	r2, r1
 800a456:	61da      	str	r2, [r3, #28]
      break;
 800a458:	e062      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68b9      	ldr	r1, [r7, #8]
 800a460:	4618      	mov	r0, r3
 800a462:	f000 fb95 	bl	800ab90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	69da      	ldr	r2, [r3, #28]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	69da      	ldr	r2, [r3, #28]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	69d9      	ldr	r1, [r3, #28]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	021a      	lsls	r2, r3, #8
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	430a      	orrs	r2, r1
 800a498:	61da      	str	r2, [r3, #28]
      break;
 800a49a:	e041      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fbdc 	bl	800ac60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f042 0208 	orr.w	r2, r2, #8
 800a4b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 0204 	bic.w	r2, r2, #4
 800a4c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	691a      	ldr	r2, [r3, #16]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4da:	e021      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68b9      	ldr	r1, [r7, #8]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 fc1e 	bl	800ad24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	021a      	lsls	r2, r3, #8
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	430a      	orrs	r2, r1
 800a51a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a51c:	e000      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a51e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop

0800a534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a544:	2b01      	cmp	r3, #1
 800a546:	d101      	bne.n	800a54c <HAL_TIM_ConfigClockSource+0x18>
 800a548:	2302      	movs	r3, #2
 800a54a:	e0db      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1d0>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	4b69      	ldr	r3, [pc, #420]	; (800a70c <HAL_TIM_ConfigClockSource+0x1d8>)
 800a568:	4013      	ands	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a572:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a63      	ldr	r2, [pc, #396]	; (800a710 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a582:	4293      	cmp	r3, r2
 800a584:	f000 80a9 	beq.w	800a6da <HAL_TIM_ConfigClockSource+0x1a6>
 800a588:	4a61      	ldr	r2, [pc, #388]	; (800a710 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	f200 80ae 	bhi.w	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a590:	4a60      	ldr	r2, [pc, #384]	; (800a714 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a592:	4293      	cmp	r3, r2
 800a594:	f000 80a1 	beq.w	800a6da <HAL_TIM_ConfigClockSource+0x1a6>
 800a598:	4a5e      	ldr	r2, [pc, #376]	; (800a714 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	f200 80a6 	bhi.w	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a5a0:	4a5d      	ldr	r2, [pc, #372]	; (800a718 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	f000 8099 	beq.w	800a6da <HAL_TIM_ConfigClockSource+0x1a6>
 800a5a8:	4a5b      	ldr	r2, [pc, #364]	; (800a718 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	f200 809e 	bhi.w	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a5b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5b4:	f000 8091 	beq.w	800a6da <HAL_TIM_ConfigClockSource+0x1a6>
 800a5b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5bc:	f200 8096 	bhi.w	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a5c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5c4:	f000 8089 	beq.w	800a6da <HAL_TIM_ConfigClockSource+0x1a6>
 800a5c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5cc:	f200 808e 	bhi.w	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a5d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d4:	d03e      	beq.n	800a654 <HAL_TIM_ConfigClockSource+0x120>
 800a5d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5da:	f200 8087 	bhi.w	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a5de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e2:	f000 8085 	beq.w	800a6f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ea:	d87f      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a5ec:	2b70      	cmp	r3, #112	; 0x70
 800a5ee:	d01a      	beq.n	800a626 <HAL_TIM_ConfigClockSource+0xf2>
 800a5f0:	2b70      	cmp	r3, #112	; 0x70
 800a5f2:	d87b      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a5f4:	2b60      	cmp	r3, #96	; 0x60
 800a5f6:	d050      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x166>
 800a5f8:	2b60      	cmp	r3, #96	; 0x60
 800a5fa:	d877      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a5fc:	2b50      	cmp	r3, #80	; 0x50
 800a5fe:	d03c      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x146>
 800a600:	2b50      	cmp	r3, #80	; 0x50
 800a602:	d873      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a604:	2b40      	cmp	r3, #64	; 0x40
 800a606:	d058      	beq.n	800a6ba <HAL_TIM_ConfigClockSource+0x186>
 800a608:	2b40      	cmp	r3, #64	; 0x40
 800a60a:	d86f      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a60c:	2b30      	cmp	r3, #48	; 0x30
 800a60e:	d064      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x1a6>
 800a610:	2b30      	cmp	r3, #48	; 0x30
 800a612:	d86b      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a614:	2b20      	cmp	r3, #32
 800a616:	d060      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x1a6>
 800a618:	2b20      	cmp	r3, #32
 800a61a:	d867      	bhi.n	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d05c      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x1a6>
 800a620:	2b10      	cmp	r3, #16
 800a622:	d05a      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a624:	e062      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	6899      	ldr	r1, [r3, #8]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f000 fc57 	bl	800aee8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a648:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	609a      	str	r2, [r3, #8]
      break;
 800a652:	e04e      	b.n	800a6f2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	6899      	ldr	r1, [r3, #8]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f000 fc40 	bl	800aee8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	689a      	ldr	r2, [r3, #8]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a676:	609a      	str	r2, [r3, #8]
      break;
 800a678:	e03b      	b.n	800a6f2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	6859      	ldr	r1, [r3, #4]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	461a      	mov	r2, r3
 800a688:	f000 fbb0 	bl	800adec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2150      	movs	r1, #80	; 0x50
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fc0a 	bl	800aeac <TIM_ITRx_SetConfig>
      break;
 800a698:	e02b      	b.n	800a6f2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	6859      	ldr	r1, [r3, #4]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f000 fbcf 	bl	800ae4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2160      	movs	r1, #96	; 0x60
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 fbfa 	bl	800aeac <TIM_ITRx_SetConfig>
      break;
 800a6b8:	e01b      	b.n	800a6f2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	6859      	ldr	r1, [r3, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f000 fb90 	bl	800adec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2140      	movs	r1, #64	; 0x40
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fbea 	bl	800aeac <TIM_ITRx_SetConfig>
      break;
 800a6d8:	e00b      	b.n	800a6f2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	f000 fbe1 	bl	800aeac <TIM_ITRx_SetConfig>
        break;
 800a6ea:	e002      	b.n	800a6f2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a6ec:	bf00      	nop
 800a6ee:	e000      	b.n	800a6f2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a6f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	ffceff88 	.word	0xffceff88
 800a710:	00100040 	.word	0x00100040
 800a714:	00100030 	.word	0x00100030
 800a718:	00100020 	.word	0x00100020

0800a71c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a40      	ldr	r2, [pc, #256]	; (800a830 <TIM_Base_SetConfig+0x114>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d013      	beq.n	800a75c <TIM_Base_SetConfig+0x40>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a73a:	d00f      	beq.n	800a75c <TIM_Base_SetConfig+0x40>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a3d      	ldr	r2, [pc, #244]	; (800a834 <TIM_Base_SetConfig+0x118>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d00b      	beq.n	800a75c <TIM_Base_SetConfig+0x40>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a3c      	ldr	r2, [pc, #240]	; (800a838 <TIM_Base_SetConfig+0x11c>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d007      	beq.n	800a75c <TIM_Base_SetConfig+0x40>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a3b      	ldr	r2, [pc, #236]	; (800a83c <TIM_Base_SetConfig+0x120>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d003      	beq.n	800a75c <TIM_Base_SetConfig+0x40>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a3a      	ldr	r2, [pc, #232]	; (800a840 <TIM_Base_SetConfig+0x124>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d108      	bne.n	800a76e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a2f      	ldr	r2, [pc, #188]	; (800a830 <TIM_Base_SetConfig+0x114>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d01f      	beq.n	800a7b6 <TIM_Base_SetConfig+0x9a>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a77c:	d01b      	beq.n	800a7b6 <TIM_Base_SetConfig+0x9a>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4a2c      	ldr	r2, [pc, #176]	; (800a834 <TIM_Base_SetConfig+0x118>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d017      	beq.n	800a7b6 <TIM_Base_SetConfig+0x9a>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a2b      	ldr	r2, [pc, #172]	; (800a838 <TIM_Base_SetConfig+0x11c>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d013      	beq.n	800a7b6 <TIM_Base_SetConfig+0x9a>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4a2a      	ldr	r2, [pc, #168]	; (800a83c <TIM_Base_SetConfig+0x120>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d00f      	beq.n	800a7b6 <TIM_Base_SetConfig+0x9a>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a29      	ldr	r2, [pc, #164]	; (800a840 <TIM_Base_SetConfig+0x124>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d00b      	beq.n	800a7b6 <TIM_Base_SetConfig+0x9a>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a28      	ldr	r2, [pc, #160]	; (800a844 <TIM_Base_SetConfig+0x128>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d007      	beq.n	800a7b6 <TIM_Base_SetConfig+0x9a>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a27      	ldr	r2, [pc, #156]	; (800a848 <TIM_Base_SetConfig+0x12c>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d003      	beq.n	800a7b6 <TIM_Base_SetConfig+0x9a>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a26      	ldr	r2, [pc, #152]	; (800a84c <TIM_Base_SetConfig+0x130>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d108      	bne.n	800a7c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a10      	ldr	r2, [pc, #64]	; (800a830 <TIM_Base_SetConfig+0x114>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00f      	beq.n	800a814 <TIM_Base_SetConfig+0xf8>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a12      	ldr	r2, [pc, #72]	; (800a840 <TIM_Base_SetConfig+0x124>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d00b      	beq.n	800a814 <TIM_Base_SetConfig+0xf8>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a11      	ldr	r2, [pc, #68]	; (800a844 <TIM_Base_SetConfig+0x128>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d007      	beq.n	800a814 <TIM_Base_SetConfig+0xf8>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a10      	ldr	r2, [pc, #64]	; (800a848 <TIM_Base_SetConfig+0x12c>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d003      	beq.n	800a814 <TIM_Base_SetConfig+0xf8>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a0f      	ldr	r2, [pc, #60]	; (800a84c <TIM_Base_SetConfig+0x130>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d103      	bne.n	800a81c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	691a      	ldr	r2, [r3, #16]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	615a      	str	r2, [r3, #20]
}
 800a822:	bf00      	nop
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	40010000 	.word	0x40010000
 800a834:	40000400 	.word	0x40000400
 800a838:	40000800 	.word	0x40000800
 800a83c:	40000c00 	.word	0x40000c00
 800a840:	40010400 	.word	0x40010400
 800a844:	40014000 	.word	0x40014000
 800a848:	40014400 	.word	0x40014400
 800a84c:	40014800 	.word	0x40014800

0800a850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a850:	b480      	push	{r7}
 800a852:	b087      	sub	sp, #28
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	f023 0201 	bic.w	r2, r3, #1
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	4b37      	ldr	r3, [pc, #220]	; (800a958 <TIM_OC1_SetConfig+0x108>)
 800a87c:	4013      	ands	r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 0303 	bic.w	r3, r3, #3
 800a886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f023 0302 	bic.w	r3, r3, #2
 800a898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a2d      	ldr	r2, [pc, #180]	; (800a95c <TIM_OC1_SetConfig+0x10c>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d00f      	beq.n	800a8cc <TIM_OC1_SetConfig+0x7c>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a2c      	ldr	r2, [pc, #176]	; (800a960 <TIM_OC1_SetConfig+0x110>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00b      	beq.n	800a8cc <TIM_OC1_SetConfig+0x7c>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a2b      	ldr	r2, [pc, #172]	; (800a964 <TIM_OC1_SetConfig+0x114>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d007      	beq.n	800a8cc <TIM_OC1_SetConfig+0x7c>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a2a      	ldr	r2, [pc, #168]	; (800a968 <TIM_OC1_SetConfig+0x118>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d003      	beq.n	800a8cc <TIM_OC1_SetConfig+0x7c>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a29      	ldr	r2, [pc, #164]	; (800a96c <TIM_OC1_SetConfig+0x11c>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d10c      	bne.n	800a8e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	f023 0308 	bic.w	r3, r3, #8
 800a8d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f023 0304 	bic.w	r3, r3, #4
 800a8e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a1c      	ldr	r2, [pc, #112]	; (800a95c <TIM_OC1_SetConfig+0x10c>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d00f      	beq.n	800a90e <TIM_OC1_SetConfig+0xbe>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a1b      	ldr	r2, [pc, #108]	; (800a960 <TIM_OC1_SetConfig+0x110>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d00b      	beq.n	800a90e <TIM_OC1_SetConfig+0xbe>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a1a      	ldr	r2, [pc, #104]	; (800a964 <TIM_OC1_SetConfig+0x114>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d007      	beq.n	800a90e <TIM_OC1_SetConfig+0xbe>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a19      	ldr	r2, [pc, #100]	; (800a968 <TIM_OC1_SetConfig+0x118>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d003      	beq.n	800a90e <TIM_OC1_SetConfig+0xbe>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a18      	ldr	r2, [pc, #96]	; (800a96c <TIM_OC1_SetConfig+0x11c>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d111      	bne.n	800a932 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a91c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	4313      	orrs	r3, r2
 800a926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	4313      	orrs	r3, r2
 800a930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	621a      	str	r2, [r3, #32]
}
 800a94c:	bf00      	nop
 800a94e:	371c      	adds	r7, #28
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	fffeff8f 	.word	0xfffeff8f
 800a95c:	40010000 	.word	0x40010000
 800a960:	40010400 	.word	0x40010400
 800a964:	40014000 	.word	0x40014000
 800a968:	40014400 	.word	0x40014400
 800a96c:	40014800 	.word	0x40014800

0800a970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a970:	b480      	push	{r7}
 800a972:	b087      	sub	sp, #28
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	f023 0210 	bic.w	r2, r3, #16
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	4b34      	ldr	r3, [pc, #208]	; (800aa6c <TIM_OC2_SetConfig+0xfc>)
 800a99c:	4013      	ands	r3, r2
 800a99e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	021b      	lsls	r3, r3, #8
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f023 0320 	bic.w	r3, r3, #32
 800a9ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	011b      	lsls	r3, r3, #4
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a29      	ldr	r2, [pc, #164]	; (800aa70 <TIM_OC2_SetConfig+0x100>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d003      	beq.n	800a9d8 <TIM_OC2_SetConfig+0x68>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a28      	ldr	r2, [pc, #160]	; (800aa74 <TIM_OC2_SetConfig+0x104>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d10d      	bne.n	800a9f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	011b      	lsls	r3, r3, #4
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a1e      	ldr	r2, [pc, #120]	; (800aa70 <TIM_OC2_SetConfig+0x100>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d00f      	beq.n	800aa1c <TIM_OC2_SetConfig+0xac>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a1d      	ldr	r2, [pc, #116]	; (800aa74 <TIM_OC2_SetConfig+0x104>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d00b      	beq.n	800aa1c <TIM_OC2_SetConfig+0xac>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a1c      	ldr	r2, [pc, #112]	; (800aa78 <TIM_OC2_SetConfig+0x108>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d007      	beq.n	800aa1c <TIM_OC2_SetConfig+0xac>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a1b      	ldr	r2, [pc, #108]	; (800aa7c <TIM_OC2_SetConfig+0x10c>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d003      	beq.n	800aa1c <TIM_OC2_SetConfig+0xac>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a1a      	ldr	r2, [pc, #104]	; (800aa80 <TIM_OC2_SetConfig+0x110>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d113      	bne.n	800aa44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	621a      	str	r2, [r3, #32]
}
 800aa5e:	bf00      	nop
 800aa60:	371c      	adds	r7, #28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	feff8fff 	.word	0xfeff8fff
 800aa70:	40010000 	.word	0x40010000
 800aa74:	40010400 	.word	0x40010400
 800aa78:	40014000 	.word	0x40014000
 800aa7c:	40014400 	.word	0x40014400
 800aa80:	40014800 	.word	0x40014800

0800aa84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a1b      	ldr	r3, [r3, #32]
 800aa9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0303 	bic.w	r3, r3, #3
 800aaba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aacc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	021b      	lsls	r3, r3, #8
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a27      	ldr	r2, [pc, #156]	; (800ab7c <TIM_OC3_SetConfig+0xf8>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d003      	beq.n	800aaea <TIM_OC3_SetConfig+0x66>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a26      	ldr	r2, [pc, #152]	; (800ab80 <TIM_OC3_SetConfig+0xfc>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d10d      	bne.n	800ab06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	021b      	lsls	r3, r3, #8
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a1c      	ldr	r2, [pc, #112]	; (800ab7c <TIM_OC3_SetConfig+0xf8>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d00f      	beq.n	800ab2e <TIM_OC3_SetConfig+0xaa>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a1b      	ldr	r2, [pc, #108]	; (800ab80 <TIM_OC3_SetConfig+0xfc>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d00b      	beq.n	800ab2e <TIM_OC3_SetConfig+0xaa>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a1a      	ldr	r2, [pc, #104]	; (800ab84 <TIM_OC3_SetConfig+0x100>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d007      	beq.n	800ab2e <TIM_OC3_SetConfig+0xaa>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a19      	ldr	r2, [pc, #100]	; (800ab88 <TIM_OC3_SetConfig+0x104>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d003      	beq.n	800ab2e <TIM_OC3_SetConfig+0xaa>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a18      	ldr	r2, [pc, #96]	; (800ab8c <TIM_OC3_SetConfig+0x108>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d113      	bne.n	800ab56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	011b      	lsls	r3, r3, #4
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	011b      	lsls	r3, r3, #4
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	621a      	str	r2, [r3, #32]
}
 800ab70:	bf00      	nop
 800ab72:	371c      	adds	r7, #28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	40010000 	.word	0x40010000
 800ab80:	40010400 	.word	0x40010400
 800ab84:	40014000 	.word	0x40014000
 800ab88:	40014400 	.word	0x40014400
 800ab8c:	40014800 	.word	0x40014800

0800ab90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	021b      	lsls	r3, r3, #8
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	031b      	lsls	r3, r3, #12
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a18      	ldr	r2, [pc, #96]	; (800ac4c <TIM_OC4_SetConfig+0xbc>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d00f      	beq.n	800ac10 <TIM_OC4_SetConfig+0x80>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a17      	ldr	r2, [pc, #92]	; (800ac50 <TIM_OC4_SetConfig+0xc0>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d00b      	beq.n	800ac10 <TIM_OC4_SetConfig+0x80>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a16      	ldr	r2, [pc, #88]	; (800ac54 <TIM_OC4_SetConfig+0xc4>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d007      	beq.n	800ac10 <TIM_OC4_SetConfig+0x80>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a15      	ldr	r2, [pc, #84]	; (800ac58 <TIM_OC4_SetConfig+0xc8>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d003      	beq.n	800ac10 <TIM_OC4_SetConfig+0x80>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	4a14      	ldr	r2, [pc, #80]	; (800ac5c <TIM_OC4_SetConfig+0xcc>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d109      	bne.n	800ac24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	019b      	lsls	r3, r3, #6
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	621a      	str	r2, [r3, #32]
}
 800ac3e:	bf00      	nop
 800ac40:	371c      	adds	r7, #28
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	40010000 	.word	0x40010000
 800ac50:	40010400 	.word	0x40010400
 800ac54:	40014000 	.word	0x40014000
 800ac58:	40014400 	.word	0x40014400
 800ac5c:	40014800 	.word	0x40014800

0800ac60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b087      	sub	sp, #28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	041b      	lsls	r3, r3, #16
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	4313      	orrs	r3, r2
 800acac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a17      	ldr	r2, [pc, #92]	; (800ad10 <TIM_OC5_SetConfig+0xb0>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d00f      	beq.n	800acd6 <TIM_OC5_SetConfig+0x76>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a16      	ldr	r2, [pc, #88]	; (800ad14 <TIM_OC5_SetConfig+0xb4>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d00b      	beq.n	800acd6 <TIM_OC5_SetConfig+0x76>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a15      	ldr	r2, [pc, #84]	; (800ad18 <TIM_OC5_SetConfig+0xb8>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d007      	beq.n	800acd6 <TIM_OC5_SetConfig+0x76>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a14      	ldr	r2, [pc, #80]	; (800ad1c <TIM_OC5_SetConfig+0xbc>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d003      	beq.n	800acd6 <TIM_OC5_SetConfig+0x76>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a13      	ldr	r2, [pc, #76]	; (800ad20 <TIM_OC5_SetConfig+0xc0>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d109      	bne.n	800acea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	021b      	lsls	r3, r3, #8
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	685a      	ldr	r2, [r3, #4]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	621a      	str	r2, [r3, #32]
}
 800ad04:	bf00      	nop
 800ad06:	371c      	adds	r7, #28
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	40010000 	.word	0x40010000
 800ad14:	40010400 	.word	0x40010400
 800ad18:	40014000 	.word	0x40014000
 800ad1c:	40014400 	.word	0x40014400
 800ad20:	40014800 	.word	0x40014800

0800ad24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	021b      	lsls	r3, r3, #8
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	051b      	lsls	r3, r3, #20
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a18      	ldr	r2, [pc, #96]	; (800add8 <TIM_OC6_SetConfig+0xb4>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d00f      	beq.n	800ad9c <TIM_OC6_SetConfig+0x78>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a17      	ldr	r2, [pc, #92]	; (800addc <TIM_OC6_SetConfig+0xb8>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d00b      	beq.n	800ad9c <TIM_OC6_SetConfig+0x78>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a16      	ldr	r2, [pc, #88]	; (800ade0 <TIM_OC6_SetConfig+0xbc>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d007      	beq.n	800ad9c <TIM_OC6_SetConfig+0x78>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a15      	ldr	r2, [pc, #84]	; (800ade4 <TIM_OC6_SetConfig+0xc0>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d003      	beq.n	800ad9c <TIM_OC6_SetConfig+0x78>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a14      	ldr	r2, [pc, #80]	; (800ade8 <TIM_OC6_SetConfig+0xc4>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d109      	bne.n	800adb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ada2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	029b      	lsls	r3, r3, #10
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	4313      	orrs	r3, r2
 800adae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	621a      	str	r2, [r3, #32]
}
 800adca:	bf00      	nop
 800adcc:	371c      	adds	r7, #28
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	40010000 	.word	0x40010000
 800addc:	40010400 	.word	0x40010400
 800ade0:	40014000 	.word	0x40014000
 800ade4:	40014400 	.word	0x40014400
 800ade8:	40014800 	.word	0x40014800

0800adec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adec:	b480      	push	{r7}
 800adee:	b087      	sub	sp, #28
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6a1b      	ldr	r3, [r3, #32]
 800adfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	f023 0201 	bic.w	r2, r3, #1
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	011b      	lsls	r3, r3, #4
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f023 030a 	bic.w	r3, r3, #10
 800ae28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	693a      	ldr	r2, [r7, #16]
 800ae36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	621a      	str	r2, [r3, #32]
}
 800ae3e:	bf00      	nop
 800ae40:	371c      	adds	r7, #28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b087      	sub	sp, #28
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	f023 0210 	bic.w	r2, r3, #16
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	699b      	ldr	r3, [r3, #24]
 800ae66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	031b      	lsls	r3, r3, #12
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	011b      	lsls	r3, r3, #4
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	697a      	ldr	r2, [r7, #20]
 800ae96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	621a      	str	r2, [r3, #32]
}
 800ae9e:	bf00      	nop
 800aea0:	371c      	adds	r7, #28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
	...

0800aeac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <TIM_ITRx_SetConfig+0x38>)
 800aec0:	4013      	ands	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	f043 0307 	orr.w	r3, r3, #7
 800aece:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	609a      	str	r2, [r3, #8]
}
 800aed6:	bf00      	nop
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	ffcfff8f 	.word	0xffcfff8f

0800aee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
 800aef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	021a      	lsls	r2, r3, #8
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	431a      	orrs	r2, r3
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	4313      	orrs	r3, r2
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	4313      	orrs	r3, r2
 800af14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	609a      	str	r2, [r3, #8]
}
 800af1c:	bf00      	nop
 800af1e:	371c      	adds	r7, #28
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af28:	b480      	push	{r7}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	f003 031f 	and.w	r3, r3, #31
 800af3a:	2201      	movs	r2, #1
 800af3c:	fa02 f303 	lsl.w	r3, r2, r3
 800af40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6a1a      	ldr	r2, [r3, #32]
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	43db      	mvns	r3, r3
 800af4a:	401a      	ands	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6a1a      	ldr	r2, [r3, #32]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f003 031f 	and.w	r3, r3, #31
 800af5a:	6879      	ldr	r1, [r7, #4]
 800af5c:	fa01 f303 	lsl.w	r3, r1, r3
 800af60:	431a      	orrs	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	621a      	str	r2, [r3, #32]
}
 800af66:	bf00      	nop
 800af68:	371c      	adds	r7, #28
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
	...

0800af74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af84:	2b01      	cmp	r3, #1
 800af86:	d101      	bne.n	800af8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af88:	2302      	movs	r3, #2
 800af8a:	e068      	b.n	800b05e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2202      	movs	r2, #2
 800af98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a2e      	ldr	r2, [pc, #184]	; (800b06c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d004      	beq.n	800afc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a2d      	ldr	r2, [pc, #180]	; (800b070 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d108      	bne.n	800afd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	4313      	orrs	r3, r2
 800afd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a1e      	ldr	r2, [pc, #120]	; (800b06c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d01d      	beq.n	800b032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800affe:	d018      	beq.n	800b032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a1b      	ldr	r2, [pc, #108]	; (800b074 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d013      	beq.n	800b032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a1a      	ldr	r2, [pc, #104]	; (800b078 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d00e      	beq.n	800b032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a18      	ldr	r2, [pc, #96]	; (800b07c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d009      	beq.n	800b032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a13      	ldr	r2, [pc, #76]	; (800b070 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d004      	beq.n	800b032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a14      	ldr	r2, [pc, #80]	; (800b080 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d10c      	bne.n	800b04c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	4313      	orrs	r3, r2
 800b042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	40010000 	.word	0x40010000
 800b070:	40010400 	.word	0x40010400
 800b074:	40000400 	.word	0x40000400
 800b078:	40000800 	.word	0x40000800
 800b07c:	40000c00 	.word	0x40000c00
 800b080:	40001800 	.word	0x40001800

0800b084 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b08e:	2300      	movs	r3, #0
 800b090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d101      	bne.n	800b0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e065      	b.n	800b16c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	695b      	ldr	r3, [r3, #20]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b106:	4313      	orrs	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	041b      	lsls	r3, r3, #16
 800b116:	4313      	orrs	r3, r2
 800b118:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a16      	ldr	r2, [pc, #88]	; (800b178 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d004      	beq.n	800b12e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a14      	ldr	r2, [pc, #80]	; (800b17c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d115      	bne.n	800b15a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	051b      	lsls	r3, r3, #20
 800b13a:	4313      	orrs	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	69db      	ldr	r3, [r3, #28]
 800b148:	4313      	orrs	r3, r2
 800b14a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	4313      	orrs	r3, r2
 800b158:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	40010000 	.word	0x40010000
 800b17c:	40010400 	.word	0x40010400

0800b180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d101      	bne.n	800b192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e042      	b.n	800b218 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d106      	bne.n	800b1aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7f6 fd4d 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2224      	movs	r2, #36	; 0x24
 800b1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f022 0201 	bic.w	r2, r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fb06 	bl	800b7d4 <UART_SetConfig>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d101      	bne.n	800b1d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e022      	b.n	800b218 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d002      	beq.n	800b1e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f001 f85a 	bl	800c294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	685a      	ldr	r2, [r3, #4]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689a      	ldr	r2, [r3, #8]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f042 0201 	orr.w	r2, r2, #1
 800b20e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f001 f8e1 	bl	800c3d8 <UART_CheckIdleState>
 800b216:	4603      	mov	r3, r0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b088      	sub	sp, #32
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	f640 030f 	movw	r3, #2063	; 0x80f
 800b246:	4013      	ands	r3, r2
 800b248:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d118      	bne.n	800b282 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	f003 0320 	and.w	r3, r3, #32
 800b256:	2b00      	cmp	r3, #0
 800b258:	d013      	beq.n	800b282 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	f003 0320 	and.w	r3, r3, #32
 800b260:	2b00      	cmp	r3, #0
 800b262:	d104      	bne.n	800b26e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d009      	beq.n	800b282 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8282 	beq.w	800b77c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	4798      	blx	r3
      }
      return;
 800b280:	e27c      	b.n	800b77c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 80ef 	beq.w	800b468 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	4b73      	ldr	r3, [pc, #460]	; (800b45c <HAL_UART_IRQHandler+0x23c>)
 800b28e:	4013      	ands	r3, r2
 800b290:	2b00      	cmp	r3, #0
 800b292:	d105      	bne.n	800b2a0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	4b72      	ldr	r3, [pc, #456]	; (800b460 <HAL_UART_IRQHandler+0x240>)
 800b298:	4013      	ands	r3, r2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 80e4 	beq.w	800b468 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d010      	beq.n	800b2cc <HAL_UART_IRQHandler+0xac>
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00b      	beq.n	800b2cc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2c2:	f043 0201 	orr.w	r2, r3, #1
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d010      	beq.n	800b2f8 <HAL_UART_IRQHandler+0xd8>
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00b      	beq.n	800b2f8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2202      	movs	r2, #2
 800b2e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2ee:	f043 0204 	orr.w	r2, r3, #4
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	f003 0304 	and.w	r3, r3, #4
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d010      	beq.n	800b324 <HAL_UART_IRQHandler+0x104>
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00b      	beq.n	800b324 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2204      	movs	r2, #4
 800b312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b31a:	f043 0202 	orr.w	r2, r3, #2
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	f003 0308 	and.w	r3, r3, #8
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d015      	beq.n	800b35a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	f003 0320 	and.w	r3, r3, #32
 800b334:	2b00      	cmp	r3, #0
 800b336:	d104      	bne.n	800b342 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	4b48      	ldr	r3, [pc, #288]	; (800b45c <HAL_UART_IRQHandler+0x23c>)
 800b33c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00b      	beq.n	800b35a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2208      	movs	r2, #8
 800b348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b350:	f043 0208 	orr.w	r2, r3, #8
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b360:	2b00      	cmp	r3, #0
 800b362:	d011      	beq.n	800b388 <HAL_UART_IRQHandler+0x168>
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00c      	beq.n	800b388 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b37e:	f043 0220 	orr.w	r2, r3, #32
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f000 81f6 	beq.w	800b780 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	f003 0320 	and.w	r3, r3, #32
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d011      	beq.n	800b3c2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	f003 0320 	and.w	r3, r3, #32
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d104      	bne.n	800b3b2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d007      	beq.n	800b3c2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d4:	2b40      	cmp	r3, #64	; 0x40
 800b3d6:	d004      	beq.n	800b3e2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d031      	beq.n	800b446 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 f8c4 	bl	800c570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f2:	2b40      	cmp	r3, #64	; 0x40
 800b3f4:	d123      	bne.n	800b43e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b404:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d013      	beq.n	800b436 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b412:	4a14      	ldr	r2, [pc, #80]	; (800b464 <HAL_UART_IRQHandler+0x244>)
 800b414:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7f8 f8dc 	bl	80035d8 <HAL_DMA_Abort_IT>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d017      	beq.n	800b456 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b430:	4610      	mov	r0, r2
 800b432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b434:	e00f      	b.n	800b456 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f9b6 	bl	800b7a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b43c:	e00b      	b.n	800b456 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f9b2 	bl	800b7a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b444:	e007      	b.n	800b456 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f9ae 	bl	800b7a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b454:	e194      	b.n	800b780 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b456:	bf00      	nop
    return;
 800b458:	e192      	b.n	800b780 <HAL_UART_IRQHandler+0x560>
 800b45a:	bf00      	nop
 800b45c:	10000001 	.word	0x10000001
 800b460:	04000120 	.word	0x04000120
 800b464:	0800c5d5 	.word	0x0800c5d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	f040 810f 	bne.w	800b690 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	f003 0310 	and.w	r3, r3, #16
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f000 8109 	beq.w	800b690 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	f003 0310 	and.w	r3, r3, #16
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 8103 	beq.w	800b690 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2210      	movs	r2, #16
 800b490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b49c:	2b40      	cmp	r3, #64	; 0x40
 800b49e:	f040 80bb 	bne.w	800b618 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a96      	ldr	r2, [pc, #600]	; (800b704 <HAL_UART_IRQHandler+0x4e4>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d059      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a94      	ldr	r2, [pc, #592]	; (800b708 <HAL_UART_IRQHandler+0x4e8>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d053      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a92      	ldr	r2, [pc, #584]	; (800b70c <HAL_UART_IRQHandler+0x4ec>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d04d      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a90      	ldr	r2, [pc, #576]	; (800b710 <HAL_UART_IRQHandler+0x4f0>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d047      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a8e      	ldr	r2, [pc, #568]	; (800b714 <HAL_UART_IRQHandler+0x4f4>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d041      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a8c      	ldr	r2, [pc, #560]	; (800b718 <HAL_UART_IRQHandler+0x4f8>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d03b      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a8a      	ldr	r2, [pc, #552]	; (800b71c <HAL_UART_IRQHandler+0x4fc>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d035      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a88      	ldr	r2, [pc, #544]	; (800b720 <HAL_UART_IRQHandler+0x500>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d02f      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a86      	ldr	r2, [pc, #536]	; (800b724 <HAL_UART_IRQHandler+0x504>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d029      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a84      	ldr	r2, [pc, #528]	; (800b728 <HAL_UART_IRQHandler+0x508>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d023      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a82      	ldr	r2, [pc, #520]	; (800b72c <HAL_UART_IRQHandler+0x50c>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d01d      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a80      	ldr	r2, [pc, #512]	; (800b730 <HAL_UART_IRQHandler+0x510>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d017      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a7e      	ldr	r2, [pc, #504]	; (800b734 <HAL_UART_IRQHandler+0x514>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d011      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a7c      	ldr	r2, [pc, #496]	; (800b738 <HAL_UART_IRQHandler+0x518>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d00b      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a7a      	ldr	r2, [pc, #488]	; (800b73c <HAL_UART_IRQHandler+0x51c>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d005      	beq.n	800b562 <HAL_UART_IRQHandler+0x342>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a78      	ldr	r2, [pc, #480]	; (800b740 <HAL_UART_IRQHandler+0x520>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d105      	bne.n	800b56e <HAL_UART_IRQHandler+0x34e>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	e004      	b.n	800b578 <HAL_UART_IRQHandler+0x358>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	b29b      	uxth	r3, r3
 800b578:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b57a:	893b      	ldrh	r3, [r7, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f000 8101 	beq.w	800b784 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b588:	893a      	ldrh	r2, [r7, #8]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	f080 80fa 	bcs.w	800b784 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	893a      	ldrh	r2, [r7, #8]
 800b594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a2:	d02b      	beq.n	800b5fc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	689a      	ldr	r2, [r3, #8]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f022 0201 	bic.w	r2, r2, #1
 800b5c2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5d2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f022 0210 	bic.w	r2, r2, #16
 800b5f0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7f7 fcd0 	bl	8002f9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b608:	b29b      	uxth	r3, r3
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	4619      	mov	r1, r3
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f8d3 	bl	800b7bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b616:	e0b5      	b.n	800b784 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b624:	b29b      	uxth	r3, r3
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b630:	b29b      	uxth	r3, r3
 800b632:	2b00      	cmp	r3, #0
 800b634:	f000 80a8 	beq.w	800b788 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b638:	897b      	ldrh	r3, [r7, #10]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f000 80a4 	beq.w	800b788 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b64e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6899      	ldr	r1, [r3, #8]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	4b3a      	ldr	r3, [pc, #232]	; (800b744 <HAL_UART_IRQHandler+0x524>)
 800b65c:	400b      	ands	r3, r1
 800b65e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2220      	movs	r2, #32
 800b664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f022 0210 	bic.w	r2, r2, #16
 800b682:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b684:	897b      	ldrh	r3, [r7, #10]
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f897 	bl	800b7bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b68e:	e07b      	b.n	800b788 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00d      	beq.n	800b6b6 <HAL_UART_IRQHandler+0x496>
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d008      	beq.n	800b6b6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b6ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 ffc0 	bl	800c634 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6b4:	e06b      	b.n	800b78e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d012      	beq.n	800b6e6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d104      	bne.n	800b6d4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d008      	beq.n	800b6e6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d057      	beq.n	800b78c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	4798      	blx	r3
    }
    return;
 800b6e4:	e052      	b.n	800b78c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d02b      	beq.n	800b748 <HAL_UART_IRQHandler+0x528>
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d026      	beq.n	800b748 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 ff80 	bl	800c600 <UART_EndTransmit_IT>
    return;
 800b700:	e045      	b.n	800b78e <HAL_UART_IRQHandler+0x56e>
 800b702:	bf00      	nop
 800b704:	40020010 	.word	0x40020010
 800b708:	40020028 	.word	0x40020028
 800b70c:	40020040 	.word	0x40020040
 800b710:	40020058 	.word	0x40020058
 800b714:	40020070 	.word	0x40020070
 800b718:	40020088 	.word	0x40020088
 800b71c:	400200a0 	.word	0x400200a0
 800b720:	400200b8 	.word	0x400200b8
 800b724:	40020410 	.word	0x40020410
 800b728:	40020428 	.word	0x40020428
 800b72c:	40020440 	.word	0x40020440
 800b730:	40020458 	.word	0x40020458
 800b734:	40020470 	.word	0x40020470
 800b738:	40020488 	.word	0x40020488
 800b73c:	400204a0 	.word	0x400204a0
 800b740:	400204b8 	.word	0x400204b8
 800b744:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d008      	beq.n	800b764 <HAL_UART_IRQHandler+0x544>
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d003      	beq.n	800b764 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 ff7d 	bl	800c65c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b762:	e014      	b.n	800b78e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00f      	beq.n	800b78e <HAL_UART_IRQHandler+0x56e>
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	2b00      	cmp	r3, #0
 800b772:	da0c      	bge.n	800b78e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 ff67 	bl	800c648 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b77a:	e008      	b.n	800b78e <HAL_UART_IRQHandler+0x56e>
      return;
 800b77c:	bf00      	nop
 800b77e:	e006      	b.n	800b78e <HAL_UART_IRQHandler+0x56e>
    return;
 800b780:	bf00      	nop
 800b782:	e004      	b.n	800b78e <HAL_UART_IRQHandler+0x56e>
      return;
 800b784:	bf00      	nop
 800b786:	e002      	b.n	800b78e <HAL_UART_IRQHandler+0x56e>
      return;
 800b788:	bf00      	nop
 800b78a:	e000      	b.n	800b78e <HAL_UART_IRQHandler+0x56e>
    return;
 800b78c:	bf00      	nop
  }
}
 800b78e:	3720      	adds	r7, #32
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7d4:	b5b0      	push	{r4, r5, r7, lr}
 800b7d6:	b08e      	sub	sp, #56	; 0x38
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	689a      	ldr	r2, [r3, #8]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	431a      	orrs	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	695b      	ldr	r3, [r3, #20]
 800b7f0:	431a      	orrs	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	69db      	ldr	r3, [r3, #28]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	4bbf      	ldr	r3, [pc, #764]	; (800bb00 <UART_SetConfig+0x32c>)
 800b802:	4013      	ands	r3, r2
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	6812      	ldr	r2, [r2, #0]
 800b808:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b80a:	430b      	orrs	r3, r1
 800b80c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4ab5      	ldr	r2, [pc, #724]	; (800bb04 <UART_SetConfig+0x330>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d004      	beq.n	800b83e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a1b      	ldr	r3, [r3, #32]
 800b838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b83a:	4313      	orrs	r3, r2
 800b83c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	689a      	ldr	r2, [r3, #8]
 800b844:	4bb0      	ldr	r3, [pc, #704]	; (800bb08 <UART_SetConfig+0x334>)
 800b846:	4013      	ands	r3, r2
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b84e:	430b      	orrs	r3, r1
 800b850:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	f023 010f 	bic.w	r1, r3, #15
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	430a      	orrs	r2, r1
 800b866:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4aa7      	ldr	r2, [pc, #668]	; (800bb0c <UART_SetConfig+0x338>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d176      	bne.n	800b960 <UART_SetConfig+0x18c>
 800b872:	4ba7      	ldr	r3, [pc, #668]	; (800bb10 <UART_SetConfig+0x33c>)
 800b874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b87a:	2b28      	cmp	r3, #40	; 0x28
 800b87c:	d86c      	bhi.n	800b958 <UART_SetConfig+0x184>
 800b87e:	a201      	add	r2, pc, #4	; (adr r2, 800b884 <UART_SetConfig+0xb0>)
 800b880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b884:	0800b929 	.word	0x0800b929
 800b888:	0800b959 	.word	0x0800b959
 800b88c:	0800b959 	.word	0x0800b959
 800b890:	0800b959 	.word	0x0800b959
 800b894:	0800b959 	.word	0x0800b959
 800b898:	0800b959 	.word	0x0800b959
 800b89c:	0800b959 	.word	0x0800b959
 800b8a0:	0800b959 	.word	0x0800b959
 800b8a4:	0800b931 	.word	0x0800b931
 800b8a8:	0800b959 	.word	0x0800b959
 800b8ac:	0800b959 	.word	0x0800b959
 800b8b0:	0800b959 	.word	0x0800b959
 800b8b4:	0800b959 	.word	0x0800b959
 800b8b8:	0800b959 	.word	0x0800b959
 800b8bc:	0800b959 	.word	0x0800b959
 800b8c0:	0800b959 	.word	0x0800b959
 800b8c4:	0800b939 	.word	0x0800b939
 800b8c8:	0800b959 	.word	0x0800b959
 800b8cc:	0800b959 	.word	0x0800b959
 800b8d0:	0800b959 	.word	0x0800b959
 800b8d4:	0800b959 	.word	0x0800b959
 800b8d8:	0800b959 	.word	0x0800b959
 800b8dc:	0800b959 	.word	0x0800b959
 800b8e0:	0800b959 	.word	0x0800b959
 800b8e4:	0800b941 	.word	0x0800b941
 800b8e8:	0800b959 	.word	0x0800b959
 800b8ec:	0800b959 	.word	0x0800b959
 800b8f0:	0800b959 	.word	0x0800b959
 800b8f4:	0800b959 	.word	0x0800b959
 800b8f8:	0800b959 	.word	0x0800b959
 800b8fc:	0800b959 	.word	0x0800b959
 800b900:	0800b959 	.word	0x0800b959
 800b904:	0800b949 	.word	0x0800b949
 800b908:	0800b959 	.word	0x0800b959
 800b90c:	0800b959 	.word	0x0800b959
 800b910:	0800b959 	.word	0x0800b959
 800b914:	0800b959 	.word	0x0800b959
 800b918:	0800b959 	.word	0x0800b959
 800b91c:	0800b959 	.word	0x0800b959
 800b920:	0800b959 	.word	0x0800b959
 800b924:	0800b951 	.word	0x0800b951
 800b928:	2301      	movs	r3, #1
 800b92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b92e:	e222      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b930:	2304      	movs	r3, #4
 800b932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b936:	e21e      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b938:	2308      	movs	r3, #8
 800b93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b93e:	e21a      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b940:	2310      	movs	r3, #16
 800b942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b946:	e216      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b948:	2320      	movs	r3, #32
 800b94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b94e:	e212      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b950:	2340      	movs	r3, #64	; 0x40
 800b952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b956:	e20e      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b958:	2380      	movs	r3, #128	; 0x80
 800b95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b95e:	e20a      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a6b      	ldr	r2, [pc, #428]	; (800bb14 <UART_SetConfig+0x340>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d130      	bne.n	800b9cc <UART_SetConfig+0x1f8>
 800b96a:	4b69      	ldr	r3, [pc, #420]	; (800bb10 <UART_SetConfig+0x33c>)
 800b96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b96e:	f003 0307 	and.w	r3, r3, #7
 800b972:	2b05      	cmp	r3, #5
 800b974:	d826      	bhi.n	800b9c4 <UART_SetConfig+0x1f0>
 800b976:	a201      	add	r2, pc, #4	; (adr r2, 800b97c <UART_SetConfig+0x1a8>)
 800b978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b97c:	0800b995 	.word	0x0800b995
 800b980:	0800b99d 	.word	0x0800b99d
 800b984:	0800b9a5 	.word	0x0800b9a5
 800b988:	0800b9ad 	.word	0x0800b9ad
 800b98c:	0800b9b5 	.word	0x0800b9b5
 800b990:	0800b9bd 	.word	0x0800b9bd
 800b994:	2300      	movs	r3, #0
 800b996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b99a:	e1ec      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b99c:	2304      	movs	r3, #4
 800b99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9a2:	e1e8      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b9a4:	2308      	movs	r3, #8
 800b9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9aa:	e1e4      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b9ac:	2310      	movs	r3, #16
 800b9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9b2:	e1e0      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b9b4:	2320      	movs	r3, #32
 800b9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ba:	e1dc      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b9bc:	2340      	movs	r3, #64	; 0x40
 800b9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9c2:	e1d8      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b9c4:	2380      	movs	r3, #128	; 0x80
 800b9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ca:	e1d4      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a51      	ldr	r2, [pc, #324]	; (800bb18 <UART_SetConfig+0x344>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d130      	bne.n	800ba38 <UART_SetConfig+0x264>
 800b9d6:	4b4e      	ldr	r3, [pc, #312]	; (800bb10 <UART_SetConfig+0x33c>)
 800b9d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9da:	f003 0307 	and.w	r3, r3, #7
 800b9de:	2b05      	cmp	r3, #5
 800b9e0:	d826      	bhi.n	800ba30 <UART_SetConfig+0x25c>
 800b9e2:	a201      	add	r2, pc, #4	; (adr r2, 800b9e8 <UART_SetConfig+0x214>)
 800b9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e8:	0800ba01 	.word	0x0800ba01
 800b9ec:	0800ba09 	.word	0x0800ba09
 800b9f0:	0800ba11 	.word	0x0800ba11
 800b9f4:	0800ba19 	.word	0x0800ba19
 800b9f8:	0800ba21 	.word	0x0800ba21
 800b9fc:	0800ba29 	.word	0x0800ba29
 800ba00:	2300      	movs	r3, #0
 800ba02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba06:	e1b6      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba08:	2304      	movs	r3, #4
 800ba0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba0e:	e1b2      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba10:	2308      	movs	r3, #8
 800ba12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba16:	e1ae      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba18:	2310      	movs	r3, #16
 800ba1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba1e:	e1aa      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba20:	2320      	movs	r3, #32
 800ba22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba26:	e1a6      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba28:	2340      	movs	r3, #64	; 0x40
 800ba2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba2e:	e1a2      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba30:	2380      	movs	r3, #128	; 0x80
 800ba32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba36:	e19e      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a37      	ldr	r2, [pc, #220]	; (800bb1c <UART_SetConfig+0x348>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d130      	bne.n	800baa4 <UART_SetConfig+0x2d0>
 800ba42:	4b33      	ldr	r3, [pc, #204]	; (800bb10 <UART_SetConfig+0x33c>)
 800ba44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba46:	f003 0307 	and.w	r3, r3, #7
 800ba4a:	2b05      	cmp	r3, #5
 800ba4c:	d826      	bhi.n	800ba9c <UART_SetConfig+0x2c8>
 800ba4e:	a201      	add	r2, pc, #4	; (adr r2, 800ba54 <UART_SetConfig+0x280>)
 800ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba54:	0800ba6d 	.word	0x0800ba6d
 800ba58:	0800ba75 	.word	0x0800ba75
 800ba5c:	0800ba7d 	.word	0x0800ba7d
 800ba60:	0800ba85 	.word	0x0800ba85
 800ba64:	0800ba8d 	.word	0x0800ba8d
 800ba68:	0800ba95 	.word	0x0800ba95
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba72:	e180      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba74:	2304      	movs	r3, #4
 800ba76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba7a:	e17c      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba7c:	2308      	movs	r3, #8
 800ba7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba82:	e178      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba84:	2310      	movs	r3, #16
 800ba86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba8a:	e174      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba8c:	2320      	movs	r3, #32
 800ba8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba92:	e170      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba94:	2340      	movs	r3, #64	; 0x40
 800ba96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba9a:	e16c      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800ba9c:	2380      	movs	r3, #128	; 0x80
 800ba9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa2:	e168      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a1d      	ldr	r2, [pc, #116]	; (800bb20 <UART_SetConfig+0x34c>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d142      	bne.n	800bb34 <UART_SetConfig+0x360>
 800baae:	4b18      	ldr	r3, [pc, #96]	; (800bb10 <UART_SetConfig+0x33c>)
 800bab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bab2:	f003 0307 	and.w	r3, r3, #7
 800bab6:	2b05      	cmp	r3, #5
 800bab8:	d838      	bhi.n	800bb2c <UART_SetConfig+0x358>
 800baba:	a201      	add	r2, pc, #4	; (adr r2, 800bac0 <UART_SetConfig+0x2ec>)
 800babc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac0:	0800bad9 	.word	0x0800bad9
 800bac4:	0800bae1 	.word	0x0800bae1
 800bac8:	0800bae9 	.word	0x0800bae9
 800bacc:	0800baf1 	.word	0x0800baf1
 800bad0:	0800baf9 	.word	0x0800baf9
 800bad4:	0800bb25 	.word	0x0800bb25
 800bad8:	2300      	movs	r3, #0
 800bada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bade:	e14a      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bae0:	2304      	movs	r3, #4
 800bae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bae6:	e146      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bae8:	2308      	movs	r3, #8
 800baea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baee:	e142      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800baf0:	2310      	movs	r3, #16
 800baf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baf6:	e13e      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800baf8:	2320      	movs	r3, #32
 800bafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bafe:	e13a      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bb00:	cfff69f3 	.word	0xcfff69f3
 800bb04:	58000c00 	.word	0x58000c00
 800bb08:	11fff4ff 	.word	0x11fff4ff
 800bb0c:	40011000 	.word	0x40011000
 800bb10:	58024400 	.word	0x58024400
 800bb14:	40004400 	.word	0x40004400
 800bb18:	40004800 	.word	0x40004800
 800bb1c:	40004c00 	.word	0x40004c00
 800bb20:	40005000 	.word	0x40005000
 800bb24:	2340      	movs	r3, #64	; 0x40
 800bb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb2a:	e124      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bb2c:	2380      	movs	r3, #128	; 0x80
 800bb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb32:	e120      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4acc      	ldr	r2, [pc, #816]	; (800be6c <UART_SetConfig+0x698>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d176      	bne.n	800bc2c <UART_SetConfig+0x458>
 800bb3e:	4bcc      	ldr	r3, [pc, #816]	; (800be70 <UART_SetConfig+0x69c>)
 800bb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb46:	2b28      	cmp	r3, #40	; 0x28
 800bb48:	d86c      	bhi.n	800bc24 <UART_SetConfig+0x450>
 800bb4a:	a201      	add	r2, pc, #4	; (adr r2, 800bb50 <UART_SetConfig+0x37c>)
 800bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb50:	0800bbf5 	.word	0x0800bbf5
 800bb54:	0800bc25 	.word	0x0800bc25
 800bb58:	0800bc25 	.word	0x0800bc25
 800bb5c:	0800bc25 	.word	0x0800bc25
 800bb60:	0800bc25 	.word	0x0800bc25
 800bb64:	0800bc25 	.word	0x0800bc25
 800bb68:	0800bc25 	.word	0x0800bc25
 800bb6c:	0800bc25 	.word	0x0800bc25
 800bb70:	0800bbfd 	.word	0x0800bbfd
 800bb74:	0800bc25 	.word	0x0800bc25
 800bb78:	0800bc25 	.word	0x0800bc25
 800bb7c:	0800bc25 	.word	0x0800bc25
 800bb80:	0800bc25 	.word	0x0800bc25
 800bb84:	0800bc25 	.word	0x0800bc25
 800bb88:	0800bc25 	.word	0x0800bc25
 800bb8c:	0800bc25 	.word	0x0800bc25
 800bb90:	0800bc05 	.word	0x0800bc05
 800bb94:	0800bc25 	.word	0x0800bc25
 800bb98:	0800bc25 	.word	0x0800bc25
 800bb9c:	0800bc25 	.word	0x0800bc25
 800bba0:	0800bc25 	.word	0x0800bc25
 800bba4:	0800bc25 	.word	0x0800bc25
 800bba8:	0800bc25 	.word	0x0800bc25
 800bbac:	0800bc25 	.word	0x0800bc25
 800bbb0:	0800bc0d 	.word	0x0800bc0d
 800bbb4:	0800bc25 	.word	0x0800bc25
 800bbb8:	0800bc25 	.word	0x0800bc25
 800bbbc:	0800bc25 	.word	0x0800bc25
 800bbc0:	0800bc25 	.word	0x0800bc25
 800bbc4:	0800bc25 	.word	0x0800bc25
 800bbc8:	0800bc25 	.word	0x0800bc25
 800bbcc:	0800bc25 	.word	0x0800bc25
 800bbd0:	0800bc15 	.word	0x0800bc15
 800bbd4:	0800bc25 	.word	0x0800bc25
 800bbd8:	0800bc25 	.word	0x0800bc25
 800bbdc:	0800bc25 	.word	0x0800bc25
 800bbe0:	0800bc25 	.word	0x0800bc25
 800bbe4:	0800bc25 	.word	0x0800bc25
 800bbe8:	0800bc25 	.word	0x0800bc25
 800bbec:	0800bc25 	.word	0x0800bc25
 800bbf0:	0800bc1d 	.word	0x0800bc1d
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbfa:	e0bc      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bbfc:	2304      	movs	r3, #4
 800bbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc02:	e0b8      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc04:	2308      	movs	r3, #8
 800bc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc0a:	e0b4      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc0c:	2310      	movs	r3, #16
 800bc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc12:	e0b0      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc14:	2320      	movs	r3, #32
 800bc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc1a:	e0ac      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc1c:	2340      	movs	r3, #64	; 0x40
 800bc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc22:	e0a8      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc24:	2380      	movs	r3, #128	; 0x80
 800bc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc2a:	e0a4      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a90      	ldr	r2, [pc, #576]	; (800be74 <UART_SetConfig+0x6a0>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d130      	bne.n	800bc98 <UART_SetConfig+0x4c4>
 800bc36:	4b8e      	ldr	r3, [pc, #568]	; (800be70 <UART_SetConfig+0x69c>)
 800bc38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3a:	f003 0307 	and.w	r3, r3, #7
 800bc3e:	2b05      	cmp	r3, #5
 800bc40:	d826      	bhi.n	800bc90 <UART_SetConfig+0x4bc>
 800bc42:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <UART_SetConfig+0x474>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc61 	.word	0x0800bc61
 800bc4c:	0800bc69 	.word	0x0800bc69
 800bc50:	0800bc71 	.word	0x0800bc71
 800bc54:	0800bc79 	.word	0x0800bc79
 800bc58:	0800bc81 	.word	0x0800bc81
 800bc5c:	0800bc89 	.word	0x0800bc89
 800bc60:	2300      	movs	r3, #0
 800bc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc66:	e086      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc68:	2304      	movs	r3, #4
 800bc6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc6e:	e082      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc70:	2308      	movs	r3, #8
 800bc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc76:	e07e      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc78:	2310      	movs	r3, #16
 800bc7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc7e:	e07a      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc80:	2320      	movs	r3, #32
 800bc82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc86:	e076      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc88:	2340      	movs	r3, #64	; 0x40
 800bc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc8e:	e072      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc90:	2380      	movs	r3, #128	; 0x80
 800bc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc96:	e06e      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a76      	ldr	r2, [pc, #472]	; (800be78 <UART_SetConfig+0x6a4>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d130      	bne.n	800bd04 <UART_SetConfig+0x530>
 800bca2:	4b73      	ldr	r3, [pc, #460]	; (800be70 <UART_SetConfig+0x69c>)
 800bca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca6:	f003 0307 	and.w	r3, r3, #7
 800bcaa:	2b05      	cmp	r3, #5
 800bcac:	d826      	bhi.n	800bcfc <UART_SetConfig+0x528>
 800bcae:	a201      	add	r2, pc, #4	; (adr r2, 800bcb4 <UART_SetConfig+0x4e0>)
 800bcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb4:	0800bccd 	.word	0x0800bccd
 800bcb8:	0800bcd5 	.word	0x0800bcd5
 800bcbc:	0800bcdd 	.word	0x0800bcdd
 800bcc0:	0800bce5 	.word	0x0800bce5
 800bcc4:	0800bced 	.word	0x0800bced
 800bcc8:	0800bcf5 	.word	0x0800bcf5
 800bccc:	2300      	movs	r3, #0
 800bcce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcd2:	e050      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bcd4:	2304      	movs	r3, #4
 800bcd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcda:	e04c      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bcdc:	2308      	movs	r3, #8
 800bcde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bce2:	e048      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bce4:	2310      	movs	r3, #16
 800bce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcea:	e044      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bcec:	2320      	movs	r3, #32
 800bcee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcf2:	e040      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bcf4:	2340      	movs	r3, #64	; 0x40
 800bcf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfa:	e03c      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bcfc:	2380      	movs	r3, #128	; 0x80
 800bcfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd02:	e038      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a5c      	ldr	r2, [pc, #368]	; (800be7c <UART_SetConfig+0x6a8>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d130      	bne.n	800bd70 <UART_SetConfig+0x59c>
 800bd0e:	4b58      	ldr	r3, [pc, #352]	; (800be70 <UART_SetConfig+0x69c>)
 800bd10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd12:	f003 0307 	and.w	r3, r3, #7
 800bd16:	2b05      	cmp	r3, #5
 800bd18:	d826      	bhi.n	800bd68 <UART_SetConfig+0x594>
 800bd1a:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <UART_SetConfig+0x54c>)
 800bd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd20:	0800bd39 	.word	0x0800bd39
 800bd24:	0800bd41 	.word	0x0800bd41
 800bd28:	0800bd49 	.word	0x0800bd49
 800bd2c:	0800bd51 	.word	0x0800bd51
 800bd30:	0800bd59 	.word	0x0800bd59
 800bd34:	0800bd61 	.word	0x0800bd61
 800bd38:	2302      	movs	r3, #2
 800bd3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd3e:	e01a      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bd40:	2304      	movs	r3, #4
 800bd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd46:	e016      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bd48:	2308      	movs	r3, #8
 800bd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd4e:	e012      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bd50:	2310      	movs	r3, #16
 800bd52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd56:	e00e      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bd58:	2320      	movs	r3, #32
 800bd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd5e:	e00a      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bd60:	2340      	movs	r3, #64	; 0x40
 800bd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd66:	e006      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bd68:	2380      	movs	r3, #128	; 0x80
 800bd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd6e:	e002      	b.n	800bd76 <UART_SetConfig+0x5a2>
 800bd70:	2380      	movs	r3, #128	; 0x80
 800bd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a40      	ldr	r2, [pc, #256]	; (800be7c <UART_SetConfig+0x6a8>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	f040 80ef 	bne.w	800bf60 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd86:	2b20      	cmp	r3, #32
 800bd88:	dc46      	bgt.n	800be18 <UART_SetConfig+0x644>
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	f2c0 8081 	blt.w	800be92 <UART_SetConfig+0x6be>
 800bd90:	3b02      	subs	r3, #2
 800bd92:	2b1e      	cmp	r3, #30
 800bd94:	d87d      	bhi.n	800be92 <UART_SetConfig+0x6be>
 800bd96:	a201      	add	r2, pc, #4	; (adr r2, 800bd9c <UART_SetConfig+0x5c8>)
 800bd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9c:	0800be1f 	.word	0x0800be1f
 800bda0:	0800be93 	.word	0x0800be93
 800bda4:	0800be27 	.word	0x0800be27
 800bda8:	0800be93 	.word	0x0800be93
 800bdac:	0800be93 	.word	0x0800be93
 800bdb0:	0800be93 	.word	0x0800be93
 800bdb4:	0800be37 	.word	0x0800be37
 800bdb8:	0800be93 	.word	0x0800be93
 800bdbc:	0800be93 	.word	0x0800be93
 800bdc0:	0800be93 	.word	0x0800be93
 800bdc4:	0800be93 	.word	0x0800be93
 800bdc8:	0800be93 	.word	0x0800be93
 800bdcc:	0800be93 	.word	0x0800be93
 800bdd0:	0800be93 	.word	0x0800be93
 800bdd4:	0800be47 	.word	0x0800be47
 800bdd8:	0800be93 	.word	0x0800be93
 800bddc:	0800be93 	.word	0x0800be93
 800bde0:	0800be93 	.word	0x0800be93
 800bde4:	0800be93 	.word	0x0800be93
 800bde8:	0800be93 	.word	0x0800be93
 800bdec:	0800be93 	.word	0x0800be93
 800bdf0:	0800be93 	.word	0x0800be93
 800bdf4:	0800be93 	.word	0x0800be93
 800bdf8:	0800be93 	.word	0x0800be93
 800bdfc:	0800be93 	.word	0x0800be93
 800be00:	0800be93 	.word	0x0800be93
 800be04:	0800be93 	.word	0x0800be93
 800be08:	0800be93 	.word	0x0800be93
 800be0c:	0800be93 	.word	0x0800be93
 800be10:	0800be93 	.word	0x0800be93
 800be14:	0800be85 	.word	0x0800be85
 800be18:	2b40      	cmp	r3, #64	; 0x40
 800be1a:	d036      	beq.n	800be8a <UART_SetConfig+0x6b6>
 800be1c:	e039      	b.n	800be92 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be1e:	f7fb ffd9 	bl	8007dd4 <HAL_RCCEx_GetD3PCLK1Freq>
 800be22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800be24:	e03b      	b.n	800be9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be26:	f107 0314 	add.w	r3, r7, #20
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fb ffe8 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be34:	e033      	b.n	800be9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be36:	f107 0308 	add.w	r3, r7, #8
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fc f934 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be44:	e02b      	b.n	800be9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be46:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <UART_SetConfig+0x69c>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 0320 	and.w	r3, r3, #32
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d009      	beq.n	800be66 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be52:	4b07      	ldr	r3, [pc, #28]	; (800be70 <UART_SetConfig+0x69c>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	08db      	lsrs	r3, r3, #3
 800be58:	f003 0303 	and.w	r3, r3, #3
 800be5c:	4a08      	ldr	r2, [pc, #32]	; (800be80 <UART_SetConfig+0x6ac>)
 800be5e:	fa22 f303 	lsr.w	r3, r2, r3
 800be62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be64:	e01b      	b.n	800be9e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800be66:	4b06      	ldr	r3, [pc, #24]	; (800be80 <UART_SetConfig+0x6ac>)
 800be68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be6a:	e018      	b.n	800be9e <UART_SetConfig+0x6ca>
 800be6c:	40011400 	.word	0x40011400
 800be70:	58024400 	.word	0x58024400
 800be74:	40007800 	.word	0x40007800
 800be78:	40007c00 	.word	0x40007c00
 800be7c:	58000c00 	.word	0x58000c00
 800be80:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be84:	4bc4      	ldr	r3, [pc, #784]	; (800c198 <UART_SetConfig+0x9c4>)
 800be86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be88:	e009      	b.n	800be9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be90:	e005      	b.n	800be9e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800be92:	2300      	movs	r3, #0
 800be94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800be9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800be9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 81da 	beq.w	800c25a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beaa:	4abc      	ldr	r2, [pc, #752]	; (800c19c <UART_SetConfig+0x9c8>)
 800beac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beb0:	461a      	mov	r2, r3
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800beb8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	4613      	mov	r3, r2
 800bec0:	005b      	lsls	r3, r3, #1
 800bec2:	4413      	add	r3, r2
 800bec4:	6a3a      	ldr	r2, [r7, #32]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d305      	bcc.n	800bed6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bed0:	6a3a      	ldr	r2, [r7, #32]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d903      	bls.n	800bede <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bedc:	e1bd      	b.n	800c25a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee0:	4618      	mov	r0, r3
 800bee2:	f04f 0100 	mov.w	r1, #0
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beea:	4aac      	ldr	r2, [pc, #688]	; (800c19c <UART_SetConfig+0x9c8>)
 800beec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	f04f 0300 	mov.w	r3, #0
 800bef6:	f7f4 f9ef 	bl	80002d8 <__aeabi_uldivmod>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	4610      	mov	r0, r2
 800bf00:	4619      	mov	r1, r3
 800bf02:	f04f 0200 	mov.w	r2, #0
 800bf06:	f04f 0300 	mov.w	r3, #0
 800bf0a:	020b      	lsls	r3, r1, #8
 800bf0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf10:	0202      	lsls	r2, r0, #8
 800bf12:	6879      	ldr	r1, [r7, #4]
 800bf14:	6849      	ldr	r1, [r1, #4]
 800bf16:	0849      	lsrs	r1, r1, #1
 800bf18:	4608      	mov	r0, r1
 800bf1a:	f04f 0100 	mov.w	r1, #0
 800bf1e:	1814      	adds	r4, r2, r0
 800bf20:	eb43 0501 	adc.w	r5, r3, r1
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	f04f 0300 	mov.w	r3, #0
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 f9d1 	bl	80002d8 <__aeabi_uldivmod>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf44:	d308      	bcc.n	800bf58 <UART_SetConfig+0x784>
 800bf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf4c:	d204      	bcs.n	800bf58 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf54:	60da      	str	r2, [r3, #12]
 800bf56:	e180      	b.n	800c25a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf5e:	e17c      	b.n	800c25a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	69db      	ldr	r3, [r3, #28]
 800bf64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf68:	f040 80bf 	bne.w	800c0ea <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800bf6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf70:	2b20      	cmp	r3, #32
 800bf72:	dc49      	bgt.n	800c008 <UART_SetConfig+0x834>
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	db7c      	blt.n	800c072 <UART_SetConfig+0x89e>
 800bf78:	2b20      	cmp	r3, #32
 800bf7a:	d87a      	bhi.n	800c072 <UART_SetConfig+0x89e>
 800bf7c:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <UART_SetConfig+0x7b0>)
 800bf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf82:	bf00      	nop
 800bf84:	0800c00f 	.word	0x0800c00f
 800bf88:	0800c017 	.word	0x0800c017
 800bf8c:	0800c073 	.word	0x0800c073
 800bf90:	0800c073 	.word	0x0800c073
 800bf94:	0800c01f 	.word	0x0800c01f
 800bf98:	0800c073 	.word	0x0800c073
 800bf9c:	0800c073 	.word	0x0800c073
 800bfa0:	0800c073 	.word	0x0800c073
 800bfa4:	0800c02f 	.word	0x0800c02f
 800bfa8:	0800c073 	.word	0x0800c073
 800bfac:	0800c073 	.word	0x0800c073
 800bfb0:	0800c073 	.word	0x0800c073
 800bfb4:	0800c073 	.word	0x0800c073
 800bfb8:	0800c073 	.word	0x0800c073
 800bfbc:	0800c073 	.word	0x0800c073
 800bfc0:	0800c073 	.word	0x0800c073
 800bfc4:	0800c03f 	.word	0x0800c03f
 800bfc8:	0800c073 	.word	0x0800c073
 800bfcc:	0800c073 	.word	0x0800c073
 800bfd0:	0800c073 	.word	0x0800c073
 800bfd4:	0800c073 	.word	0x0800c073
 800bfd8:	0800c073 	.word	0x0800c073
 800bfdc:	0800c073 	.word	0x0800c073
 800bfe0:	0800c073 	.word	0x0800c073
 800bfe4:	0800c073 	.word	0x0800c073
 800bfe8:	0800c073 	.word	0x0800c073
 800bfec:	0800c073 	.word	0x0800c073
 800bff0:	0800c073 	.word	0x0800c073
 800bff4:	0800c073 	.word	0x0800c073
 800bff8:	0800c073 	.word	0x0800c073
 800bffc:	0800c073 	.word	0x0800c073
 800c000:	0800c073 	.word	0x0800c073
 800c004:	0800c065 	.word	0x0800c065
 800c008:	2b40      	cmp	r3, #64	; 0x40
 800c00a:	d02e      	beq.n	800c06a <UART_SetConfig+0x896>
 800c00c:	e031      	b.n	800c072 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c00e:	f7fa ff75 	bl	8006efc <HAL_RCC_GetPCLK1Freq>
 800c012:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c014:	e033      	b.n	800c07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c016:	f7fa ff87 	bl	8006f28 <HAL_RCC_GetPCLK2Freq>
 800c01a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c01c:	e02f      	b.n	800c07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c01e:	f107 0314 	add.w	r3, r7, #20
 800c022:	4618      	mov	r0, r3
 800c024:	f7fb feec 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c02c:	e027      	b.n	800c07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c02e:	f107 0308 	add.w	r3, r7, #8
 800c032:	4618      	mov	r0, r3
 800c034:	f7fc f838 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c03c:	e01f      	b.n	800c07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c03e:	4b58      	ldr	r3, [pc, #352]	; (800c1a0 <UART_SetConfig+0x9cc>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 0320 	and.w	r3, r3, #32
 800c046:	2b00      	cmp	r3, #0
 800c048:	d009      	beq.n	800c05e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c04a:	4b55      	ldr	r3, [pc, #340]	; (800c1a0 <UART_SetConfig+0x9cc>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	08db      	lsrs	r3, r3, #3
 800c050:	f003 0303 	and.w	r3, r3, #3
 800c054:	4a53      	ldr	r2, [pc, #332]	; (800c1a4 <UART_SetConfig+0x9d0>)
 800c056:	fa22 f303 	lsr.w	r3, r2, r3
 800c05a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c05c:	e00f      	b.n	800c07e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c05e:	4b51      	ldr	r3, [pc, #324]	; (800c1a4 <UART_SetConfig+0x9d0>)
 800c060:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c062:	e00c      	b.n	800c07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c064:	4b4c      	ldr	r3, [pc, #304]	; (800c198 <UART_SetConfig+0x9c4>)
 800c066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c068:	e009      	b.n	800c07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c06a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c06e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c070:	e005      	b.n	800c07e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c072:	2300      	movs	r3, #0
 800c074:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c07c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 80ea 	beq.w	800c25a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08a:	4a44      	ldr	r2, [pc, #272]	; (800c19c <UART_SetConfig+0x9c8>)
 800c08c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c090:	461a      	mov	r2, r3
 800c092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c094:	fbb3 f3f2 	udiv	r3, r3, r2
 800c098:	005a      	lsls	r2, r3, #1
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	085b      	lsrs	r3, r3, #1
 800c0a0:	441a      	add	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	2b0f      	cmp	r3, #15
 800c0b2:	d916      	bls.n	800c0e2 <UART_SetConfig+0x90e>
 800c0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ba:	d212      	bcs.n	800c0e2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	f023 030f 	bic.w	r3, r3, #15
 800c0c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	085b      	lsrs	r3, r3, #1
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	f003 0307 	and.w	r3, r3, #7
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c0de:	60da      	str	r2, [r3, #12]
 800c0e0:	e0bb      	b.n	800c25a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c0e8:	e0b7      	b.n	800c25a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c0ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0ee:	2b20      	cmp	r3, #32
 800c0f0:	dc4a      	bgt.n	800c188 <UART_SetConfig+0x9b4>
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f2c0 8086 	blt.w	800c204 <UART_SetConfig+0xa30>
 800c0f8:	2b20      	cmp	r3, #32
 800c0fa:	f200 8083 	bhi.w	800c204 <UART_SetConfig+0xa30>
 800c0fe:	a201      	add	r2, pc, #4	; (adr r2, 800c104 <UART_SetConfig+0x930>)
 800c100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c104:	0800c18f 	.word	0x0800c18f
 800c108:	0800c1a9 	.word	0x0800c1a9
 800c10c:	0800c205 	.word	0x0800c205
 800c110:	0800c205 	.word	0x0800c205
 800c114:	0800c1b1 	.word	0x0800c1b1
 800c118:	0800c205 	.word	0x0800c205
 800c11c:	0800c205 	.word	0x0800c205
 800c120:	0800c205 	.word	0x0800c205
 800c124:	0800c1c1 	.word	0x0800c1c1
 800c128:	0800c205 	.word	0x0800c205
 800c12c:	0800c205 	.word	0x0800c205
 800c130:	0800c205 	.word	0x0800c205
 800c134:	0800c205 	.word	0x0800c205
 800c138:	0800c205 	.word	0x0800c205
 800c13c:	0800c205 	.word	0x0800c205
 800c140:	0800c205 	.word	0x0800c205
 800c144:	0800c1d1 	.word	0x0800c1d1
 800c148:	0800c205 	.word	0x0800c205
 800c14c:	0800c205 	.word	0x0800c205
 800c150:	0800c205 	.word	0x0800c205
 800c154:	0800c205 	.word	0x0800c205
 800c158:	0800c205 	.word	0x0800c205
 800c15c:	0800c205 	.word	0x0800c205
 800c160:	0800c205 	.word	0x0800c205
 800c164:	0800c205 	.word	0x0800c205
 800c168:	0800c205 	.word	0x0800c205
 800c16c:	0800c205 	.word	0x0800c205
 800c170:	0800c205 	.word	0x0800c205
 800c174:	0800c205 	.word	0x0800c205
 800c178:	0800c205 	.word	0x0800c205
 800c17c:	0800c205 	.word	0x0800c205
 800c180:	0800c205 	.word	0x0800c205
 800c184:	0800c1f7 	.word	0x0800c1f7
 800c188:	2b40      	cmp	r3, #64	; 0x40
 800c18a:	d037      	beq.n	800c1fc <UART_SetConfig+0xa28>
 800c18c:	e03a      	b.n	800c204 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c18e:	f7fa feb5 	bl	8006efc <HAL_RCC_GetPCLK1Freq>
 800c192:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c194:	e03c      	b.n	800c210 <UART_SetConfig+0xa3c>
 800c196:	bf00      	nop
 800c198:	003d0900 	.word	0x003d0900
 800c19c:	0800ce98 	.word	0x0800ce98
 800c1a0:	58024400 	.word	0x58024400
 800c1a4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1a8:	f7fa febe 	bl	8006f28 <HAL_RCC_GetPCLK2Freq>
 800c1ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1ae:	e02f      	b.n	800c210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1b0:	f107 0314 	add.w	r3, r7, #20
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fb fe23 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1be:	e027      	b.n	800c210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1c0:	f107 0308 	add.w	r3, r7, #8
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fb ff6f 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1ce:	e01f      	b.n	800c210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1d0:	4b2c      	ldr	r3, [pc, #176]	; (800c284 <UART_SetConfig+0xab0>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 0320 	and.w	r3, r3, #32
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d009      	beq.n	800c1f0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1dc:	4b29      	ldr	r3, [pc, #164]	; (800c284 <UART_SetConfig+0xab0>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	08db      	lsrs	r3, r3, #3
 800c1e2:	f003 0303 	and.w	r3, r3, #3
 800c1e6:	4a28      	ldr	r2, [pc, #160]	; (800c288 <UART_SetConfig+0xab4>)
 800c1e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1ee:	e00f      	b.n	800c210 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c1f0:	4b25      	ldr	r3, [pc, #148]	; (800c288 <UART_SetConfig+0xab4>)
 800c1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1f4:	e00c      	b.n	800c210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1f6:	4b25      	ldr	r3, [pc, #148]	; (800c28c <UART_SetConfig+0xab8>)
 800c1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1fa:	e009      	b.n	800c210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c200:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c202:	e005      	b.n	800c210 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c204:	2300      	movs	r3, #0
 800c206:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c20e:	bf00      	nop
    }

    if (pclk != 0U)
 800c210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c212:	2b00      	cmp	r3, #0
 800c214:	d021      	beq.n	800c25a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21a:	4a1d      	ldr	r2, [pc, #116]	; (800c290 <UART_SetConfig+0xabc>)
 800c21c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c220:	461a      	mov	r2, r3
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	fbb3 f2f2 	udiv	r2, r3, r2
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	085b      	lsrs	r3, r3, #1
 800c22e:	441a      	add	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	fbb2 f3f3 	udiv	r3, r2, r3
 800c238:	b29b      	uxth	r3, r3
 800c23a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	2b0f      	cmp	r3, #15
 800c240:	d908      	bls.n	800c254 <UART_SetConfig+0xa80>
 800c242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c248:	d204      	bcs.n	800c254 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c250:	60da      	str	r2, [r3, #12]
 800c252:	e002      	b.n	800c25a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c276:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3738      	adds	r7, #56	; 0x38
 800c27e:	46bd      	mov	sp, r7
 800c280:	bdb0      	pop	{r4, r5, r7, pc}
 800c282:	bf00      	nop
 800c284:	58024400 	.word	0x58024400
 800c288:	03d09000 	.word	0x03d09000
 800c28c:	003d0900 	.word	0x003d0900
 800c290:	0800ce98 	.word	0x0800ce98

0800c294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00a      	beq.n	800c2be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	430a      	orrs	r2, r1
 800c2bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c2:	f003 0302 	and.w	r3, r3, #2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00a      	beq.n	800c2e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e4:	f003 0304 	and.w	r3, r3, #4
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00a      	beq.n	800c302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	430a      	orrs	r2, r1
 800c300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c306:	f003 0308 	and.w	r3, r3, #8
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00a      	beq.n	800c324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	430a      	orrs	r2, r1
 800c322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c328:	f003 0310 	and.w	r3, r3, #16
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00a      	beq.n	800c346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	430a      	orrs	r2, r1
 800c344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c34a:	f003 0320 	and.w	r3, r3, #32
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00a      	beq.n	800c368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	430a      	orrs	r2, r1
 800c366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c370:	2b00      	cmp	r3, #0
 800c372:	d01a      	beq.n	800c3aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	430a      	orrs	r2, r1
 800c388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c38e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c392:	d10a      	bne.n	800c3aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	430a      	orrs	r2, r1
 800c3a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00a      	beq.n	800c3cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	430a      	orrs	r2, r1
 800c3ca:	605a      	str	r2, [r3, #4]
  }
}
 800c3cc:	bf00      	nop
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af02      	add	r7, sp, #8
 800c3de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3e8:	f7f5 fe9e 	bl	8002128 <HAL_GetTick>
 800c3ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 0308 	and.w	r3, r3, #8
 800c3f8:	2b08      	cmp	r3, #8
 800c3fa:	d10e      	bne.n	800c41a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f82f 	bl	800c46e <UART_WaitOnFlagUntilTimeout>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c416:	2303      	movs	r3, #3
 800c418:	e025      	b.n	800c466 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 0304 	and.w	r3, r3, #4
 800c424:	2b04      	cmp	r3, #4
 800c426:	d10e      	bne.n	800c446 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2200      	movs	r2, #0
 800c432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f819 	bl	800c46e <UART_WaitOnFlagUntilTimeout>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c442:	2303      	movs	r3, #3
 800c444:	e00f      	b.n	800c466 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2220      	movs	r2, #32
 800c44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2220      	movs	r2, #32
 800c452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	603b      	str	r3, [r7, #0]
 800c47a:	4613      	mov	r3, r2
 800c47c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c47e:	e062      	b.n	800c546 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c486:	d05e      	beq.n	800c546 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c488:	f7f5 fe4e 	bl	8002128 <HAL_GetTick>
 800c48c:	4602      	mov	r2, r0
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	69ba      	ldr	r2, [r7, #24]
 800c494:	429a      	cmp	r2, r3
 800c496:	d302      	bcc.n	800c49e <UART_WaitOnFlagUntilTimeout+0x30>
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d11d      	bne.n	800c4da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	689a      	ldr	r2, [r3, #8]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f022 0201 	bic.w	r2, r2, #1
 800c4bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2220      	movs	r2, #32
 800c4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2220      	movs	r2, #32
 800c4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	e045      	b.n	800c566 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 0304 	and.w	r3, r3, #4
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d02e      	beq.n	800c546 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	69db      	ldr	r3, [r3, #28]
 800c4ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4f6:	d126      	bne.n	800c546 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c500:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c510:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	689a      	ldr	r2, [r3, #8]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f022 0201 	bic.w	r2, r2, #1
 800c520:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2220      	movs	r2, #32
 800c526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2220      	movs	r2, #32
 800c52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2220      	movs	r2, #32
 800c536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c542:	2303      	movs	r3, #3
 800c544:	e00f      	b.n	800c566 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	69da      	ldr	r2, [r3, #28]
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	4013      	ands	r3, r2
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	429a      	cmp	r2, r3
 800c554:	bf0c      	ite	eq
 800c556:	2301      	moveq	r3, #1
 800c558:	2300      	movne	r3, #0
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	461a      	mov	r2, r3
 800c55e:	79fb      	ldrb	r3, [r7, #7]
 800c560:	429a      	cmp	r2, r3
 800c562:	d08d      	beq.n	800c480 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
	...

0800c570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c586:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	6899      	ldr	r1, [r3, #8]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	4b0f      	ldr	r3, [pc, #60]	; (800c5d0 <UART_EndRxTransfer+0x60>)
 800c594:	400b      	ands	r3, r1
 800c596:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d107      	bne.n	800c5b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f022 0210 	bic.w	r2, r2, #16
 800c5ae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c5c4:	bf00      	nop
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr
 800c5d0:	effffffe 	.word	0xeffffffe

0800c5d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f7ff f8d8 	bl	800b7a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5f8:	bf00      	nop
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c616:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2220      	movs	r2, #32
 800c61c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff f8b4 	bl	800b794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c62c:	bf00      	nop
 800c62e:	3708      	adds	r7, #8
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d101      	bne.n	800c686 <HAL_UARTEx_DisableFifoMode+0x16>
 800c682:	2302      	movs	r3, #2
 800c684:	e027      	b.n	800c6d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2201      	movs	r2, #1
 800c68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2224      	movs	r2, #36	; 0x24
 800c692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f022 0201 	bic.w	r2, r2, #1
 800c6ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c6b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2220      	movs	r2, #32
 800c6c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d101      	bne.n	800c6fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6f6:	2302      	movs	r3, #2
 800c6f8:	e02d      	b.n	800c756 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2224      	movs	r2, #36	; 0x24
 800c706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f022 0201 	bic.w	r2, r2, #1
 800c720:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	683a      	ldr	r2, [r7, #0]
 800c732:	430a      	orrs	r2, r1
 800c734:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f850 	bl	800c7dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2220      	movs	r2, #32
 800c748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c754:	2300      	movs	r3, #0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d101      	bne.n	800c776 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c772:	2302      	movs	r3, #2
 800c774:	e02d      	b.n	800c7d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2201      	movs	r2, #1
 800c77a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2224      	movs	r2, #36	; 0x24
 800c782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f022 0201 	bic.w	r2, r2, #1
 800c79c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f812 	bl	800c7dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2220      	movs	r2, #32
 800c7c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3710      	adds	r7, #16
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
	...

0800c7dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d108      	bne.n	800c7fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c7fc:	e031      	b.n	800c862 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c7fe:	2310      	movs	r3, #16
 800c800:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c802:	2310      	movs	r3, #16
 800c804:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	0e5b      	lsrs	r3, r3, #25
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	f003 0307 	and.w	r3, r3, #7
 800c814:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	0f5b      	lsrs	r3, r3, #29
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	f003 0307 	and.w	r3, r3, #7
 800c824:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c826:	7bbb      	ldrb	r3, [r7, #14]
 800c828:	7b3a      	ldrb	r2, [r7, #12]
 800c82a:	4911      	ldr	r1, [pc, #68]	; (800c870 <UARTEx_SetNbDataToProcess+0x94>)
 800c82c:	5c8a      	ldrb	r2, [r1, r2]
 800c82e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c832:	7b3a      	ldrb	r2, [r7, #12]
 800c834:	490f      	ldr	r1, [pc, #60]	; (800c874 <UARTEx_SetNbDataToProcess+0x98>)
 800c836:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c838:	fb93 f3f2 	sdiv	r3, r3, r2
 800c83c:	b29a      	uxth	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c844:	7bfb      	ldrb	r3, [r7, #15]
 800c846:	7b7a      	ldrb	r2, [r7, #13]
 800c848:	4909      	ldr	r1, [pc, #36]	; (800c870 <UARTEx_SetNbDataToProcess+0x94>)
 800c84a:	5c8a      	ldrb	r2, [r1, r2]
 800c84c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c850:	7b7a      	ldrb	r2, [r7, #13]
 800c852:	4908      	ldr	r1, [pc, #32]	; (800c874 <UARTEx_SetNbDataToProcess+0x98>)
 800c854:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c856:	fb93 f3f2 	sdiv	r3, r3, r2
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c862:	bf00      	nop
 800c864:	3714      	adds	r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	0800ceb0 	.word	0x0800ceb0
 800c874:	0800ceb8 	.word	0x0800ceb8

0800c878 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c878:	b084      	sub	sp, #16
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	f107 001c 	add.w	r0, r7, #28
 800c886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d120      	bne.n	800c8d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	68da      	ldr	r2, [r3, #12]
 800c8a0:	4b2a      	ldr	r3, [pc, #168]	; (800c94c <USB_CoreInit+0xd4>)
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c8b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d105      	bne.n	800c8c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fa60 	bl	800cd8c <USB_CoreReset>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73fb      	strb	r3, [r7, #15]
 800c8d0:	e01a      	b.n	800c908 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fa54 	bl	800cd8c <USB_CoreReset>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	639a      	str	r2, [r3, #56]	; 0x38
 800c8fa:	e005      	b.n	800c908 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c900:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d116      	bne.n	800c93c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c912:	b29a      	uxth	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c91c:	4b0c      	ldr	r3, [pc, #48]	; (800c950 <USB_CoreInit+0xd8>)
 800c91e:	4313      	orrs	r3, r2
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	f043 0206 	orr.w	r2, r3, #6
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	f043 0220 	orr.w	r2, r3, #32
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c948:	b004      	add	sp, #16
 800c94a:	4770      	bx	lr
 800c94c:	ffbdffbf 	.word	0xffbdffbf
 800c950:	03ee0000 	.word	0x03ee0000

0800c954 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f023 0201 	bic.w	r2, r3, #1
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	370c      	adds	r7, #12
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	460b      	mov	r3, r1
 800c980:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c98e:	78fb      	ldrb	r3, [r7, #3]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d106      	bne.n	800c9a2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	60da      	str	r2, [r3, #12]
 800c9a0:	e00b      	b.n	800c9ba <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c9a2:	78fb      	ldrb	r3, [r7, #3]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d106      	bne.n	800c9b6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	60da      	str	r2, [r3, #12]
 800c9b4:	e001      	b.n	800c9ba <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e003      	b.n	800c9c2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c9ba:	2032      	movs	r0, #50	; 0x32
 800c9bc:	f7f5 fbc0 	bl	8002140 <HAL_Delay>

  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b086      	sub	sp, #24
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c9da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	613b      	str	r3, [r7, #16]
 800c9ea:	e009      	b.n	800ca00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	3340      	adds	r3, #64	; 0x40
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4413      	add	r3, r2
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	613b      	str	r3, [r7, #16]
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	2b0e      	cmp	r3, #14
 800ca04:	d9f2      	bls.n	800c9ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d11c      	bne.n	800ca46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca1a:	f043 0302 	orr.w	r3, r3, #2
 800ca1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	601a      	str	r2, [r3, #0]
 800ca44:	e005      	b.n	800ca52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca58:	461a      	mov	r2, r3
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca64:	4619      	mov	r1, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	680b      	ldr	r3, [r1, #0]
 800ca70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d10c      	bne.n	800ca92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ca78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d104      	bne.n	800ca88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ca7e:	2100      	movs	r1, #0
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f949 	bl	800cd18 <USB_SetDevSpeed>
 800ca86:	e008      	b.n	800ca9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ca88:	2101      	movs	r1, #1
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f944 	bl	800cd18 <USB_SetDevSpeed>
 800ca90:	e003      	b.n	800ca9a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ca92:	2103      	movs	r1, #3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f93f 	bl	800cd18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ca9a:	2110      	movs	r1, #16
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 f8f3 	bl	800cc88 <USB_FlushTxFifo>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d001      	beq.n	800caac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800caa8:	2301      	movs	r3, #1
 800caaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f911 	bl	800ccd4 <USB_FlushRxFifo>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d001      	beq.n	800cabc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac2:	461a      	mov	r2, r3
 800cac4:	2300      	movs	r3, #0
 800cac6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cace:	461a      	mov	r2, r3
 800cad0:	2300      	movs	r3, #0
 800cad2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cada:	461a      	mov	r2, r3
 800cadc:	2300      	movs	r3, #0
 800cade:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cae0:	2300      	movs	r3, #0
 800cae2:	613b      	str	r3, [r7, #16]
 800cae4:	e043      	b.n	800cb6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	015a      	lsls	r2, r3, #5
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	4413      	add	r3, r2
 800caee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800caf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cafc:	d118      	bne.n	800cb30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb10:	461a      	mov	r2, r3
 800cb12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	e013      	b.n	800cb42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	015a      	lsls	r2, r3, #5
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	4413      	add	r3, r2
 800cb22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb26:	461a      	mov	r2, r3
 800cb28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cb2c:	6013      	str	r3, [r2, #0]
 800cb2e:	e008      	b.n	800cb42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	015a      	lsls	r2, r3, #5
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	4413      	add	r3, r2
 800cb38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	2300      	movs	r3, #0
 800cb40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	015a      	lsls	r2, r3, #5
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	4413      	add	r3, r2
 800cb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb4e:	461a      	mov	r2, r3
 800cb50:	2300      	movs	r3, #0
 800cb52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	015a      	lsls	r2, r3, #5
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb60:	461a      	mov	r2, r3
 800cb62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	613b      	str	r3, [r7, #16]
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d3b7      	bcc.n	800cae6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb76:	2300      	movs	r3, #0
 800cb78:	613b      	str	r3, [r7, #16]
 800cb7a:	e043      	b.n	800cc04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	015a      	lsls	r2, r3, #5
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4413      	add	r3, r2
 800cb84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb92:	d118      	bne.n	800cbc6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10a      	bne.n	800cbb0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	015a      	lsls	r2, r3, #5
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	4413      	add	r3, r2
 800cba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba6:	461a      	mov	r2, r3
 800cba8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	e013      	b.n	800cbd8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	015a      	lsls	r2, r3, #5
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cbc2:	6013      	str	r3, [r2, #0]
 800cbc4:	e008      	b.n	800cbd8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	015a      	lsls	r2, r3, #5
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	4413      	add	r3, r2
 800cbce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	015a      	lsls	r2, r3, #5
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	015a      	lsls	r2, r3, #5
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cbfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3301      	adds	r3, #1
 800cc02:	613b      	str	r3, [r7, #16]
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	693a      	ldr	r2, [r7, #16]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d3b7      	bcc.n	800cb7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc12:	691b      	ldr	r3, [r3, #16]
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cc2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d105      	bne.n	800cc40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	699b      	ldr	r3, [r3, #24]
 800cc38:	f043 0210 	orr.w	r2, r3, #16
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	699a      	ldr	r2, [r3, #24]
 800cc44:	4b0e      	ldr	r3, [pc, #56]	; (800cc80 <USB_DevInit+0x2b4>)
 800cc46:	4313      	orrs	r3, r2
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d005      	beq.n	800cc5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	f043 0208 	orr.w	r2, r3, #8
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cc5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d105      	bne.n	800cc70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	699a      	ldr	r2, [r3, #24]
 800cc68:	4b06      	ldr	r3, [pc, #24]	; (800cc84 <USB_DevInit+0x2b8>)
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3718      	adds	r7, #24
 800cc76:	46bd      	mov	sp, r7
 800cc78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc7c:	b004      	add	sp, #16
 800cc7e:	4770      	bx	lr
 800cc80:	803c3800 	.word	0x803c3800
 800cc84:	40000004 	.word	0x40000004

0800cc88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cc92:	2300      	movs	r3, #0
 800cc94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	019b      	lsls	r3, r3, #6
 800cc9a:	f043 0220 	orr.w	r2, r3, #32
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3301      	adds	r3, #1
 800cca6:	60fb      	str	r3, [r7, #12]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4a09      	ldr	r2, [pc, #36]	; (800ccd0 <USB_FlushTxFifo+0x48>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d901      	bls.n	800ccb4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	e006      	b.n	800ccc2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	691b      	ldr	r3, [r3, #16]
 800ccb8:	f003 0320 	and.w	r3, r3, #32
 800ccbc:	2b20      	cmp	r3, #32
 800ccbe:	d0f0      	beq.n	800cca2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3714      	adds	r7, #20
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	00030d40 	.word	0x00030d40

0800ccd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2210      	movs	r2, #16
 800cce4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	3301      	adds	r3, #1
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4a09      	ldr	r2, [pc, #36]	; (800cd14 <USB_FlushRxFifo+0x40>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d901      	bls.n	800ccf8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ccf4:	2303      	movs	r3, #3
 800ccf6:	e006      	b.n	800cd06 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	f003 0310 	and.w	r3, r3, #16
 800cd00:	2b10      	cmp	r3, #16
 800cd02:	d0f0      	beq.n	800cce6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	00030d40 	.word	0x00030d40

0800cd18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	460b      	mov	r3, r1
 800cd22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	78fb      	ldrb	r3, [r7, #3]
 800cd32:	68f9      	ldr	r1, [r7, #12]
 800cd34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b085      	sub	sp, #20
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd64:	f023 0303 	bic.w	r3, r3, #3
 800cd68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd78:	f043 0302 	orr.w	r3, r3, #2
 800cd7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b085      	sub	sp, #20
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cd94:	2300      	movs	r3, #0
 800cd96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	60fb      	str	r3, [r7, #12]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	4a13      	ldr	r2, [pc, #76]	; (800cdf0 <USB_CoreReset+0x64>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d901      	bls.n	800cdaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cda6:	2303      	movs	r3, #3
 800cda8:	e01b      	b.n	800cde2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	daf2      	bge.n	800cd98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	f043 0201 	orr.w	r2, r3, #1
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	60fb      	str	r3, [r7, #12]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4a09      	ldr	r2, [pc, #36]	; (800cdf0 <USB_CoreReset+0x64>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d901      	bls.n	800cdd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e006      	b.n	800cde2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	f003 0301 	and.w	r3, r3, #1
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d0f0      	beq.n	800cdc2 <USB_CoreReset+0x36>

  return HAL_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3714      	adds	r7, #20
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	00030d40 	.word	0x00030d40

0800cdf4 <__libc_init_array>:
 800cdf4:	b570      	push	{r4, r5, r6, lr}
 800cdf6:	4d0d      	ldr	r5, [pc, #52]	; (800ce2c <__libc_init_array+0x38>)
 800cdf8:	4c0d      	ldr	r4, [pc, #52]	; (800ce30 <__libc_init_array+0x3c>)
 800cdfa:	1b64      	subs	r4, r4, r5
 800cdfc:	10a4      	asrs	r4, r4, #2
 800cdfe:	2600      	movs	r6, #0
 800ce00:	42a6      	cmp	r6, r4
 800ce02:	d109      	bne.n	800ce18 <__libc_init_array+0x24>
 800ce04:	4d0b      	ldr	r5, [pc, #44]	; (800ce34 <__libc_init_array+0x40>)
 800ce06:	4c0c      	ldr	r4, [pc, #48]	; (800ce38 <__libc_init_array+0x44>)
 800ce08:	f000 f82e 	bl	800ce68 <_init>
 800ce0c:	1b64      	subs	r4, r4, r5
 800ce0e:	10a4      	asrs	r4, r4, #2
 800ce10:	2600      	movs	r6, #0
 800ce12:	42a6      	cmp	r6, r4
 800ce14:	d105      	bne.n	800ce22 <__libc_init_array+0x2e>
 800ce16:	bd70      	pop	{r4, r5, r6, pc}
 800ce18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce1c:	4798      	blx	r3
 800ce1e:	3601      	adds	r6, #1
 800ce20:	e7ee      	b.n	800ce00 <__libc_init_array+0xc>
 800ce22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce26:	4798      	blx	r3
 800ce28:	3601      	adds	r6, #1
 800ce2a:	e7f2      	b.n	800ce12 <__libc_init_array+0x1e>
 800ce2c:	0800cec8 	.word	0x0800cec8
 800ce30:	0800cec8 	.word	0x0800cec8
 800ce34:	0800cec8 	.word	0x0800cec8
 800ce38:	0800cecc 	.word	0x0800cecc

0800ce3c <memcpy>:
 800ce3c:	440a      	add	r2, r1
 800ce3e:	4291      	cmp	r1, r2
 800ce40:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce44:	d100      	bne.n	800ce48 <memcpy+0xc>
 800ce46:	4770      	bx	lr
 800ce48:	b510      	push	{r4, lr}
 800ce4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce52:	4291      	cmp	r1, r2
 800ce54:	d1f9      	bne.n	800ce4a <memcpy+0xe>
 800ce56:	bd10      	pop	{r4, pc}

0800ce58 <memset>:
 800ce58:	4402      	add	r2, r0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d100      	bne.n	800ce62 <memset+0xa>
 800ce60:	4770      	bx	lr
 800ce62:	f803 1b01 	strb.w	r1, [r3], #1
 800ce66:	e7f9      	b.n	800ce5c <memset+0x4>

0800ce68 <_init>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	bf00      	nop
 800ce6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6e:	bc08      	pop	{r3}
 800ce70:	469e      	mov	lr, r3
 800ce72:	4770      	bx	lr

0800ce74 <_fini>:
 800ce74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce76:	bf00      	nop
 800ce78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7a:	bc08      	pop	{r3}
 800ce7c:	469e      	mov	lr, r3
 800ce7e:	4770      	bx	lr
