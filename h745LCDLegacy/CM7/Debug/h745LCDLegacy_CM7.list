
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc20  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ceb8  0800ceb8  0001ceb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cef8  0800cef8  0003721c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cef8  0800cef8  0001cef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf00  0800cf00  0003721c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf00  0800cf00  0001cf00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf04  0800cf04  0001cf04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001715c  24000000  0800cf08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2401715c  08024064  0003715c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240171bc  080240c4  000371bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c810  2401721c  08024124  0003721c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24023a2c  08024124  00043a2c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0003721c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00031fce  00000000  00000000  0003724a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004797  00000000  00000000  00069218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ab0  00000000  00000000  0006d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001958  00000000  00000000  0006f460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d75c  00000000  00000000  00070db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021cfc  00000000  00000000  000ae514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019699a  00000000  00000000  000d0210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00266baa  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000073e4  00000000  00000000  00266c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2401721c 	.word	0x2401721c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cea0 	.word	0x0800cea0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24017220 	.word	0x24017220
 80002d4:	0800cea0 	.word	0x0800cea0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <LCD_init>:

//การสั่งขา D/C หรือ A0 เพื่อส่ง command หรือ parameter
//เปลี่ยนแปลง data command ให้เป็น high เพื่อส่ง parameter
//เปลี่ยนแปลง data command ให้เป็น low เพื่อส่ง command
//ส่งข้อมูลภาพไปในจอใช้ขา data command high
void LCD_init(LCDHandle *lcd){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	//reset LCD
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	b29b      	uxth	r3, r3
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	f005 faab 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fd34 	bl	800218c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6858      	ldr	r0, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	b29b      	uxth	r3, r3
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	f005 fa9f 	bl	8005c74 <HAL_GPIO_WritePin>

	//select SPI CS
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	b29b      	uxth	r3, r3
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f005 fa96 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 fd1f 	bl	800218c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6898      	ldr	r0, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f005 fa8a 	bl	8005c74 <HAL_GPIO_WritePin>

	//write reset , sleep out, display on, scan order
	//write command 0x01, 0x11, 0x29, 0x36
	//4 = 4 commands
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f005 fa81 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2204      	movs	r2, #4
 800077a:	4938      	ldr	r1, [pc, #224]	; (800085c <LCD_init+0x158>)
 800077c:	f008 fd1c 	bl	80091b8 <HAL_SPI_Transmit>

	//write parameter of scan order
	//write parameter 0b01001000
	//&LCDSTARTUPSeq[4] offset ไป 4 ตำแหน่ง
	//1 = 1 parameter
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68d8      	ldr	r0, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	b29b      	uxth	r3, r3
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f005 fa71 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	2201      	movs	r2, #1
 800079a:	4931      	ldr	r1, [pc, #196]	; (8000860 <LCD_init+0x15c>)
 800079c:	f008 fd0c 	bl	80091b8 <HAL_SPI_Transmit>

	//write set C area
	//write command 0x2a
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f005 fa61 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	492a      	ldr	r1, [pc, #168]	; (8000864 <LCD_init+0x160>)
 80007bc:	f008 fcfc 	bl	80091b8 <HAL_SPI_Transmit>

	//write set C area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68d8      	ldr	r0, [r3, #12]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	f005 fa51 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2204      	movs	r2, #4
 80007da:	4923      	ldr	r1, [pc, #140]	; (8000868 <LCD_init+0x164>)
 80007dc:	f008 fcec 	bl	80091b8 <HAL_SPI_Transmit>

	//write set R area
	//write command 0x2b
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68d8      	ldr	r0, [r3, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f005 fa41 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2201      	movs	r2, #1
 80007fa:	491c      	ldr	r1, [pc, #112]	; (800086c <LCD_init+0x168>)
 80007fc:	f008 fcdc 	bl	80091b8 <HAL_SPI_Transmit>

	//write set R area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68d8      	ldr	r0, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	b29b      	uxth	r3, r3
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	f005 fa31 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2204      	movs	r2, #4
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <LCD_init+0x16c>)
 800081c:	f008 fccc 	bl	80091b8 <HAL_SPI_Transmit>

	//write to graphic memory
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68d8      	ldr	r0, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f005 fa21 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	2201      	movs	r2, #1
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LCD_init+0x170>)
 800083c:	f008 fcbc 	bl	80091b8 <HAL_SPI_Transmit>

	//set DC to high to read & send image data
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68d8      	ldr	r0, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	b29b      	uxth	r3, r3
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f005 fa11 	bl	8005c74 <HAL_GPIO_WritePin>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000008 	.word	0x24000008
 8000860:	2400000c 	.word	0x2400000c
 8000864:	2400000d 	.word	0x2400000d
 8000868:	2400000e 	.word	0x2400000e
 800086c:	24000012 	.word	0x24000012
 8000870:	24000013 	.word	0x24000013
 8000874:	24000017 	.word	0x24000017

08000878 <LCD_flush>:

//ส่งข้อมูลของ frame ไปให้จอ
void LCD_flush(LCDHandle *lcd)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	//circular dma
	//Framememory มีขนาดเท่ากับหน้าจอ
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000888:	4903      	ldr	r1, [pc, #12]	; (8000898 <LCD_flush+0x20>)
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fe86 	bl	800959c <HAL_SPI_Transmit_DMA>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24017238 	.word	0x24017238

0800089c <LCD_timer>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void LCD_timer(uint8_t timer)
{
 800089c:	b480      	push	{r7}
 800089e:	b093      	sub	sp, #76	; 0x4c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	switch(timer)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b60      	cmp	r3, #96	; 0x60
 80008aa:	f000 80a6 	beq.w	80009fa <LCD_timer+0x15e>
 80008ae:	2b60      	cmp	r3, #96	; 0x60
 80008b0:	f300 80c8 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008b4:	2b45      	cmp	r3, #69	; 0x45
 80008b6:	d07b      	beq.n	80009b0 <LCD_timer+0x114>
 80008b8:	2b45      	cmp	r3, #69	; 0x45
 80008ba:	f300 80c3 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008be:	2b30      	cmp	r3, #48	; 0x30
 80008c0:	d051      	beq.n	8000966 <LCD_timer+0xca>
 80008c2:	2b30      	cmp	r3, #48	; 0x30
 80008c4:	f300 80be 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <LCD_timer+0x36>
 80008cc:	2b15      	cmp	r3, #21
 80008ce:	d025      	beq.n	800091c <LCD_timer+0x80>
			}
		}
			break;

		default:
			break;
 80008d0:	e0b8      	b.n	8000a44 <LCD_timer+0x1a8>
			int k= 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i = 180; i < 15156; i = i+384 )
 80008d6:	23b4      	movs	r3, #180	; 0xb4
 80008d8:	647b      	str	r3, [r7, #68]	; 0x44
 80008da:	e019      	b.n	8000910 <LCD_timer+0x74>
				for(j=0;j<120;j++)
 80008dc:	2300      	movs	r3, #0
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
 80008e0:	e00c      	b.n	80008fc <LCD_timer+0x60>
					Framememory[i+j] = n0[j+k];
 80008e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80008e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e6:	441a      	add	r2, r3
 80008e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80008ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008ec:	440b      	add	r3, r1
 80008ee:	4959      	ldr	r1, [pc, #356]	; (8000a54 <LCD_timer+0x1b8>)
 80008f0:	5c89      	ldrb	r1, [r1, r2]
 80008f2:	4a59      	ldr	r2, [pc, #356]	; (8000a58 <LCD_timer+0x1bc>)
 80008f4:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 80008f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f8:	3301      	adds	r3, #1
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
 80008fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008fe:	2b77      	cmp	r3, #119	; 0x77
 8000900:	ddef      	ble.n	80008e2 <LCD_timer+0x46>
				k = k +120;
 8000902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000904:	3378      	adds	r3, #120	; 0x78
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i = 180; i < 15156; i = i+384 )
 8000908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800090a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
 8000910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000912:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000916:	4293      	cmp	r3, r2
 8000918:	dde0      	ble.n	80008dc <LCD_timer+0x40>
			break;
 800091a:	e094      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
			for(i = 180; i < 15156; i = i+384 )
 8000920:	23b4      	movs	r3, #180	; 0xb4
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
 8000924:	e019      	b.n	800095a <LCD_timer+0xbe>
				for(j=0;j<120;j++)
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
 800092a:	e00c      	b.n	8000946 <LCD_timer+0xaa>
					Framememory[i+j] = n15[j+k];
 800092c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800092e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000930:	441a      	add	r2, r3
 8000932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000936:	440b      	add	r3, r1
 8000938:	4948      	ldr	r1, [pc, #288]	; (8000a5c <LCD_timer+0x1c0>)
 800093a:	5c89      	ldrb	r1, [r1, r2]
 800093c:	4a46      	ldr	r2, [pc, #280]	; (8000a58 <LCD_timer+0x1bc>)
 800093e:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	3301      	adds	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
 8000946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000948:	2b77      	cmp	r3, #119	; 0x77
 800094a:	ddef      	ble.n	800092c <LCD_timer+0x90>
				k = k +120;
 800094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094e:	3378      	adds	r3, #120	; 0x78
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
			for(i = 180; i < 15156; i = i+384 )
 8000952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000954:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
 800095a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800095c:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000960:	4293      	cmp	r3, r2
 8000962:	dde0      	ble.n	8000926 <LCD_timer+0x8a>
			break;
 8000964:	e06f      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 180; i < 15156; i = i+384 )
 800096a:	23b4      	movs	r3, #180	; 0xb4
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800096e:	e019      	b.n	80009a4 <LCD_timer+0x108>
				for(j=0;j<120;j++)
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
 8000974:	e00c      	b.n	8000990 <LCD_timer+0xf4>
					Framememory[i+j] = n30[j+k];
 8000976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	441a      	add	r2, r3
 800097c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	440b      	add	r3, r1
 8000982:	4937      	ldr	r1, [pc, #220]	; (8000a60 <LCD_timer+0x1c4>)
 8000984:	5c89      	ldrb	r1, [r1, r2]
 8000986:	4a34      	ldr	r2, [pc, #208]	; (8000a58 <LCD_timer+0x1bc>)
 8000988:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 800098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098c:	3301      	adds	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000992:	2b77      	cmp	r3, #119	; 0x77
 8000994:	ddef      	ble.n	8000976 <LCD_timer+0xda>
				k = k +120;
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	3378      	adds	r3, #120	; 0x78
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 180; i < 15156; i = i+384 )
 800099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a6:	f643 3233 	movw	r2, #15155	; 0x3b33
 80009aa:	4293      	cmp	r3, r2
 80009ac:	dde0      	ble.n	8000970 <LCD_timer+0xd4>
			break;
 80009ae:	e04a      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
			for(i = 180; i < 15156; i = i+384 )
 80009b4:	23b4      	movs	r3, #180	; 0xb4
 80009b6:	623b      	str	r3, [r7, #32]
 80009b8:	e019      	b.n	80009ee <LCD_timer+0x152>
				for(j=0;j<120;j++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	e00c      	b.n	80009da <LCD_timer+0x13e>
					Framememory[i+j] = n45[j+k];
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	441a      	add	r2, r3
 80009c6:	6a39      	ldr	r1, [r7, #32]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	440b      	add	r3, r1
 80009cc:	4925      	ldr	r1, [pc, #148]	; (8000a64 <LCD_timer+0x1c8>)
 80009ce:	5c89      	ldrb	r1, [r1, r2]
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <LCD_timer+0x1bc>)
 80009d2:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	2b77      	cmp	r3, #119	; 0x77
 80009de:	ddef      	ble.n	80009c0 <LCD_timer+0x124>
				k = k +120;
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	3378      	adds	r3, #120	; 0x78
 80009e4:	61bb      	str	r3, [r7, #24]
			for(i = 180; i < 15156; i = i+384 )
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	f643 3233 	movw	r2, #15155	; 0x3b33
 80009f4:	4293      	cmp	r3, r2
 80009f6:	dde0      	ble.n	80009ba <LCD_timer+0x11e>
			break;
 80009f8:	e025      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
			for(i = 180; i < 15156; i = i+384 )
 80009fe:	23b4      	movs	r3, #180	; 0xb4
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e019      	b.n	8000a38 <LCD_timer+0x19c>
				for(j=0;j<120;j++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	e00c      	b.n	8000a24 <LCD_timer+0x188>
					Framememory[i+j] = n60[j+k];
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	441a      	add	r2, r3
 8000a10:	6979      	ldr	r1, [r7, #20]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	440b      	add	r3, r1
 8000a16:	4914      	ldr	r1, [pc, #80]	; (8000a68 <LCD_timer+0x1cc>)
 8000a18:	5c89      	ldrb	r1, [r1, r2]
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <LCD_timer+0x1bc>)
 8000a1c:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	3301      	adds	r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2b77      	cmp	r3, #119	; 0x77
 8000a28:	ddef      	ble.n	8000a0a <LCD_timer+0x16e>
				k = k +120;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3378      	adds	r3, #120	; 0x78
 8000a2e:	60fb      	str	r3, [r7, #12]
			for(i = 180; i < 15156; i = i+384 )
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	dde0      	ble.n	8000a04 <LCD_timer+0x168>
			break;
 8000a42:	e000      	b.n	8000a46 <LCD_timer+0x1aa>
			break;
 8000a44:	bf00      	nop
	}
}
 8000a46:	bf00      	nop
 8000a48:	374c      	adds	r7, #76	; 0x4c
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	24011390 	.word	0x24011390
 8000a58:	24017238 	.word	0x24017238
 8000a5c:	24012650 	.word	0x24012650
 8000a60:	24013910 	.word	0x24013910
 8000a64:	24014bd0 	.word	0x24014bd0
 8000a68:	24015e90 	.word	0x24015e90

08000a6c <LCD_fan>:

void LCD_fan(uint8_t RTC_ON)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	switch(RTC_ON)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <LCD_fan+0x16>
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d026      	beq.n	8000ace <LCD_fan+0x62>
			}
		}
			break;

		default:
			break;
 8000a80:	e04b      	b.n	8000b1a <LCD_fan+0xae>
			int a,b,c = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
			for(a = 23100; a <= 39996; a = a+384 )
 8000a86:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e019      	b.n	8000ac2 <LCD_fan+0x56>
				for(b=0;b<135;b++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	e00c      	b.n	8000aae <LCD_fan+0x42>
					Framememory[a+b] = fan_off[b+c];
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	441a      	add	r2, r3
 8000a9a:	69f9      	ldr	r1, [r7, #28]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	4921      	ldr	r1, [pc, #132]	; (8000b28 <LCD_fan+0xbc>)
 8000aa2:	5c89      	ldrb	r1, [r1, r2]
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <LCD_fan+0xc0>)
 8000aa6:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	2b86      	cmp	r3, #134	; 0x86
 8000ab2:	ddef      	ble.n	8000a94 <LCD_fan+0x28>
				c = c +135;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3387      	adds	r3, #135	; 0x87
 8000ab8:	617b      	str	r3, [r7, #20]
			for(a = 23100; a <= 39996; a = a+384 )
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	dde0      	ble.n	8000a8e <LCD_fan+0x22>
			break;
 8000acc:	e025      	b.n	8000b1a <LCD_fan+0xae>
			int a,b,c = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
			for(a = 23100; a <= 39996; a = a+384 )
 8000ad2:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	e019      	b.n	8000b0e <LCD_fan+0xa2>
				for(b=0;b<135;b++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e00c      	b.n	8000afa <LCD_fan+0x8e>
					Framememory[a+b] = fan_on[b+c];
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	6939      	ldr	r1, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	440b      	add	r3, r1
 8000aec:	4910      	ldr	r1, [pc, #64]	; (8000b30 <LCD_fan+0xc4>)
 8000aee:	5c89      	ldrb	r1, [r1, r2]
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LCD_fan+0xc0>)
 8000af2:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b86      	cmp	r3, #134	; 0x86
 8000afe:	ddef      	ble.n	8000ae0 <LCD_fan+0x74>
				c = c +135;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	3387      	adds	r3, #135	; 0x87
 8000b04:	60bb      	str	r3, [r7, #8]
			for(a = 23100; a <= 39996; a = a+384 )
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000b14:	4293      	cmp	r3, r2
 8000b16:	dde0      	ble.n	8000ada <LCD_fan+0x6e>
			break;
 8000b18:	bf00      	nop
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2400c018 	.word	0x2400c018
 8000b2c:	24017238 	.word	0x24017238
 8000b30:	2400d7d4 	.word	0x2400d7d4

08000b34 <LCD_speed>:

void LCD_speed(uint8_t speed)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b08d      	sub	sp, #52	; 0x34
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	switch(speed)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d052      	beq.n	8000bea <LCD_speed+0xb6>
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	dc76      	bgt.n	8000c36 <LCD_speed+0x102>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d002      	beq.n	8000b52 <LCD_speed+0x1e>
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d026      	beq.n	8000b9e <LCD_speed+0x6a>
		}
			break;


		default:
			break;
 8000b50:	e071      	b.n	8000c36 <LCD_speed+0x102>
			int i,j,n = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 25956; i <= 37760; i = i+384 )
 8000b56:	f246 5364 	movw	r3, #25956	; 0x6564
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b5c:	e019      	b.n	8000b92 <LCD_speed+0x5e>
				for(j=0;j<96;j++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b62:	e00c      	b.n	8000b7e <LCD_speed+0x4a>
					Framememory[i+j] = speed1[j+n];
 8000b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	441a      	add	r2, r3
 8000b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6e:	440b      	add	r3, r1
 8000b70:	4934      	ldr	r1, [pc, #208]	; (8000c44 <LCD_speed+0x110>)
 8000b72:	5c89      	ldrb	r1, [r1, r2]
 8000b74:	4a34      	ldr	r2, [pc, #208]	; (8000c48 <LCD_speed+0x114>)
 8000b76:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b80:	2b5f      	cmp	r3, #95	; 0x5f
 8000b82:	ddef      	ble.n	8000b64 <LCD_speed+0x30>
				n = n +96;
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	3360      	adds	r3, #96	; 0x60
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 25956; i <= 37760; i = i+384 )
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	f249 3280 	movw	r2, #37760	; 0x9380
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	dde0      	ble.n	8000b5e <LCD_speed+0x2a>
			break;
 8000b9c:	e04c      	b.n	8000c38 <LCD_speed+0x104>
			int i,j,n = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
			for(i = 25956; i <= 37760; i = i+384 )
 8000ba2:	f246 5364 	movw	r3, #25956	; 0x6564
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	e019      	b.n	8000bde <LCD_speed+0xaa>
				for(j=0;j<96;j++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	e00c      	b.n	8000bca <LCD_speed+0x96>
					Framememory[i+j] = speed2[j+n];
 8000bb0:	69fa      	ldr	r2, [r7, #28]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	441a      	add	r2, r3
 8000bb6:	6a39      	ldr	r1, [r7, #32]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	440b      	add	r3, r1
 8000bbc:	4923      	ldr	r1, [pc, #140]	; (8000c4c <LCD_speed+0x118>)
 8000bbe:	5c89      	ldrb	r1, [r1, r2]
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <LCD_speed+0x114>)
 8000bc2:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	2b5f      	cmp	r3, #95	; 0x5f
 8000bce:	ddef      	ble.n	8000bb0 <LCD_speed+0x7c>
				n = n +96;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	3360      	adds	r3, #96	; 0x60
 8000bd4:	61bb      	str	r3, [r7, #24]
			for(i = 25956; i <= 37760; i = i+384 )
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	f249 3280 	movw	r2, #37760	; 0x9380
 8000be4:	4293      	cmp	r3, r2
 8000be6:	dde0      	ble.n	8000baa <LCD_speed+0x76>
			break;
 8000be8:	e026      	b.n	8000c38 <LCD_speed+0x104>
			int i,j,n = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
			for(i = 25956; i <= 37760; i = i+384 )
 8000bee:	f246 5364 	movw	r3, #25956	; 0x6564
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	e019      	b.n	8000c2a <LCD_speed+0xf6>
				for(j=0;j<96;j++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	e00c      	b.n	8000c16 <LCD_speed+0xe2>
					Framememory[i+j] = speed3[j+n];
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	441a      	add	r2, r3
 8000c02:	6979      	ldr	r1, [r7, #20]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	440b      	add	r3, r1
 8000c08:	4911      	ldr	r1, [pc, #68]	; (8000c50 <LCD_speed+0x11c>)
 8000c0a:	5c89      	ldrb	r1, [r1, r2]
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <LCD_speed+0x114>)
 8000c0e:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	3301      	adds	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	2b5f      	cmp	r3, #95	; 0x5f
 8000c1a:	ddef      	ble.n	8000bfc <LCD_speed+0xc8>
				n = n +96;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3360      	adds	r3, #96	; 0x60
 8000c20:	60fb      	str	r3, [r7, #12]
			for(i = 25956; i <= 37760; i = i+384 )
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f249 3280 	movw	r2, #37760	; 0x9380
 8000c30:	4293      	cmp	r3, r2
 8000c32:	dde0      	ble.n	8000bf6 <LCD_speed+0xc2>
			break;
 8000c34:	e000      	b.n	8000c38 <LCD_speed+0x104>
			break;
 8000c36:	bf00      	nop
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3734      	adds	r7, #52	; 0x34
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	2400ef90 	.word	0x2400ef90
 8000c48:	24017238 	.word	0x24017238
 8000c4c:	2400fb90 	.word	0x2400fb90
 8000c50:	24010790 	.word	0x24010790

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000c60:	bf00      	nop
 8000c62:	4baf      	ldr	r3, [pc, #700]	; (8000f20 <main+0x2cc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d004      	beq.n	8000c78 <main+0x24>
 8000c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dcf4      	bgt.n	8000c62 <main+0xe>
		;
	if (timeout < 0) {
 8000c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da01      	bge.n	8000c82 <main+0x2e>
		Error_Handler();
 8000c7e:	f000 fdbf 	bl	8001800 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c82:	f001 f9f1 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c86:	f000 f9a5 	bl	8000fd4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000c8a:	4ba5      	ldr	r3, [pc, #660]	; (8000f20 <main+0x2cc>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4aa3      	ldr	r2, [pc, #652]	; (8000f20 <main+0x2cc>)
 8000c92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4ba1      	ldr	r3, [pc, #644]	; (8000f20 <main+0x2cc>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f004 fffd 	bl	8005ca8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f005 f813 	bl	8005cdc <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000cbc:	bf00      	nop
 8000cbe:	4b98      	ldr	r3, [pc, #608]	; (8000f20 <main+0x2cc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d104      	bne.n	8000cd4 <main+0x80>
 8000cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dcf4      	bgt.n	8000cbe <main+0x6a>
		;
	if (timeout < 0) {
 8000cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da01      	bge.n	8000cde <main+0x8a>
		Error_Handler();
 8000cda:	f000 fd91 	bl	8001800 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f000 fc8f 	bl	8001600 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ce2:	f000 f9fd 	bl	80010e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ce6:	f000 fbdd 	bl	80014a4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000cea:	f000 fc59 	bl	80015a0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cee:	f000 fad5 	bl	800129c <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cf2:	f000 fc23 	bl	800153c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000cf6:	f000 fb29 	bl	800134c <MX_TIM1_Init>
  MX_RTC_Init();
 8000cfa:	f000 fa3d 	bl	8001178 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  	//�?ำหนดขา pin
	ST7735.hspi = &hspi1;
 8000cfe:	4b89      	ldr	r3, [pc, #548]	; (8000f24 <main+0x2d0>)
 8000d00:	4a89      	ldr	r2, [pc, #548]	; (8000f28 <main+0x2d4>)
 8000d02:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 8000d04:	4b87      	ldr	r3, [pc, #540]	; (8000f24 <main+0x2d0>)
 8000d06:	4a89      	ldr	r2, [pc, #548]	; (8000f2c <main+0x2d8>)
 8000d08:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 8000d0a:	4b86      	ldr	r3, [pc, #536]	; (8000f24 <main+0x2d0>)
 8000d0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d10:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 8000d12:	4b84      	ldr	r3, [pc, #528]	; (8000f24 <main+0x2d0>)
 8000d14:	4a85      	ldr	r2, [pc, #532]	; (8000f2c <main+0x2d8>)
 8000d16:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 8000d18:	4b82      	ldr	r3, [pc, #520]	; (8000f24 <main+0x2d0>)
 8000d1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d1e:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 8000d20:	4b80      	ldr	r3, [pc, #512]	; (8000f24 <main+0x2d0>)
 8000d22:	4a83      	ldr	r2, [pc, #524]	; (8000f30 <main+0x2dc>)
 8000d24:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 8000d26:	4b7f      	ldr	r3, [pc, #508]	; (8000f24 <main+0x2d0>)
 8000d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2c:	611a      	str	r2, [r3, #16]
	//เริ่ม�?ารเขียน sequence data
	LCD_init(&ST7735);
 8000d2e:	487d      	ldr	r0, [pc, #500]	; (8000f24 <main+0x2d0>)
 8000d30:	f7ff fce8 	bl	8000704 <LCD_init>

	//start pwm
	//tim1 @APB2 timer clock 100 MHz
	//counter period 10000 -> 10 kHz
	//couter period 10000 = pwm 100%
	HAL_TIM_Base_Start(&htim1);
 8000d34:	487f      	ldr	r0, [pc, #508]	; (8000f34 <main+0x2e0>)
 8000d36:	f009 f937 	bl	8009fa8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	487d      	ldr	r0, [pc, #500]	; (8000f34 <main+0x2e0>)
 8000d3e:	f009 f9fd 	bl	800a13c <HAL_TIM_PWM_Start>

	//initial parameter
	shareMemory->PWM = 2500; //pwm @ 25%
 8000d42:	4b7d      	ldr	r3, [pc, #500]	; (8000f38 <main+0x2e4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d4a:	601a      	str	r2, [r3, #0]
	shareMemory->fan_mode = 1; //fan low speed
 8000d4c:	4b7a      	ldr	r3, [pc, #488]	; (8000f38 <main+0x2e4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2201      	movs	r2, #1
 8000d52:	711a      	strb	r2, [r3, #4]
	shareMemory->mode_change = 0; //if fan changes mode
 8000d54:	4b78      	ldr	r3, [pc, #480]	; (8000f38 <main+0x2e4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	715a      	strb	r2, [r3, #5]
	shareMemory->RTC_ON = 0; //does rtc work?
 8000d5c:	4b76      	ldr	r3, [pc, #472]	; (8000f38 <main+0x2e4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	719a      	strb	r2, [r3, #6]
	shareMemory->RTC_change = 0; //rtc change
 8000d64:	4b74      	ldr	r3, [pc, #464]	; (8000f38 <main+0x2e4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	71da      	strb	r2, [r3, #7]
	shareMemory->finish = 0; //does fan work 1 min?
 8000d6c:	4b72      	ldr	r3, [pc, #456]	; (8000f38 <main+0x2e4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2200      	movs	r2, #0
 8000d72:	721a      	strb	r2, [r3, #8]
	shareMemory->led1 = 0; //led1 status
 8000d74:	4b70      	ldr	r3, [pc, #448]	; (8000f38 <main+0x2e4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	725a      	strb	r2, [r3, #9]
	shareMemory->led2 = 1; //led2 status
 8000d7c:	4b6e      	ldr	r3, [pc, #440]	; (8000f38 <main+0x2e4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2201      	movs	r2, #1
 8000d82:	729a      	strb	r2, [r3, #10]
	shareMemory->led3 = 1; //led3 status
 8000d84:	4b6c      	ldr	r3, [pc, #432]	; (8000f38 <main+0x2e4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	72da      	strb	r2, [r3, #11]

	//led setup
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, shareMemory->led1); //show led1
 8000d8c:	4b6a      	ldr	r3, [pc, #424]	; (8000f38 <main+0x2e4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	7a5b      	ldrb	r3, [r3, #9]
 8000d92:	461a      	mov	r2, r3
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4868      	ldr	r0, [pc, #416]	; (8000f3c <main+0x2e8>)
 8000d9a:	f004 ff6b 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, shareMemory->led2); //close led2
 8000d9e:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <main+0x2e4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	7a9b      	ldrb	r3, [r3, #10]
 8000da4:	461a      	mov	r2, r3
 8000da6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000daa:	4864      	ldr	r0, [pc, #400]	; (8000f3c <main+0x2e8>)
 8000dac:	f004 ff62 	bl	8005c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, shareMemory->led3); //close led3
 8000db0:	4b61      	ldr	r3, [pc, #388]	; (8000f38 <main+0x2e4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	7adb      	ldrb	r3, [r3, #11]
 8000db6:	461a      	mov	r2, r3
 8000db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dbc:	485f      	ldr	r0, [pc, #380]	; (8000f3c <main+0x2e8>)
 8000dbe:	f004 ff59 	bl	8005c74 <HAL_GPIO_WritePin>

	//lcd UI
	memcpy(Framememory,fan,sizeof(fan)); //background
 8000dc2:	4a5f      	ldr	r2, [pc, #380]	; (8000f40 <main+0x2ec>)
 8000dc4:	4b5f      	ldr	r3, [pc, #380]	; (8000f44 <main+0x2f0>)
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dce:	461a      	mov	r2, r3
 8000dd0:	f00c f850 	bl	800ce74 <memcpy>
	LCD_speed(shareMemory->fan_mode); //show fan mode
 8000dd4:	4b58      	ldr	r3, [pc, #352]	; (8000f38 <main+0x2e4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	791b      	ldrb	r3, [r3, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff feaa 	bl	8000b34 <LCD_speed>
	LCD_fan(shareMemory->RTC_ON); //show rtc status
 8000de0:	4b55      	ldr	r3, [pc, #340]	; (8000f38 <main+0x2e4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	799b      	ldrb	r3, [r3, #6]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fe40 	bl	8000a6c <LCD_fan>
	LCD_timer(0x00); //show timer
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fd55 	bl	800089c <LCD_timer>
	//flush ข้อมูล dma
	LCD_flush(&ST7735);
 8000df2:	484c      	ldr	r0, [pc, #304]	; (8000f24 <main+0x2d0>)
 8000df4:	f7ff fd40 	bl	8000878 <LCD_flush>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_HSEM_FastTake(1) == HAL_OK) //hsem cm7 is ready
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f004 ff55 	bl	8005ca8 <HAL_HSEM_FastTake>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f9      	bne.n	8000df8 <main+0x1a4>
		{

			if (shareMemory->RTC_change ) //rtc status change
 8000e04:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <main+0x2e4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	79db      	ldrb	r3, [r3, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d021      	beq.n	8000e52 <main+0x1fe>
			{
				LCD_fan(shareMemory->RTC_ON); //show fan status on
 8000e0e:	4b4a      	ldr	r3, [pc, #296]	; (8000f38 <main+0x2e4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	799b      	ldrb	r3, [r3, #6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe29 	bl	8000a6c <LCD_fan>
				LCD_flush(&ST7735); //spi transmit dma normal
 8000e1a:	4842      	ldr	r0, [pc, #264]	; (8000f24 <main+0x2d0>)
 8000e1c:	f7ff fd2c 	bl	8000878 <LCD_flush>
				shareMemory->RTC_change = 0; //change rtc status (reset)
 8000e20:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <main+0x2e4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2200      	movs	r2, #0
 8000e26:	71da      	strb	r2, [r3, #7]

				//rtc work
				//start clock
				RTC_TimeTypeDef sTime = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
				sTime.Hours =0x00; //0x14 (2 pm.)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	753b      	strb	r3, [r7, #20]
				sTime.Minutes =0x00; //0x30 (half hour or 30 min)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	757b      	strb	r3, [r7, #21]
				sTime.Seconds = 0x00; // 0 second
 8000e40:	2300      	movs	r3, #0
 8000e42:	75bb      	strb	r3, [r7, #22]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);//set rtc
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	483e      	ldr	r0, [pc, #248]	; (8000f48 <main+0x2f4>)
 8000e4e:	f007 fc81 	bl	8008754 <HAL_RTC_SetTime>

			}

			if (shareMemory->mode_change) //fan mode chande
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <main+0x2e4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	795b      	ldrb	r3, [r3, #5]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d027      	beq.n	8000eac <main+0x258>
			{
				LCD_speed(shareMemory->fan_mode); //change fan speed
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <main+0x2e4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	791b      	ldrb	r3, [r3, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe66 	bl	8000b34 <LCD_speed>
				LCD_flush(&ST7735); //spi transmit dma normal
 8000e68:	482e      	ldr	r0, [pc, #184]	; (8000f24 <main+0x2d0>)
 8000e6a:	f7ff fd05 	bl	8000878 <LCD_flush>
				shareMemory->mode_change = 0; ////change fan status (reset)
 8000e6e:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <main+0x2e4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2200      	movs	r2, #0
 8000e74:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, shareMemory->led1); //show led1
 8000e76:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <main+0x2e4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	7a5b      	ldrb	r3, [r3, #9]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e82:	482e      	ldr	r0, [pc, #184]	; (8000f3c <main+0x2e8>)
 8000e84:	f004 fef6 	bl	8005c74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, shareMemory->led2); //show led2
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <main+0x2e4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	7a9b      	ldrb	r3, [r3, #10]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e94:	4829      	ldr	r0, [pc, #164]	; (8000f3c <main+0x2e8>)
 8000e96:	f004 feed 	bl	8005c74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, shareMemory->led3); //show led3
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <main+0x2e4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	7adb      	ldrb	r3, [r3, #11]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea6:	4825      	ldr	r0, [pc, #148]	; (8000f3c <main+0x2e8>)
 8000ea8:	f004 fee4 	bl	8005c74 <HAL_GPIO_WritePin>
			}

			if (shareMemory->RTC_ON == 1) //if rtc work
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <main+0x2e4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	799b      	ldrb	r3, [r3, #6]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d172      	bne.n	8000f9c <main+0x348>
			{
				RTC_TimeTypeDef sTime = NowTime; //save time
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <main+0x2f8>)
 8000eb8:	463c      	mov	r4, r7
 8000eba:	461d      	mov	r5, r3
 8000ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	6023      	str	r3, [r4, #0]

				//time over flow
				if (sTime.Seconds >= 0x60)
 8000ec4:	78bb      	ldrb	r3, [r7, #2]
 8000ec6:	2b5f      	cmp	r3, #95	; 0x5f
 8000ec8:	d919      	bls.n	8000efe <main+0x2aa>
				{
					sTime.Seconds -= 0x60;
 8000eca:	78bb      	ldrb	r3, [r7, #2]
 8000ecc:	3b60      	subs	r3, #96	; 0x60
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	70bb      	strb	r3, [r7, #2]
					sTime.Minutes++;
 8000ed2:	787b      	ldrb	r3, [r7, #1]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	707b      	strb	r3, [r7, #1]
					if (sTime.Minutes >= 0x60)
 8000eda:	787b      	ldrb	r3, [r7, #1]
 8000edc:	2b5f      	cmp	r3, #95	; 0x5f
 8000ede:	d90e      	bls.n	8000efe <main+0x2aa>
					{
						sTime.Minutes -= 0x60;
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	3b60      	subs	r3, #96	; 0x60
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	707b      	strb	r3, [r7, #1]
						sTime.Hours++;
 8000ee8:	783b      	ldrb	r3, [r7, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	703b      	strb	r3, [r7, #0]
						if (sTime.Hours >= 0x24)
 8000ef0:	783b      	ldrb	r3, [r7, #0]
 8000ef2:	2b23      	cmp	r3, #35	; 0x23
 8000ef4:	d903      	bls.n	8000efe <main+0x2aa>
						{
							sTime.Hours -= 0x24;
 8000ef6:	783b      	ldrb	r3, [r7, #0]
 8000ef8:	3b24      	subs	r3, #36	; 0x24
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	703b      	strb	r3, [r7, #0]
						}
					}
				}

				//if fan does not work for 1 min
				if (sTime.Minutes < 0x01)
 8000efe:	787b      	ldrb	r3, [r7, #1]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d133      	bne.n	8000f6c <main+0x318>
				{
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, shareMemory->PWM); //drive motor
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <main+0x2e4>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <main+0x2e0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34

					//show timer every 15 sec
					if (sTime.Seconds == 0x00 || sTime.Seconds == 0x15 || sTime.Seconds ==0x30 ||sTime.Seconds == 0x45)
 8000f10:	78bb      	ldrb	r3, [r7, #2]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d022      	beq.n	8000f5c <main+0x308>
 8000f16:	78bb      	ldrb	r3, [r7, #2]
 8000f18:	2b15      	cmp	r3, #21
 8000f1a:	d01f      	beq.n	8000f5c <main+0x308>
 8000f1c:	e018      	b.n	8000f50 <main+0x2fc>
 8000f1e:	bf00      	nop
 8000f20:	58024400 	.word	0x58024400
 8000f24:	24023238 	.word	0x24023238
 8000f28:	24023858 	.word	0x24023858
 8000f2c:	58020c00 	.word	0x58020c00
 8000f30:	58021800 	.word	0x58021800
 8000f34:	2402380c 	.word	0x2402380c
 8000f38:	24017150 	.word	0x24017150
 8000f3c:	58020800 	.word	0x58020800
 8000f40:	24017238 	.word	0x24017238
 8000f44:	24000018 	.word	0x24000018
 8000f48:	240237e8 	.word	0x240237e8
 8000f4c:	240238e0 	.word	0x240238e0
 8000f50:	78bb      	ldrb	r3, [r7, #2]
 8000f52:	2b30      	cmp	r3, #48	; 0x30
 8000f54:	d002      	beq.n	8000f5c <main+0x308>
 8000f56:	78bb      	ldrb	r3, [r7, #2]
 8000f58:	2b45      	cmp	r3, #69	; 0x45
 8000f5a:	d11f      	bne.n	8000f9c <main+0x348>
					{
						LCD_timer(sTime.Seconds); //show timer
 8000f5c:	78bb      	ldrb	r3, [r7, #2]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fc9c 	bl	800089c <LCD_timer>
						LCD_flush(&ST7735); //spi transmit dma normal
 8000f64:	4815      	ldr	r0, [pc, #84]	; (8000fbc <main+0x368>)
 8000f66:	f7ff fc87 	bl	8000878 <LCD_flush>
 8000f6a:	e017      	b.n	8000f9c <main+0x348>

				}
				//if fan works for 1 min
				else
				{
					shareMemory->RTC_ON = 0; //rtc work done (reset)
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <main+0x36c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	719a      	strb	r2, [r3, #6]
					shareMemory->finish = 1; //work for 1 min is done
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <main+0x36c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	721a      	strb	r2, [r3, #8]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0); //stop driving motor
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <main+0x370>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2200      	movs	r2, #0
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34

					LCD_timer(0x60); //show 60 sec
 8000f84:	2060      	movs	r0, #96	; 0x60
 8000f86:	f7ff fc89 	bl	800089c <LCD_timer>
					LCD_fan(shareMemory->RTC_ON); //show rtc status
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <main+0x36c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	799b      	ldrb	r3, [r3, #6]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fd6b 	bl	8000a6c <LCD_fan>
					LCD_flush(&ST7735); //spi transmit dma normal
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <main+0x368>)
 8000f98:	f7ff fc6e 	bl	8000878 <LCD_flush>

				}
			}

			//read RTC
			HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	490a      	ldr	r1, [pc, #40]	; (8000fc8 <main+0x374>)
 8000fa0:	480a      	ldr	r0, [pc, #40]	; (8000fcc <main+0x378>)
 8000fa2:	f007 fc75 	bl	8008890 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4909      	ldr	r1, [pc, #36]	; (8000fd0 <main+0x37c>)
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <main+0x378>)
 8000fac:	f007 fd54 	bl	8008a58 <HAL_RTC_GetDate>

			//hsem release
			HAL_HSEM_Release(1, 0);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f004 fe92 	bl	8005cdc <HAL_HSEM_Release>
		if (HAL_HSEM_FastTake(1) == HAL_OK) //hsem cm7 is ready
 8000fb8:	e71e      	b.n	8000df8 <main+0x1a4>
 8000fba:	bf00      	nop
 8000fbc:	24023238 	.word	0x24023238
 8000fc0:	24017150 	.word	0x24017150
 8000fc4:	2402380c 	.word	0x2402380c
 8000fc8:	240238e0 	.word	0x240238e0
 8000fcc:	240237e8 	.word	0x240237e8
 8000fd0:	240237e4 	.word	0x240237e4

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b09c      	sub	sp, #112	; 0x70
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	224c      	movs	r2, #76	; 0x4c
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00b ff54 	bl	800ce90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2220      	movs	r2, #32
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00b ff4e 	bl	800ce90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ff4:	2004      	movs	r0, #4
 8000ff6:	f004 ffcd 	bl	8005f94 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <SystemClock_Config+0x100>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a34      	ldr	r2, [pc, #208]	; (80010d4 <SystemClock_Config+0x100>)
 8001004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <SystemClock_Config+0x100>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <SystemClock_Config+0x104>)
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <SystemClock_Config+0x104>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <SystemClock_Config+0x104>)
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800102c:	bf00      	nop
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <SystemClock_Config+0x100>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800103a:	d1f8      	bne.n	800102e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <SystemClock_Config+0x108>)
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	f023 0303 	bic.w	r3, r3, #3
 8001044:	4a25      	ldr	r2, [pc, #148]	; (80010dc <SystemClock_Config+0x108>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800104c:	2309      	movs	r3, #9
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001050:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001056:	2301      	movs	r3, #1
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105e:	2302      	movs	r3, #2
 8001060:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001066:	2319      	movs	r3, #25
 8001068:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800106a:	2302      	movs	r3, #2
 800106c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800106e:	2302      	movs	r3, #2
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001076:	230c      	movs	r3, #12
 8001078:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800107a:	2300      	movs	r3, #0
 800107c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4618      	mov	r0, r3
 8001088:	f004 ffee 	bl	8006068 <HAL_RCC_OscConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001092:	f000 fbb5 	bl	8001800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001096:	233f      	movs	r3, #63	; 0x3f
 8001098:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109a:	2303      	movs	r3, #3
 800109c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010a6:	2340      	movs	r3, #64	; 0x40
 80010a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010aa:	2340      	movs	r3, #64	; 0x40
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010b4:	2340      	movs	r3, #64	; 0x40
 80010b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f005 fbe3 	bl	8006888 <HAL_RCC_ClockConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80010c8:	f000 fb9a 	bl	8001800 <Error_Handler>
  }
}
 80010cc:	bf00      	nop
 80010ce:	3770      	adds	r7, #112	; 0x70
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	58024800 	.word	0x58024800
 80010d8:	58000400 	.word	0x58000400
 80010dc:	58024400 	.word	0x58024400

080010e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <MX_ETH_Init+0x80>)
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <MX_ETH_Init+0x84>)
 80010e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_ETH_Init+0x88>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_ETH_Init+0x88>)
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_ETH_Init+0x88>)
 80010f8:	22e1      	movs	r2, #225	; 0xe1
 80010fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_ETH_Init+0x88>)
 80010fe:	2200      	movs	r2, #0
 8001100:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_ETH_Init+0x88>)
 8001104:	2200      	movs	r2, #0
 8001106:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_ETH_Init+0x88>)
 800110a:	2200      	movs	r2, #0
 800110c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_ETH_Init+0x80>)
 8001110:	4a15      	ldr	r2, [pc, #84]	; (8001168 <MX_ETH_Init+0x88>)
 8001112:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_ETH_Init+0x80>)
 8001116:	2201      	movs	r2, #1
 8001118:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_ETH_Init+0x80>)
 800111c:	4a13      	ldr	r2, [pc, #76]	; (800116c <MX_ETH_Init+0x8c>)
 800111e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_ETH_Init+0x80>)
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <MX_ETH_Init+0x90>)
 8001124:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_ETH_Init+0x80>)
 8001128:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800112c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <MX_ETH_Init+0x80>)
 8001130:	f003 ffda 	bl	80050e8 <HAL_ETH_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800113a:	f000 fb61 	bl	8001800 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800113e:	2234      	movs	r2, #52	; 0x34
 8001140:	2100      	movs	r1, #0
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_ETH_Init+0x94>)
 8001144:	f00b fea4 	bl	800ce90 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_ETH_Init+0x94>)
 800114a:	2221      	movs	r2, #33	; 0x21
 800114c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_ETH_Init+0x94>)
 8001150:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001154:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_ETH_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	240238f4 	.word	0x240238f4
 8001164:	40028000 	.word	0x40028000
 8001168:	24023254 	.word	0x24023254
 800116c:	240171bc 	.word	0x240171bc
 8001170:	2401715c 	.word	0x2401715c
 8001174:	2402397c 	.word	0x2402397c

08001178 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b090      	sub	sp, #64	; 0x40
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800117e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2228      	movs	r2, #40	; 0x28
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f00b fe79 	bl	800ce90 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800119e:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <MX_RTC_Init+0x118>)
 80011a0:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <MX_RTC_Init+0x11c>)
 80011a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <MX_RTC_Init+0x118>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <MX_RTC_Init+0x118>)
 80011ac:	227f      	movs	r2, #127	; 0x7f
 80011ae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <MX_RTC_Init+0x118>)
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <MX_RTC_Init+0x118>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <MX_RTC_Init+0x118>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <MX_RTC_Init+0x118>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <MX_RTC_Init+0x118>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011ce:	4830      	ldr	r0, [pc, #192]	; (8001290 <MX_RTC_Init+0x118>)
 80011d0:	f007 fa48 	bl	8008664 <HAL_RTC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80011da:	f000 fb11 	bl	8001800 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	2201      	movs	r2, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	4823      	ldr	r0, [pc, #140]	; (8001290 <MX_RTC_Init+0x118>)
 8001202:	f007 faa7 	bl	8008754 <HAL_RTC_SetTime>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800120c:	f000 faf8 	bl	8001800 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001210:	2301      	movs	r3, #1
 8001212:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001216:	2301      	movs	r3, #1
 8001218:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800121c:	2301      	movs	r3, #1
 800121e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001222:	2300      	movs	r3, #0
 8001224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	4817      	ldr	r0, [pc, #92]	; (8001290 <MX_RTC_Init+0x118>)
 8001232:	f007 fb89 	bl	8008948 <HAL_RTC_SetDate>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800123c:	f000 fae0 	bl	8001800 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001240:	2300      	movs	r3, #0
 8001242:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001244:	2300      	movs	r3, #0
 8001246:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001248:	2300      	movs	r3, #0
 800124a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_RTC_Init+0x120>)
 800125a:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001264:	2301      	movs	r3, #1
 8001266:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800126a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	2201      	movs	r2, #1
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_RTC_Init+0x118>)
 8001278:	f007 fc3c 	bl	8008af4 <HAL_RTC_SetAlarm_IT>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001282:	f000 fabd 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3740      	adds	r7, #64	; 0x40
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	240237e8 	.word	0x240237e8
 8001294:	58004000 	.word	0x58004000
 8001298:	00808080 	.word	0x00808080

0800129c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <MX_SPI1_Init+0xac>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012d2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80012d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001300:	2200      	movs	r2, #0
 8001302:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001306:	2200      	movs	r2, #0
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_SPI1_Init+0xa8>)
 800130c:	2200      	movs	r2, #0
 800130e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001312:	2200      	movs	r2, #0
 8001314:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001318:	2200      	movs	r2, #0
 800131a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_SPI1_Init+0xa8>)
 800131e:	2200      	movs	r2, #0
 8001320:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_SPI1_Init+0xa8>)
 800132c:	2200      	movs	r2, #0
 800132e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_SPI1_Init+0xa8>)
 8001332:	f007 fe3f 	bl	8008fb4 <HAL_SPI_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800133c:	f000 fa60 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	24023858 	.word	0x24023858
 8001348:	40013000 	.word	0x40013000

0800134c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b09a      	sub	sp, #104	; 0x68
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	222c      	movs	r2, #44	; 0x2c
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f00b fd82 	bl	800ce90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138c:	4b43      	ldr	r3, [pc, #268]	; (800149c <MX_TIM1_Init+0x150>)
 800138e:	4a44      	ldr	r2, [pc, #272]	; (80014a0 <MX_TIM1_Init+0x154>)
 8001390:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001392:	4b42      	ldr	r3, [pc, #264]	; (800149c <MX_TIM1_Init+0x150>)
 8001394:	2200      	movs	r2, #0
 8001396:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <MX_TIM1_Init+0x150>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800139e:	4b3f      	ldr	r3, [pc, #252]	; (800149c <MX_TIM1_Init+0x150>)
 80013a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80013a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <MX_TIM1_Init+0x150>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <MX_TIM1_Init+0x150>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <MX_TIM1_Init+0x150>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b8:	4838      	ldr	r0, [pc, #224]	; (800149c <MX_TIM1_Init+0x150>)
 80013ba:	f008 fd9e 	bl	8009efa <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 fa1c 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013d2:	4619      	mov	r1, r3
 80013d4:	4831      	ldr	r0, [pc, #196]	; (800149c <MX_TIM1_Init+0x150>)
 80013d6:	f009 f8c9 	bl	800a56c <HAL_TIM_ConfigClockSource>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013e0:	f000 fa0e 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e4:	482d      	ldr	r0, [pc, #180]	; (800149c <MX_TIM1_Init+0x150>)
 80013e6:	f008 fe47 	bl	800a078 <HAL_TIM_PWM_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013f0:	f000 fa06 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001400:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001404:	4619      	mov	r1, r3
 8001406:	4825      	ldr	r0, [pc, #148]	; (800149c <MX_TIM1_Init+0x150>)
 8001408:	f009 fdd0 	bl	800afac <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001412:	f000 f9f5 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001416:	2360      	movs	r3, #96	; 0x60
 8001418:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001422:	2300      	movs	r3, #0
 8001424:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	4818      	ldr	r0, [pc, #96]	; (800149c <MX_TIM1_Init+0x150>)
 800143c:	f008 ff86 	bl	800a34c <HAL_TIM_PWM_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001446:	f000 f9db 	bl	8001800 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800145e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001462:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800146c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <MX_TIM1_Init+0x150>)
 8001480:	f009 fe1c 	bl	800b0bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800148a:	f000 f9b9 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <MX_TIM1_Init+0x150>)
 8001490:	f000 fbc2 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 8001494:	bf00      	nop
 8001496:	3768      	adds	r7, #104	; 0x68
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2402380c 	.word	0x2402380c
 80014a0:	40010000 	.word	0x40010000

080014a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <MX_USART3_UART_Init+0x94>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014ee:	f009 fe63 	bl	800b1b8 <HAL_UART_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014f8:	f000 f982 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001500:	f00b f90b 	bl	800c71a <HAL_UARTEx_SetTxFifoThreshold>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800150a:	f000 f979 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150e:	2100      	movs	r1, #0
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001512:	f00b f940 	bl	800c796 <HAL_UARTEx_SetRxFifoThreshold>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800151c:	f000 f970 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001522:	f00b f8c1 	bl	800c6a8 <HAL_UARTEx_DisableFifoMode>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800152c:	f000 f968 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	240232d4 	.word	0x240232d4
 8001538:	40004800 	.word	0x40004800

0800153c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001542:	4a16      	ldr	r2, [pc, #88]	; (800159c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001544:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001548:	2209      	movs	r2, #9
 800154a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800154e:	2202      	movs	r2, #2
 8001550:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800155a:	2202      	movs	r2, #2
 800155c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001560:	2200      	movs	r2, #0
 8001562:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001566:	2200      	movs	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001572:	2201      	movs	r2, #1
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001578:	2201      	movs	r2, #1
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800157e:	2200      	movs	r2, #0
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001584:	f004 fbbe 	bl	8005d04 <HAL_PCD_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800158e:	f000 f937 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	24023364 	.word	0x24023364
 800159c:	40080000 	.word	0x40080000

080015a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <MX_DMA_Init+0x5c>)
 80015a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <MX_DMA_Init+0x5c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_DMA_Init+0x5c>)
 80015b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	200b      	movs	r0, #11
 80015ca:	f000 fefe 	bl	80023ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015ce:	200b      	movs	r0, #11
 80015d0:	f000 ff15 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	200c      	movs	r0, #12
 80015da:	f000 fef6 	bl	80023ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015de:	200c      	movs	r0, #12
 80015e0:	f000 ff0d 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	200d      	movs	r0, #13
 80015ea:	f000 feee 	bl	80023ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80015ee:	200d      	movs	r0, #13
 80015f0:	f000 ff05 	bl	80023fe <HAL_NVIC_EnableIRQ>

}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	58024400 	.word	0x58024400

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	4a60      	ldr	r2, [pc, #384]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001626:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
 8001632:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001634:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	4a59      	ldr	r2, [pc, #356]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 800163c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001662:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	4a4a      	ldr	r2, [pc, #296]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168e:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	4a42      	ldr	r2, [pc, #264]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	4a3b      	ldr	r2, [pc, #236]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016b4:	f043 0308 	orr.w	r3, r3, #8
 80016b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <MX_GPIO_Init+0x1a0>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2101      	movs	r1, #1
 80016ec:	482d      	ldr	r0, [pc, #180]	; (80017a4 <MX_GPIO_Init+0x1a4>)
 80016ee:	f004 fac1 	bl	8005c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f8:	482b      	ldr	r0, [pc, #172]	; (80017a8 <MX_GPIO_Init+0x1a8>)
 80016fa:	f004 fabb 	bl	8005c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001704:	4828      	ldr	r0, [pc, #160]	; (80017a8 <MX_GPIO_Init+0x1a8>)
 8001706:	f004 fab5 	bl	8005c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001710:	4826      	ldr	r0, [pc, #152]	; (80017ac <MX_GPIO_Init+0x1ac>)
 8001712:	f004 faaf 	bl	8005c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171c:	4824      	ldr	r0, [pc, #144]	; (80017b0 <MX_GPIO_Init+0x1b0>)
 800171e:	f004 faa9 	bl	8005c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001722:	2301      	movs	r3, #1
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	481a      	ldr	r0, [pc, #104]	; (80017a4 <MX_GPIO_Init+0x1a4>)
 800173a:	f004 f8eb 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 800173e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <MX_GPIO_Init+0x1a8>)
 8001758:	f004 f8dc 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : led3_Pin led2_Pin led1_Pin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 800175c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <MX_GPIO_Init+0x1ac>)
 8001776:	f004 f8cd 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800177a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <MX_GPIO_Init+0x1b0>)
 8001794:	f004 f8be 	bl	8005914 <HAL_GPIO_Init>

}
 8001798:	bf00      	nop
 800179a:	3730      	adds	r7, #48	; 0x30
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	58024400 	.word	0x58024400
 80017a4:	58020400 	.word	0x58020400
 80017a8:	58020c00 	.word	0x58020c00
 80017ac:	58020800 	.word	0x58020800
 80017b0:	58021800 	.word	0x58021800

080017b4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	shareMemory->RTC_ON = 0; //rtc work done (reset)
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_RTC_AlarmAEventCallback+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2200      	movs	r2, #0
 80017c2:	719a      	strb	r2, [r3, #6]
	shareMemory->finish = 1; //work for 1 min is done
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RTC_AlarmAEventCallback+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0); //stop driving motor
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RTC_AlarmAEventCallback+0x44>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34

	LCD_timer(0x60); //show 60 sec
 80017d4:	2060      	movs	r0, #96	; 0x60
 80017d6:	f7ff f861 	bl	800089c <LCD_timer>
	LCD_fan(shareMemory->RTC_ON); //show rtc status
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_RTC_AlarmAEventCallback+0x40>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	799b      	ldrb	r3, [r3, #6]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff f943 	bl	8000a6c <LCD_fan>
	LCD_flush(&ST7735); //spi transmit dma normal
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <HAL_RTC_AlarmAEventCallback+0x48>)
 80017e8:	f7ff f846 	bl	8000878 <LCD_flush>

}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	24017150 	.word	0x24017150
 80017f8:	2402380c 	.word	0x2402380c
 80017fc:	24023238 	.word	0x24023238

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001808:	e7fe      	b.n	8001808 <Error_Handler+0x8>
	...

0800180c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_MspInit+0x30>)
 8001814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001818:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x30>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x30>)
 8001824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	58024400 	.word	0x58024400

08001840 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08e      	sub	sp, #56	; 0x38
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a59      	ldr	r2, [pc, #356]	; (80019c4 <HAL_ETH_MspInit+0x184>)
 800185e:	4293      	cmp	r3, r2
 8001860:	f040 80ab 	bne.w	80019ba <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001864:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 8001866:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800186a:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 800186c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001870:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001874:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 8001876:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800187a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 8001884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001888:	4a4f      	ldr	r2, [pc, #316]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 800188a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001892:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 8001894:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80018a0:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 80018a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018a6:	4a48      	ldr	r2, [pc, #288]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018b0:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 80018b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c4:	4a40      	ldr	r2, [pc, #256]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ce:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e2:	4a39      	ldr	r2, [pc, #228]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 80018fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001900:	4a31      	ldr	r2, [pc, #196]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191e:	4a2a      	ldr	r2, [pc, #168]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 8001920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_ETH_MspInit+0x188>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001936:	2332      	movs	r3, #50	; 0x32
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001946:	230b      	movs	r3, #11
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194e:	4619      	mov	r1, r3
 8001950:	481e      	ldr	r0, [pc, #120]	; (80019cc <HAL_ETH_MspInit+0x18c>)
 8001952:	f003 ffdf 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001956:	2386      	movs	r3, #134	; 0x86
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001966:	230b      	movs	r3, #11
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	4817      	ldr	r0, [pc, #92]	; (80019d0 <HAL_ETH_MspInit+0x190>)
 8001972:	f003 ffcf 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001988:	230b      	movs	r3, #11
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	4810      	ldr	r0, [pc, #64]	; (80019d4 <HAL_ETH_MspInit+0x194>)
 8001994:	f003 ffbe 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001998:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019aa:	230b      	movs	r3, #11
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	4808      	ldr	r0, [pc, #32]	; (80019d8 <HAL_ETH_MspInit+0x198>)
 80019b6:	f003 ffad 	bl	8005914 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019ba:	bf00      	nop
 80019bc:	3738      	adds	r7, #56	; 0x38
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40028000 	.word	0x40028000
 80019c8:	58024400 	.word	0x58024400
 80019cc:	58020800 	.word	0x58020800
 80019d0:	58020000 	.word	0x58020000
 80019d4:	58020400 	.word	0x58020400
 80019d8:	58021800 	.word	0x58021800

080019dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0b2      	sub	sp, #200	; 0xc8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	22bc      	movs	r2, #188	; 0xbc
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f00b fa4f 	bl	800ce90 <memset>
  if(hrtc->Instance==RTC)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <HAL_RTC_MspInit+0x68>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d11e      	bne.n	8001a3a <HAL_RTC_MspInit+0x5e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a00:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f005 fac6 	bl	8006fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a1a:	f7ff fef1 	bl	8001800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RTC_MspInit+0x6c>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <HAL_RTC_MspInit+0x6c>)
 8001a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a28:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2029      	movs	r0, #41	; 0x29
 8001a30:	f000 fccb 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a34:	2029      	movs	r0, #41	; 0x29
 8001a36:	f000 fce2 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	37c8      	adds	r7, #200	; 0xc8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	58004000 	.word	0x58004000
 8001a48:	58024400 	.word	0x58024400

08001a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0ba      	sub	sp, #232	; 0xe8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	22bc      	movs	r2, #188	; 0xbc
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f00b fa0f 	bl	800ce90 <memset>
  if(hspi->Instance==SPI1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <HAL_SPI_MspInit+0x170>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	f040 809b 	bne.w	8001bb4 <HAL_SPI_MspInit+0x168>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f005 fa87 	bl	8006fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001a98:	f7ff feb2 	bl	8001800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a9c:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <HAL_SPI_MspInit+0x174>)
 8001a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa2:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <HAL_SPI_MspInit+0x174>)
 8001aa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aa8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aac:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_SPI_MspInit+0x174>)
 8001aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_SPI_MspInit+0x174>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac0:	4a3f      	ldr	r2, [pc, #252]	; (8001bc0 <HAL_SPI_MspInit+0x174>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_SPI_MspInit+0x174>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <HAL_SPI_MspInit+0x174>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	4a38      	ldr	r2, [pc, #224]	; (8001bc0 <HAL_SPI_MspInit+0x174>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_SPI_MspInit+0x174>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001af6:	2320      	movs	r3, #32
 8001af8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b0e:	2305      	movs	r3, #5
 8001b10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	482a      	ldr	r0, [pc, #168]	; (8001bc4 <HAL_SPI_MspInit+0x178>)
 8001b1c:	f003 fefa 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b20:	2320      	movs	r3, #32
 8001b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b38:	2305      	movs	r3, #5
 8001b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4820      	ldr	r0, [pc, #128]	; (8001bc8 <HAL_SPI_MspInit+0x17c>)
 8001b46:	f003 fee5 	bl	8005914 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b4c:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <HAL_SPI_MspInit+0x184>)
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b52:	2226      	movs	r2, #38	; 0x26
 8001b54:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b58:	2240      	movs	r2, #64	; 0x40
 8001b5a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b68:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b88:	4810      	ldr	r0, [pc, #64]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b8a:	f000 fc67 	bl	800245c <HAL_DMA_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8001b94:	f7ff fe34 	bl	8001800 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001b9c:	679a      	str	r2, [r3, #120]	; 0x78
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2023      	movs	r0, #35	; 0x23
 8001baa:	f000 fc0e 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bae:	2023      	movs	r0, #35	; 0x23
 8001bb0:	f000 fc25 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	37e8      	adds	r7, #232	; 0xe8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40013000 	.word	0x40013000
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	58020000 	.word	0x58020000
 8001bc8:	58020400 	.word	0x58020400
 8001bcc:	240239b0 	.word	0x240239b0
 8001bd0:	40020010 	.word	0x40020010

08001bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_TIM_Base_MspInit+0x3c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_TIM_Base_MspInit+0x40>)
 8001be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bec:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <HAL_TIM_Base_MspInit+0x40>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_TIM_Base_MspInit+0x40>)
 8001bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40010000 	.word	0x40010000
 8001c14:	58024400 	.word	0x58024400

08001c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a13      	ldr	r2, [pc, #76]	; (8001c84 <HAL_TIM_MspPostInit+0x6c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11f      	bne.n	8001c7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_TIM_MspPostInit+0x70>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_TIM_MspPostInit+0x70>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_TIM_MspPostInit+0x70>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <HAL_TIM_MspPostInit+0x74>)
 8001c76:	f003 fe4d 	bl	8005914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40010000 	.word	0x40010000
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	58021000 	.word	0x58021000

08001c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0b8      	sub	sp, #224	; 0xe0
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	22bc      	movs	r2, #188	; 0xbc
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00b f8ed 	bl	800ce90 <memset>
  if(huart->Instance==USART3)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a57      	ldr	r2, [pc, #348]	; (8001e18 <HAL_UART_MspInit+0x188>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	f040 80a6 	bne.w	8001e0e <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f005 f965 	bl	8006fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001cdc:	f7ff fd90 	bl	8001800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ce0:	4b4e      	ldr	r3, [pc, #312]	; (8001e1c <HAL_UART_MspInit+0x18c>)
 8001ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ce6:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_UART_MspInit+0x18c>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cf0:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <HAL_UART_MspInit+0x18c>)
 8001cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_UART_MspInit+0x18c>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d04:	4a45      	ldr	r2, [pc, #276]	; (8001e1c <HAL_UART_MspInit+0x18c>)
 8001d06:	f043 0308 	orr.w	r3, r3, #8
 8001d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0e:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <HAL_UART_MspInit+0x18c>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d36:	2307      	movs	r3, #7
 8001d38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d40:	4619      	mov	r1, r3
 8001d42:	4837      	ldr	r0, [pc, #220]	; (8001e20 <HAL_UART_MspInit+0x190>)
 8001d44:	f003 fde6 	bl	8005914 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d48:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d4a:	4a37      	ldr	r2, [pc, #220]	; (8001e28 <HAL_UART_MspInit+0x198>)
 8001d4c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d50:	222d      	movs	r2, #45	; 0x2d
 8001d52:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d66:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d82:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d88:	4826      	ldr	r0, [pc, #152]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d8a:	f000 fb67 	bl	800245c <HAL_DMA_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001d94:	f7ff fd34 	bl	8001800 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001d9c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <HAL_UART_MspInit+0x194>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001da6:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <HAL_UART_MspInit+0x1a0>)
 8001da8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001dac:	222e      	movs	r2, #46	; 0x2e
 8001dae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001db2:	2240      	movs	r2, #64	; 0x40
 8001db4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001de2:	4812      	ldr	r0, [pc, #72]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001de4:	f000 fb3a 	bl	800245c <HAL_DMA_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001dee:	f7ff fd07 	bl	8001800 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001df6:	679a      	str	r2, [r3, #120]	; 0x78
 8001df8:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <HAL_UART_MspInit+0x19c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	2027      	movs	r0, #39	; 0x27
 8001e04:	f000 fae1 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e08:	2027      	movs	r0, #39	; 0x27
 8001e0a:	f000 faf8 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	37e0      	adds	r7, #224	; 0xe0
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40004800 	.word	0x40004800
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	58020c00 	.word	0x58020c00
 8001e24:	2402325c 	.word	0x2402325c
 8001e28:	40020028 	.word	0x40020028
 8001e2c:	2402376c 	.word	0x2402376c
 8001e30:	40020040 	.word	0x40020040

08001e34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0b8      	sub	sp, #224	; 0xe0
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	22bc      	movs	r2, #188	; 0xbc
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00b f81b 	bl	800ce90 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a37      	ldr	r2, [pc, #220]	; (8001f3c <HAL_PCD_MspInit+0x108>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d166      	bne.n	8001f32 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001e6e:	2312      	movs	r3, #18
 8001e70:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e72:	2302      	movs	r3, #2
 8001e74:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001e76:	2303      	movs	r3, #3
 8001e78:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001e7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e82:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001e84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e88:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001e8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e92:	f107 0310 	add.w	r3, r7, #16
 8001e96:	4618      	mov	r0, r3
 8001e98:	f005 f882 	bl	8006fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001ea2:	f7ff fcad 	bl	8001800 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001ea6:	f004 f8cf 	bl	8006048 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_PCD_MspInit+0x10c>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb0:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <HAL_PCD_MspInit+0x10c>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_PCD_MspInit+0x10c>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001ec8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001ee2:	230a      	movs	r3, #10
 8001ee4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eec:	4619      	mov	r1, r3
 8001eee:	4815      	ldr	r0, [pc, #84]	; (8001f44 <HAL_PCD_MspInit+0x110>)
 8001ef0:	f003 fd10 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480d      	ldr	r0, [pc, #52]	; (8001f44 <HAL_PCD_MspInit+0x110>)
 8001f10:	f003 fd00 	bl	8005914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_PCD_MspInit+0x10c>)
 8001f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_PCD_MspInit+0x10c>)
 8001f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_PCD_MspInit+0x10c>)
 8001f26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	37e0      	adds	r7, #224	; 0xe0
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40080000 	.word	0x40080000
 8001f40:	58024400 	.word	0x58024400
 8001f44:	58020000 	.word	0x58020000

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f94:	f000 f8da 	bl	800214c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <DMA1_Stream0_IRQHandler+0x10>)
 8001fa2:	f001 fd83 	bl	8003aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	240239b0 	.word	0x240239b0

08001fb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <DMA1_Stream1_IRQHandler+0x10>)
 8001fb6:	f001 fd79 	bl	8003aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2402325c 	.word	0x2402325c

08001fc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Stream2_IRQHandler+0x10>)
 8001fca:	f001 fd6f 	bl	8003aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2402376c 	.word	0x2402376c

08001fd8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <SPI1_IRQHandler+0x10>)
 8001fde:	f007 fc23 	bl	8009828 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	24023858 	.word	0x24023858

08001fec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <USART3_IRQHandler+0x10>)
 8001ff2:	f009 f931 	bl	800b258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	240232d4 	.word	0x240232d4

08002000 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <RTC_Alarm_IRQHandler+0x10>)
 8002006:	f006 feab 	bl	8008d60 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	240237e8 	.word	0x240237e8

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800204c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002018:	f7fe fada 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201e:	490d      	ldr	r1, [pc, #52]	; (8002054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002034:	4c0a      	ldr	r4, [pc, #40]	; (8002060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002042:	f00a fef3 	bl	800ce2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7fe fe05 	bl	8000c54 <main>
  bx  lr
 800204a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800204c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002050:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002054:	2401715c 	.word	0x2401715c
  ldr r2, =_sidata
 8002058:	0800cf08 	.word	0x0800cf08
  ldr r2, =_sbss
 800205c:	2401721c 	.word	0x2401721c
  ldr r4, =_ebss
 8002060:	24023a2c 	.word	0x24023a2c

08002064 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC3_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206e:	2003      	movs	r0, #3
 8002070:	f000 f9a0 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002074:	f004 fdbe 	bl	8006bf4 <HAL_RCC_GetSysClockFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_Init+0x68>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	4913      	ldr	r1, [pc, #76]	; (80020d4 <HAL_Init+0x6c>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_Init+0x68>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <HAL_Init+0x6c>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <HAL_Init+0x70>)
 80020aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020ac:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <HAL_Init+0x74>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020b2:	2000      	movs	r0, #0
 80020b4:	f000 f814 	bl	80020e0 <HAL_InitTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e002      	b.n	80020c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020c2:	f7ff fba3 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	58024400 	.word	0x58024400
 80020d4:	0800ceb8 	.word	0x0800ceb8
 80020d8:	24000004 	.word	0x24000004
 80020dc:	24000000 	.word	0x24000000

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_InitTick+0x60>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e021      	b.n	8002138 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_InitTick+0x64>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_InitTick+0x60>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002102:	fbb3 f3f1 	udiv	r3, r3, r1
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f985 	bl	800241a <HAL_SYSTICK_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00e      	b.n	8002138 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0f      	cmp	r3, #15
 800211e:	d80a      	bhi.n	8002136 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002120:	2200      	movs	r2, #0
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f000 f94f 	bl	80023ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800212c:	4a06      	ldr	r2, [pc, #24]	; (8002148 <HAL_InitTick+0x68>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	24017158 	.word	0x24017158
 8002144:	24000000 	.word	0x24000000
 8002148:	24017154 	.word	0x24017154

0800214c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x20>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_IncTick+0x24>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	24017158 	.word	0x24017158
 8002170:	24023a28 	.word	0x24023a28

08002174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_GetTick+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	24023a28 	.word	0x24023a28

0800218c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff ffee 	bl	8002174 <HAL_GetTick>
 8002198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d005      	beq.n	80021b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_Delay+0x44>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021b2:	bf00      	nop
 80021b4:	f7ff ffde 	bl	8002174 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d8f7      	bhi.n	80021b4 <HAL_Delay+0x28>
  {
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	24017158 	.word	0x24017158

080021d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_GetREVID+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0c1b      	lsrs	r3, r3, #16
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	5c001000 	.word	0x5c001000

080021ec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80021fc:	4904      	ldr	r1, [pc, #16]	; (8002210 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	58000400 	.word	0x58000400

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <__NVIC_SetPriorityGrouping+0x40>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	4313      	orrs	r3, r2
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x40>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00
 8002258:	05fa0000 	.word	0x05fa0000

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002286:	2b00      	cmp	r3, #0
 8002288:	db0b      	blt.n	80022a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4907      	ldr	r1, [pc, #28]	; (80022b0 <__NVIC_EnableIRQ+0x38>)
 8002292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2001      	movs	r0, #1
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	; (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002380:	d301      	bcc.n	8002386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <SysTick_Config+0x40>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238e:	210f      	movs	r1, #15
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f7ff ff8e 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <SysTick_Config+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <SysTick_Config+0x40>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff29 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff40 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff90 	bl	8002308 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5f 	bl	80022b4 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff33 	bl	8002278 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa4 	bl	8002370 <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_GetCurrentCPUID+0x24>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	2b07      	cmp	r3, #7
 8002444:	d101      	bne.n	800244a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002446:	2303      	movs	r3, #3
 8002448:	e000      	b.n	800244c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800244a:	2301      	movs	r3, #1
  }
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff fe86 	bl	8002174 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e316      	b.n	8002aa2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a66      	ldr	r2, [pc, #408]	; (8002614 <HAL_DMA_Init+0x1b8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d04a      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a65      	ldr	r2, [pc, #404]	; (8002618 <HAL_DMA_Init+0x1bc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d045      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a63      	ldr	r2, [pc, #396]	; (800261c <HAL_DMA_Init+0x1c0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d040      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a62      	ldr	r2, [pc, #392]	; (8002620 <HAL_DMA_Init+0x1c4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d03b      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a60      	ldr	r2, [pc, #384]	; (8002624 <HAL_DMA_Init+0x1c8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d036      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5f      	ldr	r2, [pc, #380]	; (8002628 <HAL_DMA_Init+0x1cc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d031      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a5d      	ldr	r2, [pc, #372]	; (800262c <HAL_DMA_Init+0x1d0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d02c      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a5c      	ldr	r2, [pc, #368]	; (8002630 <HAL_DMA_Init+0x1d4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d027      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a5a      	ldr	r2, [pc, #360]	; (8002634 <HAL_DMA_Init+0x1d8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d022      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a59      	ldr	r2, [pc, #356]	; (8002638 <HAL_DMA_Init+0x1dc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d01d      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a57      	ldr	r2, [pc, #348]	; (800263c <HAL_DMA_Init+0x1e0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d018      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a56      	ldr	r2, [pc, #344]	; (8002640 <HAL_DMA_Init+0x1e4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d013      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a54      	ldr	r2, [pc, #336]	; (8002644 <HAL_DMA_Init+0x1e8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00e      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a53      	ldr	r2, [pc, #332]	; (8002648 <HAL_DMA_Init+0x1ec>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d009      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a51      	ldr	r2, [pc, #324]	; (800264c <HAL_DMA_Init+0x1f0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_DMA_Init+0xb8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a50      	ldr	r2, [pc, #320]	; (8002650 <HAL_DMA_Init+0x1f4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d101      	bne.n	8002518 <HAL_DMA_Init+0xbc>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_DMA_Init+0xbe>
 8002518:	2300      	movs	r3, #0
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 813b 	beq.w	8002796 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a37      	ldr	r2, [pc, #220]	; (8002614 <HAL_DMA_Init+0x1b8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d04a      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a36      	ldr	r2, [pc, #216]	; (8002618 <HAL_DMA_Init+0x1bc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d045      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a34      	ldr	r2, [pc, #208]	; (800261c <HAL_DMA_Init+0x1c0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d040      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a33      	ldr	r2, [pc, #204]	; (8002620 <HAL_DMA_Init+0x1c4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d03b      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a31      	ldr	r2, [pc, #196]	; (8002624 <HAL_DMA_Init+0x1c8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d036      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a30      	ldr	r2, [pc, #192]	; (8002628 <HAL_DMA_Init+0x1cc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d031      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2e      	ldr	r2, [pc, #184]	; (800262c <HAL_DMA_Init+0x1d0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d02c      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a2d      	ldr	r2, [pc, #180]	; (8002630 <HAL_DMA_Init+0x1d4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d027      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <HAL_DMA_Init+0x1d8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d022      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a2a      	ldr	r2, [pc, #168]	; (8002638 <HAL_DMA_Init+0x1dc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d01d      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a28      	ldr	r2, [pc, #160]	; (800263c <HAL_DMA_Init+0x1e0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d018      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_DMA_Init+0x1e4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d013      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a25      	ldr	r2, [pc, #148]	; (8002644 <HAL_DMA_Init+0x1e8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00e      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a24      	ldr	r2, [pc, #144]	; (8002648 <HAL_DMA_Init+0x1ec>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d009      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a22      	ldr	r2, [pc, #136]	; (800264c <HAL_DMA_Init+0x1f0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_DMA_Init+0x174>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a21      	ldr	r2, [pc, #132]	; (8002650 <HAL_DMA_Init+0x1f4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d108      	bne.n	80025e2 <HAL_DMA_Init+0x186>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e007      	b.n	80025f2 <HAL_DMA_Init+0x196>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025f2:	e02f      	b.n	8002654 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f4:	f7ff fdbe 	bl	8002174 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d928      	bls.n	8002654 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e246      	b.n	8002aa2 <HAL_DMA_Init+0x646>
 8002614:	40020010 	.word	0x40020010
 8002618:	40020028 	.word	0x40020028
 800261c:	40020040 	.word	0x40020040
 8002620:	40020058 	.word	0x40020058
 8002624:	40020070 	.word	0x40020070
 8002628:	40020088 	.word	0x40020088
 800262c:	400200a0 	.word	0x400200a0
 8002630:	400200b8 	.word	0x400200b8
 8002634:	40020410 	.word	0x40020410
 8002638:	40020428 	.word	0x40020428
 800263c:	40020440 	.word	0x40020440
 8002640:	40020458 	.word	0x40020458
 8002644:	40020470 	.word	0x40020470
 8002648:	40020488 	.word	0x40020488
 800264c:	400204a0 	.word	0x400204a0
 8002650:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1c8      	bne.n	80025f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4b83      	ldr	r3, [pc, #524]	; (800287c <HAL_DMA_Init+0x420>)
 800266e:	4013      	ands	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800267a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002686:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002692:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d107      	bne.n	80026b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	4313      	orrs	r3, r2
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80026b8:	4b71      	ldr	r3, [pc, #452]	; (8002880 <HAL_DMA_Init+0x424>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b71      	ldr	r3, [pc, #452]	; (8002884 <HAL_DMA_Init+0x428>)
 80026be:	4013      	ands	r3, r2
 80026c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c4:	d328      	bcc.n	8002718 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b28      	cmp	r3, #40	; 0x28
 80026cc:	d903      	bls.n	80026d6 <HAL_DMA_Init+0x27a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b2e      	cmp	r3, #46	; 0x2e
 80026d4:	d917      	bls.n	8002706 <HAL_DMA_Init+0x2aa>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b3e      	cmp	r3, #62	; 0x3e
 80026dc:	d903      	bls.n	80026e6 <HAL_DMA_Init+0x28a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b42      	cmp	r3, #66	; 0x42
 80026e4:	d90f      	bls.n	8002706 <HAL_DMA_Init+0x2aa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b46      	cmp	r3, #70	; 0x46
 80026ec:	d903      	bls.n	80026f6 <HAL_DMA_Init+0x29a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b48      	cmp	r3, #72	; 0x48
 80026f4:	d907      	bls.n	8002706 <HAL_DMA_Init+0x2aa>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b4e      	cmp	r3, #78	; 0x4e
 80026fc:	d905      	bls.n	800270a <HAL_DMA_Init+0x2ae>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b52      	cmp	r3, #82	; 0x52
 8002704:	d801      	bhi.n	800270a <HAL_DMA_Init+0x2ae>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_DMA_Init+0x2b0>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002716:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0307 	bic.w	r3, r3, #7
 800272e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b04      	cmp	r3, #4
 8002740:	d117      	bne.n	8002772 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f002 fb3d 	bl	8004dd4 <DMA_CheckFifoParam>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e197      	b.n	8002aa2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f002 fa78 	bl	8004c70 <DMA_CalcBaseAndBitshift>
 8002780:	4603      	mov	r3, r0
 8002782:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	223f      	movs	r2, #63	; 0x3f
 800278e:	409a      	lsls	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	e0cd      	b.n	8002932 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <HAL_DMA_Init+0x42c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d022      	beq.n	80027e6 <HAL_DMA_Init+0x38a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a39      	ldr	r2, [pc, #228]	; (800288c <HAL_DMA_Init+0x430>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01d      	beq.n	80027e6 <HAL_DMA_Init+0x38a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a38      	ldr	r2, [pc, #224]	; (8002890 <HAL_DMA_Init+0x434>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_Init+0x38a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a36      	ldr	r2, [pc, #216]	; (8002894 <HAL_DMA_Init+0x438>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_DMA_Init+0x38a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a35      	ldr	r2, [pc, #212]	; (8002898 <HAL_DMA_Init+0x43c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_DMA_Init+0x38a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a33      	ldr	r2, [pc, #204]	; (800289c <HAL_DMA_Init+0x440>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_DMA_Init+0x38a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a32      	ldr	r2, [pc, #200]	; (80028a0 <HAL_DMA_Init+0x444>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_Init+0x38a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a30      	ldr	r2, [pc, #192]	; (80028a4 <HAL_DMA_Init+0x448>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_DMA_Init+0x38e>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_DMA_Init+0x390>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8097 	beq.w	8002920 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a24      	ldr	r2, [pc, #144]	; (8002888 <HAL_DMA_Init+0x42c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d021      	beq.n	8002840 <HAL_DMA_Init+0x3e4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a22      	ldr	r2, [pc, #136]	; (800288c <HAL_DMA_Init+0x430>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01c      	beq.n	8002840 <HAL_DMA_Init+0x3e4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a21      	ldr	r2, [pc, #132]	; (8002890 <HAL_DMA_Init+0x434>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d017      	beq.n	8002840 <HAL_DMA_Init+0x3e4>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_DMA_Init+0x438>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d012      	beq.n	8002840 <HAL_DMA_Init+0x3e4>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <HAL_DMA_Init+0x43c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00d      	beq.n	8002840 <HAL_DMA_Init+0x3e4>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_DMA_Init+0x440>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d008      	beq.n	8002840 <HAL_DMA_Init+0x3e4>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_DMA_Init+0x444>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d003      	beq.n	8002840 <HAL_DMA_Init+0x3e4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_DMA_Init+0x448>)
 800283e:	4293      	cmp	r3, r2
 8002840:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_DMA_Init+0x44c>)
 800285e:	4013      	ands	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	d020      	beq.n	80028ac <HAL_DMA_Init+0x450>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b80      	cmp	r3, #128	; 0x80
 8002870:	d102      	bne.n	8002878 <HAL_DMA_Init+0x41c>
 8002872:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002876:	e01a      	b.n	80028ae <HAL_DMA_Init+0x452>
 8002878:	2300      	movs	r3, #0
 800287a:	e018      	b.n	80028ae <HAL_DMA_Init+0x452>
 800287c:	fe10803f 	.word	0xfe10803f
 8002880:	5c001000 	.word	0x5c001000
 8002884:	ffff0000 	.word	0xffff0000
 8002888:	58025408 	.word	0x58025408
 800288c:	5802541c 	.word	0x5802541c
 8002890:	58025430 	.word	0x58025430
 8002894:	58025444 	.word	0x58025444
 8002898:	58025458 	.word	0x58025458
 800289c:	5802546c 	.word	0x5802546c
 80028a0:	58025480 	.word	0x58025480
 80028a4:	58025494 	.word	0x58025494
 80028a8:	fffe000f 	.word	0xfffe000f
 80028ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68d2      	ldr	r2, [r2, #12]
 80028b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b6e      	ldr	r3, [pc, #440]	; (8002aac <HAL_DMA_Init+0x650>)
 80028f4:	4413      	add	r3, r2
 80028f6:	4a6e      	ldr	r2, [pc, #440]	; (8002ab0 <HAL_DMA_Init+0x654>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	009a      	lsls	r2, r3, #2
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f002 f9b3 	bl	8004c70 <DMA_CalcBaseAndBitshift>
 800290a:	4603      	mov	r3, r0
 800290c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2201      	movs	r2, #1
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e008      	b.n	8002932 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2203      	movs	r2, #3
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0b7      	b.n	8002aa2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a5f      	ldr	r2, [pc, #380]	; (8002ab4 <HAL_DMA_Init+0x658>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d072      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <HAL_DMA_Init+0x65c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d06d      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a5c      	ldr	r2, [pc, #368]	; (8002abc <HAL_DMA_Init+0x660>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d068      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a5a      	ldr	r2, [pc, #360]	; (8002ac0 <HAL_DMA_Init+0x664>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d063      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a59      	ldr	r2, [pc, #356]	; (8002ac4 <HAL_DMA_Init+0x668>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d05e      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_DMA_Init+0x66c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d059      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a56      	ldr	r2, [pc, #344]	; (8002acc <HAL_DMA_Init+0x670>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d054      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a54      	ldr	r2, [pc, #336]	; (8002ad0 <HAL_DMA_Init+0x674>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d04f      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a53      	ldr	r2, [pc, #332]	; (8002ad4 <HAL_DMA_Init+0x678>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d04a      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a51      	ldr	r2, [pc, #324]	; (8002ad8 <HAL_DMA_Init+0x67c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d045      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a50      	ldr	r2, [pc, #320]	; (8002adc <HAL_DMA_Init+0x680>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d040      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a4e      	ldr	r2, [pc, #312]	; (8002ae0 <HAL_DMA_Init+0x684>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d03b      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a4d      	ldr	r2, [pc, #308]	; (8002ae4 <HAL_DMA_Init+0x688>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d036      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a4b      	ldr	r2, [pc, #300]	; (8002ae8 <HAL_DMA_Init+0x68c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d031      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a4a      	ldr	r2, [pc, #296]	; (8002aec <HAL_DMA_Init+0x690>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d02c      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_DMA_Init+0x694>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d027      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a47      	ldr	r2, [pc, #284]	; (8002af4 <HAL_DMA_Init+0x698>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a45      	ldr	r2, [pc, #276]	; (8002af8 <HAL_DMA_Init+0x69c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01d      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a44      	ldr	r2, [pc, #272]	; (8002afc <HAL_DMA_Init+0x6a0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a42      	ldr	r2, [pc, #264]	; (8002b00 <HAL_DMA_Init+0x6a4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a41      	ldr	r2, [pc, #260]	; (8002b04 <HAL_DMA_Init+0x6a8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a3f      	ldr	r2, [pc, #252]	; (8002b08 <HAL_DMA_Init+0x6ac>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a3e      	ldr	r2, [pc, #248]	; (8002b0c <HAL_DMA_Init+0x6b0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_DMA_Init+0x5c6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a3c      	ldr	r2, [pc, #240]	; (8002b10 <HAL_DMA_Init+0x6b4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_DMA_Init+0x5ca>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_DMA_Init+0x5cc>
 8002a26:	2300      	movs	r3, #0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d032      	beq.n	8002a92 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f002 fa4d 	bl	8004ecc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b80      	cmp	r3, #128	; 0x80
 8002a38:	d102      	bne.n	8002a40 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a54:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d010      	beq.n	8002a80 <HAL_DMA_Init+0x624>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d80c      	bhi.n	8002a80 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f002 faca 	bl	8005000 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	e008      	b.n	8002a92 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	a7fdabf8 	.word	0xa7fdabf8
 8002ab0:	cccccccd 	.word	0xcccccccd
 8002ab4:	40020010 	.word	0x40020010
 8002ab8:	40020028 	.word	0x40020028
 8002abc:	40020040 	.word	0x40020040
 8002ac0:	40020058 	.word	0x40020058
 8002ac4:	40020070 	.word	0x40020070
 8002ac8:	40020088 	.word	0x40020088
 8002acc:	400200a0 	.word	0x400200a0
 8002ad0:	400200b8 	.word	0x400200b8
 8002ad4:	40020410 	.word	0x40020410
 8002ad8:	40020428 	.word	0x40020428
 8002adc:	40020440 	.word	0x40020440
 8002ae0:	40020458 	.word	0x40020458
 8002ae4:	40020470 	.word	0x40020470
 8002ae8:	40020488 	.word	0x40020488
 8002aec:	400204a0 	.word	0x400204a0
 8002af0:	400204b8 	.word	0x400204b8
 8002af4:	58025408 	.word	0x58025408
 8002af8:	5802541c 	.word	0x5802541c
 8002afc:	58025430 	.word	0x58025430
 8002b00:	58025444 	.word	0x58025444
 8002b04:	58025458 	.word	0x58025458
 8002b08:	5802546c 	.word	0x5802546c
 8002b0c:	58025480 	.word	0x58025480
 8002b10:	58025494 	.word	0x58025494

08002b14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e226      	b.n	8002f7e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_DMA_Start_IT+0x2a>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e21f      	b.n	8002f7e <HAL_DMA_Start_IT+0x46a>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	f040 820a 	bne.w	8002f68 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a68      	ldr	r2, [pc, #416]	; (8002d08 <HAL_DMA_Start_IT+0x1f4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04a      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a66      	ldr	r2, [pc, #408]	; (8002d0c <HAL_DMA_Start_IT+0x1f8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d045      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a65      	ldr	r2, [pc, #404]	; (8002d10 <HAL_DMA_Start_IT+0x1fc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d040      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a63      	ldr	r2, [pc, #396]	; (8002d14 <HAL_DMA_Start_IT+0x200>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d03b      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a62      	ldr	r2, [pc, #392]	; (8002d18 <HAL_DMA_Start_IT+0x204>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d036      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a60      	ldr	r2, [pc, #384]	; (8002d1c <HAL_DMA_Start_IT+0x208>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d031      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a5f      	ldr	r2, [pc, #380]	; (8002d20 <HAL_DMA_Start_IT+0x20c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d02c      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a5d      	ldr	r2, [pc, #372]	; (8002d24 <HAL_DMA_Start_IT+0x210>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d027      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	; (8002d28 <HAL_DMA_Start_IT+0x214>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d022      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5a      	ldr	r2, [pc, #360]	; (8002d2c <HAL_DMA_Start_IT+0x218>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a59      	ldr	r2, [pc, #356]	; (8002d30 <HAL_DMA_Start_IT+0x21c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d018      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_DMA_Start_IT+0x220>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a56      	ldr	r2, [pc, #344]	; (8002d38 <HAL_DMA_Start_IT+0x224>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a54      	ldr	r2, [pc, #336]	; (8002d3c <HAL_DMA_Start_IT+0x228>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a53      	ldr	r2, [pc, #332]	; (8002d40 <HAL_DMA_Start_IT+0x22c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_DMA_Start_IT+0xee>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a51      	ldr	r2, [pc, #324]	; (8002d44 <HAL_DMA_Start_IT+0x230>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <HAL_DMA_Start_IT+0x100>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e007      	b.n	8002c24 <HAL_DMA_Start_IT+0x110>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f001 fe74 	bl	8004918 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <HAL_DMA_Start_IT+0x1f4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04a      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <HAL_DMA_Start_IT+0x1f8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d045      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a31      	ldr	r2, [pc, #196]	; (8002d10 <HAL_DMA_Start_IT+0x1fc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d040      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a30      	ldr	r2, [pc, #192]	; (8002d14 <HAL_DMA_Start_IT+0x200>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d03b      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2e      	ldr	r2, [pc, #184]	; (8002d18 <HAL_DMA_Start_IT+0x204>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d036      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2d      	ldr	r2, [pc, #180]	; (8002d1c <HAL_DMA_Start_IT+0x208>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d031      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a2b      	ldr	r2, [pc, #172]	; (8002d20 <HAL_DMA_Start_IT+0x20c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02c      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <HAL_DMA_Start_IT+0x210>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d027      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <HAL_DMA_Start_IT+0x214>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d022      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <HAL_DMA_Start_IT+0x218>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d01d      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <HAL_DMA_Start_IT+0x21c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d018      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a24      	ldr	r2, [pc, #144]	; (8002d34 <HAL_DMA_Start_IT+0x220>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <HAL_DMA_Start_IT+0x224>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <HAL_DMA_Start_IT+0x228>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_DMA_Start_IT+0x22c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x1bc>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <HAL_DMA_Start_IT+0x230>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_Start_IT+0x1c0>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_DMA_Start_IT+0x1c2>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d036      	beq.n	8002d48 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 021e 	bic.w	r2, r3, #30
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0216 	orr.w	r2, r2, #22
 8002cec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d03e      	beq.n	8002d74 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0208 	orr.w	r2, r2, #8
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e035      	b.n	8002d74 <HAL_DMA_Start_IT+0x260>
 8002d08:	40020010 	.word	0x40020010
 8002d0c:	40020028 	.word	0x40020028
 8002d10:	40020040 	.word	0x40020040
 8002d14:	40020058 	.word	0x40020058
 8002d18:	40020070 	.word	0x40020070
 8002d1c:	40020088 	.word	0x40020088
 8002d20:	400200a0 	.word	0x400200a0
 8002d24:	400200b8 	.word	0x400200b8
 8002d28:	40020410 	.word	0x40020410
 8002d2c:	40020428 	.word	0x40020428
 8002d30:	40020440 	.word	0x40020440
 8002d34:	40020458 	.word	0x40020458
 8002d38:	40020470 	.word	0x40020470
 8002d3c:	40020488 	.word	0x40020488
 8002d40:	400204a0 	.word	0x400204a0
 8002d44:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 020e 	bic.w	r2, r3, #14
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 020a 	orr.w	r2, r2, #10
 8002d5a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0204 	orr.w	r2, r2, #4
 8002d72:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a83      	ldr	r2, [pc, #524]	; (8002f88 <HAL_DMA_Start_IT+0x474>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d072      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a82      	ldr	r2, [pc, #520]	; (8002f8c <HAL_DMA_Start_IT+0x478>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d06d      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a80      	ldr	r2, [pc, #512]	; (8002f90 <HAL_DMA_Start_IT+0x47c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d068      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7f      	ldr	r2, [pc, #508]	; (8002f94 <HAL_DMA_Start_IT+0x480>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d063      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a7d      	ldr	r2, [pc, #500]	; (8002f98 <HAL_DMA_Start_IT+0x484>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d05e      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7c      	ldr	r2, [pc, #496]	; (8002f9c <HAL_DMA_Start_IT+0x488>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d059      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a7a      	ldr	r2, [pc, #488]	; (8002fa0 <HAL_DMA_Start_IT+0x48c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d054      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a79      	ldr	r2, [pc, #484]	; (8002fa4 <HAL_DMA_Start_IT+0x490>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d04f      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a77      	ldr	r2, [pc, #476]	; (8002fa8 <HAL_DMA_Start_IT+0x494>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d04a      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a76      	ldr	r2, [pc, #472]	; (8002fac <HAL_DMA_Start_IT+0x498>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d045      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a74      	ldr	r2, [pc, #464]	; (8002fb0 <HAL_DMA_Start_IT+0x49c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d040      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a73      	ldr	r2, [pc, #460]	; (8002fb4 <HAL_DMA_Start_IT+0x4a0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d03b      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a71      	ldr	r2, [pc, #452]	; (8002fb8 <HAL_DMA_Start_IT+0x4a4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d036      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a70      	ldr	r2, [pc, #448]	; (8002fbc <HAL_DMA_Start_IT+0x4a8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d031      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6e      	ldr	r2, [pc, #440]	; (8002fc0 <HAL_DMA_Start_IT+0x4ac>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02c      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6d      	ldr	r2, [pc, #436]	; (8002fc4 <HAL_DMA_Start_IT+0x4b0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d027      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6b      	ldr	r2, [pc, #428]	; (8002fc8 <HAL_DMA_Start_IT+0x4b4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d022      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6a      	ldr	r2, [pc, #424]	; (8002fcc <HAL_DMA_Start_IT+0x4b8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d01d      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a68      	ldr	r2, [pc, #416]	; (8002fd0 <HAL_DMA_Start_IT+0x4bc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d018      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a67      	ldr	r2, [pc, #412]	; (8002fd4 <HAL_DMA_Start_IT+0x4c0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a65      	ldr	r2, [pc, #404]	; (8002fd8 <HAL_DMA_Start_IT+0x4c4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00e      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a64      	ldr	r2, [pc, #400]	; (8002fdc <HAL_DMA_Start_IT+0x4c8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a62      	ldr	r2, [pc, #392]	; (8002fe0 <HAL_DMA_Start_IT+0x4cc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_DMA_Start_IT+0x350>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <HAL_DMA_Start_IT+0x4d0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_DMA_Start_IT+0x354>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_DMA_Start_IT+0x356>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01a      	beq.n	8002ea4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e8a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a37      	ldr	r2, [pc, #220]	; (8002f88 <HAL_DMA_Start_IT+0x474>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d04a      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a36      	ldr	r2, [pc, #216]	; (8002f8c <HAL_DMA_Start_IT+0x478>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d045      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a34      	ldr	r2, [pc, #208]	; (8002f90 <HAL_DMA_Start_IT+0x47c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d040      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a33      	ldr	r2, [pc, #204]	; (8002f94 <HAL_DMA_Start_IT+0x480>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d03b      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <HAL_DMA_Start_IT+0x484>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d036      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <HAL_DMA_Start_IT+0x488>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d031      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <HAL_DMA_Start_IT+0x48c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02c      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <HAL_DMA_Start_IT+0x490>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d027      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <HAL_DMA_Start_IT+0x494>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d022      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <HAL_DMA_Start_IT+0x498>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d01d      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <HAL_DMA_Start_IT+0x49c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d018      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <HAL_DMA_Start_IT+0x4a0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <HAL_DMA_Start_IT+0x4a4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <HAL_DMA_Start_IT+0x4a8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_DMA_Start_IT+0x4ac>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_DMA_Start_IT+0x430>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a21      	ldr	r2, [pc, #132]	; (8002fc4 <HAL_DMA_Start_IT+0x4b0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d108      	bne.n	8002f56 <HAL_DMA_Start_IT+0x442>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e012      	b.n	8002f7c <HAL_DMA_Start_IT+0x468>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e009      	b.n	8002f7c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40020010 	.word	0x40020010
 8002f8c:	40020028 	.word	0x40020028
 8002f90:	40020040 	.word	0x40020040
 8002f94:	40020058 	.word	0x40020058
 8002f98:	40020070 	.word	0x40020070
 8002f9c:	40020088 	.word	0x40020088
 8002fa0:	400200a0 	.word	0x400200a0
 8002fa4:	400200b8 	.word	0x400200b8
 8002fa8:	40020410 	.word	0x40020410
 8002fac:	40020428 	.word	0x40020428
 8002fb0:	40020440 	.word	0x40020440
 8002fb4:	40020458 	.word	0x40020458
 8002fb8:	40020470 	.word	0x40020470
 8002fbc:	40020488 	.word	0x40020488
 8002fc0:	400204a0 	.word	0x400204a0
 8002fc4:	400204b8 	.word	0x400204b8
 8002fc8:	58025408 	.word	0x58025408
 8002fcc:	5802541c 	.word	0x5802541c
 8002fd0:	58025430 	.word	0x58025430
 8002fd4:	58025444 	.word	0x58025444
 8002fd8:	58025458 	.word	0x58025458
 8002fdc:	5802546c 	.word	0x5802546c
 8002fe0:	58025480 	.word	0x58025480
 8002fe4:	58025494 	.word	0x58025494

08002fe8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff f8c0 	bl	8002174 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e2dc      	b.n	80035ba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d008      	beq.n	800301e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e2cd      	b.n	80035ba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a76      	ldr	r2, [pc, #472]	; (80031fc <HAL_DMA_Abort+0x214>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04a      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a74      	ldr	r2, [pc, #464]	; (8003200 <HAL_DMA_Abort+0x218>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d045      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a73      	ldr	r2, [pc, #460]	; (8003204 <HAL_DMA_Abort+0x21c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d040      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a71      	ldr	r2, [pc, #452]	; (8003208 <HAL_DMA_Abort+0x220>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d03b      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a70      	ldr	r2, [pc, #448]	; (800320c <HAL_DMA_Abort+0x224>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d036      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a6e      	ldr	r2, [pc, #440]	; (8003210 <HAL_DMA_Abort+0x228>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d031      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6d      	ldr	r2, [pc, #436]	; (8003214 <HAL_DMA_Abort+0x22c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d02c      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a6b      	ldr	r2, [pc, #428]	; (8003218 <HAL_DMA_Abort+0x230>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d027      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6a      	ldr	r2, [pc, #424]	; (800321c <HAL_DMA_Abort+0x234>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a68      	ldr	r2, [pc, #416]	; (8003220 <HAL_DMA_Abort+0x238>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01d      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a67      	ldr	r2, [pc, #412]	; (8003224 <HAL_DMA_Abort+0x23c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d018      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a65      	ldr	r2, [pc, #404]	; (8003228 <HAL_DMA_Abort+0x240>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a64      	ldr	r2, [pc, #400]	; (800322c <HAL_DMA_Abort+0x244>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a62      	ldr	r2, [pc, #392]	; (8003230 <HAL_DMA_Abort+0x248>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a61      	ldr	r2, [pc, #388]	; (8003234 <HAL_DMA_Abort+0x24c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_DMA_Abort+0xd6>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a5f      	ldr	r2, [pc, #380]	; (8003238 <HAL_DMA_Abort+0x250>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_DMA_Abort+0xda>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_DMA_Abort+0xdc>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 021e 	bic.w	r2, r2, #30
 80030d6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e00a      	b.n	8003106 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020e 	bic.w	r2, r2, #14
 80030fe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3c      	ldr	r2, [pc, #240]	; (80031fc <HAL_DMA_Abort+0x214>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d072      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a3a      	ldr	r2, [pc, #232]	; (8003200 <HAL_DMA_Abort+0x218>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d06d      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a39      	ldr	r2, [pc, #228]	; (8003204 <HAL_DMA_Abort+0x21c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d068      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a37      	ldr	r2, [pc, #220]	; (8003208 <HAL_DMA_Abort+0x220>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d063      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a36      	ldr	r2, [pc, #216]	; (800320c <HAL_DMA_Abort+0x224>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d05e      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a34      	ldr	r2, [pc, #208]	; (8003210 <HAL_DMA_Abort+0x228>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d059      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a33      	ldr	r2, [pc, #204]	; (8003214 <HAL_DMA_Abort+0x22c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d054      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a31      	ldr	r2, [pc, #196]	; (8003218 <HAL_DMA_Abort+0x230>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d04f      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a30      	ldr	r2, [pc, #192]	; (800321c <HAL_DMA_Abort+0x234>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d04a      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2e      	ldr	r2, [pc, #184]	; (8003220 <HAL_DMA_Abort+0x238>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d045      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2d      	ldr	r2, [pc, #180]	; (8003224 <HAL_DMA_Abort+0x23c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d040      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2b      	ldr	r2, [pc, #172]	; (8003228 <HAL_DMA_Abort+0x240>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d03b      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a2a      	ldr	r2, [pc, #168]	; (800322c <HAL_DMA_Abort+0x244>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d036      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a28      	ldr	r2, [pc, #160]	; (8003230 <HAL_DMA_Abort+0x248>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a27      	ldr	r2, [pc, #156]	; (8003234 <HAL_DMA_Abort+0x24c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d02c      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a25      	ldr	r2, [pc, #148]	; (8003238 <HAL_DMA_Abort+0x250>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d027      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a24      	ldr	r2, [pc, #144]	; (800323c <HAL_DMA_Abort+0x254>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a22      	ldr	r2, [pc, #136]	; (8003240 <HAL_DMA_Abort+0x258>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01d      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a21      	ldr	r2, [pc, #132]	; (8003244 <HAL_DMA_Abort+0x25c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d018      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <HAL_DMA_Abort+0x260>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1e      	ldr	r2, [pc, #120]	; (800324c <HAL_DMA_Abort+0x264>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_DMA_Abort+0x268>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <HAL_DMA_Abort+0x26c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_DMA_Abort+0x20e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_DMA_Abort+0x270>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d132      	bne.n	800325c <HAL_DMA_Abort+0x274>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e031      	b.n	800325e <HAL_DMA_Abort+0x276>
 80031fa:	bf00      	nop
 80031fc:	40020010 	.word	0x40020010
 8003200:	40020028 	.word	0x40020028
 8003204:	40020040 	.word	0x40020040
 8003208:	40020058 	.word	0x40020058
 800320c:	40020070 	.word	0x40020070
 8003210:	40020088 	.word	0x40020088
 8003214:	400200a0 	.word	0x400200a0
 8003218:	400200b8 	.word	0x400200b8
 800321c:	40020410 	.word	0x40020410
 8003220:	40020428 	.word	0x40020428
 8003224:	40020440 	.word	0x40020440
 8003228:	40020458 	.word	0x40020458
 800322c:	40020470 	.word	0x40020470
 8003230:	40020488 	.word	0x40020488
 8003234:	400204a0 	.word	0x400204a0
 8003238:	400204b8 	.word	0x400204b8
 800323c:	58025408 	.word	0x58025408
 8003240:	5802541c 	.word	0x5802541c
 8003244:	58025430 	.word	0x58025430
 8003248:	58025444 	.word	0x58025444
 800324c:	58025458 	.word	0x58025458
 8003250:	5802546c 	.word	0x5802546c
 8003254:	58025480 	.word	0x58025480
 8003258:	58025494 	.word	0x58025494
 800325c:	2300      	movs	r3, #0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003270:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6d      	ldr	r2, [pc, #436]	; (800342c <HAL_DMA_Abort+0x444>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d04a      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6b      	ldr	r2, [pc, #428]	; (8003430 <HAL_DMA_Abort+0x448>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d045      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6a      	ldr	r2, [pc, #424]	; (8003434 <HAL_DMA_Abort+0x44c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d040      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a68      	ldr	r2, [pc, #416]	; (8003438 <HAL_DMA_Abort+0x450>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d03b      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a67      	ldr	r2, [pc, #412]	; (800343c <HAL_DMA_Abort+0x454>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d036      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a65      	ldr	r2, [pc, #404]	; (8003440 <HAL_DMA_Abort+0x458>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d031      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a64      	ldr	r2, [pc, #400]	; (8003444 <HAL_DMA_Abort+0x45c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d02c      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a62      	ldr	r2, [pc, #392]	; (8003448 <HAL_DMA_Abort+0x460>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d027      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a61      	ldr	r2, [pc, #388]	; (800344c <HAL_DMA_Abort+0x464>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d022      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a5f      	ldr	r2, [pc, #380]	; (8003450 <HAL_DMA_Abort+0x468>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01d      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a5e      	ldr	r2, [pc, #376]	; (8003454 <HAL_DMA_Abort+0x46c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d018      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a5c      	ldr	r2, [pc, #368]	; (8003458 <HAL_DMA_Abort+0x470>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a5b      	ldr	r2, [pc, #364]	; (800345c <HAL_DMA_Abort+0x474>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a59      	ldr	r2, [pc, #356]	; (8003460 <HAL_DMA_Abort+0x478>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a58      	ldr	r2, [pc, #352]	; (8003464 <HAL_DMA_Abort+0x47c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_DMA_Abort+0x32a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a56      	ldr	r2, [pc, #344]	; (8003468 <HAL_DMA_Abort+0x480>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <HAL_DMA_Abort+0x33c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e007      	b.n	8003334 <HAL_DMA_Abort+0x34c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003334:	e013      	b.n	800335e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003336:	f7fe ff1d 	bl	8002174 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b05      	cmp	r3, #5
 8003342:	d90c      	bls.n	800335e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2203      	movs	r2, #3
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e12d      	b.n	80035ba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1e5      	bne.n	8003336 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2f      	ldr	r2, [pc, #188]	; (800342c <HAL_DMA_Abort+0x444>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d04a      	beq.n	800340a <HAL_DMA_Abort+0x422>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2d      	ldr	r2, [pc, #180]	; (8003430 <HAL_DMA_Abort+0x448>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d045      	beq.n	800340a <HAL_DMA_Abort+0x422>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <HAL_DMA_Abort+0x44c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d040      	beq.n	800340a <HAL_DMA_Abort+0x422>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2a      	ldr	r2, [pc, #168]	; (8003438 <HAL_DMA_Abort+0x450>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d03b      	beq.n	800340a <HAL_DMA_Abort+0x422>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a29      	ldr	r2, [pc, #164]	; (800343c <HAL_DMA_Abort+0x454>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d036      	beq.n	800340a <HAL_DMA_Abort+0x422>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_DMA_Abort+0x458>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d031      	beq.n	800340a <HAL_DMA_Abort+0x422>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a26      	ldr	r2, [pc, #152]	; (8003444 <HAL_DMA_Abort+0x45c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d02c      	beq.n	800340a <HAL_DMA_Abort+0x422>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a24      	ldr	r2, [pc, #144]	; (8003448 <HAL_DMA_Abort+0x460>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d027      	beq.n	800340a <HAL_DMA_Abort+0x422>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a23      	ldr	r2, [pc, #140]	; (800344c <HAL_DMA_Abort+0x464>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d022      	beq.n	800340a <HAL_DMA_Abort+0x422>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a21      	ldr	r2, [pc, #132]	; (8003450 <HAL_DMA_Abort+0x468>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01d      	beq.n	800340a <HAL_DMA_Abort+0x422>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a20      	ldr	r2, [pc, #128]	; (8003454 <HAL_DMA_Abort+0x46c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d018      	beq.n	800340a <HAL_DMA_Abort+0x422>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <HAL_DMA_Abort+0x470>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_DMA_Abort+0x422>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_DMA_Abort+0x474>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_Abort+0x422>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_DMA_Abort+0x478>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d009      	beq.n	800340a <HAL_DMA_Abort+0x422>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_DMA_Abort+0x47c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d004      	beq.n	800340a <HAL_DMA_Abort+0x422>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_DMA_Abort+0x480>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_DMA_Abort+0x426>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_DMA_Abort+0x428>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d02b      	beq.n	800346c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	223f      	movs	r2, #63	; 0x3f
 8003424:	409a      	lsls	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	e02a      	b.n	8003482 <HAL_DMA_Abort+0x49a>
 800342c:	40020010 	.word	0x40020010
 8003430:	40020028 	.word	0x40020028
 8003434:	40020040 	.word	0x40020040
 8003438:	40020058 	.word	0x40020058
 800343c:	40020070 	.word	0x40020070
 8003440:	40020088 	.word	0x40020088
 8003444:	400200a0 	.word	0x400200a0
 8003448:	400200b8 	.word	0x400200b8
 800344c:	40020410 	.word	0x40020410
 8003450:	40020428 	.word	0x40020428
 8003454:	40020440 	.word	0x40020440
 8003458:	40020458 	.word	0x40020458
 800345c:	40020470 	.word	0x40020470
 8003460:	40020488 	.word	0x40020488
 8003464:	400204a0 	.word	0x400204a0
 8003468:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	2201      	movs	r2, #1
 800347c:	409a      	lsls	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a4f      	ldr	r2, [pc, #316]	; (80035c4 <HAL_DMA_Abort+0x5dc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d072      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a4d      	ldr	r2, [pc, #308]	; (80035c8 <HAL_DMA_Abort+0x5e0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d06d      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a4c      	ldr	r2, [pc, #304]	; (80035cc <HAL_DMA_Abort+0x5e4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d068      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a4a      	ldr	r2, [pc, #296]	; (80035d0 <HAL_DMA_Abort+0x5e8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d063      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a49      	ldr	r2, [pc, #292]	; (80035d4 <HAL_DMA_Abort+0x5ec>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d05e      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a47      	ldr	r2, [pc, #284]	; (80035d8 <HAL_DMA_Abort+0x5f0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d059      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a46      	ldr	r2, [pc, #280]	; (80035dc <HAL_DMA_Abort+0x5f4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d054      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a44      	ldr	r2, [pc, #272]	; (80035e0 <HAL_DMA_Abort+0x5f8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d04f      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a43      	ldr	r2, [pc, #268]	; (80035e4 <HAL_DMA_Abort+0x5fc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d04a      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a41      	ldr	r2, [pc, #260]	; (80035e8 <HAL_DMA_Abort+0x600>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d045      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a40      	ldr	r2, [pc, #256]	; (80035ec <HAL_DMA_Abort+0x604>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d040      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a3e      	ldr	r2, [pc, #248]	; (80035f0 <HAL_DMA_Abort+0x608>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d03b      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <HAL_DMA_Abort+0x60c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d036      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a3b      	ldr	r2, [pc, #236]	; (80035f8 <HAL_DMA_Abort+0x610>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d031      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a3a      	ldr	r2, [pc, #232]	; (80035fc <HAL_DMA_Abort+0x614>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d02c      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a38      	ldr	r2, [pc, #224]	; (8003600 <HAL_DMA_Abort+0x618>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d027      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a37      	ldr	r2, [pc, #220]	; (8003604 <HAL_DMA_Abort+0x61c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d022      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a35      	ldr	r2, [pc, #212]	; (8003608 <HAL_DMA_Abort+0x620>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01d      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a34      	ldr	r2, [pc, #208]	; (800360c <HAL_DMA_Abort+0x624>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d018      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a32      	ldr	r2, [pc, #200]	; (8003610 <HAL_DMA_Abort+0x628>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a31      	ldr	r2, [pc, #196]	; (8003614 <HAL_DMA_Abort+0x62c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00e      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2f      	ldr	r2, [pc, #188]	; (8003618 <HAL_DMA_Abort+0x630>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d009      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2e      	ldr	r2, [pc, #184]	; (800361c <HAL_DMA_Abort+0x634>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d004      	beq.n	8003572 <HAL_DMA_Abort+0x58a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2c      	ldr	r2, [pc, #176]	; (8003620 <HAL_DMA_Abort+0x638>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_DMA_Abort+0x58e>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_DMA_Abort+0x590>
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003584:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800359c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035a6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40020010 	.word	0x40020010
 80035c8:	40020028 	.word	0x40020028
 80035cc:	40020040 	.word	0x40020040
 80035d0:	40020058 	.word	0x40020058
 80035d4:	40020070 	.word	0x40020070
 80035d8:	40020088 	.word	0x40020088
 80035dc:	400200a0 	.word	0x400200a0
 80035e0:	400200b8 	.word	0x400200b8
 80035e4:	40020410 	.word	0x40020410
 80035e8:	40020428 	.word	0x40020428
 80035ec:	40020440 	.word	0x40020440
 80035f0:	40020458 	.word	0x40020458
 80035f4:	40020470 	.word	0x40020470
 80035f8:	40020488 	.word	0x40020488
 80035fc:	400204a0 	.word	0x400204a0
 8003600:	400204b8 	.word	0x400204b8
 8003604:	58025408 	.word	0x58025408
 8003608:	5802541c 	.word	0x5802541c
 800360c:	58025430 	.word	0x58025430
 8003610:	58025444 	.word	0x58025444
 8003614:	58025458 	.word	0x58025458
 8003618:	5802546c 	.word	0x5802546c
 800361c:	58025480 	.word	0x58025480
 8003620:	58025494 	.word	0x58025494

08003624 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e205      	b.n	8003a42 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d004      	beq.n	800364c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e1fa      	b.n	8003a42 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a8c      	ldr	r2, [pc, #560]	; (8003884 <HAL_DMA_Abort_IT+0x260>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04a      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a8b      	ldr	r2, [pc, #556]	; (8003888 <HAL_DMA_Abort_IT+0x264>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d045      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a89      	ldr	r2, [pc, #548]	; (800388c <HAL_DMA_Abort_IT+0x268>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d040      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a88      	ldr	r2, [pc, #544]	; (8003890 <HAL_DMA_Abort_IT+0x26c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d03b      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a86      	ldr	r2, [pc, #536]	; (8003894 <HAL_DMA_Abort_IT+0x270>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d036      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a85      	ldr	r2, [pc, #532]	; (8003898 <HAL_DMA_Abort_IT+0x274>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d031      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a83      	ldr	r2, [pc, #524]	; (800389c <HAL_DMA_Abort_IT+0x278>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02c      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a82      	ldr	r2, [pc, #520]	; (80038a0 <HAL_DMA_Abort_IT+0x27c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d027      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a80      	ldr	r2, [pc, #512]	; (80038a4 <HAL_DMA_Abort_IT+0x280>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d022      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7f      	ldr	r2, [pc, #508]	; (80038a8 <HAL_DMA_Abort_IT+0x284>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d01d      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a7d      	ldr	r2, [pc, #500]	; (80038ac <HAL_DMA_Abort_IT+0x288>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7c      	ldr	r2, [pc, #496]	; (80038b0 <HAL_DMA_Abort_IT+0x28c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a7a      	ldr	r2, [pc, #488]	; (80038b4 <HAL_DMA_Abort_IT+0x290>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a79      	ldr	r2, [pc, #484]	; (80038b8 <HAL_DMA_Abort_IT+0x294>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a77      	ldr	r2, [pc, #476]	; (80038bc <HAL_DMA_Abort_IT+0x298>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a76      	ldr	r2, [pc, #472]	; (80038c0 <HAL_DMA_Abort_IT+0x29c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d101      	bne.n	80036f0 <HAL_DMA_Abort_IT+0xcc>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_DMA_Abort_IT+0xce>
 80036f0:	2300      	movs	r3, #0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d065      	beq.n	80037c2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2204      	movs	r2, #4
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a60      	ldr	r2, [pc, #384]	; (8003884 <HAL_DMA_Abort_IT+0x260>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d04a      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a5e      	ldr	r2, [pc, #376]	; (8003888 <HAL_DMA_Abort_IT+0x264>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d045      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a5d      	ldr	r2, [pc, #372]	; (800388c <HAL_DMA_Abort_IT+0x268>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d040      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a5b      	ldr	r2, [pc, #364]	; (8003890 <HAL_DMA_Abort_IT+0x26c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d03b      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a5a      	ldr	r2, [pc, #360]	; (8003894 <HAL_DMA_Abort_IT+0x270>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d036      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a58      	ldr	r2, [pc, #352]	; (8003898 <HAL_DMA_Abort_IT+0x274>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d031      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a57      	ldr	r2, [pc, #348]	; (800389c <HAL_DMA_Abort_IT+0x278>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d02c      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a55      	ldr	r2, [pc, #340]	; (80038a0 <HAL_DMA_Abort_IT+0x27c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d027      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a54      	ldr	r2, [pc, #336]	; (80038a4 <HAL_DMA_Abort_IT+0x280>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d022      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a52      	ldr	r2, [pc, #328]	; (80038a8 <HAL_DMA_Abort_IT+0x284>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01d      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a51      	ldr	r2, [pc, #324]	; (80038ac <HAL_DMA_Abort_IT+0x288>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d018      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a4f      	ldr	r2, [pc, #316]	; (80038b0 <HAL_DMA_Abort_IT+0x28c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a4e      	ldr	r2, [pc, #312]	; (80038b4 <HAL_DMA_Abort_IT+0x290>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a4c      	ldr	r2, [pc, #304]	; (80038b8 <HAL_DMA_Abort_IT+0x294>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d009      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a4b      	ldr	r2, [pc, #300]	; (80038bc <HAL_DMA_Abort_IT+0x298>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_DMA_Abort_IT+0x17a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a49      	ldr	r2, [pc, #292]	; (80038c0 <HAL_DMA_Abort_IT+0x29c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d108      	bne.n	80037b0 <HAL_DMA_Abort_IT+0x18c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e147      	b.n	8003a40 <HAL_DMA_Abort_IT+0x41c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	e13e      	b.n	8003a40 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 020e 	bic.w	r2, r2, #14
 80037d0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2b      	ldr	r2, [pc, #172]	; (8003884 <HAL_DMA_Abort_IT+0x260>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d04a      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a29      	ldr	r2, [pc, #164]	; (8003888 <HAL_DMA_Abort_IT+0x264>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d045      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a28      	ldr	r2, [pc, #160]	; (800388c <HAL_DMA_Abort_IT+0x268>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d040      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a26      	ldr	r2, [pc, #152]	; (8003890 <HAL_DMA_Abort_IT+0x26c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d03b      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a25      	ldr	r2, [pc, #148]	; (8003894 <HAL_DMA_Abort_IT+0x270>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d036      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a23      	ldr	r2, [pc, #140]	; (8003898 <HAL_DMA_Abort_IT+0x274>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d031      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a22      	ldr	r2, [pc, #136]	; (800389c <HAL_DMA_Abort_IT+0x278>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d02c      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a20      	ldr	r2, [pc, #128]	; (80038a0 <HAL_DMA_Abort_IT+0x27c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d027      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <HAL_DMA_Abort_IT+0x280>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d022      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_DMA_Abort_IT+0x284>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1c      	ldr	r2, [pc, #112]	; (80038ac <HAL_DMA_Abort_IT+0x288>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d018      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <HAL_DMA_Abort_IT+0x28c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <HAL_DMA_Abort_IT+0x290>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <HAL_DMA_Abort_IT+0x294>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <HAL_DMA_Abort_IT+0x298>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_DMA_Abort_IT+0x24e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <HAL_DMA_Abort_IT+0x29c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d128      	bne.n	80038c4 <HAL_DMA_Abort_IT+0x2a0>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e027      	b.n	80038d4 <HAL_DMA_Abort_IT+0x2b0>
 8003884:	40020010 	.word	0x40020010
 8003888:	40020028 	.word	0x40020028
 800388c:	40020040 	.word	0x40020040
 8003890:	40020058 	.word	0x40020058
 8003894:	40020070 	.word	0x40020070
 8003898:	40020088 	.word	0x40020088
 800389c:	400200a0 	.word	0x400200a0
 80038a0:	400200b8 	.word	0x400200b8
 80038a4:	40020410 	.word	0x40020410
 80038a8:	40020428 	.word	0x40020428
 80038ac:	40020440 	.word	0x40020440
 80038b0:	40020458 	.word	0x40020458
 80038b4:	40020470 	.word	0x40020470
 80038b8:	40020488 	.word	0x40020488
 80038bc:	400204a0 	.word	0x400204a0
 80038c0:	400204b8 	.word	0x400204b8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_DMA_Abort_IT+0x428>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d072      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5b      	ldr	r2, [pc, #364]	; (8003a50 <HAL_DMA_Abort_IT+0x42c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d06d      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <HAL_DMA_Abort_IT+0x430>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d068      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <HAL_DMA_Abort_IT+0x434>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d063      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <HAL_DMA_Abort_IT+0x438>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d05e      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a55      	ldr	r2, [pc, #340]	; (8003a60 <HAL_DMA_Abort_IT+0x43c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d059      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a53      	ldr	r2, [pc, #332]	; (8003a64 <HAL_DMA_Abort_IT+0x440>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d054      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a52      	ldr	r2, [pc, #328]	; (8003a68 <HAL_DMA_Abort_IT+0x444>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d04f      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a50      	ldr	r2, [pc, #320]	; (8003a6c <HAL_DMA_Abort_IT+0x448>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d04a      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a4f      	ldr	r2, [pc, #316]	; (8003a70 <HAL_DMA_Abort_IT+0x44c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d045      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a4d      	ldr	r2, [pc, #308]	; (8003a74 <HAL_DMA_Abort_IT+0x450>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d040      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a4c      	ldr	r2, [pc, #304]	; (8003a78 <HAL_DMA_Abort_IT+0x454>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d03b      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a4a      	ldr	r2, [pc, #296]	; (8003a7c <HAL_DMA_Abort_IT+0x458>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d036      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a49      	ldr	r2, [pc, #292]	; (8003a80 <HAL_DMA_Abort_IT+0x45c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d031      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a47      	ldr	r2, [pc, #284]	; (8003a84 <HAL_DMA_Abort_IT+0x460>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02c      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a46      	ldr	r2, [pc, #280]	; (8003a88 <HAL_DMA_Abort_IT+0x464>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d027      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a44      	ldr	r2, [pc, #272]	; (8003a8c <HAL_DMA_Abort_IT+0x468>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d022      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a43      	ldr	r2, [pc, #268]	; (8003a90 <HAL_DMA_Abort_IT+0x46c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d01d      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a41      	ldr	r2, [pc, #260]	; (8003a94 <HAL_DMA_Abort_IT+0x470>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d018      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a40      	ldr	r2, [pc, #256]	; (8003a98 <HAL_DMA_Abort_IT+0x474>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a3e      	ldr	r2, [pc, #248]	; (8003a9c <HAL_DMA_Abort_IT+0x478>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00e      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a3d      	ldr	r2, [pc, #244]	; (8003aa0 <HAL_DMA_Abort_IT+0x47c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d009      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a3b      	ldr	r2, [pc, #236]	; (8003aa4 <HAL_DMA_Abort_IT+0x480>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x3a0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a3a      	ldr	r2, [pc, #232]	; (8003aa8 <HAL_DMA_Abort_IT+0x484>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d101      	bne.n	80039c8 <HAL_DMA_Abort_IT+0x3a4>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_DMA_Abort_IT+0x3a6>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d028      	beq.n	8003a20 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	2201      	movs	r2, #1
 80039ee:	409a      	lsls	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40020010 	.word	0x40020010
 8003a50:	40020028 	.word	0x40020028
 8003a54:	40020040 	.word	0x40020040
 8003a58:	40020058 	.word	0x40020058
 8003a5c:	40020070 	.word	0x40020070
 8003a60:	40020088 	.word	0x40020088
 8003a64:	400200a0 	.word	0x400200a0
 8003a68:	400200b8 	.word	0x400200b8
 8003a6c:	40020410 	.word	0x40020410
 8003a70:	40020428 	.word	0x40020428
 8003a74:	40020440 	.word	0x40020440
 8003a78:	40020458 	.word	0x40020458
 8003a7c:	40020470 	.word	0x40020470
 8003a80:	40020488 	.word	0x40020488
 8003a84:	400204a0 	.word	0x400204a0
 8003a88:	400204b8 	.word	0x400204b8
 8003a8c:	58025408 	.word	0x58025408
 8003a90:	5802541c 	.word	0x5802541c
 8003a94:	58025430 	.word	0x58025430
 8003a98:	58025444 	.word	0x58025444
 8003a9c:	58025458 	.word	0x58025458
 8003aa0:	5802546c 	.word	0x5802546c
 8003aa4:	58025480 	.word	0x58025480
 8003aa8:	58025494 	.word	0x58025494

08003aac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ab8:	4b67      	ldr	r3, [pc, #412]	; (8003c58 <HAL_DMA_IRQHandler+0x1ac>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a67      	ldr	r2, [pc, #412]	; (8003c5c <HAL_DMA_IRQHandler+0x1b0>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	0a9b      	lsrs	r3, r3, #10
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a5f      	ldr	r2, [pc, #380]	; (8003c60 <HAL_DMA_IRQHandler+0x1b4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d04a      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a5d      	ldr	r2, [pc, #372]	; (8003c64 <HAL_DMA_IRQHandler+0x1b8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d045      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a5c      	ldr	r2, [pc, #368]	; (8003c68 <HAL_DMA_IRQHandler+0x1bc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d040      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a5a      	ldr	r2, [pc, #360]	; (8003c6c <HAL_DMA_IRQHandler+0x1c0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d03b      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a59      	ldr	r2, [pc, #356]	; (8003c70 <HAL_DMA_IRQHandler+0x1c4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d036      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a57      	ldr	r2, [pc, #348]	; (8003c74 <HAL_DMA_IRQHandler+0x1c8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d031      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a56      	ldr	r2, [pc, #344]	; (8003c78 <HAL_DMA_IRQHandler+0x1cc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d02c      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a54      	ldr	r2, [pc, #336]	; (8003c7c <HAL_DMA_IRQHandler+0x1d0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d027      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a53      	ldr	r2, [pc, #332]	; (8003c80 <HAL_DMA_IRQHandler+0x1d4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d022      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a51      	ldr	r2, [pc, #324]	; (8003c84 <HAL_DMA_IRQHandler+0x1d8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01d      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a50      	ldr	r2, [pc, #320]	; (8003c88 <HAL_DMA_IRQHandler+0x1dc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a4e      	ldr	r2, [pc, #312]	; (8003c8c <HAL_DMA_IRQHandler+0x1e0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a4d      	ldr	r2, [pc, #308]	; (8003c90 <HAL_DMA_IRQHandler+0x1e4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a4b      	ldr	r2, [pc, #300]	; (8003c94 <HAL_DMA_IRQHandler+0x1e8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a4a      	ldr	r2, [pc, #296]	; (8003c98 <HAL_DMA_IRQHandler+0x1ec>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xd2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a48      	ldr	r2, [pc, #288]	; (8003c9c <HAL_DMA_IRQHandler+0x1f0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <HAL_DMA_IRQHandler+0xd6>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <HAL_DMA_IRQHandler+0xd8>
 8003b82:	2300      	movs	r3, #0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 842b 	beq.w	80043e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	2208      	movs	r2, #8
 8003b94:	409a      	lsls	r2, r3
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80a2 	beq.w	8003ce4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2e      	ldr	r2, [pc, #184]	; (8003c60 <HAL_DMA_IRQHandler+0x1b4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d04a      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2d      	ldr	r2, [pc, #180]	; (8003c64 <HAL_DMA_IRQHandler+0x1b8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d045      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <HAL_DMA_IRQHandler+0x1bc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d040      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <HAL_DMA_IRQHandler+0x1c0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d03b      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a28      	ldr	r2, [pc, #160]	; (8003c70 <HAL_DMA_IRQHandler+0x1c4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d036      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a27      	ldr	r2, [pc, #156]	; (8003c74 <HAL_DMA_IRQHandler+0x1c8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d031      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <HAL_DMA_IRQHandler+0x1cc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02c      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <HAL_DMA_IRQHandler+0x1d0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d027      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_DMA_IRQHandler+0x1d4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d022      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_DMA_IRQHandler+0x1d8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d01d      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_DMA_IRQHandler+0x1dc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <HAL_DMA_IRQHandler+0x1e0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <HAL_DMA_IRQHandler+0x1e4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1b      	ldr	r2, [pc, #108]	; (8003c94 <HAL_DMA_IRQHandler+0x1e8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <HAL_DMA_IRQHandler+0x1ec>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x194>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a18      	ldr	r2, [pc, #96]	; (8003c9c <HAL_DMA_IRQHandler+0x1f0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d12f      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x1f4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bf14      	ite	ne
 8003c4e:	2301      	movne	r3, #1
 8003c50:	2300      	moveq	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	e02e      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x208>
 8003c56:	bf00      	nop
 8003c58:	24000000 	.word	0x24000000
 8003c5c:	1b4e81b5 	.word	0x1b4e81b5
 8003c60:	40020010 	.word	0x40020010
 8003c64:	40020028 	.word	0x40020028
 8003c68:	40020040 	.word	0x40020040
 8003c6c:	40020058 	.word	0x40020058
 8003c70:	40020070 	.word	0x40020070
 8003c74:	40020088 	.word	0x40020088
 8003c78:	400200a0 	.word	0x400200a0
 8003c7c:	400200b8 	.word	0x400200b8
 8003c80:	40020410 	.word	0x40020410
 8003c84:	40020428 	.word	0x40020428
 8003c88:	40020440 	.word	0x40020440
 8003c8c:	40020458 	.word	0x40020458
 8003c90:	40020470 	.word	0x40020470
 8003c94:	40020488 	.word	0x40020488
 8003c98:	400204a0 	.word	0x400204a0
 8003c9c:	400204b8 	.word	0x400204b8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0204 	bic.w	r2, r2, #4
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d06e      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a69      	ldr	r2, [pc, #420]	; (8003ea4 <HAL_DMA_IRQHandler+0x3f8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04a      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a67      	ldr	r2, [pc, #412]	; (8003ea8 <HAL_DMA_IRQHandler+0x3fc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d045      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a66      	ldr	r2, [pc, #408]	; (8003eac <HAL_DMA_IRQHandler+0x400>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d040      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a64      	ldr	r2, [pc, #400]	; (8003eb0 <HAL_DMA_IRQHandler+0x404>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d03b      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a63      	ldr	r2, [pc, #396]	; (8003eb4 <HAL_DMA_IRQHandler+0x408>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d036      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a61      	ldr	r2, [pc, #388]	; (8003eb8 <HAL_DMA_IRQHandler+0x40c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d031      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a60      	ldr	r2, [pc, #384]	; (8003ebc <HAL_DMA_IRQHandler+0x410>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d02c      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a5e      	ldr	r2, [pc, #376]	; (8003ec0 <HAL_DMA_IRQHandler+0x414>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d027      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a5d      	ldr	r2, [pc, #372]	; (8003ec4 <HAL_DMA_IRQHandler+0x418>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a5b      	ldr	r2, [pc, #364]	; (8003ec8 <HAL_DMA_IRQHandler+0x41c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01d      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a5a      	ldr	r2, [pc, #360]	; (8003ecc <HAL_DMA_IRQHandler+0x420>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d018      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a58      	ldr	r2, [pc, #352]	; (8003ed0 <HAL_DMA_IRQHandler+0x424>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a57      	ldr	r2, [pc, #348]	; (8003ed4 <HAL_DMA_IRQHandler+0x428>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a55      	ldr	r2, [pc, #340]	; (8003ed8 <HAL_DMA_IRQHandler+0x42c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a54      	ldr	r2, [pc, #336]	; (8003edc <HAL_DMA_IRQHandler+0x430>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x2ee>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a52      	ldr	r2, [pc, #328]	; (8003ee0 <HAL_DMA_IRQHandler+0x434>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d10a      	bne.n	8003db0 <HAL_DMA_IRQHandler+0x304>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e003      	b.n	8003db8 <HAL_DMA_IRQHandler+0x30c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f043 0202 	orr.w	r2, r3, #2
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2204      	movs	r2, #4
 8003de2:	409a      	lsls	r2, r3
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 808f 	beq.w	8003f0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2c      	ldr	r2, [pc, #176]	; (8003ea4 <HAL_DMA_IRQHandler+0x3f8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d04a      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <HAL_DMA_IRQHandler+0x3fc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d045      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a29      	ldr	r2, [pc, #164]	; (8003eac <HAL_DMA_IRQHandler+0x400>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d040      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a27      	ldr	r2, [pc, #156]	; (8003eb0 <HAL_DMA_IRQHandler+0x404>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d03b      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <HAL_DMA_IRQHandler+0x408>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d036      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a24      	ldr	r2, [pc, #144]	; (8003eb8 <HAL_DMA_IRQHandler+0x40c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d031      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a23      	ldr	r2, [pc, #140]	; (8003ebc <HAL_DMA_IRQHandler+0x410>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d02c      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <HAL_DMA_IRQHandler+0x414>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d027      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a20      	ldr	r2, [pc, #128]	; (8003ec4 <HAL_DMA_IRQHandler+0x418>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d022      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <HAL_DMA_IRQHandler+0x41c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01d      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <HAL_DMA_IRQHandler+0x420>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d018      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <HAL_DMA_IRQHandler+0x424>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <HAL_DMA_IRQHandler+0x428>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00e      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_DMA_IRQHandler+0x42c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d009      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <HAL_DMA_IRQHandler+0x430>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x3e2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <HAL_DMA_IRQHandler+0x434>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d12a      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0x438>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e023      	b.n	8003eec <HAL_DMA_IRQHandler+0x440>
 8003ea4:	40020010 	.word	0x40020010
 8003ea8:	40020028 	.word	0x40020028
 8003eac:	40020040 	.word	0x40020040
 8003eb0:	40020058 	.word	0x40020058
 8003eb4:	40020070 	.word	0x40020070
 8003eb8:	40020088 	.word	0x40020088
 8003ebc:	400200a0 	.word	0x400200a0
 8003ec0:	400200b8 	.word	0x400200b8
 8003ec4:	40020410 	.word	0x40020410
 8003ec8:	40020428 	.word	0x40020428
 8003ecc:	40020440 	.word	0x40020440
 8003ed0:	40020458 	.word	0x40020458
 8003ed4:	40020470 	.word	0x40020470
 8003ed8:	40020488 	.word	0x40020488
 8003edc:	400204a0 	.word	0x400204a0
 8003ee0:	400204b8 	.word	0x400204b8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2300      	movs	r3, #0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00d      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2204      	movs	r2, #4
 8003efa:	409a      	lsls	r2, r3
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f04:	f043 0204 	orr.w	r2, r3, #4
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2210      	movs	r2, #16
 8003f16:	409a      	lsls	r2, r3
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80a6 	beq.w	800406e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a85      	ldr	r2, [pc, #532]	; (800413c <HAL_DMA_IRQHandler+0x690>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d04a      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a83      	ldr	r2, [pc, #524]	; (8004140 <HAL_DMA_IRQHandler+0x694>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d045      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a82      	ldr	r2, [pc, #520]	; (8004144 <HAL_DMA_IRQHandler+0x698>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d040      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a80      	ldr	r2, [pc, #512]	; (8004148 <HAL_DMA_IRQHandler+0x69c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d03b      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a7f      	ldr	r2, [pc, #508]	; (800414c <HAL_DMA_IRQHandler+0x6a0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d036      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a7d      	ldr	r2, [pc, #500]	; (8004150 <HAL_DMA_IRQHandler+0x6a4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d031      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a7c      	ldr	r2, [pc, #496]	; (8004154 <HAL_DMA_IRQHandler+0x6a8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d02c      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a7a      	ldr	r2, [pc, #488]	; (8004158 <HAL_DMA_IRQHandler+0x6ac>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d027      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a79      	ldr	r2, [pc, #484]	; (800415c <HAL_DMA_IRQHandler+0x6b0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d022      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a77      	ldr	r2, [pc, #476]	; (8004160 <HAL_DMA_IRQHandler+0x6b4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01d      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a76      	ldr	r2, [pc, #472]	; (8004164 <HAL_DMA_IRQHandler+0x6b8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d018      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a74      	ldr	r2, [pc, #464]	; (8004168 <HAL_DMA_IRQHandler+0x6bc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a73      	ldr	r2, [pc, #460]	; (800416c <HAL_DMA_IRQHandler+0x6c0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a71      	ldr	r2, [pc, #452]	; (8004170 <HAL_DMA_IRQHandler+0x6c4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d009      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a70      	ldr	r2, [pc, #448]	; (8004174 <HAL_DMA_IRQHandler+0x6c8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x516>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a6e      	ldr	r2, [pc, #440]	; (8004178 <HAL_DMA_IRQHandler+0x6cc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x52c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	e009      	b.n	8003fec <HAL_DMA_IRQHandler+0x540>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d03e      	beq.n	800406e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d018      	beq.n	8004040 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d108      	bne.n	800402e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d024      	beq.n	800406e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
 800402c:	e01f      	b.n	800406e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01b      	beq.n	800406e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
 800403e:	e016      	b.n	800406e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d107      	bne.n	800405e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0208 	bic.w	r2, r2, #8
 800405c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2220      	movs	r2, #32
 8004078:	409a      	lsls	r2, r3
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8110 	beq.w	80042a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2c      	ldr	r2, [pc, #176]	; (800413c <HAL_DMA_IRQHandler+0x690>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d04a      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2b      	ldr	r2, [pc, #172]	; (8004140 <HAL_DMA_IRQHandler+0x694>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d045      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a29      	ldr	r2, [pc, #164]	; (8004144 <HAL_DMA_IRQHandler+0x698>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d040      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a28      	ldr	r2, [pc, #160]	; (8004148 <HAL_DMA_IRQHandler+0x69c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d03b      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a26      	ldr	r2, [pc, #152]	; (800414c <HAL_DMA_IRQHandler+0x6a0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d036      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a25      	ldr	r2, [pc, #148]	; (8004150 <HAL_DMA_IRQHandler+0x6a4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d031      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a23      	ldr	r2, [pc, #140]	; (8004154 <HAL_DMA_IRQHandler+0x6a8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02c      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a22      	ldr	r2, [pc, #136]	; (8004158 <HAL_DMA_IRQHandler+0x6ac>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d027      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a20      	ldr	r2, [pc, #128]	; (800415c <HAL_DMA_IRQHandler+0x6b0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d022      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1f      	ldr	r2, [pc, #124]	; (8004160 <HAL_DMA_IRQHandler+0x6b4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d01d      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <HAL_DMA_IRQHandler+0x6b8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d018      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <HAL_DMA_IRQHandler+0x6bc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1a      	ldr	r2, [pc, #104]	; (800416c <HAL_DMA_IRQHandler+0x6c0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a19      	ldr	r2, [pc, #100]	; (8004170 <HAL_DMA_IRQHandler+0x6c4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a17      	ldr	r2, [pc, #92]	; (8004174 <HAL_DMA_IRQHandler+0x6c8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_DMA_IRQHandler+0x678>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a16      	ldr	r2, [pc, #88]	; (8004178 <HAL_DMA_IRQHandler+0x6cc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d12b      	bne.n	800417c <HAL_DMA_IRQHandler+0x6d0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	e02a      	b.n	8004190 <HAL_DMA_IRQHandler+0x6e4>
 800413a:	bf00      	nop
 800413c:	40020010 	.word	0x40020010
 8004140:	40020028 	.word	0x40020028
 8004144:	40020040 	.word	0x40020040
 8004148:	40020058 	.word	0x40020058
 800414c:	40020070 	.word	0x40020070
 8004150:	40020088 	.word	0x40020088
 8004154:	400200a0 	.word	0x400200a0
 8004158:	400200b8 	.word	0x400200b8
 800415c:	40020410 	.word	0x40020410
 8004160:	40020428 	.word	0x40020428
 8004164:	40020440 	.word	0x40020440
 8004168:	40020458 	.word	0x40020458
 800416c:	40020470 	.word	0x40020470
 8004170:	40020488 	.word	0x40020488
 8004174:	400204a0 	.word	0x400204a0
 8004178:	400204b8 	.word	0x400204b8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf14      	ite	ne
 800418a:	2301      	movne	r3, #1
 800418c:	2300      	moveq	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8087 	beq.w	80042a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2220      	movs	r2, #32
 80041a0:	409a      	lsls	r2, r3
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d139      	bne.n	8004226 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0216 	bic.w	r2, r2, #22
 80041c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <HAL_DMA_IRQHandler+0x736>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0208 	bic.w	r2, r2, #8
 80041f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	223f      	movs	r2, #63	; 0x3f
 80041fc:	409a      	lsls	r2, r3
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 834a 	beq.w	80048b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4798      	blx	r3
          }
          return;
 8004224:	e344      	b.n	80048b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d018      	beq.n	8004266 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d108      	bne.n	8004254 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	2b00      	cmp	r3, #0
 8004248:	d02c      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
 8004252:	e027      	b.n	80042a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d023      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
 8004264:	e01e      	b.n	80042a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10f      	bne.n	8004294 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0210 	bic.w	r2, r2, #16
 8004282:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8306 	beq.w	80048ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8088 	beq.w	80043cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2204      	movs	r2, #4
 80042c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a7a      	ldr	r2, [pc, #488]	; (80044b4 <HAL_DMA_IRQHandler+0xa08>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d04a      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a79      	ldr	r2, [pc, #484]	; (80044b8 <HAL_DMA_IRQHandler+0xa0c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d045      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a77      	ldr	r2, [pc, #476]	; (80044bc <HAL_DMA_IRQHandler+0xa10>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d040      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a76      	ldr	r2, [pc, #472]	; (80044c0 <HAL_DMA_IRQHandler+0xa14>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d03b      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a74      	ldr	r2, [pc, #464]	; (80044c4 <HAL_DMA_IRQHandler+0xa18>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d036      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a73      	ldr	r2, [pc, #460]	; (80044c8 <HAL_DMA_IRQHandler+0xa1c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d031      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a71      	ldr	r2, [pc, #452]	; (80044cc <HAL_DMA_IRQHandler+0xa20>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d02c      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a70      	ldr	r2, [pc, #448]	; (80044d0 <HAL_DMA_IRQHandler+0xa24>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d027      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6e      	ldr	r2, [pc, #440]	; (80044d4 <HAL_DMA_IRQHandler+0xa28>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d022      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6d      	ldr	r2, [pc, #436]	; (80044d8 <HAL_DMA_IRQHandler+0xa2c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d01d      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6b      	ldr	r2, [pc, #428]	; (80044dc <HAL_DMA_IRQHandler+0xa30>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d018      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6a      	ldr	r2, [pc, #424]	; (80044e0 <HAL_DMA_IRQHandler+0xa34>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d013      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a68      	ldr	r2, [pc, #416]	; (80044e4 <HAL_DMA_IRQHandler+0xa38>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00e      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a67      	ldr	r2, [pc, #412]	; (80044e8 <HAL_DMA_IRQHandler+0xa3c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d009      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a65      	ldr	r2, [pc, #404]	; (80044ec <HAL_DMA_IRQHandler+0xa40>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d004      	beq.n	8004364 <HAL_DMA_IRQHandler+0x8b8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a64      	ldr	r2, [pc, #400]	; (80044f0 <HAL_DMA_IRQHandler+0xa44>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d108      	bne.n	8004376 <HAL_DMA_IRQHandler+0x8ca>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e007      	b.n	8004386 <HAL_DMA_IRQHandler+0x8da>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3301      	adds	r3, #1
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438e:	429a      	cmp	r2, r3
 8004390:	d307      	bcc.n	80043a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f2      	bne.n	8004386 <HAL_DMA_IRQHandler+0x8da>
 80043a0:	e000      	b.n	80043a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043a2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2203      	movs	r2, #3
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80043c2:	e003      	b.n	80043cc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8272 	beq.w	80048ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
 80043de:	e26c      	b.n	80048ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a43      	ldr	r2, [pc, #268]	; (80044f4 <HAL_DMA_IRQHandler+0xa48>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d022      	beq.n	8004430 <HAL_DMA_IRQHandler+0x984>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a42      	ldr	r2, [pc, #264]	; (80044f8 <HAL_DMA_IRQHandler+0xa4c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d01d      	beq.n	8004430 <HAL_DMA_IRQHandler+0x984>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a40      	ldr	r2, [pc, #256]	; (80044fc <HAL_DMA_IRQHandler+0xa50>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d018      	beq.n	8004430 <HAL_DMA_IRQHandler+0x984>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3f      	ldr	r2, [pc, #252]	; (8004500 <HAL_DMA_IRQHandler+0xa54>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d013      	beq.n	8004430 <HAL_DMA_IRQHandler+0x984>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3d      	ldr	r2, [pc, #244]	; (8004504 <HAL_DMA_IRQHandler+0xa58>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00e      	beq.n	8004430 <HAL_DMA_IRQHandler+0x984>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <HAL_DMA_IRQHandler+0xa5c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d009      	beq.n	8004430 <HAL_DMA_IRQHandler+0x984>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a3a      	ldr	r2, [pc, #232]	; (800450c <HAL_DMA_IRQHandler+0xa60>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d004      	beq.n	8004430 <HAL_DMA_IRQHandler+0x984>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a39      	ldr	r2, [pc, #228]	; (8004510 <HAL_DMA_IRQHandler+0xa64>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d101      	bne.n	8004434 <HAL_DMA_IRQHandler+0x988>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_DMA_IRQHandler+0x98a>
 8004434:	2300      	movs	r3, #0
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 823f 	beq.w	80048ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2204      	movs	r2, #4
 800444e:	409a      	lsls	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80cd 	beq.w	80045f4 <HAL_DMA_IRQHandler+0xb48>
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80c7 	beq.w	80045f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2204      	movs	r2, #4
 8004470:	409a      	lsls	r2, r3
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d049      	beq.n	8004514 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8210 	beq.w	80048b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800449c:	e20a      	b.n	80048b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8206 	beq.w	80048b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b0:	e200      	b.n	80048b4 <HAL_DMA_IRQHandler+0xe08>
 80044b2:	bf00      	nop
 80044b4:	40020010 	.word	0x40020010
 80044b8:	40020028 	.word	0x40020028
 80044bc:	40020040 	.word	0x40020040
 80044c0:	40020058 	.word	0x40020058
 80044c4:	40020070 	.word	0x40020070
 80044c8:	40020088 	.word	0x40020088
 80044cc:	400200a0 	.word	0x400200a0
 80044d0:	400200b8 	.word	0x400200b8
 80044d4:	40020410 	.word	0x40020410
 80044d8:	40020428 	.word	0x40020428
 80044dc:	40020440 	.word	0x40020440
 80044e0:	40020458 	.word	0x40020458
 80044e4:	40020470 	.word	0x40020470
 80044e8:	40020488 	.word	0x40020488
 80044ec:	400204a0 	.word	0x400204a0
 80044f0:	400204b8 	.word	0x400204b8
 80044f4:	58025408 	.word	0x58025408
 80044f8:	5802541c 	.word	0x5802541c
 80044fc:	58025430 	.word	0x58025430
 8004500:	58025444 	.word	0x58025444
 8004504:	58025458 	.word	0x58025458
 8004508:	5802546c 	.word	0x5802546c
 800450c:	58025480 	.word	0x58025480
 8004510:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d160      	bne.n	80045e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a8c      	ldr	r2, [pc, #560]	; (8004754 <HAL_DMA_IRQHandler+0xca8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d04a      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a8a      	ldr	r2, [pc, #552]	; (8004758 <HAL_DMA_IRQHandler+0xcac>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d045      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a89      	ldr	r2, [pc, #548]	; (800475c <HAL_DMA_IRQHandler+0xcb0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d040      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a87      	ldr	r2, [pc, #540]	; (8004760 <HAL_DMA_IRQHandler+0xcb4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d03b      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a86      	ldr	r2, [pc, #536]	; (8004764 <HAL_DMA_IRQHandler+0xcb8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d036      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a84      	ldr	r2, [pc, #528]	; (8004768 <HAL_DMA_IRQHandler+0xcbc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d031      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a83      	ldr	r2, [pc, #524]	; (800476c <HAL_DMA_IRQHandler+0xcc0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d02c      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a81      	ldr	r2, [pc, #516]	; (8004770 <HAL_DMA_IRQHandler+0xcc4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d027      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a80      	ldr	r2, [pc, #512]	; (8004774 <HAL_DMA_IRQHandler+0xcc8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d022      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a7e      	ldr	r2, [pc, #504]	; (8004778 <HAL_DMA_IRQHandler+0xccc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01d      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a7d      	ldr	r2, [pc, #500]	; (800477c <HAL_DMA_IRQHandler+0xcd0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d018      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a7b      	ldr	r2, [pc, #492]	; (8004780 <HAL_DMA_IRQHandler+0xcd4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a7a      	ldr	r2, [pc, #488]	; (8004784 <HAL_DMA_IRQHandler+0xcd8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00e      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a78      	ldr	r2, [pc, #480]	; (8004788 <HAL_DMA_IRQHandler+0xcdc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a77      	ldr	r2, [pc, #476]	; (800478c <HAL_DMA_IRQHandler+0xce0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_DMA_IRQHandler+0xb12>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a75      	ldr	r2, [pc, #468]	; (8004790 <HAL_DMA_IRQHandler+0xce4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d108      	bne.n	80045d0 <HAL_DMA_IRQHandler+0xb24>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0208 	bic.w	r2, r2, #8
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e007      	b.n	80045e0 <HAL_DMA_IRQHandler+0xb34>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8165 	beq.w	80048b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045f2:	e15f      	b.n	80048b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2202      	movs	r2, #2
 80045fe:	409a      	lsls	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80c5 	beq.w	8004794 <HAL_DMA_IRQHandler+0xce8>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80bf 	beq.w	8004794 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	2202      	movs	r2, #2
 8004620:	409a      	lsls	r2, r3
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d018      	beq.n	8004662 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 813a 	beq.w	80048b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800464c:	e134      	b.n	80048b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 8130 	beq.w	80048b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004660:	e12a      	b.n	80048b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d168      	bne.n	800473e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a38      	ldr	r2, [pc, #224]	; (8004754 <HAL_DMA_IRQHandler+0xca8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d04a      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a37      	ldr	r2, [pc, #220]	; (8004758 <HAL_DMA_IRQHandler+0xcac>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d045      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a35      	ldr	r2, [pc, #212]	; (800475c <HAL_DMA_IRQHandler+0xcb0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d040      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a34      	ldr	r2, [pc, #208]	; (8004760 <HAL_DMA_IRQHandler+0xcb4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d03b      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a32      	ldr	r2, [pc, #200]	; (8004764 <HAL_DMA_IRQHandler+0xcb8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d036      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a31      	ldr	r2, [pc, #196]	; (8004768 <HAL_DMA_IRQHandler+0xcbc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d031      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2f      	ldr	r2, [pc, #188]	; (800476c <HAL_DMA_IRQHandler+0xcc0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d02c      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2e      	ldr	r2, [pc, #184]	; (8004770 <HAL_DMA_IRQHandler+0xcc4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d027      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2c      	ldr	r2, [pc, #176]	; (8004774 <HAL_DMA_IRQHandler+0xcc8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d022      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a2b      	ldr	r2, [pc, #172]	; (8004778 <HAL_DMA_IRQHandler+0xccc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d01d      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a29      	ldr	r2, [pc, #164]	; (800477c <HAL_DMA_IRQHandler+0xcd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d018      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a28      	ldr	r2, [pc, #160]	; (8004780 <HAL_DMA_IRQHandler+0xcd4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d013      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <HAL_DMA_IRQHandler+0xcd8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00e      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a25      	ldr	r2, [pc, #148]	; (8004788 <HAL_DMA_IRQHandler+0xcdc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d009      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a23      	ldr	r2, [pc, #140]	; (800478c <HAL_DMA_IRQHandler+0xce0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d004      	beq.n	800470c <HAL_DMA_IRQHandler+0xc60>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a22      	ldr	r2, [pc, #136]	; (8004790 <HAL_DMA_IRQHandler+0xce4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d108      	bne.n	800471e <HAL_DMA_IRQHandler+0xc72>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0214 	bic.w	r2, r2, #20
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e007      	b.n	800472e <HAL_DMA_IRQHandler+0xc82>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 020a 	bic.w	r2, r2, #10
 800472c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80b8 	beq.w	80048b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004750:	e0b2      	b.n	80048b8 <HAL_DMA_IRQHandler+0xe0c>
 8004752:	bf00      	nop
 8004754:	40020010 	.word	0x40020010
 8004758:	40020028 	.word	0x40020028
 800475c:	40020040 	.word	0x40020040
 8004760:	40020058 	.word	0x40020058
 8004764:	40020070 	.word	0x40020070
 8004768:	40020088 	.word	0x40020088
 800476c:	400200a0 	.word	0x400200a0
 8004770:	400200b8 	.word	0x400200b8
 8004774:	40020410 	.word	0x40020410
 8004778:	40020428 	.word	0x40020428
 800477c:	40020440 	.word	0x40020440
 8004780:	40020458 	.word	0x40020458
 8004784:	40020470 	.word	0x40020470
 8004788:	40020488 	.word	0x40020488
 800478c:	400204a0 	.word	0x400204a0
 8004790:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	2208      	movs	r2, #8
 800479e:	409a      	lsls	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8088 	beq.w	80048ba <HAL_DMA_IRQHandler+0xe0e>
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8082 	beq.w	80048ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a41      	ldr	r2, [pc, #260]	; (80048c0 <HAL_DMA_IRQHandler+0xe14>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d04a      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a3f      	ldr	r2, [pc, #252]	; (80048c4 <HAL_DMA_IRQHandler+0xe18>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d045      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a3e      	ldr	r2, [pc, #248]	; (80048c8 <HAL_DMA_IRQHandler+0xe1c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d040      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a3c      	ldr	r2, [pc, #240]	; (80048cc <HAL_DMA_IRQHandler+0xe20>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d03b      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a3b      	ldr	r2, [pc, #236]	; (80048d0 <HAL_DMA_IRQHandler+0xe24>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d036      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a39      	ldr	r2, [pc, #228]	; (80048d4 <HAL_DMA_IRQHandler+0xe28>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d031      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a38      	ldr	r2, [pc, #224]	; (80048d8 <HAL_DMA_IRQHandler+0xe2c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d02c      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a36      	ldr	r2, [pc, #216]	; (80048dc <HAL_DMA_IRQHandler+0xe30>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d027      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a35      	ldr	r2, [pc, #212]	; (80048e0 <HAL_DMA_IRQHandler+0xe34>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d022      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a33      	ldr	r2, [pc, #204]	; (80048e4 <HAL_DMA_IRQHandler+0xe38>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d01d      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a32      	ldr	r2, [pc, #200]	; (80048e8 <HAL_DMA_IRQHandler+0xe3c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d018      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a30      	ldr	r2, [pc, #192]	; (80048ec <HAL_DMA_IRQHandler+0xe40>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2f      	ldr	r2, [pc, #188]	; (80048f0 <HAL_DMA_IRQHandler+0xe44>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00e      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2d      	ldr	r2, [pc, #180]	; (80048f4 <HAL_DMA_IRQHandler+0xe48>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d009      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <HAL_DMA_IRQHandler+0xe4c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d004      	beq.n	8004856 <HAL_DMA_IRQHandler+0xdaa>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <HAL_DMA_IRQHandler+0xe50>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d108      	bne.n	8004868 <HAL_DMA_IRQHandler+0xdbc>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 021c 	bic.w	r2, r2, #28
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e007      	b.n	8004878 <HAL_DMA_IRQHandler+0xdcc>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 020e 	bic.w	r2, r2, #14
 8004876:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	2201      	movs	r2, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4798      	blx	r3
 80048ae:	e004      	b.n	80048ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048b0:	bf00      	nop
 80048b2:	e002      	b.n	80048ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048b4:	bf00      	nop
 80048b6:	e000      	b.n	80048ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048ba:	3728      	adds	r7, #40	; 0x28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40020010 	.word	0x40020010
 80048c4:	40020028 	.word	0x40020028
 80048c8:	40020040 	.word	0x40020040
 80048cc:	40020058 	.word	0x40020058
 80048d0:	40020070 	.word	0x40020070
 80048d4:	40020088 	.word	0x40020088
 80048d8:	400200a0 	.word	0x400200a0
 80048dc:	400200b8 	.word	0x400200b8
 80048e0:	40020410 	.word	0x40020410
 80048e4:	40020428 	.word	0x40020428
 80048e8:	40020440 	.word	0x40020440
 80048ec:	40020458 	.word	0x40020458
 80048f0:	40020470 	.word	0x40020470
 80048f4:	40020488 	.word	0x40020488
 80048f8:	400204a0 	.word	0x400204a0
 80048fc:	400204b8 	.word	0x400204b8

08004900 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a84      	ldr	r2, [pc, #528]	; (8004b48 <DMA_SetConfig+0x230>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d072      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a82      	ldr	r2, [pc, #520]	; (8004b4c <DMA_SetConfig+0x234>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d06d      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a81      	ldr	r2, [pc, #516]	; (8004b50 <DMA_SetConfig+0x238>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d068      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a7f      	ldr	r2, [pc, #508]	; (8004b54 <DMA_SetConfig+0x23c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d063      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a7e      	ldr	r2, [pc, #504]	; (8004b58 <DMA_SetConfig+0x240>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d05e      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a7c      	ldr	r2, [pc, #496]	; (8004b5c <DMA_SetConfig+0x244>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d059      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a7b      	ldr	r2, [pc, #492]	; (8004b60 <DMA_SetConfig+0x248>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d054      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a79      	ldr	r2, [pc, #484]	; (8004b64 <DMA_SetConfig+0x24c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d04f      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a78      	ldr	r2, [pc, #480]	; (8004b68 <DMA_SetConfig+0x250>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d04a      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a76      	ldr	r2, [pc, #472]	; (8004b6c <DMA_SetConfig+0x254>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d045      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a75      	ldr	r2, [pc, #468]	; (8004b70 <DMA_SetConfig+0x258>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d040      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a73      	ldr	r2, [pc, #460]	; (8004b74 <DMA_SetConfig+0x25c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d03b      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a72      	ldr	r2, [pc, #456]	; (8004b78 <DMA_SetConfig+0x260>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d036      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a70      	ldr	r2, [pc, #448]	; (8004b7c <DMA_SetConfig+0x264>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d031      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a6f      	ldr	r2, [pc, #444]	; (8004b80 <DMA_SetConfig+0x268>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d02c      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a6d      	ldr	r2, [pc, #436]	; (8004b84 <DMA_SetConfig+0x26c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d027      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a6c      	ldr	r2, [pc, #432]	; (8004b88 <DMA_SetConfig+0x270>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d022      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a6a      	ldr	r2, [pc, #424]	; (8004b8c <DMA_SetConfig+0x274>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01d      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a69      	ldr	r2, [pc, #420]	; (8004b90 <DMA_SetConfig+0x278>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d018      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a67      	ldr	r2, [pc, #412]	; (8004b94 <DMA_SetConfig+0x27c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a66      	ldr	r2, [pc, #408]	; (8004b98 <DMA_SetConfig+0x280>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00e      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a64      	ldr	r2, [pc, #400]	; (8004b9c <DMA_SetConfig+0x284>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d009      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a63      	ldr	r2, [pc, #396]	; (8004ba0 <DMA_SetConfig+0x288>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d004      	beq.n	8004a22 <DMA_SetConfig+0x10a>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a61      	ldr	r2, [pc, #388]	; (8004ba4 <DMA_SetConfig+0x28c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d101      	bne.n	8004a26 <DMA_SetConfig+0x10e>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <DMA_SetConfig+0x110>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00d      	beq.n	8004a48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a3e      	ldr	r2, [pc, #248]	; (8004b48 <DMA_SetConfig+0x230>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d04a      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a3d      	ldr	r2, [pc, #244]	; (8004b4c <DMA_SetConfig+0x234>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d045      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a3b      	ldr	r2, [pc, #236]	; (8004b50 <DMA_SetConfig+0x238>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d040      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3a      	ldr	r2, [pc, #232]	; (8004b54 <DMA_SetConfig+0x23c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d03b      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a38      	ldr	r2, [pc, #224]	; (8004b58 <DMA_SetConfig+0x240>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d036      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a37      	ldr	r2, [pc, #220]	; (8004b5c <DMA_SetConfig+0x244>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d031      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a35      	ldr	r2, [pc, #212]	; (8004b60 <DMA_SetConfig+0x248>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d02c      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a34      	ldr	r2, [pc, #208]	; (8004b64 <DMA_SetConfig+0x24c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d027      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a32      	ldr	r2, [pc, #200]	; (8004b68 <DMA_SetConfig+0x250>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d022      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a31      	ldr	r2, [pc, #196]	; (8004b6c <DMA_SetConfig+0x254>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d01d      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2f      	ldr	r2, [pc, #188]	; (8004b70 <DMA_SetConfig+0x258>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d018      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2e      	ldr	r2, [pc, #184]	; (8004b74 <DMA_SetConfig+0x25c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d013      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2c      	ldr	r2, [pc, #176]	; (8004b78 <DMA_SetConfig+0x260>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00e      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <DMA_SetConfig+0x264>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a29      	ldr	r2, [pc, #164]	; (8004b80 <DMA_SetConfig+0x268>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <DMA_SetConfig+0x1d0>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a28      	ldr	r2, [pc, #160]	; (8004b84 <DMA_SetConfig+0x26c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d101      	bne.n	8004aec <DMA_SetConfig+0x1d4>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <DMA_SetConfig+0x1d6>
 8004aec:	2300      	movs	r3, #0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d05a      	beq.n	8004ba8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	223f      	movs	r2, #63	; 0x3f
 8004afc:	409a      	lsls	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d108      	bne.n	8004b34 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b32:	e087      	b.n	8004c44 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	60da      	str	r2, [r3, #12]
}
 8004b44:	e07e      	b.n	8004c44 <DMA_SetConfig+0x32c>
 8004b46:	bf00      	nop
 8004b48:	40020010 	.word	0x40020010
 8004b4c:	40020028 	.word	0x40020028
 8004b50:	40020040 	.word	0x40020040
 8004b54:	40020058 	.word	0x40020058
 8004b58:	40020070 	.word	0x40020070
 8004b5c:	40020088 	.word	0x40020088
 8004b60:	400200a0 	.word	0x400200a0
 8004b64:	400200b8 	.word	0x400200b8
 8004b68:	40020410 	.word	0x40020410
 8004b6c:	40020428 	.word	0x40020428
 8004b70:	40020440 	.word	0x40020440
 8004b74:	40020458 	.word	0x40020458
 8004b78:	40020470 	.word	0x40020470
 8004b7c:	40020488 	.word	0x40020488
 8004b80:	400204a0 	.word	0x400204a0
 8004b84:	400204b8 	.word	0x400204b8
 8004b88:	58025408 	.word	0x58025408
 8004b8c:	5802541c 	.word	0x5802541c
 8004b90:	58025430 	.word	0x58025430
 8004b94:	58025444 	.word	0x58025444
 8004b98:	58025458 	.word	0x58025458
 8004b9c:	5802546c 	.word	0x5802546c
 8004ba0:	58025480 	.word	0x58025480
 8004ba4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a28      	ldr	r2, [pc, #160]	; (8004c50 <DMA_SetConfig+0x338>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d022      	beq.n	8004bf8 <DMA_SetConfig+0x2e0>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a27      	ldr	r2, [pc, #156]	; (8004c54 <DMA_SetConfig+0x33c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d01d      	beq.n	8004bf8 <DMA_SetConfig+0x2e0>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a25      	ldr	r2, [pc, #148]	; (8004c58 <DMA_SetConfig+0x340>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d018      	beq.n	8004bf8 <DMA_SetConfig+0x2e0>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a24      	ldr	r2, [pc, #144]	; (8004c5c <DMA_SetConfig+0x344>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d013      	beq.n	8004bf8 <DMA_SetConfig+0x2e0>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <DMA_SetConfig+0x348>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00e      	beq.n	8004bf8 <DMA_SetConfig+0x2e0>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <DMA_SetConfig+0x34c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d009      	beq.n	8004bf8 <DMA_SetConfig+0x2e0>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1f      	ldr	r2, [pc, #124]	; (8004c68 <DMA_SetConfig+0x350>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <DMA_SetConfig+0x2e0>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <DMA_SetConfig+0x354>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d101      	bne.n	8004bfc <DMA_SetConfig+0x2e4>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <DMA_SetConfig+0x2e6>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d020      	beq.n	8004c44 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d108      	bne.n	8004c34 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	60da      	str	r2, [r3, #12]
}
 8004c32:	e007      	b.n	8004c44 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	58025408 	.word	0x58025408
 8004c54:	5802541c 	.word	0x5802541c
 8004c58:	58025430 	.word	0x58025430
 8004c5c:	58025444 	.word	0x58025444
 8004c60:	58025458 	.word	0x58025458
 8004c64:	5802546c 	.word	0x5802546c
 8004c68:	58025480 	.word	0x58025480
 8004c6c:	58025494 	.word	0x58025494

08004c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a42      	ldr	r2, [pc, #264]	; (8004d88 <DMA_CalcBaseAndBitshift+0x118>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d04a      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a41      	ldr	r2, [pc, #260]	; (8004d8c <DMA_CalcBaseAndBitshift+0x11c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d045      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a3f      	ldr	r2, [pc, #252]	; (8004d90 <DMA_CalcBaseAndBitshift+0x120>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d040      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a3e      	ldr	r2, [pc, #248]	; (8004d94 <DMA_CalcBaseAndBitshift+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d03b      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a3c      	ldr	r2, [pc, #240]	; (8004d98 <DMA_CalcBaseAndBitshift+0x128>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d036      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a3b      	ldr	r2, [pc, #236]	; (8004d9c <DMA_CalcBaseAndBitshift+0x12c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d031      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a39      	ldr	r2, [pc, #228]	; (8004da0 <DMA_CalcBaseAndBitshift+0x130>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d02c      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a38      	ldr	r2, [pc, #224]	; (8004da4 <DMA_CalcBaseAndBitshift+0x134>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d027      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a36      	ldr	r2, [pc, #216]	; (8004da8 <DMA_CalcBaseAndBitshift+0x138>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a35      	ldr	r2, [pc, #212]	; (8004dac <DMA_CalcBaseAndBitshift+0x13c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d01d      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a33      	ldr	r2, [pc, #204]	; (8004db0 <DMA_CalcBaseAndBitshift+0x140>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a32      	ldr	r2, [pc, #200]	; (8004db4 <DMA_CalcBaseAndBitshift+0x144>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a30      	ldr	r2, [pc, #192]	; (8004db8 <DMA_CalcBaseAndBitshift+0x148>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2f      	ldr	r2, [pc, #188]	; (8004dbc <DMA_CalcBaseAndBitshift+0x14c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a2d      	ldr	r2, [pc, #180]	; (8004dc0 <DMA_CalcBaseAndBitshift+0x150>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2c      	ldr	r2, [pc, #176]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x154>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d101      	bne.n	8004d1c <DMA_CalcBaseAndBitshift+0xac>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <DMA_CalcBaseAndBitshift+0xae>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d024      	beq.n	8004d6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	3b10      	subs	r3, #16
 8004d2a:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x158>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	4a24      	ldr	r2, [pc, #144]	; (8004dcc <DMA_CalcBaseAndBitshift+0x15c>)
 8004d3c:	5cd3      	ldrb	r3, [r2, r3]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d908      	bls.n	8004d5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4b1f      	ldr	r3, [pc, #124]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x160>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	1d1a      	adds	r2, r3, #4
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	659a      	str	r2, [r3, #88]	; 0x58
 8004d5a:	e00d      	b.n	8004d78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x160>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6593      	str	r3, [r2, #88]	; 0x58
 8004d6a:	e005      	b.n	8004d78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	40020010 	.word	0x40020010
 8004d8c:	40020028 	.word	0x40020028
 8004d90:	40020040 	.word	0x40020040
 8004d94:	40020058 	.word	0x40020058
 8004d98:	40020070 	.word	0x40020070
 8004d9c:	40020088 	.word	0x40020088
 8004da0:	400200a0 	.word	0x400200a0
 8004da4:	400200b8 	.word	0x400200b8
 8004da8:	40020410 	.word	0x40020410
 8004dac:	40020428 	.word	0x40020428
 8004db0:	40020440 	.word	0x40020440
 8004db4:	40020458 	.word	0x40020458
 8004db8:	40020470 	.word	0x40020470
 8004dbc:	40020488 	.word	0x40020488
 8004dc0:	400204a0 	.word	0x400204a0
 8004dc4:	400204b8 	.word	0x400204b8
 8004dc8:	aaaaaaab 	.word	0xaaaaaaab
 8004dcc:	0800cec8 	.word	0x0800cec8
 8004dd0:	fffffc00 	.word	0xfffffc00

08004dd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d120      	bne.n	8004e2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d858      	bhi.n	8004ea2 <DMA_CheckFifoParam+0xce>
 8004df0:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <DMA_CheckFifoParam+0x24>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e1b 	.word	0x08004e1b
 8004e00:	08004e09 	.word	0x08004e09
 8004e04:	08004ea3 	.word	0x08004ea3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d048      	beq.n	8004ea6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e18:	e045      	b.n	8004ea6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e22:	d142      	bne.n	8004eaa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e28:	e03f      	b.n	8004eaa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e32:	d123      	bne.n	8004e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d838      	bhi.n	8004eae <DMA_CheckFifoParam+0xda>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <DMA_CheckFifoParam+0x70>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e5b 	.word	0x08004e5b
 8004e4c:	08004e55 	.word	0x08004e55
 8004e50:	08004e6d 	.word	0x08004e6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
        break;
 8004e58:	e030      	b.n	8004ebc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d025      	beq.n	8004eb2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e6a:	e022      	b.n	8004eb2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e74:	d11f      	bne.n	8004eb6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e7a:	e01c      	b.n	8004eb6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d902      	bls.n	8004e8a <DMA_CheckFifoParam+0xb6>
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d003      	beq.n	8004e90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e88:	e018      	b.n	8004ebc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e8e:	e015      	b.n	8004ebc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00e      	beq.n	8004eba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8004ea0:	e00b      	b.n	8004eba <DMA_CheckFifoParam+0xe6>
        break;
 8004ea2:	bf00      	nop
 8004ea4:	e00a      	b.n	8004ebc <DMA_CheckFifoParam+0xe8>
        break;
 8004ea6:	bf00      	nop
 8004ea8:	e008      	b.n	8004ebc <DMA_CheckFifoParam+0xe8>
        break;
 8004eaa:	bf00      	nop
 8004eac:	e006      	b.n	8004ebc <DMA_CheckFifoParam+0xe8>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e004      	b.n	8004ebc <DMA_CheckFifoParam+0xe8>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e002      	b.n	8004ebc <DMA_CheckFifoParam+0xe8>
        break;
 8004eb6:	bf00      	nop
 8004eb8:	e000      	b.n	8004ebc <DMA_CheckFifoParam+0xe8>
    break;
 8004eba:	bf00      	nop
    }
  }

  return status;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop

08004ecc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a38      	ldr	r2, [pc, #224]	; (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d022      	beq.n	8004f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a36      	ldr	r2, [pc, #216]	; (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01d      	beq.n	8004f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a35      	ldr	r2, [pc, #212]	; (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d018      	beq.n	8004f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a33      	ldr	r2, [pc, #204]	; (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a32      	ldr	r2, [pc, #200]	; (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a30      	ldr	r2, [pc, #192]	; (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d009      	beq.n	8004f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2f      	ldr	r2, [pc, #188]	; (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a2d      	ldr	r2, [pc, #180]	; (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d101      	bne.n	8004f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01a      	beq.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	3b08      	subs	r3, #8
 8004f3c:	4a28      	ldr	r2, [pc, #160]	; (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4b26      	ldr	r3, [pc, #152]	; (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a24      	ldr	r2, [pc, #144]	; (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	2201      	movs	r2, #1
 8004f62:	409a      	lsls	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f68:	e024      	b.n	8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	3b10      	subs	r3, #16
 8004f72:	4a1e      	ldr	r2, [pc, #120]	; (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d806      	bhi.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4a1b      	ldr	r2, [pc, #108]	; (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d902      	bls.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fa4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	2201      	movs	r2, #1
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	58025408 	.word	0x58025408
 8004fc4:	5802541c 	.word	0x5802541c
 8004fc8:	58025430 	.word	0x58025430
 8004fcc:	58025444 	.word	0x58025444
 8004fd0:	58025458 	.word	0x58025458
 8004fd4:	5802546c 	.word	0x5802546c
 8004fd8:	58025480 	.word	0x58025480
 8004fdc:	58025494 	.word	0x58025494
 8004fe0:	cccccccd 	.word	0xcccccccd
 8004fe4:	16009600 	.word	0x16009600
 8004fe8:	58025880 	.word	0x58025880
 8004fec:	aaaaaaab 	.word	0xaaaaaaab
 8004ff0:	400204b8 	.word	0x400204b8
 8004ff4:	4002040f 	.word	0x4002040f
 8004ff8:	10008200 	.word	0x10008200
 8004ffc:	40020880 	.word	0x40020880

08005000 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d04a      	beq.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d847      	bhi.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d022      	beq.n	800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a24      	ldr	r2, [pc, #144]	; (80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d01d      	beq.n	800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a22      	ldr	r2, [pc, #136]	; (80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d018      	beq.n	800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a21      	ldr	r2, [pc, #132]	; (80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d013      	beq.n	800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00e      	beq.n	800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1e      	ldr	r2, [pc, #120]	; (80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d009      	beq.n	800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d101      	bne.n	8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005070:	2300      	movs	r3, #0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4b17      	ldr	r3, [pc, #92]	; (80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a15      	ldr	r2, [pc, #84]	; (80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005088:	671a      	str	r2, [r3, #112]	; 0x70
 800508a:	e009      	b.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4b14      	ldr	r3, [pc, #80]	; (80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800509e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	2201      	movs	r2, #1
 80050a6:	409a      	lsls	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	58025408 	.word	0x58025408
 80050bc:	5802541c 	.word	0x5802541c
 80050c0:	58025430 	.word	0x58025430
 80050c4:	58025444 	.word	0x58025444
 80050c8:	58025458 	.word	0x58025458
 80050cc:	5802546c 	.word	0x5802546c
 80050d0:	58025480 	.word	0x58025480
 80050d4:	58025494 	.word	0x58025494
 80050d8:	1600963f 	.word	0x1600963f
 80050dc:	58025940 	.word	0x58025940
 80050e0:	1000823f 	.word	0x1000823f
 80050e4:	40020940 	.word	0x40020940

080050e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e0c6      	b.n	8005288 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d102      	bne.n	8005108 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fc fb9c 	bl	8001840 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2223      	movs	r2, #35	; 0x23
 800510c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800510e:	4b60      	ldr	r3, [pc, #384]	; (8005290 <HAL_ETH_Init+0x1a8>)
 8005110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005114:	4a5e      	ldr	r2, [pc, #376]	; (8005290 <HAL_ETH_Init+0x1a8>)
 8005116:	f043 0302 	orr.w	r3, r3, #2
 800511a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800511e:	4b5c      	ldr	r3, [pc, #368]	; (8005290 <HAL_ETH_Init+0x1a8>)
 8005120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	7a1b      	ldrb	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d103      	bne.n	800513c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005134:	2000      	movs	r0, #0
 8005136:	f7fd f859 	bl	80021ec <HAL_SYSCFG_ETHInterfaceSelect>
 800513a:	e003      	b.n	8005144 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800513c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005140:	f7fd f854 	bl	80021ec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800515a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800515c:	f7fd f80a 	bl	8002174 <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005162:	e00f      	b.n	8005184 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005164:	f7fd f806 	bl	8002174 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005172:	d907      	bls.n	8005184 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2204      	movs	r2, #4
 8005178:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	22e0      	movs	r2, #224	; 0xe0
 800517e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e081      	b.n	8005288 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e6      	bne.n	8005164 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fac0 	bl	800571c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800519c:	f001 fea4 	bl	8006ee8 <HAL_RCC_GetHCLKFreq>
 80051a0:	4603      	mov	r3, r0
 80051a2:	4a3c      	ldr	r2, [pc, #240]	; (8005294 <HAL_ETH_Init+0x1ac>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	0c9a      	lsrs	r2, r3, #18
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3a01      	subs	r2, #1
 80051b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fa13 	bl	80055e0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80051d0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80051d4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	22e0      	movs	r2, #224	; 0xe0
 80051ec:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e04a      	b.n	8005288 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	f241 1308 	movw	r3, #4360	; 0x1108
 80051fa:	4413      	add	r3, r2
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b26      	ldr	r3, [pc, #152]	; (8005298 <HAL_ETH_Init+0x1b0>)
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6952      	ldr	r2, [r2, #20]
 8005206:	0052      	lsls	r2, r2, #1
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	6809      	ldr	r1, [r1, #0]
 800520c:	431a      	orrs	r2, r3
 800520e:	f241 1308 	movw	r3, #4360	; 0x1108
 8005212:	440b      	add	r3, r1
 8005214:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fad8 	bl	80057cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fb1c 	bl	800585a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	3305      	adds	r3, #5
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	021a      	lsls	r2, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	4619      	mov	r1, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	3303      	adds	r3, #3
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	061a      	lsls	r2, r3, #24
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	3302      	adds	r3, #2
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	041b      	lsls	r3, r3, #16
 8005254:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	3301      	adds	r3, #1
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005260:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800526e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005270:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2210      	movs	r2, #16
 800527e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2210      	movs	r2, #16
 8005284:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	58024400 	.word	0x58024400
 8005294:	431bde83 	.word	0x431bde83
 8005298:	ffff8001 	.word	0xffff8001

0800529c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80052ae:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	791b      	ldrb	r3, [r3, #4]
 80052b4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80052b6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	7b1b      	ldrb	r3, [r3, #12]
 80052bc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80052be:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	7b5b      	ldrb	r3, [r3, #13]
 80052c4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80052c6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	7b9b      	ldrb	r3, [r3, #14]
 80052cc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80052ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	7bdb      	ldrb	r3, [r3, #15]
 80052d4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80052d6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	7c12      	ldrb	r2, [r2, #16]
 80052dc:	2a00      	cmp	r2, #0
 80052de:	d102      	bne.n	80052e6 <ETH_SetMACConfig+0x4a>
 80052e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80052e4:	e000      	b.n	80052e8 <ETH_SetMACConfig+0x4c>
 80052e6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80052e8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	7c52      	ldrb	r2, [r2, #17]
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	d102      	bne.n	80052f8 <ETH_SetMACConfig+0x5c>
 80052f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052f6:	e000      	b.n	80052fa <ETH_SetMACConfig+0x5e>
 80052f8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80052fa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	7c9b      	ldrb	r3, [r3, #18]
 8005300:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005302:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005308:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800530e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	7f1b      	ldrb	r3, [r3, #28]
 8005314:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005316:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	7f5b      	ldrb	r3, [r3, #29]
 800531c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800531e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	7f92      	ldrb	r2, [r2, #30]
 8005324:	2a00      	cmp	r2, #0
 8005326:	d102      	bne.n	800532e <ETH_SetMACConfig+0x92>
 8005328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800532c:	e000      	b.n	8005330 <ETH_SetMACConfig+0x94>
 800532e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005330:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	7fdb      	ldrb	r3, [r3, #31]
 8005336:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005338:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005340:	2a00      	cmp	r2, #0
 8005342:	d102      	bne.n	800534a <ETH_SetMACConfig+0xae>
 8005344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005348:	e000      	b.n	800534c <ETH_SetMACConfig+0xb0>
 800534a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800534c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005352:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800535a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800535c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4b56      	ldr	r3, [pc, #344]	; (80054c8 <ETH_SetMACConfig+0x22c>)
 800536e:	4013      	ands	r3, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	68f9      	ldr	r1, [r7, #12]
 8005376:	430b      	orrs	r3, r1
 8005378:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005386:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005388:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005390:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005392:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800539a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800539c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80053a4:	2a00      	cmp	r2, #0
 80053a6:	d102      	bne.n	80053ae <ETH_SetMACConfig+0x112>
 80053a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053ac:	e000      	b.n	80053b0 <ETH_SetMACConfig+0x114>
 80053ae:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80053b0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	4b42      	ldr	r3, [pc, #264]	; (80054cc <ETH_SetMACConfig+0x230>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	430b      	orrs	r3, r1
 80053cc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053d4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	4b3a      	ldr	r3, [pc, #232]	; (80054d0 <ETH_SetMACConfig+0x234>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	68f9      	ldr	r1, [r7, #12]
 80053ee:	430b      	orrs	r3, r1
 80053f0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80053f8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053fe:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005406:	2a00      	cmp	r2, #0
 8005408:	d101      	bne.n	800540e <ETH_SetMACConfig+0x172>
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	e000      	b.n	8005410 <ETH_SetMACConfig+0x174>
 800540e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005410:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005416:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005422:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005426:	4013      	ands	r3, r2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6812      	ldr	r2, [r2, #0]
 800542c:	68f9      	ldr	r1, [r7, #12]
 800542e:	430b      	orrs	r3, r1
 8005430:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005438:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005440:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	f023 0103 	bic.w	r1, r3, #3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	430a      	orrs	r2, r1
 800545a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005466:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005482:	2a00      	cmp	r2, #0
 8005484:	d101      	bne.n	800548a <ETH_SetMACConfig+0x1ee>
 8005486:	2240      	movs	r2, #64	; 0x40
 8005488:	e000      	b.n	800548c <ETH_SetMACConfig+0x1f0>
 800548a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800548c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005494:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005496:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800549e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80054ac:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	00048083 	.word	0x00048083
 80054cc:	c0f88000 	.word	0xc0f88000
 80054d0:	fffffef0 	.word	0xfffffef0

080054d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	4b38      	ldr	r3, [pc, #224]	; (80055cc <ETH_SetDMAConfig+0xf8>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	6812      	ldr	r2, [r2, #0]
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	6809      	ldr	r1, [r1, #0]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80054fa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	791b      	ldrb	r3, [r3, #4]
 8005500:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005506:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	7b1b      	ldrb	r3, [r3, #12]
 800550c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	f241 0304 	movw	r3, #4100	; 0x1004
 800551a:	4413      	add	r3, r2
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b2c      	ldr	r3, [pc, #176]	; (80055d0 <ETH_SetDMAConfig+0xfc>)
 8005520:	4013      	ands	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6811      	ldr	r1, [r2, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	431a      	orrs	r2, r3
 800552a:	f241 0304 	movw	r3, #4100	; 0x1004
 800552e:	440b      	add	r3, r1
 8005530:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	7b5b      	ldrb	r3, [r3, #13]
 8005536:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b22      	ldr	r3, [pc, #136]	; (80055d4 <ETH_SetDMAConfig+0x100>)
 800554c:	4013      	ands	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6811      	ldr	r1, [r2, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	431a      	orrs	r2, r3
 8005556:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800555a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	7d1b      	ldrb	r3, [r3, #20]
 8005564:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005566:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	7f5b      	ldrb	r3, [r3, #29]
 800556c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	f241 1304 	movw	r3, #4356	; 0x1104
 800557a:	4413      	add	r3, r2
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <ETH_SetDMAConfig+0x104>)
 8005580:	4013      	ands	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6811      	ldr	r1, [r2, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	431a      	orrs	r2, r3
 800558a:	f241 1304 	movw	r3, #4356	; 0x1104
 800558e:	440b      	add	r3, r1
 8005590:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	7f1b      	ldrb	r3, [r3, #28]
 8005596:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	f241 1308 	movw	r3, #4360	; 0x1108
 80055a8:	4413      	add	r3, r2
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <ETH_SetDMAConfig+0x108>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6811      	ldr	r1, [r2, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	f241 1308 	movw	r3, #4360	; 0x1108
 80055bc:	440b      	add	r3, r1
 80055be:	601a      	str	r2, [r3, #0]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	ffff87fd 	.word	0xffff87fd
 80055d0:	ffff2ffe 	.word	0xffff2ffe
 80055d4:	fffec000 	.word	0xfffec000
 80055d8:	ffc0efef 	.word	0xffc0efef
 80055dc:	7fc0ffff 	.word	0x7fc0ffff

080055e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b0a4      	sub	sp, #144	; 0x90
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80055ee:	2300      	movs	r3, #0
 80055f0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005610:	2300      	movs	r3, #0
 8005612:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800561c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005620:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005622:	2300      	movs	r3, #0
 8005624:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005628:	2300      	movs	r3, #0
 800562a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800562c:	2300      	movs	r3, #0
 800562e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005632:	2300      	movs	r3, #0
 8005634:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005638:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800563c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800563e:	2300      	movs	r3, #0
 8005640:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005644:	2300      	movs	r3, #0
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800564e:	2300      	movs	r3, #0
 8005650:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005654:	2300      	movs	r3, #0
 8005656:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800565a:	2300      	movs	r3, #0
 800565c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800565e:	2300      	movs	r3, #0
 8005660:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005662:	2300      	movs	r3, #0
 8005664:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005666:	2300      	movs	r3, #0
 8005668:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800566c:	2300      	movs	r3, #0
 800566e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005678:	2320      	movs	r3, #32
 800567a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005684:	2300      	movs	r3, #0
 8005686:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800568a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800568e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005694:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005696:	2300      	movs	r3, #0
 8005698:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800569c:	2302      	movs	r3, #2
 800569e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80056ba:	2300      	movs	r3, #0
 80056bc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80056c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fde6 	bl	800529c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80056d4:	2301      	movs	r3, #1
 80056d6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80056d8:	2300      	movs	r3, #0
 80056da:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80056ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056ee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80056f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80056fa:	2300      	movs	r3, #0
 80056fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005700:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005706:	f107 0308 	add.w	r3, r7, #8
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff fee1 	bl	80054d4 <ETH_SetDMAConfig>
}
 8005712:	bf00      	nop
 8005714:	3790      	adds	r7, #144	; 0x90
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800572c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005734:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005736:	f001 fbd7 	bl	8006ee8 <HAL_RCC_GetHCLKFreq>
 800573a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4a1e      	ldr	r2, [pc, #120]	; (80057b8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d908      	bls.n	8005756 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d804      	bhi.n	8005756 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e027      	b.n	80057a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4a18      	ldr	r2, [pc, #96]	; (80057bc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d908      	bls.n	8005770 <ETH_MAC_MDIO_ClkConfig+0x54>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4a17      	ldr	r2, [pc, #92]	; (80057c0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d204      	bcs.n	8005770 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	e01a      	b.n	80057a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4a13      	ldr	r2, [pc, #76]	; (80057c0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d303      	bcc.n	8005780 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4a12      	ldr	r2, [pc, #72]	; (80057c4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d911      	bls.n	80057a4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4a10      	ldr	r2, [pc, #64]	; (80057c4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d908      	bls.n	800579a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4a0f      	ldr	r2, [pc, #60]	; (80057c8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d804      	bhi.n	800579a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	e005      	b.n	80057a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	e000      	b.n	80057a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80057a4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80057b0:	bf00      	nop
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	01312cff 	.word	0x01312cff
 80057bc:	02160ebf 	.word	0x02160ebf
 80057c0:	03938700 	.word	0x03938700
 80057c4:	05f5e0ff 	.word	0x05f5e0ff
 80057c8:	08f0d17f 	.word	0x08f0d17f

080057cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e01d      	b.n	8005816 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68d9      	ldr	r1, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4613      	mov	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	4413      	add	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	440b      	add	r3, r1
 80057ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2200      	movs	r2, #0
 80057f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2200      	movs	r2, #0
 8005802:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	3206      	adds	r2, #6
 800580c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b03      	cmp	r3, #3
 800581a:	d9de      	bls.n	80057da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	f241 132c 	movw	r3, #4396	; 0x112c
 800582a:	4413      	add	r3, r2
 800582c:	2203      	movs	r2, #3
 800582e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68d9      	ldr	r1, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	f241 1314 	movw	r3, #4372	; 0x1114
 800583c:	4413      	add	r3, r2
 800583e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800584c:	601a      	str	r2, [r3, #0]
}
 800584e:	bf00      	nop
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	e024      	b.n	80058b2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6919      	ldr	r1, [r3, #16]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4613      	mov	r3, r2
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	4413      	add	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	440b      	add	r3, r1
 8005878:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2200      	movs	r2, #0
 8005884:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2200      	movs	r2, #0
 800588a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2200      	movs	r2, #0
 8005896:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3310      	adds	r3, #16
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3301      	adds	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d9d7      	bls.n	8005868 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	f241 1330 	movw	r3, #4400	; 0x1130
 80058de:	4413      	add	r3, r2
 80058e0:	2203      	movs	r2, #3
 80058e2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6919      	ldr	r1, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	f241 131c 	movw	r3, #4380	; 0x111c
 80058f0:	4413      	add	r3, r2
 80058f2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	f241 1328 	movw	r3, #4392	; 0x1128
 8005904:	4413      	add	r3, r2
 8005906:	6019      	str	r1, [r3, #0]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005914:	b480      	push	{r7}
 8005916:	b089      	sub	sp, #36	; 0x24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005922:	4b89      	ldr	r3, [pc, #548]	; (8005b48 <HAL_GPIO_Init+0x234>)
 8005924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005926:	e194      	b.n	8005c52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	2101      	movs	r1, #1
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	fa01 f303 	lsl.w	r3, r1, r3
 8005934:	4013      	ands	r3, r2
 8005936:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8186 	beq.w	8005c4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d00b      	beq.n	8005960 <HAL_GPIO_Init+0x4c>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d007      	beq.n	8005960 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005954:	2b11      	cmp	r3, #17
 8005956:	d003      	beq.n	8005960 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b12      	cmp	r3, #18
 800595e:	d130      	bne.n	80059c2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	2203      	movs	r2, #3
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4313      	orrs	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005996:	2201      	movs	r2, #1
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	43db      	mvns	r3, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4013      	ands	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	091b      	lsrs	r3, r3, #4
 80059ac:	f003 0201 	and.w	r2, r3, #1
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	2203      	movs	r2, #3
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d003      	beq.n	8005a02 <HAL_GPIO_Init+0xee>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b12      	cmp	r3, #18
 8005a00:	d123      	bne.n	8005a4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	08da      	lsrs	r2, r3, #3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3208      	adds	r2, #8
 8005a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	220f      	movs	r2, #15
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	08da      	lsrs	r2, r3, #3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3208      	adds	r2, #8
 8005a44:	69b9      	ldr	r1, [r7, #24]
 8005a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	2203      	movs	r2, #3
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 0203 	and.w	r2, r3, #3
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80e0 	beq.w	8005c4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a8c:	4b2f      	ldr	r3, [pc, #188]	; (8005b4c <HAL_GPIO_Init+0x238>)
 8005a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a92:	4a2e      	ldr	r2, [pc, #184]	; (8005b4c <HAL_GPIO_Init+0x238>)
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a9c:	4b2b      	ldr	r3, [pc, #172]	; (8005b4c <HAL_GPIO_Init+0x238>)
 8005a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aaa:	4a29      	ldr	r2, [pc, #164]	; (8005b50 <HAL_GPIO_Init+0x23c>)
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	089b      	lsrs	r3, r3, #2
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	220f      	movs	r2, #15
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a20      	ldr	r2, [pc, #128]	; (8005b54 <HAL_GPIO_Init+0x240>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d052      	beq.n	8005b7c <HAL_GPIO_Init+0x268>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <HAL_GPIO_Init+0x244>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d031      	beq.n	8005b42 <HAL_GPIO_Init+0x22e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <HAL_GPIO_Init+0x248>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d02b      	beq.n	8005b3e <HAL_GPIO_Init+0x22a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1d      	ldr	r2, [pc, #116]	; (8005b60 <HAL_GPIO_Init+0x24c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d025      	beq.n	8005b3a <HAL_GPIO_Init+0x226>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1c      	ldr	r2, [pc, #112]	; (8005b64 <HAL_GPIO_Init+0x250>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01f      	beq.n	8005b36 <HAL_GPIO_Init+0x222>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1b      	ldr	r2, [pc, #108]	; (8005b68 <HAL_GPIO_Init+0x254>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d019      	beq.n	8005b32 <HAL_GPIO_Init+0x21e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1a      	ldr	r2, [pc, #104]	; (8005b6c <HAL_GPIO_Init+0x258>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <HAL_GPIO_Init+0x21a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a19      	ldr	r2, [pc, #100]	; (8005b70 <HAL_GPIO_Init+0x25c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00d      	beq.n	8005b2a <HAL_GPIO_Init+0x216>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <HAL_GPIO_Init+0x260>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d007      	beq.n	8005b26 <HAL_GPIO_Init+0x212>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <HAL_GPIO_Init+0x264>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d101      	bne.n	8005b22 <HAL_GPIO_Init+0x20e>
 8005b1e:	2309      	movs	r3, #9
 8005b20:	e02d      	b.n	8005b7e <HAL_GPIO_Init+0x26a>
 8005b22:	230a      	movs	r3, #10
 8005b24:	e02b      	b.n	8005b7e <HAL_GPIO_Init+0x26a>
 8005b26:	2308      	movs	r3, #8
 8005b28:	e029      	b.n	8005b7e <HAL_GPIO_Init+0x26a>
 8005b2a:	2307      	movs	r3, #7
 8005b2c:	e027      	b.n	8005b7e <HAL_GPIO_Init+0x26a>
 8005b2e:	2306      	movs	r3, #6
 8005b30:	e025      	b.n	8005b7e <HAL_GPIO_Init+0x26a>
 8005b32:	2305      	movs	r3, #5
 8005b34:	e023      	b.n	8005b7e <HAL_GPIO_Init+0x26a>
 8005b36:	2304      	movs	r3, #4
 8005b38:	e021      	b.n	8005b7e <HAL_GPIO_Init+0x26a>
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e01f      	b.n	8005b7e <HAL_GPIO_Init+0x26a>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e01d      	b.n	8005b7e <HAL_GPIO_Init+0x26a>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e01b      	b.n	8005b7e <HAL_GPIO_Init+0x26a>
 8005b46:	bf00      	nop
 8005b48:	58000080 	.word	0x58000080
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	58000400 	.word	0x58000400
 8005b54:	58020000 	.word	0x58020000
 8005b58:	58020400 	.word	0x58020400
 8005b5c:	58020800 	.word	0x58020800
 8005b60:	58020c00 	.word	0x58020c00
 8005b64:	58021000 	.word	0x58021000
 8005b68:	58021400 	.word	0x58021400
 8005b6c:	58021800 	.word	0x58021800
 8005b70:	58021c00 	.word	0x58021c00
 8005b74:	58022000 	.word	0x58022000
 8005b78:	58022400 	.word	0x58022400
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	f002 0203 	and.w	r2, r2, #3
 8005b84:	0092      	lsls	r2, r2, #2
 8005b86:	4093      	lsls	r3, r2
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b8e:	4938      	ldr	r1, [pc, #224]	; (8005c70 <HAL_GPIO_Init+0x35c>)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	089b      	lsrs	r3, r3, #2
 8005b94:	3302      	adds	r3, #2
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f47f ae63 	bne.w	8005928 <HAL_GPIO_Init+0x14>
  }
}
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	3724      	adds	r7, #36	; 0x24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	58000400 	.word	0x58000400

08005c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	807b      	strh	r3, [r7, #2]
 8005c80:	4613      	mov	r3, r2
 8005c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c84:	787b      	ldrb	r3, [r7, #1]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c8a:	887a      	ldrh	r2, [r7, #2]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c90:	e003      	b.n	8005c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c92:	887b      	ldrh	r3, [r7, #2]
 8005c94:	041a      	lsls	r2, r3, #16
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	619a      	str	r2, [r3, #24]
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005cb0:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <HAL_HSEM_FastTake+0x2c>)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3320      	adds	r3, #32
 8005cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cba:	4a07      	ldr	r2, [pc, #28]	; (8005cd8 <HAL_HSEM_FastTake+0x30>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d101      	bne.n	8005cc4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	58026400 	.word	0x58026400
 8005cd8:	80000300 	.word	0x80000300

08005cdc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005ce6:	4906      	ldr	r1, [pc, #24]	; (8005d00 <HAL_HSEM_Release+0x24>)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	58026400 	.word	0x58026400

08005d04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d06:	b08f      	sub	sp, #60	; 0x3c
 8005d08:	af0a      	add	r7, sp, #40	; 0x28
 8005d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e116      	b.n	8005f44 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7fc f87f 	bl	8001e34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2203      	movs	r2, #3
 8005d3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d102      	bne.n	8005d50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f006 fe19 	bl	800c98c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	687e      	ldr	r6, [r7, #4]
 8005d62:	466d      	mov	r5, sp
 8005d64:	f106 0410 	add.w	r4, r6, #16
 8005d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d78:	1d33      	adds	r3, r6, #4
 8005d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d7c:	6838      	ldr	r0, [r7, #0]
 8005d7e:	f006 fd97 	bl	800c8b0 <USB_CoreInit>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0d7      	b.n	8005f44 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f006 fe07 	bl	800c9ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005da0:	2300      	movs	r3, #0
 8005da2:	73fb      	strb	r3, [r7, #15]
 8005da4:	e04a      	b.n	8005e3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005da6:	7bfa      	ldrb	r2, [r7, #15]
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	333d      	adds	r3, #61	; 0x3d
 8005db6:	2201      	movs	r2, #1
 8005db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005dba:	7bfa      	ldrb	r2, [r7, #15]
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	333c      	adds	r3, #60	; 0x3c
 8005dca:	7bfa      	ldrb	r2, [r7, #15]
 8005dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005dce:	7bfa      	ldrb	r2, [r7, #15]
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	b298      	uxth	r0, r3
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	3342      	adds	r3, #66	; 0x42
 8005de2:	4602      	mov	r2, r0
 8005de4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005de6:	7bfa      	ldrb	r2, [r7, #15]
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	1a9b      	subs	r3, r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	333f      	adds	r3, #63	; 0x3f
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005dfa:	7bfa      	ldrb	r2, [r7, #15]
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	1a9b      	subs	r3, r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	3344      	adds	r3, #68	; 0x44
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e0e:	7bfa      	ldrb	r2, [r7, #15]
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3348      	adds	r3, #72	; 0x48
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e22:	7bfa      	ldrb	r2, [r7, #15]
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	1a9b      	subs	r3, r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	3350      	adds	r3, #80	; 0x50
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	73fb      	strb	r3, [r7, #15]
 8005e3c:	7bfa      	ldrb	r2, [r7, #15]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d3af      	bcc.n	8005da6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]
 8005e4a:	e044      	b.n	8005ed6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e4c:	7bfa      	ldrb	r2, [r7, #15]
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e62:	7bfa      	ldrb	r2, [r7, #15]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005e74:	7bfa      	ldrb	r2, [r7, #15]
 8005e76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e78:	7bfa      	ldrb	r2, [r7, #15]
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	1a9b      	subs	r3, r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e8e:	7bfa      	ldrb	r2, [r7, #15]
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ea4:	7bfa      	ldrb	r2, [r7, #15]
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	1a9b      	subs	r3, r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005eba:	7bfa      	ldrb	r2, [r7, #15]
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	1a9b      	subs	r3, r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	73fb      	strb	r3, [r7, #15]
 8005ed6:	7bfa      	ldrb	r2, [r7, #15]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d3b5      	bcc.n	8005e4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	603b      	str	r3, [r7, #0]
 8005ee6:	687e      	ldr	r6, [r7, #4]
 8005ee8:	466d      	mov	r5, sp
 8005eea:	f106 0410 	add.w	r4, r6, #16
 8005eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8005efe:	1d33      	adds	r3, r6, #4
 8005f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f02:	6838      	ldr	r0, [r7, #0]
 8005f04:	f006 fd7e 	bl	800ca04 <USB_DevInit>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d005      	beq.n	8005f1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2202      	movs	r2, #2
 8005f12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e014      	b.n	8005f44 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d102      	bne.n	8005f38 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f80a 	bl	8005f4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f006 ff20 	bl	800cd82 <USB_DevDisconnect>

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f7a:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <HAL_PCDEx_ActivateLPM+0x44>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	10000003 	.word	0x10000003

08005f94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005f9c:	4b29      	ldr	r3, [pc, #164]	; (8006044 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	2b06      	cmp	r3, #6
 8005fa6:	d00a      	beq.n	8005fbe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005fa8:	4b26      	ldr	r3, [pc, #152]	; (8006044 <HAL_PWREx_ConfigSupply+0xb0>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d001      	beq.n	8005fba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e040      	b.n	800603c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e03e      	b.n	800603c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005fbe:	4b21      	ldr	r3, [pc, #132]	; (8006044 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005fc6:	491f      	ldr	r1, [pc, #124]	; (8006044 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005fce:	f7fc f8d1 	bl	8002174 <HAL_GetTick>
 8005fd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fd4:	e009      	b.n	8005fea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005fd6:	f7fc f8cd 	bl	8002174 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe4:	d901      	bls.n	8005fea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e028      	b.n	800603c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fea:	4b16      	ldr	r3, [pc, #88]	; (8006044 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff6:	d1ee      	bne.n	8005fd6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b1e      	cmp	r3, #30
 8005ffc:	d008      	beq.n	8006010 <HAL_PWREx_ConfigSupply+0x7c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b2e      	cmp	r3, #46	; 0x2e
 8006002:	d005      	beq.n	8006010 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b1d      	cmp	r3, #29
 8006008:	d002      	beq.n	8006010 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b2d      	cmp	r3, #45	; 0x2d
 800600e:	d114      	bne.n	800603a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006010:	f7fc f8b0 	bl	8002174 <HAL_GetTick>
 8006014:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006016:	e009      	b.n	800602c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006018:	f7fc f8ac 	bl	8002174 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006026:	d901      	bls.n	800602c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e007      	b.n	800603c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_PWREx_ConfigSupply+0xb0>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006038:	d1ee      	bne.n	8006018 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	58024800 	.word	0x58024800

08006048 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a04      	ldr	r2, [pc, #16]	; (8006064 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006056:	60d3      	str	r3, [r2, #12]
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	58024800 	.word	0x58024800

08006068 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08c      	sub	sp, #48	; 0x30
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e3ff      	b.n	800687a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8087 	beq.w	8006196 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006088:	4b99      	ldr	r3, [pc, #612]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006092:	4b97      	ldr	r3, [pc, #604]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b10      	cmp	r3, #16
 800609c:	d007      	beq.n	80060ae <HAL_RCC_OscConfig+0x46>
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	2b18      	cmp	r3, #24
 80060a2:	d110      	bne.n	80060c6 <HAL_RCC_OscConfig+0x5e>
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d10b      	bne.n	80060c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ae:	4b90      	ldr	r3, [pc, #576]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d06c      	beq.n	8006194 <HAL_RCC_OscConfig+0x12c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d168      	bne.n	8006194 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e3d9      	b.n	800687a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ce:	d106      	bne.n	80060de <HAL_RCC_OscConfig+0x76>
 80060d0:	4b87      	ldr	r3, [pc, #540]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a86      	ldr	r2, [pc, #536]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80060d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	e02e      	b.n	800613c <HAL_RCC_OscConfig+0xd4>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10c      	bne.n	8006100 <HAL_RCC_OscConfig+0x98>
 80060e6:	4b82      	ldr	r3, [pc, #520]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a81      	ldr	r2, [pc, #516]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80060ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	4b7f      	ldr	r3, [pc, #508]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a7e      	ldr	r2, [pc, #504]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80060f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e01d      	b.n	800613c <HAL_RCC_OscConfig+0xd4>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006108:	d10c      	bne.n	8006124 <HAL_RCC_OscConfig+0xbc>
 800610a:	4b79      	ldr	r3, [pc, #484]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a78      	ldr	r2, [pc, #480]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	4b76      	ldr	r3, [pc, #472]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a75      	ldr	r2, [pc, #468]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 800611c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e00b      	b.n	800613c <HAL_RCC_OscConfig+0xd4>
 8006124:	4b72      	ldr	r3, [pc, #456]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a71      	ldr	r2, [pc, #452]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 800612a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	4b6f      	ldr	r3, [pc, #444]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a6e      	ldr	r2, [pc, #440]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800613a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d013      	beq.n	800616c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006144:	f7fc f816 	bl	8002174 <HAL_GetTick>
 8006148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800614c:	f7fc f812 	bl	8002174 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b64      	cmp	r3, #100	; 0x64
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e38d      	b.n	800687a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800615e:	4b64      	ldr	r3, [pc, #400]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f0      	beq.n	800614c <HAL_RCC_OscConfig+0xe4>
 800616a:	e014      	b.n	8006196 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fc f802 	bl	8002174 <HAL_GetTick>
 8006170:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006174:	f7fb fffe 	bl	8002174 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b64      	cmp	r3, #100	; 0x64
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e379      	b.n	800687a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006186:	4b5a      	ldr	r3, [pc, #360]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0x10c>
 8006192:	e000      	b.n	8006196 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 80ae 	beq.w	8006300 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061a4:	4b52      	ldr	r3, [pc, #328]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061ae:	4b50      	ldr	r3, [pc, #320]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <HAL_RCC_OscConfig+0x162>
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	2b18      	cmp	r3, #24
 80061be:	d13a      	bne.n	8006236 <HAL_RCC_OscConfig+0x1ce>
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d135      	bne.n	8006236 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061ca:	4b49      	ldr	r3, [pc, #292]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <HAL_RCC_OscConfig+0x17a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e34b      	b.n	800687a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e2:	f7fb fff7 	bl	80021d4 <HAL_GetREVID>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d817      	bhi.n	8006220 <HAL_RCC_OscConfig+0x1b8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d108      	bne.n	800620a <HAL_RCC_OscConfig+0x1a2>
 80061f8:	4b3d      	ldr	r3, [pc, #244]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006200:	4a3b      	ldr	r2, [pc, #236]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006206:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006208:	e07a      	b.n	8006300 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620a:	4b39      	ldr	r3, [pc, #228]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	031b      	lsls	r3, r3, #12
 8006218:	4935      	ldr	r1, [pc, #212]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 800621a:	4313      	orrs	r3, r2
 800621c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800621e:	e06f      	b.n	8006300 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006220:	4b33      	ldr	r3, [pc, #204]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	061b      	lsls	r3, r3, #24
 800622e:	4930      	ldr	r1, [pc, #192]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006230:	4313      	orrs	r3, r2
 8006232:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006234:	e064      	b.n	8006300 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d045      	beq.n	80062ca <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800623e:	4b2c      	ldr	r3, [pc, #176]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f023 0219 	bic.w	r2, r3, #25
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	4929      	ldr	r1, [pc, #164]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 800624c:	4313      	orrs	r3, r2
 800624e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fb ff90 	bl	8002174 <HAL_GetTick>
 8006254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006258:	f7fb ff8c 	bl	8002174 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e307      	b.n	800687a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800626a:	4b21      	ldr	r3, [pc, #132]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0f0      	beq.n	8006258 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006276:	f7fb ffad 	bl	80021d4 <HAL_GetREVID>
 800627a:	4603      	mov	r3, r0
 800627c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006280:	4293      	cmp	r3, r2
 8006282:	d817      	bhi.n	80062b4 <HAL_RCC_OscConfig+0x24c>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d108      	bne.n	800629e <HAL_RCC_OscConfig+0x236>
 800628c:	4b18      	ldr	r3, [pc, #96]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006294:	4a16      	ldr	r2, [pc, #88]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 8006296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629a:	6053      	str	r3, [r2, #4]
 800629c:	e030      	b.n	8006300 <HAL_RCC_OscConfig+0x298>
 800629e:	4b14      	ldr	r3, [pc, #80]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	031b      	lsls	r3, r3, #12
 80062ac:	4910      	ldr	r1, [pc, #64]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	604b      	str	r3, [r1, #4]
 80062b2:	e025      	b.n	8006300 <HAL_RCC_OscConfig+0x298>
 80062b4:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	061b      	lsls	r3, r3, #24
 80062c2:	490b      	ldr	r1, [pc, #44]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	604b      	str	r3, [r1, #4]
 80062c8:	e01a      	b.n	8006300 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ca:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <HAL_RCC_OscConfig+0x288>)
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d6:	f7fb ff4d 	bl	8002174 <HAL_GetTick>
 80062da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062dc:	e00a      	b.n	80062f4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062de:	f7fb ff49 	bl	8002174 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d903      	bls.n	80062f4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e2c4      	b.n	800687a <HAL_RCC_OscConfig+0x812>
 80062f0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062f4:	4ba4      	ldr	r3, [pc, #656]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1ee      	bne.n	80062de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80a9 	beq.w	8006460 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800630e:	4b9e      	ldr	r3, [pc, #632]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006316:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006318:	4b9b      	ldr	r3, [pc, #620]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b08      	cmp	r3, #8
 8006322:	d007      	beq.n	8006334 <HAL_RCC_OscConfig+0x2cc>
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	2b18      	cmp	r3, #24
 8006328:	d13a      	bne.n	80063a0 <HAL_RCC_OscConfig+0x338>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	2b01      	cmp	r3, #1
 8006332:	d135      	bne.n	80063a0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006334:	4b94      	ldr	r3, [pc, #592]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_RCC_OscConfig+0x2e4>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d001      	beq.n	800634c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e296      	b.n	800687a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800634c:	f7fb ff42 	bl	80021d4 <HAL_GetREVID>
 8006350:	4603      	mov	r3, r0
 8006352:	f241 0203 	movw	r2, #4099	; 0x1003
 8006356:	4293      	cmp	r3, r2
 8006358:	d817      	bhi.n	800638a <HAL_RCC_OscConfig+0x322>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	2b20      	cmp	r3, #32
 8006360:	d108      	bne.n	8006374 <HAL_RCC_OscConfig+0x30c>
 8006362:	4b89      	ldr	r3, [pc, #548]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800636a:	4a87      	ldr	r2, [pc, #540]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 800636c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006370:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006372:	e075      	b.n	8006460 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006374:	4b84      	ldr	r3, [pc, #528]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	069b      	lsls	r3, r3, #26
 8006382:	4981      	ldr	r1, [pc, #516]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006384:	4313      	orrs	r3, r2
 8006386:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006388:	e06a      	b.n	8006460 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800638a:	4b7f      	ldr	r3, [pc, #508]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	061b      	lsls	r3, r3, #24
 8006398:	497b      	ldr	r1, [pc, #492]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 800639a:	4313      	orrs	r3, r2
 800639c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800639e:	e05f      	b.n	8006460 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d042      	beq.n	800642e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80063a8:	4b77      	ldr	r3, [pc, #476]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a76      	ldr	r2, [pc, #472]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80063ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b4:	f7fb fede 	bl	8002174 <HAL_GetTick>
 80063b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80063bc:	f7fb feda 	bl	8002174 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e255      	b.n	800687a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063ce:	4b6e      	ldr	r3, [pc, #440]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f0      	beq.n	80063bc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063da:	f7fb fefb 	bl	80021d4 <HAL_GetREVID>
 80063de:	4603      	mov	r3, r0
 80063e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d817      	bhi.n	8006418 <HAL_RCC_OscConfig+0x3b0>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d108      	bne.n	8006402 <HAL_RCC_OscConfig+0x39a>
 80063f0:	4b65      	ldr	r3, [pc, #404]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063f8:	4a63      	ldr	r2, [pc, #396]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80063fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063fe:	6053      	str	r3, [r2, #4]
 8006400:	e02e      	b.n	8006460 <HAL_RCC_OscConfig+0x3f8>
 8006402:	4b61      	ldr	r3, [pc, #388]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	069b      	lsls	r3, r3, #26
 8006410:	495d      	ldr	r1, [pc, #372]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006412:	4313      	orrs	r3, r2
 8006414:	604b      	str	r3, [r1, #4]
 8006416:	e023      	b.n	8006460 <HAL_RCC_OscConfig+0x3f8>
 8006418:	4b5b      	ldr	r3, [pc, #364]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	061b      	lsls	r3, r3, #24
 8006426:	4958      	ldr	r1, [pc, #352]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006428:	4313      	orrs	r3, r2
 800642a:	60cb      	str	r3, [r1, #12]
 800642c:	e018      	b.n	8006460 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800642e:	4b56      	ldr	r3, [pc, #344]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a55      	ldr	r2, [pc, #340]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643a:	f7fb fe9b 	bl	8002174 <HAL_GetTick>
 800643e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006442:	f7fb fe97 	bl	8002174 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e212      	b.n	800687a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006454:	4b4c      	ldr	r3, [pc, #304]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1f0      	bne.n	8006442 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d036      	beq.n	80064da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d019      	beq.n	80064a8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006474:	4b44      	ldr	r3, [pc, #272]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006478:	4a43      	ldr	r2, [pc, #268]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006480:	f7fb fe78 	bl	8002174 <HAL_GetTick>
 8006484:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006488:	f7fb fe74 	bl	8002174 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e1ef      	b.n	800687a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800649a:	4b3b      	ldr	r3, [pc, #236]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 800649c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f0      	beq.n	8006488 <HAL_RCC_OscConfig+0x420>
 80064a6:	e018      	b.n	80064da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064a8:	4b37      	ldr	r3, [pc, #220]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80064aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ac:	4a36      	ldr	r2, [pc, #216]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80064ae:	f023 0301 	bic.w	r3, r3, #1
 80064b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b4:	f7fb fe5e 	bl	8002174 <HAL_GetTick>
 80064b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064bc:	f7fb fe5a 	bl	8002174 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e1d5      	b.n	800687a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064ce:	4b2e      	ldr	r3, [pc, #184]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80064d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f0      	bne.n	80064bc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d036      	beq.n	8006554 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d019      	beq.n	8006522 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064ee:	4b26      	ldr	r3, [pc, #152]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a25      	ldr	r2, [pc, #148]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 80064f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064fa:	f7fb fe3b 	bl	8002174 <HAL_GetTick>
 80064fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006502:	f7fb fe37 	bl	8002174 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e1b2      	b.n	800687a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006514:	4b1c      	ldr	r3, [pc, #112]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0f0      	beq.n	8006502 <HAL_RCC_OscConfig+0x49a>
 8006520:	e018      	b.n	8006554 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006522:	4b19      	ldr	r3, [pc, #100]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a18      	ldr	r2, [pc, #96]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 8006528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800652c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800652e:	f7fb fe21 	bl	8002174 <HAL_GetTick>
 8006532:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006536:	f7fb fe1d 	bl	8002174 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e198      	b.n	800687a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006548:	4b0f      	ldr	r3, [pc, #60]	; (8006588 <HAL_RCC_OscConfig+0x520>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f0      	bne.n	8006536 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8085 	beq.w	800666c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <HAL_RCC_OscConfig+0x524>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a09      	ldr	r2, [pc, #36]	; (800658c <HAL_RCC_OscConfig+0x524>)
 8006568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800656c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800656e:	f7fb fe01 	bl	8002174 <HAL_GetTick>
 8006572:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006574:	e00c      	b.n	8006590 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006576:	f7fb fdfd 	bl	8002174 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b64      	cmp	r3, #100	; 0x64
 8006582:	d905      	bls.n	8006590 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e178      	b.n	800687a <HAL_RCC_OscConfig+0x812>
 8006588:	58024400 	.word	0x58024400
 800658c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006590:	4b96      	ldr	r3, [pc, #600]	; (80067ec <HAL_RCC_OscConfig+0x784>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0ec      	beq.n	8006576 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d106      	bne.n	80065b2 <HAL_RCC_OscConfig+0x54a>
 80065a4:	4b92      	ldr	r3, [pc, #584]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a8:	4a91      	ldr	r2, [pc, #580]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065aa:	f043 0301 	orr.w	r3, r3, #1
 80065ae:	6713      	str	r3, [r2, #112]	; 0x70
 80065b0:	e02d      	b.n	800660e <HAL_RCC_OscConfig+0x5a6>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10c      	bne.n	80065d4 <HAL_RCC_OscConfig+0x56c>
 80065ba:	4b8d      	ldr	r3, [pc, #564]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065be:	4a8c      	ldr	r2, [pc, #560]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065c0:	f023 0301 	bic.w	r3, r3, #1
 80065c4:	6713      	str	r3, [r2, #112]	; 0x70
 80065c6:	4b8a      	ldr	r3, [pc, #552]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ca:	4a89      	ldr	r2, [pc, #548]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065cc:	f023 0304 	bic.w	r3, r3, #4
 80065d0:	6713      	str	r3, [r2, #112]	; 0x70
 80065d2:	e01c      	b.n	800660e <HAL_RCC_OscConfig+0x5a6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	2b05      	cmp	r3, #5
 80065da:	d10c      	bne.n	80065f6 <HAL_RCC_OscConfig+0x58e>
 80065dc:	4b84      	ldr	r3, [pc, #528]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	4a83      	ldr	r2, [pc, #524]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065e2:	f043 0304 	orr.w	r3, r3, #4
 80065e6:	6713      	str	r3, [r2, #112]	; 0x70
 80065e8:	4b81      	ldr	r3, [pc, #516]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ec:	4a80      	ldr	r2, [pc, #512]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	6713      	str	r3, [r2, #112]	; 0x70
 80065f4:	e00b      	b.n	800660e <HAL_RCC_OscConfig+0x5a6>
 80065f6:	4b7e      	ldr	r3, [pc, #504]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	4a7d      	ldr	r2, [pc, #500]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	6713      	str	r3, [r2, #112]	; 0x70
 8006602:	4b7b      	ldr	r3, [pc, #492]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006606:	4a7a      	ldr	r2, [pc, #488]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006608:	f023 0304 	bic.w	r3, r3, #4
 800660c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d015      	beq.n	8006642 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006616:	f7fb fdad 	bl	8002174 <HAL_GetTick>
 800661a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800661c:	e00a      	b.n	8006634 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800661e:	f7fb fda9 	bl	8002174 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	f241 3288 	movw	r2, #5000	; 0x1388
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e122      	b.n	800687a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006634:	4b6e      	ldr	r3, [pc, #440]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0ee      	beq.n	800661e <HAL_RCC_OscConfig+0x5b6>
 8006640:	e014      	b.n	800666c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006642:	f7fb fd97 	bl	8002174 <HAL_GetTick>
 8006646:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006648:	e00a      	b.n	8006660 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800664a:	f7fb fd93 	bl	8002174 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	f241 3288 	movw	r2, #5000	; 0x1388
 8006658:	4293      	cmp	r3, r2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e10c      	b.n	800687a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006660:	4b63      	ldr	r3, [pc, #396]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1ee      	bne.n	800664a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8101 	beq.w	8006878 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006676:	4b5e      	ldr	r3, [pc, #376]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800667e:	2b18      	cmp	r3, #24
 8006680:	f000 80bc 	beq.w	80067fc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	2b02      	cmp	r3, #2
 800668a:	f040 8095 	bne.w	80067b8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800668e:	4b58      	ldr	r3, [pc, #352]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a57      	ldr	r2, [pc, #348]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669a:	f7fb fd6b 	bl	8002174 <HAL_GetTick>
 800669e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a2:	f7fb fd67 	bl	8002174 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e0e2      	b.n	800687a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066b4:	4b4e      	ldr	r3, [pc, #312]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066c0:	4b4b      	ldr	r3, [pc, #300]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80066c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066c4:	4b4b      	ldr	r3, [pc, #300]	; (80067f4 <HAL_RCC_OscConfig+0x78c>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80066d0:	0112      	lsls	r2, r2, #4
 80066d2:	430a      	orrs	r2, r1
 80066d4:	4946      	ldr	r1, [pc, #280]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	628b      	str	r3, [r1, #40]	; 0x28
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	3b01      	subs	r3, #1
 80066e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e8:	3b01      	subs	r3, #1
 80066ea:	025b      	lsls	r3, r3, #9
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	3b01      	subs	r3, #1
 80066f6:	041b      	lsls	r3, r3, #16
 80066f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006702:	3b01      	subs	r3, #1
 8006704:	061b      	lsls	r3, r3, #24
 8006706:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800670a:	4939      	ldr	r1, [pc, #228]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 800670c:	4313      	orrs	r3, r2
 800670e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006710:	4b37      	ldr	r3, [pc, #220]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	4a36      	ldr	r2, [pc, #216]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800671c:	4b34      	ldr	r3, [pc, #208]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 800671e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006720:	4b35      	ldr	r3, [pc, #212]	; (80067f8 <HAL_RCC_OscConfig+0x790>)
 8006722:	4013      	ands	r3, r2
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006728:	00d2      	lsls	r2, r2, #3
 800672a:	4931      	ldr	r1, [pc, #196]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 800672c:	4313      	orrs	r3, r2
 800672e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006730:	4b2f      	ldr	r3, [pc, #188]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	f023 020c 	bic.w	r2, r3, #12
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	492c      	ldr	r1, [pc, #176]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 800673e:	4313      	orrs	r3, r2
 8006740:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006742:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	f023 0202 	bic.w	r2, r3, #2
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674e:	4928      	ldr	r1, [pc, #160]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006750:	4313      	orrs	r3, r2
 8006752:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006754:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 800675a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800675e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006760:	4b23      	ldr	r3, [pc, #140]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	4a22      	ldr	r2, [pc, #136]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800676a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800676c:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006778:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	4a1c      	ldr	r2, [pc, #112]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006784:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a19      	ldr	r2, [pc, #100]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 800678a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800678e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006790:	f7fb fcf0 	bl	8002174 <HAL_GetTick>
 8006794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006798:	f7fb fcec 	bl	8002174 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e067      	b.n	800687a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067aa:	4b11      	ldr	r3, [pc, #68]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f0      	beq.n	8006798 <HAL_RCC_OscConfig+0x730>
 80067b6:	e05f      	b.n	8006878 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b8:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a0c      	ldr	r2, [pc, #48]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80067be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c4:	f7fb fcd6 	bl	8002174 <HAL_GetTick>
 80067c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067cc:	f7fb fcd2 	bl	8002174 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e04d      	b.n	800687a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067de:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <HAL_RCC_OscConfig+0x788>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f0      	bne.n	80067cc <HAL_RCC_OscConfig+0x764>
 80067ea:	e045      	b.n	8006878 <HAL_RCC_OscConfig+0x810>
 80067ec:	58024800 	.word	0x58024800
 80067f0:	58024400 	.word	0x58024400
 80067f4:	fffffc0c 	.word	0xfffffc0c
 80067f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067fc:	4b21      	ldr	r3, [pc, #132]	; (8006884 <HAL_RCC_OscConfig+0x81c>)
 80067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006800:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006802:	4b20      	ldr	r3, [pc, #128]	; (8006884 <HAL_RCC_OscConfig+0x81c>)
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	2b01      	cmp	r3, #1
 800680e:	d031      	beq.n	8006874 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f003 0203 	and.w	r2, r3, #3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800681a:	429a      	cmp	r2, r3
 800681c:	d12a      	bne.n	8006874 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800682a:	429a      	cmp	r2, r3
 800682c:	d122      	bne.n	8006874 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800683a:	429a      	cmp	r2, r3
 800683c:	d11a      	bne.n	8006874 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	0a5b      	lsrs	r3, r3, #9
 8006842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800684c:	429a      	cmp	r2, r3
 800684e:	d111      	bne.n	8006874 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	0c1b      	lsrs	r3, r3, #16
 8006854:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800685e:	429a      	cmp	r2, r3
 8006860:	d108      	bne.n	8006874 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	0e1b      	lsrs	r3, r3, #24
 8006866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006870:	429a      	cmp	r2, r3
 8006872:	d001      	beq.n	8006878 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3730      	adds	r7, #48	; 0x30
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	58024400 	.word	0x58024400

08006888 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e19c      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800689c:	4b8a      	ldr	r3, [pc, #552]	; (8006ac8 <HAL_RCC_ClockConfig+0x240>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d910      	bls.n	80068cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068aa:	4b87      	ldr	r3, [pc, #540]	; (8006ac8 <HAL_RCC_ClockConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f023 020f 	bic.w	r2, r3, #15
 80068b2:	4985      	ldr	r1, [pc, #532]	; (8006ac8 <HAL_RCC_ClockConfig+0x240>)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ba:	4b83      	ldr	r3, [pc, #524]	; (8006ac8 <HAL_RCC_ClockConfig+0x240>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d001      	beq.n	80068cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e184      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d010      	beq.n	80068fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	4b7b      	ldr	r3, [pc, #492]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d908      	bls.n	80068fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068e8:	4b78      	ldr	r3, [pc, #480]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	4975      	ldr	r1, [pc, #468]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d010      	beq.n	8006928 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	4b70      	ldr	r3, [pc, #448]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006912:	429a      	cmp	r2, r3
 8006914:	d908      	bls.n	8006928 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006916:	4b6d      	ldr	r3, [pc, #436]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	496a      	ldr	r1, [pc, #424]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006924:	4313      	orrs	r3, r2
 8006926:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b00      	cmp	r3, #0
 8006932:	d010      	beq.n	8006956 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	4b64      	ldr	r3, [pc, #400]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006940:	429a      	cmp	r2, r3
 8006942:	d908      	bls.n	8006956 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006944:	4b61      	ldr	r3, [pc, #388]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	495e      	ldr	r1, [pc, #376]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006952:	4313      	orrs	r3, r2
 8006954:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d010      	beq.n	8006984 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69da      	ldr	r2, [r3, #28]
 8006966:	4b59      	ldr	r3, [pc, #356]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800696e:	429a      	cmp	r2, r3
 8006970:	d908      	bls.n	8006984 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006972:	4b56      	ldr	r3, [pc, #344]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	4953      	ldr	r1, [pc, #332]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006980:	4313      	orrs	r3, r2
 8006982:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d010      	beq.n	80069b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	4b4d      	ldr	r3, [pc, #308]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	429a      	cmp	r2, r3
 800699e:	d908      	bls.n	80069b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a0:	4b4a      	ldr	r3, [pc, #296]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f023 020f 	bic.w	r2, r3, #15
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	4947      	ldr	r1, [pc, #284]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d055      	beq.n	8006a6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80069be:	4b43      	ldr	r3, [pc, #268]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	4940      	ldr	r1, [pc, #256]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d107      	bne.n	80069e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069d8:	4b3c      	ldr	r3, [pc, #240]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d121      	bne.n	8006a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e0f6      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d107      	bne.n	8006a00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069f0:	4b36      	ldr	r3, [pc, #216]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d115      	bne.n	8006a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0ea      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d107      	bne.n	8006a18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a08:	4b30      	ldr	r3, [pc, #192]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0de      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a18:	4b2c      	ldr	r3, [pc, #176]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e0d6      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a28:	4b28      	ldr	r3, [pc, #160]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f023 0207 	bic.w	r2, r3, #7
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	4925      	ldr	r1, [pc, #148]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3a:	f7fb fb9b 	bl	8002174 <HAL_GetTick>
 8006a3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a40:	e00a      	b.n	8006a58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a42:	f7fb fb97 	bl	8002174 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e0be      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a58:	4b1c      	ldr	r3, [pc, #112]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d1eb      	bne.n	8006a42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d010      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	4b14      	ldr	r3, [pc, #80]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d208      	bcs.n	8006a98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a86:	4b11      	ldr	r3, [pc, #68]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	f023 020f 	bic.w	r2, r3, #15
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	490e      	ldr	r1, [pc, #56]	; (8006acc <HAL_RCC_ClockConfig+0x244>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a98:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <HAL_RCC_ClockConfig+0x240>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d214      	bcs.n	8006ad0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa6:	4b08      	ldr	r3, [pc, #32]	; (8006ac8 <HAL_RCC_ClockConfig+0x240>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f023 020f 	bic.w	r2, r3, #15
 8006aae:	4906      	ldr	r1, [pc, #24]	; (8006ac8 <HAL_RCC_ClockConfig+0x240>)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ab6:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <HAL_RCC_ClockConfig+0x240>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d005      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e086      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x34e>
 8006ac8:	52002000 	.word	0x52002000
 8006acc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d010      	beq.n	8006afe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	4b3f      	ldr	r3, [pc, #252]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d208      	bcs.n	8006afe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006aec:	4b3c      	ldr	r3, [pc, #240]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	4939      	ldr	r1, [pc, #228]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d010      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695a      	ldr	r2, [r3, #20]
 8006b0e:	4b34      	ldr	r3, [pc, #208]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d208      	bcs.n	8006b2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b1a:	4b31      	ldr	r3, [pc, #196]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	492e      	ldr	r1, [pc, #184]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d010      	beq.n	8006b5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	4b28      	ldr	r3, [pc, #160]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d208      	bcs.n	8006b5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b48:	4b25      	ldr	r3, [pc, #148]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	4922      	ldr	r1, [pc, #136]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d010      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69da      	ldr	r2, [r3, #28]
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d208      	bcs.n	8006b88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b76:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	4917      	ldr	r1, [pc, #92]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b88:	f000 f834 	bl	8006bf4 <HAL_RCC_GetSysClockFreq>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	f003 030f 	and.w	r3, r3, #15
 8006b98:	4912      	ldr	r1, [pc, #72]	; (8006be4 <HAL_RCC_ClockConfig+0x35c>)
 8006b9a:	5ccb      	ldrb	r3, [r1, r3]
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <HAL_RCC_ClockConfig+0x358>)
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	4a0d      	ldr	r2, [pc, #52]	; (8006be4 <HAL_RCC_ClockConfig+0x35c>)
 8006bb0:	5cd3      	ldrb	r3, [r2, r3]
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbc:	4a0a      	ldr	r2, [pc, #40]	; (8006be8 <HAL_RCC_ClockConfig+0x360>)
 8006bbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <HAL_RCC_ClockConfig+0x364>)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006bc6:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <HAL_RCC_ClockConfig+0x368>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fb fa88 	bl	80020e0 <HAL_InitTick>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	58024400 	.word	0x58024400
 8006be4:	0800ceb8 	.word	0x0800ceb8
 8006be8:	24000004 	.word	0x24000004
 8006bec:	24000000 	.word	0x24000000
 8006bf0:	24017154 	.word	0x24017154

08006bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b089      	sub	sp, #36	; 0x24
 8006bf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bfa:	4bb3      	ldr	r3, [pc, #716]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c02:	2b18      	cmp	r3, #24
 8006c04:	f200 8155 	bhi.w	8006eb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c75 	.word	0x08006c75
 8006c14:	08006eb3 	.word	0x08006eb3
 8006c18:	08006eb3 	.word	0x08006eb3
 8006c1c:	08006eb3 	.word	0x08006eb3
 8006c20:	08006eb3 	.word	0x08006eb3
 8006c24:	08006eb3 	.word	0x08006eb3
 8006c28:	08006eb3 	.word	0x08006eb3
 8006c2c:	08006eb3 	.word	0x08006eb3
 8006c30:	08006c9b 	.word	0x08006c9b
 8006c34:	08006eb3 	.word	0x08006eb3
 8006c38:	08006eb3 	.word	0x08006eb3
 8006c3c:	08006eb3 	.word	0x08006eb3
 8006c40:	08006eb3 	.word	0x08006eb3
 8006c44:	08006eb3 	.word	0x08006eb3
 8006c48:	08006eb3 	.word	0x08006eb3
 8006c4c:	08006eb3 	.word	0x08006eb3
 8006c50:	08006ca1 	.word	0x08006ca1
 8006c54:	08006eb3 	.word	0x08006eb3
 8006c58:	08006eb3 	.word	0x08006eb3
 8006c5c:	08006eb3 	.word	0x08006eb3
 8006c60:	08006eb3 	.word	0x08006eb3
 8006c64:	08006eb3 	.word	0x08006eb3
 8006c68:	08006eb3 	.word	0x08006eb3
 8006c6c:	08006eb3 	.word	0x08006eb3
 8006c70:	08006ca7 	.word	0x08006ca7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c74:	4b94      	ldr	r3, [pc, #592]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0320 	and.w	r3, r3, #32
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d009      	beq.n	8006c94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c80:	4b91      	ldr	r3, [pc, #580]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	08db      	lsrs	r3, r3, #3
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	4a90      	ldr	r2, [pc, #576]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c92:	e111      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c94:	4b8d      	ldr	r3, [pc, #564]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c96:	61bb      	str	r3, [r7, #24]
    break;
 8006c98:	e10e      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c9a:	4b8d      	ldr	r3, [pc, #564]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c9c:	61bb      	str	r3, [r7, #24]
    break;
 8006c9e:	e10b      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006ca0:	4b8c      	ldr	r3, [pc, #560]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ca2:	61bb      	str	r3, [r7, #24]
    break;
 8006ca4:	e108      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ca6:	4b88      	ldr	r3, [pc, #544]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006cb0:	4b85      	ldr	r3, [pc, #532]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	091b      	lsrs	r3, r3, #4
 8006cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006cbc:	4b82      	ldr	r3, [pc, #520]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cc6:	4b80      	ldr	r3, [pc, #512]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	08db      	lsrs	r3, r3, #3
 8006ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80e1 	beq.w	8006eac <HAL_RCC_GetSysClockFreq+0x2b8>
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	f000 8083 	beq.w	8006df8 <HAL_RCC_GetSysClockFreq+0x204>
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	f200 80a1 	bhi.w	8006e3c <HAL_RCC_GetSysClockFreq+0x248>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_RCC_GetSysClockFreq+0x114>
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d056      	beq.n	8006db4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006d06:	e099      	b.n	8006e3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d08:	4b6f      	ldr	r3, [pc, #444]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d02d      	beq.n	8006d70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d14:	4b6c      	ldr	r3, [pc, #432]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	08db      	lsrs	r3, r3, #3
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	4a6b      	ldr	r2, [pc, #428]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
 8006d24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	ee07 3a90 	vmov	s15, r3
 8006d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d3e:	4b62      	ldr	r3, [pc, #392]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d52:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006d6e:	e087      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006edc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d82:	4b51      	ldr	r3, [pc, #324]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d96:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006db2:	e065      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006ee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc6:	4b40      	ldr	r3, [pc, #256]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006df6:	e043      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006ee4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0a:	4b2f      	ldr	r3, [pc, #188]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e3a:	e021      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006ee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4e:	4b1e      	ldr	r3, [pc, #120]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006e80:	4b11      	ldr	r3, [pc, #68]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	0a5b      	lsrs	r3, r3, #9
 8006e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	ee07 3a90 	vmov	s15, r3
 8006e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ea4:	ee17 3a90 	vmov	r3, s15
 8006ea8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006eaa:	e005      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61bb      	str	r3, [r7, #24]
    break;
 8006eb0:	e002      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006eb2:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006eb4:	61bb      	str	r3, [r7, #24]
    break;
 8006eb6:	bf00      	nop
  }

  return sysclockfreq;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3724      	adds	r7, #36	; 0x24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	58024400 	.word	0x58024400
 8006ecc:	03d09000 	.word	0x03d09000
 8006ed0:	003d0900 	.word	0x003d0900
 8006ed4:	007a1200 	.word	0x007a1200
 8006ed8:	46000000 	.word	0x46000000
 8006edc:	4c742400 	.word	0x4c742400
 8006ee0:	4a742400 	.word	0x4a742400
 8006ee4:	4af42400 	.word	0x4af42400

08006ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006eee:	f7ff fe81 	bl	8006bf4 <HAL_RCC_GetSysClockFreq>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	f003 030f 	and.w	r3, r3, #15
 8006efe:	490f      	ldr	r1, [pc, #60]	; (8006f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8006f00:	5ccb      	ldrb	r3, [r1, r3]
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	4a09      	ldr	r2, [pc, #36]	; (8006f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8006f16:	5cd3      	ldrb	r3, [r2, r3]
 8006f18:	f003 031f 	and.w	r3, r3, #31
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f22:	4a07      	ldr	r2, [pc, #28]	; (8006f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f26:	4a07      	ldr	r2, [pc, #28]	; (8006f44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f2c:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	58024400 	.word	0x58024400
 8006f3c:	0800ceb8 	.word	0x0800ceb8
 8006f40:	24000004 	.word	0x24000004
 8006f44:	24000000 	.word	0x24000000

08006f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f4c:	f7ff ffcc 	bl	8006ee8 <HAL_RCC_GetHCLKFreq>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	091b      	lsrs	r3, r3, #4
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	4904      	ldr	r1, [pc, #16]	; (8006f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f5e:	5ccb      	ldrb	r3, [r1, r3]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	0800ceb8 	.word	0x0800ceb8

08006f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006f78:	f7ff ffb6 	bl	8006ee8 <HAL_RCC_GetHCLKFreq>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	0a1b      	lsrs	r3, r3, #8
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	4904      	ldr	r1, [pc, #16]	; (8006f9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f8a:	5ccb      	ldrb	r3, [r1, r3]
 8006f8c:	f003 031f 	and.w	r3, r3, #31
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	58024400 	.word	0x58024400
 8006f9c:	0800ceb8 	.word	0x0800ceb8

08006fa0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fa8:	2300      	movs	r3, #0
 8006faa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fac:	2300      	movs	r3, #0
 8006fae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d03f      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fc4:	d02a      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006fc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fca:	d824      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fd0:	d018      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fd6:	d81e      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fe0:	d007      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fe2:	e018      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe4:	4bab      	ldr	r3, [pc, #684]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	4aaa      	ldr	r2, [pc, #680]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ff0:	e015      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	2102      	movs	r1, #2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 f9cf 	bl	800839c <RCCEx_PLL2_Config>
 8006ffe:	4603      	mov	r3, r0
 8007000:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007002:	e00c      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3324      	adds	r3, #36	; 0x24
 8007008:	2102      	movs	r1, #2
 800700a:	4618      	mov	r0, r3
 800700c:	f001 fa78 	bl	8008500 <RCCEx_PLL3_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007014:	e003      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	75fb      	strb	r3, [r7, #23]
      break;
 800701a:	e000      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800701c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d109      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007024:	4b9b      	ldr	r3, [pc, #620]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007030:	4998      	ldr	r1, [pc, #608]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007032:	4313      	orrs	r3, r2
 8007034:	650b      	str	r3, [r1, #80]	; 0x50
 8007036:	e001      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007044:	2b00      	cmp	r3, #0
 8007046:	d03d      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704c:	2b04      	cmp	r3, #4
 800704e:	d826      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007050:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	0800706d 	.word	0x0800706d
 800705c:	0800707b 	.word	0x0800707b
 8007060:	0800708d 	.word	0x0800708d
 8007064:	080070a5 	.word	0x080070a5
 8007068:	080070a5 	.word	0x080070a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706c:	4b89      	ldr	r3, [pc, #548]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	4a88      	ldr	r2, [pc, #544]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007078:	e015      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3304      	adds	r3, #4
 800707e:	2100      	movs	r1, #0
 8007080:	4618      	mov	r0, r3
 8007082:	f001 f98b 	bl	800839c <RCCEx_PLL2_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800708a:	e00c      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3324      	adds	r3, #36	; 0x24
 8007090:	2100      	movs	r1, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f001 fa34 	bl	8008500 <RCCEx_PLL3_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800709c:	e003      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	75fb      	strb	r3, [r7, #23]
      break;
 80070a2:	e000      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80070a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d109      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070ac:	4b79      	ldr	r3, [pc, #484]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b0:	f023 0207 	bic.w	r2, r3, #7
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b8:	4976      	ldr	r1, [pc, #472]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	650b      	str	r3, [r1, #80]	; 0x50
 80070be:	e001      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
 80070c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d042      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d8:	d02b      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80070da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070de:	d825      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070e0:	2bc0      	cmp	r3, #192	; 0xc0
 80070e2:	d028      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80070e4:	2bc0      	cmp	r3, #192	; 0xc0
 80070e6:	d821      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070e8:	2b80      	cmp	r3, #128	; 0x80
 80070ea:	d016      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80070ec:	2b80      	cmp	r3, #128	; 0x80
 80070ee:	d81d      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	d007      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80070f8:	e018      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070fa:	4b66      	ldr	r3, [pc, #408]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	4a65      	ldr	r2, [pc, #404]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007106:	e017      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	2100      	movs	r1, #0
 800710e:	4618      	mov	r0, r3
 8007110:	f001 f944 	bl	800839c <RCCEx_PLL2_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007118:	e00e      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3324      	adds	r3, #36	; 0x24
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f9ed 	bl	8008500 <RCCEx_PLL3_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800712a:	e005      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
      break;
 8007130:	e002      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007132:	bf00      	nop
 8007134:	e000      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007138:	7dfb      	ldrb	r3, [r7, #23]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800713e:	4b55      	ldr	r3, [pc, #340]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714a:	4952      	ldr	r1, [pc, #328]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800714c:	4313      	orrs	r3, r2
 800714e:	650b      	str	r3, [r1, #80]	; 0x50
 8007150:	e001      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800715e:	2b00      	cmp	r3, #0
 8007160:	d049      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007168:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800716c:	d030      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800716e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007172:	d82a      	bhi.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007174:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007178:	d02c      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800717a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800717e:	d824      	bhi.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007184:	d018      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800718a:	d81e      	bhi.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007194:	d007      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007196:	e018      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007198:	4b3e      	ldr	r3, [pc, #248]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	4a3d      	ldr	r2, [pc, #244]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800719e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071a4:	e017      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3304      	adds	r3, #4
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 f8f5 	bl	800839c <RCCEx_PLL2_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80071b6:	e00e      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3324      	adds	r3, #36	; 0x24
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 f99e 	bl	8008500 <RCCEx_PLL3_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071c8:	e005      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
      break;
 80071ce:	e002      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80071d0:	bf00      	nop
 80071d2:	e000      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80071d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071dc:	4b2d      	ldr	r3, [pc, #180]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071ea:	492a      	ldr	r1, [pc, #168]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	658b      	str	r3, [r1, #88]	; 0x58
 80071f0:	e001      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d04c      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800720c:	d030      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800720e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007212:	d82a      	bhi.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007214:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007218:	d02c      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800721a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800721e:	d824      	bhi.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007224:	d018      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800722a:	d81e      	bhi.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007234:	d007      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007236:	e018      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007238:	4b16      	ldr	r3, [pc, #88]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4a15      	ldr	r2, [pc, #84]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800723e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007244:	e017      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3304      	adds	r3, #4
 800724a:	2100      	movs	r1, #0
 800724c:	4618      	mov	r0, r3
 800724e:	f001 f8a5 	bl	800839c <RCCEx_PLL2_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007256:	e00e      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3324      	adds	r3, #36	; 0x24
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f001 f94e 	bl	8008500 <RCCEx_PLL3_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007268:	e005      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	75fb      	strb	r3, [r7, #23]
      break;
 800726e:	e002      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007270:	bf00      	nop
 8007272:	e000      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10d      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800727e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007280:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800728a:	4902      	ldr	r1, [pc, #8]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800728c:	4313      	orrs	r3, r2
 800728e:	658b      	str	r3, [r1, #88]	; 0x58
 8007290:	e004      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007292:	bf00      	nop
 8007294:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d032      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ac:	2b30      	cmp	r3, #48	; 0x30
 80072ae:	d01c      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80072b0:	2b30      	cmp	r3, #48	; 0x30
 80072b2:	d817      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d00c      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	d813      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d016      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80072c0:	2b10      	cmp	r3, #16
 80072c2:	d10f      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c4:	4baf      	ldr	r3, [pc, #700]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	4aae      	ldr	r2, [pc, #696]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80072d0:	e00e      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3304      	adds	r3, #4
 80072d6:	2102      	movs	r1, #2
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 f85f 	bl	800839c <RCCEx_PLL2_Config>
 80072de:	4603      	mov	r3, r0
 80072e0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80072e2:	e005      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]
      break;
 80072e8:	e002      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80072ea:	bf00      	nop
 80072ec:	e000      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80072ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072f6:	4ba3      	ldr	r3, [pc, #652]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007302:	49a0      	ldr	r1, [pc, #640]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007304:	4313      	orrs	r3, r2
 8007306:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007308:	e001      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d047      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007322:	d030      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007328:	d82a      	bhi.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800732a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800732e:	d02c      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007330:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007334:	d824      	bhi.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800733a:	d018      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800733c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007340:	d81e      	bhi.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734a:	d007      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800734c:	e018      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800734e:	4b8d      	ldr	r3, [pc, #564]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	4a8c      	ldr	r2, [pc, #560]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007358:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800735a:	e017      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	2100      	movs	r1, #0
 8007362:	4618      	mov	r0, r3
 8007364:	f001 f81a 	bl	800839c <RCCEx_PLL2_Config>
 8007368:	4603      	mov	r3, r0
 800736a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800736c:	e00e      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3324      	adds	r3, #36	; 0x24
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f001 f8c3 	bl	8008500 <RCCEx_PLL3_Config>
 800737a:	4603      	mov	r3, r0
 800737c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800737e:	e005      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	75fb      	strb	r3, [r7, #23]
      break;
 8007384:	e002      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007386:	bf00      	nop
 8007388:	e000      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800738a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007392:	4b7c      	ldr	r3, [pc, #496]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007396:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739e:	4979      	ldr	r1, [pc, #484]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	650b      	str	r3, [r1, #80]	; 0x50
 80073a4:	e001      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d049      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073be:	d02e      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80073c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073c4:	d828      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80073c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073ca:	d02a      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80073cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073d0:	d822      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80073d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073d6:	d026      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80073d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073dc:	d81c      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80073de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e2:	d010      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80073e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e8:	d816      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d01d      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80073ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f2:	d111      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3304      	adds	r3, #4
 80073f8:	2101      	movs	r1, #1
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 ffce 	bl	800839c <RCCEx_PLL2_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007404:	e012      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3324      	adds	r3, #36	; 0x24
 800740a:	2101      	movs	r1, #1
 800740c:	4618      	mov	r0, r3
 800740e:	f001 f877 	bl	8008500 <RCCEx_PLL3_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007416:	e009      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	75fb      	strb	r3, [r7, #23]
      break;
 800741c:	e006      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800741e:	bf00      	nop
 8007420:	e004      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800742a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007432:	4b54      	ldr	r3, [pc, #336]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007436:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800743e:	4951      	ldr	r1, [pc, #324]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007440:	4313      	orrs	r3, r2
 8007442:	650b      	str	r3, [r1, #80]	; 0x50
 8007444:	e001      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d04b      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800745c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007460:	d02e      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007466:	d828      	bhi.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746c:	d02a      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800746e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007472:	d822      	bhi.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007474:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007478:	d026      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800747a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800747e:	d81c      	bhi.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007484:	d010      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748a:	d816      	bhi.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01d      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007494:	d111      	bne.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3304      	adds	r3, #4
 800749a:	2101      	movs	r1, #1
 800749c:	4618      	mov	r0, r3
 800749e:	f000 ff7d 	bl	800839c <RCCEx_PLL2_Config>
 80074a2:	4603      	mov	r3, r0
 80074a4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80074a6:	e012      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3324      	adds	r3, #36	; 0x24
 80074ac:	2101      	movs	r1, #1
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 f826 	bl	8008500 <RCCEx_PLL3_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80074b8:	e009      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	75fb      	strb	r3, [r7, #23]
      break;
 80074be:	e006      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80074c0:	bf00      	nop
 80074c2:	e004      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80074c4:	bf00      	nop
 80074c6:	e002      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80074c8:	bf00      	nop
 80074ca:	e000      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80074cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10a      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80074d4:	4b2b      	ldr	r3, [pc, #172]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074e2:	4928      	ldr	r1, [pc, #160]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	658b      	str	r3, [r1, #88]	; 0x58
 80074e8:	e001      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d02f      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007502:	d00e      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007508:	d814      	bhi.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d015      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800750e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007512:	d10f      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007514:	4b1b      	ldr	r3, [pc, #108]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	4a1a      	ldr	r2, [pc, #104]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800751a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800751e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007520:	e00c      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3304      	adds	r3, #4
 8007526:	2101      	movs	r1, #1
 8007528:	4618      	mov	r0, r3
 800752a:	f000 ff37 	bl	800839c <RCCEx_PLL2_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007532:	e003      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	75fb      	strb	r3, [r7, #23]
      break;
 8007538:	e000      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800753a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d109      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007546:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754e:	490d      	ldr	r1, [pc, #52]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007550:	4313      	orrs	r3, r2
 8007552:	650b      	str	r3, [r1, #80]	; 0x50
 8007554:	e001      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
 8007558:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d033      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	2b03      	cmp	r3, #3
 800756c:	d81c      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800756e:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	080075af 	.word	0x080075af
 8007578:	08007589 	.word	0x08007589
 800757c:	08007597 	.word	0x08007597
 8007580:	080075af 	.word	0x080075af
 8007584:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007588:	4bb8      	ldr	r3, [pc, #736]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	4ab7      	ldr	r2, [pc, #732]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800758e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007592:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007594:	e00c      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3304      	adds	r3, #4
 800759a:	2102      	movs	r1, #2
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fefd 	bl	800839c <RCCEx_PLL2_Config>
 80075a2:	4603      	mov	r3, r0
 80075a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80075a6:	e003      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	75fb      	strb	r3, [r7, #23]
      break;
 80075ac:	e000      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80075ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80075b6:	4bad      	ldr	r3, [pc, #692]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ba:	f023 0203 	bic.w	r2, r3, #3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c2:	49aa      	ldr	r1, [pc, #680]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80075c8:	e001      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 8086 	beq.w	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075dc:	4ba4      	ldr	r3, [pc, #656]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4aa3      	ldr	r2, [pc, #652]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80075e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075e8:	f7fa fdc4 	bl	8002174 <HAL_GetTick>
 80075ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ee:	e009      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f0:	f7fa fdc0 	bl	8002174 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b64      	cmp	r3, #100	; 0x64
 80075fc:	d902      	bls.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	75fb      	strb	r3, [r7, #23]
        break;
 8007602:	e005      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007604:	4b9a      	ldr	r3, [pc, #616]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0ef      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d166      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007616:	4b95      	ldr	r3, [pc, #596]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007618:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007620:	4053      	eors	r3, r2
 8007622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007626:	2b00      	cmp	r3, #0
 8007628:	d013      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800762a:	4b90      	ldr	r3, [pc, #576]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007632:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007634:	4b8d      	ldr	r3, [pc, #564]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007638:	4a8c      	ldr	r2, [pc, #560]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800763a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007640:	4b8a      	ldr	r3, [pc, #552]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007644:	4a89      	ldr	r2, [pc, #548]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800764a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800764c:	4a87      	ldr	r2, [pc, #540]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800765c:	d115      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765e:	f7fa fd89 	bl	8002174 <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007664:	e00b      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007666:	f7fa fd85 	bl	8002174 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	f241 3288 	movw	r2, #5000	; 0x1388
 8007674:	4293      	cmp	r3, r2
 8007676:	d902      	bls.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	75fb      	strb	r3, [r7, #23]
            break;
 800767c:	e005      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800767e:	4b7b      	ldr	r3, [pc, #492]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0ed      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d126      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800769e:	d10d      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80076a0:	4b72      	ldr	r3, [pc, #456]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076ae:	0919      	lsrs	r1, r3, #4
 80076b0:	4b70      	ldr	r3, [pc, #448]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80076b2:	400b      	ands	r3, r1
 80076b4:	496d      	ldr	r1, [pc, #436]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	610b      	str	r3, [r1, #16]
 80076ba:	e005      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80076bc:	4b6b      	ldr	r3, [pc, #428]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	4a6a      	ldr	r2, [pc, #424]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076c6:	6113      	str	r3, [r2, #16]
 80076c8:	4b68      	ldr	r3, [pc, #416]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d6:	4965      	ldr	r1, [pc, #404]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	670b      	str	r3, [r1, #112]	; 0x70
 80076dc:	e004      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	75bb      	strb	r3, [r7, #22]
 80076e2:	e001      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d07e      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f8:	2b28      	cmp	r3, #40	; 0x28
 80076fa:	d867      	bhi.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	080077d3 	.word	0x080077d3
 8007708:	080077cd 	.word	0x080077cd
 800770c:	080077cd 	.word	0x080077cd
 8007710:	080077cd 	.word	0x080077cd
 8007714:	080077cd 	.word	0x080077cd
 8007718:	080077cd 	.word	0x080077cd
 800771c:	080077cd 	.word	0x080077cd
 8007720:	080077cd 	.word	0x080077cd
 8007724:	080077a9 	.word	0x080077a9
 8007728:	080077cd 	.word	0x080077cd
 800772c:	080077cd 	.word	0x080077cd
 8007730:	080077cd 	.word	0x080077cd
 8007734:	080077cd 	.word	0x080077cd
 8007738:	080077cd 	.word	0x080077cd
 800773c:	080077cd 	.word	0x080077cd
 8007740:	080077cd 	.word	0x080077cd
 8007744:	080077bb 	.word	0x080077bb
 8007748:	080077cd 	.word	0x080077cd
 800774c:	080077cd 	.word	0x080077cd
 8007750:	080077cd 	.word	0x080077cd
 8007754:	080077cd 	.word	0x080077cd
 8007758:	080077cd 	.word	0x080077cd
 800775c:	080077cd 	.word	0x080077cd
 8007760:	080077cd 	.word	0x080077cd
 8007764:	080077d3 	.word	0x080077d3
 8007768:	080077cd 	.word	0x080077cd
 800776c:	080077cd 	.word	0x080077cd
 8007770:	080077cd 	.word	0x080077cd
 8007774:	080077cd 	.word	0x080077cd
 8007778:	080077cd 	.word	0x080077cd
 800777c:	080077cd 	.word	0x080077cd
 8007780:	080077cd 	.word	0x080077cd
 8007784:	080077d3 	.word	0x080077d3
 8007788:	080077cd 	.word	0x080077cd
 800778c:	080077cd 	.word	0x080077cd
 8007790:	080077cd 	.word	0x080077cd
 8007794:	080077cd 	.word	0x080077cd
 8007798:	080077cd 	.word	0x080077cd
 800779c:	080077cd 	.word	0x080077cd
 80077a0:	080077cd 	.word	0x080077cd
 80077a4:	080077d3 	.word	0x080077d3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3304      	adds	r3, #4
 80077ac:	2101      	movs	r1, #1
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fdf4 	bl	800839c <RCCEx_PLL2_Config>
 80077b4:	4603      	mov	r3, r0
 80077b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80077b8:	e00c      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3324      	adds	r3, #36	; 0x24
 80077be:	2101      	movs	r1, #1
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 fe9d 	bl	8008500 <RCCEx_PLL3_Config>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80077ca:	e003      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	75fb      	strb	r3, [r7, #23]
      break;
 80077d0:	e000      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80077d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d109      	bne.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80077da:	4b24      	ldr	r3, [pc, #144]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077de:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077e6:	4921      	ldr	r1, [pc, #132]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	654b      	str	r3, [r1, #84]	; 0x54
 80077ec:	e001      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d03e      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007802:	2b05      	cmp	r3, #5
 8007804:	d820      	bhi.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007806:	a201      	add	r2, pc, #4	; (adr r2, 800780c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	0800784f 	.word	0x0800784f
 8007810:	08007825 	.word	0x08007825
 8007814:	08007837 	.word	0x08007837
 8007818:	0800784f 	.word	0x0800784f
 800781c:	0800784f 	.word	0x0800784f
 8007820:	0800784f 	.word	0x0800784f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3304      	adds	r3, #4
 8007828:	2101      	movs	r1, #1
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fdb6 	bl	800839c <RCCEx_PLL2_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007834:	e00c      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3324      	adds	r3, #36	; 0x24
 800783a:	2101      	movs	r1, #1
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fe5f 	bl	8008500 <RCCEx_PLL3_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007846:	e003      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	75fb      	strb	r3, [r7, #23]
      break;
 800784c:	e000      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800784e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d110      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785a:	f023 0207 	bic.w	r2, r3, #7
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007862:	4902      	ldr	r1, [pc, #8]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007864:	4313      	orrs	r3, r2
 8007866:	654b      	str	r3, [r1, #84]	; 0x54
 8007868:	e008      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800786a:	bf00      	nop
 800786c:	58024400 	.word	0x58024400
 8007870:	58024800 	.word	0x58024800
 8007874:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d039      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788e:	2b05      	cmp	r3, #5
 8007890:	d820      	bhi.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007892:	a201      	add	r2, pc, #4	; (adr r2, 8007898 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	080078db 	.word	0x080078db
 800789c:	080078b1 	.word	0x080078b1
 80078a0:	080078c3 	.word	0x080078c3
 80078a4:	080078db 	.word	0x080078db
 80078a8:	080078db 	.word	0x080078db
 80078ac:	080078db 	.word	0x080078db
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3304      	adds	r3, #4
 80078b4:	2101      	movs	r1, #1
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fd70 	bl	800839c <RCCEx_PLL2_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80078c0:	e00c      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3324      	adds	r3, #36	; 0x24
 80078c6:	2101      	movs	r1, #1
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fe19 	bl	8008500 <RCCEx_PLL3_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80078d2:	e003      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	75fb      	strb	r3, [r7, #23]
      break;
 80078d8:	e000      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80078da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078e2:	4bb7      	ldr	r3, [pc, #732]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e6:	f023 0207 	bic.w	r2, r3, #7
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f0:	49b3      	ldr	r1, [pc, #716]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	658b      	str	r3, [r1, #88]	; 0x58
 80078f6:	e001      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
 80078fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d04b      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800790e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007912:	d02e      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007918:	d828      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800791a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791e:	d02a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007924:	d822      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007926:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800792a:	d026      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800792c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007930:	d81c      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007936:	d010      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800793c:	d816      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01d      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007946:	d111      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3304      	adds	r3, #4
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fd24 	bl	800839c <RCCEx_PLL2_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007958:	e012      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3324      	adds	r3, #36	; 0x24
 800795e:	2102      	movs	r1, #2
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fdcd 	bl	8008500 <RCCEx_PLL3_Config>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800796a:	e009      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
      break;
 8007970:	e006      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007972:	bf00      	nop
 8007974:	e004      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007976:	bf00      	nop
 8007978:	e002      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800797a:	bf00      	nop
 800797c:	e000      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800797e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007986:	4b8e      	ldr	r3, [pc, #568]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007994:	498a      	ldr	r1, [pc, #552]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007996:	4313      	orrs	r3, r2
 8007998:	654b      	str	r3, [r1, #84]	; 0x54
 800799a:	e001      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d04b      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80079b6:	d02e      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80079b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80079bc:	d828      	bhi.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80079be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c2:	d02a      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80079c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c8:	d822      	bhi.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80079ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079ce:	d026      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80079d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079d4:	d81c      	bhi.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80079d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079da:	d010      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80079dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e0:	d816      	bhi.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01d      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80079e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ea:	d111      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3304      	adds	r3, #4
 80079f0:	2100      	movs	r1, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fcd2 	bl	800839c <RCCEx_PLL2_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079fc:	e012      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3324      	adds	r3, #36	; 0x24
 8007a02:	2102      	movs	r1, #2
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 fd7b 	bl	8008500 <RCCEx_PLL3_Config>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007a0e:	e009      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	75fb      	strb	r3, [r7, #23]
      break;
 8007a14:	e006      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a16:	bf00      	nop
 8007a18:	e004      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a1a:	bf00      	nop
 8007a1c:	e002      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a1e:	bf00      	nop
 8007a20:	e000      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a2a:	4b65      	ldr	r3, [pc, #404]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a38:	4961      	ldr	r1, [pc, #388]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	658b      	str	r3, [r1, #88]	; 0x58
 8007a3e:	e001      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d04b      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a5a:	d02e      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007a5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a60:	d828      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a66:	d02a      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a6c:	d822      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a72:	d026      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007a74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a78:	d81c      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a7e:	d010      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a84:	d816      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d01d      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8e:	d111      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3304      	adds	r3, #4
 8007a94:	2100      	movs	r1, #0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fc80 	bl	800839c <RCCEx_PLL2_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007aa0:	e012      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3324      	adds	r3, #36	; 0x24
 8007aa6:	2102      	movs	r1, #2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fd29 	bl	8008500 <RCCEx_PLL3_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ab2:	e009      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab8:	e006      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007aba:	bf00      	nop
 8007abc:	e004      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e002      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007ac2:	bf00      	nop
 8007ac4:	e000      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ace:	4b3c      	ldr	r3, [pc, #240]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007adc:	4938      	ldr	r1, [pc, #224]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ae2:	e001      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d01a      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afe:	d10a      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3324      	adds	r3, #36	; 0x24
 8007b04:	2102      	movs	r1, #2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 fcfa 	bl	8008500 <RCCEx_PLL3_Config>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b16:	4b2a      	ldr	r3, [pc, #168]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b24:	4926      	ldr	r1, [pc, #152]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0310 	and.w	r3, r3, #16
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b40:	d10a      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	3324      	adds	r3, #36	; 0x24
 8007b46:	2102      	movs	r1, #2
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 fcd9 	bl	8008500 <RCCEx_PLL3_Config>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b58:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b66:	4916      	ldr	r1, [pc, #88]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d036      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b82:	d01f      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b88:	d817      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b92:	d009      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007b94:	e011      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fbfd 	bl	800839c <RCCEx_PLL2_Config>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ba6:	e00e      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3324      	adds	r3, #36	; 0x24
 8007bac:	2102      	movs	r1, #2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fca6 	bl	8008500 <RCCEx_PLL3_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007bb8:	e005      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bbe:	e002      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007bc0:	58024400 	.word	0x58024400
      break;
 8007bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bcc:	4b93      	ldr	r3, [pc, #588]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bda:	4990      	ldr	r1, [pc, #576]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	658b      	str	r3, [r1, #88]	; 0x58
 8007be0:	e001      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d033      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bfc:	d01c      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007bfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c02:	d816      	bhi.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c08:	d003      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c0e:	d007      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007c10:	e00f      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c12:	4b82      	ldr	r3, [pc, #520]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	4a81      	ldr	r2, [pc, #516]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c1e:	e00c      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3324      	adds	r3, #36	; 0x24
 8007c24:	2101      	movs	r1, #1
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fc6a 	bl	8008500 <RCCEx_PLL3_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c30:	e003      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	75fb      	strb	r3, [r7, #23]
      break;
 8007c36:	e000      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c40:	4b76      	ldr	r3, [pc, #472]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c4e:	4973      	ldr	r1, [pc, #460]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	654b      	str	r3, [r1, #84]	; 0x54
 8007c54:	e001      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d029      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c72:	d007      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007c74:	e00f      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c76:	4b69      	ldr	r3, [pc, #420]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	4a68      	ldr	r2, [pc, #416]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c82:	e00b      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3304      	adds	r3, #4
 8007c88:	2102      	movs	r1, #2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fb86 	bl	800839c <RCCEx_PLL2_Config>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	75fb      	strb	r3, [r7, #23]
      break;
 8007c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d109      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ca2:	4b5e      	ldr	r3, [pc, #376]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cae:	495b      	ldr	r1, [pc, #364]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007cb4:	e001      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3324      	adds	r3, #36	; 0x24
 8007cca:	2102      	movs	r1, #2
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 fc17 	bl	8008500 <RCCEx_PLL3_Config>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d030      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf0:	d017      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf6:	d811      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cfc:	d013      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d02:	d80b      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d010      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d0c:	d106      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d0e:	4b43      	ldr	r3, [pc, #268]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d12:	4a42      	ldr	r2, [pc, #264]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007d1a:	e007      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d20:	e004      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d22:	bf00      	nop
 8007d24:	e002      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d26:	bf00      	nop
 8007d28:	e000      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d32:	4b3a      	ldr	r3, [pc, #232]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3e:	4937      	ldr	r1, [pc, #220]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	654b      	str	r3, [r1, #84]	; 0x54
 8007d44:	e001      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d56:	4b31      	ldr	r3, [pc, #196]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d62:	492e      	ldr	r1, [pc, #184]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d009      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007d74:	4b29      	ldr	r3, [pc, #164]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d82:	4926      	ldr	r1, [pc, #152]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d008      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d94:	4b21      	ldr	r3, [pc, #132]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007da0:	491e      	ldr	r1, [pc, #120]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00d      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007db2:	4b1a      	ldr	r3, [pc, #104]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	4a19      	ldr	r2, [pc, #100]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007db8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007dbc:	6113      	str	r3, [r2, #16]
 8007dbe:	4b17      	ldr	r3, [pc, #92]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007dc8:	4914      	ldr	r1, [pc, #80]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da08      	bge.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007dd6:	4b11      	ldr	r3, [pc, #68]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de2:	490e      	ldr	r1, [pc, #56]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d009      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007df4:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e02:	4906      	ldr	r1, [pc, #24]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007e08:	7dbb      	ldrb	r3, [r7, #22]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e000      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	58024400 	.word	0x58024400

08007e20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007e24:	f7ff f860 	bl	8006ee8 <HAL_RCC_GetHCLKFreq>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	091b      	lsrs	r3, r3, #4
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	4904      	ldr	r1, [pc, #16]	; (8007e48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007e36:	5ccb      	ldrb	r3, [r1, r3]
 8007e38:	f003 031f 	and.w	r3, r3, #31
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	58024400 	.word	0x58024400
 8007e48:	0800ceb8 	.word	0x0800ceb8

08007e4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b089      	sub	sp, #36	; 0x24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e54:	4ba1      	ldr	r3, [pc, #644]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	f003 0303 	and.w	r3, r3, #3
 8007e5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007e5e:	4b9f      	ldr	r3, [pc, #636]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	0b1b      	lsrs	r3, r3, #12
 8007e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007e6a:	4b9c      	ldr	r3, [pc, #624]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6e:	091b      	lsrs	r3, r3, #4
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007e76:	4b99      	ldr	r3, [pc, #612]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7a:	08db      	lsrs	r3, r3, #3
 8007e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8111 	beq.w	80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	f000 8083 	beq.w	8007fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	f200 80a1 	bhi.w	8007fec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d056      	beq.n	8007f64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007eb6:	e099      	b.n	8007fec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eb8:	4b88      	ldr	r3, [pc, #544]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02d      	beq.n	8007f20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ec4:	4b85      	ldr	r3, [pc, #532]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	08db      	lsrs	r3, r3, #3
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	4a84      	ldr	r2, [pc, #528]	; (80080e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eee:	4b7b      	ldr	r3, [pc, #492]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f02:	eddf 5a78 	vldr	s11, [pc, #480]	; 80080e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f1e:	e087      	b.n	8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80080e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f32:	4b6a      	ldr	r3, [pc, #424]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f46:	eddf 5a67 	vldr	s11, [pc, #412]	; 80080e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f62:	e065      	b.n	8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80080ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f76:	4b59      	ldr	r3, [pc, #356]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7e:	ee07 3a90 	vmov	s15, r3
 8007f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80080e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fa6:	e043      	b.n	8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fba:	4b48      	ldr	r3, [pc, #288]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80080e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fea:	e021      	b.n	8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80080ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffe:	4b37      	ldr	r3, [pc, #220]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008012:	eddf 5a34 	vldr	s11, [pc, #208]	; 80080e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800801a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800802e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008030:	4b2a      	ldr	r3, [pc, #168]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	0a5b      	lsrs	r3, r3, #9
 8008036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800804a:	edd7 6a07 	vldr	s13, [r7, #28]
 800804e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008056:	ee17 2a90 	vmov	r2, s15
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800805e:	4b1f      	ldr	r3, [pc, #124]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	0c1b      	lsrs	r3, r3, #16
 8008064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008068:	ee07 3a90 	vmov	s15, r3
 800806c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008078:	edd7 6a07 	vldr	s13, [r7, #28]
 800807c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008084:	ee17 2a90 	vmov	r2, s15
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800808c:	4b13      	ldr	r3, [pc, #76]	; (80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008090:	0e1b      	lsrs	r3, r3, #24
 8008092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b2:	ee17 2a90 	vmov	r2, s15
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80080ba:	e008      	b.n	80080ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	609a      	str	r2, [r3, #8]
}
 80080ce:	bf00      	nop
 80080d0:	3724      	adds	r7, #36	; 0x24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	58024400 	.word	0x58024400
 80080e0:	03d09000 	.word	0x03d09000
 80080e4:	46000000 	.word	0x46000000
 80080e8:	4c742400 	.word	0x4c742400
 80080ec:	4a742400 	.word	0x4a742400
 80080f0:	4af42400 	.word	0x4af42400

080080f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b089      	sub	sp, #36	; 0x24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080fc:	4ba1      	ldr	r3, [pc, #644]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008100:	f003 0303 	and.w	r3, r3, #3
 8008104:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008106:	4b9f      	ldr	r3, [pc, #636]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810a:	0d1b      	lsrs	r3, r3, #20
 800810c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008110:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008112:	4b9c      	ldr	r3, [pc, #624]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008116:	0a1b      	lsrs	r3, r3, #8
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800811e:	4b99      	ldr	r3, [pc, #612]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008122:	08db      	lsrs	r3, r3, #3
 8008124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	fb02 f303 	mul.w	r3, r2, r3
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008136:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 8111 	beq.w	8008364 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	2b02      	cmp	r3, #2
 8008146:	f000 8083 	beq.w	8008250 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b02      	cmp	r3, #2
 800814e:	f200 80a1 	bhi.w	8008294 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d056      	beq.n	800820c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800815e:	e099      	b.n	8008294 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008160:	4b88      	ldr	r3, [pc, #544]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b00      	cmp	r3, #0
 800816a:	d02d      	beq.n	80081c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800816c:	4b85      	ldr	r3, [pc, #532]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	08db      	lsrs	r3, r3, #3
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	4a84      	ldr	r2, [pc, #528]	; (8008388 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
 800817c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	ee07 3a90 	vmov	s15, r3
 8008184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008196:	4b7b      	ldr	r3, [pc, #492]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800838c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80081c6:	e087      	b.n	80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008390 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80081d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081da:	4b6a      	ldr	r3, [pc, #424]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800838c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800820a:	e065      	b.n	80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800821a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821e:	4b59      	ldr	r3, [pc, #356]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008232:	eddf 5a56 	vldr	s11, [pc, #344]	; 800838c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800823a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800824e:	e043      	b.n	80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800825e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008262:	4b48      	ldr	r3, [pc, #288]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008272:	ed97 6a03 	vldr	s12, [r7, #12]
 8008276:	eddf 5a45 	vldr	s11, [pc, #276]	; 800838c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800827a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800827e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800828e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008292:	e021      	b.n	80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a6:	4b37      	ldr	r3, [pc, #220]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ae:	ee07 3a90 	vmov	s15, r3
 80082b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800838c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80082d8:	4b2a      	ldr	r3, [pc, #168]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082dc:	0a5b      	lsrs	r3, r3, #9
 80082de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80082f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082fe:	ee17 2a90 	vmov	r2, s15
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008306:	4b1f      	ldr	r3, [pc, #124]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830a:	0c1b      	lsrs	r3, r3, #16
 800830c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008310:	ee07 3a90 	vmov	s15, r3
 8008314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800831c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008320:	edd7 6a07 	vldr	s13, [r7, #28]
 8008324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800832c:	ee17 2a90 	vmov	r2, s15
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008334:	4b13      	ldr	r3, [pc, #76]	; (8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008338:	0e1b      	lsrs	r3, r3, #24
 800833a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800834a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800834e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800835a:	ee17 2a90 	vmov	r2, s15
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008362:	e008      	b.n	8008376 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	609a      	str	r2, [r3, #8]
}
 8008376:	bf00      	nop
 8008378:	3724      	adds	r7, #36	; 0x24
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	58024400 	.word	0x58024400
 8008388:	03d09000 	.word	0x03d09000
 800838c:	46000000 	.word	0x46000000
 8008390:	4c742400 	.word	0x4c742400
 8008394:	4a742400 	.word	0x4a742400
 8008398:	4af42400 	.word	0x4af42400

0800839c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083aa:	4b53      	ldr	r3, [pc, #332]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80083ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ae:	f003 0303 	and.w	r3, r3, #3
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d101      	bne.n	80083ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e099      	b.n	80084ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80083ba:	4b4f      	ldr	r3, [pc, #316]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a4e      	ldr	r2, [pc, #312]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80083c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083c6:	f7f9 fed5 	bl	8002174 <HAL_GetTick>
 80083ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083cc:	e008      	b.n	80083e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80083ce:	f7f9 fed1 	bl	8002174 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d901      	bls.n	80083e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e086      	b.n	80084ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083e0:	4b45      	ldr	r3, [pc, #276]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1f0      	bne.n	80083ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80083ec:	4b42      	ldr	r3, [pc, #264]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	031b      	lsls	r3, r3, #12
 80083fa:	493f      	ldr	r1, [pc, #252]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	628b      	str	r3, [r1, #40]	; 0x28
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	3b01      	subs	r3, #1
 8008406:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	3b01      	subs	r3, #1
 8008410:	025b      	lsls	r3, r3, #9
 8008412:	b29b      	uxth	r3, r3
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	3b01      	subs	r3, #1
 800841c:	041b      	lsls	r3, r3, #16
 800841e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008422:	431a      	orrs	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	3b01      	subs	r3, #1
 800842a:	061b      	lsls	r3, r3, #24
 800842c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008430:	4931      	ldr	r1, [pc, #196]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 8008432:	4313      	orrs	r3, r2
 8008434:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008436:	4b30      	ldr	r3, [pc, #192]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	492d      	ldr	r1, [pc, #180]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 8008444:	4313      	orrs	r3, r2
 8008446:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008448:	4b2b      	ldr	r3, [pc, #172]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	f023 0220 	bic.w	r2, r3, #32
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	4928      	ldr	r1, [pc, #160]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 8008456:	4313      	orrs	r3, r2
 8008458:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800845a:	4b27      	ldr	r3, [pc, #156]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	4a26      	ldr	r2, [pc, #152]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 8008460:	f023 0310 	bic.w	r3, r3, #16
 8008464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008466:	4b24      	ldr	r3, [pc, #144]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 8008468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800846a:	4b24      	ldr	r3, [pc, #144]	; (80084fc <RCCEx_PLL2_Config+0x160>)
 800846c:	4013      	ands	r3, r2
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	69d2      	ldr	r2, [r2, #28]
 8008472:	00d2      	lsls	r2, r2, #3
 8008474:	4920      	ldr	r1, [pc, #128]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 8008476:	4313      	orrs	r3, r2
 8008478:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800847a:	4b1f      	ldr	r3, [pc, #124]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 800847c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847e:	4a1e      	ldr	r2, [pc, #120]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 8008480:	f043 0310 	orr.w	r3, r3, #16
 8008484:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d106      	bne.n	800849a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800848c:	4b1a      	ldr	r3, [pc, #104]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	4a19      	ldr	r2, [pc, #100]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 8008492:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008496:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008498:	e00f      	b.n	80084ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d106      	bne.n	80084ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80084a0:	4b15      	ldr	r3, [pc, #84]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	4a14      	ldr	r2, [pc, #80]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80084a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084ac:	e005      	b.n	80084ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80084ae:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	4a11      	ldr	r2, [pc, #68]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80084b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80084ba:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a0e      	ldr	r2, [pc, #56]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80084c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084c6:	f7f9 fe55 	bl	8002174 <HAL_GetTick>
 80084ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084cc:	e008      	b.n	80084e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80084ce:	f7f9 fe51 	bl	8002174 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d901      	bls.n	80084e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e006      	b.n	80084ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084e0:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <RCCEx_PLL2_Config+0x15c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0f0      	beq.n	80084ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	58024400 	.word	0x58024400
 80084fc:	ffff0007 	.word	0xffff0007

08008500 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800850e:	4b53      	ldr	r3, [pc, #332]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	2b03      	cmp	r3, #3
 8008518:	d101      	bne.n	800851e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e099      	b.n	8008652 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800851e:	4b4f      	ldr	r3, [pc, #316]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a4e      	ldr	r2, [pc, #312]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800852a:	f7f9 fe23 	bl	8002174 <HAL_GetTick>
 800852e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008530:	e008      	b.n	8008544 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008532:	f7f9 fe1f 	bl	8002174 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	2b02      	cmp	r3, #2
 800853e:	d901      	bls.n	8008544 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e086      	b.n	8008652 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008544:	4b45      	ldr	r3, [pc, #276]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1f0      	bne.n	8008532 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008550:	4b42      	ldr	r3, [pc, #264]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	051b      	lsls	r3, r3, #20
 800855e:	493f      	ldr	r1, [pc, #252]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008560:	4313      	orrs	r3, r2
 8008562:	628b      	str	r3, [r1, #40]	; 0x28
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	3b01      	subs	r3, #1
 800856a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	3b01      	subs	r3, #1
 8008574:	025b      	lsls	r3, r3, #9
 8008576:	b29b      	uxth	r3, r3
 8008578:	431a      	orrs	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	3b01      	subs	r3, #1
 8008580:	041b      	lsls	r3, r3, #16
 8008582:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	3b01      	subs	r3, #1
 800858e:	061b      	lsls	r3, r3, #24
 8008590:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008594:	4931      	ldr	r1, [pc, #196]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008596:	4313      	orrs	r3, r2
 8008598:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800859a:	4b30      	ldr	r3, [pc, #192]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	492d      	ldr	r1, [pc, #180]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085a8:	4313      	orrs	r3, r2
 80085aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085ac:	4b2b      	ldr	r3, [pc, #172]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	4928      	ldr	r1, [pc, #160]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80085be:	4b27      	ldr	r3, [pc, #156]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c2:	4a26      	ldr	r2, [pc, #152]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80085ca:	4b24      	ldr	r3, [pc, #144]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ce:	4b24      	ldr	r3, [pc, #144]	; (8008660 <RCCEx_PLL3_Config+0x160>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	69d2      	ldr	r2, [r2, #28]
 80085d6:	00d2      	lsls	r2, r2, #3
 80085d8:	4920      	ldr	r1, [pc, #128]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80085de:	4b1f      	ldr	r3, [pc, #124]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e2:	4a1e      	ldr	r2, [pc, #120]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d106      	bne.n	80085fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80085f0:	4b1a      	ldr	r3, [pc, #104]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	4a19      	ldr	r2, [pc, #100]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 80085f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085fc:	e00f      	b.n	800861e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d106      	bne.n	8008612 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008604:	4b15      	ldr	r3, [pc, #84]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	4a14      	ldr	r2, [pc, #80]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 800860a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800860e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008610:	e005      	b.n	800861e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008612:	4b12      	ldr	r3, [pc, #72]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	4a11      	ldr	r2, [pc, #68]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800861c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800861e:	4b0f      	ldr	r3, [pc, #60]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a0e      	ldr	r2, [pc, #56]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800862a:	f7f9 fda3 	bl	8002174 <HAL_GetTick>
 800862e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008630:	e008      	b.n	8008644 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008632:	f7f9 fd9f 	bl	8002174 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b02      	cmp	r3, #2
 800863e:	d901      	bls.n	8008644 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e006      	b.n	8008652 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008644:	4b05      	ldr	r3, [pc, #20]	; (800865c <RCCEx_PLL3_Config+0x15c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0f0      	beq.n	8008632 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	58024400 	.word	0x58024400
 8008660:	ffff0007 	.word	0xffff0007

08008664 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d067      	beq.n	8008746 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d106      	bne.n	8008690 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7f9 f9a6 	bl	80019dc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	22ca      	movs	r2, #202	; 0xca
 800869e:	625a      	str	r2, [r3, #36]	; 0x24
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2253      	movs	r2, #83	; 0x53
 80086a6:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fbd1 	bl	8008e50 <RTC_EnterInitMode>
 80086ae:	4603      	mov	r3, r0
 80086b0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d13b      	bne.n	8008730 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6899      	ldr	r1, [r3, #8]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b23      	ldr	r3, [pc, #140]	; (8008750 <HAL_RTC_Init+0xec>)
 80086c4:	400b      	ands	r3, r1
 80086c6:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6899      	ldr	r1, [r3, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	0419      	lsls	r1, r3, #16
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fbd9 	bl	8008eb0 <RTC_ExitInitMode>
 80086fe:	4603      	mov	r3, r0
 8008700:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d113      	bne.n	8008730 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f022 0203 	bic.w	r2, r2, #3
 8008716:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	69da      	ldr	r2, [r3, #28]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	431a      	orrs	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	22ff      	movs	r2, #255	; 0xff
 8008736:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d103      	bne.n	8008746 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	ff8fffbf 	.word	0xff8fffbf

08008754 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008754:	b590      	push	{r4, r7, lr}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d101      	bne.n	800876e <HAL_RTC_SetTime+0x1a>
 800876a:	2302      	movs	r3, #2
 800876c:	e089      	b.n	8008882 <HAL_RTC_SetTime+0x12e>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2202      	movs	r2, #2
 800877a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	22ca      	movs	r2, #202	; 0xca
 8008784:	625a      	str	r2, [r3, #36]	; 0x24
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2253      	movs	r2, #83	; 0x53
 800878c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 fb5e 	bl	8008e50 <RTC_EnterInitMode>
 8008794:	4603      	mov	r3, r0
 8008796:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008798:	7cfb      	ldrb	r3, [r7, #19]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d161      	bne.n	8008862 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d126      	bne.n	80087f2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d102      	bne.n	80087b8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2200      	movs	r2, #0
 80087b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fbb5 	bl	8008f2c <RTC_ByteToBcd2>
 80087c2:	4603      	mov	r3, r0
 80087c4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fbae 	bl	8008f2c <RTC_ByteToBcd2>
 80087d0:	4603      	mov	r3, r0
 80087d2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087d4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	789b      	ldrb	r3, [r3, #2]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fba6 	bl	8008f2c <RTC_ByteToBcd2>
 80087e0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087e2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	78db      	ldrb	r3, [r3, #3]
 80087ea:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087ec:	4313      	orrs	r3, r2
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e018      	b.n	8008824 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2200      	movs	r2, #0
 8008804:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	785b      	ldrb	r3, [r3, #1]
 8008810:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008812:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008818:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	78db      	ldrb	r3, [r3, #3]
 800881e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	6979      	ldr	r1, [r7, #20]
 800882a:	4b18      	ldr	r3, [pc, #96]	; (800888c <HAL_RTC_SetTime+0x138>)
 800882c:	400b      	ands	r3, r1
 800882e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689a      	ldr	r2, [r3, #8]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800883e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6899      	ldr	r1, [r3, #8]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	431a      	orrs	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 fb29 	bl	8008eb0 <RTC_ExitInitMode>
 800885e:	4603      	mov	r3, r0
 8008860:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	22ff      	movs	r2, #255	; 0xff
 8008868:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800886a:	7cfb      	ldrb	r3, [r7, #19]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d103      	bne.n	8008878 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008880:	7cfb      	ldrb	r3, [r7, #19]
}
 8008882:	4618      	mov	r0, r3
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	bd90      	pop	{r4, r7, pc}
 800888a:	bf00      	nop
 800888c:	007f7f7f 	.word	0x007f7f7f

08008890 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	4b22      	ldr	r3, [pc, #136]	; (8008944 <HAL_RTC_GetTime+0xb4>)
 80088bc:	4013      	ands	r3, r2
 80088be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	0c1b      	lsrs	r3, r3, #16
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	0d9b      	lsrs	r3, r3, #22
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d11a      	bne.n	800893a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fb2f 	bl	8008f6c <RTC_Bcd2ToByte>
 800890e:	4603      	mov	r3, r0
 8008910:	461a      	mov	r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	785b      	ldrb	r3, [r3, #1]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fb26 	bl	8008f6c <RTC_Bcd2ToByte>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	789b      	ldrb	r3, [r3, #2]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fb1d 	bl	8008f6c <RTC_Bcd2ToByte>
 8008932:	4603      	mov	r3, r0
 8008934:	461a      	mov	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	007f7f7f 	.word	0x007f7f7f

08008948 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008948:	b590      	push	{r4, r7, lr}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d101      	bne.n	8008962 <HAL_RTC_SetDate+0x1a>
 800895e:	2302      	movs	r3, #2
 8008960:	e073      	b.n	8008a4a <HAL_RTC_SetDate+0x102>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2202      	movs	r2, #2
 800896e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10e      	bne.n	8008996 <HAL_RTC_SetDate+0x4e>
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	f003 0310 	and.w	r3, r3, #16
 8008980:	2b00      	cmp	r3, #0
 8008982:	d008      	beq.n	8008996 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	f023 0310 	bic.w	r3, r3, #16
 800898c:	b2db      	uxtb	r3, r3
 800898e:	330a      	adds	r3, #10
 8008990:	b2da      	uxtb	r2, r3
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d11c      	bne.n	80089d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	78db      	ldrb	r3, [r3, #3]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 fac3 	bl	8008f2c <RTC_ByteToBcd2>
 80089a6:	4603      	mov	r3, r0
 80089a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	785b      	ldrb	r3, [r3, #1]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 fabc 	bl	8008f2c <RTC_ByteToBcd2>
 80089b4:	4603      	mov	r3, r0
 80089b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	789b      	ldrb	r3, [r3, #2]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fab4 	bl	8008f2c <RTC_ByteToBcd2>
 80089c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80089c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089d0:	4313      	orrs	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	e00e      	b.n	80089f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	78db      	ldrb	r3, [r3, #3]
 80089da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	785b      	ldrb	r3, [r3, #1]
 80089e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80089e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80089e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80089f0:	4313      	orrs	r3, r2
 80089f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	22ca      	movs	r2, #202	; 0xca
 80089fa:	625a      	str	r2, [r3, #36]	; 0x24
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2253      	movs	r2, #83	; 0x53
 8008a02:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fa23 	bl	8008e50 <RTC_EnterInitMode>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008a0e:	7cfb      	ldrb	r3, [r7, #19]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10a      	bne.n	8008a2a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	6979      	ldr	r1, [r7, #20]
 8008a1a:	4b0e      	ldr	r3, [pc, #56]	; (8008a54 <HAL_RTC_SetDate+0x10c>)
 8008a1c:	400b      	ands	r3, r1
 8008a1e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 fa45 	bl	8008eb0 <RTC_ExitInitMode>
 8008a26:	4603      	mov	r3, r0
 8008a28:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	22ff      	movs	r2, #255	; 0xff
 8008a30:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008a32:	7cfb      	ldrb	r3, [r7, #19]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d103      	bne.n	8008a40 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008a48:	7cfb      	ldrb	r3, [r7, #19]


}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd90      	pop	{r4, r7, pc}
 8008a52:	bf00      	nop
 8008a54:	00ffff3f 	.word	0x00ffff3f

08008a58 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	4b21      	ldr	r3, [pc, #132]	; (8008af0 <HAL_RTC_GetDate+0x98>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	0c1b      	lsrs	r3, r3, #16
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	0a1b      	lsrs	r3, r3, #8
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 031f 	and.w	r3, r3, #31
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	0b5b      	lsrs	r3, r3, #13
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d11a      	bne.n	8008ae4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	78db      	ldrb	r3, [r3, #3]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fa5a 	bl	8008f6c <RTC_Bcd2ToByte>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	461a      	mov	r2, r3
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fa51 	bl	8008f6c <RTC_Bcd2ToByte>
 8008aca:	4603      	mov	r3, r0
 8008acc:	461a      	mov	r2, r3
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	789b      	ldrb	r3, [r3, #2]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fa48 	bl	8008f6c <RTC_Bcd2ToByte>
 8008adc:	4603      	mov	r3, r0
 8008ade:	461a      	mov	r2, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	00ffff3f 	.word	0x00ffff3f

08008af4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008af4:	b590      	push	{r4, r7, lr}
 8008af6:	b089      	sub	sp, #36	; 0x24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d101      	bne.n	8008b0e <HAL_RTC_SetAlarm_IT+0x1a>
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	e123      	b.n	8008d56 <HAL_RTC_SetAlarm_IT+0x262>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d137      	bne.n	8008b94 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2200      	movs	r2, #0
 8008b36:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 f9f5 	bl	8008f2c <RTC_ByteToBcd2>
 8008b42:	4603      	mov	r3, r0
 8008b44:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	785b      	ldrb	r3, [r3, #1]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f9ee 	bl	8008f2c <RTC_ByteToBcd2>
 8008b50:	4603      	mov	r3, r0
 8008b52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b54:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	789b      	ldrb	r3, [r3, #2]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f9e6 	bl	8008f2c <RTC_ByteToBcd2>
 8008b60:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b62:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	78db      	ldrb	r3, [r3, #3]
 8008b6a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008b6c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 f9d8 	bl	8008f2c <RTC_ByteToBcd2>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008b80:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008b88:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	61fb      	str	r3, [r7, #28]
 8008b92:	e023      	b.n	8008bdc <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d102      	bne.n	8008ba8 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008bb4:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008bba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	78db      	ldrb	r3, [r3, #3]
 8008bc0:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008bc2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bca:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008bcc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008bd2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	22ca      	movs	r2, #202	; 0xca
 8008bee:	625a      	str	r2, [r3, #36]	; 0x24
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2253      	movs	r2, #83	; 0x53
 8008bf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c00:	d14a      	bne.n	8008c98 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c10:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008c22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008c24:	f7f9 faa6 	bl	8002174 <HAL_GetTick>
 8008c28:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008c2a:	e015      	b.n	8008c58 <HAL_RTC_SetAlarm_IT+0x164>
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c2c:	f7f9 faa2 	bl	8002174 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c3a:	d90d      	bls.n	8008c58 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	22ff      	movs	r2, #255	; 0xff
 8008c42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2203      	movs	r2, #3
 8008c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e07e      	b.n	8008d56 <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0e2      	beq.n	8008c2c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69fa      	ldr	r2, [r7, #28]
 8008c6c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c84:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c94:	609a      	str	r2, [r3, #8]
 8008c96:	e049      	b.n	8008d2c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689a      	ldr	r2, [r3, #8]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ca6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008cb8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008cba:	f7f9 fa5b 	bl	8002174 <HAL_GetTick>
 8008cbe:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008cc0:	e015      	b.n	8008cee <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cc2:	f7f9 fa57 	bl	8002174 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cd0:	d90d      	bls.n	8008cee <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	22ff      	movs	r2, #255	; 0xff
 8008cd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2203      	movs	r2, #3
 8008cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e033      	b.n	8008d56 <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0e2      	beq.n	8008cc2 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d1a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689a      	ldr	r2, [r3, #8]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d2a:	609a      	str	r2, [r3, #8]
#if !defined(DUAL_CORE)
  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d3a:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	22ff      	movs	r2, #255	; 0xff
 8008d42:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3724      	adds	r7, #36	; 0x24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd90      	pop	{r4, r7, pc}
	...

08008d60 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
#if defined(DUAL_CORE)
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8008d68:	f7f9 fb64 	bl	8002434 <HAL_GetCurrentCPUID>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d104      	bne.n	8008d7c <HAL_RTC_AlarmIRQHandler+0x1c>
  {
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008d72:	4b22      	ldr	r3, [pc, #136]	; (8008dfc <HAL_RTC_AlarmIRQHandler+0x9c>)
 8008d74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d78:	609a      	str	r2, [r3, #8]
 8008d7a:	e003      	b.n	8008d84 <HAL_RTC_AlarmIRQHandler+0x24>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
 8008d7c:	4b20      	ldr	r3, [pc, #128]	; (8008e00 <HAL_RTC_AlarmIRQHandler+0xa0>)
 8008d7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d82:	609a      	str	r2, [r3, #8]
  }
#endif /* RTC_MISR_ALRBMF */

#if defined(RTC_ISR_ALRAF)
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d012      	beq.n	8008db8 <HAL_RTC_AlarmIRQHandler+0x58>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00b      	beq.n	8008db8 <HAL_RTC_AlarmIRQHandler+0x58>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008db0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7f8 fcfe 	bl	80017b4 <HAL_RTC_AlarmAEventCallback>
  }
#endif /* RTC_ISR_ALRAF */

#if defined(RTC_ISR_ALRBF)
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d012      	beq.n	8008dec <HAL_RTC_AlarmIRQHandler+0x8c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00b      	beq.n	8008dec <HAL_RTC_AlarmIRQHandler+0x8c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008de4:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f8da 	bl	8008fa0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	58000080 	.word	0x58000080
 8008e00:	580000c0 	.word	0x580000c0

08008e04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e1a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008e1c:	f7f9 f9aa 	bl	8002174 <HAL_GetTick>
 8008e20:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e22:	e009      	b.n	8008e38 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e24:	f7f9 f9a6 	bl	8002174 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e32:	d901      	bls.n	8008e38 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e007      	b.n	8008e48 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0ee      	beq.n	8008e24 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d11d      	bne.n	8008ea6 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e72:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008e74:	f7f9 f97e 	bl	8002174 <HAL_GetTick>
 8008e78:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008e7a:	e00d      	b.n	8008e98 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008e7c:	f7f9 f97a 	bl	8002174 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e8a:	d905      	bls.n	8008e98 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2203      	movs	r2, #3
 8008e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0ea      	beq.n	8008e7c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008ebc:	4b1a      	ldr	r3, [pc, #104]	; (8008f28 <RTC_ExitInitMode+0x78>)
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	4a19      	ldr	r2, [pc, #100]	; (8008f28 <RTC_ExitInitMode+0x78>)
 8008ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec6:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008ec8:	4b17      	ldr	r3, [pc, #92]	; (8008f28 <RTC_ExitInitMode+0x78>)
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10c      	bne.n	8008eee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff ff95 	bl	8008e04 <HAL_RTC_WaitForSynchro>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01e      	beq.n	8008f1e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2203      	movs	r2, #3
 8008ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	73fb      	strb	r3, [r7, #15]
 8008eec:	e017      	b.n	8008f1e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <RTC_ExitInitMode+0x78>)
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	4a0d      	ldr	r2, [pc, #52]	; (8008f28 <RTC_ExitInitMode+0x78>)
 8008ef4:	f023 0320 	bic.w	r3, r3, #32
 8008ef8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff ff82 	bl	8008e04 <HAL_RTC_WaitForSynchro>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d005      	beq.n	8008f12 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2203      	movs	r2, #3
 8008f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f12:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <RTC_ExitInitMode+0x78>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	4a04      	ldr	r2, [pc, #16]	; (8008f28 <RTC_ExitInitMode+0x78>)
 8008f18:	f043 0320 	orr.w	r3, r3, #32
 8008f1c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	58004000 	.word	0x58004000

08008f2c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8008f3e:	e005      	b.n	8008f4c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008f46:	7afb      	ldrb	r3, [r7, #11]
 8008f48:	3b0a      	subs	r3, #10
 8008f4a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	2b09      	cmp	r3, #9
 8008f50:	d8f6      	bhi.n	8008f40 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	011b      	lsls	r3, r3, #4
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	7afb      	ldrb	r3, [r7, #11]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	b2db      	uxtb	r3, r3
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008f76:	79fb      	ldrb	r3, [r7, #7]
 8008f78:	091b      	lsrs	r3, r3, #4
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	0092      	lsls	r2, r2, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008f86:	79fb      	ldrb	r3, [r7, #7]
 8008f88:	f003 030f 	and.w	r3, r3, #15
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	4413      	add	r3, r2
 8008f92:	b2db      	uxtb	r3, r3
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e0eb      	b.n	80091a2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a75      	ldr	r2, [pc, #468]	; (80091ac <HAL_SPI_Init+0x1f8>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d00f      	beq.n	8008ffa <HAL_SPI_Init+0x46>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a74      	ldr	r2, [pc, #464]	; (80091b0 <HAL_SPI_Init+0x1fc>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00a      	beq.n	8008ffa <HAL_SPI_Init+0x46>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a72      	ldr	r2, [pc, #456]	; (80091b4 <HAL_SPI_Init+0x200>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d005      	beq.n	8008ffa <HAL_SPI_Init+0x46>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	2b0f      	cmp	r3, #15
 8008ff4:	d901      	bls.n	8008ffa <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e0d3      	b.n	80091a2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 ff62 	bl	8009ec4 <SPI_GetPacketSize>
 8009000:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a69      	ldr	r2, [pc, #420]	; (80091ac <HAL_SPI_Init+0x1f8>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00c      	beq.n	8009026 <HAL_SPI_Init+0x72>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a67      	ldr	r2, [pc, #412]	; (80091b0 <HAL_SPI_Init+0x1fc>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d007      	beq.n	8009026 <HAL_SPI_Init+0x72>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a66      	ldr	r2, [pc, #408]	; (80091b4 <HAL_SPI_Init+0x200>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d002      	beq.n	8009026 <HAL_SPI_Init+0x72>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2b08      	cmp	r3, #8
 8009024:	d811      	bhi.n	800904a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800902a:	4a60      	ldr	r2, [pc, #384]	; (80091ac <HAL_SPI_Init+0x1f8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d009      	beq.n	8009044 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a5e      	ldr	r2, [pc, #376]	; (80091b0 <HAL_SPI_Init+0x1fc>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d004      	beq.n	8009044 <HAL_SPI_Init+0x90>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a5d      	ldr	r2, [pc, #372]	; (80091b4 <HAL_SPI_Init+0x200>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d104      	bne.n	800904e <HAL_SPI_Init+0x9a>
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b10      	cmp	r3, #16
 8009048:	d901      	bls.n	800904e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e0a9      	b.n	80091a2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d106      	bne.n	8009068 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7f8 fcf2 	bl	8001a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0201 	bic.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009088:	d119      	bne.n	80090be <HAL_SPI_Init+0x10a>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009092:	d103      	bne.n	800909c <HAL_SPI_Init+0xe8>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	2b00      	cmp	r3, #0
 800909a:	d008      	beq.n	80090ae <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10c      	bne.n	80090be <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090ac:	d107      	bne.n	80090be <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	69da      	ldr	r2, [r3, #28]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c6:	431a      	orrs	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d0:	ea42 0103 	orr.w	r1, r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ee:	431a      	orrs	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	431a      	orrs	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	431a      	orrs	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	431a      	orrs	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009112:	431a      	orrs	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	431a      	orrs	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800911e:	ea42 0103 	orr.w	r1, r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d113      	bne.n	800915e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009148:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800915c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0201 	bic.w	r2, r2, #1
 800916c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	40013000 	.word	0x40013000
 80091b0:	40003800 	.word	0x40003800
 80091b4:	40003c00 	.word	0x40003c00

080091b8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	; 0x28
 80091bc:	af02      	add	r7, sp, #8
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	603b      	str	r3, [r7, #0]
 80091c4:	4613      	mov	r3, r2
 80091c6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3320      	adds	r3, #32
 80091ce:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d101      	bne.n	80091e2 <HAL_SPI_Transmit+0x2a>
 80091de:	2302      	movs	r3, #2
 80091e0:	e1d7      	b.n	8009592 <HAL_SPI_Transmit+0x3da>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091ea:	f7f8 ffc3 	bl	8002174 <HAL_GetTick>
 80091ee:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d007      	beq.n	800920c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80091fc:	2302      	movs	r3, #2
 80091fe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009208:	7efb      	ldrb	r3, [r7, #27]
 800920a:	e1c2      	b.n	8009592 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <HAL_SPI_Transmit+0x60>
 8009212:	88fb      	ldrh	r3, [r7, #6]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d107      	bne.n	8009228 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009224:	7efb      	ldrb	r3, [r7, #27]
 8009226:	e1b4      	b.n	8009592 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2203      	movs	r2, #3
 800922c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	88fa      	ldrh	r2, [r7, #6]
 8009242:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	88fa      	ldrh	r2, [r7, #6]
 800924a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009278:	d107      	bne.n	800928a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009288:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	4b96      	ldr	r3, [pc, #600]	; (80094ec <HAL_SPI_Transmit+0x334>)
 8009292:	4013      	ands	r3, r2
 8009294:	88f9      	ldrh	r1, [r7, #6]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	6812      	ldr	r2, [r2, #0]
 800929a:	430b      	orrs	r3, r1
 800929c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f042 0201 	orr.w	r2, r2, #1
 80092ac:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092b6:	d107      	bne.n	80092c8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	2b0f      	cmp	r3, #15
 80092ce:	d947      	bls.n	8009360 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80092d0:	e03f      	b.n	8009352 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d114      	bne.n	800930a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6812      	ldr	r2, [r2, #0]
 80092ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f0:	1d1a      	adds	r2, r3, #4
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009308:	e023      	b.n	8009352 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800930a:	f7f8 ff33 	bl	8002174 <HAL_GetTick>
 800930e:	4602      	mov	r2, r0
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d803      	bhi.n	8009322 <HAL_SPI_Transmit+0x16a>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009320:	d102      	bne.n	8009328 <HAL_SPI_Transmit+0x170>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d114      	bne.n	8009352 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 fcfd 	bl	8009d28 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800933c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e11f      	b.n	8009592 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009358:	b29b      	uxth	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1b9      	bne.n	80092d2 <HAL_SPI_Transmit+0x11a>
 800935e:	e0f2      	b.n	8009546 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b07      	cmp	r3, #7
 8009366:	f240 80e7 	bls.w	8009538 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800936a:	e05d      	b.n	8009428 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b02      	cmp	r3, #2
 8009378:	d132      	bne.n	80093e0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b01      	cmp	r3, #1
 8009384:	d918      	bls.n	80093b8 <HAL_SPI_Transmit+0x200>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d014      	beq.n	80093b8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6812      	ldr	r2, [r2, #0]
 8009398:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939e:	1d1a      	adds	r2, r3, #4
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	3b02      	subs	r3, #2
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093b6:	e037      	b.n	8009428 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093bc:	881a      	ldrh	r2, [r3, #0]
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c6:	1c9a      	adds	r2, r3, #2
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	3b01      	subs	r3, #1
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093de:	e023      	b.n	8009428 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093e0:	f7f8 fec8 	bl	8002174 <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d803      	bhi.n	80093f8 <HAL_SPI_Transmit+0x240>
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f6:	d102      	bne.n	80093fe <HAL_SPI_Transmit+0x246>
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d114      	bne.n	8009428 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 fc92 	bl	8009d28 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009412:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e0b4      	b.n	8009592 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800942e:	b29b      	uxth	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d19b      	bne.n	800936c <HAL_SPI_Transmit+0x1b4>
 8009434:	e087      	b.n	8009546 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b02      	cmp	r3, #2
 8009442:	d155      	bne.n	80094f0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b03      	cmp	r3, #3
 800944e:	d918      	bls.n	8009482 <HAL_SPI_Transmit+0x2ca>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009454:	2b40      	cmp	r3, #64	; 0x40
 8009456:	d914      	bls.n	8009482 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6812      	ldr	r2, [r2, #0]
 8009462:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009468:	1d1a      	adds	r2, r3, #4
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b04      	subs	r3, #4
 8009478:	b29a      	uxth	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009480:	e05a      	b.n	8009538 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009488:	b29b      	uxth	r3, r3
 800948a:	2b01      	cmp	r3, #1
 800948c:	d917      	bls.n	80094be <HAL_SPI_Transmit+0x306>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009492:	2b00      	cmp	r3, #0
 8009494:	d013      	beq.n	80094be <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800949a:	881a      	ldrh	r2, [r3, #0]
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a4:	1c9a      	adds	r2, r3, #2
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3b02      	subs	r3, #2
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80094bc:	e03c      	b.n	8009538 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3320      	adds	r3, #32
 80094c8:	7812      	ldrb	r2, [r2, #0]
 80094ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80094e8:	e026      	b.n	8009538 <HAL_SPI_Transmit+0x380>
 80094ea:	bf00      	nop
 80094ec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094f0:	f7f8 fe40 	bl	8002174 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d803      	bhi.n	8009508 <HAL_SPI_Transmit+0x350>
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009506:	d102      	bne.n	800950e <HAL_SPI_Transmit+0x356>
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d114      	bne.n	8009538 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fc0a 	bl	8009d28 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e02c      	b.n	8009592 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800953e:	b29b      	uxth	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	f47f af78 	bne.w	8009436 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2200      	movs	r2, #0
 800954e:	2108      	movs	r1, #8
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 fc89 	bl	8009e68 <SPI_WaitOnFlagUntilTimeout>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d007      	beq.n	800956c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009562:	f043 0220 	orr.w	r2, r3, #32
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 fbdb 	bl	8009d28 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e000      	b.n	8009592 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009590:	7efb      	ldrb	r3, [r7, #27]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop

0800959c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	4613      	mov	r3, r2
 80095a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d101      	bne.n	80095bc <HAL_SPI_Transmit_DMA+0x20>
 80095b8:	2302      	movs	r3, #2
 80095ba:	e128      	b.n	800980e <HAL_SPI_Transmit_DMA+0x272>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d007      	beq.n	80095e0 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80095d0:	2302      	movs	r3, #2
 80095d2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	e116      	b.n	800980e <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d002      	beq.n	80095ec <HAL_SPI_Transmit_DMA+0x50>
 80095e6:	88fb      	ldrh	r3, [r7, #6]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d107      	bne.n	80095fc <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	e108      	b.n	800980e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2203      	movs	r2, #3
 8009600:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	88fa      	ldrh	r2, [r7, #6]
 8009616:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	88fa      	ldrh	r2, [r7, #6]
 800961e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800964c:	d107      	bne.n	800965e <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800965c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	2b0f      	cmp	r3, #15
 8009664:	d905      	bls.n	8009672 <HAL_SPI_Transmit_DMA+0xd6>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009670:	d10f      	bne.n	8009692 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009676:	2b07      	cmp	r3, #7
 8009678:	d913      	bls.n	80096a2 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009684:	d00d      	beq.n	80096a2 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800968a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800968c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009690:	d007      	beq.n	80096a2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	e0b5      	b.n	800980e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	2b07      	cmp	r3, #7
 80096a8:	d820      	bhi.n	80096ec <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096b4:	d109      	bne.n	80096ca <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096bc:	b29b      	uxth	r3, r3
 80096be:	3301      	adds	r3, #1
 80096c0:	105b      	asrs	r3, r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096d4:	d11e      	bne.n	8009714 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096dc:	b29b      	uxth	r3, r3
 80096de:	3303      	adds	r3, #3
 80096e0:	109b      	asrs	r3, r3, #2
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80096ea:	e013      	b.n	8009714 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	2b0f      	cmp	r3, #15
 80096f2:	d80f      	bhi.n	8009714 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096fe:	d109      	bne.n	8009714 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009706:	b29b      	uxth	r3, r3
 8009708:	3301      	adds	r3, #1
 800970a:	105b      	asrs	r3, r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009718:	4a3f      	ldr	r2, [pc, #252]	; (8009818 <HAL_SPI_Transmit_DMA+0x27c>)
 800971a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009720:	4a3e      	ldr	r2, [pc, #248]	; (800981c <HAL_SPI_Transmit_DMA+0x280>)
 8009722:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009728:	4a3d      	ldr	r2, [pc, #244]	; (8009820 <HAL_SPI_Transmit_DMA+0x284>)
 800972a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009730:	2200      	movs	r2, #0
 8009732:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689a      	ldr	r2, [r3, #8]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009742:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800974c:	4619      	mov	r1, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3320      	adds	r3, #32
 8009754:	461a      	mov	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800975c:	b29b      	uxth	r3, r3
 800975e:	f7f9 f9d9 	bl	8002b14 <HAL_DMA_Start_IT>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00f      	beq.n	8009788 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800976e:	f043 0210 	orr.w	r2, r3, #16
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	e042      	b.n	800980e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009792:	d108      	bne.n	80097a6 <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6859      	ldr	r1, [r3, #4]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	4b21      	ldr	r3, [pc, #132]	; (8009824 <HAL_SPI_Transmit_DMA+0x288>)
 80097a0:	400b      	ands	r3, r1
 80097a2:	6053      	str	r3, [r2, #4]
 80097a4:	e009      	b.n	80097ba <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	4b1d      	ldr	r3, [pc, #116]	; (8009824 <HAL_SPI_Transmit_DMA+0x288>)
 80097ae:	4013      	ands	r3, r2
 80097b0:	88f9      	ldrh	r1, [r7, #6]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	6812      	ldr	r2, [r2, #0]
 80097b6:	430b      	orrs	r3, r1
 80097b8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097c8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80097d8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0201 	orr.w	r2, r2, #1
 80097e8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097f2:	d107      	bne.n	8009804 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009802:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800980c:	7dfb      	ldrb	r3, [r7, #23]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	08009c93 	.word	0x08009c93
 800981c:	08009c4d 	.word	0x08009c4d
 8009820:	08009caf 	.word	0x08009caf
 8009824:	ffff0000 	.word	0xffff0000

08009828 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08a      	sub	sp, #40	; 0x28
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009840:	6a3a      	ldr	r2, [r7, #32]
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4013      	ands	r3, r2
 8009846:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009850:	2300      	movs	r3, #0
 8009852:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800985a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3330      	adds	r3, #48	; 0x30
 8009862:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986a:	2b00      	cmp	r3, #0
 800986c:	d113      	bne.n	8009896 <HAL_SPI_IRQHandler+0x6e>
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	f003 0320 	and.w	r3, r3, #32
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10e      	bne.n	8009896 <HAL_SPI_IRQHandler+0x6e>
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	f003 0304 	and.w	r3, r3, #4
 800987e:	2b00      	cmp	r3, #0
 8009880:	d009      	beq.n	8009896 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	4798      	blx	r3
    hspi->RxISR(hspi);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	4798      	blx	r3
    handled = 1UL;
 8009892:	2301      	movs	r3, #1
 8009894:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10f      	bne.n	80098c0 <HAL_SPI_IRQHandler+0x98>
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00a      	beq.n	80098c0 <HAL_SPI_IRQHandler+0x98>
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d105      	bne.n	80098c0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	4798      	blx	r3
    handled = 1UL;
 80098bc:	2301      	movs	r3, #1
 80098be:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	f003 0320 	and.w	r3, r3, #32
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10f      	bne.n	80098ea <HAL_SPI_IRQHandler+0xc2>
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	f003 0302 	and.w	r3, r3, #2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00a      	beq.n	80098ea <HAL_SPI_IRQHandler+0xc2>
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	f003 0304 	and.w	r3, r3, #4
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d105      	bne.n	80098ea <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	4798      	blx	r3
    handled = 1UL;
 80098e6:	2301      	movs	r3, #1
 80098e8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f040 816f 	bne.w	8009bd0 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	f003 0308 	and.w	r3, r3, #8
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 80a0 	beq.w	8009a3e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	699a      	ldr	r2, [r3, #24]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0208 	orr.w	r2, r2, #8
 800990c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699a      	ldr	r2, [r3, #24]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0210 	orr.w	r2, r2, #16
 800991c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	699a      	ldr	r2, [r3, #24]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800992c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	691a      	ldr	r2, [r3, #16]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f022 0208 	bic.w	r2, r2, #8
 800993c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00f      	beq.n	8009968 <HAL_SPI_IRQHandler+0x140>
 8009948:	7cfb      	ldrb	r3, [r7, #19]
 800994a:	2b04      	cmp	r3, #4
 800994c:	d004      	beq.n	8009958 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <HAL_SPI_IRQHandler+0x140>
 8009958:	7cfb      	ldrb	r3, [r7, #19]
 800995a:	2b03      	cmp	r3, #3
 800995c:	d059      	beq.n	8009a12 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d154      	bne.n	8009a12 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d13d      	bne.n	80099f2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8009976:	e036      	b.n	80099e6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	2b0f      	cmp	r3, #15
 800997e:	d90b      	bls.n	8009998 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009988:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800998a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009990:	1d1a      	adds	r2, r3, #4
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	665a      	str	r2, [r3, #100]	; 0x64
 8009996:	e01d      	b.n	80099d4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	2b07      	cmp	r3, #7
 800999e:	d90b      	bls.n	80099b8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	8812      	ldrh	r2, [r2, #0]
 80099a8:	b292      	uxth	r2, r2
 80099aa:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b0:	1c9a      	adds	r2, r3, #2
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	665a      	str	r2, [r3, #100]	; 0x64
 80099b6:	e00d      	b.n	80099d4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099c4:	7812      	ldrb	r2, [r2, #0]
 80099c6:	b2d2      	uxtb	r2, r2
 80099c8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099da:	b29b      	uxth	r3, r3
 80099dc:	3b01      	subs	r3, #1
 80099de:	b29a      	uxth	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1c2      	bne.n	8009978 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f998 	bl	8009d28 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f914 	bl	8009c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8009a10:	e0e3      	b.n	8009bda <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009a12:	7cfb      	ldrb	r3, [r7, #19]
 8009a14:	2b05      	cmp	r3, #5
 8009a16:	d103      	bne.n	8009a20 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f8f9 	bl	8009c10 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8009a1e:	e0d9      	b.n	8009bd4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009a20:	7cfb      	ldrb	r3, [r7, #19]
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d103      	bne.n	8009a2e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f8e8 	bl	8009bfc <HAL_SPI_RxCpltCallback>
    return;
 8009a2c:	e0d2      	b.n	8009bd4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009a2e:	7cfb      	ldrb	r3, [r7, #19]
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	f040 80cf 	bne.w	8009bd4 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f8d6 	bl	8009be8 <HAL_SPI_TxCpltCallback>
    return;
 8009a3c:	e0ca      	b.n	8009bd4 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00d      	beq.n	8009a64 <HAL_SPI_IRQHandler+0x23c>
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	f003 0308 	and.w	r3, r3, #8
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d008      	beq.n	8009a64 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a60:	619a      	str	r2, [r3, #24]

    return;
 8009a62:	e0ba      	b.n	8009bda <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 80b5 	beq.w	8009bda <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00f      	beq.n	8009a9a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a80:	f043 0204 	orr.w	r2, r3, #4
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a98:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00f      	beq.n	8009ac4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aaa:	f043 0201 	orr.w	r2, r3, #1
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	699a      	ldr	r2, [r3, #24]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ac2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00f      	beq.n	8009aee <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ad4:	f043 0208 	orr.w	r2, r3, #8
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	699a      	ldr	r2, [r3, #24]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009aec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	f003 0320 	and.w	r3, r3, #32
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00f      	beq.n	8009b18 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009afe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699a      	ldr	r2, [r3, #24]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f042 0220 	orr.w	r2, r2, #32
 8009b16:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d05a      	beq.n	8009bd8 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f022 0201 	bic.w	r2, r2, #1
 8009b30:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6919      	ldr	r1, [r3, #16]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	4b28      	ldr	r3, [pc, #160]	; (8009be0 <HAL_SPI_IRQHandler+0x3b8>)
 8009b3e:	400b      	ands	r3, r1
 8009b40:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b4c:	d138      	bne.n	8009bc0 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689a      	ldr	r2, [r3, #8]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009b5c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d013      	beq.n	8009b8e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b6a:	4a1e      	ldr	r2, [pc, #120]	; (8009be4 <HAL_SPI_IRQHandler+0x3bc>)
 8009b6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f9 fd56 	bl	8003624 <HAL_DMA_Abort_IT>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d020      	beq.n	8009bd8 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b9a:	4a12      	ldr	r2, [pc, #72]	; (8009be4 <HAL_SPI_IRQHandler+0x3bc>)
 8009b9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7f9 fd3e 	bl	8003624 <HAL_DMA_Abort_IT>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d014      	beq.n	8009bd8 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009bbe:	e00b      	b.n	8009bd8 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f835 	bl	8009c38 <HAL_SPI_ErrorCallback>
    return;
 8009bce:	e003      	b.n	8009bd8 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009bd0:	bf00      	nop
 8009bd2:	e002      	b.n	8009bda <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009bd4:	bf00      	nop
 8009bd6:	e000      	b.n	8009bda <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009bd8:	bf00      	nop
  }
}
 8009bda:	3728      	adds	r7, #40	; 0x28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	fffffc94 	.word	0xfffffc94
 8009be4:	08009cf5 	.word	0x08009cf5

08009be8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c58:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b07      	cmp	r3, #7
 8009c64:	d011      	beq.n	8009c8a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c70:	d103      	bne.n	8009c7a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f7ff ffb8 	bl	8009be8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009c78:	e007      	b.n	8009c8a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	691a      	ldr	r2, [r3, #16]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f042 0208 	orr.w	r2, r2, #8
 8009c88:	611a      	str	r2, [r3, #16]
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7ff ffbf 	bl	8009c24 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ca6:	bf00      	nop
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cba:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7fa fe1f 	bl	8004900 <HAL_DMA_GetError>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d011      	beq.n	8009cec <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 f82d 	bl	8009d28 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cd4:	f043 0210 	orr.w	r2, r3, #16
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f7ff ffa6 	bl	8009c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009cec:	bf00      	nop
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f7ff ff8c 	bl	8009c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d20:	bf00      	nop
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	699a      	ldr	r2, [r3, #24]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f042 0208 	orr.w	r2, r2, #8
 8009d46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699a      	ldr	r2, [r3, #24]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f042 0210 	orr.w	r2, r2, #16
 8009d56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f022 0201 	bic.w	r2, r2, #1
 8009d66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6919      	ldr	r1, [r3, #16]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	4b3c      	ldr	r3, [pc, #240]	; (8009e64 <SPI_CloseTransfer+0x13c>)
 8009d74:	400b      	ands	r3, r1
 8009d76:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	689a      	ldr	r2, [r3, #8]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009d86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b04      	cmp	r3, #4
 8009d92:	d014      	beq.n	8009dbe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f003 0320 	and.w	r3, r3, #32
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00f      	beq.n	8009dbe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009da4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	699a      	ldr	r2, [r3, #24]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f042 0220 	orr.w	r2, r2, #32
 8009dbc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d014      	beq.n	8009df4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00f      	beq.n	8009df4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dda:	f043 0204 	orr.w	r2, r3, #4
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	699a      	ldr	r2, [r3, #24]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009df2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00f      	beq.n	8009e1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e04:	f043 0201 	orr.w	r2, r3, #1
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	699a      	ldr	r2, [r3, #24]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00f      	beq.n	8009e48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e2e:	f043 0208 	orr.w	r2, r3, #8
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	699a      	ldr	r2, [r3, #24]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009e58:	bf00      	nop
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	fffffc90 	.word	0xfffffc90

08009e68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	603b      	str	r3, [r7, #0]
 8009e74:	4613      	mov	r3, r2
 8009e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e78:	e010      	b.n	8009e9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e7a:	f7f8 f97b 	bl	8002174 <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	69ba      	ldr	r2, [r7, #24]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d803      	bhi.n	8009e92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e90:	d102      	bne.n	8009e98 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d101      	bne.n	8009e9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	e00f      	b.n	8009ebc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695a      	ldr	r2, [r3, #20]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	bf0c      	ite	eq
 8009eac:	2301      	moveq	r3, #1
 8009eae:	2300      	movne	r3, #0
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d0df      	beq.n	8009e7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed0:	095b      	lsrs	r3, r3, #5
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	3301      	adds	r3, #1
 8009edc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	3307      	adds	r3, #7
 8009ee2:	08db      	lsrs	r3, r3, #3
 8009ee4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	fb02 f303 	mul.w	r3, r2, r3
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e049      	b.n	8009fa0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d106      	bne.n	8009f26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7f7 fe57 	bl	8001bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2202      	movs	r2, #2
 8009f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3304      	adds	r3, #4
 8009f36:	4619      	mov	r1, r3
 8009f38:	4610      	mov	r0, r2
 8009f3a:	f000 fc0b 	bl	800a754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d001      	beq.n	8009fc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e047      	b.n	800a050 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a23      	ldr	r2, [pc, #140]	; (800a05c <HAL_TIM_Base_Start+0xb4>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d01d      	beq.n	800a00e <HAL_TIM_Base_Start+0x66>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fda:	d018      	beq.n	800a00e <HAL_TIM_Base_Start+0x66>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a1f      	ldr	r2, [pc, #124]	; (800a060 <HAL_TIM_Base_Start+0xb8>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d013      	beq.n	800a00e <HAL_TIM_Base_Start+0x66>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a1e      	ldr	r2, [pc, #120]	; (800a064 <HAL_TIM_Base_Start+0xbc>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d00e      	beq.n	800a00e <HAL_TIM_Base_Start+0x66>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a1c      	ldr	r2, [pc, #112]	; (800a068 <HAL_TIM_Base_Start+0xc0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d009      	beq.n	800a00e <HAL_TIM_Base_Start+0x66>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a1b      	ldr	r2, [pc, #108]	; (800a06c <HAL_TIM_Base_Start+0xc4>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d004      	beq.n	800a00e <HAL_TIM_Base_Start+0x66>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a19      	ldr	r2, [pc, #100]	; (800a070 <HAL_TIM_Base_Start+0xc8>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d115      	bne.n	800a03a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	4b17      	ldr	r3, [pc, #92]	; (800a074 <HAL_TIM_Base_Start+0xcc>)
 800a016:	4013      	ands	r3, r2
 800a018:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b06      	cmp	r3, #6
 800a01e:	d015      	beq.n	800a04c <HAL_TIM_Base_Start+0xa4>
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a026:	d011      	beq.n	800a04c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 0201 	orr.w	r2, r2, #1
 800a036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a038:	e008      	b.n	800a04c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f042 0201 	orr.w	r2, r2, #1
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	e000      	b.n	800a04e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a04c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	40010000 	.word	0x40010000
 800a060:	40000400 	.word	0x40000400
 800a064:	40000800 	.word	0x40000800
 800a068:	40000c00 	.word	0x40000c00
 800a06c:	40010400 	.word	0x40010400
 800a070:	40001800 	.word	0x40001800
 800a074:	00010007 	.word	0x00010007

0800a078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e049      	b.n	800a11e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d106      	bne.n	800a0a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f841 	bl	800a126 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2202      	movs	r2, #2
 800a0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	f000 fb4c 	bl	800a754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a12e:	bf00      	nop
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
	...

0800a13c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d109      	bne.n	800a160 <HAL_TIM_PWM_Start+0x24>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b01      	cmp	r3, #1
 800a156:	bf14      	ite	ne
 800a158:	2301      	movne	r3, #1
 800a15a:	2300      	moveq	r3, #0
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	e03c      	b.n	800a1da <HAL_TIM_PWM_Start+0x9e>
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b04      	cmp	r3, #4
 800a164:	d109      	bne.n	800a17a <HAL_TIM_PWM_Start+0x3e>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b01      	cmp	r3, #1
 800a170:	bf14      	ite	ne
 800a172:	2301      	movne	r3, #1
 800a174:	2300      	moveq	r3, #0
 800a176:	b2db      	uxtb	r3, r3
 800a178:	e02f      	b.n	800a1da <HAL_TIM_PWM_Start+0x9e>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d109      	bne.n	800a194 <HAL_TIM_PWM_Start+0x58>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a186:	b2db      	uxtb	r3, r3
 800a188:	2b01      	cmp	r3, #1
 800a18a:	bf14      	ite	ne
 800a18c:	2301      	movne	r3, #1
 800a18e:	2300      	moveq	r3, #0
 800a190:	b2db      	uxtb	r3, r3
 800a192:	e022      	b.n	800a1da <HAL_TIM_PWM_Start+0x9e>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2b0c      	cmp	r3, #12
 800a198:	d109      	bne.n	800a1ae <HAL_TIM_PWM_Start+0x72>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	bf14      	ite	ne
 800a1a6:	2301      	movne	r3, #1
 800a1a8:	2300      	moveq	r3, #0
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	e015      	b.n	800a1da <HAL_TIM_PWM_Start+0x9e>
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d109      	bne.n	800a1c8 <HAL_TIM_PWM_Start+0x8c>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	bf14      	ite	ne
 800a1c0:	2301      	movne	r3, #1
 800a1c2:	2300      	moveq	r3, #0
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	e008      	b.n	800a1da <HAL_TIM_PWM_Start+0x9e>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	bf14      	ite	ne
 800a1d4:	2301      	movne	r3, #1
 800a1d6:	2300      	moveq	r3, #0
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e09c      	b.n	800a31c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d104      	bne.n	800a1f2 <HAL_TIM_PWM_Start+0xb6>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1f0:	e023      	b.n	800a23a <HAL_TIM_PWM_Start+0xfe>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	d104      	bne.n	800a202 <HAL_TIM_PWM_Start+0xc6>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a200:	e01b      	b.n	800a23a <HAL_TIM_PWM_Start+0xfe>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b08      	cmp	r3, #8
 800a206:	d104      	bne.n	800a212 <HAL_TIM_PWM_Start+0xd6>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a210:	e013      	b.n	800a23a <HAL_TIM_PWM_Start+0xfe>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b0c      	cmp	r3, #12
 800a216:	d104      	bne.n	800a222 <HAL_TIM_PWM_Start+0xe6>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a220:	e00b      	b.n	800a23a <HAL_TIM_PWM_Start+0xfe>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b10      	cmp	r3, #16
 800a226:	d104      	bne.n	800a232 <HAL_TIM_PWM_Start+0xf6>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a230:	e003      	b.n	800a23a <HAL_TIM_PWM_Start+0xfe>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2202      	movs	r2, #2
 800a236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2201      	movs	r2, #1
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fe8c 	bl	800af60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a35      	ldr	r2, [pc, #212]	; (800a324 <HAL_TIM_PWM_Start+0x1e8>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d013      	beq.n	800a27a <HAL_TIM_PWM_Start+0x13e>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a34      	ldr	r2, [pc, #208]	; (800a328 <HAL_TIM_PWM_Start+0x1ec>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d00e      	beq.n	800a27a <HAL_TIM_PWM_Start+0x13e>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a32      	ldr	r2, [pc, #200]	; (800a32c <HAL_TIM_PWM_Start+0x1f0>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d009      	beq.n	800a27a <HAL_TIM_PWM_Start+0x13e>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a31      	ldr	r2, [pc, #196]	; (800a330 <HAL_TIM_PWM_Start+0x1f4>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d004      	beq.n	800a27a <HAL_TIM_PWM_Start+0x13e>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a2f      	ldr	r2, [pc, #188]	; (800a334 <HAL_TIM_PWM_Start+0x1f8>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d101      	bne.n	800a27e <HAL_TIM_PWM_Start+0x142>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e000      	b.n	800a280 <HAL_TIM_PWM_Start+0x144>
 800a27e:	2300      	movs	r3, #0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d007      	beq.n	800a294 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a292:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a22      	ldr	r2, [pc, #136]	; (800a324 <HAL_TIM_PWM_Start+0x1e8>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d01d      	beq.n	800a2da <HAL_TIM_PWM_Start+0x19e>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a6:	d018      	beq.n	800a2da <HAL_TIM_PWM_Start+0x19e>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a22      	ldr	r2, [pc, #136]	; (800a338 <HAL_TIM_PWM_Start+0x1fc>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d013      	beq.n	800a2da <HAL_TIM_PWM_Start+0x19e>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a21      	ldr	r2, [pc, #132]	; (800a33c <HAL_TIM_PWM_Start+0x200>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d00e      	beq.n	800a2da <HAL_TIM_PWM_Start+0x19e>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a1f      	ldr	r2, [pc, #124]	; (800a340 <HAL_TIM_PWM_Start+0x204>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d009      	beq.n	800a2da <HAL_TIM_PWM_Start+0x19e>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a17      	ldr	r2, [pc, #92]	; (800a328 <HAL_TIM_PWM_Start+0x1ec>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d004      	beq.n	800a2da <HAL_TIM_PWM_Start+0x19e>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a1b      	ldr	r2, [pc, #108]	; (800a344 <HAL_TIM_PWM_Start+0x208>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d115      	bne.n	800a306 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	4b19      	ldr	r3, [pc, #100]	; (800a348 <HAL_TIM_PWM_Start+0x20c>)
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b06      	cmp	r3, #6
 800a2ea:	d015      	beq.n	800a318 <HAL_TIM_PWM_Start+0x1dc>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f2:	d011      	beq.n	800a318 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f042 0201 	orr.w	r2, r2, #1
 800a302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a304:	e008      	b.n	800a318 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f042 0201 	orr.w	r2, r2, #1
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	e000      	b.n	800a31a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a318:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	40010000 	.word	0x40010000
 800a328:	40010400 	.word	0x40010400
 800a32c:	40014000 	.word	0x40014000
 800a330:	40014400 	.word	0x40014400
 800a334:	40014800 	.word	0x40014800
 800a338:	40000400 	.word	0x40000400
 800a33c:	40000800 	.word	0x40000800
 800a340:	40000c00 	.word	0x40000c00
 800a344:	40001800 	.word	0x40001800
 800a348:	00010007 	.word	0x00010007

0800a34c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d101      	bne.n	800a366 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a362:	2302      	movs	r3, #2
 800a364:	e0fd      	b.n	800a562 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b14      	cmp	r3, #20
 800a372:	f200 80f0 	bhi.w	800a556 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a376:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37c:	0800a3d1 	.word	0x0800a3d1
 800a380:	0800a557 	.word	0x0800a557
 800a384:	0800a557 	.word	0x0800a557
 800a388:	0800a557 	.word	0x0800a557
 800a38c:	0800a411 	.word	0x0800a411
 800a390:	0800a557 	.word	0x0800a557
 800a394:	0800a557 	.word	0x0800a557
 800a398:	0800a557 	.word	0x0800a557
 800a39c:	0800a453 	.word	0x0800a453
 800a3a0:	0800a557 	.word	0x0800a557
 800a3a4:	0800a557 	.word	0x0800a557
 800a3a8:	0800a557 	.word	0x0800a557
 800a3ac:	0800a493 	.word	0x0800a493
 800a3b0:	0800a557 	.word	0x0800a557
 800a3b4:	0800a557 	.word	0x0800a557
 800a3b8:	0800a557 	.word	0x0800a557
 800a3bc:	0800a4d5 	.word	0x0800a4d5
 800a3c0:	0800a557 	.word	0x0800a557
 800a3c4:	0800a557 	.word	0x0800a557
 800a3c8:	0800a557 	.word	0x0800a557
 800a3cc:	0800a515 	.word	0x0800a515
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68b9      	ldr	r1, [r7, #8]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 fa56 	bl	800a888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	699a      	ldr	r2, [r3, #24]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0208 	orr.w	r2, r2, #8
 800a3ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	699a      	ldr	r2, [r3, #24]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f022 0204 	bic.w	r2, r2, #4
 800a3fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6999      	ldr	r1, [r3, #24]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	691a      	ldr	r2, [r3, #16]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	619a      	str	r2, [r3, #24]
      break;
 800a40e:	e0a3      	b.n	800a558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68b9      	ldr	r1, [r7, #8]
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fac6 	bl	800a9a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	699a      	ldr	r2, [r3, #24]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a42a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a43a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6999      	ldr	r1, [r3, #24]
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	021a      	lsls	r2, r3, #8
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	430a      	orrs	r2, r1
 800a44e:	619a      	str	r2, [r3, #24]
      break;
 800a450:	e082      	b.n	800a558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68b9      	ldr	r1, [r7, #8]
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 fb2f 	bl	800aabc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69da      	ldr	r2, [r3, #28]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f042 0208 	orr.w	r2, r2, #8
 800a46c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	69da      	ldr	r2, [r3, #28]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 0204 	bic.w	r2, r2, #4
 800a47c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69d9      	ldr	r1, [r3, #28]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	691a      	ldr	r2, [r3, #16]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	430a      	orrs	r2, r1
 800a48e:	61da      	str	r2, [r3, #28]
      break;
 800a490:	e062      	b.n	800a558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68b9      	ldr	r1, [r7, #8]
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 fb95 	bl	800abc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	69da      	ldr	r2, [r3, #28]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	69da      	ldr	r2, [r3, #28]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	69d9      	ldr	r1, [r3, #28]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	021a      	lsls	r2, r3, #8
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	61da      	str	r2, [r3, #28]
      break;
 800a4d2:	e041      	b.n	800a558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fbdc 	bl	800ac98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0208 	orr.w	r2, r2, #8
 800a4ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f022 0204 	bic.w	r2, r2, #4
 800a4fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	691a      	ldr	r2, [r3, #16]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	430a      	orrs	r2, r1
 800a510:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a512:	e021      	b.n	800a558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 fc1e 	bl	800ad5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a52e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a53e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	021a      	lsls	r2, r3, #8
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	430a      	orrs	r2, r1
 800a552:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a554:	e000      	b.n	800a558 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a556:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop

0800a56c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d101      	bne.n	800a584 <HAL_TIM_ConfigClockSource+0x18>
 800a580:	2302      	movs	r3, #2
 800a582:	e0db      	b.n	800a73c <HAL_TIM_ConfigClockSource+0x1d0>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	4b69      	ldr	r3, [pc, #420]	; (800a744 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a63      	ldr	r2, [pc, #396]	; (800a748 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	f000 80a9 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1a6>
 800a5c0:	4a61      	ldr	r2, [pc, #388]	; (800a748 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	f200 80ae 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5c8:	4a60      	ldr	r2, [pc, #384]	; (800a74c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	f000 80a1 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1a6>
 800a5d0:	4a5e      	ldr	r2, [pc, #376]	; (800a74c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	f200 80a6 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5d8:	4a5d      	ldr	r2, [pc, #372]	; (800a750 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	f000 8099 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1a6>
 800a5e0:	4a5b      	ldr	r2, [pc, #364]	; (800a750 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	f200 809e 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5ec:	f000 8091 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1a6>
 800a5f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5f4:	f200 8096 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5fc:	f000 8089 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1a6>
 800a600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a604:	f200 808e 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a60c:	d03e      	beq.n	800a68c <HAL_TIM_ConfigClockSource+0x120>
 800a60e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a612:	f200 8087 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a61a:	f000 8085 	beq.w	800a728 <HAL_TIM_ConfigClockSource+0x1bc>
 800a61e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a622:	d87f      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a624:	2b70      	cmp	r3, #112	; 0x70
 800a626:	d01a      	beq.n	800a65e <HAL_TIM_ConfigClockSource+0xf2>
 800a628:	2b70      	cmp	r3, #112	; 0x70
 800a62a:	d87b      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a62c:	2b60      	cmp	r3, #96	; 0x60
 800a62e:	d050      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x166>
 800a630:	2b60      	cmp	r3, #96	; 0x60
 800a632:	d877      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a634:	2b50      	cmp	r3, #80	; 0x50
 800a636:	d03c      	beq.n	800a6b2 <HAL_TIM_ConfigClockSource+0x146>
 800a638:	2b50      	cmp	r3, #80	; 0x50
 800a63a:	d873      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a63c:	2b40      	cmp	r3, #64	; 0x40
 800a63e:	d058      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0x186>
 800a640:	2b40      	cmp	r3, #64	; 0x40
 800a642:	d86f      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a644:	2b30      	cmp	r3, #48	; 0x30
 800a646:	d064      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x1a6>
 800a648:	2b30      	cmp	r3, #48	; 0x30
 800a64a:	d86b      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a64c:	2b20      	cmp	r3, #32
 800a64e:	d060      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x1a6>
 800a650:	2b20      	cmp	r3, #32
 800a652:	d867      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d05c      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x1a6>
 800a658:	2b10      	cmp	r3, #16
 800a65a:	d05a      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a65c:	e062      	b.n	800a724 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6818      	ldr	r0, [r3, #0]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	6899      	ldr	r1, [r3, #8]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	f000 fc57 	bl	800af20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a680:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	609a      	str	r2, [r3, #8]
      break;
 800a68a:	e04e      	b.n	800a72a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	6899      	ldr	r1, [r3, #8]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	f000 fc40 	bl	800af20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6ae:	609a      	str	r2, [r3, #8]
      break;
 800a6b0:	e03b      	b.n	800a72a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	6859      	ldr	r1, [r3, #4]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f000 fbb0 	bl	800ae24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2150      	movs	r1, #80	; 0x50
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fc0a 	bl	800aee4 <TIM_ITRx_SetConfig>
      break;
 800a6d0:	e02b      	b.n	800a72a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6818      	ldr	r0, [r3, #0]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	6859      	ldr	r1, [r3, #4]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	f000 fbcf 	bl	800ae82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2160      	movs	r1, #96	; 0x60
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 fbfa 	bl	800aee4 <TIM_ITRx_SetConfig>
      break;
 800a6f0:	e01b      	b.n	800a72a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	6859      	ldr	r1, [r3, #4]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	461a      	mov	r2, r3
 800a700:	f000 fb90 	bl	800ae24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2140      	movs	r1, #64	; 0x40
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fbea 	bl	800aee4 <TIM_ITRx_SetConfig>
      break;
 800a710:	e00b      	b.n	800a72a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4619      	mov	r1, r3
 800a71c:	4610      	mov	r0, r2
 800a71e:	f000 fbe1 	bl	800aee4 <TIM_ITRx_SetConfig>
        break;
 800a722:	e002      	b.n	800a72a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a724:	bf00      	nop
 800a726:	e000      	b.n	800a72a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a728:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	ffceff88 	.word	0xffceff88
 800a748:	00100040 	.word	0x00100040
 800a74c:	00100030 	.word	0x00100030
 800a750:	00100020 	.word	0x00100020

0800a754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a40      	ldr	r2, [pc, #256]	; (800a868 <TIM_Base_SetConfig+0x114>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d013      	beq.n	800a794 <TIM_Base_SetConfig+0x40>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a772:	d00f      	beq.n	800a794 <TIM_Base_SetConfig+0x40>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a3d      	ldr	r2, [pc, #244]	; (800a86c <TIM_Base_SetConfig+0x118>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d00b      	beq.n	800a794 <TIM_Base_SetConfig+0x40>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a3c      	ldr	r2, [pc, #240]	; (800a870 <TIM_Base_SetConfig+0x11c>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d007      	beq.n	800a794 <TIM_Base_SetConfig+0x40>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a3b      	ldr	r2, [pc, #236]	; (800a874 <TIM_Base_SetConfig+0x120>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d003      	beq.n	800a794 <TIM_Base_SetConfig+0x40>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a3a      	ldr	r2, [pc, #232]	; (800a878 <TIM_Base_SetConfig+0x124>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d108      	bne.n	800a7a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a79a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a2f      	ldr	r2, [pc, #188]	; (800a868 <TIM_Base_SetConfig+0x114>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d01f      	beq.n	800a7ee <TIM_Base_SetConfig+0x9a>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b4:	d01b      	beq.n	800a7ee <TIM_Base_SetConfig+0x9a>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a2c      	ldr	r2, [pc, #176]	; (800a86c <TIM_Base_SetConfig+0x118>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d017      	beq.n	800a7ee <TIM_Base_SetConfig+0x9a>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a2b      	ldr	r2, [pc, #172]	; (800a870 <TIM_Base_SetConfig+0x11c>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d013      	beq.n	800a7ee <TIM_Base_SetConfig+0x9a>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a2a      	ldr	r2, [pc, #168]	; (800a874 <TIM_Base_SetConfig+0x120>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d00f      	beq.n	800a7ee <TIM_Base_SetConfig+0x9a>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a29      	ldr	r2, [pc, #164]	; (800a878 <TIM_Base_SetConfig+0x124>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d00b      	beq.n	800a7ee <TIM_Base_SetConfig+0x9a>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a28      	ldr	r2, [pc, #160]	; (800a87c <TIM_Base_SetConfig+0x128>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d007      	beq.n	800a7ee <TIM_Base_SetConfig+0x9a>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a27      	ldr	r2, [pc, #156]	; (800a880 <TIM_Base_SetConfig+0x12c>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d003      	beq.n	800a7ee <TIM_Base_SetConfig+0x9a>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a26      	ldr	r2, [pc, #152]	; (800a884 <TIM_Base_SetConfig+0x130>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d108      	bne.n	800a800 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	689a      	ldr	r2, [r3, #8]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a10      	ldr	r2, [pc, #64]	; (800a868 <TIM_Base_SetConfig+0x114>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d00f      	beq.n	800a84c <TIM_Base_SetConfig+0xf8>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a12      	ldr	r2, [pc, #72]	; (800a878 <TIM_Base_SetConfig+0x124>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d00b      	beq.n	800a84c <TIM_Base_SetConfig+0xf8>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a11      	ldr	r2, [pc, #68]	; (800a87c <TIM_Base_SetConfig+0x128>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d007      	beq.n	800a84c <TIM_Base_SetConfig+0xf8>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a10      	ldr	r2, [pc, #64]	; (800a880 <TIM_Base_SetConfig+0x12c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d003      	beq.n	800a84c <TIM_Base_SetConfig+0xf8>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a0f      	ldr	r2, [pc, #60]	; (800a884 <TIM_Base_SetConfig+0x130>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d103      	bne.n	800a854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	691a      	ldr	r2, [r3, #16]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	615a      	str	r2, [r3, #20]
}
 800a85a:	bf00      	nop
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	40010000 	.word	0x40010000
 800a86c:	40000400 	.word	0x40000400
 800a870:	40000800 	.word	0x40000800
 800a874:	40000c00 	.word	0x40000c00
 800a878:	40010400 	.word	0x40010400
 800a87c:	40014000 	.word	0x40014000
 800a880:	40014400 	.word	0x40014400
 800a884:	40014800 	.word	0x40014800

0800a888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a888:	b480      	push	{r7}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	f023 0201 	bic.w	r2, r3, #1
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	4b37      	ldr	r3, [pc, #220]	; (800a990 <TIM_OC1_SetConfig+0x108>)
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f023 0303 	bic.w	r3, r3, #3
 800a8be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f023 0302 	bic.w	r3, r3, #2
 800a8d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a2d      	ldr	r2, [pc, #180]	; (800a994 <TIM_OC1_SetConfig+0x10c>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d00f      	beq.n	800a904 <TIM_OC1_SetConfig+0x7c>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a2c      	ldr	r2, [pc, #176]	; (800a998 <TIM_OC1_SetConfig+0x110>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d00b      	beq.n	800a904 <TIM_OC1_SetConfig+0x7c>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a2b      	ldr	r2, [pc, #172]	; (800a99c <TIM_OC1_SetConfig+0x114>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d007      	beq.n	800a904 <TIM_OC1_SetConfig+0x7c>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a2a      	ldr	r2, [pc, #168]	; (800a9a0 <TIM_OC1_SetConfig+0x118>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d003      	beq.n	800a904 <TIM_OC1_SetConfig+0x7c>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a29      	ldr	r2, [pc, #164]	; (800a9a4 <TIM_OC1_SetConfig+0x11c>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d10c      	bne.n	800a91e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f023 0308 	bic.w	r3, r3, #8
 800a90a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	4313      	orrs	r3, r2
 800a914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f023 0304 	bic.w	r3, r3, #4
 800a91c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a1c      	ldr	r2, [pc, #112]	; (800a994 <TIM_OC1_SetConfig+0x10c>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d00f      	beq.n	800a946 <TIM_OC1_SetConfig+0xbe>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a1b      	ldr	r2, [pc, #108]	; (800a998 <TIM_OC1_SetConfig+0x110>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d00b      	beq.n	800a946 <TIM_OC1_SetConfig+0xbe>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a1a      	ldr	r2, [pc, #104]	; (800a99c <TIM_OC1_SetConfig+0x114>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d007      	beq.n	800a946 <TIM_OC1_SetConfig+0xbe>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a19      	ldr	r2, [pc, #100]	; (800a9a0 <TIM_OC1_SetConfig+0x118>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d003      	beq.n	800a946 <TIM_OC1_SetConfig+0xbe>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a18      	ldr	r2, [pc, #96]	; (800a9a4 <TIM_OC1_SetConfig+0x11c>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d111      	bne.n	800a96a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a94c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	4313      	orrs	r3, r2
 800a968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	621a      	str	r2, [r3, #32]
}
 800a984:	bf00      	nop
 800a986:	371c      	adds	r7, #28
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	fffeff8f 	.word	0xfffeff8f
 800a994:	40010000 	.word	0x40010000
 800a998:	40010400 	.word	0x40010400
 800a99c:	40014000 	.word	0x40014000
 800a9a0:	40014400 	.word	0x40014400
 800a9a4:	40014800 	.word	0x40014800

0800a9a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b087      	sub	sp, #28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a1b      	ldr	r3, [r3, #32]
 800a9b6:	f023 0210 	bic.w	r2, r3, #16
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4b34      	ldr	r3, [pc, #208]	; (800aaa4 <TIM_OC2_SetConfig+0xfc>)
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	021b      	lsls	r3, r3, #8
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f023 0320 	bic.w	r3, r3, #32
 800a9f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	011b      	lsls	r3, r3, #4
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a29      	ldr	r2, [pc, #164]	; (800aaa8 <TIM_OC2_SetConfig+0x100>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d003      	beq.n	800aa10 <TIM_OC2_SetConfig+0x68>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a28      	ldr	r2, [pc, #160]	; (800aaac <TIM_OC2_SetConfig+0x104>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d10d      	bne.n	800aa2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	011b      	lsls	r3, r3, #4
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a1e      	ldr	r2, [pc, #120]	; (800aaa8 <TIM_OC2_SetConfig+0x100>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d00f      	beq.n	800aa54 <TIM_OC2_SetConfig+0xac>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a1d      	ldr	r2, [pc, #116]	; (800aaac <TIM_OC2_SetConfig+0x104>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d00b      	beq.n	800aa54 <TIM_OC2_SetConfig+0xac>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a1c      	ldr	r2, [pc, #112]	; (800aab0 <TIM_OC2_SetConfig+0x108>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d007      	beq.n	800aa54 <TIM_OC2_SetConfig+0xac>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a1b      	ldr	r2, [pc, #108]	; (800aab4 <TIM_OC2_SetConfig+0x10c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d003      	beq.n	800aa54 <TIM_OC2_SetConfig+0xac>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a1a      	ldr	r2, [pc, #104]	; (800aab8 <TIM_OC2_SetConfig+0x110>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d113      	bne.n	800aa7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	693a      	ldr	r2, [r7, #16]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	621a      	str	r2, [r3, #32]
}
 800aa96:	bf00      	nop
 800aa98:	371c      	adds	r7, #28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	feff8fff 	.word	0xfeff8fff
 800aaa8:	40010000 	.word	0x40010000
 800aaac:	40010400 	.word	0x40010400
 800aab0:	40014000 	.word	0x40014000
 800aab4:	40014400 	.word	0x40014400
 800aab8:	40014800 	.word	0x40014800

0800aabc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b087      	sub	sp, #28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f023 0303 	bic.w	r3, r3, #3
 800aaf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	021b      	lsls	r3, r3, #8
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a27      	ldr	r2, [pc, #156]	; (800abb4 <TIM_OC3_SetConfig+0xf8>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d003      	beq.n	800ab22 <TIM_OC3_SetConfig+0x66>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a26      	ldr	r2, [pc, #152]	; (800abb8 <TIM_OC3_SetConfig+0xfc>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d10d      	bne.n	800ab3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	021b      	lsls	r3, r3, #8
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a1c      	ldr	r2, [pc, #112]	; (800abb4 <TIM_OC3_SetConfig+0xf8>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d00f      	beq.n	800ab66 <TIM_OC3_SetConfig+0xaa>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a1b      	ldr	r2, [pc, #108]	; (800abb8 <TIM_OC3_SetConfig+0xfc>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d00b      	beq.n	800ab66 <TIM_OC3_SetConfig+0xaa>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a1a      	ldr	r2, [pc, #104]	; (800abbc <TIM_OC3_SetConfig+0x100>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d007      	beq.n	800ab66 <TIM_OC3_SetConfig+0xaa>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a19      	ldr	r2, [pc, #100]	; (800abc0 <TIM_OC3_SetConfig+0x104>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d003      	beq.n	800ab66 <TIM_OC3_SetConfig+0xaa>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a18      	ldr	r2, [pc, #96]	; (800abc4 <TIM_OC3_SetConfig+0x108>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d113      	bne.n	800ab8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	011b      	lsls	r3, r3, #4
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	697a      	ldr	r2, [r7, #20]
 800aba6:	621a      	str	r2, [r3, #32]
}
 800aba8:	bf00      	nop
 800abaa:	371c      	adds	r7, #28
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	40010000 	.word	0x40010000
 800abb8:	40010400 	.word	0x40010400
 800abbc:	40014000 	.word	0x40014000
 800abc0:	40014400 	.word	0x40014400
 800abc4:	40014800 	.word	0x40014800

0800abc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abc8:	b480      	push	{r7}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	021b      	lsls	r3, r3, #8
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	031b      	lsls	r3, r3, #12
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a18      	ldr	r2, [pc, #96]	; (800ac84 <TIM_OC4_SetConfig+0xbc>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00f      	beq.n	800ac48 <TIM_OC4_SetConfig+0x80>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a17      	ldr	r2, [pc, #92]	; (800ac88 <TIM_OC4_SetConfig+0xc0>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d00b      	beq.n	800ac48 <TIM_OC4_SetConfig+0x80>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a16      	ldr	r2, [pc, #88]	; (800ac8c <TIM_OC4_SetConfig+0xc4>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d007      	beq.n	800ac48 <TIM_OC4_SetConfig+0x80>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a15      	ldr	r2, [pc, #84]	; (800ac90 <TIM_OC4_SetConfig+0xc8>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d003      	beq.n	800ac48 <TIM_OC4_SetConfig+0x80>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a14      	ldr	r2, [pc, #80]	; (800ac94 <TIM_OC4_SetConfig+0xcc>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d109      	bne.n	800ac5c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	019b      	lsls	r3, r3, #6
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	621a      	str	r2, [r3, #32]
}
 800ac76:	bf00      	nop
 800ac78:	371c      	adds	r7, #28
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	40010000 	.word	0x40010000
 800ac88:	40010400 	.word	0x40010400
 800ac8c:	40014000 	.word	0x40014000
 800ac90:	40014400 	.word	0x40014400
 800ac94:	40014800 	.word	0x40014800

0800ac98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	4313      	orrs	r3, r2
 800acd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800acd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	041b      	lsls	r3, r3, #16
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a17      	ldr	r2, [pc, #92]	; (800ad48 <TIM_OC5_SetConfig+0xb0>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d00f      	beq.n	800ad0e <TIM_OC5_SetConfig+0x76>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a16      	ldr	r2, [pc, #88]	; (800ad4c <TIM_OC5_SetConfig+0xb4>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d00b      	beq.n	800ad0e <TIM_OC5_SetConfig+0x76>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a15      	ldr	r2, [pc, #84]	; (800ad50 <TIM_OC5_SetConfig+0xb8>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d007      	beq.n	800ad0e <TIM_OC5_SetConfig+0x76>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a14      	ldr	r2, [pc, #80]	; (800ad54 <TIM_OC5_SetConfig+0xbc>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d003      	beq.n	800ad0e <TIM_OC5_SetConfig+0x76>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a13      	ldr	r2, [pc, #76]	; (800ad58 <TIM_OC5_SetConfig+0xc0>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d109      	bne.n	800ad22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	021b      	lsls	r3, r3, #8
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	685a      	ldr	r2, [r3, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	693a      	ldr	r2, [r7, #16]
 800ad3a:	621a      	str	r2, [r3, #32]
}
 800ad3c:	bf00      	nop
 800ad3e:	371c      	adds	r7, #28
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr
 800ad48:	40010000 	.word	0x40010000
 800ad4c:	40010400 	.word	0x40010400
 800ad50:	40014000 	.word	0x40014000
 800ad54:	40014400 	.word	0x40014400
 800ad58:	40014800 	.word	0x40014800

0800ad5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	021b      	lsls	r3, r3, #8
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	051b      	lsls	r3, r3, #20
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a18      	ldr	r2, [pc, #96]	; (800ae10 <TIM_OC6_SetConfig+0xb4>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d00f      	beq.n	800add4 <TIM_OC6_SetConfig+0x78>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a17      	ldr	r2, [pc, #92]	; (800ae14 <TIM_OC6_SetConfig+0xb8>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d00b      	beq.n	800add4 <TIM_OC6_SetConfig+0x78>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a16      	ldr	r2, [pc, #88]	; (800ae18 <TIM_OC6_SetConfig+0xbc>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d007      	beq.n	800add4 <TIM_OC6_SetConfig+0x78>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a15      	ldr	r2, [pc, #84]	; (800ae1c <TIM_OC6_SetConfig+0xc0>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d003      	beq.n	800add4 <TIM_OC6_SetConfig+0x78>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a14      	ldr	r2, [pc, #80]	; (800ae20 <TIM_OC6_SetConfig+0xc4>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d109      	bne.n	800ade8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800adda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	695b      	ldr	r3, [r3, #20]
 800ade0:	029b      	lsls	r3, r3, #10
 800ade2:	697a      	ldr	r2, [r7, #20]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	621a      	str	r2, [r3, #32]
}
 800ae02:	bf00      	nop
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	40010000 	.word	0x40010000
 800ae14:	40010400 	.word	0x40010400
 800ae18:	40014000 	.word	0x40014000
 800ae1c:	40014400 	.word	0x40014400
 800ae20:	40014800 	.word	0x40014800

0800ae24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b087      	sub	sp, #28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
 800ae34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	f023 0201 	bic.w	r2, r3, #1
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	011b      	lsls	r3, r3, #4
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f023 030a 	bic.w	r3, r3, #10
 800ae60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	621a      	str	r2, [r3, #32]
}
 800ae76:	bf00      	nop
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b087      	sub	sp, #28
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	60f8      	str	r0, [r7, #12]
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	f023 0210 	bic.w	r2, r3, #16
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aeac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	031b      	lsls	r3, r3, #12
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aebe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	011b      	lsls	r3, r3, #4
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	621a      	str	r2, [r3, #32]
}
 800aed6:	bf00      	nop
 800aed8:	371c      	adds	r7, #28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
	...

0800aee4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	4b09      	ldr	r3, [pc, #36]	; (800af1c <TIM_ITRx_SetConfig+0x38>)
 800aef8:	4013      	ands	r3, r2
 800aefa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	4313      	orrs	r3, r2
 800af02:	f043 0307 	orr.w	r3, r3, #7
 800af06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	609a      	str	r2, [r3, #8]
}
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	ffcfff8f 	.word	0xffcfff8f

0800af20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af20:	b480      	push	{r7}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
 800af2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	021a      	lsls	r2, r3, #8
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	431a      	orrs	r2, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	4313      	orrs	r3, r2
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	609a      	str	r2, [r3, #8]
}
 800af54:	bf00      	nop
 800af56:	371c      	adds	r7, #28
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af60:	b480      	push	{r7}
 800af62:	b087      	sub	sp, #28
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f003 031f 	and.w	r3, r3, #31
 800af72:	2201      	movs	r2, #1
 800af74:	fa02 f303 	lsl.w	r3, r2, r3
 800af78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6a1a      	ldr	r2, [r3, #32]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	43db      	mvns	r3, r3
 800af82:	401a      	ands	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6a1a      	ldr	r2, [r3, #32]
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	f003 031f 	and.w	r3, r3, #31
 800af92:	6879      	ldr	r1, [r7, #4]
 800af94:	fa01 f303 	lsl.w	r3, r1, r3
 800af98:	431a      	orrs	r2, r3
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	621a      	str	r2, [r3, #32]
}
 800af9e:	bf00      	nop
 800afa0:	371c      	adds	r7, #28
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
	...

0800afac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d101      	bne.n	800afc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afc0:	2302      	movs	r3, #2
 800afc2:	e068      	b.n	800b096 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a2e      	ldr	r2, [pc, #184]	; (800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d004      	beq.n	800aff8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a2d      	ldr	r2, [pc, #180]	; (800b0a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d108      	bne.n	800b00a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800affe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	4313      	orrs	r3, r2
 800b008:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	4313      	orrs	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a1e      	ldr	r2, [pc, #120]	; (800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d01d      	beq.n	800b06a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b036:	d018      	beq.n	800b06a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a1b      	ldr	r2, [pc, #108]	; (800b0ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d013      	beq.n	800b06a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a1a      	ldr	r2, [pc, #104]	; (800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d00e      	beq.n	800b06a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a18      	ldr	r2, [pc, #96]	; (800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d009      	beq.n	800b06a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a13      	ldr	r2, [pc, #76]	; (800b0a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d004      	beq.n	800b06a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a14      	ldr	r2, [pc, #80]	; (800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d10c      	bne.n	800b084 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	40010000 	.word	0x40010000
 800b0a8:	40010400 	.word	0x40010400
 800b0ac:	40000400 	.word	0x40000400
 800b0b0:	40000800 	.word	0x40000800
 800b0b4:	40000c00 	.word	0x40000c00
 800b0b8:	40001800 	.word	0x40001800

0800b0bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d101      	bne.n	800b0d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	e065      	b.n	800b1a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	4313      	orrs	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	041b      	lsls	r3, r3, #16
 800b14e:	4313      	orrs	r3, r2
 800b150:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a16      	ldr	r2, [pc, #88]	; (800b1b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d004      	beq.n	800b166 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a14      	ldr	r2, [pc, #80]	; (800b1b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d115      	bne.n	800b192 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	051b      	lsls	r3, r3, #20
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	69db      	ldr	r3, [r3, #28]
 800b180:	4313      	orrs	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	40010000 	.word	0x40010000
 800b1b4:	40010400 	.word	0x40010400

0800b1b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e042      	b.n	800b250 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d106      	bne.n	800b1e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f7f6 fd57 	bl	8001c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2224      	movs	r2, #36	; 0x24
 800b1e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f022 0201 	bic.w	r2, r2, #1
 800b1f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fb06 	bl	800b80c <UART_SetConfig>
 800b200:	4603      	mov	r3, r0
 800b202:	2b01      	cmp	r3, #1
 800b204:	d101      	bne.n	800b20a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	e022      	b.n	800b250 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f001 f85a 	bl	800c2cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689a      	ldr	r2, [r3, #8]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f042 0201 	orr.w	r2, r2, #1
 800b246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f001 f8e1 	bl	800c410 <UART_CheckIdleState>
 800b24e:	4603      	mov	r3, r0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b088      	sub	sp, #32
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	69db      	ldr	r3, [r3, #28]
 800b266:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b278:	69fa      	ldr	r2, [r7, #28]
 800b27a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b27e:	4013      	ands	r3, r2
 800b280:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d118      	bne.n	800b2ba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	f003 0320 	and.w	r3, r3, #32
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d013      	beq.n	800b2ba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	f003 0320 	and.w	r3, r3, #32
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d104      	bne.n	800b2a6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d009      	beq.n	800b2ba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 8282 	beq.w	800b7b4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	4798      	blx	r3
      }
      return;
 800b2b8:	e27c      	b.n	800b7b4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f000 80ef 	beq.w	800b4a0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	4b73      	ldr	r3, [pc, #460]	; (800b494 <HAL_UART_IRQHandler+0x23c>)
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d105      	bne.n	800b2d8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	4b72      	ldr	r3, [pc, #456]	; (800b498 <HAL_UART_IRQHandler+0x240>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 80e4 	beq.w	800b4a0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	f003 0301 	and.w	r3, r3, #1
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d010      	beq.n	800b304 <HAL_UART_IRQHandler+0xac>
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00b      	beq.n	800b304 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2fa:	f043 0201 	orr.w	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	f003 0302 	and.w	r3, r3, #2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d010      	beq.n	800b330 <HAL_UART_IRQHandler+0xd8>
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f003 0301 	and.w	r3, r3, #1
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00b      	beq.n	800b330 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2202      	movs	r2, #2
 800b31e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b326:	f043 0204 	orr.w	r2, r3, #4
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	f003 0304 	and.w	r3, r3, #4
 800b336:	2b00      	cmp	r3, #0
 800b338:	d010      	beq.n	800b35c <HAL_UART_IRQHandler+0x104>
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f003 0301 	and.w	r3, r3, #1
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2204      	movs	r2, #4
 800b34a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b352:	f043 0202 	orr.w	r2, r3, #2
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	f003 0308 	and.w	r3, r3, #8
 800b362:	2b00      	cmp	r3, #0
 800b364:	d015      	beq.n	800b392 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	f003 0320 	and.w	r3, r3, #32
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d104      	bne.n	800b37a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	4b48      	ldr	r3, [pc, #288]	; (800b494 <HAL_UART_IRQHandler+0x23c>)
 800b374:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00b      	beq.n	800b392 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2208      	movs	r2, #8
 800b380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b388:	f043 0208 	orr.w	r2, r3, #8
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d011      	beq.n	800b3c0 <HAL_UART_IRQHandler+0x168>
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00c      	beq.n	800b3c0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3b6:	f043 0220 	orr.w	r2, r3, #32
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 81f6 	beq.w	800b7b8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d011      	beq.n	800b3fa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	f003 0320 	and.w	r3, r3, #32
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d104      	bne.n	800b3ea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d007      	beq.n	800b3fa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b400:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b40c:	2b40      	cmp	r3, #64	; 0x40
 800b40e:	d004      	beq.n	800b41a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b416:	2b00      	cmp	r3, #0
 800b418:	d031      	beq.n	800b47e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f001 f8c4 	bl	800c5a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b42a:	2b40      	cmp	r3, #64	; 0x40
 800b42c:	d123      	bne.n	800b476 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b43c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b442:	2b00      	cmp	r3, #0
 800b444:	d013      	beq.n	800b46e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b44a:	4a14      	ldr	r2, [pc, #80]	; (800b49c <HAL_UART_IRQHandler+0x244>)
 800b44c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b452:	4618      	mov	r0, r3
 800b454:	f7f8 f8e6 	bl	8003624 <HAL_DMA_Abort_IT>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d017      	beq.n	800b48e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b468:	4610      	mov	r0, r2
 800b46a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b46c:	e00f      	b.n	800b48e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f9b6 	bl	800b7e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b474:	e00b      	b.n	800b48e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f9b2 	bl	800b7e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b47c:	e007      	b.n	800b48e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f9ae 	bl	800b7e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b48c:	e194      	b.n	800b7b8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b48e:	bf00      	nop
    return;
 800b490:	e192      	b.n	800b7b8 <HAL_UART_IRQHandler+0x560>
 800b492:	bf00      	nop
 800b494:	10000001 	.word	0x10000001
 800b498:	04000120 	.word	0x04000120
 800b49c:	0800c60d 	.word	0x0800c60d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	f040 810f 	bne.w	800b6c8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	f003 0310 	and.w	r3, r3, #16
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f000 8109 	beq.w	800b6c8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	f003 0310 	and.w	r3, r3, #16
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f000 8103 	beq.w	800b6c8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2210      	movs	r2, #16
 800b4c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d4:	2b40      	cmp	r3, #64	; 0x40
 800b4d6:	f040 80bb 	bne.w	800b650 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a96      	ldr	r2, [pc, #600]	; (800b73c <HAL_UART_IRQHandler+0x4e4>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d059      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a94      	ldr	r2, [pc, #592]	; (800b740 <HAL_UART_IRQHandler+0x4e8>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d053      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a92      	ldr	r2, [pc, #584]	; (800b744 <HAL_UART_IRQHandler+0x4ec>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d04d      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a90      	ldr	r2, [pc, #576]	; (800b748 <HAL_UART_IRQHandler+0x4f0>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d047      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a8e      	ldr	r2, [pc, #568]	; (800b74c <HAL_UART_IRQHandler+0x4f4>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d041      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a8c      	ldr	r2, [pc, #560]	; (800b750 <HAL_UART_IRQHandler+0x4f8>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d03b      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a8a      	ldr	r2, [pc, #552]	; (800b754 <HAL_UART_IRQHandler+0x4fc>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d035      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a88      	ldr	r2, [pc, #544]	; (800b758 <HAL_UART_IRQHandler+0x500>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d02f      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a86      	ldr	r2, [pc, #536]	; (800b75c <HAL_UART_IRQHandler+0x504>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d029      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a84      	ldr	r2, [pc, #528]	; (800b760 <HAL_UART_IRQHandler+0x508>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d023      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a82      	ldr	r2, [pc, #520]	; (800b764 <HAL_UART_IRQHandler+0x50c>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d01d      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a80      	ldr	r2, [pc, #512]	; (800b768 <HAL_UART_IRQHandler+0x510>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d017      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a7e      	ldr	r2, [pc, #504]	; (800b76c <HAL_UART_IRQHandler+0x514>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d011      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a7c      	ldr	r2, [pc, #496]	; (800b770 <HAL_UART_IRQHandler+0x518>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d00b      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a7a      	ldr	r2, [pc, #488]	; (800b774 <HAL_UART_IRQHandler+0x51c>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d005      	beq.n	800b59a <HAL_UART_IRQHandler+0x342>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a78      	ldr	r2, [pc, #480]	; (800b778 <HAL_UART_IRQHandler+0x520>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d105      	bne.n	800b5a6 <HAL_UART_IRQHandler+0x34e>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	e004      	b.n	800b5b0 <HAL_UART_IRQHandler+0x358>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b5b2:	893b      	ldrh	r3, [r7, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 8101 	beq.w	800b7bc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b5c0:	893a      	ldrh	r2, [r7, #8]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	f080 80fa 	bcs.w	800b7bc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	893a      	ldrh	r2, [r7, #8]
 800b5cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5da:	d02b      	beq.n	800b634 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5ea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	689a      	ldr	r2, [r3, #8]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f022 0201 	bic.w	r2, r2, #1
 800b5fa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	689a      	ldr	r2, [r3, #8]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b60a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2220      	movs	r2, #32
 800b610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f022 0210 	bic.w	r2, r2, #16
 800b628:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b62e:	4618      	mov	r0, r3
 800b630:	f7f7 fcda 	bl	8002fe8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b640:	b29b      	uxth	r3, r3
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	b29b      	uxth	r3, r3
 800b646:	4619      	mov	r1, r3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f8d3 	bl	800b7f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b64e:	e0b5      	b.n	800b7bc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b668:	b29b      	uxth	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 80a8 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b670:	897b      	ldrh	r3, [r7, #10]
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 80a4 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b686:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6899      	ldr	r1, [r3, #8]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	4b3a      	ldr	r3, [pc, #232]	; (800b77c <HAL_UART_IRQHandler+0x524>)
 800b694:	400b      	ands	r3, r1
 800b696:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f022 0210 	bic.w	r2, r2, #16
 800b6ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6bc:	897b      	ldrh	r3, [r7, #10]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f897 	bl	800b7f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6c6:	e07b      	b.n	800b7c0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00d      	beq.n	800b6ee <HAL_UART_IRQHandler+0x496>
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d008      	beq.n	800b6ee <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b6e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 ffc0 	bl	800c66c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6ec:	e06b      	b.n	800b7c6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d012      	beq.n	800b71e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d104      	bne.n	800b70c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d008      	beq.n	800b71e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b710:	2b00      	cmp	r3, #0
 800b712:	d057      	beq.n	800b7c4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	4798      	blx	r3
    }
    return;
 800b71c:	e052      	b.n	800b7c4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b724:	2b00      	cmp	r3, #0
 800b726:	d02b      	beq.n	800b780 <HAL_UART_IRQHandler+0x528>
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d026      	beq.n	800b780 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 ff80 	bl	800c638 <UART_EndTransmit_IT>
    return;
 800b738:	e045      	b.n	800b7c6 <HAL_UART_IRQHandler+0x56e>
 800b73a:	bf00      	nop
 800b73c:	40020010 	.word	0x40020010
 800b740:	40020028 	.word	0x40020028
 800b744:	40020040 	.word	0x40020040
 800b748:	40020058 	.word	0x40020058
 800b74c:	40020070 	.word	0x40020070
 800b750:	40020088 	.word	0x40020088
 800b754:	400200a0 	.word	0x400200a0
 800b758:	400200b8 	.word	0x400200b8
 800b75c:	40020410 	.word	0x40020410
 800b760:	40020428 	.word	0x40020428
 800b764:	40020440 	.word	0x40020440
 800b768:	40020458 	.word	0x40020458
 800b76c:	40020470 	.word	0x40020470
 800b770:	40020488 	.word	0x40020488
 800b774:	400204a0 	.word	0x400204a0
 800b778:	400204b8 	.word	0x400204b8
 800b77c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d008      	beq.n	800b79c <HAL_UART_IRQHandler+0x544>
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d003      	beq.n	800b79c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 ff7d 	bl	800c694 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b79a:	e014      	b.n	800b7c6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00f      	beq.n	800b7c6 <HAL_UART_IRQHandler+0x56e>
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	da0c      	bge.n	800b7c6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 ff67 	bl	800c680 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7b2:	e008      	b.n	800b7c6 <HAL_UART_IRQHandler+0x56e>
      return;
 800b7b4:	bf00      	nop
 800b7b6:	e006      	b.n	800b7c6 <HAL_UART_IRQHandler+0x56e>
    return;
 800b7b8:	bf00      	nop
 800b7ba:	e004      	b.n	800b7c6 <HAL_UART_IRQHandler+0x56e>
      return;
 800b7bc:	bf00      	nop
 800b7be:	e002      	b.n	800b7c6 <HAL_UART_IRQHandler+0x56e>
      return;
 800b7c0:	bf00      	nop
 800b7c2:	e000      	b.n	800b7c6 <HAL_UART_IRQHandler+0x56e>
    return;
 800b7c4:	bf00      	nop
  }
}
 800b7c6:	3720      	adds	r7, #32
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b7d4:	bf00      	nop
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b80c:	b5b0      	push	{r4, r5, r7, lr}
 800b80e:	b08e      	sub	sp, #56	; 0x38
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	689a      	ldr	r2, [r3, #8]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	431a      	orrs	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	695b      	ldr	r3, [r3, #20]
 800b828:	431a      	orrs	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	4313      	orrs	r3, r2
 800b830:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	4bbf      	ldr	r3, [pc, #764]	; (800bb38 <UART_SetConfig+0x32c>)
 800b83a:	4013      	ands	r3, r2
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	6812      	ldr	r2, [r2, #0]
 800b840:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b842:	430b      	orrs	r3, r1
 800b844:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68da      	ldr	r2, [r3, #12]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	430a      	orrs	r2, r1
 800b85a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4ab5      	ldr	r2, [pc, #724]	; (800bb3c <UART_SetConfig+0x330>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d004      	beq.n	800b876 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b872:	4313      	orrs	r3, r2
 800b874:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	689a      	ldr	r2, [r3, #8]
 800b87c:	4bb0      	ldr	r3, [pc, #704]	; (800bb40 <UART_SetConfig+0x334>)
 800b87e:	4013      	ands	r3, r2
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	6812      	ldr	r2, [r2, #0]
 800b884:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b886:	430b      	orrs	r3, r1
 800b888:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	f023 010f 	bic.w	r1, r3, #15
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	430a      	orrs	r2, r1
 800b89e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4aa7      	ldr	r2, [pc, #668]	; (800bb44 <UART_SetConfig+0x338>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d176      	bne.n	800b998 <UART_SetConfig+0x18c>
 800b8aa:	4ba7      	ldr	r3, [pc, #668]	; (800bb48 <UART_SetConfig+0x33c>)
 800b8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8b2:	2b28      	cmp	r3, #40	; 0x28
 800b8b4:	d86c      	bhi.n	800b990 <UART_SetConfig+0x184>
 800b8b6:	a201      	add	r2, pc, #4	; (adr r2, 800b8bc <UART_SetConfig+0xb0>)
 800b8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8bc:	0800b961 	.word	0x0800b961
 800b8c0:	0800b991 	.word	0x0800b991
 800b8c4:	0800b991 	.word	0x0800b991
 800b8c8:	0800b991 	.word	0x0800b991
 800b8cc:	0800b991 	.word	0x0800b991
 800b8d0:	0800b991 	.word	0x0800b991
 800b8d4:	0800b991 	.word	0x0800b991
 800b8d8:	0800b991 	.word	0x0800b991
 800b8dc:	0800b969 	.word	0x0800b969
 800b8e0:	0800b991 	.word	0x0800b991
 800b8e4:	0800b991 	.word	0x0800b991
 800b8e8:	0800b991 	.word	0x0800b991
 800b8ec:	0800b991 	.word	0x0800b991
 800b8f0:	0800b991 	.word	0x0800b991
 800b8f4:	0800b991 	.word	0x0800b991
 800b8f8:	0800b991 	.word	0x0800b991
 800b8fc:	0800b971 	.word	0x0800b971
 800b900:	0800b991 	.word	0x0800b991
 800b904:	0800b991 	.word	0x0800b991
 800b908:	0800b991 	.word	0x0800b991
 800b90c:	0800b991 	.word	0x0800b991
 800b910:	0800b991 	.word	0x0800b991
 800b914:	0800b991 	.word	0x0800b991
 800b918:	0800b991 	.word	0x0800b991
 800b91c:	0800b979 	.word	0x0800b979
 800b920:	0800b991 	.word	0x0800b991
 800b924:	0800b991 	.word	0x0800b991
 800b928:	0800b991 	.word	0x0800b991
 800b92c:	0800b991 	.word	0x0800b991
 800b930:	0800b991 	.word	0x0800b991
 800b934:	0800b991 	.word	0x0800b991
 800b938:	0800b991 	.word	0x0800b991
 800b93c:	0800b981 	.word	0x0800b981
 800b940:	0800b991 	.word	0x0800b991
 800b944:	0800b991 	.word	0x0800b991
 800b948:	0800b991 	.word	0x0800b991
 800b94c:	0800b991 	.word	0x0800b991
 800b950:	0800b991 	.word	0x0800b991
 800b954:	0800b991 	.word	0x0800b991
 800b958:	0800b991 	.word	0x0800b991
 800b95c:	0800b989 	.word	0x0800b989
 800b960:	2301      	movs	r3, #1
 800b962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b966:	e222      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b968:	2304      	movs	r3, #4
 800b96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b96e:	e21e      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b970:	2308      	movs	r3, #8
 800b972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b976:	e21a      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b978:	2310      	movs	r3, #16
 800b97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b97e:	e216      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b980:	2320      	movs	r3, #32
 800b982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b986:	e212      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b988:	2340      	movs	r3, #64	; 0x40
 800b98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b98e:	e20e      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b990:	2380      	movs	r3, #128	; 0x80
 800b992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b996:	e20a      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a6b      	ldr	r2, [pc, #428]	; (800bb4c <UART_SetConfig+0x340>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d130      	bne.n	800ba04 <UART_SetConfig+0x1f8>
 800b9a2:	4b69      	ldr	r3, [pc, #420]	; (800bb48 <UART_SetConfig+0x33c>)
 800b9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	2b05      	cmp	r3, #5
 800b9ac:	d826      	bhi.n	800b9fc <UART_SetConfig+0x1f0>
 800b9ae:	a201      	add	r2, pc, #4	; (adr r2, 800b9b4 <UART_SetConfig+0x1a8>)
 800b9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b4:	0800b9cd 	.word	0x0800b9cd
 800b9b8:	0800b9d5 	.word	0x0800b9d5
 800b9bc:	0800b9dd 	.word	0x0800b9dd
 800b9c0:	0800b9e5 	.word	0x0800b9e5
 800b9c4:	0800b9ed 	.word	0x0800b9ed
 800b9c8:	0800b9f5 	.word	0x0800b9f5
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9d2:	e1ec      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b9d4:	2304      	movs	r3, #4
 800b9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9da:	e1e8      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b9dc:	2308      	movs	r3, #8
 800b9de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9e2:	e1e4      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b9e4:	2310      	movs	r3, #16
 800b9e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ea:	e1e0      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b9ec:	2320      	movs	r3, #32
 800b9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9f2:	e1dc      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b9f4:	2340      	movs	r3, #64	; 0x40
 800b9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9fa:	e1d8      	b.n	800bdae <UART_SetConfig+0x5a2>
 800b9fc:	2380      	movs	r3, #128	; 0x80
 800b9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba02:	e1d4      	b.n	800bdae <UART_SetConfig+0x5a2>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a51      	ldr	r2, [pc, #324]	; (800bb50 <UART_SetConfig+0x344>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d130      	bne.n	800ba70 <UART_SetConfig+0x264>
 800ba0e:	4b4e      	ldr	r3, [pc, #312]	; (800bb48 <UART_SetConfig+0x33c>)
 800ba10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba12:	f003 0307 	and.w	r3, r3, #7
 800ba16:	2b05      	cmp	r3, #5
 800ba18:	d826      	bhi.n	800ba68 <UART_SetConfig+0x25c>
 800ba1a:	a201      	add	r2, pc, #4	; (adr r2, 800ba20 <UART_SetConfig+0x214>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba39 	.word	0x0800ba39
 800ba24:	0800ba41 	.word	0x0800ba41
 800ba28:	0800ba49 	.word	0x0800ba49
 800ba2c:	0800ba51 	.word	0x0800ba51
 800ba30:	0800ba59 	.word	0x0800ba59
 800ba34:	0800ba61 	.word	0x0800ba61
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba3e:	e1b6      	b.n	800bdae <UART_SetConfig+0x5a2>
 800ba40:	2304      	movs	r3, #4
 800ba42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba46:	e1b2      	b.n	800bdae <UART_SetConfig+0x5a2>
 800ba48:	2308      	movs	r3, #8
 800ba4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba4e:	e1ae      	b.n	800bdae <UART_SetConfig+0x5a2>
 800ba50:	2310      	movs	r3, #16
 800ba52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba56:	e1aa      	b.n	800bdae <UART_SetConfig+0x5a2>
 800ba58:	2320      	movs	r3, #32
 800ba5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba5e:	e1a6      	b.n	800bdae <UART_SetConfig+0x5a2>
 800ba60:	2340      	movs	r3, #64	; 0x40
 800ba62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba66:	e1a2      	b.n	800bdae <UART_SetConfig+0x5a2>
 800ba68:	2380      	movs	r3, #128	; 0x80
 800ba6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba6e:	e19e      	b.n	800bdae <UART_SetConfig+0x5a2>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a37      	ldr	r2, [pc, #220]	; (800bb54 <UART_SetConfig+0x348>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d130      	bne.n	800badc <UART_SetConfig+0x2d0>
 800ba7a:	4b33      	ldr	r3, [pc, #204]	; (800bb48 <UART_SetConfig+0x33c>)
 800ba7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba7e:	f003 0307 	and.w	r3, r3, #7
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	d826      	bhi.n	800bad4 <UART_SetConfig+0x2c8>
 800ba86:	a201      	add	r2, pc, #4	; (adr r2, 800ba8c <UART_SetConfig+0x280>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800baa5 	.word	0x0800baa5
 800ba90:	0800baad 	.word	0x0800baad
 800ba94:	0800bab5 	.word	0x0800bab5
 800ba98:	0800babd 	.word	0x0800babd
 800ba9c:	0800bac5 	.word	0x0800bac5
 800baa0:	0800bacd 	.word	0x0800bacd
 800baa4:	2300      	movs	r3, #0
 800baa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baaa:	e180      	b.n	800bdae <UART_SetConfig+0x5a2>
 800baac:	2304      	movs	r3, #4
 800baae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab2:	e17c      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bab4:	2308      	movs	r3, #8
 800bab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baba:	e178      	b.n	800bdae <UART_SetConfig+0x5a2>
 800babc:	2310      	movs	r3, #16
 800babe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bac2:	e174      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bac4:	2320      	movs	r3, #32
 800bac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baca:	e170      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bacc:	2340      	movs	r3, #64	; 0x40
 800bace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bad2:	e16c      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bad4:	2380      	movs	r3, #128	; 0x80
 800bad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bada:	e168      	b.n	800bdae <UART_SetConfig+0x5a2>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a1d      	ldr	r2, [pc, #116]	; (800bb58 <UART_SetConfig+0x34c>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d142      	bne.n	800bb6c <UART_SetConfig+0x360>
 800bae6:	4b18      	ldr	r3, [pc, #96]	; (800bb48 <UART_SetConfig+0x33c>)
 800bae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baea:	f003 0307 	and.w	r3, r3, #7
 800baee:	2b05      	cmp	r3, #5
 800baf0:	d838      	bhi.n	800bb64 <UART_SetConfig+0x358>
 800baf2:	a201      	add	r2, pc, #4	; (adr r2, 800baf8 <UART_SetConfig+0x2ec>)
 800baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf8:	0800bb11 	.word	0x0800bb11
 800bafc:	0800bb19 	.word	0x0800bb19
 800bb00:	0800bb21 	.word	0x0800bb21
 800bb04:	0800bb29 	.word	0x0800bb29
 800bb08:	0800bb31 	.word	0x0800bb31
 800bb0c:	0800bb5d 	.word	0x0800bb5d
 800bb10:	2300      	movs	r3, #0
 800bb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb16:	e14a      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bb18:	2304      	movs	r3, #4
 800bb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1e:	e146      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bb20:	2308      	movs	r3, #8
 800bb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb26:	e142      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bb28:	2310      	movs	r3, #16
 800bb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb2e:	e13e      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bb30:	2320      	movs	r3, #32
 800bb32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb36:	e13a      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bb38:	cfff69f3 	.word	0xcfff69f3
 800bb3c:	58000c00 	.word	0x58000c00
 800bb40:	11fff4ff 	.word	0x11fff4ff
 800bb44:	40011000 	.word	0x40011000
 800bb48:	58024400 	.word	0x58024400
 800bb4c:	40004400 	.word	0x40004400
 800bb50:	40004800 	.word	0x40004800
 800bb54:	40004c00 	.word	0x40004c00
 800bb58:	40005000 	.word	0x40005000
 800bb5c:	2340      	movs	r3, #64	; 0x40
 800bb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb62:	e124      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bb64:	2380      	movs	r3, #128	; 0x80
 800bb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb6a:	e120      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4acc      	ldr	r2, [pc, #816]	; (800bea4 <UART_SetConfig+0x698>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d176      	bne.n	800bc64 <UART_SetConfig+0x458>
 800bb76:	4bcc      	ldr	r3, [pc, #816]	; (800bea8 <UART_SetConfig+0x69c>)
 800bb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb7e:	2b28      	cmp	r3, #40	; 0x28
 800bb80:	d86c      	bhi.n	800bc5c <UART_SetConfig+0x450>
 800bb82:	a201      	add	r2, pc, #4	; (adr r2, 800bb88 <UART_SetConfig+0x37c>)
 800bb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb88:	0800bc2d 	.word	0x0800bc2d
 800bb8c:	0800bc5d 	.word	0x0800bc5d
 800bb90:	0800bc5d 	.word	0x0800bc5d
 800bb94:	0800bc5d 	.word	0x0800bc5d
 800bb98:	0800bc5d 	.word	0x0800bc5d
 800bb9c:	0800bc5d 	.word	0x0800bc5d
 800bba0:	0800bc5d 	.word	0x0800bc5d
 800bba4:	0800bc5d 	.word	0x0800bc5d
 800bba8:	0800bc35 	.word	0x0800bc35
 800bbac:	0800bc5d 	.word	0x0800bc5d
 800bbb0:	0800bc5d 	.word	0x0800bc5d
 800bbb4:	0800bc5d 	.word	0x0800bc5d
 800bbb8:	0800bc5d 	.word	0x0800bc5d
 800bbbc:	0800bc5d 	.word	0x0800bc5d
 800bbc0:	0800bc5d 	.word	0x0800bc5d
 800bbc4:	0800bc5d 	.word	0x0800bc5d
 800bbc8:	0800bc3d 	.word	0x0800bc3d
 800bbcc:	0800bc5d 	.word	0x0800bc5d
 800bbd0:	0800bc5d 	.word	0x0800bc5d
 800bbd4:	0800bc5d 	.word	0x0800bc5d
 800bbd8:	0800bc5d 	.word	0x0800bc5d
 800bbdc:	0800bc5d 	.word	0x0800bc5d
 800bbe0:	0800bc5d 	.word	0x0800bc5d
 800bbe4:	0800bc5d 	.word	0x0800bc5d
 800bbe8:	0800bc45 	.word	0x0800bc45
 800bbec:	0800bc5d 	.word	0x0800bc5d
 800bbf0:	0800bc5d 	.word	0x0800bc5d
 800bbf4:	0800bc5d 	.word	0x0800bc5d
 800bbf8:	0800bc5d 	.word	0x0800bc5d
 800bbfc:	0800bc5d 	.word	0x0800bc5d
 800bc00:	0800bc5d 	.word	0x0800bc5d
 800bc04:	0800bc5d 	.word	0x0800bc5d
 800bc08:	0800bc4d 	.word	0x0800bc4d
 800bc0c:	0800bc5d 	.word	0x0800bc5d
 800bc10:	0800bc5d 	.word	0x0800bc5d
 800bc14:	0800bc5d 	.word	0x0800bc5d
 800bc18:	0800bc5d 	.word	0x0800bc5d
 800bc1c:	0800bc5d 	.word	0x0800bc5d
 800bc20:	0800bc5d 	.word	0x0800bc5d
 800bc24:	0800bc5d 	.word	0x0800bc5d
 800bc28:	0800bc55 	.word	0x0800bc55
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc32:	e0bc      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bc34:	2304      	movs	r3, #4
 800bc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc3a:	e0b8      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bc3c:	2308      	movs	r3, #8
 800bc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc42:	e0b4      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bc44:	2310      	movs	r3, #16
 800bc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc4a:	e0b0      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bc4c:	2320      	movs	r3, #32
 800bc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc52:	e0ac      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bc54:	2340      	movs	r3, #64	; 0x40
 800bc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc5a:	e0a8      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bc5c:	2380      	movs	r3, #128	; 0x80
 800bc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc62:	e0a4      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a90      	ldr	r2, [pc, #576]	; (800beac <UART_SetConfig+0x6a0>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d130      	bne.n	800bcd0 <UART_SetConfig+0x4c4>
 800bc6e:	4b8e      	ldr	r3, [pc, #568]	; (800bea8 <UART_SetConfig+0x69c>)
 800bc70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc72:	f003 0307 	and.w	r3, r3, #7
 800bc76:	2b05      	cmp	r3, #5
 800bc78:	d826      	bhi.n	800bcc8 <UART_SetConfig+0x4bc>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <UART_SetConfig+0x474>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bc99 	.word	0x0800bc99
 800bc84:	0800bca1 	.word	0x0800bca1
 800bc88:	0800bca9 	.word	0x0800bca9
 800bc8c:	0800bcb1 	.word	0x0800bcb1
 800bc90:	0800bcb9 	.word	0x0800bcb9
 800bc94:	0800bcc1 	.word	0x0800bcc1
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9e:	e086      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bca0:	2304      	movs	r3, #4
 800bca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca6:	e082      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bca8:	2308      	movs	r3, #8
 800bcaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcae:	e07e      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bcb0:	2310      	movs	r3, #16
 800bcb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb6:	e07a      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bcb8:	2320      	movs	r3, #32
 800bcba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcbe:	e076      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bcc0:	2340      	movs	r3, #64	; 0x40
 800bcc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcc6:	e072      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bcc8:	2380      	movs	r3, #128	; 0x80
 800bcca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcce:	e06e      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a76      	ldr	r2, [pc, #472]	; (800beb0 <UART_SetConfig+0x6a4>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d130      	bne.n	800bd3c <UART_SetConfig+0x530>
 800bcda:	4b73      	ldr	r3, [pc, #460]	; (800bea8 <UART_SetConfig+0x69c>)
 800bcdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcde:	f003 0307 	and.w	r3, r3, #7
 800bce2:	2b05      	cmp	r3, #5
 800bce4:	d826      	bhi.n	800bd34 <UART_SetConfig+0x528>
 800bce6:	a201      	add	r2, pc, #4	; (adr r2, 800bcec <UART_SetConfig+0x4e0>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bd05 	.word	0x0800bd05
 800bcf0:	0800bd0d 	.word	0x0800bd0d
 800bcf4:	0800bd15 	.word	0x0800bd15
 800bcf8:	0800bd1d 	.word	0x0800bd1d
 800bcfc:	0800bd25 	.word	0x0800bd25
 800bd00:	0800bd2d 	.word	0x0800bd2d
 800bd04:	2300      	movs	r3, #0
 800bd06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0a:	e050      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd0c:	2304      	movs	r3, #4
 800bd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd12:	e04c      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd14:	2308      	movs	r3, #8
 800bd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd1a:	e048      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd1c:	2310      	movs	r3, #16
 800bd1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd22:	e044      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd24:	2320      	movs	r3, #32
 800bd26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd2a:	e040      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd2c:	2340      	movs	r3, #64	; 0x40
 800bd2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd32:	e03c      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd34:	2380      	movs	r3, #128	; 0x80
 800bd36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd3a:	e038      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a5c      	ldr	r2, [pc, #368]	; (800beb4 <UART_SetConfig+0x6a8>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d130      	bne.n	800bda8 <UART_SetConfig+0x59c>
 800bd46:	4b58      	ldr	r3, [pc, #352]	; (800bea8 <UART_SetConfig+0x69c>)
 800bd48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd4a:	f003 0307 	and.w	r3, r3, #7
 800bd4e:	2b05      	cmp	r3, #5
 800bd50:	d826      	bhi.n	800bda0 <UART_SetConfig+0x594>
 800bd52:	a201      	add	r2, pc, #4	; (adr r2, 800bd58 <UART_SetConfig+0x54c>)
 800bd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd58:	0800bd71 	.word	0x0800bd71
 800bd5c:	0800bd79 	.word	0x0800bd79
 800bd60:	0800bd81 	.word	0x0800bd81
 800bd64:	0800bd89 	.word	0x0800bd89
 800bd68:	0800bd91 	.word	0x0800bd91
 800bd6c:	0800bd99 	.word	0x0800bd99
 800bd70:	2302      	movs	r3, #2
 800bd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd76:	e01a      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd78:	2304      	movs	r3, #4
 800bd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7e:	e016      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd80:	2308      	movs	r3, #8
 800bd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd86:	e012      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd88:	2310      	movs	r3, #16
 800bd8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd8e:	e00e      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd90:	2320      	movs	r3, #32
 800bd92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd96:	e00a      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bd98:	2340      	movs	r3, #64	; 0x40
 800bd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd9e:	e006      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bda0:	2380      	movs	r3, #128	; 0x80
 800bda2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bda6:	e002      	b.n	800bdae <UART_SetConfig+0x5a2>
 800bda8:	2380      	movs	r3, #128	; 0x80
 800bdaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a40      	ldr	r2, [pc, #256]	; (800beb4 <UART_SetConfig+0x6a8>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	f040 80ef 	bne.w	800bf98 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bdba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	dc46      	bgt.n	800be50 <UART_SetConfig+0x644>
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	f2c0 8081 	blt.w	800beca <UART_SetConfig+0x6be>
 800bdc8:	3b02      	subs	r3, #2
 800bdca:	2b1e      	cmp	r3, #30
 800bdcc:	d87d      	bhi.n	800beca <UART_SetConfig+0x6be>
 800bdce:	a201      	add	r2, pc, #4	; (adr r2, 800bdd4 <UART_SetConfig+0x5c8>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800be57 	.word	0x0800be57
 800bdd8:	0800becb 	.word	0x0800becb
 800bddc:	0800be5f 	.word	0x0800be5f
 800bde0:	0800becb 	.word	0x0800becb
 800bde4:	0800becb 	.word	0x0800becb
 800bde8:	0800becb 	.word	0x0800becb
 800bdec:	0800be6f 	.word	0x0800be6f
 800bdf0:	0800becb 	.word	0x0800becb
 800bdf4:	0800becb 	.word	0x0800becb
 800bdf8:	0800becb 	.word	0x0800becb
 800bdfc:	0800becb 	.word	0x0800becb
 800be00:	0800becb 	.word	0x0800becb
 800be04:	0800becb 	.word	0x0800becb
 800be08:	0800becb 	.word	0x0800becb
 800be0c:	0800be7f 	.word	0x0800be7f
 800be10:	0800becb 	.word	0x0800becb
 800be14:	0800becb 	.word	0x0800becb
 800be18:	0800becb 	.word	0x0800becb
 800be1c:	0800becb 	.word	0x0800becb
 800be20:	0800becb 	.word	0x0800becb
 800be24:	0800becb 	.word	0x0800becb
 800be28:	0800becb 	.word	0x0800becb
 800be2c:	0800becb 	.word	0x0800becb
 800be30:	0800becb 	.word	0x0800becb
 800be34:	0800becb 	.word	0x0800becb
 800be38:	0800becb 	.word	0x0800becb
 800be3c:	0800becb 	.word	0x0800becb
 800be40:	0800becb 	.word	0x0800becb
 800be44:	0800becb 	.word	0x0800becb
 800be48:	0800becb 	.word	0x0800becb
 800be4c:	0800bebd 	.word	0x0800bebd
 800be50:	2b40      	cmp	r3, #64	; 0x40
 800be52:	d036      	beq.n	800bec2 <UART_SetConfig+0x6b6>
 800be54:	e039      	b.n	800beca <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be56:	f7fb ffe3 	bl	8007e20 <HAL_RCCEx_GetD3PCLK1Freq>
 800be5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800be5c:	e03b      	b.n	800bed6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be5e:	f107 0314 	add.w	r3, r7, #20
 800be62:	4618      	mov	r0, r3
 800be64:	f7fb fff2 	bl	8007e4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be6c:	e033      	b.n	800bed6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be6e:	f107 0308 	add.w	r3, r7, #8
 800be72:	4618      	mov	r0, r3
 800be74:	f7fc f93e 	bl	80080f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be7c:	e02b      	b.n	800bed6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be7e:	4b0a      	ldr	r3, [pc, #40]	; (800bea8 <UART_SetConfig+0x69c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 0320 	and.w	r3, r3, #32
 800be86:	2b00      	cmp	r3, #0
 800be88:	d009      	beq.n	800be9e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be8a:	4b07      	ldr	r3, [pc, #28]	; (800bea8 <UART_SetConfig+0x69c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	08db      	lsrs	r3, r3, #3
 800be90:	f003 0303 	and.w	r3, r3, #3
 800be94:	4a08      	ldr	r2, [pc, #32]	; (800beb8 <UART_SetConfig+0x6ac>)
 800be96:	fa22 f303 	lsr.w	r3, r2, r3
 800be9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be9c:	e01b      	b.n	800bed6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800be9e:	4b06      	ldr	r3, [pc, #24]	; (800beb8 <UART_SetConfig+0x6ac>)
 800bea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bea2:	e018      	b.n	800bed6 <UART_SetConfig+0x6ca>
 800bea4:	40011400 	.word	0x40011400
 800bea8:	58024400 	.word	0x58024400
 800beac:	40007800 	.word	0x40007800
 800beb0:	40007c00 	.word	0x40007c00
 800beb4:	58000c00 	.word	0x58000c00
 800beb8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bebc:	4bc4      	ldr	r3, [pc, #784]	; (800c1d0 <UART_SetConfig+0x9c4>)
 800bebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bec0:	e009      	b.n	800bed6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bec8:	e005      	b.n	800bed6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800beca:	2300      	movs	r3, #0
 800becc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bed4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f000 81da 	beq.w	800c292 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	4abc      	ldr	r2, [pc, #752]	; (800c1d4 <UART_SetConfig+0x9c8>)
 800bee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bee8:	461a      	mov	r2, r3
 800beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beec:	fbb3 f3f2 	udiv	r3, r3, r2
 800bef0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	685a      	ldr	r2, [r3, #4]
 800bef6:	4613      	mov	r3, r2
 800bef8:	005b      	lsls	r3, r3, #1
 800befa:	4413      	add	r3, r2
 800befc:	6a3a      	ldr	r2, [r7, #32]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d305      	bcc.n	800bf0e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf08:	6a3a      	ldr	r2, [r7, #32]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d903      	bls.n	800bf16 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf14:	e1bd      	b.n	800c292 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f04f 0100 	mov.w	r1, #0
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf22:	4aac      	ldr	r2, [pc, #688]	; (800c1d4 <UART_SetConfig+0x9c8>)
 800bf24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf28:	b29a      	uxth	r2, r3
 800bf2a:	f04f 0300 	mov.w	r3, #0
 800bf2e:	f7f4 f9d3 	bl	80002d8 <__aeabi_uldivmod>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	4610      	mov	r0, r2
 800bf38:	4619      	mov	r1, r3
 800bf3a:	f04f 0200 	mov.w	r2, #0
 800bf3e:	f04f 0300 	mov.w	r3, #0
 800bf42:	020b      	lsls	r3, r1, #8
 800bf44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf48:	0202      	lsls	r2, r0, #8
 800bf4a:	6879      	ldr	r1, [r7, #4]
 800bf4c:	6849      	ldr	r1, [r1, #4]
 800bf4e:	0849      	lsrs	r1, r1, #1
 800bf50:	4608      	mov	r0, r1
 800bf52:	f04f 0100 	mov.w	r1, #0
 800bf56:	1814      	adds	r4, r2, r0
 800bf58:	eb43 0501 	adc.w	r5, r3, r1
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	461a      	mov	r2, r3
 800bf62:	f04f 0300 	mov.w	r3, #0
 800bf66:	4620      	mov	r0, r4
 800bf68:	4629      	mov	r1, r5
 800bf6a:	f7f4 f9b5 	bl	80002d8 <__aeabi_uldivmod>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	4613      	mov	r3, r2
 800bf74:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf7c:	d308      	bcc.n	800bf90 <UART_SetConfig+0x784>
 800bf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf84:	d204      	bcs.n	800bf90 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf8c:	60da      	str	r2, [r3, #12]
 800bf8e:	e180      	b.n	800c292 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf96:	e17c      	b.n	800c292 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	69db      	ldr	r3, [r3, #28]
 800bf9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfa0:	f040 80bf 	bne.w	800c122 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800bfa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfa8:	2b20      	cmp	r3, #32
 800bfaa:	dc49      	bgt.n	800c040 <UART_SetConfig+0x834>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	db7c      	blt.n	800c0aa <UART_SetConfig+0x89e>
 800bfb0:	2b20      	cmp	r3, #32
 800bfb2:	d87a      	bhi.n	800c0aa <UART_SetConfig+0x89e>
 800bfb4:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <UART_SetConfig+0x7b0>)
 800bfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfba:	bf00      	nop
 800bfbc:	0800c047 	.word	0x0800c047
 800bfc0:	0800c04f 	.word	0x0800c04f
 800bfc4:	0800c0ab 	.word	0x0800c0ab
 800bfc8:	0800c0ab 	.word	0x0800c0ab
 800bfcc:	0800c057 	.word	0x0800c057
 800bfd0:	0800c0ab 	.word	0x0800c0ab
 800bfd4:	0800c0ab 	.word	0x0800c0ab
 800bfd8:	0800c0ab 	.word	0x0800c0ab
 800bfdc:	0800c067 	.word	0x0800c067
 800bfe0:	0800c0ab 	.word	0x0800c0ab
 800bfe4:	0800c0ab 	.word	0x0800c0ab
 800bfe8:	0800c0ab 	.word	0x0800c0ab
 800bfec:	0800c0ab 	.word	0x0800c0ab
 800bff0:	0800c0ab 	.word	0x0800c0ab
 800bff4:	0800c0ab 	.word	0x0800c0ab
 800bff8:	0800c0ab 	.word	0x0800c0ab
 800bffc:	0800c077 	.word	0x0800c077
 800c000:	0800c0ab 	.word	0x0800c0ab
 800c004:	0800c0ab 	.word	0x0800c0ab
 800c008:	0800c0ab 	.word	0x0800c0ab
 800c00c:	0800c0ab 	.word	0x0800c0ab
 800c010:	0800c0ab 	.word	0x0800c0ab
 800c014:	0800c0ab 	.word	0x0800c0ab
 800c018:	0800c0ab 	.word	0x0800c0ab
 800c01c:	0800c0ab 	.word	0x0800c0ab
 800c020:	0800c0ab 	.word	0x0800c0ab
 800c024:	0800c0ab 	.word	0x0800c0ab
 800c028:	0800c0ab 	.word	0x0800c0ab
 800c02c:	0800c0ab 	.word	0x0800c0ab
 800c030:	0800c0ab 	.word	0x0800c0ab
 800c034:	0800c0ab 	.word	0x0800c0ab
 800c038:	0800c0ab 	.word	0x0800c0ab
 800c03c:	0800c09d 	.word	0x0800c09d
 800c040:	2b40      	cmp	r3, #64	; 0x40
 800c042:	d02e      	beq.n	800c0a2 <UART_SetConfig+0x896>
 800c044:	e031      	b.n	800c0aa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c046:	f7fa ff7f 	bl	8006f48 <HAL_RCC_GetPCLK1Freq>
 800c04a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c04c:	e033      	b.n	800c0b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c04e:	f7fa ff91 	bl	8006f74 <HAL_RCC_GetPCLK2Freq>
 800c052:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c054:	e02f      	b.n	800c0b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c056:	f107 0314 	add.w	r3, r7, #20
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fb fef6 	bl	8007e4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c064:	e027      	b.n	800c0b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c066:	f107 0308 	add.w	r3, r7, #8
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fc f842 	bl	80080f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c074:	e01f      	b.n	800c0b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c076:	4b58      	ldr	r3, [pc, #352]	; (800c1d8 <UART_SetConfig+0x9cc>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 0320 	and.w	r3, r3, #32
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d009      	beq.n	800c096 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c082:	4b55      	ldr	r3, [pc, #340]	; (800c1d8 <UART_SetConfig+0x9cc>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	08db      	lsrs	r3, r3, #3
 800c088:	f003 0303 	and.w	r3, r3, #3
 800c08c:	4a53      	ldr	r2, [pc, #332]	; (800c1dc <UART_SetConfig+0x9d0>)
 800c08e:	fa22 f303 	lsr.w	r3, r2, r3
 800c092:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c094:	e00f      	b.n	800c0b6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c096:	4b51      	ldr	r3, [pc, #324]	; (800c1dc <UART_SetConfig+0x9d0>)
 800c098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c09a:	e00c      	b.n	800c0b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c09c:	4b4c      	ldr	r3, [pc, #304]	; (800c1d0 <UART_SetConfig+0x9c4>)
 800c09e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0a0:	e009      	b.n	800c0b6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0a8:	e005      	b.n	800c0b6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c0b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 80ea 	beq.w	800c292 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c2:	4a44      	ldr	r2, [pc, #272]	; (800c1d4 <UART_SetConfig+0x9c8>)
 800c0c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0d0:	005a      	lsls	r2, r3, #1
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	085b      	lsrs	r3, r3, #1
 800c0d8:	441a      	add	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e8:	2b0f      	cmp	r3, #15
 800c0ea:	d916      	bls.n	800c11a <UART_SetConfig+0x90e>
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f2:	d212      	bcs.n	800c11a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	f023 030f 	bic.w	r3, r3, #15
 800c0fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c100:	085b      	lsrs	r3, r3, #1
 800c102:	b29b      	uxth	r3, r3
 800c104:	f003 0307 	and.w	r3, r3, #7
 800c108:	b29a      	uxth	r2, r3
 800c10a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c10c:	4313      	orrs	r3, r2
 800c10e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c116:	60da      	str	r2, [r3, #12]
 800c118:	e0bb      	b.n	800c292 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c120:	e0b7      	b.n	800c292 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c122:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c126:	2b20      	cmp	r3, #32
 800c128:	dc4a      	bgt.n	800c1c0 <UART_SetConfig+0x9b4>
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f2c0 8086 	blt.w	800c23c <UART_SetConfig+0xa30>
 800c130:	2b20      	cmp	r3, #32
 800c132:	f200 8083 	bhi.w	800c23c <UART_SetConfig+0xa30>
 800c136:	a201      	add	r2, pc, #4	; (adr r2, 800c13c <UART_SetConfig+0x930>)
 800c138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13c:	0800c1c7 	.word	0x0800c1c7
 800c140:	0800c1e1 	.word	0x0800c1e1
 800c144:	0800c23d 	.word	0x0800c23d
 800c148:	0800c23d 	.word	0x0800c23d
 800c14c:	0800c1e9 	.word	0x0800c1e9
 800c150:	0800c23d 	.word	0x0800c23d
 800c154:	0800c23d 	.word	0x0800c23d
 800c158:	0800c23d 	.word	0x0800c23d
 800c15c:	0800c1f9 	.word	0x0800c1f9
 800c160:	0800c23d 	.word	0x0800c23d
 800c164:	0800c23d 	.word	0x0800c23d
 800c168:	0800c23d 	.word	0x0800c23d
 800c16c:	0800c23d 	.word	0x0800c23d
 800c170:	0800c23d 	.word	0x0800c23d
 800c174:	0800c23d 	.word	0x0800c23d
 800c178:	0800c23d 	.word	0x0800c23d
 800c17c:	0800c209 	.word	0x0800c209
 800c180:	0800c23d 	.word	0x0800c23d
 800c184:	0800c23d 	.word	0x0800c23d
 800c188:	0800c23d 	.word	0x0800c23d
 800c18c:	0800c23d 	.word	0x0800c23d
 800c190:	0800c23d 	.word	0x0800c23d
 800c194:	0800c23d 	.word	0x0800c23d
 800c198:	0800c23d 	.word	0x0800c23d
 800c19c:	0800c23d 	.word	0x0800c23d
 800c1a0:	0800c23d 	.word	0x0800c23d
 800c1a4:	0800c23d 	.word	0x0800c23d
 800c1a8:	0800c23d 	.word	0x0800c23d
 800c1ac:	0800c23d 	.word	0x0800c23d
 800c1b0:	0800c23d 	.word	0x0800c23d
 800c1b4:	0800c23d 	.word	0x0800c23d
 800c1b8:	0800c23d 	.word	0x0800c23d
 800c1bc:	0800c22f 	.word	0x0800c22f
 800c1c0:	2b40      	cmp	r3, #64	; 0x40
 800c1c2:	d037      	beq.n	800c234 <UART_SetConfig+0xa28>
 800c1c4:	e03a      	b.n	800c23c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1c6:	f7fa febf 	bl	8006f48 <HAL_RCC_GetPCLK1Freq>
 800c1ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1cc:	e03c      	b.n	800c248 <UART_SetConfig+0xa3c>
 800c1ce:	bf00      	nop
 800c1d0:	003d0900 	.word	0x003d0900
 800c1d4:	0800ced0 	.word	0x0800ced0
 800c1d8:	58024400 	.word	0x58024400
 800c1dc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1e0:	f7fa fec8 	bl	8006f74 <HAL_RCC_GetPCLK2Freq>
 800c1e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1e6:	e02f      	b.n	800c248 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1e8:	f107 0314 	add.w	r3, r7, #20
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fb fe2d 	bl	8007e4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1f6:	e027      	b.n	800c248 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1f8:	f107 0308 	add.w	r3, r7, #8
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fb ff79 	bl	80080f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c206:	e01f      	b.n	800c248 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c208:	4b2c      	ldr	r3, [pc, #176]	; (800c2bc <UART_SetConfig+0xab0>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f003 0320 	and.w	r3, r3, #32
 800c210:	2b00      	cmp	r3, #0
 800c212:	d009      	beq.n	800c228 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c214:	4b29      	ldr	r3, [pc, #164]	; (800c2bc <UART_SetConfig+0xab0>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	08db      	lsrs	r3, r3, #3
 800c21a:	f003 0303 	and.w	r3, r3, #3
 800c21e:	4a28      	ldr	r2, [pc, #160]	; (800c2c0 <UART_SetConfig+0xab4>)
 800c220:	fa22 f303 	lsr.w	r3, r2, r3
 800c224:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c226:	e00f      	b.n	800c248 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c228:	4b25      	ldr	r3, [pc, #148]	; (800c2c0 <UART_SetConfig+0xab4>)
 800c22a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c22c:	e00c      	b.n	800c248 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c22e:	4b25      	ldr	r3, [pc, #148]	; (800c2c4 <UART_SetConfig+0xab8>)
 800c230:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c232:	e009      	b.n	800c248 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c238:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c23a:	e005      	b.n	800c248 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c23c:	2300      	movs	r3, #0
 800c23e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c246:	bf00      	nop
    }

    if (pclk != 0U)
 800c248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d021      	beq.n	800c292 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c252:	4a1d      	ldr	r2, [pc, #116]	; (800c2c8 <UART_SetConfig+0xabc>)
 800c254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c258:	461a      	mov	r2, r3
 800c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	085b      	lsrs	r3, r3, #1
 800c266:	441a      	add	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c270:	b29b      	uxth	r3, r3
 800c272:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c276:	2b0f      	cmp	r3, #15
 800c278:	d908      	bls.n	800c28c <UART_SetConfig+0xa80>
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c280:	d204      	bcs.n	800c28c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c288:	60da      	str	r2, [r3, #12]
 800c28a:	e002      	b.n	800c292 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2201      	movs	r2, #1
 800c29e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c2ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3738      	adds	r7, #56	; 0x38
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bdb0      	pop	{r4, r5, r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	58024400 	.word	0x58024400
 800c2c0:	03d09000 	.word	0x03d09000
 800c2c4:	003d0900 	.word	0x003d0900
 800c2c8:	0800ced0 	.word	0x0800ced0

0800c2cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00a      	beq.n	800c2f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fa:	f003 0302 	and.w	r3, r3, #2
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00a      	beq.n	800c318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	430a      	orrs	r2, r1
 800c316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c31c:	f003 0304 	and.w	r3, r3, #4
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00a      	beq.n	800c33a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	430a      	orrs	r2, r1
 800c338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c33e:	f003 0308 	and.w	r3, r3, #8
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00a      	beq.n	800c35c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	430a      	orrs	r2, r1
 800c35a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c360:	f003 0310 	and.w	r3, r3, #16
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00a      	beq.n	800c37e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	430a      	orrs	r2, r1
 800c37c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c382:	f003 0320 	and.w	r3, r3, #32
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00a      	beq.n	800c3a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	430a      	orrs	r2, r1
 800c39e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d01a      	beq.n	800c3e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	430a      	orrs	r2, r1
 800c3c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3ca:	d10a      	bne.n	800c3e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	430a      	orrs	r2, r1
 800c3e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00a      	beq.n	800c404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	430a      	orrs	r2, r1
 800c402:	605a      	str	r2, [r3, #4]
  }
}
 800c404:	bf00      	nop
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af02      	add	r7, sp, #8
 800c416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c420:	f7f5 fea8 	bl	8002174 <HAL_GetTick>
 800c424:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 0308 	and.w	r3, r3, #8
 800c430:	2b08      	cmp	r3, #8
 800c432:	d10e      	bne.n	800c452 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f82f 	bl	800c4a6 <UART_WaitOnFlagUntilTimeout>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c44e:	2303      	movs	r3, #3
 800c450:	e025      	b.n	800c49e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	d10e      	bne.n	800c47e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f819 	bl	800c4a6 <UART_WaitOnFlagUntilTimeout>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d001      	beq.n	800c47e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c47a:	2303      	movs	r3, #3
 800c47c:	e00f      	b.n	800c49e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2220      	movs	r2, #32
 800c482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2220      	movs	r2, #32
 800c48a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	60f8      	str	r0, [r7, #12]
 800c4ae:	60b9      	str	r1, [r7, #8]
 800c4b0:	603b      	str	r3, [r7, #0]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4b6:	e062      	b.n	800c57e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4be:	d05e      	beq.n	800c57e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4c0:	f7f5 fe58 	bl	8002174 <HAL_GetTick>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	69ba      	ldr	r2, [r7, #24]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d302      	bcc.n	800c4d6 <UART_WaitOnFlagUntilTimeout+0x30>
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d11d      	bne.n	800c512 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	689a      	ldr	r2, [r3, #8]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f022 0201 	bic.w	r2, r2, #1
 800c4f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2220      	movs	r2, #32
 800c4fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2220      	movs	r2, #32
 800c502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2200      	movs	r2, #0
 800c50a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c50e:	2303      	movs	r3, #3
 800c510:	e045      	b.n	800c59e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f003 0304 	and.w	r3, r3, #4
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d02e      	beq.n	800c57e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	69db      	ldr	r3, [r3, #28]
 800c526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c52a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c52e:	d126      	bne.n	800c57e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c538:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c548:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 0201 	bic.w	r2, r2, #1
 800c558:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2220      	movs	r2, #32
 800c55e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2220      	movs	r2, #32
 800c566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2220      	movs	r2, #32
 800c56e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e00f      	b.n	800c59e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	69da      	ldr	r2, [r3, #28]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	4013      	ands	r3, r2
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	bf0c      	ite	eq
 800c58e:	2301      	moveq	r3, #1
 800c590:	2300      	movne	r3, #0
 800c592:	b2db      	uxtb	r3, r3
 800c594:	461a      	mov	r2, r3
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d08d      	beq.n	800c4b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
	...

0800c5a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c5be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6899      	ldr	r1, [r3, #8]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	4b0f      	ldr	r3, [pc, #60]	; (800c608 <UART_EndRxTransfer+0x60>)
 800c5cc:	400b      	ands	r3, r1
 800c5ce:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d107      	bne.n	800c5e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f022 0210 	bic.w	r2, r2, #16
 800c5e6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2220      	movs	r2, #32
 800c5ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c5fc:	bf00      	nop
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	effffffe 	.word	0xeffffffe

0800c60c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c618:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2200      	movs	r2, #0
 800c626:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f7ff f8d8 	bl	800b7e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c630:	bf00      	nop
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c64e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2220      	movs	r2, #32
 800c654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7ff f8b4 	bl	800b7cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c664:	bf00      	nop
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c688:	bf00      	nop
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c69c:	bf00      	nop
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d101      	bne.n	800c6be <HAL_UARTEx_DisableFifoMode+0x16>
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	e027      	b.n	800c70e <HAL_UARTEx_DisableFifoMode+0x66>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2224      	movs	r2, #36	; 0x24
 800c6ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f022 0201 	bic.w	r2, r2, #1
 800c6e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c6ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2220      	movs	r2, #32
 800c700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3714      	adds	r7, #20
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b084      	sub	sp, #16
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d101      	bne.n	800c732 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c72e:	2302      	movs	r3, #2
 800c730:	e02d      	b.n	800c78e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2224      	movs	r2, #36	; 0x24
 800c73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f022 0201 	bic.w	r2, r2, #1
 800c758:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	683a      	ldr	r2, [r7, #0]
 800c76a:	430a      	orrs	r2, r1
 800c76c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f850 	bl	800c814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	68fa      	ldr	r2, [r7, #12]
 800c77a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2220      	movs	r2, #32
 800c780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
 800c79e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d101      	bne.n	800c7ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	e02d      	b.n	800c80a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2224      	movs	r2, #36	; 0x24
 800c7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f022 0201 	bic.w	r2, r2, #1
 800c7d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f812 	bl	800c814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2220      	movs	r2, #32
 800c7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
	...

0800c814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c820:	2b00      	cmp	r3, #0
 800c822:	d108      	bne.n	800c836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c834:	e031      	b.n	800c89a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c836:	2310      	movs	r3, #16
 800c838:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c83a:	2310      	movs	r3, #16
 800c83c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	0e5b      	lsrs	r3, r3, #25
 800c846:	b2db      	uxtb	r3, r3
 800c848:	f003 0307 	and.w	r3, r3, #7
 800c84c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	0f5b      	lsrs	r3, r3, #29
 800c856:	b2db      	uxtb	r3, r3
 800c858:	f003 0307 	and.w	r3, r3, #7
 800c85c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c85e:	7bbb      	ldrb	r3, [r7, #14]
 800c860:	7b3a      	ldrb	r2, [r7, #12]
 800c862:	4911      	ldr	r1, [pc, #68]	; (800c8a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c864:	5c8a      	ldrb	r2, [r1, r2]
 800c866:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c86a:	7b3a      	ldrb	r2, [r7, #12]
 800c86c:	490f      	ldr	r1, [pc, #60]	; (800c8ac <UARTEx_SetNbDataToProcess+0x98>)
 800c86e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c870:	fb93 f3f2 	sdiv	r3, r3, r2
 800c874:	b29a      	uxth	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	7b7a      	ldrb	r2, [r7, #13]
 800c880:	4909      	ldr	r1, [pc, #36]	; (800c8a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c882:	5c8a      	ldrb	r2, [r1, r2]
 800c884:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c888:	7b7a      	ldrb	r2, [r7, #13]
 800c88a:	4908      	ldr	r1, [pc, #32]	; (800c8ac <UARTEx_SetNbDataToProcess+0x98>)
 800c88c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c88e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c892:	b29a      	uxth	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c89a:	bf00      	nop
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	0800cee8 	.word	0x0800cee8
 800c8ac:	0800cef0 	.word	0x0800cef0

0800c8b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8b0:	b084      	sub	sp, #16
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b084      	sub	sp, #16
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	f107 001c 	add.w	r0, r7, #28
 800c8be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d120      	bne.n	800c90a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	68da      	ldr	r2, [r3, #12]
 800c8d8:	4b2a      	ldr	r3, [pc, #168]	; (800c984 <USB_CoreInit+0xd4>)
 800c8da:	4013      	ands	r3, r2
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c8ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d105      	bne.n	800c8fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fa60 	bl	800cdc4 <USB_CoreReset>
 800c904:	4603      	mov	r3, r0
 800c906:	73fb      	strb	r3, [r7, #15]
 800c908:	e01a      	b.n	800c940 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fa54 	bl	800cdc4 <USB_CoreReset>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c922:	2b00      	cmp	r3, #0
 800c924:	d106      	bne.n	800c934 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	639a      	str	r2, [r3, #56]	; 0x38
 800c932:	e005      	b.n	800c940 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c942:	2b01      	cmp	r3, #1
 800c944:	d116      	bne.n	800c974 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c954:	4b0c      	ldr	r3, [pc, #48]	; (800c988 <USB_CoreInit+0xd8>)
 800c956:	4313      	orrs	r3, r2
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f043 0206 	orr.w	r2, r3, #6
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	f043 0220 	orr.w	r2, r3, #32
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c974:	7bfb      	ldrb	r3, [r7, #15]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c980:	b004      	add	sp, #16
 800c982:	4770      	bx	lr
 800c984:	ffbdffbf 	.word	0xffbdffbf
 800c988:	03ee0000 	.word	0x03ee0000

0800c98c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	f023 0201 	bic.w	r2, r3, #1
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c9c6:	78fb      	ldrb	r3, [r7, #3]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d106      	bne.n	800c9da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	60da      	str	r2, [r3, #12]
 800c9d8:	e00b      	b.n	800c9f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c9da:	78fb      	ldrb	r3, [r7, #3]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d106      	bne.n	800c9ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	60da      	str	r2, [r3, #12]
 800c9ec:	e001      	b.n	800c9f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e003      	b.n	800c9fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c9f2:	2032      	movs	r0, #50	; 0x32
 800c9f4:	f7f5 fbca 	bl	800218c <HAL_Delay>

  return HAL_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
	...

0800ca04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca04:	b084      	sub	sp, #16
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b086      	sub	sp, #24
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ca12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca16:	2300      	movs	r3, #0
 800ca18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ca1e:	2300      	movs	r3, #0
 800ca20:	613b      	str	r3, [r7, #16]
 800ca22:	e009      	b.n	800ca38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	3340      	adds	r3, #64	; 0x40
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	2200      	movs	r2, #0
 800ca30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	3301      	adds	r3, #1
 800ca36:	613b      	str	r3, [r7, #16]
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	2b0e      	cmp	r3, #14
 800ca3c:	d9f2      	bls.n	800ca24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d11c      	bne.n	800ca7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca52:	f043 0302 	orr.w	r3, r3, #2
 800ca56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	e005      	b.n	800ca8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca90:	461a      	mov	r2, r3
 800ca92:	2300      	movs	r3, #0
 800ca94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caa4:	461a      	mov	r2, r3
 800caa6:	680b      	ldr	r3, [r1, #0]
 800caa8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800caaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caac:	2b01      	cmp	r3, #1
 800caae:	d10c      	bne.n	800caca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d104      	bne.n	800cac0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cab6:	2100      	movs	r1, #0
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 f949 	bl	800cd50 <USB_SetDevSpeed>
 800cabe:	e008      	b.n	800cad2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cac0:	2101      	movs	r1, #1
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f944 	bl	800cd50 <USB_SetDevSpeed>
 800cac8:	e003      	b.n	800cad2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800caca:	2103      	movs	r1, #3
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 f93f 	bl	800cd50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cad2:	2110      	movs	r1, #16
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 f8f3 	bl	800ccc0 <USB_FlushTxFifo>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 f911 	bl	800cd0c <USB_FlushRxFifo>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cafa:	461a      	mov	r2, r3
 800cafc:	2300      	movs	r3, #0
 800cafe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb06:	461a      	mov	r2, r3
 800cb08:	2300      	movs	r3, #0
 800cb0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb12:	461a      	mov	r2, r3
 800cb14:	2300      	movs	r3, #0
 800cb16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb18:	2300      	movs	r3, #0
 800cb1a:	613b      	str	r3, [r7, #16]
 800cb1c:	e043      	b.n	800cba6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	015a      	lsls	r2, r3, #5
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	4413      	add	r3, r2
 800cb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb34:	d118      	bne.n	800cb68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10a      	bne.n	800cb52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	015a      	lsls	r2, r3, #5
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	4413      	add	r3, r2
 800cb44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb48:	461a      	mov	r2, r3
 800cb4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	e013      	b.n	800cb7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	015a      	lsls	r2, r3, #5
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	4413      	add	r3, r2
 800cb5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb5e:	461a      	mov	r2, r3
 800cb60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	e008      	b.n	800cb7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	015a      	lsls	r2, r3, #5
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4413      	add	r3, r2
 800cb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb74:	461a      	mov	r2, r3
 800cb76:	2300      	movs	r3, #0
 800cb78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	015a      	lsls	r2, r3, #5
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	4413      	add	r3, r2
 800cb82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb86:	461a      	mov	r2, r3
 800cb88:	2300      	movs	r3, #0
 800cb8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb98:	461a      	mov	r2, r3
 800cb9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	3301      	adds	r3, #1
 800cba4:	613b      	str	r3, [r7, #16]
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	693a      	ldr	r2, [r7, #16]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d3b7      	bcc.n	800cb1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbae:	2300      	movs	r3, #0
 800cbb0:	613b      	str	r3, [r7, #16]
 800cbb2:	e043      	b.n	800cc3c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	015a      	lsls	r2, r3, #5
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbca:	d118      	bne.n	800cbfe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10a      	bne.n	800cbe8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	015a      	lsls	r2, r3, #5
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	4413      	add	r3, r2
 800cbda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbde:	461a      	mov	r2, r3
 800cbe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cbe4:	6013      	str	r3, [r2, #0]
 800cbe6:	e013      	b.n	800cc10 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	015a      	lsls	r2, r3, #5
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	4413      	add	r3, r2
 800cbf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cbfa:	6013      	str	r3, [r2, #0]
 800cbfc:	e008      	b.n	800cc10 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	015a      	lsls	r2, r3, #5
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	4413      	add	r3, r2
 800cc06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	015a      	lsls	r2, r3, #5
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	4413      	add	r3, r2
 800cc18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	2300      	movs	r3, #0
 800cc20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	015a      	lsls	r2, r3, #5
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2e:	461a      	mov	r2, r3
 800cc30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	613b      	str	r3, [r7, #16]
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d3b7      	bcc.n	800cbb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc4a:	691b      	ldr	r3, [r3, #16]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cc64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d105      	bne.n	800cc78 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	f043 0210 	orr.w	r2, r3, #16
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	699a      	ldr	r2, [r3, #24]
 800cc7c:	4b0e      	ldr	r3, [pc, #56]	; (800ccb8 <USB_DevInit+0x2b4>)
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cc84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d005      	beq.n	800cc96 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	699b      	ldr	r3, [r3, #24]
 800cc8e:	f043 0208 	orr.w	r2, r3, #8
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d105      	bne.n	800cca8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	699a      	ldr	r2, [r3, #24]
 800cca0:	4b06      	ldr	r3, [pc, #24]	; (800ccbc <USB_DevInit+0x2b8>)
 800cca2:	4313      	orrs	r3, r2
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3718      	adds	r7, #24
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ccb4:	b004      	add	sp, #16
 800ccb6:	4770      	bx	lr
 800ccb8:	803c3800 	.word	0x803c3800
 800ccbc:	40000004 	.word	0x40000004

0800ccc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ccca:	2300      	movs	r3, #0
 800cccc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	019b      	lsls	r3, r3, #6
 800ccd2:	f043 0220 	orr.w	r2, r3, #32
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	60fb      	str	r3, [r7, #12]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	4a09      	ldr	r2, [pc, #36]	; (800cd08 <USB_FlushTxFifo+0x48>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d901      	bls.n	800ccec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e006      	b.n	800ccfa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	f003 0320 	and.w	r3, r3, #32
 800ccf4:	2b20      	cmp	r3, #32
 800ccf6:	d0f0      	beq.n	800ccda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3714      	adds	r7, #20
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	00030d40 	.word	0x00030d40

0800cd0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2210      	movs	r2, #16
 800cd1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3301      	adds	r3, #1
 800cd22:	60fb      	str	r3, [r7, #12]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4a09      	ldr	r2, [pc, #36]	; (800cd4c <USB_FlushRxFifo+0x40>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d901      	bls.n	800cd30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	e006      	b.n	800cd3e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	f003 0310 	and.w	r3, r3, #16
 800cd38:	2b10      	cmp	r3, #16
 800cd3a:	d0f0      	beq.n	800cd1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	00030d40 	.word	0x00030d40

0800cd50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	78fb      	ldrb	r3, [r7, #3]
 800cd6a:	68f9      	ldr	r1, [r7, #12]
 800cd6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd70:	4313      	orrs	r3, r2
 800cd72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3714      	adds	r7, #20
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr

0800cd82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cd82:	b480      	push	{r7}
 800cd84:	b085      	sub	sp, #20
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd9c:	f023 0303 	bic.w	r3, r3, #3
 800cda0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdb0:	f043 0302 	orr.w	r3, r3, #2
 800cdb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3714      	adds	r7, #20
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	60fb      	str	r3, [r7, #12]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	4a13      	ldr	r2, [pc, #76]	; (800ce28 <USB_CoreReset+0x64>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d901      	bls.n	800cde2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cdde:	2303      	movs	r3, #3
 800cde0:	e01b      	b.n	800ce1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	daf2      	bge.n	800cdd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cdea:	2300      	movs	r3, #0
 800cdec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	f043 0201 	orr.w	r2, r3, #1
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	60fb      	str	r3, [r7, #12]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	4a09      	ldr	r2, [pc, #36]	; (800ce28 <USB_CoreReset+0x64>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d901      	bls.n	800ce0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	e006      	b.n	800ce1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	f003 0301 	and.w	r3, r3, #1
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d0f0      	beq.n	800cdfa <USB_CoreReset+0x36>

  return HAL_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	00030d40 	.word	0x00030d40

0800ce2c <__libc_init_array>:
 800ce2c:	b570      	push	{r4, r5, r6, lr}
 800ce2e:	4d0d      	ldr	r5, [pc, #52]	; (800ce64 <__libc_init_array+0x38>)
 800ce30:	4c0d      	ldr	r4, [pc, #52]	; (800ce68 <__libc_init_array+0x3c>)
 800ce32:	1b64      	subs	r4, r4, r5
 800ce34:	10a4      	asrs	r4, r4, #2
 800ce36:	2600      	movs	r6, #0
 800ce38:	42a6      	cmp	r6, r4
 800ce3a:	d109      	bne.n	800ce50 <__libc_init_array+0x24>
 800ce3c:	4d0b      	ldr	r5, [pc, #44]	; (800ce6c <__libc_init_array+0x40>)
 800ce3e:	4c0c      	ldr	r4, [pc, #48]	; (800ce70 <__libc_init_array+0x44>)
 800ce40:	f000 f82e 	bl	800cea0 <_init>
 800ce44:	1b64      	subs	r4, r4, r5
 800ce46:	10a4      	asrs	r4, r4, #2
 800ce48:	2600      	movs	r6, #0
 800ce4a:	42a6      	cmp	r6, r4
 800ce4c:	d105      	bne.n	800ce5a <__libc_init_array+0x2e>
 800ce4e:	bd70      	pop	{r4, r5, r6, pc}
 800ce50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce54:	4798      	blx	r3
 800ce56:	3601      	adds	r6, #1
 800ce58:	e7ee      	b.n	800ce38 <__libc_init_array+0xc>
 800ce5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce5e:	4798      	blx	r3
 800ce60:	3601      	adds	r6, #1
 800ce62:	e7f2      	b.n	800ce4a <__libc_init_array+0x1e>
 800ce64:	0800cf00 	.word	0x0800cf00
 800ce68:	0800cf00 	.word	0x0800cf00
 800ce6c:	0800cf00 	.word	0x0800cf00
 800ce70:	0800cf04 	.word	0x0800cf04

0800ce74 <memcpy>:
 800ce74:	440a      	add	r2, r1
 800ce76:	4291      	cmp	r1, r2
 800ce78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce7c:	d100      	bne.n	800ce80 <memcpy+0xc>
 800ce7e:	4770      	bx	lr
 800ce80:	b510      	push	{r4, lr}
 800ce82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce8a:	4291      	cmp	r1, r2
 800ce8c:	d1f9      	bne.n	800ce82 <memcpy+0xe>
 800ce8e:	bd10      	pop	{r4, pc}

0800ce90 <memset>:
 800ce90:	4402      	add	r2, r0
 800ce92:	4603      	mov	r3, r0
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d100      	bne.n	800ce9a <memset+0xa>
 800ce98:	4770      	bx	lr
 800ce9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce9e:	e7f9      	b.n	800ce94 <memset+0x4>

0800cea0 <_init>:
 800cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea2:	bf00      	nop
 800cea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cea6:	bc08      	pop	{r3}
 800cea8:	469e      	mov	lr, r3
 800ceaa:	4770      	bx	lr

0800ceac <_fini>:
 800ceac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceae:	bf00      	nop
 800ceb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb2:	bc08      	pop	{r3}
 800ceb4:	469e      	mov	lr, r3
 800ceb6:	4770      	bx	lr
