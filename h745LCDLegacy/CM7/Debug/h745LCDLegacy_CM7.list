
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf88  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800d220  0800d220  0001d220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d260  0800d260  000314c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d260  0800d260  0001d260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d268  0800d268  000314c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d268  0800d268  0001d268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d26c  0800d26c  0001d26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00011400  24000000  0800d270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24011400  0801e670  00031400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24011460  0801e6d0  00031460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c854  240114c0  0801e730  000314c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2401dd14  0801e730  0003dd14  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033c69  00000000  00000000  000314ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c1b  00000000  00000000  00065157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b00  00000000  00000000  00069d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001988  00000000  00000000  0006b878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ddbf  00000000  00000000  0006d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022b8f  00000000  00000000  000aafbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00196f13  00000000  00000000  000cdb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00264a61  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007694  00000000  00000000  00264ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240114c0 	.word	0x240114c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d208 	.word	0x0800d208

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240114c4 	.word	0x240114c4
 80002d4:	0800d208 	.word	0x0800d208

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <LCD_init>:

//การสั่งขา D/C หรือ A0 เพื่อส่ง command หรือ parameter
//เปลี่ยนแปลง data command ให้เป็น high เพื่อส่ง parameter
//เปลี่ยนแปลง data command ให้เป็น low เพื่อส่ง command
//ส่งข้อมูลภาพไปในจอใช้ขา data command high
void LCD_init(LCDHandle *lcd){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	//reset LCD
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	b29b      	uxth	r3, r3
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	f005 fa3d 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fcae 	bl	8002080 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6858      	ldr	r0, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	b29b      	uxth	r3, r3
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	f005 fa31 	bl	8005b98 <HAL_GPIO_WritePin>

	//select SPI CS
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	b29b      	uxth	r3, r3
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f005 fa28 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 fc99 	bl	8002080 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6898      	ldr	r0, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f005 fa1c 	bl	8005b98 <HAL_GPIO_WritePin>

	//write reset , sleep out, display on, scan order
	//write command 0x01, 0x11, 0x29, 0x36
	//4 = 4 commands
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f005 fa13 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2204      	movs	r2, #4
 800077a:	4938      	ldr	r1, [pc, #224]	; (800085c <LCD_init+0x158>)
 800077c:	f008 fcae 	bl	80090dc <HAL_SPI_Transmit>

	//write parameter of scan order
	//write parameter 0b01001000
	//&LCDSTARTUPSeq[4] 0ffset ไป 4 ตำแหน่ง
	//1 = 1 parameter
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68d8      	ldr	r0, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	b29b      	uxth	r3, r3
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f005 fa03 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	2201      	movs	r2, #1
 800079a:	4931      	ldr	r1, [pc, #196]	; (8000860 <LCD_init+0x15c>)
 800079c:	f008 fc9e 	bl	80090dc <HAL_SPI_Transmit>

	//write set C area
	//write command 0x2a
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f005 f9f3 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	492a      	ldr	r1, [pc, #168]	; (8000864 <LCD_init+0x160>)
 80007bc:	f008 fc8e 	bl	80090dc <HAL_SPI_Transmit>

	//write set C area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68d8      	ldr	r0, [r3, #12]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	f005 f9e3 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2204      	movs	r2, #4
 80007da:	4923      	ldr	r1, [pc, #140]	; (8000868 <LCD_init+0x164>)
 80007dc:	f008 fc7e 	bl	80090dc <HAL_SPI_Transmit>

	//write set R area
	//write command 0x2b
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68d8      	ldr	r0, [r3, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f005 f9d3 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2201      	movs	r2, #1
 80007fa:	491c      	ldr	r1, [pc, #112]	; (800086c <LCD_init+0x168>)
 80007fc:	f008 fc6e 	bl	80090dc <HAL_SPI_Transmit>

	//write set R area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68d8      	ldr	r0, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	b29b      	uxth	r3, r3
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	f005 f9c3 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2204      	movs	r2, #4
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <LCD_init+0x16c>)
 800081c:	f008 fc5e 	bl	80090dc <HAL_SPI_Transmit>

	//write to graphic memory
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68d8      	ldr	r0, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f005 f9b3 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	2201      	movs	r2, #1
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LCD_init+0x170>)
 800083c:	f008 fc4e 	bl	80090dc <HAL_SPI_Transmit>

	//set DC to high to read & send image data
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68d8      	ldr	r0, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	b29b      	uxth	r3, r3
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f005 f9a3 	bl	8005b98 <HAL_GPIO_WritePin>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000008 	.word	0x24000008
 8000860:	2400000c 	.word	0x2400000c
 8000864:	2400000d 	.word	0x2400000d
 8000868:	2400000e 	.word	0x2400000e
 800086c:	24000012 	.word	0x24000012
 8000870:	24000013 	.word	0x24000013
 8000874:	24000017 	.word	0x24000017

08000878 <LCD_flush>:

//ส่งข้อมูลของ frame ไปให้จอ
void LCD_flush(LCDHandle *lcd)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	//circular dma
	//Framememory มีขนาดเท่ากับหน้าจอ
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000888:	4903      	ldr	r1, [pc, #12]	; (8000898 <LCD_flush+0x20>)
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fe18 	bl	80094c0 <HAL_SPI_Transmit_DMA>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	240114dc 	.word	0x240114dc

0800089c <UARTInit>:
#include "stm32h7xx_hal.h"
#include "Uart.h"


void UARTInit(UARTStucrture *uart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->RxLen);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	88db      	ldrh	r3, [r3, #6]
 80008a8:	4619      	mov	r1, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	f00c fbdc 	bl	800d068 <calloc>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->TxLen);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	889b      	ldrh	r3, [r3, #4]
 80008bc:	4619      	mov	r1, r3
 80008be:	2001      	movs	r0, #1
 80008c0:	f00c fbd2 	bl	800d068 <calloc>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	81da      	strh	r2, [r3, #14]

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6919      	ldr	r1, [r3, #16]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	88db      	ldrh	r3, [r3, #6]
 80008fa:	461a      	mov	r2, r3
 80008fc:	f00a fc3e 	bl	800b17c <HAL_UART_Receive_DMA>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b5b0      	push	{r4, r5, r7, lr}
 800090a:	b0a0      	sub	sp, #128	; 0x80
 800090c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800090e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000912:	67fb      	str	r3, [r7, #124]	; 0x7c
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000914:	bf00      	nop
 8000916:	4b79      	ldr	r3, [pc, #484]	; (8000afc <main+0x1f4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <main+0x24>
 8000922:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000928:	2b00      	cmp	r3, #0
 800092a:	dcf4      	bgt.n	8000916 <main+0xe>
		;
	if (timeout < 0) {
 800092c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800092e:	2b00      	cmp	r3, #0
 8000930:	da01      	bge.n	8000936 <main+0x2e>
		Error_Handler();
 8000932:	f000 fea9 	bl	8001688 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f001 fb11 	bl	8001f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 fa61 	bl	8000e00 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800093e:	4b6f      	ldr	r3, [pc, #444]	; (8000afc <main+0x1f4>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	4a6d      	ldr	r2, [pc, #436]	; (8000afc <main+0x1f4>)
 8000946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094e:	4b6b      	ldr	r3, [pc, #428]	; (8000afc <main+0x1f4>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
 800095a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800095c:	2000      	movs	r0, #0
 800095e:	f005 f935 	bl	8005bcc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000962:	2100      	movs	r1, #0
 8000964:	2000      	movs	r0, #0
 8000966:	f005 f94b 	bl	8005c00 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800096a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096e:	67fb      	str	r3, [r7, #124]	; 0x7c
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000970:	bf00      	nop
 8000972:	4b62      	ldr	r3, [pc, #392]	; (8000afc <main+0x1f4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800097a:	2b00      	cmp	r3, #0
 800097c:	d104      	bne.n	8000988 <main+0x80>
 800097e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000984:	2b00      	cmp	r3, #0
 8000986:	dcf4      	bgt.n	8000972 <main+0x6a>
		;
	if (timeout < 0) {
 8000988:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800098a:	2b00      	cmp	r3, #0
 800098c:	da01      	bge.n	8000992 <main+0x8a>
		Error_Handler();
 800098e:	f000 fe7b 	bl	8001688 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f000 fd4b 	bl	800142c <MX_GPIO_Init>
  MX_ETH_Init();
 8000996:	f000 fab9 	bl	8000f0c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800099a:	f000 fc99 	bl	80012d0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800099e:	f000 fd15 	bl	80013cc <MX_DMA_Init>
  MX_SPI1_Init();
 80009a2:	f000 fb91 	bl	80010c8 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009a6:	f000 fcdf 	bl	8001368 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80009aa:	f000 fbe5 	bl	8001178 <MX_TIM1_Init>
  MX_RTC_Init();
 80009ae:	f000 faf9 	bl	8000fa4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  	//�?ำหนดขา pin
	ST7735.hspi = &hspi1;
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <main+0x1f8>)
 80009b4:	4a53      	ldr	r2, [pc, #332]	; (8000b04 <main+0x1fc>)
 80009b6:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 80009b8:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <main+0x1f8>)
 80009ba:	4a53      	ldr	r2, [pc, #332]	; (8000b08 <main+0x200>)
 80009bc:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 80009be:	4b50      	ldr	r3, [pc, #320]	; (8000b00 <main+0x1f8>)
 80009c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c4:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 80009c6:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <main+0x1f8>)
 80009c8:	4a4f      	ldr	r2, [pc, #316]	; (8000b08 <main+0x200>)
 80009ca:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 80009cc:	4b4c      	ldr	r3, [pc, #304]	; (8000b00 <main+0x1f8>)
 80009ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d2:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 80009d4:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <main+0x1f8>)
 80009d6:	4a4d      	ldr	r2, [pc, #308]	; (8000b0c <main+0x204>)
 80009d8:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 80009da:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <main+0x1f8>)
 80009dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e0:	611a      	str	r2, [r3, #16]
	//เริ่ม�?ารเขียน sequence data
	LCD_init(&ST7735);
 80009e2:	4847      	ldr	r0, [pc, #284]	; (8000b00 <main+0x1f8>)
 80009e4:	f7ff fe8e 	bl	8000704 <LCD_init>
	//flush ข้อมูล dma
	LCD_flush(&ST7735);
 80009e8:	4845      	ldr	r0, [pc, #276]	; (8000b00 <main+0x1f8>)
 80009ea:	f7ff ff45 	bl	8000878 <LCD_flush>
	//รับข้อมูลภาพด้วย uart
	UART2.huart = &huart3;
 80009ee:	4b48      	ldr	r3, [pc, #288]	; (8000b10 <main+0x208>)
 80009f0:	4a48      	ldr	r2, [pc, #288]	; (8000b14 <main+0x20c>)
 80009f2:	601a      	str	r2, [r3, #0]
	UART2.RxLen =255;
 80009f4:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <main+0x208>)
 80009f6:	22ff      	movs	r2, #255	; 0xff
 80009f8:	80da      	strh	r2, [r3, #6]
	UART2.TxLen =255;
 80009fa:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <main+0x208>)
 80009fc:	22ff      	movs	r2, #255	; 0xff
 80009fe:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 8000a00:	4843      	ldr	r0, [pc, #268]	; (8000b10 <main+0x208>)
 8000a02:	f7ff ff4b 	bl	800089c <UARTInit>
	UARTResetStart(&UART2);
 8000a06:	4842      	ldr	r0, [pc, #264]	; (8000b10 <main+0x208>)
 8000a08:	f7ff ff6d 	bl	80008e6 <UARTResetStart>

	//start pwm
	HAL_TIM_Base_Start(&htim1);
 8000a0c:	4842      	ldr	r0, [pc, #264]	; (8000b18 <main+0x210>)
 8000a0e:	f009 fa5d 	bl	8009ecc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a12:	2100      	movs	r1, #0
 8000a14:	4840      	ldr	r0, [pc, #256]	; (8000b18 <main+0x210>)
 8000a16:	f009 fb23 	bl	800a060 <HAL_TIM_PWM_Start>

	//lcd UI
	memcpy(Framememory,fan,sizeof(fan));
 8000a1a:	4a40      	ldr	r2, [pc, #256]	; (8000b1c <main+0x214>)
 8000a1c:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <main+0x218>)
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a26:	461a      	mov	r2, r3
 8000a28:	f00c fb50 	bl	800d0cc <memcpy>

	int i,j,n = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	673b      	str	r3, [r7, #112]	; 0x70
	//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
	//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
	//add next array 384 (128*3)
	for(i = 25956; i <= 37760; i = i+384 )
 8000a30:	f246 5364 	movw	r3, #25956	; 0x6564
 8000a34:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a36:	e019      	b.n	8000a6c <main+0x164>
	{
		//lenght*rgb = 32*3 = 96 (0-95)
		for(j=0;j<96;j++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	677b      	str	r3, [r7, #116]	; 0x74
 8000a3c:	e00c      	b.n	8000a58 <main+0x150>
		{
			Framememory[i+j] = speed1[j+n];
 8000a3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a42:	441a      	add	r2, r3
 8000a44:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a48:	440b      	add	r3, r1
 8000a4a:	4936      	ldr	r1, [pc, #216]	; (8000b24 <main+0x21c>)
 8000a4c:	5c89      	ldrb	r1, [r1, r2]
 8000a4e:	4a33      	ldr	r2, [pc, #204]	; (8000b1c <main+0x214>)
 8000a50:	54d1      	strb	r1, [r2, r3]
		for(j=0;j<96;j++)
 8000a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a54:	3301      	adds	r3, #1
 8000a56:	677b      	str	r3, [r7, #116]	; 0x74
 8000a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a5a:	2b5f      	cmp	r3, #95	; 0x5f
 8000a5c:	ddef      	ble.n	8000a3e <main+0x136>
		}
		//offset 150
		n = n +96;
 8000a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a60:	3360      	adds	r3, #96	; 0x60
 8000a62:	673b      	str	r3, [r7, #112]	; 0x70
	for(i = 25956; i <= 37760; i = i+384 )
 8000a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a66:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a6e:	f249 3280 	movw	r2, #37760	; 0x9380
 8000a72:	4293      	cmp	r3, r2
 8000a74:	dde0      	ble.n	8000a38 <main+0x130>
	}

	int a,b,c = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	667b      	str	r3, [r7, #100]	; 0x64
	//start at pixel index 23100 (red start at index 0 so add offset 23100%3 = 0)
	//stop at pixel index 39996 (start + length*rgb*( height of pixel number - 1) = 23100+128*3*(45-1) = 39996)
	//add next array 384 (128*3)
	for(a = 23100; a <= 39996; a = a+384 )
 8000a7a:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000a80:	e019      	b.n	8000ab6 <main+0x1ae>
	{
		//lenght*rgb = 45*3 = 135 (0-134)
		for(b=0;b<135;b++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8000a86:	e00c      	b.n	8000aa2 <main+0x19a>
		{
			Framememory[a+b] = fan_off[b+c];
 8000a88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a8c:	441a      	add	r2, r3
 8000a8e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a92:	440b      	add	r3, r1
 8000a94:	4924      	ldr	r1, [pc, #144]	; (8000b28 <main+0x220>)
 8000a96:	5c89      	ldrb	r1, [r1, r2]
 8000a98:	4a20      	ldr	r2, [pc, #128]	; (8000b1c <main+0x214>)
 8000a9a:	54d1      	strb	r1, [r2, r3]
		for(b=0;b<135;b++)
 8000a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8000aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000aa4:	2b86      	cmp	r3, #134	; 0x86
 8000aa6:	ddef      	ble.n	8000a88 <main+0x180>
		}
		//offset 135
		c = c +135;
 8000aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aaa:	3387      	adds	r3, #135	; 0x87
 8000aac:	667b      	str	r3, [r7, #100]	; 0x64
	for(a = 23100; a <= 39996; a = a+384 )
 8000aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ab0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ab8:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000abc:	4293      	cmp	r3, r2
 8000abe:	dde0      	ble.n	8000a82 <main+0x17a>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		PIR[0] = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin); //save PIR current state
 8000ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac4:	4819      	ldr	r0, [pc, #100]	; (8000b2c <main+0x224>)
 8000ac6:	f005 f84f 	bl	8005b68 <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <main+0x228>)
 8000ad0:	701a      	strb	r2, [r3, #0]

		//if (HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin) == GPIO_PIN_SET)
		if (PIR[0] == GPIO_PIN_SET && PIR[1] == GPIO_PIN_RESET )
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <main+0x228>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d171      	bne.n	8000bbe <main+0x2b6>
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <main+0x228>)
 8000adc:	785b      	ldrb	r3, [r3, #1]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d16d      	bne.n	8000bbe <main+0x2b6>
		//if (PIR[0] == GPIO_PIN_SET && PIR[1] == GPIO_PIN_SET )
		{
			LCD_flush(&ST7735);
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <main+0x1f8>)
 8000ae4:	f7ff fec8 	bl	8000878 <LCD_flush>
			//rtc work
			//start clock
			int a,b,c = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	65bb      	str	r3, [r7, #88]	; 0x58
			//start at pixel index 23100 (red start at index 0 so add offset 23100%3 = 0)
			//stop at pixel index 39996 (start + length*rgb*( height of pixel number - 1) = 23100+128*3*(45-1) = 39996)
			//add next array 384 (128*3)
			for(a = 23100; a <= 39996; a = a+384 )
 8000aec:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000af0:	663b      	str	r3, [r7, #96]	; 0x60
 8000af2:	e036      	b.n	8000b62 <main+0x25a>
			{
				//lenght*rgb = 45*3 = 135 (0-134)
				for(b=0;b<135;b++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000af8:	e029      	b.n	8000b4e <main+0x246>
 8000afa:	bf00      	nop
 8000afc:	58024400 	.word	0x58024400
 8000b00:	2401d4dc 	.word	0x2401d4dc
 8000b04:	2401db30 	.word	0x2401db30
 8000b08:	58020c00 	.word	0x58020c00
 8000b0c:	58021800 	.word	0x58021800
 8000b10:	2401d4f8 	.word	0x2401d4f8
 8000b14:	2401d5ac 	.word	0x2401d5ac
 8000b18:	2401dae4 	.word	0x2401dae4
 8000b1c:	240114dc 	.word	0x240114dc
 8000b20:	24000018 	.word	0x24000018
 8000b24:	2400ef90 	.word	0x2400ef90
 8000b28:	2400c018 	.word	0x2400c018
 8000b2c:	58021000 	.word	0x58021000
 8000b30:	2401d51c 	.word	0x2401d51c
				{
					Framememory[a+b] = fan_on[b+c];
 8000b34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b38:	441a      	add	r2, r3
 8000b3a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b3e:	440b      	add	r3, r1
 8000b40:	499d      	ldr	r1, [pc, #628]	; (8000db8 <main+0x4b0>)
 8000b42:	5c89      	ldrb	r1, [r1, r2]
 8000b44:	4a9d      	ldr	r2, [pc, #628]	; (8000dbc <main+0x4b4>)
 8000b46:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b50:	2b86      	cmp	r3, #134	; 0x86
 8000b52:	ddef      	ble.n	8000b34 <main+0x22c>
				}
				//offset 135
				c = c +135;
 8000b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b56:	3387      	adds	r3, #135	; 0x87
 8000b58:	65bb      	str	r3, [r7, #88]	; 0x58
			for(a = 23100; a <= 39996; a = a+384 )
 8000b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b5c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b60:	663b      	str	r3, [r7, #96]	; 0x60
 8000b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b64:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	ddc3      	ble.n	8000af4 <main+0x1ec>
			}


			RTC_ON = 1;
 8000b6c:	4b94      	ldr	r3, [pc, #592]	; (8000dc0 <main+0x4b8>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]

			RTC_TimeTypeDef sTime = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
			sTime.Hours =0x00; //0x14 (2 pm.)
 8000b82:	2300      	movs	r3, #0
 8000b84:	773b      	strb	r3, [r7, #28]
			sTime.Minutes =0x00; //0x30 (half hour or 30 min)
 8000b86:	2300      	movs	r3, #0
 8000b88:	777b      	strb	r3, [r7, #29]
			sTime.Seconds = 0x00; // 0 second
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	77bb      	strb	r3, [r7, #30]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	2201      	movs	r2, #1
 8000b94:	4619      	mov	r1, r3
 8000b96:	488b      	ldr	r0, [pc, #556]	; (8000dc4 <main+0x4bc>)
 8000b98:	f007 fd6e 	bl	8008678 <HAL_RTC_SetTime>

			RTC_DateTypeDef sDate ={0};
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
			sDate.Date = 0x20;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	76bb      	strb	r3, [r7, #26]
			sDate.Month = 0x10;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	767b      	strb	r3, [r7, #25]
			sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	763b      	strb	r3, [r7, #24]
			sDate.Year = 0x21;
 8000bac:	2321      	movs	r3, #33	; 0x21
 8000bae:	76fb      	strb	r3, [r7, #27]
			HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4882      	ldr	r0, [pc, #520]	; (8000dc4 <main+0x4bc>)
 8000bba:	f007 fe57 	bl	800886c <HAL_RTC_SetDate>
//
//			//show lcd mode function
//
//
//		}
		PIR[1] = PIR[0]; // save PIR new state
 8000bbe:	4b82      	ldr	r3, [pc, #520]	; (8000dc8 <main+0x4c0>)
 8000bc0:	781a      	ldrb	r2, [r3, #0]
 8000bc2:	4b81      	ldr	r3, [pc, #516]	; (8000dc8 <main+0x4c0>)
 8000bc4:	705a      	strb	r2, [r3, #1]

		button1[0]= HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin); //save s1 current state
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	4880      	ldr	r0, [pc, #512]	; (8000dcc <main+0x4c4>)
 8000bca:	f004 ffcd 	bl	8005b68 <HAL_GPIO_ReadPin>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b7f      	ldr	r3, [pc, #508]	; (8000dd0 <main+0x4c8>)
 8000bd4:	701a      	strb	r2, [r3, #0]
		button2[0]= HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin); //save s2 current state
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	487c      	ldr	r0, [pc, #496]	; (8000dcc <main+0x4c4>)
 8000bda:	f004 ffc5 	bl	8005b68 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b7c      	ldr	r3, [pc, #496]	; (8000dd4 <main+0x4cc>)
 8000be4:	701a      	strb	r2, [r3, #0]
		button3[0]= HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin); //save s1 current state
 8000be6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bea:	487b      	ldr	r0, [pc, #492]	; (8000dd8 <main+0x4d0>)
 8000bec:	f004 ffbc 	bl	8005b68 <HAL_GPIO_ReadPin>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b79      	ldr	r3, [pc, #484]	; (8000ddc <main+0x4d4>)
 8000bf6:	701a      	strb	r2, [r3, #0]

		if(button1[1]==GPIO_PIN_SET && button1[0]==GPIO_PIN_RESET ) // if press s1
 8000bf8:	4b75      	ldr	r3, [pc, #468]	; (8000dd0 <main+0x4c8>)
 8000bfa:	785b      	ldrb	r3, [r3, #1]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d12f      	bne.n	8000c60 <main+0x358>
 8000c00:	4b73      	ldr	r3, [pc, #460]	; (8000dd0 <main+0x4c8>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d12b      	bne.n	8000c60 <main+0x358>
		{
			LCD_flush(&ST7735);
 8000c08:	4875      	ldr	r0, [pc, #468]	; (8000de0 <main+0x4d8>)
 8000c0a:	f7ff fe35 	bl	8000878 <LCD_flush>
			PWM = 2500;
 8000c0e:	4b75      	ldr	r3, [pc, #468]	; (8000de4 <main+0x4dc>)
 8000c10:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000c14:	601a      	str	r2, [r3, #0]
			//fan_mode = 1;
			//show mode 1
			//memcpy(Framememory,owl,sizeof(owl));
			//show speed
			int i,j,n = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	64fb      	str	r3, [r7, #76]	; 0x4c
			//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
			//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
			//add next array 384 (128*3)
			for(i = 25956; i <= 37760; i = i+384 )
 8000c1a:	f246 5364 	movw	r3, #25956	; 0x6564
 8000c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8000c20:	e019      	b.n	8000c56 <main+0x34e>
			{
				//lenght*rgb = 32*3 = 96 (0-95)
				for(j=0;j<96;j++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	653b      	str	r3, [r7, #80]	; 0x50
 8000c26:	e00c      	b.n	8000c42 <main+0x33a>
				{
					Framememory[i+j] = speed1[j+n];
 8000c28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c2c:	441a      	add	r2, r3
 8000c2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c32:	440b      	add	r3, r1
 8000c34:	496c      	ldr	r1, [pc, #432]	; (8000de8 <main+0x4e0>)
 8000c36:	5c89      	ldrb	r1, [r1, r2]
 8000c38:	4a60      	ldr	r2, [pc, #384]	; (8000dbc <main+0x4b4>)
 8000c3a:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c3e:	3301      	adds	r3, #1
 8000c40:	653b      	str	r3, [r7, #80]	; 0x50
 8000c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c44:	2b5f      	cmp	r3, #95	; 0x5f
 8000c46:	ddef      	ble.n	8000c28 <main+0x320>
				}
				//offset 150
				n = n +96;
 8000c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c4a:	3360      	adds	r3, #96	; 0x60
 8000c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
			for(i = 25956; i <= 37760; i = i+384 )
 8000c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c54:	657b      	str	r3, [r7, #84]	; 0x54
 8000c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c58:	f249 3280 	movw	r2, #37760	; 0x9380
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	dde0      	ble.n	8000c22 <main+0x31a>
			}
		}

		if(button2[1]==GPIO_PIN_SET && button2[0]==GPIO_PIN_RESET ) // if press s2
 8000c60:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <main+0x4cc>)
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d12f      	bne.n	8000cc8 <main+0x3c0>
 8000c68:	4b5a      	ldr	r3, [pc, #360]	; (8000dd4 <main+0x4cc>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d12b      	bne.n	8000cc8 <main+0x3c0>
		{
			LCD_flush(&ST7735);
 8000c70:	485b      	ldr	r0, [pc, #364]	; (8000de0 <main+0x4d8>)
 8000c72:	f7ff fe01 	bl	8000878 <LCD_flush>
			PWM = 5000;
 8000c76:	4b5b      	ldr	r3, [pc, #364]	; (8000de4 <main+0x4dc>)
 8000c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c7c:	601a      	str	r2, [r3, #0]
			//fan_mode = 2;
			//show mode 2
			//memcpy(Framememory,dog,sizeof(dog));
			//show speed
			int i,j,n = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	643b      	str	r3, [r7, #64]	; 0x40
			//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
			//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
			//add next array 384 (128*3)
			for(i = 25956; i <= 37760; i = i+384 )
 8000c82:	f246 5364 	movw	r3, #25956	; 0x6564
 8000c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c88:	e019      	b.n	8000cbe <main+0x3b6>
			{
				//lenght*rgb = 32*3 = 96 (0-95)
				for(j=0;j<96;j++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8000c8e:	e00c      	b.n	8000caa <main+0x3a2>
				{
					Framememory[i+j] = speed2[j+n];
 8000c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c94:	441a      	add	r2, r3
 8000c96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c9a:	440b      	add	r3, r1
 8000c9c:	4953      	ldr	r1, [pc, #332]	; (8000dec <main+0x4e4>)
 8000c9e:	5c89      	ldrb	r1, [r1, r2]
 8000ca0:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <main+0x4b4>)
 8000ca2:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8000caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cac:	2b5f      	cmp	r3, #95	; 0x5f
 8000cae:	ddef      	ble.n	8000c90 <main+0x388>
				}
				//offset 150
				n = n +96;
 8000cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cb2:	3360      	adds	r3, #96	; 0x60
 8000cb4:	643b      	str	r3, [r7, #64]	; 0x40
			for(i = 25956; i <= 37760; i = i+384 )
 8000cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cc0:	f249 3280 	movw	r2, #37760	; 0x9380
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	dde0      	ble.n	8000c8a <main+0x382>
			}
		}

		if(button3[1]==GPIO_PIN_SET && button3[0]==GPIO_PIN_RESET ) // if press s3
 8000cc8:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <main+0x4d4>)
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d12f      	bne.n	8000d30 <main+0x428>
 8000cd0:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <main+0x4d4>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d12b      	bne.n	8000d30 <main+0x428>
		{
			LCD_flush(&ST7735);
 8000cd8:	4841      	ldr	r0, [pc, #260]	; (8000de0 <main+0x4d8>)
 8000cda:	f7ff fdcd 	bl	8000878 <LCD_flush>
			PWM = 10000;
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <main+0x4dc>)
 8000ce0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ce4:	601a      	str	r2, [r3, #0]
			//fan_mode = 3;
			//show mode
			//memcpy(Framememory,man,sizeof(man));
			//show speed
			int i,j,n = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
			//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
			//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
			//add next array 384 (128*3)
			for(i = 25956; i <= 37760; i = i+384 )
 8000cea:	f246 5364 	movw	r3, #25956	; 0x6564
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cf0:	e019      	b.n	8000d26 <main+0x41e>
			{
				//lenght*rgb = 32*3 = 96 (0-95)
				for(j=0;j<96;j++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cf6:	e00c      	b.n	8000d12 <main+0x40a>
				{
					Framememory[i+j] = speed3[j+n];
 8000cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfc:	441a      	add	r2, r3
 8000cfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d02:	440b      	add	r3, r1
 8000d04:	493a      	ldr	r1, [pc, #232]	; (8000df0 <main+0x4e8>)
 8000d06:	5c89      	ldrb	r1, [r1, r2]
 8000d08:	4a2c      	ldr	r2, [pc, #176]	; (8000dbc <main+0x4b4>)
 8000d0a:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d0e:	3301      	adds	r3, #1
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d14:	2b5f      	cmp	r3, #95	; 0x5f
 8000d16:	ddef      	ble.n	8000cf8 <main+0x3f0>
				}
				//offset 150
				n = n +96;
 8000d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1a:	3360      	adds	r3, #96	; 0x60
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
			for(i = 25956; i <= 37760; i = i+384 )
 8000d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d20:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d28:	f249 3280 	movw	r2, #37760	; 0x9380
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	dde0      	ble.n	8000cf2 <main+0x3ea>
			}
		}

		button1[1] = button1[0]; // save S1 new state
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <main+0x4c8>)
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <main+0x4c8>)
 8000d36:	705a      	strb	r2, [r3, #1]
		button2[1] = button2[0]; // save S2 new state
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <main+0x4cc>)
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <main+0x4cc>)
 8000d3e:	705a      	strb	r2, [r3, #1]
		button3[1] = button3[0]; // save S3 new state
 8000d40:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <main+0x4d4>)
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <main+0x4d4>)
 8000d46:	705a      	strb	r2, [r3, #1]

		if (RTC_ON == 1)
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <main+0x4b8>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d128      	bne.n	8000da2 <main+0x49a>
		{
			RTC_TimeTypeDef sTime = NowTime;
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <main+0x4ec>)
 8000d52:	1d3c      	adds	r4, r7, #4
 8000d54:	461d      	mov	r5, r3
 8000d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d5a:	682b      	ldr	r3, [r5, #0]
 8000d5c:	6023      	str	r3, [r4, #0]
			if (sTime.Seconds >= 0x60)
 8000d5e:	79bb      	ldrb	r3, [r7, #6]
 8000d60:	2b5f      	cmp	r3, #95	; 0x5f
 8000d62:	d919      	bls.n	8000d98 <main+0x490>
			{
				sTime.Seconds -= 0x60;
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	3b60      	subs	r3, #96	; 0x60
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	71bb      	strb	r3, [r7, #6]
				sTime.Minutes++;
 8000d6c:	797b      	ldrb	r3, [r7, #5]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	717b      	strb	r3, [r7, #5]
				if (sTime.Minutes >= 0x60)
 8000d74:	797b      	ldrb	r3, [r7, #5]
 8000d76:	2b5f      	cmp	r3, #95	; 0x5f
 8000d78:	d90e      	bls.n	8000d98 <main+0x490>
				{
					sTime.Minutes -= 0x60;
 8000d7a:	797b      	ldrb	r3, [r7, #5]
 8000d7c:	3b60      	subs	r3, #96	; 0x60
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	717b      	strb	r3, [r7, #5]
					sTime.Hours++;
 8000d82:	793b      	ldrb	r3, [r7, #4]
 8000d84:	3301      	adds	r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	713b      	strb	r3, [r7, #4]
					if (sTime.Hours >= 0x24)
 8000d8a:	793b      	ldrb	r3, [r7, #4]
 8000d8c:	2b23      	cmp	r3, #35	; 0x23
 8000d8e:	d903      	bls.n	8000d98 <main+0x490>
					{
						sTime.Hours -= 0x24;
 8000d90:	793b      	ldrb	r3, [r7, #4]
 8000d92:	3b24      	subs	r3, #36	; 0x24
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	713b      	strb	r3, [r7, #4]
				}
			}

//			if (sTime.Minutes < 0x01)
//			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM);
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <main+0x4f0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <main+0x4dc>)
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
		//simulate task
//		HAL_Delay(100);
//		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

		//read RTC
		HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8000da2:	2201      	movs	r2, #1
 8000da4:	4913      	ldr	r1, [pc, #76]	; (8000df4 <main+0x4ec>)
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <main+0x4bc>)
 8000da8:	f007 fd04 	bl	80087b4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8000dac:	2201      	movs	r2, #1
 8000dae:	4913      	ldr	r1, [pc, #76]	; (8000dfc <main+0x4f4>)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <main+0x4bc>)
 8000db2:	f007 fde3 	bl	800897c <HAL_RTC_GetDate>
		PIR[0] = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin); //save PIR current state
 8000db6:	e683      	b.n	8000ac0 <main+0x1b8>
 8000db8:	2400d7d4 	.word	0x2400d7d4
 8000dbc:	240114dc 	.word	0x240114dc
 8000dc0:	2401d51a 	.word	0x2401d51a
 8000dc4:	2401dac0 	.word	0x2401dac0
 8000dc8:	2401d51c 	.word	0x2401d51c
 8000dcc:	58020400 	.word	0x58020400
 8000dd0:	2401d510 	.word	0x2401d510
 8000dd4:	2401d514 	.word	0x2401d514
 8000dd8:	58021800 	.word	0x58021800
 8000ddc:	2401d518 	.word	0x2401d518
 8000de0:	2401d4dc 	.word	0x2401d4dc
 8000de4:	24011390 	.word	0x24011390
 8000de8:	2400ef90 	.word	0x2400ef90
 8000dec:	2400fb90 	.word	0x2400fb90
 8000df0:	24010790 	.word	0x24010790
 8000df4:	2401dbb8 	.word	0x2401dbb8
 8000df8:	2401dae4 	.word	0x2401dae4
 8000dfc:	2401dabc 	.word	0x2401dabc

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b09c      	sub	sp, #112	; 0x70
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	224c      	movs	r2, #76	; 0x4c
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f00c f96a 	bl	800d0e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2220      	movs	r2, #32
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f00c f964 	bl	800d0e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e20:	2004      	movs	r0, #4
 8000e22:	f005 f849 	bl	8005eb8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <SystemClock_Config+0x100>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a34      	ldr	r2, [pc, #208]	; (8000f00 <SystemClock_Config+0x100>)
 8000e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <SystemClock_Config+0x100>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <SystemClock_Config+0x104>)
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <SystemClock_Config+0x104>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <SystemClock_Config+0x104>)
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e58:	bf00      	nop
 8000e5a:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <SystemClock_Config+0x100>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e66:	d1f8      	bne.n	8000e5a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <SystemClock_Config+0x108>)
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6c:	f023 0303 	bic.w	r3, r3, #3
 8000e70:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <SystemClock_Config+0x108>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e78:	2309      	movs	r3, #9
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e82:	2301      	movs	r3, #1
 8000e84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000e92:	2319      	movs	r3, #25
 8000e94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f005 f86a 	bl	8005f8c <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ebe:	f000 fbe3 	bl	8001688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	233f      	movs	r3, #63	; 0x3f
 8000ec4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ece:	2308      	movs	r3, #8
 8000ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ed2:	2340      	movs	r3, #64	; 0x40
 8000ed4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ed6:	2340      	movs	r3, #64	; 0x40
 8000ed8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ede:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ee0:	2340      	movs	r3, #64	; 0x40
 8000ee2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f005 fc5f 	bl	80067ac <HAL_RCC_ClockConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000ef4:	f000 fbc8 	bl	8001688 <Error_Handler>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3770      	adds	r7, #112	; 0x70
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	58024800 	.word	0x58024800
 8000f04:	58000400 	.word	0x58000400
 8000f08:	58024400 	.word	0x58024400

08000f0c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_ETH_Init+0x80>)
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <MX_ETH_Init+0x84>)
 8000f14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_ETH_Init+0x88>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_ETH_Init+0x88>)
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_ETH_Init+0x88>)
 8000f24:	22e1      	movs	r2, #225	; 0xe1
 8000f26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_ETH_Init+0x88>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_ETH_Init+0x88>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_ETH_Init+0x88>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_ETH_Init+0x80>)
 8000f3c:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <MX_ETH_Init+0x88>)
 8000f3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_ETH_Init+0x80>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_ETH_Init+0x80>)
 8000f48:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <MX_ETH_Init+0x8c>)
 8000f4a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_ETH_Init+0x80>)
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <MX_ETH_Init+0x90>)
 8000f50:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_ETH_Init+0x80>)
 8000f54:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f58:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_ETH_Init+0x80>)
 8000f5c:	f004 f83e 	bl	8004fdc <HAL_ETH_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f66:	f000 fb8f 	bl	8001688 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f6a:	2234      	movs	r2, #52	; 0x34
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <MX_ETH_Init+0x94>)
 8000f70:	f00c f8ba 	bl	800d0e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_ETH_Init+0x94>)
 8000f76:	2221      	movs	r2, #33	; 0x21
 8000f78:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_ETH_Init+0x94>)
 8000f7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f80:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_ETH_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2401dbcc 	.word	0x2401dbcc
 8000f90:	40028000 	.word	0x40028000
 8000f94:	2401d520 	.word	0x2401d520
 8000f98:	24011460 	.word	0x24011460
 8000f9c:	24011400 	.word	0x24011400
 8000fa0:	2401dc54 	.word	0x2401dc54

08000fa4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b090      	sub	sp, #64	; 0x40
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2228      	movs	r2, #40	; 0x28
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00c f88f 	bl	800d0e8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <MX_RTC_Init+0x118>)
 8000fcc:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <MX_RTC_Init+0x11c>)
 8000fce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <MX_RTC_Init+0x118>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <MX_RTC_Init+0x118>)
 8000fd8:	227f      	movs	r2, #127	; 0x7f
 8000fda:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fdc:	4b37      	ldr	r3, [pc, #220]	; (80010bc <MX_RTC_Init+0x118>)
 8000fde:	22ff      	movs	r2, #255	; 0xff
 8000fe0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fe2:	4b36      	ldr	r3, [pc, #216]	; (80010bc <MX_RTC_Init+0x118>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <MX_RTC_Init+0x118>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <MX_RTC_Init+0x118>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <MX_RTC_Init+0x118>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ffa:	4830      	ldr	r0, [pc, #192]	; (80010bc <MX_RTC_Init+0x118>)
 8000ffc:	f007 fac4 	bl	8008588 <HAL_RTC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001006:	f000 fb3f 	bl	8001688 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800100a:	2300      	movs	r3, #0
 800100c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001010:	2300      	movs	r3, #0
 8001012:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001016:	2300      	movs	r3, #0
 8001018:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800101c:	2300      	movs	r3, #0
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	4823      	ldr	r0, [pc, #140]	; (80010bc <MX_RTC_Init+0x118>)
 800102e:	f007 fb23 	bl	8008678 <HAL_RTC_SetTime>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001038:	f000 fb26 	bl	8001688 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800103c:	2301      	movs	r3, #1
 800103e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001042:	2301      	movs	r3, #1
 8001044:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001048:	2301      	movs	r3, #1
 800104a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001058:	2201      	movs	r2, #1
 800105a:	4619      	mov	r1, r3
 800105c:	4817      	ldr	r0, [pc, #92]	; (80010bc <MX_RTC_Init+0x118>)
 800105e:	f007 fc05 	bl	800886c <HAL_RTC_SetDate>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001068:	f000 fb0e 	bl	8001688 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800106c:	2300      	movs	r3, #0
 800106e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001070:	2300      	movs	r3, #0
 8001072:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001074:	2300      	movs	r3, #0
 8001076:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_RTC_Init+0x120>)
 8001086:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001090:	2301      	movs	r3, #1
 8001092:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_RTC_Init+0x118>)
 80010a4:	f007 fcb8 	bl	8008a18 <HAL_RTC_SetAlarm_IT>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 80010ae:	f000 faeb 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3740      	adds	r7, #64	; 0x40
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2401dac0 	.word	0x2401dac0
 80010c0:	58004000 	.word	0x58004000
 80010c4:	00808080 	.word	0x00808080

080010c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <MX_SPI1_Init+0xa8>)
 80010ce:	4a29      	ldr	r2, [pc, #164]	; (8001174 <MX_SPI1_Init+0xac>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <MX_SPI1_Init+0xa8>)
 80010d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <MX_SPI1_Init+0xa8>)
 80010dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <MX_SPI1_Init+0xa8>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MX_SPI1_Init+0xa8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <MX_SPI1_Init+0xa8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <MX_SPI1_Init+0xa8>)
 80010f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_SPI1_Init+0xa8>)
 80010fe:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001102:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_SPI1_Init+0xa8>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_SPI1_Init+0xa8>)
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_SPI1_Init+0xa8>)
 8001112:	2200      	movs	r2, #0
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_SPI1_Init+0xa8>)
 8001118:	2200      	movs	r2, #0
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_SPI1_Init+0xa8>)
 800111e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001122:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_SPI1_Init+0xa8>)
 8001126:	2200      	movs	r2, #0
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_SPI1_Init+0xa8>)
 800112c:	2200      	movs	r2, #0
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_SPI1_Init+0xa8>)
 8001132:	2200      	movs	r2, #0
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_SPI1_Init+0xa8>)
 8001138:	2200      	movs	r2, #0
 800113a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_SPI1_Init+0xa8>)
 800113e:	2200      	movs	r2, #0
 8001140:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_SPI1_Init+0xa8>)
 8001144:	2200      	movs	r2, #0
 8001146:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_SPI1_Init+0xa8>)
 800114a:	2200      	movs	r2, #0
 800114c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_SPI1_Init+0xa8>)
 8001150:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001154:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_SPI1_Init+0xa8>)
 8001158:	2200      	movs	r2, #0
 800115a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_SPI1_Init+0xa8>)
 800115e:	f007 febb 	bl	8008ed8 <HAL_SPI_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001168:	f000 fa8e 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2401db30 	.word	0x2401db30
 8001174:	40013000 	.word	0x40013000

08001178 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b09a      	sub	sp, #104	; 0x68
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]
 80011aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	222c      	movs	r2, #44	; 0x2c
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f00b ff98 	bl	800d0e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b8:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <MX_TIM1_Init+0x150>)
 80011ba:	4a44      	ldr	r2, [pc, #272]	; (80012cc <MX_TIM1_Init+0x154>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011be:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <MX_TIM1_Init+0x150>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <MX_TIM1_Init+0x150>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <MX_TIM1_Init+0x150>)
 80011cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80011d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <MX_TIM1_Init+0x150>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d8:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <MX_TIM1_Init+0x150>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <MX_TIM1_Init+0x150>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e4:	4838      	ldr	r0, [pc, #224]	; (80012c8 <MX_TIM1_Init+0x150>)
 80011e6:	f008 fe1a 	bl	8009e1e <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011f0:	f000 fa4a 	bl	8001688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011fe:	4619      	mov	r1, r3
 8001200:	4831      	ldr	r0, [pc, #196]	; (80012c8 <MX_TIM1_Init+0x150>)
 8001202:	f009 f945 	bl	800a490 <HAL_TIM_ConfigClockSource>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800120c:	f000 fa3c 	bl	8001688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001210:	482d      	ldr	r0, [pc, #180]	; (80012c8 <MX_TIM1_Init+0x150>)
 8001212:	f008 fec3 	bl	8009f9c <HAL_TIM_PWM_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800121c:	f000 fa34 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001230:	4619      	mov	r1, r3
 8001232:	4825      	ldr	r0, [pc, #148]	; (80012c8 <MX_TIM1_Init+0x150>)
 8001234:	f009 fe4c 	bl	800aed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800123e:	f000 fa23 	bl	8001688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001242:	2360      	movs	r3, #96	; 0x60
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124a:	2300      	movs	r3, #0
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800124e:	2300      	movs	r3, #0
 8001250:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001262:	2200      	movs	r2, #0
 8001264:	4619      	mov	r1, r3
 8001266:	4818      	ldr	r0, [pc, #96]	; (80012c8 <MX_TIM1_Init+0x150>)
 8001268:	f009 f802 	bl	800a270 <HAL_TIM_PWM_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001272:	f000 fa09 	bl	8001688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800128a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <MX_TIM1_Init+0x150>)
 80012ac:	f009 fe98 	bl	800afe0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80012b6:	f000 f9e7 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012ba:	4803      	ldr	r0, [pc, #12]	; (80012c8 <MX_TIM1_Init+0x150>)
 80012bc:	f000 fbf0 	bl	8001aa0 <HAL_TIM_MspPostInit>

}
 80012c0:	bf00      	nop
 80012c2:	3768      	adds	r7, #104	; 0x68
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2401dae4 	.word	0x2401dae4
 80012cc:	40010000 	.word	0x40010000

080012d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <MX_USART3_UART_Init+0x90>)
 80012d6:	4a23      	ldr	r2, [pc, #140]	; (8001364 <MX_USART3_UART_Init+0x94>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_USART3_UART_Init+0x90>)
 80012dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80012e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_USART3_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_USART3_UART_Init+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_USART3_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_USART3_UART_Init+0x90>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_USART3_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_USART3_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_USART3_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_USART3_UART_Init+0x90>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_USART3_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001318:	4811      	ldr	r0, [pc, #68]	; (8001360 <MX_USART3_UART_Init+0x90>)
 800131a:	f009 fedf 	bl	800b0dc <HAL_UART_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001324:	f000 f9b0 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001328:	2100      	movs	r1, #0
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_USART3_UART_Init+0x90>)
 800132c:	f00b fb14 	bl	800c958 <HAL_UARTEx_SetTxFifoThreshold>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001336:	f000 f9a7 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133a:	2100      	movs	r1, #0
 800133c:	4808      	ldr	r0, [pc, #32]	; (8001360 <MX_USART3_UART_Init+0x90>)
 800133e:	f00b fb49 	bl	800c9d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001348:	f000 f99e 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_USART3_UART_Init+0x90>)
 800134e:	f00b faca 	bl	800c8e6 <HAL_UARTEx_DisableFifoMode>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001358:	f000 f996 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2401d5ac 	.word	0x2401d5ac
 8001364:	40004800 	.word	0x40004800

08001368 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800136e:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001370:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001374:	2209      	movs	r2, #9
 8001376:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137a:	2202      	movs	r2, #2
 800137c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001386:	2202      	movs	r2, #2
 8001388:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001398:	2200      	movs	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800139e:	2201      	movs	r2, #1
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b0:	f004 fc3a 	bl	8005c28 <HAL_PCD_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80013ba:	f000 f965 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2401d63c 	.word	0x2401d63c
 80013c8:	40080000 	.word	0x40080000

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_DMA_Init+0x5c>)
 80013d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <MX_DMA_Init+0x5c>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_DMA_Init+0x5c>)
 80013e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	200b      	movs	r0, #11
 80013f6:	f000 ff62 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013fa:	200b      	movs	r0, #11
 80013fc:	f000 ff79 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	200c      	movs	r0, #12
 8001406:	f000 ff5a 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800140a:	200c      	movs	r0, #12
 800140c:	f000 ff71 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	200d      	movs	r0, #13
 8001416:	f000 ff52 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800141a:	200d      	movs	r0, #13
 800141c:	f000 ff69 	bl	80022f2 <HAL_NVIC_EnableIRQ>

}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	58024400 	.word	0x58024400

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	4a69      	ldr	r2, [pc, #420]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001452:	4b67      	ldr	r3, [pc, #412]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001460:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	4a62      	ldr	r2, [pc, #392]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001470:	4b5f      	ldr	r3, [pc, #380]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b5c      	ldr	r3, [pc, #368]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148e:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b54      	ldr	r3, [pc, #336]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	4a53      	ldr	r2, [pc, #332]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ba:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	4a4b      	ldr	r2, [pc, #300]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ca:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d8:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014de:	4a44      	ldr	r2, [pc, #272]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fc:	4a3c      	ldr	r2, [pc, #240]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 80014fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001506:	4b3a      	ldr	r3, [pc, #232]	; (80015f0 <MX_GPIO_Init+0x1c4>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2101      	movs	r1, #1
 8001518:	4836      	ldr	r0, [pc, #216]	; (80015f4 <MX_GPIO_Init+0x1c8>)
 800151a:	f004 fb3d 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001524:	4834      	ldr	r0, [pc, #208]	; (80015f8 <MX_GPIO_Init+0x1cc>)
 8001526:	f004 fb37 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001530:	4831      	ldr	r0, [pc, #196]	; (80015f8 <MX_GPIO_Init+0x1cc>)
 8001532:	f004 fb31 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153c:	482f      	ldr	r0, [pc, #188]	; (80015fc <MX_GPIO_Init+0x1d0>)
 800153e:	f004 fb2b 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001542:	2301      	movs	r3, #1
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4826      	ldr	r0, [pc, #152]	; (80015f4 <MX_GPIO_Init+0x1c8>)
 800155a:	f004 f955 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4823      	ldr	r0, [pc, #140]	; (8001600 <MX_GPIO_Init+0x1d4>)
 8001574:	f004 f948 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8001578:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4819      	ldr	r0, [pc, #100]	; (80015f8 <MX_GPIO_Init+0x1cc>)
 8001592:	f004 f939 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4813      	ldr	r0, [pc, #76]	; (80015fc <MX_GPIO_Init+0x1d0>)
 80015b0:	f004 f92a 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 80015b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_GPIO_Init+0x1d0>)
 80015ca:	f004 f91d 	bl	8005808 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 80015ce:	23c0      	movs	r3, #192	; 0xc0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_GPIO_Init+0x1c8>)
 80015e2:	f004 f911 	bl	8005808 <HAL_GPIO_Init>

}
 80015e6:	bf00      	nop
 80015e8:	3730      	adds	r7, #48	; 0x30
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58020400 	.word	0x58020400
 80015f8:	58020c00 	.word	0x58020c00
 80015fc:	58021800 	.word	0x58021800
 8001600:	58021000 	.word	0x58021000

08001604 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	RTC_ON = 0;
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_RTC_AlarmAEventCallback+0x70>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_RTC_AlarmAEventCallback+0x74>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2200      	movs	r2, #0
 8001618:	635a      	str	r2, [r3, #52]	; 0x34
	LCD_flush(&ST7735);
 800161a:	4818      	ldr	r0, [pc, #96]	; (800167c <HAL_RTC_AlarmAEventCallback+0x78>)
 800161c:	f7ff f92c 	bl	8000878 <LCD_flush>
	int a,b,c = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
	//start at pixel index 23100 (red start at index 0 so add offset 23100%3 = 0)
	//stop at pixel index 39996 (start + length*rgb*( height of pixel number - 1) = 23100+128*3*(45-1) = 39996)
	//add next array 384 (128*3)
	for(a = 23100; a <= 39996; a = a+384 )
 8001624:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e019      	b.n	8001660 <HAL_RTC_AlarmAEventCallback+0x5c>
	{
		//lenght*rgb = 45*3 = 135 (0-134)
		for(b=0;b<135;b++)
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	e00c      	b.n	800164c <HAL_RTC_AlarmAEventCallback+0x48>
		{
			Framememory[a+b] = fan_off[b+c];
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	441a      	add	r2, r3
 8001638:	6979      	ldr	r1, [r7, #20]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	440b      	add	r3, r1
 800163e:	4910      	ldr	r1, [pc, #64]	; (8001680 <HAL_RTC_AlarmAEventCallback+0x7c>)
 8001640:	5c89      	ldrb	r1, [r1, r2]
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <HAL_RTC_AlarmAEventCallback+0x80>)
 8001644:	54d1      	strb	r1, [r2, r3]
		for(b=0;b<135;b++)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	3301      	adds	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2b86      	cmp	r3, #134	; 0x86
 8001650:	ddef      	ble.n	8001632 <HAL_RTC_AlarmAEventCallback+0x2e>
		}
		//offset 135
		c = c +135;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3387      	adds	r3, #135	; 0x87
 8001656:	60fb      	str	r3, [r7, #12]
	for(a = 23100; a <= 39996; a = a+384 )
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8001666:	4293      	cmp	r3, r2
 8001668:	dde0      	ble.n	800162c <HAL_RTC_AlarmAEventCallback+0x28>
	}
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2401d51a 	.word	0x2401d51a
 8001678:	2401dae4 	.word	0x2401dae4
 800167c:	2401d4dc 	.word	0x2401d4dc
 8001680:	2400c018 	.word	0x2400c018
 8001684:	240114dc 	.word	0x240114dc

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001690:	e7fe      	b.n	8001690 <Error_Handler+0x8>
	...

08001694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_MspInit+0x30>)
 800169c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a0:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_MspInit+0x30>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x30>)
 80016ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	58024400 	.word	0x58024400

080016c8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a59      	ldr	r2, [pc, #356]	; (800184c <HAL_ETH_MspInit+0x184>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	f040 80ab 	bne.w	8001842 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_ETH_MspInit+0x188>)
 80016ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016f2:	4a57      	ldr	r2, [pc, #348]	; (8001850 <HAL_ETH_MspInit+0x188>)
 80016f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016fc:	4b54      	ldr	r3, [pc, #336]	; (8001850 <HAL_ETH_MspInit+0x188>)
 80016fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001706:	623b      	str	r3, [r7, #32]
 8001708:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800170a:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_ETH_MspInit+0x188>)
 800170c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001710:	4a4f      	ldr	r2, [pc, #316]	; (8001850 <HAL_ETH_MspInit+0x188>)
 8001712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001716:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800171a:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <HAL_ETH_MspInit+0x188>)
 800171c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001728:	4b49      	ldr	r3, [pc, #292]	; (8001850 <HAL_ETH_MspInit+0x188>)
 800172a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800172e:	4a48      	ldr	r2, [pc, #288]	; (8001850 <HAL_ETH_MspInit+0x188>)
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001738:	4b45      	ldr	r3, [pc, #276]	; (8001850 <HAL_ETH_MspInit+0x188>)
 800173a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <HAL_ETH_MspInit+0x188>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	4a40      	ldr	r2, [pc, #256]	; (8001850 <HAL_ETH_MspInit+0x188>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <HAL_ETH_MspInit+0x188>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <HAL_ETH_MspInit+0x188>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	4a39      	ldr	r2, [pc, #228]	; (8001850 <HAL_ETH_MspInit+0x188>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <HAL_ETH_MspInit+0x188>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_ETH_MspInit+0x188>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	4a31      	ldr	r2, [pc, #196]	; (8001850 <HAL_ETH_MspInit+0x188>)
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <HAL_ETH_MspInit+0x188>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_ETH_MspInit+0x188>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a6:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <HAL_ETH_MspInit+0x188>)
 80017a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_ETH_MspInit+0x188>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80017be:	2332      	movs	r3, #50	; 0x32
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ce:	230b      	movs	r3, #11
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	4619      	mov	r1, r3
 80017d8:	481e      	ldr	r0, [pc, #120]	; (8001854 <HAL_ETH_MspInit+0x18c>)
 80017da:	f004 f815 	bl	8005808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80017de:	2386      	movs	r3, #134	; 0x86
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ee:	230b      	movs	r3, #11
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	4817      	ldr	r0, [pc, #92]	; (8001858 <HAL_ETH_MspInit+0x190>)
 80017fa:	f004 f805 	bl	8005808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001810:	230b      	movs	r3, #11
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001818:	4619      	mov	r1, r3
 800181a:	4810      	ldr	r0, [pc, #64]	; (800185c <HAL_ETH_MspInit+0x194>)
 800181c:	f003 fff4 	bl	8005808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001820:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001832:	230b      	movs	r3, #11
 8001834:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	4808      	ldr	r0, [pc, #32]	; (8001860 <HAL_ETH_MspInit+0x198>)
 800183e:	f003 ffe3 	bl	8005808 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3738      	adds	r7, #56	; 0x38
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40028000 	.word	0x40028000
 8001850:	58024400 	.word	0x58024400
 8001854:	58020800 	.word	0x58020800
 8001858:	58020000 	.word	0x58020000
 800185c:	58020400 	.word	0x58020400
 8001860:	58021800 	.word	0x58021800

08001864 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0b2      	sub	sp, #200	; 0xc8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	22bc      	movs	r2, #188	; 0xbc
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f00b fc37 	bl	800d0e8 <memset>
  if(hrtc->Instance==RTC)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <HAL_RTC_MspInit+0x68>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d11e      	bne.n	80018c2 <HAL_RTC_MspInit+0x5e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001884:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001888:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800188a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800188e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4618      	mov	r0, r3
 8001898:	f005 fb14 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80018a2:	f7ff fef1 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RTC_MspInit+0x6c>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_RTC_MspInit+0x6c>)
 80018ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2029      	movs	r0, #41	; 0x29
 80018b8:	f000 fd01 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018bc:	2029      	movs	r0, #41	; 0x29
 80018be:	f000 fd18 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	37c8      	adds	r7, #200	; 0xc8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	58004000 	.word	0x58004000
 80018d0:	58024400 	.word	0x58024400

080018d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0ba      	sub	sp, #232	; 0xe8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ec:	f107 0318 	add.w	r3, r7, #24
 80018f0:	22bc      	movs	r2, #188	; 0xbc
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f00b fbf7 	bl	800d0e8 <memset>
  if(hspi->Instance==SPI1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_SPI_MspInit+0x170>)
 8001900:	4293      	cmp	r3, r2
 8001902:	f040 809b 	bne.w	8001a3c <HAL_SPI_MspInit+0x168>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800190c:	2300      	movs	r3, #0
 800190e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001910:	f107 0318 	add.w	r3, r7, #24
 8001914:	4618      	mov	r0, r3
 8001916:	f005 fad5 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001920:	f7ff feb2 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001924:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <HAL_SPI_MspInit+0x174>)
 8001926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800192a:	4a47      	ldr	r2, [pc, #284]	; (8001a48 <HAL_SPI_MspInit+0x174>)
 800192c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001930:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001934:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_SPI_MspInit+0x174>)
 8001936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_SPI_MspInit+0x174>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	4a3f      	ldr	r2, [pc, #252]	; (8001a48 <HAL_SPI_MspInit+0x174>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_SPI_MspInit+0x174>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_SPI_MspInit+0x174>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001966:	4a38      	ldr	r2, [pc, #224]	; (8001a48 <HAL_SPI_MspInit+0x174>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_SPI_MspInit+0x174>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800197e:	2320      	movs	r3, #32
 8001980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001996:	2305      	movs	r3, #5
 8001998:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019a0:	4619      	mov	r1, r3
 80019a2:	482a      	ldr	r0, [pc, #168]	; (8001a4c <HAL_SPI_MspInit+0x178>)
 80019a4:	f003 ff30 	bl	8005808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019a8:	2320      	movs	r3, #32
 80019aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019c0:	2305      	movs	r3, #5
 80019c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019ca:	4619      	mov	r1, r3
 80019cc:	4820      	ldr	r0, [pc, #128]	; (8001a50 <HAL_SPI_MspInit+0x17c>)
 80019ce:	f003 ff1b 	bl	8005808 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 80019d4:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <HAL_SPI_MspInit+0x184>)
 80019d6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 80019da:	2226      	movs	r2, #38	; 0x26
 80019dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 80019e0:	2240      	movs	r2, #64	; 0x40
 80019e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 80019ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a10:	4810      	ldr	r0, [pc, #64]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 8001a12:	f000 fc9d 	bl	8002350 <HAL_DMA_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8001a1c:	f7ff fe34 	bl	8001688 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 8001a24:	679a      	str	r2, [r3, #120]	; 0x78
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_SPI_MspInit+0x180>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2023      	movs	r0, #35	; 0x23
 8001a32:	f000 fc44 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a36:	2023      	movs	r0, #35	; 0x23
 8001a38:	f000 fc5b 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	37e8      	adds	r7, #232	; 0xe8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40013000 	.word	0x40013000
 8001a48:	58024400 	.word	0x58024400
 8001a4c:	58020000 	.word	0x58020000
 8001a50:	58020400 	.word	0x58020400
 8001a54:	2401dc88 	.word	0x2401dc88
 8001a58:	40020010 	.word	0x40020010

08001a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_TIM_Base_MspInit+0x3c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d10e      	bne.n	8001a8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_TIM_Base_MspInit+0x40>)
 8001a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a74:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_TIM_Base_MspInit+0x40>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_TIM_Base_MspInit+0x40>)
 8001a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	58024400 	.word	0x58024400

08001aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d11f      	bne.n	8001b02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_TIM_MspPostInit+0x70>)
 8001ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <HAL_TIM_MspPostInit+0x70>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_TIM_MspPostInit+0x70>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <HAL_TIM_MspPostInit+0x74>)
 8001afe:	f003 fe83 	bl	8005808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	58024400 	.word	0x58024400
 8001b14:	58021000 	.word	0x58021000

08001b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0b8      	sub	sp, #224	; 0xe0
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	22bc      	movs	r2, #188	; 0xbc
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00b fad5 	bl	800d0e8 <memset>
  if(huart->Instance==USART3)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a57      	ldr	r2, [pc, #348]	; (8001ca0 <HAL_UART_MspInit+0x188>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	f040 80a6 	bne.w	8001c96 <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f005 f9b3 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001b64:	f7ff fd90 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b68:	4b4e      	ldr	r3, [pc, #312]	; (8001ca4 <HAL_UART_MspInit+0x18c>)
 8001b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b6e:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <HAL_UART_MspInit+0x18c>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b78:	4b4a      	ldr	r3, [pc, #296]	; (8001ca4 <HAL_UART_MspInit+0x18c>)
 8001b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_UART_MspInit+0x18c>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	4a45      	ldr	r2, [pc, #276]	; (8001ca4 <HAL_UART_MspInit+0x18c>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <HAL_UART_MspInit+0x18c>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ba4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4837      	ldr	r0, [pc, #220]	; (8001ca8 <HAL_UART_MspInit+0x190>)
 8001bcc:	f003 fe1c 	bl	8005808 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001bd0:	4b36      	ldr	r3, [pc, #216]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001bd2:	4a37      	ldr	r2, [pc, #220]	; (8001cb0 <HAL_UART_MspInit+0x198>)
 8001bd4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001bd8:	222d      	movs	r2, #45	; 0x2d
 8001bda:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bdc:	4b33      	ldr	r3, [pc, #204]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be2:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c02:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c10:	4826      	ldr	r0, [pc, #152]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001c12:	f000 fb9d 	bl	8002350 <HAL_DMA_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001c1c:	f7ff fd34 	bl	8001688 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001c24:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c26:	4a21      	ldr	r2, [pc, #132]	; (8001cac <HAL_UART_MspInit+0x194>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c2e:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <HAL_UART_MspInit+0x1a0>)
 8001c30:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c34:	222e      	movs	r2, #46	; 0x2e
 8001c36:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c3a:	2240      	movs	r2, #64	; 0x40
 8001c3c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c4a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001c6a:	4812      	ldr	r0, [pc, #72]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c6c:	f000 fb70 	bl	8002350 <HAL_DMA_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001c76:	f7ff fd07 	bl	8001688 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c7e:	679a      	str	r2, [r3, #120]	; 0x78
 8001c80:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_UART_MspInit+0x19c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2027      	movs	r0, #39	; 0x27
 8001c8c:	f000 fb17 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c90:	2027      	movs	r0, #39	; 0x27
 8001c92:	f000 fb2e 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	37e0      	adds	r7, #224	; 0xe0
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40004800 	.word	0x40004800
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	58020c00 	.word	0x58020c00
 8001cac:	2401d534 	.word	0x2401d534
 8001cb0:	40020028 	.word	0x40020028
 8001cb4:	2401da44 	.word	0x2401da44
 8001cb8:	40020040 	.word	0x40020040

08001cbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0b8      	sub	sp, #224	; 0xe0
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	22bc      	movs	r2, #188	; 0xbc
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00b fa03 	bl	800d0e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a37      	ldr	r2, [pc, #220]	; (8001dc4 <HAL_PCD_MspInit+0x108>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d166      	bne.n	8001dba <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001cec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cf0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001cf6:	2312      	movs	r3, #18
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001d02:	2302      	movs	r3, #2
 8001d04:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001d06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d0a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001d0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d10:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001d12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f005 f8d0 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001d2a:	f7ff fcad 	bl	8001688 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001d2e:	f004 f91d 	bl	8005f6c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_PCD_MspInit+0x10c>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <HAL_PCD_MspInit+0x10c>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_PCD_MspInit+0x10c>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001d50:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001d54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001d6a:	230a      	movs	r3, #10
 8001d6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d74:	4619      	mov	r1, r3
 8001d76:	4815      	ldr	r0, [pc, #84]	; (8001dcc <HAL_PCD_MspInit+0x110>)
 8001d78:	f003 fd46 	bl	8005808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d94:	4619      	mov	r1, r3
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <HAL_PCD_MspInit+0x110>)
 8001d98:	f003 fd36 	bl	8005808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_PCD_MspInit+0x10c>)
 8001d9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_PCD_MspInit+0x10c>)
 8001da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001da8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_PCD_MspInit+0x10c>)
 8001dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001db2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	37e0      	adds	r7, #224	; 0xe0
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40080000 	.word	0x40080000
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	58020000 	.word	0x58020000

08001dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <NMI_Handler+0x4>

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <MemManage_Handler+0x4>

08001de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <UsageFault_Handler+0x4>

08001dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1c:	f000 f910 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <DMA1_Stream0_IRQHandler+0x10>)
 8001e2a:	f001 fdb9 	bl	80039a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2401dc88 	.word	0x2401dc88

08001e38 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <DMA1_Stream1_IRQHandler+0x10>)
 8001e3e:	f001 fdaf 	bl	80039a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2401d534 	.word	0x2401d534

08001e4c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <DMA1_Stream2_IRQHandler+0x10>)
 8001e52:	f001 fda5 	bl	80039a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2401da44 	.word	0x2401da44

08001e60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <SPI1_IRQHandler+0x10>)
 8001e66:	f007 fc71 	bl	800974c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2401db30 	.word	0x2401db30

08001e74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <USART3_IRQHandler+0x10>)
 8001e7a:	f009 f9c5 	bl	800b208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2401d5ac 	.word	0x2401d5ac

08001e88 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <RTC_Alarm_IRQHandler+0x10>)
 8001e8e:	f006 fef9 	bl	8008c84 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2401dac0 	.word	0x2401dac0

08001e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ecc:	f00b f8d4 	bl	800d078 <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	24080000 	.word	0x24080000
 8001efc:	00000400 	.word	0x00000400
 8001f00:	2401d528 	.word	0x2401d528
 8001f04:	2401dd18 	.word	0x2401dd18

08001f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f0c:	f7fe fb60 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f12:	490d      	ldr	r1, [pc, #52]	; (8001f48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f28:	4c0a      	ldr	r4, [pc, #40]	; (8001f54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f36:	f00b f8a5 	bl	800d084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3a:	f7fe fce5 	bl	8000908 <main>
  bx  lr
 8001f3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f48:	24011400 	.word	0x24011400
  ldr r2, =_sidata
 8001f4c:	0800d270 	.word	0x0800d270
  ldr r2, =_sbss
 8001f50:	240114c0 	.word	0x240114c0
  ldr r4, =_ebss
 8001f54:	2401dd14 	.word	0x2401dd14

08001f58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f58:	e7fe      	b.n	8001f58 <ADC3_IRQHandler>
	...

08001f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f62:	2003      	movs	r0, #3
 8001f64:	f000 f9a0 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f68:	f004 fdd6 	bl	8006b18 <HAL_RCC_GetSysClockFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_Init+0x68>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	4913      	ldr	r1, [pc, #76]	; (8001fc8 <HAL_Init+0x6c>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_Init+0x68>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <HAL_Init+0x6c>)
 8001f90:	5cd3      	ldrb	r3, [r2, r3]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <HAL_Init+0x70>)
 8001f9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_Init+0x74>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f814 	bl	8001fd4 <HAL_InitTick>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e002      	b.n	8001fbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb6:	f7ff fb6d 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	58024400 	.word	0x58024400
 8001fc8:	0800d220 	.word	0x0800d220
 8001fcc:	24000004 	.word	0x24000004
 8001fd0:	24000000 	.word	0x24000000

08001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_InitTick+0x60>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e021      	b.n	800202c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <HAL_InitTick+0x64>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_InitTick+0x60>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f985 	bl	800230e <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 f94f 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_InitTick+0x68>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	24011398 	.word	0x24011398
 8002038:	24000000 	.word	0x24000000
 800203c:	24011394 	.word	0x24011394

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	24011398 	.word	0x24011398
 8002064:	2401dd00 	.word	0x2401dd00

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2401dd00 	.word	0x2401dd00

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_Delay+0x44>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	24011398 	.word	0x24011398

080020c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetREVID+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0c1b      	lsrs	r3, r3, #16
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	5c001000 	.word	0x5c001000

080020e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80020f0:	4904      	ldr	r1, [pc, #16]	; (8002104 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	58000400 	.word	0x58000400

08002108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <__NVIC_SetPriorityGrouping+0x40>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	4313      	orrs	r3, r2
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <__NVIC_SetPriorityGrouping+0x40>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00
 800214c:	05fa0000 	.word	0x05fa0000

08002150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <__NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 0307 	and.w	r3, r3, #7
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db0b      	blt.n	8002196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4907      	ldr	r1, [pc, #28]	; (80021a4 <__NVIC_EnableIRQ+0x38>)
 8002186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff29 	bl	8002108 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff40 	bl	8002150 <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff90 	bl	80021fc <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5f 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff33 	bl	800216c <__NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ffa4 	bl	8002264 <SysTick_Config>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_GetCurrentCPUID+0x24>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	2b07      	cmp	r3, #7
 8002338:	d101      	bne.n	800233e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800233a:	2303      	movs	r3, #3
 800233c:	e000      	b.n	8002340 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800233e:	2301      	movs	r3, #1
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff fe86 	bl	8002068 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e316      	b.n	8002996 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a66      	ldr	r2, [pc, #408]	; (8002508 <HAL_DMA_Init+0x1b8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d04a      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a65      	ldr	r2, [pc, #404]	; (800250c <HAL_DMA_Init+0x1bc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d045      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a63      	ldr	r2, [pc, #396]	; (8002510 <HAL_DMA_Init+0x1c0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d040      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a62      	ldr	r2, [pc, #392]	; (8002514 <HAL_DMA_Init+0x1c4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d03b      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a60      	ldr	r2, [pc, #384]	; (8002518 <HAL_DMA_Init+0x1c8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d036      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5f      	ldr	r2, [pc, #380]	; (800251c <HAL_DMA_Init+0x1cc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d031      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a5d      	ldr	r2, [pc, #372]	; (8002520 <HAL_DMA_Init+0x1d0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02c      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5c      	ldr	r2, [pc, #368]	; (8002524 <HAL_DMA_Init+0x1d4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d027      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5a      	ldr	r2, [pc, #360]	; (8002528 <HAL_DMA_Init+0x1d8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d022      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a59      	ldr	r2, [pc, #356]	; (800252c <HAL_DMA_Init+0x1dc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d01d      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a57      	ldr	r2, [pc, #348]	; (8002530 <HAL_DMA_Init+0x1e0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d018      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a56      	ldr	r2, [pc, #344]	; (8002534 <HAL_DMA_Init+0x1e4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a54      	ldr	r2, [pc, #336]	; (8002538 <HAL_DMA_Init+0x1e8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00e      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a53      	ldr	r2, [pc, #332]	; (800253c <HAL_DMA_Init+0x1ec>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a51      	ldr	r2, [pc, #324]	; (8002540 <HAL_DMA_Init+0x1f0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <HAL_DMA_Init+0xb8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a50      	ldr	r2, [pc, #320]	; (8002544 <HAL_DMA_Init+0x1f4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_DMA_Init+0xbc>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_DMA_Init+0xbe>
 800240c:	2300      	movs	r3, #0
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 813b 	beq.w	800268a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a37      	ldr	r2, [pc, #220]	; (8002508 <HAL_DMA_Init+0x1b8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d04a      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a36      	ldr	r2, [pc, #216]	; (800250c <HAL_DMA_Init+0x1bc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d045      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a34      	ldr	r2, [pc, #208]	; (8002510 <HAL_DMA_Init+0x1c0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d040      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a33      	ldr	r2, [pc, #204]	; (8002514 <HAL_DMA_Init+0x1c4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d03b      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a31      	ldr	r2, [pc, #196]	; (8002518 <HAL_DMA_Init+0x1c8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d036      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a30      	ldr	r2, [pc, #192]	; (800251c <HAL_DMA_Init+0x1cc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d031      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2e      	ldr	r2, [pc, #184]	; (8002520 <HAL_DMA_Init+0x1d0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d02c      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2d      	ldr	r2, [pc, #180]	; (8002524 <HAL_DMA_Init+0x1d4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d027      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <HAL_DMA_Init+0x1d8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d022      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2a      	ldr	r2, [pc, #168]	; (800252c <HAL_DMA_Init+0x1dc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d01d      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a28      	ldr	r2, [pc, #160]	; (8002530 <HAL_DMA_Init+0x1e0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d018      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_DMA_Init+0x1e4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a25      	ldr	r2, [pc, #148]	; (8002538 <HAL_DMA_Init+0x1e8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00e      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a24      	ldr	r2, [pc, #144]	; (800253c <HAL_DMA_Init+0x1ec>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a22      	ldr	r2, [pc, #136]	; (8002540 <HAL_DMA_Init+0x1f0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <HAL_DMA_Init+0x174>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a21      	ldr	r2, [pc, #132]	; (8002544 <HAL_DMA_Init+0x1f4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d108      	bne.n	80024d6 <HAL_DMA_Init+0x186>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e007      	b.n	80024e6 <HAL_DMA_Init+0x196>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0201 	bic.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024e6:	e02f      	b.n	8002548 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e8:	f7ff fdbe 	bl	8002068 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d928      	bls.n	8002548 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2220      	movs	r2, #32
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e246      	b.n	8002996 <HAL_DMA_Init+0x646>
 8002508:	40020010 	.word	0x40020010
 800250c:	40020028 	.word	0x40020028
 8002510:	40020040 	.word	0x40020040
 8002514:	40020058 	.word	0x40020058
 8002518:	40020070 	.word	0x40020070
 800251c:	40020088 	.word	0x40020088
 8002520:	400200a0 	.word	0x400200a0
 8002524:	400200b8 	.word	0x400200b8
 8002528:	40020410 	.word	0x40020410
 800252c:	40020428 	.word	0x40020428
 8002530:	40020440 	.word	0x40020440
 8002534:	40020458 	.word	0x40020458
 8002538:	40020470 	.word	0x40020470
 800253c:	40020488 	.word	0x40020488
 8002540:	400204a0 	.word	0x400204a0
 8002544:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1c8      	bne.n	80024e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4b83      	ldr	r3, [pc, #524]	; (8002770 <HAL_DMA_Init+0x420>)
 8002562:	4013      	ands	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800256e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002586:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	2b04      	cmp	r3, #4
 800259a:	d107      	bne.n	80025ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	4313      	orrs	r3, r2
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80025ac:	4b71      	ldr	r3, [pc, #452]	; (8002774 <HAL_DMA_Init+0x424>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b71      	ldr	r3, [pc, #452]	; (8002778 <HAL_DMA_Init+0x428>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b8:	d328      	bcc.n	800260c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b28      	cmp	r3, #40	; 0x28
 80025c0:	d903      	bls.n	80025ca <HAL_DMA_Init+0x27a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b2e      	cmp	r3, #46	; 0x2e
 80025c8:	d917      	bls.n	80025fa <HAL_DMA_Init+0x2aa>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b3e      	cmp	r3, #62	; 0x3e
 80025d0:	d903      	bls.n	80025da <HAL_DMA_Init+0x28a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b42      	cmp	r3, #66	; 0x42
 80025d8:	d90f      	bls.n	80025fa <HAL_DMA_Init+0x2aa>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b46      	cmp	r3, #70	; 0x46
 80025e0:	d903      	bls.n	80025ea <HAL_DMA_Init+0x29a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b48      	cmp	r3, #72	; 0x48
 80025e8:	d907      	bls.n	80025fa <HAL_DMA_Init+0x2aa>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b4e      	cmp	r3, #78	; 0x4e
 80025f0:	d905      	bls.n	80025fe <HAL_DMA_Init+0x2ae>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b52      	cmp	r3, #82	; 0x52
 80025f8:	d801      	bhi.n	80025fe <HAL_DMA_Init+0x2ae>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_DMA_Init+0x2b0>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f023 0307 	bic.w	r3, r3, #7
 8002622:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2b04      	cmp	r3, #4
 8002634:	d117      	bne.n	8002666 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f002 fb3d 	bl	8004cc8 <DMA_CheckFifoParam>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2240      	movs	r2, #64	; 0x40
 8002658:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e197      	b.n	8002996 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f002 fa78 	bl	8004b64 <DMA_CalcBaseAndBitshift>
 8002674:	4603      	mov	r3, r0
 8002676:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	223f      	movs	r2, #63	; 0x3f
 8002682:	409a      	lsls	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	e0cd      	b.n	8002826 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a3b      	ldr	r2, [pc, #236]	; (800277c <HAL_DMA_Init+0x42c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d022      	beq.n	80026da <HAL_DMA_Init+0x38a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a39      	ldr	r2, [pc, #228]	; (8002780 <HAL_DMA_Init+0x430>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01d      	beq.n	80026da <HAL_DMA_Init+0x38a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a38      	ldr	r2, [pc, #224]	; (8002784 <HAL_DMA_Init+0x434>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d018      	beq.n	80026da <HAL_DMA_Init+0x38a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a36      	ldr	r2, [pc, #216]	; (8002788 <HAL_DMA_Init+0x438>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_DMA_Init+0x38a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a35      	ldr	r2, [pc, #212]	; (800278c <HAL_DMA_Init+0x43c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00e      	beq.n	80026da <HAL_DMA_Init+0x38a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a33      	ldr	r2, [pc, #204]	; (8002790 <HAL_DMA_Init+0x440>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_DMA_Init+0x38a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a32      	ldr	r2, [pc, #200]	; (8002794 <HAL_DMA_Init+0x444>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d004      	beq.n	80026da <HAL_DMA_Init+0x38a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a30      	ldr	r2, [pc, #192]	; (8002798 <HAL_DMA_Init+0x448>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_DMA_Init+0x38e>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_DMA_Init+0x390>
 80026de:	2300      	movs	r3, #0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8097 	beq.w	8002814 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a24      	ldr	r2, [pc, #144]	; (800277c <HAL_DMA_Init+0x42c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d021      	beq.n	8002734 <HAL_DMA_Init+0x3e4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a22      	ldr	r2, [pc, #136]	; (8002780 <HAL_DMA_Init+0x430>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01c      	beq.n	8002734 <HAL_DMA_Init+0x3e4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a21      	ldr	r2, [pc, #132]	; (8002784 <HAL_DMA_Init+0x434>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d017      	beq.n	8002734 <HAL_DMA_Init+0x3e4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_DMA_Init+0x438>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d012      	beq.n	8002734 <HAL_DMA_Init+0x3e4>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <HAL_DMA_Init+0x43c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00d      	beq.n	8002734 <HAL_DMA_Init+0x3e4>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <HAL_DMA_Init+0x440>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d008      	beq.n	8002734 <HAL_DMA_Init+0x3e4>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_DMA_Init+0x444>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <HAL_DMA_Init+0x3e4>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_DMA_Init+0x448>)
 8002732:	4293      	cmp	r3, r2
 8002734:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_DMA_Init+0x44c>)
 8002752:	4013      	ands	r3, r2
 8002754:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d020      	beq.n	80027a0 <HAL_DMA_Init+0x450>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b80      	cmp	r3, #128	; 0x80
 8002764:	d102      	bne.n	800276c <HAL_DMA_Init+0x41c>
 8002766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800276a:	e01a      	b.n	80027a2 <HAL_DMA_Init+0x452>
 800276c:	2300      	movs	r3, #0
 800276e:	e018      	b.n	80027a2 <HAL_DMA_Init+0x452>
 8002770:	fe10803f 	.word	0xfe10803f
 8002774:	5c001000 	.word	0x5c001000
 8002778:	ffff0000 	.word	0xffff0000
 800277c:	58025408 	.word	0x58025408
 8002780:	5802541c 	.word	0x5802541c
 8002784:	58025430 	.word	0x58025430
 8002788:	58025444 	.word	0x58025444
 800278c:	58025458 	.word	0x58025458
 8002790:	5802546c 	.word	0x5802546c
 8002794:	58025480 	.word	0x58025480
 8002798:	58025494 	.word	0x58025494
 800279c:	fffe000f 	.word	0xfffe000f
 80027a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68d2      	ldr	r2, [r2, #12]
 80027a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b6e      	ldr	r3, [pc, #440]	; (80029a0 <HAL_DMA_Init+0x650>)
 80027e8:	4413      	add	r3, r2
 80027ea:	4a6e      	ldr	r2, [pc, #440]	; (80029a4 <HAL_DMA_Init+0x654>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	009a      	lsls	r2, r3, #2
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f002 f9b3 	bl	8004b64 <DMA_CalcBaseAndBitshift>
 80027fe:	4603      	mov	r3, r0
 8002800:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2201      	movs	r2, #1
 800280c:	409a      	lsls	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	e008      	b.n	8002826 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2240      	movs	r2, #64	; 0x40
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2203      	movs	r2, #3
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0b7      	b.n	8002996 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a5f      	ldr	r2, [pc, #380]	; (80029a8 <HAL_DMA_Init+0x658>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d072      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a5d      	ldr	r2, [pc, #372]	; (80029ac <HAL_DMA_Init+0x65c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d06d      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a5c      	ldr	r2, [pc, #368]	; (80029b0 <HAL_DMA_Init+0x660>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d068      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a5a      	ldr	r2, [pc, #360]	; (80029b4 <HAL_DMA_Init+0x664>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d063      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a59      	ldr	r2, [pc, #356]	; (80029b8 <HAL_DMA_Init+0x668>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d05e      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a57      	ldr	r2, [pc, #348]	; (80029bc <HAL_DMA_Init+0x66c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d059      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a56      	ldr	r2, [pc, #344]	; (80029c0 <HAL_DMA_Init+0x670>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d054      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a54      	ldr	r2, [pc, #336]	; (80029c4 <HAL_DMA_Init+0x674>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d04f      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a53      	ldr	r2, [pc, #332]	; (80029c8 <HAL_DMA_Init+0x678>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d04a      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a51      	ldr	r2, [pc, #324]	; (80029cc <HAL_DMA_Init+0x67c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d045      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a50      	ldr	r2, [pc, #320]	; (80029d0 <HAL_DMA_Init+0x680>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d040      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a4e      	ldr	r2, [pc, #312]	; (80029d4 <HAL_DMA_Init+0x684>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d03b      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a4d      	ldr	r2, [pc, #308]	; (80029d8 <HAL_DMA_Init+0x688>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d036      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4b      	ldr	r2, [pc, #300]	; (80029dc <HAL_DMA_Init+0x68c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d031      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a4a      	ldr	r2, [pc, #296]	; (80029e0 <HAL_DMA_Init+0x690>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d02c      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a48      	ldr	r2, [pc, #288]	; (80029e4 <HAL_DMA_Init+0x694>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d027      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a47      	ldr	r2, [pc, #284]	; (80029e8 <HAL_DMA_Init+0x698>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d022      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a45      	ldr	r2, [pc, #276]	; (80029ec <HAL_DMA_Init+0x69c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01d      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a44      	ldr	r2, [pc, #272]	; (80029f0 <HAL_DMA_Init+0x6a0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a42      	ldr	r2, [pc, #264]	; (80029f4 <HAL_DMA_Init+0x6a4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a41      	ldr	r2, [pc, #260]	; (80029f8 <HAL_DMA_Init+0x6a8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00e      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a3f      	ldr	r2, [pc, #252]	; (80029fc <HAL_DMA_Init+0x6ac>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a3e      	ldr	r2, [pc, #248]	; (8002a00 <HAL_DMA_Init+0x6b0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_DMA_Init+0x5c6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a3c      	ldr	r2, [pc, #240]	; (8002a04 <HAL_DMA_Init+0x6b4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_DMA_Init+0x5ca>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_DMA_Init+0x5cc>
 800291a:	2300      	movs	r3, #0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d032      	beq.n	8002986 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f002 fa4d 	bl	8004dc0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b80      	cmp	r3, #128	; 0x80
 800292c:	d102      	bne.n	8002934 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002948:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d010      	beq.n	8002974 <HAL_DMA_Init+0x624>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b08      	cmp	r3, #8
 8002958:	d80c      	bhi.n	8002974 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f002 faca 	bl	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	e008      	b.n	8002986 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	a7fdabf8 	.word	0xa7fdabf8
 80029a4:	cccccccd 	.word	0xcccccccd
 80029a8:	40020010 	.word	0x40020010
 80029ac:	40020028 	.word	0x40020028
 80029b0:	40020040 	.word	0x40020040
 80029b4:	40020058 	.word	0x40020058
 80029b8:	40020070 	.word	0x40020070
 80029bc:	40020088 	.word	0x40020088
 80029c0:	400200a0 	.word	0x400200a0
 80029c4:	400200b8 	.word	0x400200b8
 80029c8:	40020410 	.word	0x40020410
 80029cc:	40020428 	.word	0x40020428
 80029d0:	40020440 	.word	0x40020440
 80029d4:	40020458 	.word	0x40020458
 80029d8:	40020470 	.word	0x40020470
 80029dc:	40020488 	.word	0x40020488
 80029e0:	400204a0 	.word	0x400204a0
 80029e4:	400204b8 	.word	0x400204b8
 80029e8:	58025408 	.word	0x58025408
 80029ec:	5802541c 	.word	0x5802541c
 80029f0:	58025430 	.word	0x58025430
 80029f4:	58025444 	.word	0x58025444
 80029f8:	58025458 	.word	0x58025458
 80029fc:	5802546c 	.word	0x5802546c
 8002a00:	58025480 	.word	0x58025480
 8002a04:	58025494 	.word	0x58025494

08002a08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e226      	b.n	8002e72 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_DMA_Start_IT+0x2a>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e21f      	b.n	8002e72 <HAL_DMA_Start_IT+0x46a>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	f040 820a 	bne.w	8002e5c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a68      	ldr	r2, [pc, #416]	; (8002bfc <HAL_DMA_Start_IT+0x1f4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d04a      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a66      	ldr	r2, [pc, #408]	; (8002c00 <HAL_DMA_Start_IT+0x1f8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d045      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a65      	ldr	r2, [pc, #404]	; (8002c04 <HAL_DMA_Start_IT+0x1fc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d040      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a63      	ldr	r2, [pc, #396]	; (8002c08 <HAL_DMA_Start_IT+0x200>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d03b      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a62      	ldr	r2, [pc, #392]	; (8002c0c <HAL_DMA_Start_IT+0x204>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d036      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a60      	ldr	r2, [pc, #384]	; (8002c10 <HAL_DMA_Start_IT+0x208>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d031      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a5f      	ldr	r2, [pc, #380]	; (8002c14 <HAL_DMA_Start_IT+0x20c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d02c      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a5d      	ldr	r2, [pc, #372]	; (8002c18 <HAL_DMA_Start_IT+0x210>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d027      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a5c      	ldr	r2, [pc, #368]	; (8002c1c <HAL_DMA_Start_IT+0x214>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d022      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a5a      	ldr	r2, [pc, #360]	; (8002c20 <HAL_DMA_Start_IT+0x218>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01d      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a59      	ldr	r2, [pc, #356]	; (8002c24 <HAL_DMA_Start_IT+0x21c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d018      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a57      	ldr	r2, [pc, #348]	; (8002c28 <HAL_DMA_Start_IT+0x220>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <HAL_DMA_Start_IT+0x224>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00e      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a54      	ldr	r2, [pc, #336]	; (8002c30 <HAL_DMA_Start_IT+0x228>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a53      	ldr	r2, [pc, #332]	; (8002c34 <HAL_DMA_Start_IT+0x22c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_DMA_Start_IT+0xee>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a51      	ldr	r2, [pc, #324]	; (8002c38 <HAL_DMA_Start_IT+0x230>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d108      	bne.n	8002b08 <HAL_DMA_Start_IT+0x100>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e007      	b.n	8002b18 <HAL_DMA_Start_IT+0x110>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f001 fe74 	bl	800480c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a34      	ldr	r2, [pc, #208]	; (8002bfc <HAL_DMA_Start_IT+0x1f4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d04a      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a33      	ldr	r2, [pc, #204]	; (8002c00 <HAL_DMA_Start_IT+0x1f8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d045      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a31      	ldr	r2, [pc, #196]	; (8002c04 <HAL_DMA_Start_IT+0x1fc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d040      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <HAL_DMA_Start_IT+0x200>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d03b      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2e      	ldr	r2, [pc, #184]	; (8002c0c <HAL_DMA_Start_IT+0x204>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d036      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <HAL_DMA_Start_IT+0x208>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d031      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2b      	ldr	r2, [pc, #172]	; (8002c14 <HAL_DMA_Start_IT+0x20c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d02c      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <HAL_DMA_Start_IT+0x210>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d027      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <HAL_DMA_Start_IT+0x214>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d022      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a27      	ldr	r2, [pc, #156]	; (8002c20 <HAL_DMA_Start_IT+0x218>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d01d      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a25      	ldr	r2, [pc, #148]	; (8002c24 <HAL_DMA_Start_IT+0x21c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d018      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a24      	ldr	r2, [pc, #144]	; (8002c28 <HAL_DMA_Start_IT+0x220>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <HAL_DMA_Start_IT+0x224>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <HAL_DMA_Start_IT+0x228>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d009      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <HAL_DMA_Start_IT+0x22c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x1bc>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <HAL_DMA_Start_IT+0x230>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_DMA_Start_IT+0x1c0>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <HAL_DMA_Start_IT+0x1c2>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d036      	beq.n	8002c3c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 021e 	bic.w	r2, r3, #30
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0216 	orr.w	r2, r2, #22
 8002be0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d03e      	beq.n	8002c68 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0208 	orr.w	r2, r2, #8
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e035      	b.n	8002c68 <HAL_DMA_Start_IT+0x260>
 8002bfc:	40020010 	.word	0x40020010
 8002c00:	40020028 	.word	0x40020028
 8002c04:	40020040 	.word	0x40020040
 8002c08:	40020058 	.word	0x40020058
 8002c0c:	40020070 	.word	0x40020070
 8002c10:	40020088 	.word	0x40020088
 8002c14:	400200a0 	.word	0x400200a0
 8002c18:	400200b8 	.word	0x400200b8
 8002c1c:	40020410 	.word	0x40020410
 8002c20:	40020428 	.word	0x40020428
 8002c24:	40020440 	.word	0x40020440
 8002c28:	40020458 	.word	0x40020458
 8002c2c:	40020470 	.word	0x40020470
 8002c30:	40020488 	.word	0x40020488
 8002c34:	400204a0 	.word	0x400204a0
 8002c38:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 020e 	bic.w	r2, r3, #14
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 020a 	orr.w	r2, r2, #10
 8002c4e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0204 	orr.w	r2, r2, #4
 8002c66:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a83      	ldr	r2, [pc, #524]	; (8002e7c <HAL_DMA_Start_IT+0x474>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d072      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a82      	ldr	r2, [pc, #520]	; (8002e80 <HAL_DMA_Start_IT+0x478>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d06d      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a80      	ldr	r2, [pc, #512]	; (8002e84 <HAL_DMA_Start_IT+0x47c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d068      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7f      	ldr	r2, [pc, #508]	; (8002e88 <HAL_DMA_Start_IT+0x480>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d063      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a7d      	ldr	r2, [pc, #500]	; (8002e8c <HAL_DMA_Start_IT+0x484>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d05e      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7c      	ldr	r2, [pc, #496]	; (8002e90 <HAL_DMA_Start_IT+0x488>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d059      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a7a      	ldr	r2, [pc, #488]	; (8002e94 <HAL_DMA_Start_IT+0x48c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d054      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a79      	ldr	r2, [pc, #484]	; (8002e98 <HAL_DMA_Start_IT+0x490>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04f      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a77      	ldr	r2, [pc, #476]	; (8002e9c <HAL_DMA_Start_IT+0x494>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d04a      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a76      	ldr	r2, [pc, #472]	; (8002ea0 <HAL_DMA_Start_IT+0x498>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d045      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a74      	ldr	r2, [pc, #464]	; (8002ea4 <HAL_DMA_Start_IT+0x49c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d040      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a73      	ldr	r2, [pc, #460]	; (8002ea8 <HAL_DMA_Start_IT+0x4a0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d03b      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a71      	ldr	r2, [pc, #452]	; (8002eac <HAL_DMA_Start_IT+0x4a4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d036      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a70      	ldr	r2, [pc, #448]	; (8002eb0 <HAL_DMA_Start_IT+0x4a8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d031      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a6e      	ldr	r2, [pc, #440]	; (8002eb4 <HAL_DMA_Start_IT+0x4ac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02c      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6d      	ldr	r2, [pc, #436]	; (8002eb8 <HAL_DMA_Start_IT+0x4b0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d027      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6b      	ldr	r2, [pc, #428]	; (8002ebc <HAL_DMA_Start_IT+0x4b4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6a      	ldr	r2, [pc, #424]	; (8002ec0 <HAL_DMA_Start_IT+0x4b8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01d      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a68      	ldr	r2, [pc, #416]	; (8002ec4 <HAL_DMA_Start_IT+0x4bc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d018      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a67      	ldr	r2, [pc, #412]	; (8002ec8 <HAL_DMA_Start_IT+0x4c0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_DMA_Start_IT+0x4c4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a64      	ldr	r2, [pc, #400]	; (8002ed0 <HAL_DMA_Start_IT+0x4c8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a62      	ldr	r2, [pc, #392]	; (8002ed4 <HAL_DMA_Start_IT+0x4cc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_DMA_Start_IT+0x350>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a61      	ldr	r2, [pc, #388]	; (8002ed8 <HAL_DMA_Start_IT+0x4d0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_DMA_Start_IT+0x354>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_DMA_Start_IT+0x356>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01a      	beq.n	8002d98 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d96:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <HAL_DMA_Start_IT+0x474>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d04a      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a36      	ldr	r2, [pc, #216]	; (8002e80 <HAL_DMA_Start_IT+0x478>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d045      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <HAL_DMA_Start_IT+0x47c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d040      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a33      	ldr	r2, [pc, #204]	; (8002e88 <HAL_DMA_Start_IT+0x480>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d03b      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a31      	ldr	r2, [pc, #196]	; (8002e8c <HAL_DMA_Start_IT+0x484>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d036      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <HAL_DMA_Start_IT+0x488>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d031      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2e      	ldr	r2, [pc, #184]	; (8002e94 <HAL_DMA_Start_IT+0x48c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02c      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2d      	ldr	r2, [pc, #180]	; (8002e98 <HAL_DMA_Start_IT+0x490>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d027      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <HAL_DMA_Start_IT+0x494>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d022      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <HAL_DMA_Start_IT+0x498>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d01d      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <HAL_DMA_Start_IT+0x49c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d018      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <HAL_DMA_Start_IT+0x4a0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <HAL_DMA_Start_IT+0x4a4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00e      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <HAL_DMA_Start_IT+0x4a8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d009      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_DMA_Start_IT+0x4ac>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_DMA_Start_IT+0x430>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <HAL_DMA_Start_IT+0x4b0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d108      	bne.n	8002e4a <HAL_DMA_Start_IT+0x442>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e012      	b.n	8002e70 <HAL_DMA_Start_IT+0x468>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e009      	b.n	8002e70 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40020010 	.word	0x40020010
 8002e80:	40020028 	.word	0x40020028
 8002e84:	40020040 	.word	0x40020040
 8002e88:	40020058 	.word	0x40020058
 8002e8c:	40020070 	.word	0x40020070
 8002e90:	40020088 	.word	0x40020088
 8002e94:	400200a0 	.word	0x400200a0
 8002e98:	400200b8 	.word	0x400200b8
 8002e9c:	40020410 	.word	0x40020410
 8002ea0:	40020428 	.word	0x40020428
 8002ea4:	40020440 	.word	0x40020440
 8002ea8:	40020458 	.word	0x40020458
 8002eac:	40020470 	.word	0x40020470
 8002eb0:	40020488 	.word	0x40020488
 8002eb4:	400204a0 	.word	0x400204a0
 8002eb8:	400204b8 	.word	0x400204b8
 8002ebc:	58025408 	.word	0x58025408
 8002ec0:	5802541c 	.word	0x5802541c
 8002ec4:	58025430 	.word	0x58025430
 8002ec8:	58025444 	.word	0x58025444
 8002ecc:	58025458 	.word	0x58025458
 8002ed0:	5802546c 	.word	0x5802546c
 8002ed4:	58025480 	.word	0x58025480
 8002ed8:	58025494 	.word	0x58025494

08002edc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ee4:	f7ff f8c0 	bl	8002068 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e2dc      	b.n	80034ae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d008      	beq.n	8002f12 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2280      	movs	r2, #128	; 0x80
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e2cd      	b.n	80034ae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a76      	ldr	r2, [pc, #472]	; (80030f0 <HAL_DMA_Abort+0x214>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d04a      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a74      	ldr	r2, [pc, #464]	; (80030f4 <HAL_DMA_Abort+0x218>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d045      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a73      	ldr	r2, [pc, #460]	; (80030f8 <HAL_DMA_Abort+0x21c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d040      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a71      	ldr	r2, [pc, #452]	; (80030fc <HAL_DMA_Abort+0x220>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d03b      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a70      	ldr	r2, [pc, #448]	; (8003100 <HAL_DMA_Abort+0x224>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d036      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6e      	ldr	r2, [pc, #440]	; (8003104 <HAL_DMA_Abort+0x228>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d031      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6d      	ldr	r2, [pc, #436]	; (8003108 <HAL_DMA_Abort+0x22c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d02c      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	; (800310c <HAL_DMA_Abort+0x230>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d027      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6a      	ldr	r2, [pc, #424]	; (8003110 <HAL_DMA_Abort+0x234>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d022      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a68      	ldr	r2, [pc, #416]	; (8003114 <HAL_DMA_Abort+0x238>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01d      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a67      	ldr	r2, [pc, #412]	; (8003118 <HAL_DMA_Abort+0x23c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d018      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a65      	ldr	r2, [pc, #404]	; (800311c <HAL_DMA_Abort+0x240>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a64      	ldr	r2, [pc, #400]	; (8003120 <HAL_DMA_Abort+0x244>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00e      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a62      	ldr	r2, [pc, #392]	; (8003124 <HAL_DMA_Abort+0x248>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a61      	ldr	r2, [pc, #388]	; (8003128 <HAL_DMA_Abort+0x24c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_DMA_Abort+0xd6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5f      	ldr	r2, [pc, #380]	; (800312c <HAL_DMA_Abort+0x250>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_DMA_Abort+0xda>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_DMA_Abort+0xdc>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 021e 	bic.w	r2, r2, #30
 8002fca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fda:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e00a      	b.n	8002ffa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 020e 	bic.w	r2, r2, #14
 8002ff2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a3c      	ldr	r2, [pc, #240]	; (80030f0 <HAL_DMA_Abort+0x214>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d072      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a3a      	ldr	r2, [pc, #232]	; (80030f4 <HAL_DMA_Abort+0x218>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d06d      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <HAL_DMA_Abort+0x21c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d068      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a37      	ldr	r2, [pc, #220]	; (80030fc <HAL_DMA_Abort+0x220>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d063      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a36      	ldr	r2, [pc, #216]	; (8003100 <HAL_DMA_Abort+0x224>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d05e      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a34      	ldr	r2, [pc, #208]	; (8003104 <HAL_DMA_Abort+0x228>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d059      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a33      	ldr	r2, [pc, #204]	; (8003108 <HAL_DMA_Abort+0x22c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d054      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a31      	ldr	r2, [pc, #196]	; (800310c <HAL_DMA_Abort+0x230>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d04f      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a30      	ldr	r2, [pc, #192]	; (8003110 <HAL_DMA_Abort+0x234>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d04a      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a2e      	ldr	r2, [pc, #184]	; (8003114 <HAL_DMA_Abort+0x238>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d045      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <HAL_DMA_Abort+0x23c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d040      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2b      	ldr	r2, [pc, #172]	; (800311c <HAL_DMA_Abort+0x240>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d03b      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_DMA_Abort+0x244>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d036      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <HAL_DMA_Abort+0x248>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d031      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a27      	ldr	r2, [pc, #156]	; (8003128 <HAL_DMA_Abort+0x24c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d02c      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a25      	ldr	r2, [pc, #148]	; (800312c <HAL_DMA_Abort+0x250>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d027      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a24      	ldr	r2, [pc, #144]	; (8003130 <HAL_DMA_Abort+0x254>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a22      	ldr	r2, [pc, #136]	; (8003134 <HAL_DMA_Abort+0x258>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01d      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a21      	ldr	r2, [pc, #132]	; (8003138 <HAL_DMA_Abort+0x25c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d018      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1f      	ldr	r2, [pc, #124]	; (800313c <HAL_DMA_Abort+0x260>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_DMA_Abort+0x264>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <HAL_DMA_Abort+0x268>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_DMA_Abort+0x26c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_DMA_Abort+0x20e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_DMA_Abort+0x270>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d132      	bne.n	8003150 <HAL_DMA_Abort+0x274>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e031      	b.n	8003152 <HAL_DMA_Abort+0x276>
 80030ee:	bf00      	nop
 80030f0:	40020010 	.word	0x40020010
 80030f4:	40020028 	.word	0x40020028
 80030f8:	40020040 	.word	0x40020040
 80030fc:	40020058 	.word	0x40020058
 8003100:	40020070 	.word	0x40020070
 8003104:	40020088 	.word	0x40020088
 8003108:	400200a0 	.word	0x400200a0
 800310c:	400200b8 	.word	0x400200b8
 8003110:	40020410 	.word	0x40020410
 8003114:	40020428 	.word	0x40020428
 8003118:	40020440 	.word	0x40020440
 800311c:	40020458 	.word	0x40020458
 8003120:	40020470 	.word	0x40020470
 8003124:	40020488 	.word	0x40020488
 8003128:	400204a0 	.word	0x400204a0
 800312c:	400204b8 	.word	0x400204b8
 8003130:	58025408 	.word	0x58025408
 8003134:	5802541c 	.word	0x5802541c
 8003138:	58025430 	.word	0x58025430
 800313c:	58025444 	.word	0x58025444
 8003140:	58025458 	.word	0x58025458
 8003144:	5802546c 	.word	0x5802546c
 8003148:	58025480 	.word	0x58025480
 800314c:	58025494 	.word	0x58025494
 8003150:	2300      	movs	r3, #0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003164:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6d      	ldr	r2, [pc, #436]	; (8003320 <HAL_DMA_Abort+0x444>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d04a      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6b      	ldr	r2, [pc, #428]	; (8003324 <HAL_DMA_Abort+0x448>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d045      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6a      	ldr	r2, [pc, #424]	; (8003328 <HAL_DMA_Abort+0x44c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d040      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a68      	ldr	r2, [pc, #416]	; (800332c <HAL_DMA_Abort+0x450>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d03b      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a67      	ldr	r2, [pc, #412]	; (8003330 <HAL_DMA_Abort+0x454>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d036      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a65      	ldr	r2, [pc, #404]	; (8003334 <HAL_DMA_Abort+0x458>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d031      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a64      	ldr	r2, [pc, #400]	; (8003338 <HAL_DMA_Abort+0x45c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d02c      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a62      	ldr	r2, [pc, #392]	; (800333c <HAL_DMA_Abort+0x460>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d027      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a61      	ldr	r2, [pc, #388]	; (8003340 <HAL_DMA_Abort+0x464>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d022      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5f      	ldr	r2, [pc, #380]	; (8003344 <HAL_DMA_Abort+0x468>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01d      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5e      	ldr	r2, [pc, #376]	; (8003348 <HAL_DMA_Abort+0x46c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d018      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5c      	ldr	r2, [pc, #368]	; (800334c <HAL_DMA_Abort+0x470>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a5b      	ldr	r2, [pc, #364]	; (8003350 <HAL_DMA_Abort+0x474>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00e      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a59      	ldr	r2, [pc, #356]	; (8003354 <HAL_DMA_Abort+0x478>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d009      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a58      	ldr	r2, [pc, #352]	; (8003358 <HAL_DMA_Abort+0x47c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_DMA_Abort+0x32a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a56      	ldr	r2, [pc, #344]	; (800335c <HAL_DMA_Abort+0x480>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d108      	bne.n	8003218 <HAL_DMA_Abort+0x33c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e007      	b.n	8003228 <HAL_DMA_Abort+0x34c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003228:	e013      	b.n	8003252 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800322a:	f7fe ff1d 	bl	8002068 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b05      	cmp	r3, #5
 8003236:	d90c      	bls.n	8003252 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2203      	movs	r2, #3
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e12d      	b.n	80034ae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e5      	bne.n	800322a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2f      	ldr	r2, [pc, #188]	; (8003320 <HAL_DMA_Abort+0x444>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d04a      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a2d      	ldr	r2, [pc, #180]	; (8003324 <HAL_DMA_Abort+0x448>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d045      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <HAL_DMA_Abort+0x44c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d040      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a2a      	ldr	r2, [pc, #168]	; (800332c <HAL_DMA_Abort+0x450>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d03b      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a29      	ldr	r2, [pc, #164]	; (8003330 <HAL_DMA_Abort+0x454>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d036      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a27      	ldr	r2, [pc, #156]	; (8003334 <HAL_DMA_Abort+0x458>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d031      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a26      	ldr	r2, [pc, #152]	; (8003338 <HAL_DMA_Abort+0x45c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d02c      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a24      	ldr	r2, [pc, #144]	; (800333c <HAL_DMA_Abort+0x460>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d027      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a23      	ldr	r2, [pc, #140]	; (8003340 <HAL_DMA_Abort+0x464>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d022      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a21      	ldr	r2, [pc, #132]	; (8003344 <HAL_DMA_Abort+0x468>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01d      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a20      	ldr	r2, [pc, #128]	; (8003348 <HAL_DMA_Abort+0x46c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d018      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1e      	ldr	r2, [pc, #120]	; (800334c <HAL_DMA_Abort+0x470>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <HAL_DMA_Abort+0x474>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_DMA_Abort+0x478>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1a      	ldr	r2, [pc, #104]	; (8003358 <HAL_DMA_Abort+0x47c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_DMA_Abort+0x422>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a18      	ldr	r2, [pc, #96]	; (800335c <HAL_DMA_Abort+0x480>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_DMA_Abort+0x426>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_DMA_Abort+0x428>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d02b      	beq.n	8003360 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	223f      	movs	r2, #63	; 0x3f
 8003318:	409a      	lsls	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	e02a      	b.n	8003376 <HAL_DMA_Abort+0x49a>
 8003320:	40020010 	.word	0x40020010
 8003324:	40020028 	.word	0x40020028
 8003328:	40020040 	.word	0x40020040
 800332c:	40020058 	.word	0x40020058
 8003330:	40020070 	.word	0x40020070
 8003334:	40020088 	.word	0x40020088
 8003338:	400200a0 	.word	0x400200a0
 800333c:	400200b8 	.word	0x400200b8
 8003340:	40020410 	.word	0x40020410
 8003344:	40020428 	.word	0x40020428
 8003348:	40020440 	.word	0x40020440
 800334c:	40020458 	.word	0x40020458
 8003350:	40020470 	.word	0x40020470
 8003354:	40020488 	.word	0x40020488
 8003358:	400204a0 	.word	0x400204a0
 800335c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2201      	movs	r2, #1
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a4f      	ldr	r2, [pc, #316]	; (80034b8 <HAL_DMA_Abort+0x5dc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d072      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a4d      	ldr	r2, [pc, #308]	; (80034bc <HAL_DMA_Abort+0x5e0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d06d      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a4c      	ldr	r2, [pc, #304]	; (80034c0 <HAL_DMA_Abort+0x5e4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d068      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a4a      	ldr	r2, [pc, #296]	; (80034c4 <HAL_DMA_Abort+0x5e8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d063      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a49      	ldr	r2, [pc, #292]	; (80034c8 <HAL_DMA_Abort+0x5ec>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d05e      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a47      	ldr	r2, [pc, #284]	; (80034cc <HAL_DMA_Abort+0x5f0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d059      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a46      	ldr	r2, [pc, #280]	; (80034d0 <HAL_DMA_Abort+0x5f4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d054      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a44      	ldr	r2, [pc, #272]	; (80034d4 <HAL_DMA_Abort+0x5f8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d04f      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a43      	ldr	r2, [pc, #268]	; (80034d8 <HAL_DMA_Abort+0x5fc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d04a      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a41      	ldr	r2, [pc, #260]	; (80034dc <HAL_DMA_Abort+0x600>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d045      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a40      	ldr	r2, [pc, #256]	; (80034e0 <HAL_DMA_Abort+0x604>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d040      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a3e      	ldr	r2, [pc, #248]	; (80034e4 <HAL_DMA_Abort+0x608>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d03b      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3d      	ldr	r2, [pc, #244]	; (80034e8 <HAL_DMA_Abort+0x60c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d036      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a3b      	ldr	r2, [pc, #236]	; (80034ec <HAL_DMA_Abort+0x610>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d031      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a3a      	ldr	r2, [pc, #232]	; (80034f0 <HAL_DMA_Abort+0x614>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d02c      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a38      	ldr	r2, [pc, #224]	; (80034f4 <HAL_DMA_Abort+0x618>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d027      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a37      	ldr	r2, [pc, #220]	; (80034f8 <HAL_DMA_Abort+0x61c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a35      	ldr	r2, [pc, #212]	; (80034fc <HAL_DMA_Abort+0x620>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01d      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a34      	ldr	r2, [pc, #208]	; (8003500 <HAL_DMA_Abort+0x624>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d018      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a32      	ldr	r2, [pc, #200]	; (8003504 <HAL_DMA_Abort+0x628>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a31      	ldr	r2, [pc, #196]	; (8003508 <HAL_DMA_Abort+0x62c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2f      	ldr	r2, [pc, #188]	; (800350c <HAL_DMA_Abort+0x630>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d009      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2e      	ldr	r2, [pc, #184]	; (8003510 <HAL_DMA_Abort+0x634>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_DMA_Abort+0x58a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2c      	ldr	r2, [pc, #176]	; (8003514 <HAL_DMA_Abort+0x638>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d101      	bne.n	800346a <HAL_DMA_Abort+0x58e>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <HAL_DMA_Abort+0x590>
 800346a:	2300      	movs	r3, #0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003478:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003490:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800349a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40020010 	.word	0x40020010
 80034bc:	40020028 	.word	0x40020028
 80034c0:	40020040 	.word	0x40020040
 80034c4:	40020058 	.word	0x40020058
 80034c8:	40020070 	.word	0x40020070
 80034cc:	40020088 	.word	0x40020088
 80034d0:	400200a0 	.word	0x400200a0
 80034d4:	400200b8 	.word	0x400200b8
 80034d8:	40020410 	.word	0x40020410
 80034dc:	40020428 	.word	0x40020428
 80034e0:	40020440 	.word	0x40020440
 80034e4:	40020458 	.word	0x40020458
 80034e8:	40020470 	.word	0x40020470
 80034ec:	40020488 	.word	0x40020488
 80034f0:	400204a0 	.word	0x400204a0
 80034f4:	400204b8 	.word	0x400204b8
 80034f8:	58025408 	.word	0x58025408
 80034fc:	5802541c 	.word	0x5802541c
 8003500:	58025430 	.word	0x58025430
 8003504:	58025444 	.word	0x58025444
 8003508:	58025458 	.word	0x58025458
 800350c:	5802546c 	.word	0x5802546c
 8003510:	58025480 	.word	0x58025480
 8003514:	58025494 	.word	0x58025494

08003518 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e205      	b.n	8003936 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d004      	beq.n	8003540 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e1fa      	b.n	8003936 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a8c      	ldr	r2, [pc, #560]	; (8003778 <HAL_DMA_Abort_IT+0x260>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d04a      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a8b      	ldr	r2, [pc, #556]	; (800377c <HAL_DMA_Abort_IT+0x264>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d045      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a89      	ldr	r2, [pc, #548]	; (8003780 <HAL_DMA_Abort_IT+0x268>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d040      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a88      	ldr	r2, [pc, #544]	; (8003784 <HAL_DMA_Abort_IT+0x26c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d03b      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a86      	ldr	r2, [pc, #536]	; (8003788 <HAL_DMA_Abort_IT+0x270>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d036      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a85      	ldr	r2, [pc, #532]	; (800378c <HAL_DMA_Abort_IT+0x274>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d031      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a83      	ldr	r2, [pc, #524]	; (8003790 <HAL_DMA_Abort_IT+0x278>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d02c      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a82      	ldr	r2, [pc, #520]	; (8003794 <HAL_DMA_Abort_IT+0x27c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d027      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a80      	ldr	r2, [pc, #512]	; (8003798 <HAL_DMA_Abort_IT+0x280>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d022      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7f      	ldr	r2, [pc, #508]	; (800379c <HAL_DMA_Abort_IT+0x284>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d01d      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a7d      	ldr	r2, [pc, #500]	; (80037a0 <HAL_DMA_Abort_IT+0x288>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d018      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7c      	ldr	r2, [pc, #496]	; (80037a4 <HAL_DMA_Abort_IT+0x28c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d013      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a7a      	ldr	r2, [pc, #488]	; (80037a8 <HAL_DMA_Abort_IT+0x290>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00e      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a79      	ldr	r2, [pc, #484]	; (80037ac <HAL_DMA_Abort_IT+0x294>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a77      	ldr	r2, [pc, #476]	; (80037b0 <HAL_DMA_Abort_IT+0x298>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d004      	beq.n	80035e0 <HAL_DMA_Abort_IT+0xc8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a76      	ldr	r2, [pc, #472]	; (80037b4 <HAL_DMA_Abort_IT+0x29c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d101      	bne.n	80035e4 <HAL_DMA_Abort_IT+0xcc>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <HAL_DMA_Abort_IT+0xce>
 80035e4:	2300      	movs	r3, #0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d065      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2204      	movs	r2, #4
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a60      	ldr	r2, [pc, #384]	; (8003778 <HAL_DMA_Abort_IT+0x260>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d04a      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5e      	ldr	r2, [pc, #376]	; (800377c <HAL_DMA_Abort_IT+0x264>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d045      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a5d      	ldr	r2, [pc, #372]	; (8003780 <HAL_DMA_Abort_IT+0x268>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d040      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a5b      	ldr	r2, [pc, #364]	; (8003784 <HAL_DMA_Abort_IT+0x26c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d03b      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a5a      	ldr	r2, [pc, #360]	; (8003788 <HAL_DMA_Abort_IT+0x270>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d036      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_DMA_Abort_IT+0x274>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d031      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a57      	ldr	r2, [pc, #348]	; (8003790 <HAL_DMA_Abort_IT+0x278>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d02c      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a55      	ldr	r2, [pc, #340]	; (8003794 <HAL_DMA_Abort_IT+0x27c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d027      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a54      	ldr	r2, [pc, #336]	; (8003798 <HAL_DMA_Abort_IT+0x280>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a52      	ldr	r2, [pc, #328]	; (800379c <HAL_DMA_Abort_IT+0x284>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01d      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a51      	ldr	r2, [pc, #324]	; (80037a0 <HAL_DMA_Abort_IT+0x288>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d018      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a4f      	ldr	r2, [pc, #316]	; (80037a4 <HAL_DMA_Abort_IT+0x28c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a4e      	ldr	r2, [pc, #312]	; (80037a8 <HAL_DMA_Abort_IT+0x290>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00e      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <HAL_DMA_Abort_IT+0x294>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a4b      	ldr	r2, [pc, #300]	; (80037b0 <HAL_DMA_Abort_IT+0x298>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_DMA_Abort_IT+0x17a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a49      	ldr	r2, [pc, #292]	; (80037b4 <HAL_DMA_Abort_IT+0x29c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d108      	bne.n	80036a4 <HAL_DMA_Abort_IT+0x18c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e147      	b.n	8003934 <HAL_DMA_Abort_IT+0x41c>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	e13e      	b.n	8003934 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 020e 	bic.w	r2, r2, #14
 80036c4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2b      	ldr	r2, [pc, #172]	; (8003778 <HAL_DMA_Abort_IT+0x260>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d04a      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a29      	ldr	r2, [pc, #164]	; (800377c <HAL_DMA_Abort_IT+0x264>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d045      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a28      	ldr	r2, [pc, #160]	; (8003780 <HAL_DMA_Abort_IT+0x268>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d040      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a26      	ldr	r2, [pc, #152]	; (8003784 <HAL_DMA_Abort_IT+0x26c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d03b      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a25      	ldr	r2, [pc, #148]	; (8003788 <HAL_DMA_Abort_IT+0x270>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d036      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a23      	ldr	r2, [pc, #140]	; (800378c <HAL_DMA_Abort_IT+0x274>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d031      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a22      	ldr	r2, [pc, #136]	; (8003790 <HAL_DMA_Abort_IT+0x278>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d02c      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a20      	ldr	r2, [pc, #128]	; (8003794 <HAL_DMA_Abort_IT+0x27c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d027      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_DMA_Abort_IT+0x280>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d022      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_DMA_Abort_IT+0x284>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d01d      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_DMA_Abort_IT+0x288>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d018      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1a      	ldr	r2, [pc, #104]	; (80037a4 <HAL_DMA_Abort_IT+0x28c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <HAL_DMA_Abort_IT+0x290>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00e      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <HAL_DMA_Abort_IT+0x294>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_DMA_Abort_IT+0x298>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_DMA_Abort_IT+0x24e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <HAL_DMA_Abort_IT+0x29c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d128      	bne.n	80037b8 <HAL_DMA_Abort_IT+0x2a0>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e027      	b.n	80037c8 <HAL_DMA_Abort_IT+0x2b0>
 8003778:	40020010 	.word	0x40020010
 800377c:	40020028 	.word	0x40020028
 8003780:	40020040 	.word	0x40020040
 8003784:	40020058 	.word	0x40020058
 8003788:	40020070 	.word	0x40020070
 800378c:	40020088 	.word	0x40020088
 8003790:	400200a0 	.word	0x400200a0
 8003794:	400200b8 	.word	0x400200b8
 8003798:	40020410 	.word	0x40020410
 800379c:	40020428 	.word	0x40020428
 80037a0:	40020440 	.word	0x40020440
 80037a4:	40020458 	.word	0x40020458
 80037a8:	40020470 	.word	0x40020470
 80037ac:	40020488 	.word	0x40020488
 80037b0:	400204a0 	.word	0x400204a0
 80037b4:	400204b8 	.word	0x400204b8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5c      	ldr	r2, [pc, #368]	; (8003940 <HAL_DMA_Abort_IT+0x428>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d072      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5b      	ldr	r2, [pc, #364]	; (8003944 <HAL_DMA_Abort_IT+0x42c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d06d      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a59      	ldr	r2, [pc, #356]	; (8003948 <HAL_DMA_Abort_IT+0x430>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d068      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_DMA_Abort_IT+0x434>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d063      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a56      	ldr	r2, [pc, #344]	; (8003950 <HAL_DMA_Abort_IT+0x438>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d05e      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a55      	ldr	r2, [pc, #340]	; (8003954 <HAL_DMA_Abort_IT+0x43c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d059      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a53      	ldr	r2, [pc, #332]	; (8003958 <HAL_DMA_Abort_IT+0x440>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d054      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a52      	ldr	r2, [pc, #328]	; (800395c <HAL_DMA_Abort_IT+0x444>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d04f      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a50      	ldr	r2, [pc, #320]	; (8003960 <HAL_DMA_Abort_IT+0x448>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d04a      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a4f      	ldr	r2, [pc, #316]	; (8003964 <HAL_DMA_Abort_IT+0x44c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d045      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4d      	ldr	r2, [pc, #308]	; (8003968 <HAL_DMA_Abort_IT+0x450>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d040      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4c      	ldr	r2, [pc, #304]	; (800396c <HAL_DMA_Abort_IT+0x454>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d03b      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4a      	ldr	r2, [pc, #296]	; (8003970 <HAL_DMA_Abort_IT+0x458>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d036      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a49      	ldr	r2, [pc, #292]	; (8003974 <HAL_DMA_Abort_IT+0x45c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d031      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a47      	ldr	r2, [pc, #284]	; (8003978 <HAL_DMA_Abort_IT+0x460>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02c      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a46      	ldr	r2, [pc, #280]	; (800397c <HAL_DMA_Abort_IT+0x464>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d027      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a44      	ldr	r2, [pc, #272]	; (8003980 <HAL_DMA_Abort_IT+0x468>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d022      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a43      	ldr	r2, [pc, #268]	; (8003984 <HAL_DMA_Abort_IT+0x46c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d01d      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a41      	ldr	r2, [pc, #260]	; (8003988 <HAL_DMA_Abort_IT+0x470>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d018      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a40      	ldr	r2, [pc, #256]	; (800398c <HAL_DMA_Abort_IT+0x474>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a3e      	ldr	r2, [pc, #248]	; (8003990 <HAL_DMA_Abort_IT+0x478>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3d      	ldr	r2, [pc, #244]	; (8003994 <HAL_DMA_Abort_IT+0x47c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <HAL_DMA_Abort_IT+0x480>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x3a0>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a3a      	ldr	r2, [pc, #232]	; (800399c <HAL_DMA_Abort_IT+0x484>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d101      	bne.n	80038bc <HAL_DMA_Abort_IT+0x3a4>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_DMA_Abort_IT+0x3a6>
 80038bc:	2300      	movs	r3, #0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d028      	beq.n	8003914 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	2201      	movs	r2, #1
 80038e2:	409a      	lsls	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00c      	beq.n	8003914 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003908:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003912:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40020010 	.word	0x40020010
 8003944:	40020028 	.word	0x40020028
 8003948:	40020040 	.word	0x40020040
 800394c:	40020058 	.word	0x40020058
 8003950:	40020070 	.word	0x40020070
 8003954:	40020088 	.word	0x40020088
 8003958:	400200a0 	.word	0x400200a0
 800395c:	400200b8 	.word	0x400200b8
 8003960:	40020410 	.word	0x40020410
 8003964:	40020428 	.word	0x40020428
 8003968:	40020440 	.word	0x40020440
 800396c:	40020458 	.word	0x40020458
 8003970:	40020470 	.word	0x40020470
 8003974:	40020488 	.word	0x40020488
 8003978:	400204a0 	.word	0x400204a0
 800397c:	400204b8 	.word	0x400204b8
 8003980:	58025408 	.word	0x58025408
 8003984:	5802541c 	.word	0x5802541c
 8003988:	58025430 	.word	0x58025430
 800398c:	58025444 	.word	0x58025444
 8003990:	58025458 	.word	0x58025458
 8003994:	5802546c 	.word	0x5802546c
 8003998:	58025480 	.word	0x58025480
 800399c:	58025494 	.word	0x58025494

080039a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	; 0x28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039ac:	4b67      	ldr	r3, [pc, #412]	; (8003b4c <HAL_DMA_IRQHandler+0x1ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a67      	ldr	r2, [pc, #412]	; (8003b50 <HAL_DMA_IRQHandler+0x1b0>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a5f      	ldr	r2, [pc, #380]	; (8003b54 <HAL_DMA_IRQHandler+0x1b4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d04a      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5d      	ldr	r2, [pc, #372]	; (8003b58 <HAL_DMA_IRQHandler+0x1b8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d045      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a5c      	ldr	r2, [pc, #368]	; (8003b5c <HAL_DMA_IRQHandler+0x1bc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d040      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a5a      	ldr	r2, [pc, #360]	; (8003b60 <HAL_DMA_IRQHandler+0x1c0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d03b      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a59      	ldr	r2, [pc, #356]	; (8003b64 <HAL_DMA_IRQHandler+0x1c4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d036      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a57      	ldr	r2, [pc, #348]	; (8003b68 <HAL_DMA_IRQHandler+0x1c8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d031      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a56      	ldr	r2, [pc, #344]	; (8003b6c <HAL_DMA_IRQHandler+0x1cc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d02c      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a54      	ldr	r2, [pc, #336]	; (8003b70 <HAL_DMA_IRQHandler+0x1d0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d027      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a53      	ldr	r2, [pc, #332]	; (8003b74 <HAL_DMA_IRQHandler+0x1d4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d022      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a51      	ldr	r2, [pc, #324]	; (8003b78 <HAL_DMA_IRQHandler+0x1d8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01d      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a50      	ldr	r2, [pc, #320]	; (8003b7c <HAL_DMA_IRQHandler+0x1dc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d018      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a4e      	ldr	r2, [pc, #312]	; (8003b80 <HAL_DMA_IRQHandler+0x1e0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4d      	ldr	r2, [pc, #308]	; (8003b84 <HAL_DMA_IRQHandler+0x1e4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <HAL_DMA_IRQHandler+0x1e8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <HAL_DMA_IRQHandler+0x1ec>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xd2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a48      	ldr	r2, [pc, #288]	; (8003b90 <HAL_DMA_IRQHandler+0x1f0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_DMA_IRQHandler+0xd6>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_DMA_IRQHandler+0xd8>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 842b 	beq.w	80042d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2208      	movs	r2, #8
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80a2 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2e      	ldr	r2, [pc, #184]	; (8003b54 <HAL_DMA_IRQHandler+0x1b4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d04a      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2d      	ldr	r2, [pc, #180]	; (8003b58 <HAL_DMA_IRQHandler+0x1b8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d045      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2b      	ldr	r2, [pc, #172]	; (8003b5c <HAL_DMA_IRQHandler+0x1bc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d040      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <HAL_DMA_IRQHandler+0x1c0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d03b      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <HAL_DMA_IRQHandler+0x1c4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d036      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <HAL_DMA_IRQHandler+0x1c8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d031      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <HAL_DMA_IRQHandler+0x1cc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d02c      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <HAL_DMA_IRQHandler+0x1d0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d027      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <HAL_DMA_IRQHandler+0x1d4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d022      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_DMA_IRQHandler+0x1d8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d01d      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1f      	ldr	r2, [pc, #124]	; (8003b7c <HAL_DMA_IRQHandler+0x1dc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d018      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <HAL_DMA_IRQHandler+0x1e0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d013      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1c      	ldr	r2, [pc, #112]	; (8003b84 <HAL_DMA_IRQHandler+0x1e4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00e      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1b      	ldr	r2, [pc, #108]	; (8003b88 <HAL_DMA_IRQHandler+0x1e8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d009      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a19      	ldr	r2, [pc, #100]	; (8003b8c <HAL_DMA_IRQHandler+0x1ec>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x194>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_DMA_IRQHandler+0x1f0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d12f      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x1f4>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bf14      	ite	ne
 8003b42:	2301      	movne	r3, #1
 8003b44:	2300      	moveq	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	e02e      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x208>
 8003b4a:	bf00      	nop
 8003b4c:	24000000 	.word	0x24000000
 8003b50:	1b4e81b5 	.word	0x1b4e81b5
 8003b54:	40020010 	.word	0x40020010
 8003b58:	40020028 	.word	0x40020028
 8003b5c:	40020040 	.word	0x40020040
 8003b60:	40020058 	.word	0x40020058
 8003b64:	40020070 	.word	0x40020070
 8003b68:	40020088 	.word	0x40020088
 8003b6c:	400200a0 	.word	0x400200a0
 8003b70:	400200b8 	.word	0x400200b8
 8003b74:	40020410 	.word	0x40020410
 8003b78:	40020428 	.word	0x40020428
 8003b7c:	40020440 	.word	0x40020440
 8003b80:	40020458 	.word	0x40020458
 8003b84:	40020470 	.word	0x40020470
 8003b88:	40020488 	.word	0x40020488
 8003b8c:	400204a0 	.word	0x400204a0
 8003b90:	400204b8 	.word	0x400204b8
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf14      	ite	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	2300      	moveq	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d015      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0204 	bic.w	r2, r2, #4
 8003bba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	fa22 f303 	lsr.w	r3, r2, r3
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d06e      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a69      	ldr	r2, [pc, #420]	; (8003d98 <HAL_DMA_IRQHandler+0x3f8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d04a      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a67      	ldr	r2, [pc, #412]	; (8003d9c <HAL_DMA_IRQHandler+0x3fc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d045      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a66      	ldr	r2, [pc, #408]	; (8003da0 <HAL_DMA_IRQHandler+0x400>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d040      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a64      	ldr	r2, [pc, #400]	; (8003da4 <HAL_DMA_IRQHandler+0x404>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d03b      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a63      	ldr	r2, [pc, #396]	; (8003da8 <HAL_DMA_IRQHandler+0x408>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d036      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a61      	ldr	r2, [pc, #388]	; (8003dac <HAL_DMA_IRQHandler+0x40c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a60      	ldr	r2, [pc, #384]	; (8003db0 <HAL_DMA_IRQHandler+0x410>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d02c      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a5e      	ldr	r2, [pc, #376]	; (8003db4 <HAL_DMA_IRQHandler+0x414>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d027      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a5d      	ldr	r2, [pc, #372]	; (8003db8 <HAL_DMA_IRQHandler+0x418>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5b      	ldr	r2, [pc, #364]	; (8003dbc <HAL_DMA_IRQHandler+0x41c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a5a      	ldr	r2, [pc, #360]	; (8003dc0 <HAL_DMA_IRQHandler+0x420>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d018      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <HAL_DMA_IRQHandler+0x424>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a57      	ldr	r2, [pc, #348]	; (8003dc8 <HAL_DMA_IRQHandler+0x428>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a55      	ldr	r2, [pc, #340]	; (8003dcc <HAL_DMA_IRQHandler+0x42c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a54      	ldr	r2, [pc, #336]	; (8003dd0 <HAL_DMA_IRQHandler+0x430>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2ee>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a52      	ldr	r2, [pc, #328]	; (8003dd4 <HAL_DMA_IRQHandler+0x434>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10a      	bne.n	8003ca4 <HAL_DMA_IRQHandler+0x304>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e003      	b.n	8003cac <HAL_DMA_IRQHandler+0x30c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	2201      	movs	r2, #1
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	f043 0202 	orr.w	r2, r3, #2
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 808f 	beq.w	8003e00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a2c      	ldr	r2, [pc, #176]	; (8003d98 <HAL_DMA_IRQHandler+0x3f8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d04a      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <HAL_DMA_IRQHandler+0x3fc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d045      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <HAL_DMA_IRQHandler+0x400>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d040      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a27      	ldr	r2, [pc, #156]	; (8003da4 <HAL_DMA_IRQHandler+0x404>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d03b      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a26      	ldr	r2, [pc, #152]	; (8003da8 <HAL_DMA_IRQHandler+0x408>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d036      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a24      	ldr	r2, [pc, #144]	; (8003dac <HAL_DMA_IRQHandler+0x40c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d031      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <HAL_DMA_IRQHandler+0x410>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d02c      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a21      	ldr	r2, [pc, #132]	; (8003db4 <HAL_DMA_IRQHandler+0x414>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d027      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <HAL_DMA_IRQHandler+0x418>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d022      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <HAL_DMA_IRQHandler+0x41c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01d      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <HAL_DMA_IRQHandler+0x420>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d018      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <HAL_DMA_IRQHandler+0x424>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d013      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1a      	ldr	r2, [pc, #104]	; (8003dc8 <HAL_DMA_IRQHandler+0x428>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_DMA_IRQHandler+0x42c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d009      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <HAL_DMA_IRQHandler+0x430>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x3e2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a15      	ldr	r2, [pc, #84]	; (8003dd4 <HAL_DMA_IRQHandler+0x434>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d12a      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x438>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	e023      	b.n	8003de0 <HAL_DMA_IRQHandler+0x440>
 8003d98:	40020010 	.word	0x40020010
 8003d9c:	40020028 	.word	0x40020028
 8003da0:	40020040 	.word	0x40020040
 8003da4:	40020058 	.word	0x40020058
 8003da8:	40020070 	.word	0x40020070
 8003dac:	40020088 	.word	0x40020088
 8003db0:	400200a0 	.word	0x400200a0
 8003db4:	400200b8 	.word	0x400200b8
 8003db8:	40020410 	.word	0x40020410
 8003dbc:	40020428 	.word	0x40020428
 8003dc0:	40020440 	.word	0x40020440
 8003dc4:	40020458 	.word	0x40020458
 8003dc8:	40020470 	.word	0x40020470
 8003dcc:	40020488 	.word	0x40020488
 8003dd0:	400204a0 	.word	0x400204a0
 8003dd4:	400204b8 	.word	0x400204b8
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00d      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2204      	movs	r2, #4
 8003dee:	409a      	lsls	r2, r3
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	f043 0204 	orr.w	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	2210      	movs	r2, #16
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80a6 	beq.w	8003f62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a85      	ldr	r2, [pc, #532]	; (8004030 <HAL_DMA_IRQHandler+0x690>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d04a      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a83      	ldr	r2, [pc, #524]	; (8004034 <HAL_DMA_IRQHandler+0x694>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d045      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a82      	ldr	r2, [pc, #520]	; (8004038 <HAL_DMA_IRQHandler+0x698>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d040      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a80      	ldr	r2, [pc, #512]	; (800403c <HAL_DMA_IRQHandler+0x69c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d03b      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a7f      	ldr	r2, [pc, #508]	; (8004040 <HAL_DMA_IRQHandler+0x6a0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d036      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a7d      	ldr	r2, [pc, #500]	; (8004044 <HAL_DMA_IRQHandler+0x6a4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d031      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7c      	ldr	r2, [pc, #496]	; (8004048 <HAL_DMA_IRQHandler+0x6a8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d02c      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a7a      	ldr	r2, [pc, #488]	; (800404c <HAL_DMA_IRQHandler+0x6ac>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d027      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a79      	ldr	r2, [pc, #484]	; (8004050 <HAL_DMA_IRQHandler+0x6b0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d022      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a77      	ldr	r2, [pc, #476]	; (8004054 <HAL_DMA_IRQHandler+0x6b4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01d      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a76      	ldr	r2, [pc, #472]	; (8004058 <HAL_DMA_IRQHandler+0x6b8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d018      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a74      	ldr	r2, [pc, #464]	; (800405c <HAL_DMA_IRQHandler+0x6bc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a73      	ldr	r2, [pc, #460]	; (8004060 <HAL_DMA_IRQHandler+0x6c0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a71      	ldr	r2, [pc, #452]	; (8004064 <HAL_DMA_IRQHandler+0x6c4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a70      	ldr	r2, [pc, #448]	; (8004068 <HAL_DMA_IRQHandler+0x6c8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x516>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6e      	ldr	r2, [pc, #440]	; (800406c <HAL_DMA_IRQHandler+0x6cc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10a      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x52c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e009      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x540>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bf14      	ite	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	2300      	moveq	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d03e      	beq.n	8003f62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2210      	movs	r2, #16
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d018      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d108      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d024      	beq.n	8003f62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
 8003f20:	e01f      	b.n	8003f62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01b      	beq.n	8003f62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
 8003f32:	e016      	b.n	8003f62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0208 	bic.w	r2, r2, #8
 8003f50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8110 	beq.w	8004198 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <HAL_DMA_IRQHandler+0x690>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d04a      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <HAL_DMA_IRQHandler+0x694>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d045      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a29      	ldr	r2, [pc, #164]	; (8004038 <HAL_DMA_IRQHandler+0x698>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d040      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a28      	ldr	r2, [pc, #160]	; (800403c <HAL_DMA_IRQHandler+0x69c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d03b      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a26      	ldr	r2, [pc, #152]	; (8004040 <HAL_DMA_IRQHandler+0x6a0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d036      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a25      	ldr	r2, [pc, #148]	; (8004044 <HAL_DMA_IRQHandler+0x6a4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d031      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <HAL_DMA_IRQHandler+0x6a8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d02c      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a22      	ldr	r2, [pc, #136]	; (800404c <HAL_DMA_IRQHandler+0x6ac>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d027      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a20      	ldr	r2, [pc, #128]	; (8004050 <HAL_DMA_IRQHandler+0x6b0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d022      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <HAL_DMA_IRQHandler+0x6b4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d01d      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <HAL_DMA_IRQHandler+0x6b8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d018      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_DMA_IRQHandler+0x6bc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <HAL_DMA_IRQHandler+0x6c0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00e      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a19      	ldr	r2, [pc, #100]	; (8004064 <HAL_DMA_IRQHandler+0x6c4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a17      	ldr	r2, [pc, #92]	; (8004068 <HAL_DMA_IRQHandler+0x6c8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_DMA_IRQHandler+0x678>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a16      	ldr	r2, [pc, #88]	; (800406c <HAL_DMA_IRQHandler+0x6cc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d12b      	bne.n	8004070 <HAL_DMA_IRQHandler+0x6d0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e02a      	b.n	8004084 <HAL_DMA_IRQHandler+0x6e4>
 800402e:	bf00      	nop
 8004030:	40020010 	.word	0x40020010
 8004034:	40020028 	.word	0x40020028
 8004038:	40020040 	.word	0x40020040
 800403c:	40020058 	.word	0x40020058
 8004040:	40020070 	.word	0x40020070
 8004044:	40020088 	.word	0x40020088
 8004048:	400200a0 	.word	0x400200a0
 800404c:	400200b8 	.word	0x400200b8
 8004050:	40020410 	.word	0x40020410
 8004054:	40020428 	.word	0x40020428
 8004058:	40020440 	.word	0x40020440
 800405c:	40020458 	.word	0x40020458
 8004060:	40020470 	.word	0x40020470
 8004064:	40020488 	.word	0x40020488
 8004068:	400204a0 	.word	0x400204a0
 800406c:	400204b8 	.word	0x400204b8
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	bf14      	ite	ne
 800407e:	2301      	movne	r3, #1
 8004080:	2300      	moveq	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8087 	beq.w	8004198 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2220      	movs	r2, #32
 8004094:	409a      	lsls	r2, r3
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d139      	bne.n	800411a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0216 	bic.w	r2, r2, #22
 80040b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <HAL_DMA_IRQHandler+0x736>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0208 	bic.w	r2, r2, #8
 80040e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	223f      	movs	r2, #63	; 0x3f
 80040f0:	409a      	lsls	r2, r3
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 834a 	beq.w	80047a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
          }
          return;
 8004118:	e344      	b.n	80047a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d018      	beq.n	800415a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	2b00      	cmp	r3, #0
 800413c:	d02c      	beq.n	8004198 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
 8004146:	e027      	b.n	8004198 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d023      	beq.n	8004198 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
 8004158:	e01e      	b.n	8004198 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10f      	bne.n	8004188 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0210 	bic.w	r2, r2, #16
 8004176:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8306 	beq.w	80047ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8088 	beq.w	80042c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2204      	movs	r2, #4
 80041b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a7a      	ldr	r2, [pc, #488]	; (80043a8 <HAL_DMA_IRQHandler+0xa08>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d04a      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a79      	ldr	r2, [pc, #484]	; (80043ac <HAL_DMA_IRQHandler+0xa0c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d045      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a77      	ldr	r2, [pc, #476]	; (80043b0 <HAL_DMA_IRQHandler+0xa10>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d040      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a76      	ldr	r2, [pc, #472]	; (80043b4 <HAL_DMA_IRQHandler+0xa14>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d03b      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a74      	ldr	r2, [pc, #464]	; (80043b8 <HAL_DMA_IRQHandler+0xa18>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d036      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a73      	ldr	r2, [pc, #460]	; (80043bc <HAL_DMA_IRQHandler+0xa1c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d031      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a71      	ldr	r2, [pc, #452]	; (80043c0 <HAL_DMA_IRQHandler+0xa20>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02c      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a70      	ldr	r2, [pc, #448]	; (80043c4 <HAL_DMA_IRQHandler+0xa24>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d027      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a6e      	ldr	r2, [pc, #440]	; (80043c8 <HAL_DMA_IRQHandler+0xa28>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d022      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a6d      	ldr	r2, [pc, #436]	; (80043cc <HAL_DMA_IRQHandler+0xa2c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d01d      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6b      	ldr	r2, [pc, #428]	; (80043d0 <HAL_DMA_IRQHandler+0xa30>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d018      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6a      	ldr	r2, [pc, #424]	; (80043d4 <HAL_DMA_IRQHandler+0xa34>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a68      	ldr	r2, [pc, #416]	; (80043d8 <HAL_DMA_IRQHandler+0xa38>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a67      	ldr	r2, [pc, #412]	; (80043dc <HAL_DMA_IRQHandler+0xa3c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a65      	ldr	r2, [pc, #404]	; (80043e0 <HAL_DMA_IRQHandler+0xa40>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_DMA_IRQHandler+0x8b8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a64      	ldr	r2, [pc, #400]	; (80043e4 <HAL_DMA_IRQHandler+0xa44>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d108      	bne.n	800426a <HAL_DMA_IRQHandler+0x8ca>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e007      	b.n	800427a <HAL_DMA_IRQHandler+0x8da>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3301      	adds	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004282:	429a      	cmp	r2, r3
 8004284:	d307      	bcc.n	8004296 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f2      	bne.n	800427a <HAL_DMA_IRQHandler+0x8da>
 8004294:	e000      	b.n	8004298 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004296:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2203      	movs	r2, #3
 80042b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80042b6:	e003      	b.n	80042c0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8272 	beq.w	80047ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
 80042d2:	e26c      	b.n	80047ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a43      	ldr	r2, [pc, #268]	; (80043e8 <HAL_DMA_IRQHandler+0xa48>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d022      	beq.n	8004324 <HAL_DMA_IRQHandler+0x984>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a42      	ldr	r2, [pc, #264]	; (80043ec <HAL_DMA_IRQHandler+0xa4c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d01d      	beq.n	8004324 <HAL_DMA_IRQHandler+0x984>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a40      	ldr	r2, [pc, #256]	; (80043f0 <HAL_DMA_IRQHandler+0xa50>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d018      	beq.n	8004324 <HAL_DMA_IRQHandler+0x984>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3f      	ldr	r2, [pc, #252]	; (80043f4 <HAL_DMA_IRQHandler+0xa54>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <HAL_DMA_IRQHandler+0x984>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3d      	ldr	r2, [pc, #244]	; (80043f8 <HAL_DMA_IRQHandler+0xa58>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00e      	beq.n	8004324 <HAL_DMA_IRQHandler+0x984>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a3c      	ldr	r2, [pc, #240]	; (80043fc <HAL_DMA_IRQHandler+0xa5c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_DMA_IRQHandler+0x984>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a3a      	ldr	r2, [pc, #232]	; (8004400 <HAL_DMA_IRQHandler+0xa60>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_DMA_IRQHandler+0x984>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a39      	ldr	r2, [pc, #228]	; (8004404 <HAL_DMA_IRQHandler+0xa64>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d101      	bne.n	8004328 <HAL_DMA_IRQHandler+0x988>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <HAL_DMA_IRQHandler+0x98a>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 823f 	beq.w	80047ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2204      	movs	r2, #4
 8004342:	409a      	lsls	r2, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80cd 	beq.w	80044e8 <HAL_DMA_IRQHandler+0xb48>
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80c7 	beq.w	80044e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	2204      	movs	r2, #4
 8004364:	409a      	lsls	r2, r3
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d049      	beq.n	8004408 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8210 	beq.w	80047a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004390:	e20a      	b.n	80047a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8206 	beq.w	80047a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a4:	e200      	b.n	80047a8 <HAL_DMA_IRQHandler+0xe08>
 80043a6:	bf00      	nop
 80043a8:	40020010 	.word	0x40020010
 80043ac:	40020028 	.word	0x40020028
 80043b0:	40020040 	.word	0x40020040
 80043b4:	40020058 	.word	0x40020058
 80043b8:	40020070 	.word	0x40020070
 80043bc:	40020088 	.word	0x40020088
 80043c0:	400200a0 	.word	0x400200a0
 80043c4:	400200b8 	.word	0x400200b8
 80043c8:	40020410 	.word	0x40020410
 80043cc:	40020428 	.word	0x40020428
 80043d0:	40020440 	.word	0x40020440
 80043d4:	40020458 	.word	0x40020458
 80043d8:	40020470 	.word	0x40020470
 80043dc:	40020488 	.word	0x40020488
 80043e0:	400204a0 	.word	0x400204a0
 80043e4:	400204b8 	.word	0x400204b8
 80043e8:	58025408 	.word	0x58025408
 80043ec:	5802541c 	.word	0x5802541c
 80043f0:	58025430 	.word	0x58025430
 80043f4:	58025444 	.word	0x58025444
 80043f8:	58025458 	.word	0x58025458
 80043fc:	5802546c 	.word	0x5802546c
 8004400:	58025480 	.word	0x58025480
 8004404:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d160      	bne.n	80044d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a8c      	ldr	r2, [pc, #560]	; (8004648 <HAL_DMA_IRQHandler+0xca8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d04a      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a8a      	ldr	r2, [pc, #552]	; (800464c <HAL_DMA_IRQHandler+0xcac>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d045      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a89      	ldr	r2, [pc, #548]	; (8004650 <HAL_DMA_IRQHandler+0xcb0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d040      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a87      	ldr	r2, [pc, #540]	; (8004654 <HAL_DMA_IRQHandler+0xcb4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d03b      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a86      	ldr	r2, [pc, #536]	; (8004658 <HAL_DMA_IRQHandler+0xcb8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d036      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a84      	ldr	r2, [pc, #528]	; (800465c <HAL_DMA_IRQHandler+0xcbc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d031      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a83      	ldr	r2, [pc, #524]	; (8004660 <HAL_DMA_IRQHandler+0xcc0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d02c      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a81      	ldr	r2, [pc, #516]	; (8004664 <HAL_DMA_IRQHandler+0xcc4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d027      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a80      	ldr	r2, [pc, #512]	; (8004668 <HAL_DMA_IRQHandler+0xcc8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d022      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a7e      	ldr	r2, [pc, #504]	; (800466c <HAL_DMA_IRQHandler+0xccc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01d      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a7d      	ldr	r2, [pc, #500]	; (8004670 <HAL_DMA_IRQHandler+0xcd0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d018      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a7b      	ldr	r2, [pc, #492]	; (8004674 <HAL_DMA_IRQHandler+0xcd4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a7a      	ldr	r2, [pc, #488]	; (8004678 <HAL_DMA_IRQHandler+0xcd8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a78      	ldr	r2, [pc, #480]	; (800467c <HAL_DMA_IRQHandler+0xcdc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a77      	ldr	r2, [pc, #476]	; (8004680 <HAL_DMA_IRQHandler+0xce0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xb12>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a75      	ldr	r2, [pc, #468]	; (8004684 <HAL_DMA_IRQHandler+0xce4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d108      	bne.n	80044c4 <HAL_DMA_IRQHandler+0xb24>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0208 	bic.w	r2, r2, #8
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e007      	b.n	80044d4 <HAL_DMA_IRQHandler+0xb34>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8165 	beq.w	80047a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044e6:	e15f      	b.n	80047a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	2202      	movs	r2, #2
 80044f2:	409a      	lsls	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80c5 	beq.w	8004688 <HAL_DMA_IRQHandler+0xce8>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80bf 	beq.w	8004688 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2202      	movs	r2, #2
 8004514:	409a      	lsls	r2, r3
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d018      	beq.n	8004556 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 813a 	beq.w	80047ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004540:	e134      	b.n	80047ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8130 	beq.w	80047ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004554:	e12a      	b.n	80047ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d168      	bne.n	8004632 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a38      	ldr	r2, [pc, #224]	; (8004648 <HAL_DMA_IRQHandler+0xca8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d04a      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a37      	ldr	r2, [pc, #220]	; (800464c <HAL_DMA_IRQHandler+0xcac>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d045      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a35      	ldr	r2, [pc, #212]	; (8004650 <HAL_DMA_IRQHandler+0xcb0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d040      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a34      	ldr	r2, [pc, #208]	; (8004654 <HAL_DMA_IRQHandler+0xcb4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d03b      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a32      	ldr	r2, [pc, #200]	; (8004658 <HAL_DMA_IRQHandler+0xcb8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d036      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a31      	ldr	r2, [pc, #196]	; (800465c <HAL_DMA_IRQHandler+0xcbc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d031      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a2f      	ldr	r2, [pc, #188]	; (8004660 <HAL_DMA_IRQHandler+0xcc0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d02c      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2e      	ldr	r2, [pc, #184]	; (8004664 <HAL_DMA_IRQHandler+0xcc4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d027      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2c      	ldr	r2, [pc, #176]	; (8004668 <HAL_DMA_IRQHandler+0xcc8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d022      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a2b      	ldr	r2, [pc, #172]	; (800466c <HAL_DMA_IRQHandler+0xccc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d01d      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a29      	ldr	r2, [pc, #164]	; (8004670 <HAL_DMA_IRQHandler+0xcd0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d018      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a28      	ldr	r2, [pc, #160]	; (8004674 <HAL_DMA_IRQHandler+0xcd4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d013      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a26      	ldr	r2, [pc, #152]	; (8004678 <HAL_DMA_IRQHandler+0xcd8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00e      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a25      	ldr	r2, [pc, #148]	; (800467c <HAL_DMA_IRQHandler+0xcdc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d009      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a23      	ldr	r2, [pc, #140]	; (8004680 <HAL_DMA_IRQHandler+0xce0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d004      	beq.n	8004600 <HAL_DMA_IRQHandler+0xc60>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a22      	ldr	r2, [pc, #136]	; (8004684 <HAL_DMA_IRQHandler+0xce4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d108      	bne.n	8004612 <HAL_DMA_IRQHandler+0xc72>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0214 	bic.w	r2, r2, #20
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	e007      	b.n	8004622 <HAL_DMA_IRQHandler+0xc82>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 020a 	bic.w	r2, r2, #10
 8004620:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80b8 	beq.w	80047ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004644:	e0b2      	b.n	80047ac <HAL_DMA_IRQHandler+0xe0c>
 8004646:	bf00      	nop
 8004648:	40020010 	.word	0x40020010
 800464c:	40020028 	.word	0x40020028
 8004650:	40020040 	.word	0x40020040
 8004654:	40020058 	.word	0x40020058
 8004658:	40020070 	.word	0x40020070
 800465c:	40020088 	.word	0x40020088
 8004660:	400200a0 	.word	0x400200a0
 8004664:	400200b8 	.word	0x400200b8
 8004668:	40020410 	.word	0x40020410
 800466c:	40020428 	.word	0x40020428
 8004670:	40020440 	.word	0x40020440
 8004674:	40020458 	.word	0x40020458
 8004678:	40020470 	.word	0x40020470
 800467c:	40020488 	.word	0x40020488
 8004680:	400204a0 	.word	0x400204a0
 8004684:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	2208      	movs	r2, #8
 8004692:	409a      	lsls	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	4013      	ands	r3, r2
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8088 	beq.w	80047ae <HAL_DMA_IRQHandler+0xe0e>
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8082 	beq.w	80047ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a41      	ldr	r2, [pc, #260]	; (80047b4 <HAL_DMA_IRQHandler+0xe14>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d04a      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a3f      	ldr	r2, [pc, #252]	; (80047b8 <HAL_DMA_IRQHandler+0xe18>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d045      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3e      	ldr	r2, [pc, #248]	; (80047bc <HAL_DMA_IRQHandler+0xe1c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d040      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <HAL_DMA_IRQHandler+0xe20>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d03b      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a3b      	ldr	r2, [pc, #236]	; (80047c4 <HAL_DMA_IRQHandler+0xe24>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d036      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a39      	ldr	r2, [pc, #228]	; (80047c8 <HAL_DMA_IRQHandler+0xe28>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d031      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a38      	ldr	r2, [pc, #224]	; (80047cc <HAL_DMA_IRQHandler+0xe2c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d02c      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a36      	ldr	r2, [pc, #216]	; (80047d0 <HAL_DMA_IRQHandler+0xe30>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d027      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a35      	ldr	r2, [pc, #212]	; (80047d4 <HAL_DMA_IRQHandler+0xe34>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d022      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a33      	ldr	r2, [pc, #204]	; (80047d8 <HAL_DMA_IRQHandler+0xe38>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01d      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a32      	ldr	r2, [pc, #200]	; (80047dc <HAL_DMA_IRQHandler+0xe3c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d018      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a30      	ldr	r2, [pc, #192]	; (80047e0 <HAL_DMA_IRQHandler+0xe40>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2f      	ldr	r2, [pc, #188]	; (80047e4 <HAL_DMA_IRQHandler+0xe44>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a2d      	ldr	r2, [pc, #180]	; (80047e8 <HAL_DMA_IRQHandler+0xe48>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2c      	ldr	r2, [pc, #176]	; (80047ec <HAL_DMA_IRQHandler+0xe4c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_DMA_IRQHandler+0xdaa>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <HAL_DMA_IRQHandler+0xe50>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d108      	bne.n	800475c <HAL_DMA_IRQHandler+0xdbc>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 021c 	bic.w	r2, r2, #28
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	e007      	b.n	800476c <HAL_DMA_IRQHandler+0xdcc>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 020e 	bic.w	r2, r2, #14
 800476a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2201      	movs	r2, #1
 8004776:	409a      	lsls	r2, r3
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
 80047a2:	e004      	b.n	80047ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80047a4:	bf00      	nop
 80047a6:	e002      	b.n	80047ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a8:	bf00      	nop
 80047aa:	e000      	b.n	80047ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047ae:	3728      	adds	r7, #40	; 0x28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40020010 	.word	0x40020010
 80047b8:	40020028 	.word	0x40020028
 80047bc:	40020040 	.word	0x40020040
 80047c0:	40020058 	.word	0x40020058
 80047c4:	40020070 	.word	0x40020070
 80047c8:	40020088 	.word	0x40020088
 80047cc:	400200a0 	.word	0x400200a0
 80047d0:	400200b8 	.word	0x400200b8
 80047d4:	40020410 	.word	0x40020410
 80047d8:	40020428 	.word	0x40020428
 80047dc:	40020440 	.word	0x40020440
 80047e0:	40020458 	.word	0x40020458
 80047e4:	40020470 	.word	0x40020470
 80047e8:	40020488 	.word	0x40020488
 80047ec:	400204a0 	.word	0x400204a0
 80047f0:	400204b8 	.word	0x400204b8

080047f4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a84      	ldr	r2, [pc, #528]	; (8004a3c <DMA_SetConfig+0x230>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d072      	beq.n	8004916 <DMA_SetConfig+0x10a>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a82      	ldr	r2, [pc, #520]	; (8004a40 <DMA_SetConfig+0x234>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d06d      	beq.n	8004916 <DMA_SetConfig+0x10a>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a81      	ldr	r2, [pc, #516]	; (8004a44 <DMA_SetConfig+0x238>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d068      	beq.n	8004916 <DMA_SetConfig+0x10a>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a7f      	ldr	r2, [pc, #508]	; (8004a48 <DMA_SetConfig+0x23c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d063      	beq.n	8004916 <DMA_SetConfig+0x10a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a7e      	ldr	r2, [pc, #504]	; (8004a4c <DMA_SetConfig+0x240>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d05e      	beq.n	8004916 <DMA_SetConfig+0x10a>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a7c      	ldr	r2, [pc, #496]	; (8004a50 <DMA_SetConfig+0x244>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d059      	beq.n	8004916 <DMA_SetConfig+0x10a>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7b      	ldr	r2, [pc, #492]	; (8004a54 <DMA_SetConfig+0x248>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d054      	beq.n	8004916 <DMA_SetConfig+0x10a>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a79      	ldr	r2, [pc, #484]	; (8004a58 <DMA_SetConfig+0x24c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d04f      	beq.n	8004916 <DMA_SetConfig+0x10a>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a78      	ldr	r2, [pc, #480]	; (8004a5c <DMA_SetConfig+0x250>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d04a      	beq.n	8004916 <DMA_SetConfig+0x10a>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a76      	ldr	r2, [pc, #472]	; (8004a60 <DMA_SetConfig+0x254>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d045      	beq.n	8004916 <DMA_SetConfig+0x10a>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a75      	ldr	r2, [pc, #468]	; (8004a64 <DMA_SetConfig+0x258>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d040      	beq.n	8004916 <DMA_SetConfig+0x10a>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a73      	ldr	r2, [pc, #460]	; (8004a68 <DMA_SetConfig+0x25c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d03b      	beq.n	8004916 <DMA_SetConfig+0x10a>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a72      	ldr	r2, [pc, #456]	; (8004a6c <DMA_SetConfig+0x260>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d036      	beq.n	8004916 <DMA_SetConfig+0x10a>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a70      	ldr	r2, [pc, #448]	; (8004a70 <DMA_SetConfig+0x264>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d031      	beq.n	8004916 <DMA_SetConfig+0x10a>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a6f      	ldr	r2, [pc, #444]	; (8004a74 <DMA_SetConfig+0x268>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d02c      	beq.n	8004916 <DMA_SetConfig+0x10a>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a6d      	ldr	r2, [pc, #436]	; (8004a78 <DMA_SetConfig+0x26c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d027      	beq.n	8004916 <DMA_SetConfig+0x10a>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a6c      	ldr	r2, [pc, #432]	; (8004a7c <DMA_SetConfig+0x270>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d022      	beq.n	8004916 <DMA_SetConfig+0x10a>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a6a      	ldr	r2, [pc, #424]	; (8004a80 <DMA_SetConfig+0x274>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01d      	beq.n	8004916 <DMA_SetConfig+0x10a>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a69      	ldr	r2, [pc, #420]	; (8004a84 <DMA_SetConfig+0x278>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d018      	beq.n	8004916 <DMA_SetConfig+0x10a>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a67      	ldr	r2, [pc, #412]	; (8004a88 <DMA_SetConfig+0x27c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <DMA_SetConfig+0x10a>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a66      	ldr	r2, [pc, #408]	; (8004a8c <DMA_SetConfig+0x280>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <DMA_SetConfig+0x10a>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a64      	ldr	r2, [pc, #400]	; (8004a90 <DMA_SetConfig+0x284>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <DMA_SetConfig+0x10a>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a63      	ldr	r2, [pc, #396]	; (8004a94 <DMA_SetConfig+0x288>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <DMA_SetConfig+0x10a>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a61      	ldr	r2, [pc, #388]	; (8004a98 <DMA_SetConfig+0x28c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <DMA_SetConfig+0x10e>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <DMA_SetConfig+0x110>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004928:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d004      	beq.n	800493c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800493a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3e      	ldr	r2, [pc, #248]	; (8004a3c <DMA_SetConfig+0x230>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d04a      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3d      	ldr	r2, [pc, #244]	; (8004a40 <DMA_SetConfig+0x234>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d045      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3b      	ldr	r2, [pc, #236]	; (8004a44 <DMA_SetConfig+0x238>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d040      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a3a      	ldr	r2, [pc, #232]	; (8004a48 <DMA_SetConfig+0x23c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d03b      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a38      	ldr	r2, [pc, #224]	; (8004a4c <DMA_SetConfig+0x240>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d036      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a37      	ldr	r2, [pc, #220]	; (8004a50 <DMA_SetConfig+0x244>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d031      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a35      	ldr	r2, [pc, #212]	; (8004a54 <DMA_SetConfig+0x248>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d02c      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a34      	ldr	r2, [pc, #208]	; (8004a58 <DMA_SetConfig+0x24c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d027      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a32      	ldr	r2, [pc, #200]	; (8004a5c <DMA_SetConfig+0x250>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d022      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a31      	ldr	r2, [pc, #196]	; (8004a60 <DMA_SetConfig+0x254>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d01d      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2f      	ldr	r2, [pc, #188]	; (8004a64 <DMA_SetConfig+0x258>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d018      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2e      	ldr	r2, [pc, #184]	; (8004a68 <DMA_SetConfig+0x25c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d013      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <DMA_SetConfig+0x260>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00e      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <DMA_SetConfig+0x264>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d009      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <DMA_SetConfig+0x268>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d004      	beq.n	80049dc <DMA_SetConfig+0x1d0>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a28      	ldr	r2, [pc, #160]	; (8004a78 <DMA_SetConfig+0x26c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d101      	bne.n	80049e0 <DMA_SetConfig+0x1d4>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <DMA_SetConfig+0x1d6>
 80049e0:	2300      	movs	r3, #0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d05a      	beq.n	8004a9c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	223f      	movs	r2, #63	; 0x3f
 80049f0:	409a      	lsls	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a04:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d108      	bne.n	8004a28 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a26:	e087      	b.n	8004b38 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	60da      	str	r2, [r3, #12]
}
 8004a38:	e07e      	b.n	8004b38 <DMA_SetConfig+0x32c>
 8004a3a:	bf00      	nop
 8004a3c:	40020010 	.word	0x40020010
 8004a40:	40020028 	.word	0x40020028
 8004a44:	40020040 	.word	0x40020040
 8004a48:	40020058 	.word	0x40020058
 8004a4c:	40020070 	.word	0x40020070
 8004a50:	40020088 	.word	0x40020088
 8004a54:	400200a0 	.word	0x400200a0
 8004a58:	400200b8 	.word	0x400200b8
 8004a5c:	40020410 	.word	0x40020410
 8004a60:	40020428 	.word	0x40020428
 8004a64:	40020440 	.word	0x40020440
 8004a68:	40020458 	.word	0x40020458
 8004a6c:	40020470 	.word	0x40020470
 8004a70:	40020488 	.word	0x40020488
 8004a74:	400204a0 	.word	0x400204a0
 8004a78:	400204b8 	.word	0x400204b8
 8004a7c:	58025408 	.word	0x58025408
 8004a80:	5802541c 	.word	0x5802541c
 8004a84:	58025430 	.word	0x58025430
 8004a88:	58025444 	.word	0x58025444
 8004a8c:	58025458 	.word	0x58025458
 8004a90:	5802546c 	.word	0x5802546c
 8004a94:	58025480 	.word	0x58025480
 8004a98:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a28      	ldr	r2, [pc, #160]	; (8004b44 <DMA_SetConfig+0x338>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d022      	beq.n	8004aec <DMA_SetConfig+0x2e0>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a27      	ldr	r2, [pc, #156]	; (8004b48 <DMA_SetConfig+0x33c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d01d      	beq.n	8004aec <DMA_SetConfig+0x2e0>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <DMA_SetConfig+0x340>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <DMA_SetConfig+0x2e0>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <DMA_SetConfig+0x344>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <DMA_SetConfig+0x2e0>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a22      	ldr	r2, [pc, #136]	; (8004b54 <DMA_SetConfig+0x348>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <DMA_SetConfig+0x2e0>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <DMA_SetConfig+0x34c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <DMA_SetConfig+0x2e0>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <DMA_SetConfig+0x350>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <DMA_SetConfig+0x2e0>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <DMA_SetConfig+0x354>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <DMA_SetConfig+0x2e4>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <DMA_SetConfig+0x2e6>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d020      	beq.n	8004b38 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2201      	movs	r2, #1
 8004b00:	409a      	lsls	r2, r3
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d108      	bne.n	8004b28 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	60da      	str	r2, [r3, #12]
}
 8004b26:	e007      	b.n	8004b38 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	60da      	str	r2, [r3, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	58025408 	.word	0x58025408
 8004b48:	5802541c 	.word	0x5802541c
 8004b4c:	58025430 	.word	0x58025430
 8004b50:	58025444 	.word	0x58025444
 8004b54:	58025458 	.word	0x58025458
 8004b58:	5802546c 	.word	0x5802546c
 8004b5c:	58025480 	.word	0x58025480
 8004b60:	58025494 	.word	0x58025494

08004b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a42      	ldr	r2, [pc, #264]	; (8004c7c <DMA_CalcBaseAndBitshift+0x118>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d04a      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a41      	ldr	r2, [pc, #260]	; (8004c80 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d045      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a3f      	ldr	r2, [pc, #252]	; (8004c84 <DMA_CalcBaseAndBitshift+0x120>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d040      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3e      	ldr	r2, [pc, #248]	; (8004c88 <DMA_CalcBaseAndBitshift+0x124>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d03b      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3c      	ldr	r2, [pc, #240]	; (8004c8c <DMA_CalcBaseAndBitshift+0x128>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d036      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a3b      	ldr	r2, [pc, #236]	; (8004c90 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d031      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a39      	ldr	r2, [pc, #228]	; (8004c94 <DMA_CalcBaseAndBitshift+0x130>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d02c      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a38      	ldr	r2, [pc, #224]	; (8004c98 <DMA_CalcBaseAndBitshift+0x134>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d027      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a36      	ldr	r2, [pc, #216]	; (8004c9c <DMA_CalcBaseAndBitshift+0x138>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d022      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a35      	ldr	r2, [pc, #212]	; (8004ca0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d01d      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a33      	ldr	r2, [pc, #204]	; (8004ca4 <DMA_CalcBaseAndBitshift+0x140>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d018      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a32      	ldr	r2, [pc, #200]	; (8004ca8 <DMA_CalcBaseAndBitshift+0x144>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a30      	ldr	r2, [pc, #192]	; (8004cac <DMA_CalcBaseAndBitshift+0x148>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00e      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2f      	ldr	r2, [pc, #188]	; (8004cb0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2d      	ldr	r2, [pc, #180]	; (8004cb4 <DMA_CalcBaseAndBitshift+0x150>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2c      	ldr	r2, [pc, #176]	; (8004cb8 <DMA_CalcBaseAndBitshift+0x154>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d101      	bne.n	8004c10 <DMA_CalcBaseAndBitshift+0xac>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <DMA_CalcBaseAndBitshift+0xae>
 8004c10:	2300      	movs	r3, #0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d024      	beq.n	8004c60 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	3b10      	subs	r3, #16
 8004c1e:	4a27      	ldr	r2, [pc, #156]	; (8004cbc <DMA_CalcBaseAndBitshift+0x158>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	4a24      	ldr	r2, [pc, #144]	; (8004cc0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004c30:	5cd3      	ldrb	r3, [r2, r3]
 8004c32:	461a      	mov	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d908      	bls.n	8004c50 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	4b1f      	ldr	r3, [pc, #124]	; (8004cc4 <DMA_CalcBaseAndBitshift+0x160>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	1d1a      	adds	r2, r3, #4
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	659a      	str	r2, [r3, #88]	; 0x58
 8004c4e:	e00d      	b.n	8004c6c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b1b      	ldr	r3, [pc, #108]	; (8004cc4 <DMA_CalcBaseAndBitshift+0x160>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c5e:	e005      	b.n	8004c6c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	40020010 	.word	0x40020010
 8004c80:	40020028 	.word	0x40020028
 8004c84:	40020040 	.word	0x40020040
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	40020070 	.word	0x40020070
 8004c90:	40020088 	.word	0x40020088
 8004c94:	400200a0 	.word	0x400200a0
 8004c98:	400200b8 	.word	0x400200b8
 8004c9c:	40020410 	.word	0x40020410
 8004ca0:	40020428 	.word	0x40020428
 8004ca4:	40020440 	.word	0x40020440
 8004ca8:	40020458 	.word	0x40020458
 8004cac:	40020470 	.word	0x40020470
 8004cb0:	40020488 	.word	0x40020488
 8004cb4:	400204a0 	.word	0x400204a0
 8004cb8:	400204b8 	.word	0x400204b8
 8004cbc:	aaaaaaab 	.word	0xaaaaaaab
 8004cc0:	0800d230 	.word	0x0800d230
 8004cc4:	fffffc00 	.word	0xfffffc00

08004cc8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d120      	bne.n	8004d1e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d858      	bhi.n	8004d96 <DMA_CheckFifoParam+0xce>
 8004ce4:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <DMA_CheckFifoParam+0x24>)
 8004ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cea:	bf00      	nop
 8004cec:	08004cfd 	.word	0x08004cfd
 8004cf0:	08004d0f 	.word	0x08004d0f
 8004cf4:	08004cfd 	.word	0x08004cfd
 8004cf8:	08004d97 	.word	0x08004d97
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d048      	beq.n	8004d9a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d0c:	e045      	b.n	8004d9a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d16:	d142      	bne.n	8004d9e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d1c:	e03f      	b.n	8004d9e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d26:	d123      	bne.n	8004d70 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d838      	bhi.n	8004da2 <DMA_CheckFifoParam+0xda>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <DMA_CheckFifoParam+0x70>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d4f 	.word	0x08004d4f
 8004d40:	08004d49 	.word	0x08004d49
 8004d44:	08004d61 	.word	0x08004d61
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
        break;
 8004d4c:	e030      	b.n	8004db0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d025      	beq.n	8004da6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d5e:	e022      	b.n	8004da6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d68:	d11f      	bne.n	8004daa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d6e:	e01c      	b.n	8004daa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d902      	bls.n	8004d7e <DMA_CheckFifoParam+0xb6>
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d003      	beq.n	8004d84 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d7c:	e018      	b.n	8004db0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
        break;
 8004d82:	e015      	b.n	8004db0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00e      	beq.n	8004dae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
    break;
 8004d94:	e00b      	b.n	8004dae <DMA_CheckFifoParam+0xe6>
        break;
 8004d96:	bf00      	nop
 8004d98:	e00a      	b.n	8004db0 <DMA_CheckFifoParam+0xe8>
        break;
 8004d9a:	bf00      	nop
 8004d9c:	e008      	b.n	8004db0 <DMA_CheckFifoParam+0xe8>
        break;
 8004d9e:	bf00      	nop
 8004da0:	e006      	b.n	8004db0 <DMA_CheckFifoParam+0xe8>
        break;
 8004da2:	bf00      	nop
 8004da4:	e004      	b.n	8004db0 <DMA_CheckFifoParam+0xe8>
        break;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <DMA_CheckFifoParam+0xe8>
        break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <DMA_CheckFifoParam+0xe8>
    break;
 8004dae:	bf00      	nop
    }
  }

  return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop

08004dc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a38      	ldr	r2, [pc, #224]	; (8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d022      	beq.n	8004e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a36      	ldr	r2, [pc, #216]	; (8004eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01d      	beq.n	8004e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a35      	ldr	r2, [pc, #212]	; (8004ebc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d018      	beq.n	8004e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a33      	ldr	r2, [pc, #204]	; (8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a32      	ldr	r2, [pc, #200]	; (8004ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a30      	ldr	r2, [pc, #192]	; (8004ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2f      	ldr	r2, [pc, #188]	; (8004ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2d      	ldr	r2, [pc, #180]	; (8004ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d101      	bne.n	8004e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01a      	beq.n	8004e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	3b08      	subs	r3, #8
 8004e30:	4a28      	ldr	r2, [pc, #160]	; (8004ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	461a      	mov	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a24      	ldr	r2, [pc, #144]	; (8004edc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e4c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	2201      	movs	r2, #1
 8004e56:	409a      	lsls	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e5c:	e024      	b.n	8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	3b10      	subs	r3, #16
 8004e66:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d806      	bhi.n	8004e86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d902      	bls.n	8004e86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3308      	adds	r3, #8
 8004e84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4b18      	ldr	r3, [pc, #96]	; (8004eec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	461a      	mov	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	58025408 	.word	0x58025408
 8004eb8:	5802541c 	.word	0x5802541c
 8004ebc:	58025430 	.word	0x58025430
 8004ec0:	58025444 	.word	0x58025444
 8004ec4:	58025458 	.word	0x58025458
 8004ec8:	5802546c 	.word	0x5802546c
 8004ecc:	58025480 	.word	0x58025480
 8004ed0:	58025494 	.word	0x58025494
 8004ed4:	cccccccd 	.word	0xcccccccd
 8004ed8:	16009600 	.word	0x16009600
 8004edc:	58025880 	.word	0x58025880
 8004ee0:	aaaaaaab 	.word	0xaaaaaaab
 8004ee4:	400204b8 	.word	0x400204b8
 8004ee8:	4002040f 	.word	0x4002040f
 8004eec:	10008200 	.word	0x10008200
 8004ef0:	40020880 	.word	0x40020880

08004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d04a      	beq.n	8004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d847      	bhi.n	8004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a25      	ldr	r2, [pc, #148]	; (8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d022      	beq.n	8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a24      	ldr	r2, [pc, #144]	; (8004fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d01d      	beq.n	8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a22      	ldr	r2, [pc, #136]	; (8004fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a21      	ldr	r2, [pc, #132]	; (8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1f      	ldr	r2, [pc, #124]	; (8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1e      	ldr	r2, [pc, #120]	; (8004fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d101      	bne.n	8004f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	461a      	mov	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f7c:	671a      	str	r2, [r3, #112]	; 0x70
 8004f7e:	e009      	b.n	8004f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4b14      	ldr	r3, [pc, #80]	; (8004fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a11      	ldr	r2, [pc, #68]	; (8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f92:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	2201      	movs	r2, #1
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	58025408 	.word	0x58025408
 8004fb0:	5802541c 	.word	0x5802541c
 8004fb4:	58025430 	.word	0x58025430
 8004fb8:	58025444 	.word	0x58025444
 8004fbc:	58025458 	.word	0x58025458
 8004fc0:	5802546c 	.word	0x5802546c
 8004fc4:	58025480 	.word	0x58025480
 8004fc8:	58025494 	.word	0x58025494
 8004fcc:	1600963f 	.word	0x1600963f
 8004fd0:	58025940 	.word	0x58025940
 8004fd4:	1000823f 	.word	0x1000823f
 8004fd8:	40020940 	.word	0x40020940

08004fdc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e0c6      	b.n	800517c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc fb66 	bl	80016c8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2223      	movs	r2, #35	; 0x23
 8005000:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005002:	4b60      	ldr	r3, [pc, #384]	; (8005184 <HAL_ETH_Init+0x1a8>)
 8005004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005008:	4a5e      	ldr	r2, [pc, #376]	; (8005184 <HAL_ETH_Init+0x1a8>)
 800500a:	f043 0302 	orr.w	r3, r3, #2
 800500e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005012:	4b5c      	ldr	r3, [pc, #368]	; (8005184 <HAL_ETH_Init+0x1a8>)
 8005014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	7a1b      	ldrb	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005028:	2000      	movs	r0, #0
 800502a:	f7fd f859 	bl	80020e0 <HAL_SYSCFG_ETHInterfaceSelect>
 800502e:	e003      	b.n	8005038 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005030:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005034:	f7fd f854 	bl	80020e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005050:	f7fd f80a 	bl	8002068 <HAL_GetTick>
 8005054:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005056:	e00f      	b.n	8005078 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005058:	f7fd f806 	bl	8002068 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005066:	d907      	bls.n	8005078 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2204      	movs	r2, #4
 800506c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	22e0      	movs	r2, #224	; 0xe0
 8005072:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e081      	b.n	800517c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e6      	bne.n	8005058 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fac0 	bl	8005610 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005090:	f001 febc 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8005094:	4603      	mov	r3, r0
 8005096:	4a3c      	ldr	r2, [pc, #240]	; (8005188 <HAL_ETH_Init+0x1ac>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	0c9a      	lsrs	r2, r3, #18
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3a01      	subs	r2, #1
 80050a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fa13 	bl	80054d4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80050c4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050c8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	22e0      	movs	r2, #224	; 0xe0
 80050e0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e04a      	b.n	800517c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80050ee:	4413      	add	r3, r2
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b26      	ldr	r3, [pc, #152]	; (800518c <HAL_ETH_Init+0x1b0>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6952      	ldr	r2, [r2, #20]
 80050fa:	0052      	lsls	r2, r2, #1
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	6809      	ldr	r1, [r1, #0]
 8005100:	431a      	orrs	r2, r3
 8005102:	f241 1308 	movw	r3, #4360	; 0x1108
 8005106:	440b      	add	r3, r1
 8005108:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fad8 	bl	80056c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fb1c 	bl	800574e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	3305      	adds	r3, #5
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	021a      	lsls	r2, r3, #8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	4619      	mov	r1, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	3303      	adds	r3, #3
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	061a      	lsls	r2, r3, #24
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	3302      	adds	r3, #2
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	041b      	lsls	r3, r3, #16
 8005148:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	3301      	adds	r3, #1
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005154:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005162:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005164:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2210      	movs	r2, #16
 8005172:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2210      	movs	r2, #16
 8005178:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	58024400 	.word	0x58024400
 8005188:	431bde83 	.word	0x431bde83
 800518c:	ffff8001 	.word	0xffff8001

08005190 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80051a2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	791b      	ldrb	r3, [r3, #4]
 80051a8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80051aa:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	7b1b      	ldrb	r3, [r3, #12]
 80051b0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80051b2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	7b5b      	ldrb	r3, [r3, #13]
 80051b8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051ba:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	7b9b      	ldrb	r3, [r3, #14]
 80051c0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80051c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	7bdb      	ldrb	r3, [r3, #15]
 80051c8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051ca:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	7c12      	ldrb	r2, [r2, #16]
 80051d0:	2a00      	cmp	r2, #0
 80051d2:	d102      	bne.n	80051da <ETH_SetMACConfig+0x4a>
 80051d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80051d8:	e000      	b.n	80051dc <ETH_SetMACConfig+0x4c>
 80051da:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051dc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	7c52      	ldrb	r2, [r2, #17]
 80051e2:	2a00      	cmp	r2, #0
 80051e4:	d102      	bne.n	80051ec <ETH_SetMACConfig+0x5c>
 80051e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051ea:	e000      	b.n	80051ee <ETH_SetMACConfig+0x5e>
 80051ec:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051ee:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	7c9b      	ldrb	r3, [r3, #18]
 80051f4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051f6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80051fc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005202:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	7f1b      	ldrb	r3, [r3, #28]
 8005208:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800520a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	7f5b      	ldrb	r3, [r3, #29]
 8005210:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005212:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	7f92      	ldrb	r2, [r2, #30]
 8005218:	2a00      	cmp	r2, #0
 800521a:	d102      	bne.n	8005222 <ETH_SetMACConfig+0x92>
 800521c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005220:	e000      	b.n	8005224 <ETH_SetMACConfig+0x94>
 8005222:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005224:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	7fdb      	ldrb	r3, [r3, #31]
 800522a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800522c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005234:	2a00      	cmp	r2, #0
 8005236:	d102      	bne.n	800523e <ETH_SetMACConfig+0xae>
 8005238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800523c:	e000      	b.n	8005240 <ETH_SetMACConfig+0xb0>
 800523e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005240:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005246:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800524e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005250:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4b56      	ldr	r3, [pc, #344]	; (80053bc <ETH_SetMACConfig+0x22c>)
 8005262:	4013      	ands	r3, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	68f9      	ldr	r1, [r7, #12]
 800526a:	430b      	orrs	r3, r1
 800526c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800527a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800527c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005284:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005286:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800528e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005290:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005298:	2a00      	cmp	r2, #0
 800529a:	d102      	bne.n	80052a2 <ETH_SetMACConfig+0x112>
 800529c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052a0:	e000      	b.n	80052a4 <ETH_SetMACConfig+0x114>
 80052a2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80052a4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	4b42      	ldr	r3, [pc, #264]	; (80053c0 <ETH_SetMACConfig+0x230>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	68f9      	ldr	r1, [r7, #12]
 80052be:	430b      	orrs	r3, r1
 80052c0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052c8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	4b3a      	ldr	r3, [pc, #232]	; (80053c4 <ETH_SetMACConfig+0x234>)
 80052da:	4013      	ands	r3, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	68f9      	ldr	r1, [r7, #12]
 80052e2:	430b      	orrs	r3, r1
 80052e4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80052ec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052f2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80052fa:	2a00      	cmp	r2, #0
 80052fc:	d101      	bne.n	8005302 <ETH_SetMACConfig+0x172>
 80052fe:	2280      	movs	r2, #128	; 0x80
 8005300:	e000      	b.n	8005304 <ETH_SetMACConfig+0x174>
 8005302:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005304:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800530a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005316:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800531a:	4013      	ands	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	430b      	orrs	r3, r1
 8005324:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800532c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005334:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	f023 0103 	bic.w	r1, r3, #3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	430a      	orrs	r2, r1
 800534e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800535a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005376:	2a00      	cmp	r2, #0
 8005378:	d101      	bne.n	800537e <ETH_SetMACConfig+0x1ee>
 800537a:	2240      	movs	r2, #64	; 0x40
 800537c:	e000      	b.n	8005380 <ETH_SetMACConfig+0x1f0>
 800537e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005380:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005388:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800538a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005392:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80053a0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	00048083 	.word	0x00048083
 80053c0:	c0f88000 	.word	0xc0f88000
 80053c4:	fffffef0 	.word	0xfffffef0

080053c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <ETH_SetDMAConfig+0xf8>)
 80053de:	4013      	ands	r3, r2
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	6809      	ldr	r1, [r1, #0]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80053ee:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	791b      	ldrb	r3, [r3, #4]
 80053f4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053fa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	7b1b      	ldrb	r3, [r3, #12]
 8005400:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	f241 0304 	movw	r3, #4100	; 0x1004
 800540e:	4413      	add	r3, r2
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b2c      	ldr	r3, [pc, #176]	; (80054c4 <ETH_SetDMAConfig+0xfc>)
 8005414:	4013      	ands	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6811      	ldr	r1, [r2, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	431a      	orrs	r2, r3
 800541e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005422:	440b      	add	r3, r1
 8005424:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	7b5b      	ldrb	r3, [r3, #13]
 800542a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <ETH_SetDMAConfig+0x100>)
 8005440:	4013      	ands	r3, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6811      	ldr	r1, [r2, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	431a      	orrs	r2, r3
 800544a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800544e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	7d1b      	ldrb	r3, [r3, #20]
 8005458:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800545a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	7f5b      	ldrb	r3, [r3, #29]
 8005460:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f241 1304 	movw	r3, #4356	; 0x1104
 800546e:	4413      	add	r3, r2
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4b16      	ldr	r3, [pc, #88]	; (80054cc <ETH_SetDMAConfig+0x104>)
 8005474:	4013      	ands	r3, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6811      	ldr	r1, [r2, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	431a      	orrs	r2, r3
 800547e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005482:	440b      	add	r3, r1
 8005484:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	7f1b      	ldrb	r3, [r3, #28]
 800548a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	f241 1308 	movw	r3, #4360	; 0x1108
 800549c:	4413      	add	r3, r2
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <ETH_SetDMAConfig+0x108>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6811      	ldr	r1, [r2, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	f241 1308 	movw	r3, #4360	; 0x1108
 80054b0:	440b      	add	r3, r1
 80054b2:	601a      	str	r2, [r3, #0]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	ffff87fd 	.word	0xffff87fd
 80054c4:	ffff2ffe 	.word	0xffff2ffe
 80054c8:	fffec000 	.word	0xfffec000
 80054cc:	ffc0efef 	.word	0xffc0efef
 80054d0:	7fc0ffff 	.word	0x7fc0ffff

080054d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b0a4      	sub	sp, #144	; 0x90
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054e2:	2300      	movs	r3, #0
 80054e4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005504:	2300      	movs	r3, #0
 8005506:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005514:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005516:	2300      	movs	r3, #0
 8005518:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800551c:	2300      	movs	r3, #0
 800551e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005520:	2300      	movs	r3, #0
 8005522:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005526:	2300      	movs	r3, #0
 8005528:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800552c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005530:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005532:	2300      	movs	r3, #0
 8005534:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005538:	2300      	movs	r3, #0
 800553a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005542:	2300      	movs	r3, #0
 8005544:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005548:	2300      	movs	r3, #0
 800554a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800554e:	2300      	movs	r3, #0
 8005550:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005552:	2300      	movs	r3, #0
 8005554:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005556:	2300      	movs	r3, #0
 8005558:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800556c:	2320      	movs	r3, #32
 800556e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005572:	2301      	movs	r3, #1
 8005574:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800557e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005584:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005588:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800558a:	2300      	movs	r3, #0
 800558c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005590:	2302      	movs	r3, #2
 8005592:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005596:	2300      	movs	r3, #0
 8005598:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800559c:	2300      	movs	r3, #0
 800559e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80055ae:	2300      	movs	r3, #0
 80055b0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80055b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff fde6 	bl	8005190 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80055c4:	2301      	movs	r3, #1
 80055c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80055c8:	2301      	movs	r3, #1
 80055ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80055da:	2300      	movs	r3, #0
 80055dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80055e4:	2300      	movs	r3, #0
 80055e6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80055e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80055f4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80055fa:	f107 0308 	add.w	r3, r7, #8
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fee1 	bl	80053c8 <ETH_SetDMAConfig>
}
 8005606:	bf00      	nop
 8005608:	3790      	adds	r7, #144	; 0x90
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005620:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005628:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800562a:	f001 fbef 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 800562e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d908      	bls.n	800564a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d804      	bhi.n	800564a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e027      	b.n	800569a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4a18      	ldr	r2, [pc, #96]	; (80056b0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d908      	bls.n	8005664 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d204      	bcs.n	8005664 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e01a      	b.n	800569a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4a13      	ldr	r2, [pc, #76]	; (80056b4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d303      	bcc.n	8005674 <ETH_MAC_MDIO_ClkConfig+0x64>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d911      	bls.n	8005698 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4a10      	ldr	r2, [pc, #64]	; (80056b8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d908      	bls.n	800568e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4a0f      	ldr	r2, [pc, #60]	; (80056bc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d804      	bhi.n	800568e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e005      	b.n	800569a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	e000      	b.n	800569a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005698:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80056a4:	bf00      	nop
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	01312cff 	.word	0x01312cff
 80056b0:	02160ebf 	.word	0x02160ebf
 80056b4:	03938700 	.word	0x03938700
 80056b8:	05f5e0ff 	.word	0x05f5e0ff
 80056bc:	08f0d17f 	.word	0x08f0d17f

080056c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e01d      	b.n	800570a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68d9      	ldr	r1, [r3, #12]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4613      	mov	r3, r2
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4413      	add	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	440b      	add	r3, r1
 80056de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2200      	movs	r2, #0
 80056ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2200      	movs	r2, #0
 80056f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	3206      	adds	r2, #6
 8005700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b03      	cmp	r3, #3
 800570e:	d9de      	bls.n	80056ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	f241 132c 	movw	r3, #4396	; 0x112c
 800571e:	4413      	add	r3, r2
 8005720:	2203      	movs	r2, #3
 8005722:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68d9      	ldr	r1, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	f241 1314 	movw	r3, #4372	; 0x1114
 8005730:	4413      	add	r3, r2
 8005732:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005740:	601a      	str	r2, [r3, #0]
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800574e:	b480      	push	{r7}
 8005750:	b085      	sub	sp, #20
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e024      	b.n	80057a6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6919      	ldr	r1, [r3, #16]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4613      	mov	r3, r2
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	4413      	add	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	440b      	add	r3, r1
 800576c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2200      	movs	r2, #0
 8005784:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2200      	movs	r2, #0
 800578a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2200      	movs	r2, #0
 8005790:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3310      	adds	r3, #16
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3301      	adds	r3, #1
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d9d7      	bls.n	800575c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	f241 1330 	movw	r3, #4400	; 0x1130
 80057d2:	4413      	add	r3, r2
 80057d4:	2203      	movs	r2, #3
 80057d6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6919      	ldr	r1, [r3, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	f241 131c 	movw	r3, #4380	; 0x111c
 80057e4:	4413      	add	r3, r2
 80057e6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	f241 1328 	movw	r3, #4392	; 0x1128
 80057f8:	4413      	add	r3, r2
 80057fa:	6019      	str	r1, [r3, #0]
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005808:	b480      	push	{r7}
 800580a:	b089      	sub	sp, #36	; 0x24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005816:	4b89      	ldr	r3, [pc, #548]	; (8005a3c <HAL_GPIO_Init+0x234>)
 8005818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800581a:	e194      	b.n	8005b46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	2101      	movs	r1, #1
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	fa01 f303 	lsl.w	r3, r1, r3
 8005828:	4013      	ands	r3, r2
 800582a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8186 	beq.w	8005b40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d00b      	beq.n	8005854 <HAL_GPIO_Init+0x4c>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d007      	beq.n	8005854 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005848:	2b11      	cmp	r3, #17
 800584a:	d003      	beq.n	8005854 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b12      	cmp	r3, #18
 8005852:	d130      	bne.n	80058b6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	2203      	movs	r2, #3
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800588a:	2201      	movs	r2, #1
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	43db      	mvns	r3, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4013      	ands	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	091b      	lsrs	r3, r3, #4
 80058a0:	f003 0201 	and.w	r2, r3, #1
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	2203      	movs	r2, #3
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	fa02 f303 	lsl.w	r3, r2, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4313      	orrs	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d003      	beq.n	80058f6 <HAL_GPIO_Init+0xee>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b12      	cmp	r3, #18
 80058f4:	d123      	bne.n	800593e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	08da      	lsrs	r2, r3, #3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3208      	adds	r2, #8
 80058fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	220f      	movs	r2, #15
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43db      	mvns	r3, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4013      	ands	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	08da      	lsrs	r2, r3, #3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3208      	adds	r2, #8
 8005938:	69b9      	ldr	r1, [r7, #24]
 800593a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	2203      	movs	r2, #3
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43db      	mvns	r3, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4013      	ands	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f003 0203 	and.w	r2, r3, #3
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	4313      	orrs	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80e0 	beq.w	8005b40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005980:	4b2f      	ldr	r3, [pc, #188]	; (8005a40 <HAL_GPIO_Init+0x238>)
 8005982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005986:	4a2e      	ldr	r2, [pc, #184]	; (8005a40 <HAL_GPIO_Init+0x238>)
 8005988:	f043 0302 	orr.w	r3, r3, #2
 800598c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005990:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <HAL_GPIO_Init+0x238>)
 8005992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800599e:	4a29      	ldr	r2, [pc, #164]	; (8005a44 <HAL_GPIO_Init+0x23c>)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	089b      	lsrs	r3, r3, #2
 80059a4:	3302      	adds	r3, #2
 80059a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	220f      	movs	r2, #15
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	43db      	mvns	r3, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4013      	ands	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <HAL_GPIO_Init+0x240>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d052      	beq.n	8005a70 <HAL_GPIO_Init+0x268>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1f      	ldr	r2, [pc, #124]	; (8005a4c <HAL_GPIO_Init+0x244>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d031      	beq.n	8005a36 <HAL_GPIO_Init+0x22e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <HAL_GPIO_Init+0x248>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d02b      	beq.n	8005a32 <HAL_GPIO_Init+0x22a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <HAL_GPIO_Init+0x24c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d025      	beq.n	8005a2e <HAL_GPIO_Init+0x226>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_GPIO_Init+0x250>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01f      	beq.n	8005a2a <HAL_GPIO_Init+0x222>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <HAL_GPIO_Init+0x254>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d019      	beq.n	8005a26 <HAL_GPIO_Init+0x21e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a1a      	ldr	r2, [pc, #104]	; (8005a60 <HAL_GPIO_Init+0x258>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_GPIO_Init+0x21a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a19      	ldr	r2, [pc, #100]	; (8005a64 <HAL_GPIO_Init+0x25c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00d      	beq.n	8005a1e <HAL_GPIO_Init+0x216>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a18      	ldr	r2, [pc, #96]	; (8005a68 <HAL_GPIO_Init+0x260>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <HAL_GPIO_Init+0x212>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <HAL_GPIO_Init+0x264>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d101      	bne.n	8005a16 <HAL_GPIO_Init+0x20e>
 8005a12:	2309      	movs	r3, #9
 8005a14:	e02d      	b.n	8005a72 <HAL_GPIO_Init+0x26a>
 8005a16:	230a      	movs	r3, #10
 8005a18:	e02b      	b.n	8005a72 <HAL_GPIO_Init+0x26a>
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	e029      	b.n	8005a72 <HAL_GPIO_Init+0x26a>
 8005a1e:	2307      	movs	r3, #7
 8005a20:	e027      	b.n	8005a72 <HAL_GPIO_Init+0x26a>
 8005a22:	2306      	movs	r3, #6
 8005a24:	e025      	b.n	8005a72 <HAL_GPIO_Init+0x26a>
 8005a26:	2305      	movs	r3, #5
 8005a28:	e023      	b.n	8005a72 <HAL_GPIO_Init+0x26a>
 8005a2a:	2304      	movs	r3, #4
 8005a2c:	e021      	b.n	8005a72 <HAL_GPIO_Init+0x26a>
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e01f      	b.n	8005a72 <HAL_GPIO_Init+0x26a>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e01d      	b.n	8005a72 <HAL_GPIO_Init+0x26a>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e01b      	b.n	8005a72 <HAL_GPIO_Init+0x26a>
 8005a3a:	bf00      	nop
 8005a3c:	58000080 	.word	0x58000080
 8005a40:	58024400 	.word	0x58024400
 8005a44:	58000400 	.word	0x58000400
 8005a48:	58020000 	.word	0x58020000
 8005a4c:	58020400 	.word	0x58020400
 8005a50:	58020800 	.word	0x58020800
 8005a54:	58020c00 	.word	0x58020c00
 8005a58:	58021000 	.word	0x58021000
 8005a5c:	58021400 	.word	0x58021400
 8005a60:	58021800 	.word	0x58021800
 8005a64:	58021c00 	.word	0x58021c00
 8005a68:	58022000 	.word	0x58022000
 8005a6c:	58022400 	.word	0x58022400
 8005a70:	2300      	movs	r3, #0
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	f002 0203 	and.w	r2, r2, #3
 8005a78:	0092      	lsls	r2, r2, #2
 8005a7a:	4093      	lsls	r3, r2
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a82:	4938      	ldr	r1, [pc, #224]	; (8005b64 <HAL_GPIO_Init+0x35c>)
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	089b      	lsrs	r3, r3, #2
 8005a88:	3302      	adds	r3, #2
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3301      	adds	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f47f ae63 	bne.w	800581c <HAL_GPIO_Init+0x14>
  }
}
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
 8005b5a:	3724      	adds	r7, #36	; 0x24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	58000400 	.word	0x58000400

08005b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	887b      	ldrh	r3, [r7, #2]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
 8005b84:	e001      	b.n	8005b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	807b      	strh	r3, [r7, #2]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ba8:	787b      	ldrb	r3, [r7, #1]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bae:	887a      	ldrh	r2, [r7, #2]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005bb4:	e003      	b.n	8005bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005bb6:	887b      	ldrh	r3, [r7, #2]
 8005bb8:	041a      	lsls	r2, r3, #16
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	619a      	str	r2, [r3, #24]
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005bd4:	4a08      	ldr	r2, [pc, #32]	; (8005bf8 <HAL_HSEM_FastTake+0x2c>)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3320      	adds	r3, #32
 8005bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bde:	4a07      	ldr	r2, [pc, #28]	; (8005bfc <HAL_HSEM_FastTake+0x30>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d101      	bne.n	8005be8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e000      	b.n	8005bea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	58026400 	.word	0x58026400
 8005bfc:	80000300 	.word	0x80000300

08005c00 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005c0a:	4906      	ldr	r1, [pc, #24]	; (8005c24 <HAL_HSEM_Release+0x24>)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	58026400 	.word	0x58026400

08005c28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c2a:	b08f      	sub	sp, #60	; 0x3c
 8005c2c:	af0a      	add	r7, sp, #40	; 0x28
 8005c2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e116      	b.n	8005e68 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fc f831 	bl	8001cbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f006 ffa5 	bl	800cbc8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	687e      	ldr	r6, [r7, #4]
 8005c86:	466d      	mov	r5, sp
 8005c88:	f106 0410 	add.w	r4, r6, #16
 8005c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c98:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c9c:	1d33      	adds	r3, r6, #4
 8005c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ca0:	6838      	ldr	r0, [r7, #0]
 8005ca2:	f006 ff23 	bl	800caec <USB_CoreInit>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e0d7      	b.n	8005e68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f006 ff93 	bl	800cbea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]
 8005cc8:	e04a      	b.n	8005d60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	333d      	adds	r3, #61	; 0x3d
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cde:	7bfa      	ldrb	r2, [r7, #15]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	1a9b      	subs	r3, r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	333c      	adds	r3, #60	; 0x3c
 8005cee:	7bfa      	ldrb	r2, [r7, #15]
 8005cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cf2:	7bfa      	ldrb	r2, [r7, #15]
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	b298      	uxth	r0, r3
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	3342      	adds	r3, #66	; 0x42
 8005d06:	4602      	mov	r2, r0
 8005d08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d0a:	7bfa      	ldrb	r2, [r7, #15]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	1a9b      	subs	r3, r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	333f      	adds	r3, #63	; 0x3f
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d1e:	7bfa      	ldrb	r2, [r7, #15]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	3344      	adds	r3, #68	; 0x44
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d32:	7bfa      	ldrb	r2, [r7, #15]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	1a9b      	subs	r3, r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	3348      	adds	r3, #72	; 0x48
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d46:	7bfa      	ldrb	r2, [r7, #15]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3350      	adds	r3, #80	; 0x50
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	7bfa      	ldrb	r2, [r7, #15]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d3af      	bcc.n	8005cca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	e044      	b.n	8005dfa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	1a9b      	subs	r3, r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005d98:	7bfa      	ldrb	r2, [r7, #15]
 8005d9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005db2:	7bfa      	ldrb	r2, [r7, #15]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005dc8:	7bfa      	ldrb	r2, [r7, #15]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	1a9b      	subs	r3, r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005dde:	7bfa      	ldrb	r2, [r7, #15]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	3301      	adds	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	7bfa      	ldrb	r2, [r7, #15]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d3b5      	bcc.n	8005d70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	687e      	ldr	r6, [r7, #4]
 8005e0c:	466d      	mov	r5, sp
 8005e0e:	f106 0410 	add.w	r4, r6, #16
 8005e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e22:	1d33      	adds	r3, r6, #4
 8005e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e26:	6838      	ldr	r0, [r7, #0]
 8005e28:	f006 ff0a 	bl	800cc40 <USB_DevInit>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e014      	b.n	8005e68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d102      	bne.n	8005e5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f80a 	bl	8005e70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f007 f8ac 	bl	800cfbe <USB_DevDisconnect>

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e9e:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <HAL_PCDEx_ActivateLPM+0x44>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	10000003 	.word	0x10000003

08005eb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005ec0:	4b29      	ldr	r3, [pc, #164]	; (8005f68 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	2b06      	cmp	r3, #6
 8005eca:	d00a      	beq.n	8005ee2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ecc:	4b26      	ldr	r3, [pc, #152]	; (8005f68 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d001      	beq.n	8005ede <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e040      	b.n	8005f60 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e03e      	b.n	8005f60 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ee2:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005eea:	491f      	ldr	r1, [pc, #124]	; (8005f68 <HAL_PWREx_ConfigSupply+0xb0>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ef2:	f7fc f8b9 	bl	8002068 <HAL_GetTick>
 8005ef6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ef8:	e009      	b.n	8005f0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005efa:	f7fc f8b5 	bl	8002068 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f08:	d901      	bls.n	8005f0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e028      	b.n	8005f60 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f0e:	4b16      	ldr	r3, [pc, #88]	; (8005f68 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1a:	d1ee      	bne.n	8005efa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b1e      	cmp	r3, #30
 8005f20:	d008      	beq.n	8005f34 <HAL_PWREx_ConfigSupply+0x7c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b2e      	cmp	r3, #46	; 0x2e
 8005f26:	d005      	beq.n	8005f34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b1d      	cmp	r3, #29
 8005f2c:	d002      	beq.n	8005f34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b2d      	cmp	r3, #45	; 0x2d
 8005f32:	d114      	bne.n	8005f5e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005f34:	f7fc f898 	bl	8002068 <HAL_GetTick>
 8005f38:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005f3a:	e009      	b.n	8005f50 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f3c:	f7fc f894 	bl	8002068 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f4a:	d901      	bls.n	8005f50 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e007      	b.n	8005f60 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5c:	d1ee      	bne.n	8005f3c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	58024800 	.word	0x58024800

08005f6c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005f70:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a04      	ldr	r2, [pc, #16]	; (8005f88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f7a:	60d3      	str	r3, [r2, #12]
}
 8005f7c:	bf00      	nop
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	58024800 	.word	0x58024800

08005f8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08c      	sub	sp, #48	; 0x30
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e3ff      	b.n	800679e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8087 	beq.w	80060ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fac:	4b99      	ldr	r3, [pc, #612]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fb6:	4b97      	ldr	r3, [pc, #604]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	d007      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x46>
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	2b18      	cmp	r3, #24
 8005fc6:	d110      	bne.n	8005fea <HAL_RCC_OscConfig+0x5e>
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d10b      	bne.n	8005fea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd2:	4b90      	ldr	r3, [pc, #576]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d06c      	beq.n	80060b8 <HAL_RCC_OscConfig+0x12c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d168      	bne.n	80060b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e3d9      	b.n	800679e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff2:	d106      	bne.n	8006002 <HAL_RCC_OscConfig+0x76>
 8005ff4:	4b87      	ldr	r3, [pc, #540]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a86      	ldr	r2, [pc, #536]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8005ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e02e      	b.n	8006060 <HAL_RCC_OscConfig+0xd4>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10c      	bne.n	8006024 <HAL_RCC_OscConfig+0x98>
 800600a:	4b82      	ldr	r3, [pc, #520]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a81      	ldr	r2, [pc, #516]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	4b7f      	ldr	r3, [pc, #508]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a7e      	ldr	r2, [pc, #504]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 800601c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	e01d      	b.n	8006060 <HAL_RCC_OscConfig+0xd4>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800602c:	d10c      	bne.n	8006048 <HAL_RCC_OscConfig+0xbc>
 800602e:	4b79      	ldr	r3, [pc, #484]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a78      	ldr	r2, [pc, #480]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	4b76      	ldr	r3, [pc, #472]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a75      	ldr	r2, [pc, #468]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e00b      	b.n	8006060 <HAL_RCC_OscConfig+0xd4>
 8006048:	4b72      	ldr	r3, [pc, #456]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a71      	ldr	r2, [pc, #452]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 800604e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	4b6f      	ldr	r3, [pc, #444]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a6e      	ldr	r2, [pc, #440]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 800605a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800605e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d013      	beq.n	8006090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006068:	f7fb fffe 	bl	8002068 <HAL_GetTick>
 800606c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006070:	f7fb fffa 	bl	8002068 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b64      	cmp	r3, #100	; 0x64
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e38d      	b.n	800679e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006082:	4b64      	ldr	r3, [pc, #400]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0f0      	beq.n	8006070 <HAL_RCC_OscConfig+0xe4>
 800608e:	e014      	b.n	80060ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006090:	f7fb ffea 	bl	8002068 <HAL_GetTick>
 8006094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006098:	f7fb ffe6 	bl	8002068 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b64      	cmp	r3, #100	; 0x64
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e379      	b.n	800679e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060aa:	4b5a      	ldr	r3, [pc, #360]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f0      	bne.n	8006098 <HAL_RCC_OscConfig+0x10c>
 80060b6:	e000      	b.n	80060ba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80ae 	beq.w	8006224 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060c8:	4b52      	ldr	r3, [pc, #328]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060d2:	4b50      	ldr	r3, [pc, #320]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_RCC_OscConfig+0x162>
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	2b18      	cmp	r3, #24
 80060e2:	d13a      	bne.n	800615a <HAL_RCC_OscConfig+0x1ce>
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d135      	bne.n	800615a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060ee:	4b49      	ldr	r3, [pc, #292]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_RCC_OscConfig+0x17a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e34b      	b.n	800679e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006106:	f7fb ffdf 	bl	80020c8 <HAL_GetREVID>
 800610a:	4603      	mov	r3, r0
 800610c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006110:	4293      	cmp	r3, r2
 8006112:	d817      	bhi.n	8006144 <HAL_RCC_OscConfig+0x1b8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d108      	bne.n	800612e <HAL_RCC_OscConfig+0x1a2>
 800611c:	4b3d      	ldr	r3, [pc, #244]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006124:	4a3b      	ldr	r2, [pc, #236]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800612a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800612c:	e07a      	b.n	8006224 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612e:	4b39      	ldr	r3, [pc, #228]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	031b      	lsls	r3, r3, #12
 800613c:	4935      	ldr	r1, [pc, #212]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 800613e:	4313      	orrs	r3, r2
 8006140:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006142:	e06f      	b.n	8006224 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006144:	4b33      	ldr	r3, [pc, #204]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	4930      	ldr	r1, [pc, #192]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006158:	e064      	b.n	8006224 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d045      	beq.n	80061ee <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006162:	4b2c      	ldr	r3, [pc, #176]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f023 0219 	bic.w	r2, r3, #25
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	4929      	ldr	r1, [pc, #164]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006170:	4313      	orrs	r3, r2
 8006172:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fb ff78 	bl	8002068 <HAL_GetTick>
 8006178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800617c:	f7fb ff74 	bl	8002068 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e307      	b.n	800679e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800618e:	4b21      	ldr	r3, [pc, #132]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f0      	beq.n	800617c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619a:	f7fb ff95 	bl	80020c8 <HAL_GetREVID>
 800619e:	4603      	mov	r3, r0
 80061a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d817      	bhi.n	80061d8 <HAL_RCC_OscConfig+0x24c>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b40      	cmp	r3, #64	; 0x40
 80061ae:	d108      	bne.n	80061c2 <HAL_RCC_OscConfig+0x236>
 80061b0:	4b18      	ldr	r3, [pc, #96]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061b8:	4a16      	ldr	r2, [pc, #88]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80061ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061be:	6053      	str	r3, [r2, #4]
 80061c0:	e030      	b.n	8006224 <HAL_RCC_OscConfig+0x298>
 80061c2:	4b14      	ldr	r3, [pc, #80]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	031b      	lsls	r3, r3, #12
 80061d0:	4910      	ldr	r1, [pc, #64]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	604b      	str	r3, [r1, #4]
 80061d6:	e025      	b.n	8006224 <HAL_RCC_OscConfig+0x298>
 80061d8:	4b0e      	ldr	r3, [pc, #56]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	061b      	lsls	r3, r3, #24
 80061e6:	490b      	ldr	r1, [pc, #44]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	604b      	str	r3, [r1, #4]
 80061ec:	e01a      	b.n	8006224 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ee:	4b09      	ldr	r3, [pc, #36]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a08      	ldr	r2, [pc, #32]	; (8006214 <HAL_RCC_OscConfig+0x288>)
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fa:	f7fb ff35 	bl	8002068 <HAL_GetTick>
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006200:	e00a      	b.n	8006218 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006202:	f7fb ff31 	bl	8002068 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d903      	bls.n	8006218 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e2c4      	b.n	800679e <HAL_RCC_OscConfig+0x812>
 8006214:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006218:	4ba4      	ldr	r3, [pc, #656]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1ee      	bne.n	8006202 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80a9 	beq.w	8006384 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006232:	4b9e      	ldr	r3, [pc, #632]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800623a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800623c:	4b9b      	ldr	r3, [pc, #620]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d007      	beq.n	8006258 <HAL_RCC_OscConfig+0x2cc>
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	2b18      	cmp	r3, #24
 800624c:	d13a      	bne.n	80062c4 <HAL_RCC_OscConfig+0x338>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	2b01      	cmp	r3, #1
 8006256:	d135      	bne.n	80062c4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006258:	4b94      	ldr	r3, [pc, #592]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_OscConfig+0x2e4>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	2b80      	cmp	r3, #128	; 0x80
 800626a:	d001      	beq.n	8006270 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e296      	b.n	800679e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006270:	f7fb ff2a 	bl	80020c8 <HAL_GetREVID>
 8006274:	4603      	mov	r3, r0
 8006276:	f241 0203 	movw	r2, #4099	; 0x1003
 800627a:	4293      	cmp	r3, r2
 800627c:	d817      	bhi.n	80062ae <HAL_RCC_OscConfig+0x322>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	2b20      	cmp	r3, #32
 8006284:	d108      	bne.n	8006298 <HAL_RCC_OscConfig+0x30c>
 8006286:	4b89      	ldr	r3, [pc, #548]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800628e:	4a87      	ldr	r2, [pc, #540]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006294:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006296:	e075      	b.n	8006384 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006298:	4b84      	ldr	r3, [pc, #528]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	069b      	lsls	r3, r3, #26
 80062a6:	4981      	ldr	r1, [pc, #516]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062ac:	e06a      	b.n	8006384 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062ae:	4b7f      	ldr	r3, [pc, #508]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	061b      	lsls	r3, r3, #24
 80062bc:	497b      	ldr	r1, [pc, #492]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062c2:	e05f      	b.n	8006384 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d042      	beq.n	8006352 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062cc:	4b77      	ldr	r3, [pc, #476]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a76      	ldr	r2, [pc, #472]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 80062d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d8:	f7fb fec6 	bl	8002068 <HAL_GetTick>
 80062dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80062e0:	f7fb fec2 	bl	8002068 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e255      	b.n	800679e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062f2:	4b6e      	ldr	r3, [pc, #440]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0f0      	beq.n	80062e0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062fe:	f7fb fee3 	bl	80020c8 <HAL_GetREVID>
 8006302:	4603      	mov	r3, r0
 8006304:	f241 0203 	movw	r2, #4099	; 0x1003
 8006308:	4293      	cmp	r3, r2
 800630a:	d817      	bhi.n	800633c <HAL_RCC_OscConfig+0x3b0>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	2b20      	cmp	r3, #32
 8006312:	d108      	bne.n	8006326 <HAL_RCC_OscConfig+0x39a>
 8006314:	4b65      	ldr	r3, [pc, #404]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800631c:	4a63      	ldr	r2, [pc, #396]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800631e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006322:	6053      	str	r3, [r2, #4]
 8006324:	e02e      	b.n	8006384 <HAL_RCC_OscConfig+0x3f8>
 8006326:	4b61      	ldr	r3, [pc, #388]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	069b      	lsls	r3, r3, #26
 8006334:	495d      	ldr	r1, [pc, #372]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006336:	4313      	orrs	r3, r2
 8006338:	604b      	str	r3, [r1, #4]
 800633a:	e023      	b.n	8006384 <HAL_RCC_OscConfig+0x3f8>
 800633c:	4b5b      	ldr	r3, [pc, #364]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	061b      	lsls	r3, r3, #24
 800634a:	4958      	ldr	r1, [pc, #352]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800634c:	4313      	orrs	r3, r2
 800634e:	60cb      	str	r3, [r1, #12]
 8006350:	e018      	b.n	8006384 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006352:	4b56      	ldr	r3, [pc, #344]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a55      	ldr	r2, [pc, #340]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635e:	f7fb fe83 	bl	8002068 <HAL_GetTick>
 8006362:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006366:	f7fb fe7f 	bl	8002068 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e212      	b.n	800679e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006378:	4b4c      	ldr	r3, [pc, #304]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f0      	bne.n	8006366 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b00      	cmp	r3, #0
 800638e:	d036      	beq.n	80063fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d019      	beq.n	80063cc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006398:	4b44      	ldr	r3, [pc, #272]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800639a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800639c:	4a43      	ldr	r2, [pc, #268]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a4:	f7fb fe60 	bl	8002068 <HAL_GetTick>
 80063a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ac:	f7fb fe5c 	bl	8002068 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e1ef      	b.n	800679e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063be:	4b3b      	ldr	r3, [pc, #236]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 80063c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCC_OscConfig+0x420>
 80063ca:	e018      	b.n	80063fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063cc:	4b37      	ldr	r3, [pc, #220]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 80063ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d0:	4a36      	ldr	r2, [pc, #216]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d8:	f7fb fe46 	bl	8002068 <HAL_GetTick>
 80063dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063e0:	f7fb fe42 	bl	8002068 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e1d5      	b.n	800679e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063f2:	4b2e      	ldr	r3, [pc, #184]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 80063f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d036      	beq.n	8006478 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d019      	beq.n	8006446 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006412:	4b26      	ldr	r3, [pc, #152]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a25      	ldr	r2, [pc, #148]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006418:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800641c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800641e:	f7fb fe23 	bl	8002068 <HAL_GetTick>
 8006422:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006426:	f7fb fe1f 	bl	8002068 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e1b2      	b.n	800679e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006438:	4b1c      	ldr	r3, [pc, #112]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f0      	beq.n	8006426 <HAL_RCC_OscConfig+0x49a>
 8006444:	e018      	b.n	8006478 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006446:	4b19      	ldr	r3, [pc, #100]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a18      	ldr	r2, [pc, #96]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800644c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006450:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006452:	f7fb fe09 	bl	8002068 <HAL_GetTick>
 8006456:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800645a:	f7fb fe05 	bl	8002068 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e198      	b.n	800679e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800646c:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <HAL_RCC_OscConfig+0x520>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1f0      	bne.n	800645a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 8085 	beq.w	8006590 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <HAL_RCC_OscConfig+0x524>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <HAL_RCC_OscConfig+0x524>)
 800648c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006490:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006492:	f7fb fde9 	bl	8002068 <HAL_GetTick>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006498:	e00c      	b.n	80064b4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800649a:	f7fb fde5 	bl	8002068 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b64      	cmp	r3, #100	; 0x64
 80064a6:	d905      	bls.n	80064b4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e178      	b.n	800679e <HAL_RCC_OscConfig+0x812>
 80064ac:	58024400 	.word	0x58024400
 80064b0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064b4:	4b96      	ldr	r3, [pc, #600]	; (8006710 <HAL_RCC_OscConfig+0x784>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0ec      	beq.n	800649a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d106      	bne.n	80064d6 <HAL_RCC_OscConfig+0x54a>
 80064c8:	4b92      	ldr	r3, [pc, #584]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80064ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064cc:	4a91      	ldr	r2, [pc, #580]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	6713      	str	r3, [r2, #112]	; 0x70
 80064d4:	e02d      	b.n	8006532 <HAL_RCC_OscConfig+0x5a6>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10c      	bne.n	80064f8 <HAL_RCC_OscConfig+0x56c>
 80064de:	4b8d      	ldr	r3, [pc, #564]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	4a8c      	ldr	r2, [pc, #560]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ea:	4b8a      	ldr	r3, [pc, #552]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	4a89      	ldr	r2, [pc, #548]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80064f0:	f023 0304 	bic.w	r3, r3, #4
 80064f4:	6713      	str	r3, [r2, #112]	; 0x70
 80064f6:	e01c      	b.n	8006532 <HAL_RCC_OscConfig+0x5a6>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2b05      	cmp	r3, #5
 80064fe:	d10c      	bne.n	800651a <HAL_RCC_OscConfig+0x58e>
 8006500:	4b84      	ldr	r3, [pc, #528]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006504:	4a83      	ldr	r2, [pc, #524]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006506:	f043 0304 	orr.w	r3, r3, #4
 800650a:	6713      	str	r3, [r2, #112]	; 0x70
 800650c:	4b81      	ldr	r3, [pc, #516]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4a80      	ldr	r2, [pc, #512]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	6713      	str	r3, [r2, #112]	; 0x70
 8006518:	e00b      	b.n	8006532 <HAL_RCC_OscConfig+0x5a6>
 800651a:	4b7e      	ldr	r3, [pc, #504]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	4a7d      	ldr	r2, [pc, #500]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006520:	f023 0301 	bic.w	r3, r3, #1
 8006524:	6713      	str	r3, [r2, #112]	; 0x70
 8006526:	4b7b      	ldr	r3, [pc, #492]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	4a7a      	ldr	r2, [pc, #488]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 800652c:	f023 0304 	bic.w	r3, r3, #4
 8006530:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d015      	beq.n	8006566 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653a:	f7fb fd95 	bl	8002068 <HAL_GetTick>
 800653e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006540:	e00a      	b.n	8006558 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006542:	f7fb fd91 	bl	8002068 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006550:	4293      	cmp	r3, r2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e122      	b.n	800679e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006558:	4b6e      	ldr	r3, [pc, #440]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0ee      	beq.n	8006542 <HAL_RCC_OscConfig+0x5b6>
 8006564:	e014      	b.n	8006590 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006566:	f7fb fd7f 	bl	8002068 <HAL_GetTick>
 800656a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800656c:	e00a      	b.n	8006584 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800656e:	f7fb fd7b 	bl	8002068 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	f241 3288 	movw	r2, #5000	; 0x1388
 800657c:	4293      	cmp	r3, r2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e10c      	b.n	800679e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006584:	4b63      	ldr	r3, [pc, #396]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1ee      	bne.n	800656e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8101 	beq.w	800679c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800659a:	4b5e      	ldr	r3, [pc, #376]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065a2:	2b18      	cmp	r3, #24
 80065a4:	f000 80bc 	beq.w	8006720 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	f040 8095 	bne.w	80066dc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b2:	4b58      	ldr	r3, [pc, #352]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a57      	ldr	r2, [pc, #348]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80065b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fb fd53 	bl	8002068 <HAL_GetTick>
 80065c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c6:	f7fb fd4f 	bl	8002068 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e0e2      	b.n	800679e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065d8:	4b4e      	ldr	r3, [pc, #312]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f0      	bne.n	80065c6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065e4:	4b4b      	ldr	r3, [pc, #300]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80065e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065e8:	4b4b      	ldr	r3, [pc, #300]	; (8006718 <HAL_RCC_OscConfig+0x78c>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065f4:	0112      	lsls	r2, r2, #4
 80065f6:	430a      	orrs	r2, r1
 80065f8:	4946      	ldr	r1, [pc, #280]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	628b      	str	r3, [r1, #40]	; 0x28
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	3b01      	subs	r3, #1
 8006604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660c:	3b01      	subs	r3, #1
 800660e:	025b      	lsls	r3, r3, #9
 8006610:	b29b      	uxth	r3, r3
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	3b01      	subs	r3, #1
 800661a:	041b      	lsls	r3, r3, #16
 800661c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	3b01      	subs	r3, #1
 8006628:	061b      	lsls	r3, r3, #24
 800662a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800662e:	4939      	ldr	r1, [pc, #228]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006630:	4313      	orrs	r3, r2
 8006632:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006634:	4b37      	ldr	r3, [pc, #220]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	4a36      	ldr	r2, [pc, #216]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 800663a:	f023 0301 	bic.w	r3, r3, #1
 800663e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006640:	4b34      	ldr	r3, [pc, #208]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006644:	4b35      	ldr	r3, [pc, #212]	; (800671c <HAL_RCC_OscConfig+0x790>)
 8006646:	4013      	ands	r3, r2
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800664c:	00d2      	lsls	r2, r2, #3
 800664e:	4931      	ldr	r1, [pc, #196]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006650:	4313      	orrs	r3, r2
 8006652:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006654:	4b2f      	ldr	r3, [pc, #188]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	f023 020c 	bic.w	r2, r3, #12
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	492c      	ldr	r1, [pc, #176]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006662:	4313      	orrs	r3, r2
 8006664:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006666:	4b2b      	ldr	r3, [pc, #172]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	f023 0202 	bic.w	r2, r3, #2
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	4928      	ldr	r1, [pc, #160]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006674:	4313      	orrs	r3, r2
 8006676:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006678:	4b26      	ldr	r3, [pc, #152]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a25      	ldr	r2, [pc, #148]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 800667e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006684:	4b23      	ldr	r3, [pc, #140]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	4a22      	ldr	r2, [pc, #136]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 800668a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800668e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006690:	4b20      	ldr	r3, [pc, #128]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800669a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800669c:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	4a1c      	ldr	r2, [pc, #112]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a8:	4b1a      	ldr	r3, [pc, #104]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80066ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fb fcd8 	bl	8002068 <HAL_GetTick>
 80066b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066bc:	f7fb fcd4 	bl	8002068 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e067      	b.n	800679e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0x730>
 80066da:	e05f      	b.n	800679c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066dc:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a0c      	ldr	r2, [pc, #48]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 80066e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e8:	f7fb fcbe 	bl	8002068 <HAL_GetTick>
 80066ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066f0:	f7fb fcba 	bl	8002068 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e04d      	b.n	800679e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006702:	4b04      	ldr	r3, [pc, #16]	; (8006714 <HAL_RCC_OscConfig+0x788>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1f0      	bne.n	80066f0 <HAL_RCC_OscConfig+0x764>
 800670e:	e045      	b.n	800679c <HAL_RCC_OscConfig+0x810>
 8006710:	58024800 	.word	0x58024800
 8006714:	58024400 	.word	0x58024400
 8006718:	fffffc0c 	.word	0xfffffc0c
 800671c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006720:	4b21      	ldr	r3, [pc, #132]	; (80067a8 <HAL_RCC_OscConfig+0x81c>)
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006726:	4b20      	ldr	r3, [pc, #128]	; (80067a8 <HAL_RCC_OscConfig+0x81c>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	2b01      	cmp	r3, #1
 8006732:	d031      	beq.n	8006798 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f003 0203 	and.w	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800673e:	429a      	cmp	r2, r3
 8006740:	d12a      	bne.n	8006798 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674e:	429a      	cmp	r2, r3
 8006750:	d122      	bne.n	8006798 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800675e:	429a      	cmp	r2, r3
 8006760:	d11a      	bne.n	8006798 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	0a5b      	lsrs	r3, r3, #9
 8006766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006770:	429a      	cmp	r2, r3
 8006772:	d111      	bne.n	8006798 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	0c1b      	lsrs	r3, r3, #16
 8006778:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006782:	429a      	cmp	r2, r3
 8006784:	d108      	bne.n	8006798 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	0e1b      	lsrs	r3, r3, #24
 800678a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006794:	429a      	cmp	r2, r3
 8006796:	d001      	beq.n	800679c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e000      	b.n	800679e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3730      	adds	r7, #48	; 0x30
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	58024400 	.word	0x58024400

080067ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e19c      	b.n	8006afa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067c0:	4b8a      	ldr	r3, [pc, #552]	; (80069ec <HAL_RCC_ClockConfig+0x240>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d910      	bls.n	80067f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ce:	4b87      	ldr	r3, [pc, #540]	; (80069ec <HAL_RCC_ClockConfig+0x240>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f023 020f 	bic.w	r2, r3, #15
 80067d6:	4985      	ldr	r1, [pc, #532]	; (80069ec <HAL_RCC_ClockConfig+0x240>)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	4313      	orrs	r3, r2
 80067dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067de:	4b83      	ldr	r3, [pc, #524]	; (80069ec <HAL_RCC_ClockConfig+0x240>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d001      	beq.n	80067f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e184      	b.n	8006afa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d010      	beq.n	800681e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	4b7b      	ldr	r3, [pc, #492]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006808:	429a      	cmp	r2, r3
 800680a:	d908      	bls.n	800681e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800680c:	4b78      	ldr	r3, [pc, #480]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	4975      	ldr	r1, [pc, #468]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800681a:	4313      	orrs	r3, r2
 800681c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0308 	and.w	r3, r3, #8
 8006826:	2b00      	cmp	r3, #0
 8006828:	d010      	beq.n	800684c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695a      	ldr	r2, [r3, #20]
 800682e:	4b70      	ldr	r3, [pc, #448]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006836:	429a      	cmp	r2, r3
 8006838:	d908      	bls.n	800684c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800683a:	4b6d      	ldr	r3, [pc, #436]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	496a      	ldr	r1, [pc, #424]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 8006848:	4313      	orrs	r3, r2
 800684a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0310 	and.w	r3, r3, #16
 8006854:	2b00      	cmp	r3, #0
 8006856:	d010      	beq.n	800687a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	4b64      	ldr	r3, [pc, #400]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006864:	429a      	cmp	r2, r3
 8006866:	d908      	bls.n	800687a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006868:	4b61      	ldr	r3, [pc, #388]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	495e      	ldr	r1, [pc, #376]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 8006876:	4313      	orrs	r3, r2
 8006878:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d010      	beq.n	80068a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69da      	ldr	r2, [r3, #28]
 800688a:	4b59      	ldr	r3, [pc, #356]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006892:	429a      	cmp	r2, r3
 8006894:	d908      	bls.n	80068a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006896:	4b56      	ldr	r3, [pc, #344]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	4953      	ldr	r1, [pc, #332]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d010      	beq.n	80068d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	4b4d      	ldr	r3, [pc, #308]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d908      	bls.n	80068d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c4:	4b4a      	ldr	r3, [pc, #296]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f023 020f 	bic.w	r2, r3, #15
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	4947      	ldr	r1, [pc, #284]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d055      	beq.n	800698e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80068e2:	4b43      	ldr	r3, [pc, #268]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	4940      	ldr	r1, [pc, #256]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d107      	bne.n	800690c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068fc:	4b3c      	ldr	r3, [pc, #240]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d121      	bne.n	800694c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e0f6      	b.n	8006afa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b03      	cmp	r3, #3
 8006912:	d107      	bne.n	8006924 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006914:	4b36      	ldr	r3, [pc, #216]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d115      	bne.n	800694c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0ea      	b.n	8006afa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d107      	bne.n	800693c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800692c:	4b30      	ldr	r3, [pc, #192]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e0de      	b.n	8006afa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800693c:	4b2c      	ldr	r3, [pc, #176]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0d6      	b.n	8006afa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800694c:	4b28      	ldr	r3, [pc, #160]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f023 0207 	bic.w	r2, r3, #7
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4925      	ldr	r1, [pc, #148]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800695a:	4313      	orrs	r3, r2
 800695c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695e:	f7fb fb83 	bl	8002068 <HAL_GetTick>
 8006962:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006964:	e00a      	b.n	800697c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006966:	f7fb fb7f 	bl	8002068 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	f241 3288 	movw	r2, #5000	; 0x1388
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e0be      	b.n	8006afa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800697c:	4b1c      	ldr	r3, [pc, #112]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	429a      	cmp	r2, r3
 800698c:	d1eb      	bne.n	8006966 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d010      	beq.n	80069bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	4b14      	ldr	r3, [pc, #80]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d208      	bcs.n	80069bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069aa:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f023 020f 	bic.w	r2, r3, #15
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	490e      	ldr	r1, [pc, #56]	; (80069f0 <HAL_RCC_ClockConfig+0x244>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069bc:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <HAL_RCC_ClockConfig+0x240>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d214      	bcs.n	80069f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ca:	4b08      	ldr	r3, [pc, #32]	; (80069ec <HAL_RCC_ClockConfig+0x240>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f023 020f 	bic.w	r2, r3, #15
 80069d2:	4906      	ldr	r1, [pc, #24]	; (80069ec <HAL_RCC_ClockConfig+0x240>)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069da:	4b04      	ldr	r3, [pc, #16]	; (80069ec <HAL_RCC_ClockConfig+0x240>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d005      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e086      	b.n	8006afa <HAL_RCC_ClockConfig+0x34e>
 80069ec:	52002000 	.word	0x52002000
 80069f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d010      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	4b3f      	ldr	r3, [pc, #252]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d208      	bcs.n	8006a22 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a10:	4b3c      	ldr	r3, [pc, #240]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	4939      	ldr	r1, [pc, #228]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d010      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695a      	ldr	r2, [r3, #20]
 8006a32:	4b34      	ldr	r3, [pc, #208]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d208      	bcs.n	8006a50 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a3e:	4b31      	ldr	r3, [pc, #196]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	492e      	ldr	r1, [pc, #184]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0310 	and.w	r3, r3, #16
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d010      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	4b28      	ldr	r3, [pc, #160]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d208      	bcs.n	8006a7e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a6c:	4b25      	ldr	r3, [pc, #148]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	4922      	ldr	r1, [pc, #136]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d010      	beq.n	8006aac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69da      	ldr	r2, [r3, #28]
 8006a8e:	4b1d      	ldr	r3, [pc, #116]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d208      	bcs.n	8006aac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a9a:	4b1a      	ldr	r3, [pc, #104]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	4917      	ldr	r1, [pc, #92]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006aac:	f000 f834 	bl	8006b18 <HAL_RCC_GetSysClockFreq>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	4912      	ldr	r1, [pc, #72]	; (8006b08 <HAL_RCC_ClockConfig+0x35c>)
 8006abe:	5ccb      	ldrb	r3, [r1, r3]
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006aca:	4b0e      	ldr	r3, [pc, #56]	; (8006b04 <HAL_RCC_ClockConfig+0x358>)
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	4a0d      	ldr	r2, [pc, #52]	; (8006b08 <HAL_RCC_ClockConfig+0x35c>)
 8006ad4:	5cd3      	ldrb	r3, [r2, r3]
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <HAL_RCC_ClockConfig+0x360>)
 8006ae2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ae4:	4a0a      	ldr	r2, [pc, #40]	; (8006b10 <HAL_RCC_ClockConfig+0x364>)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006aea:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <HAL_RCC_ClockConfig+0x368>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fb fa70 	bl	8001fd4 <HAL_InitTick>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	58024400 	.word	0x58024400
 8006b08:	0800d220 	.word	0x0800d220
 8006b0c:	24000004 	.word	0x24000004
 8006b10:	24000000 	.word	0x24000000
 8006b14:	24011394 	.word	0x24011394

08006b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b089      	sub	sp, #36	; 0x24
 8006b1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b1e:	4bb3      	ldr	r3, [pc, #716]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b26:	2b18      	cmp	r3, #24
 8006b28:	f200 8155 	bhi.w	8006dd6 <HAL_RCC_GetSysClockFreq+0x2be>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b99 	.word	0x08006b99
 8006b38:	08006dd7 	.word	0x08006dd7
 8006b3c:	08006dd7 	.word	0x08006dd7
 8006b40:	08006dd7 	.word	0x08006dd7
 8006b44:	08006dd7 	.word	0x08006dd7
 8006b48:	08006dd7 	.word	0x08006dd7
 8006b4c:	08006dd7 	.word	0x08006dd7
 8006b50:	08006dd7 	.word	0x08006dd7
 8006b54:	08006bbf 	.word	0x08006bbf
 8006b58:	08006dd7 	.word	0x08006dd7
 8006b5c:	08006dd7 	.word	0x08006dd7
 8006b60:	08006dd7 	.word	0x08006dd7
 8006b64:	08006dd7 	.word	0x08006dd7
 8006b68:	08006dd7 	.word	0x08006dd7
 8006b6c:	08006dd7 	.word	0x08006dd7
 8006b70:	08006dd7 	.word	0x08006dd7
 8006b74:	08006bc5 	.word	0x08006bc5
 8006b78:	08006dd7 	.word	0x08006dd7
 8006b7c:	08006dd7 	.word	0x08006dd7
 8006b80:	08006dd7 	.word	0x08006dd7
 8006b84:	08006dd7 	.word	0x08006dd7
 8006b88:	08006dd7 	.word	0x08006dd7
 8006b8c:	08006dd7 	.word	0x08006dd7
 8006b90:	08006dd7 	.word	0x08006dd7
 8006b94:	08006bcb 	.word	0x08006bcb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b98:	4b94      	ldr	r3, [pc, #592]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d009      	beq.n	8006bb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ba4:	4b91      	ldr	r3, [pc, #580]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	08db      	lsrs	r3, r3, #3
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	4a90      	ldr	r2, [pc, #576]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006bb6:	e111      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bb8:	4b8d      	ldr	r3, [pc, #564]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bba:	61bb      	str	r3, [r7, #24]
    break;
 8006bbc:	e10e      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006bbe:	4b8d      	ldr	r3, [pc, #564]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006bc0:	61bb      	str	r3, [r7, #24]
    break;
 8006bc2:	e10b      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006bc4:	4b8c      	ldr	r3, [pc, #560]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006bc6:	61bb      	str	r3, [r7, #24]
    break;
 8006bc8:	e108      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bca:	4b88      	ldr	r3, [pc, #544]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006bd4:	4b85      	ldr	r3, [pc, #532]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bde:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006be0:	4b82      	ldr	r3, [pc, #520]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006bea:	4b80      	ldr	r3, [pc, #512]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bee:	08db      	lsrs	r3, r3, #3
 8006bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	fb02 f303 	mul.w	r3, r2, r3
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80e1 	beq.w	8006dd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	f000 8083 	beq.w	8006d1c <HAL_RCC_GetSysClockFreq+0x204>
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	f200 80a1 	bhi.w	8006d60 <HAL_RCC_GetSysClockFreq+0x248>
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_RCC_GetSysClockFreq+0x114>
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d056      	beq.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c2a:	e099      	b.n	8006d60 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c2c:	4b6f      	ldr	r3, [pc, #444]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d02d      	beq.n	8006c94 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c38:	4b6c      	ldr	r3, [pc, #432]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	08db      	lsrs	r3, r3, #3
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	4a6b      	ldr	r2, [pc, #428]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
 8006c48:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c62:	4b62      	ldr	r3, [pc, #392]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c72:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006dfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006c92:	e087      	b.n	8006da4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006e00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca6:	4b51      	ldr	r3, [pc, #324]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006dfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cd6:	e065      	b.n	8006da4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	ee07 3a90 	vmov	s15, r3
 8006cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006e04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cea:	4b40      	ldr	r3, [pc, #256]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cfe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006dfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d1a:	e043      	b.n	8006da4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006e08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2e:	4b2f      	ldr	r3, [pc, #188]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006dfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d5e:	e021      	b.n	8006da4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006e04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d72:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006dfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006da2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006da4:	4b11      	ldr	r3, [pc, #68]	; (8006dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da8:	0a5b      	lsrs	r3, r3, #9
 8006daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dae:	3301      	adds	r3, #1
 8006db0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	ee07 3a90 	vmov	s15, r3
 8006db8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc8:	ee17 3a90 	vmov	r3, s15
 8006dcc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006dce:	e005      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	61bb      	str	r3, [r7, #24]
    break;
 8006dd4:	e002      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006dd6:	4b07      	ldr	r3, [pc, #28]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006dd8:	61bb      	str	r3, [r7, #24]
    break;
 8006dda:	bf00      	nop
  }

  return sysclockfreq;
 8006ddc:	69bb      	ldr	r3, [r7, #24]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3724      	adds	r7, #36	; 0x24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	58024400 	.word	0x58024400
 8006df0:	03d09000 	.word	0x03d09000
 8006df4:	003d0900 	.word	0x003d0900
 8006df8:	007a1200 	.word	0x007a1200
 8006dfc:	46000000 	.word	0x46000000
 8006e00:	4c742400 	.word	0x4c742400
 8006e04:	4a742400 	.word	0x4a742400
 8006e08:	4af42400 	.word	0x4af42400

08006e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e12:	f7ff fe81 	bl	8006b18 <HAL_RCC_GetSysClockFreq>
 8006e16:	4602      	mov	r2, r0
 8006e18:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <HAL_RCC_GetHCLKFreq+0x50>)
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	0a1b      	lsrs	r3, r3, #8
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	490f      	ldr	r1, [pc, #60]	; (8006e60 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e24:	5ccb      	ldrb	r3, [r1, r3]
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e30:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <HAL_RCC_GetHCLKFreq+0x50>)
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e3a:	5cd3      	ldrb	r3, [r2, r3]
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	fa22 f303 	lsr.w	r3, r2, r3
 8006e46:	4a07      	ldr	r2, [pc, #28]	; (8006e64 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e4a:	4a07      	ldr	r2, [pc, #28]	; (8006e68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e50:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e52:	681b      	ldr	r3, [r3, #0]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	58024400 	.word	0x58024400
 8006e60:	0800d220 	.word	0x0800d220
 8006e64:	24000004 	.word	0x24000004
 8006e68:	24000000 	.word	0x24000000

08006e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e70:	f7ff ffcc 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8006e74:	4602      	mov	r2, r0
 8006e76:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	091b      	lsrs	r3, r3, #4
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	4904      	ldr	r1, [pc, #16]	; (8006e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e82:	5ccb      	ldrb	r3, [r1, r3]
 8006e84:	f003 031f 	and.w	r3, r3, #31
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	58024400 	.word	0x58024400
 8006e94:	0800d220 	.word	0x0800d220

08006e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e9c:	f7ff ffb6 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	0a1b      	lsrs	r3, r3, #8
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	4904      	ldr	r1, [pc, #16]	; (8006ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006eae:	5ccb      	ldrb	r3, [r1, r3]
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	58024400 	.word	0x58024400
 8006ec0:	0800d220 	.word	0x0800d220

08006ec4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ecc:	2300      	movs	r3, #0
 8006ece:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d03f      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ee4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ee8:	d02a      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006eea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eee:	d824      	bhi.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ef0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ef4:	d018      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006efa:	d81e      	bhi.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f04:	d007      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f06:	e018      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f08:	4bab      	ldr	r3, [pc, #684]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	4aaa      	ldr	r2, [pc, #680]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f14:	e015      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 f9cf 	bl	80082c0 <RCCEx_PLL2_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f26:	e00c      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3324      	adds	r3, #36	; 0x24
 8006f2c:	2102      	movs	r1, #2
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 fa78 	bl	8008424 <RCCEx_PLL3_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f38:	e003      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3e:	e000      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f48:	4b9b      	ldr	r3, [pc, #620]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f54:	4998      	ldr	r1, [pc, #608]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	650b      	str	r3, [r1, #80]	; 0x50
 8006f5a:	e001      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d03d      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d826      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006f74:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7a:	bf00      	nop
 8006f7c:	08006f91 	.word	0x08006f91
 8006f80:	08006f9f 	.word	0x08006f9f
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	08006fc9 	.word	0x08006fc9
 8006f8c:	08006fc9 	.word	0x08006fc9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f90:	4b89      	ldr	r3, [pc, #548]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4a88      	ldr	r2, [pc, #544]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f9c:	e015      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 f98b 	bl	80082c0 <RCCEx_PLL2_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fae:	e00c      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3324      	adds	r3, #36	; 0x24
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 fa34 	bl	8008424 <RCCEx_PLL3_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc0:	e003      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc6:	e000      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fd0:	4b79      	ldr	r3, [pc, #484]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd4:	f023 0207 	bic.w	r2, r3, #7
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fdc:	4976      	ldr	r1, [pc, #472]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	650b      	str	r3, [r1, #80]	; 0x50
 8006fe2:	e001      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
 8006fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d042      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffc:	d02b      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007002:	d825      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007004:	2bc0      	cmp	r3, #192	; 0xc0
 8007006:	d028      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007008:	2bc0      	cmp	r3, #192	; 0xc0
 800700a:	d821      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800700c:	2b80      	cmp	r3, #128	; 0x80
 800700e:	d016      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007010:	2b80      	cmp	r3, #128	; 0x80
 8007012:	d81d      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007018:	2b40      	cmp	r3, #64	; 0x40
 800701a:	d007      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800701c:	e018      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701e:	4b66      	ldr	r3, [pc, #408]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007022:	4a65      	ldr	r2, [pc, #404]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007028:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800702a:	e017      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	2100      	movs	r1, #0
 8007032:	4618      	mov	r0, r3
 8007034:	f001 f944 	bl	80082c0 <RCCEx_PLL2_Config>
 8007038:	4603      	mov	r3, r0
 800703a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800703c:	e00e      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3324      	adds	r3, #36	; 0x24
 8007042:	2100      	movs	r1, #0
 8007044:	4618      	mov	r0, r3
 8007046:	f001 f9ed 	bl	8008424 <RCCEx_PLL3_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800704e:	e005      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
      break;
 8007054:	e002      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800705a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007062:	4b55      	ldr	r3, [pc, #340]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007066:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706e:	4952      	ldr	r1, [pc, #328]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007070:	4313      	orrs	r3, r2
 8007072:	650b      	str	r3, [r1, #80]	; 0x50
 8007074:	e001      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007082:	2b00      	cmp	r3, #0
 8007084:	d049      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800708c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007090:	d030      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007092:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007096:	d82a      	bhi.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007098:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800709c:	d02c      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800709e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070a2:	d824      	bhi.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070a8:	d018      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80070aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ae:	d81e      	bhi.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80070b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070b8:	d007      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80070ba:	e018      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070bc:	4b3e      	ldr	r3, [pc, #248]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	4a3d      	ldr	r2, [pc, #244]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070c8:	e017      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3304      	adds	r3, #4
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 f8f5 	bl	80082c0 <RCCEx_PLL2_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070da:	e00e      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3324      	adds	r3, #36	; 0x24
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f001 f99e 	bl	8008424 <RCCEx_PLL3_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070ec:	e005      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	75fb      	strb	r3, [r7, #23]
      break;
 80070f2:	e002      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80070f4:	bf00      	nop
 80070f6:	e000      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80070f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007100:	4b2d      	ldr	r3, [pc, #180]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007104:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800710e:	492a      	ldr	r1, [pc, #168]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007110:	4313      	orrs	r3, r2
 8007112:	658b      	str	r3, [r1, #88]	; 0x58
 8007114:	e001      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007122:	2b00      	cmp	r3, #0
 8007124:	d04c      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800712c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007130:	d030      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007132:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007136:	d82a      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007138:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800713c:	d02c      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800713e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007142:	d824      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007148:	d018      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800714a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800714e:	d81e      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007158:	d007      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800715a:	e018      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800715c:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	4a15      	ldr	r2, [pc, #84]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007166:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007168:	e017      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3304      	adds	r3, #4
 800716e:	2100      	movs	r1, #0
 8007170:	4618      	mov	r0, r3
 8007172:	f001 f8a5 	bl	80082c0 <RCCEx_PLL2_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800717a:	e00e      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3324      	adds	r3, #36	; 0x24
 8007180:	2100      	movs	r1, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f001 f94e 	bl	8008424 <RCCEx_PLL3_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800718c:	e005      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	75fb      	strb	r3, [r7, #23]
      break;
 8007192:	e002      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007194:	bf00      	nop
 8007196:	e000      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10d      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071ae:	4902      	ldr	r1, [pc, #8]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	658b      	str	r3, [r1, #88]	; 0x58
 80071b4:	e004      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80071b6:	bf00      	nop
 80071b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d032      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d0:	2b30      	cmp	r3, #48	; 0x30
 80071d2:	d01c      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80071d4:	2b30      	cmp	r3, #48	; 0x30
 80071d6:	d817      	bhi.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d00c      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80071dc:	2b20      	cmp	r3, #32
 80071de:	d813      	bhi.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d016      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80071e4:	2b10      	cmp	r3, #16
 80071e6:	d10f      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e8:	4baf      	ldr	r3, [pc, #700]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	4aae      	ldr	r2, [pc, #696]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80071f4:	e00e      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3304      	adds	r3, #4
 80071fa:	2102      	movs	r1, #2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 f85f 	bl	80082c0 <RCCEx_PLL2_Config>
 8007202:	4603      	mov	r3, r0
 8007204:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007206:	e005      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	75fb      	strb	r3, [r7, #23]
      break;
 800720c:	e002      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800720e:	bf00      	nop
 8007210:	e000      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800721a:	4ba3      	ldr	r3, [pc, #652]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800721c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007226:	49a0      	ldr	r1, [pc, #640]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007228:	4313      	orrs	r3, r2
 800722a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800722c:	e001      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d047      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007246:	d030      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800724c:	d82a      	bhi.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800724e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007252:	d02c      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007254:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007258:	d824      	bhi.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800725a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725e:	d018      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007264:	d81e      	bhi.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800726a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726e:	d007      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007270:	e018      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007272:	4b8d      	ldr	r3, [pc, #564]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007276:	4a8c      	ldr	r2, [pc, #560]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800727c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800727e:	e017      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3304      	adds	r3, #4
 8007284:	2100      	movs	r1, #0
 8007286:	4618      	mov	r0, r3
 8007288:	f001 f81a 	bl	80082c0 <RCCEx_PLL2_Config>
 800728c:	4603      	mov	r3, r0
 800728e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007290:	e00e      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3324      	adds	r3, #36	; 0x24
 8007296:	2100      	movs	r1, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f001 f8c3 	bl	8008424 <RCCEx_PLL3_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072a2:	e005      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	75fb      	strb	r3, [r7, #23]
      break;
 80072a8:	e002      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80072aa:	bf00      	nop
 80072ac:	e000      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80072ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d109      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072b6:	4b7c      	ldr	r3, [pc, #496]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c2:	4979      	ldr	r1, [pc, #484]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	650b      	str	r3, [r1, #80]	; 0x50
 80072c8:	e001      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d049      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072e2:	d02e      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80072e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072e8:	d828      	bhi.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80072ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072ee:	d02a      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80072f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072f4:	d822      	bhi.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80072f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072fa:	d026      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80072fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007300:	d81c      	bhi.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007306:	d010      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800730c:	d816      	bhi.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01d      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007316:	d111      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	2101      	movs	r1, #1
 800731e:	4618      	mov	r0, r3
 8007320:	f000 ffce 	bl	80082c0 <RCCEx_PLL2_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007328:	e012      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3324      	adds	r3, #36	; 0x24
 800732e:	2101      	movs	r1, #1
 8007330:	4618      	mov	r0, r3
 8007332:	f001 f877 	bl	8008424 <RCCEx_PLL3_Config>
 8007336:	4603      	mov	r3, r0
 8007338:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800733a:	e009      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
      break;
 8007340:	e006      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007342:	bf00      	nop
 8007344:	e004      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007346:	bf00      	nop
 8007348:	e002      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800734a:	bf00      	nop
 800734c:	e000      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800734e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007356:	4b54      	ldr	r3, [pc, #336]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007362:	4951      	ldr	r1, [pc, #324]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007364:	4313      	orrs	r3, r2
 8007366:	650b      	str	r3, [r1, #80]	; 0x50
 8007368:	e001      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d04b      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007384:	d02e      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800738a:	d828      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800738c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007390:	d02a      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007396:	d822      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007398:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800739c:	d026      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x528>
 800739e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073a2:	d81c      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073a8:	d010      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80073aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ae:	d816      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01d      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80073b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073b8:	d111      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3304      	adds	r3, #4
 80073be:	2101      	movs	r1, #1
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 ff7d 	bl	80082c0 <RCCEx_PLL2_Config>
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073ca:	e012      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3324      	adds	r3, #36	; 0x24
 80073d0:	2101      	movs	r1, #1
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 f826 	bl	8008424 <RCCEx_PLL3_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073dc:	e009      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
      break;
 80073e2:	e006      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80073e4:	bf00      	nop
 80073e6:	e004      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80073e8:	bf00      	nop
 80073ea:	e002      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80073ec:	bf00      	nop
 80073ee:	e000      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80073f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80073f8:	4b2b      	ldr	r3, [pc, #172]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007406:	4928      	ldr	r1, [pc, #160]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007408:	4313      	orrs	r3, r2
 800740a:	658b      	str	r3, [r1, #88]	; 0x58
 800740c:	e001      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d02f      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007426:	d00e      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800742c:	d814      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d015      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007436:	d10f      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007438:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a1a      	ldr	r2, [pc, #104]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800743e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007442:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007444:	e00c      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3304      	adds	r3, #4
 800744a:	2101      	movs	r1, #1
 800744c:	4618      	mov	r0, r3
 800744e:	f000 ff37 	bl	80082c0 <RCCEx_PLL2_Config>
 8007452:	4603      	mov	r3, r0
 8007454:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007456:	e003      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	75fb      	strb	r3, [r7, #23]
      break;
 800745c:	e000      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800745e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d109      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007466:	4b10      	ldr	r3, [pc, #64]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007472:	490d      	ldr	r1, [pc, #52]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007474:	4313      	orrs	r3, r2
 8007476:	650b      	str	r3, [r1, #80]	; 0x50
 8007478:	e001      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d033      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748e:	2b03      	cmp	r3, #3
 8007490:	d81c      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007492:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007498:	080074d3 	.word	0x080074d3
 800749c:	080074ad 	.word	0x080074ad
 80074a0:	080074bb 	.word	0x080074bb
 80074a4:	080074d3 	.word	0x080074d3
 80074a8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074ac:	4bb8      	ldr	r3, [pc, #736]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	4ab7      	ldr	r2, [pc, #732]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074b8:	e00c      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3304      	adds	r3, #4
 80074be:	2102      	movs	r1, #2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fefd 	bl	80082c0 <RCCEx_PLL2_Config>
 80074c6:	4603      	mov	r3, r0
 80074c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074ca:	e003      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	75fb      	strb	r3, [r7, #23]
      break;
 80074d0:	e000      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80074d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d109      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074da:	4bad      	ldr	r3, [pc, #692]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074de:	f023 0203 	bic.w	r2, r3, #3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e6:	49aa      	ldr	r1, [pc, #680]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074ec:	e001      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 8086 	beq.w	800760c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007500:	4ba4      	ldr	r3, [pc, #656]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4aa3      	ldr	r2, [pc, #652]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800750a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800750c:	f7fa fdac 	bl	8002068 <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007512:	e009      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007514:	f7fa fda8 	bl	8002068 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b64      	cmp	r3, #100	; 0x64
 8007520:	d902      	bls.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	75fb      	strb	r3, [r7, #23]
        break;
 8007526:	e005      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007528:	4b9a      	ldr	r3, [pc, #616]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0ef      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d166      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800753a:	4b95      	ldr	r3, [pc, #596]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800753c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007544:	4053      	eors	r3, r2
 8007546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800754a:	2b00      	cmp	r3, #0
 800754c:	d013      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800754e:	4b90      	ldr	r3, [pc, #576]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007556:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007558:	4b8d      	ldr	r3, [pc, #564]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800755a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755c:	4a8c      	ldr	r2, [pc, #560]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800755e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007562:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007564:	4b8a      	ldr	r3, [pc, #552]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007568:	4a89      	ldr	r2, [pc, #548]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800756a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800756e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007570:	4a87      	ldr	r2, [pc, #540]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800757c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007580:	d115      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007582:	f7fa fd71 	bl	8002068 <HAL_GetTick>
 8007586:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007588:	e00b      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800758a:	f7fa fd6d 	bl	8002068 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	f241 3288 	movw	r2, #5000	; 0x1388
 8007598:	4293      	cmp	r3, r2
 800759a:	d902      	bls.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	75fb      	strb	r3, [r7, #23]
            break;
 80075a0:	e005      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075a2:	4b7b      	ldr	r3, [pc, #492]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0ed      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d126      	bne.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c2:	d10d      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80075c4:	4b72      	ldr	r3, [pc, #456]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075d2:	0919      	lsrs	r1, r3, #4
 80075d4:	4b70      	ldr	r3, [pc, #448]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80075d6:	400b      	ands	r3, r1
 80075d8:	496d      	ldr	r1, [pc, #436]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	610b      	str	r3, [r1, #16]
 80075de:	e005      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x728>
 80075e0:	4b6b      	ldr	r3, [pc, #428]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	4a6a      	ldr	r2, [pc, #424]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80075ea:	6113      	str	r3, [r2, #16]
 80075ec:	4b68      	ldr	r3, [pc, #416]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075fa:	4965      	ldr	r1, [pc, #404]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	670b      	str	r3, [r1, #112]	; 0x70
 8007600:	e004      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	75bb      	strb	r3, [r7, #22]
 8007606:	e001      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d07e      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800761c:	2b28      	cmp	r3, #40	; 0x28
 800761e:	d867      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007620:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	080076f7 	.word	0x080076f7
 800762c:	080076f1 	.word	0x080076f1
 8007630:	080076f1 	.word	0x080076f1
 8007634:	080076f1 	.word	0x080076f1
 8007638:	080076f1 	.word	0x080076f1
 800763c:	080076f1 	.word	0x080076f1
 8007640:	080076f1 	.word	0x080076f1
 8007644:	080076f1 	.word	0x080076f1
 8007648:	080076cd 	.word	0x080076cd
 800764c:	080076f1 	.word	0x080076f1
 8007650:	080076f1 	.word	0x080076f1
 8007654:	080076f1 	.word	0x080076f1
 8007658:	080076f1 	.word	0x080076f1
 800765c:	080076f1 	.word	0x080076f1
 8007660:	080076f1 	.word	0x080076f1
 8007664:	080076f1 	.word	0x080076f1
 8007668:	080076df 	.word	0x080076df
 800766c:	080076f1 	.word	0x080076f1
 8007670:	080076f1 	.word	0x080076f1
 8007674:	080076f1 	.word	0x080076f1
 8007678:	080076f1 	.word	0x080076f1
 800767c:	080076f1 	.word	0x080076f1
 8007680:	080076f1 	.word	0x080076f1
 8007684:	080076f1 	.word	0x080076f1
 8007688:	080076f7 	.word	0x080076f7
 800768c:	080076f1 	.word	0x080076f1
 8007690:	080076f1 	.word	0x080076f1
 8007694:	080076f1 	.word	0x080076f1
 8007698:	080076f1 	.word	0x080076f1
 800769c:	080076f1 	.word	0x080076f1
 80076a0:	080076f1 	.word	0x080076f1
 80076a4:	080076f1 	.word	0x080076f1
 80076a8:	080076f7 	.word	0x080076f7
 80076ac:	080076f1 	.word	0x080076f1
 80076b0:	080076f1 	.word	0x080076f1
 80076b4:	080076f1 	.word	0x080076f1
 80076b8:	080076f1 	.word	0x080076f1
 80076bc:	080076f1 	.word	0x080076f1
 80076c0:	080076f1 	.word	0x080076f1
 80076c4:	080076f1 	.word	0x080076f1
 80076c8:	080076f7 	.word	0x080076f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	2101      	movs	r1, #1
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fdf4 	bl	80082c0 <RCCEx_PLL2_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076dc:	e00c      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3324      	adds	r3, #36	; 0x24
 80076e2:	2101      	movs	r1, #1
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fe9d 	bl	8008424 <RCCEx_PLL3_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076ee:	e003      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
      break;
 80076f4:	e000      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80076f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076fe:	4b24      	ldr	r3, [pc, #144]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007702:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800770a:	4921      	ldr	r1, [pc, #132]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800770c:	4313      	orrs	r3, r2
 800770e:	654b      	str	r3, [r1, #84]	; 0x54
 8007710:	e001      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d03e      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007726:	2b05      	cmp	r3, #5
 8007728:	d820      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007773 	.word	0x08007773
 8007734:	08007749 	.word	0x08007749
 8007738:	0800775b 	.word	0x0800775b
 800773c:	08007773 	.word	0x08007773
 8007740:	08007773 	.word	0x08007773
 8007744:	08007773 	.word	0x08007773
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	2101      	movs	r1, #1
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fdb6 	bl	80082c0 <RCCEx_PLL2_Config>
 8007754:	4603      	mov	r3, r0
 8007756:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007758:	e00c      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3324      	adds	r3, #36	; 0x24
 800775e:	2101      	movs	r1, #1
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fe5f 	bl	8008424 <RCCEx_PLL3_Config>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800776a:	e003      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	75fb      	strb	r3, [r7, #23]
      break;
 8007770:	e000      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007774:	7dfb      	ldrb	r3, [r7, #23]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d110      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	f023 0207 	bic.w	r2, r3, #7
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007786:	4902      	ldr	r1, [pc, #8]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007788:	4313      	orrs	r3, r2
 800778a:	654b      	str	r3, [r1, #84]	; 0x54
 800778c:	e008      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800778e:	bf00      	nop
 8007790:	58024400 	.word	0x58024400
 8007794:	58024800 	.word	0x58024800
 8007798:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d039      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	d820      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	080077ff 	.word	0x080077ff
 80077c0:	080077d5 	.word	0x080077d5
 80077c4:	080077e7 	.word	0x080077e7
 80077c8:	080077ff 	.word	0x080077ff
 80077cc:	080077ff 	.word	0x080077ff
 80077d0:	080077ff 	.word	0x080077ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3304      	adds	r3, #4
 80077d8:	2101      	movs	r1, #1
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fd70 	bl	80082c0 <RCCEx_PLL2_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077e4:	e00c      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3324      	adds	r3, #36	; 0x24
 80077ea:	2101      	movs	r1, #1
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fe19 	bl	8008424 <RCCEx_PLL3_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077f6:	e003      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	75fb      	strb	r3, [r7, #23]
      break;
 80077fc:	e000      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80077fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10a      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007806:	4bb7      	ldr	r3, [pc, #732]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	f023 0207 	bic.w	r2, r3, #7
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007814:	49b3      	ldr	r1, [pc, #716]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007816:	4313      	orrs	r3, r2
 8007818:	658b      	str	r3, [r1, #88]	; 0x58
 800781a:	e001      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d04b      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007836:	d02e      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800783c:	d828      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800783e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007842:	d02a      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007848:	d822      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800784a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800784e:	d026      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007850:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007854:	d81c      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800785a:	d010      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800785c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007860:	d816      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01d      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800786a:	d111      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	2100      	movs	r1, #0
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fd24 	bl	80082c0 <RCCEx_PLL2_Config>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800787c:	e012      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3324      	adds	r3, #36	; 0x24
 8007882:	2102      	movs	r1, #2
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fdcd 	bl	8008424 <RCCEx_PLL3_Config>
 800788a:	4603      	mov	r3, r0
 800788c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800788e:	e009      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	75fb      	strb	r3, [r7, #23]
      break;
 8007894:	e006      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007896:	bf00      	nop
 8007898:	e004      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800789a:	bf00      	nop
 800789c:	e002      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078aa:	4b8e      	ldr	r3, [pc, #568]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b8:	498a      	ldr	r1, [pc, #552]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	654b      	str	r3, [r1, #84]	; 0x54
 80078be:	e001      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d04b      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078da:	d02e      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80078dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078e0:	d828      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80078e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e6:	d02a      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80078e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ec:	d822      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80078ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078f2:	d026      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80078f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078f8:	d81c      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80078fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078fe:	d010      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007904:	d816      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01d      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800790a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800790e:	d111      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3304      	adds	r3, #4
 8007914:	2100      	movs	r1, #0
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fcd2 	bl	80082c0 <RCCEx_PLL2_Config>
 800791c:	4603      	mov	r3, r0
 800791e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007920:	e012      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3324      	adds	r3, #36	; 0x24
 8007926:	2102      	movs	r1, #2
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fd7b 	bl	8008424 <RCCEx_PLL3_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007932:	e009      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	75fb      	strb	r3, [r7, #23]
      break;
 8007938:	e006      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800793a:	bf00      	nop
 800793c:	e004      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800793e:	bf00      	nop
 8007940:	e002      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007942:	bf00      	nop
 8007944:	e000      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800794e:	4b65      	ldr	r3, [pc, #404]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007952:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800795c:	4961      	ldr	r1, [pc, #388]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800795e:	4313      	orrs	r3, r2
 8007960:	658b      	str	r3, [r1, #88]	; 0x58
 8007962:	e001      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007970:	2b00      	cmp	r3, #0
 8007972:	d04b      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800797a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800797e:	d02e      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007980:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007984:	d828      	bhi.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800798a:	d02a      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800798c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007990:	d822      	bhi.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007992:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007996:	d026      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007998:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800799c:	d81c      	bhi.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800799e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079a2:	d010      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80079a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079a8:	d816      	bhi.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d01d      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80079ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b2:	d111      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3304      	adds	r3, #4
 80079b8:	2100      	movs	r1, #0
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fc80 	bl	80082c0 <RCCEx_PLL2_Config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079c4:	e012      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3324      	adds	r3, #36	; 0x24
 80079ca:	2102      	movs	r1, #2
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 fd29 	bl	8008424 <RCCEx_PLL3_Config>
 80079d2:	4603      	mov	r3, r0
 80079d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079d6:	e009      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	75fb      	strb	r3, [r7, #23]
      break;
 80079dc:	e006      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079de:	bf00      	nop
 80079e0:	e004      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079e2:	bf00      	nop
 80079e4:	e002      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079e6:	bf00      	nop
 80079e8:	e000      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80079f2:	4b3c      	ldr	r3, [pc, #240]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a00:	4938      	ldr	r1, [pc, #224]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	658b      	str	r3, [r1, #88]	; 0x58
 8007a06:	e001      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01a      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a22:	d10a      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3324      	adds	r3, #36	; 0x24
 8007a28:	2102      	movs	r1, #2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fcfa 	bl	8008424 <RCCEx_PLL3_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a3a:	4b2a      	ldr	r3, [pc, #168]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a48:	4926      	ldr	r1, [pc, #152]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d01a      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a64:	d10a      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3324      	adds	r3, #36	; 0x24
 8007a6a:	2102      	movs	r1, #2
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fcd9 	bl	8008424 <RCCEx_PLL3_Config>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a7c:	4b19      	ldr	r3, [pc, #100]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a8a:	4916      	ldr	r1, [pc, #88]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d036      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aa6:	d01f      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aac:	d817      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab6:	d009      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007ab8:	e011      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3304      	adds	r3, #4
 8007abe:	2100      	movs	r1, #0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 fbfd 	bl	80082c0 <RCCEx_PLL2_Config>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007aca:	e00e      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3324      	adds	r3, #36	; 0x24
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 fca6 	bl	8008424 <RCCEx_PLL3_Config>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007adc:	e005      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae2:	e002      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007ae4:	58024400 	.word	0x58024400
      break;
 8007ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007af0:	4b93      	ldr	r3, [pc, #588]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007afe:	4990      	ldr	r1, [pc, #576]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	658b      	str	r3, [r1, #88]	; 0x58
 8007b04:	e001      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d033      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b20:	d01c      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007b22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b26:	d816      	bhi.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b2c:	d003      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b32:	d007      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007b34:	e00f      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b36:	4b82      	ldr	r3, [pc, #520]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	4a81      	ldr	r2, [pc, #516]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b42:	e00c      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3324      	adds	r3, #36	; 0x24
 8007b48:	2101      	movs	r1, #1
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fc6a 	bl	8008424 <RCCEx_PLL3_Config>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b54:	e003      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5a:	e000      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b64:	4b76      	ldr	r3, [pc, #472]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b72:	4973      	ldr	r1, [pc, #460]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	654b      	str	r3, [r1, #84]	; 0x54
 8007b78:	e001      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d029      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b96:	d007      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007b98:	e00f      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b9a:	4b69      	ldr	r3, [pc, #420]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	4a68      	ldr	r2, [pc, #416]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ba6:	e00b      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3304      	adds	r3, #4
 8007bac:	2102      	movs	r1, #2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fb86 	bl	80082c0 <RCCEx_PLL2_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bb8:	e002      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bc6:	4b5e      	ldr	r3, [pc, #376]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd2:	495b      	ldr	r1, [pc, #364]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007bd8:	e001      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3324      	adds	r3, #36	; 0x24
 8007bee:	2102      	movs	r1, #2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fc17 	bl	8008424 <RCCEx_PLL3_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d030      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c14:	d017      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c1a:	d811      	bhi.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c20:	d013      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c26:	d80b      	bhi.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d010      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c30:	d106      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c32:	4b43      	ldr	r3, [pc, #268]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c36:	4a42      	ldr	r2, [pc, #264]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c3e:	e007      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	75fb      	strb	r3, [r7, #23]
      break;
 8007c44:	e004      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c46:	bf00      	nop
 8007c48:	e002      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c4a:	bf00      	nop
 8007c4c:	e000      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c56:	4b3a      	ldr	r3, [pc, #232]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c62:	4937      	ldr	r1, [pc, #220]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	654b      	str	r3, [r1, #84]	; 0x54
 8007c68:	e001      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d008      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c7a:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c86:	492e      	ldr	r1, [pc, #184]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d009      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007c98:	4b29      	ldr	r3, [pc, #164]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ca6:	4926      	ldr	r1, [pc, #152]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d008      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cb8:	4b21      	ldr	r3, [pc, #132]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cbc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cc4:	491e      	ldr	r1, [pc, #120]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00d      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cd6:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	4a19      	ldr	r2, [pc, #100]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ce0:	6113      	str	r3, [r2, #16]
 8007ce2:	4b17      	ldr	r3, [pc, #92]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007cec:	4914      	ldr	r1, [pc, #80]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da08      	bge.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007cfa:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d06:	490e      	ldr	r1, [pc, #56]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d18:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d26:	4906      	ldr	r1, [pc, #24]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007d2c:	7dbb      	ldrb	r3, [r7, #22]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	e000      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	58024400 	.word	0x58024400

08007d44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d48:	f7ff f860 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	091b      	lsrs	r3, r3, #4
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	4904      	ldr	r1, [pc, #16]	; (8007d6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d5a:	5ccb      	ldrb	r3, [r1, r3]
 8007d5c:	f003 031f 	and.w	r3, r3, #31
 8007d60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	0800d220 	.word	0x0800d220

08007d70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b089      	sub	sp, #36	; 0x24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d78:	4ba1      	ldr	r3, [pc, #644]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d82:	4b9f      	ldr	r3, [pc, #636]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	0b1b      	lsrs	r3, r3, #12
 8007d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007d8e:	4b9c      	ldr	r3, [pc, #624]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	091b      	lsrs	r3, r3, #4
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007d9a:	4b99      	ldr	r3, [pc, #612]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9e:	08db      	lsrs	r3, r3, #3
 8007da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	fb02 f303 	mul.w	r3, r2, r3
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 8111 	beq.w	8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	f000 8083 	beq.w	8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	f200 80a1 	bhi.w	8007f10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d056      	beq.n	8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007dda:	e099      	b.n	8007f10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ddc:	4b88      	ldr	r3, [pc, #544]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d02d      	beq.n	8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007de8:	4b85      	ldr	r3, [pc, #532]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	08db      	lsrs	r3, r3, #3
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	4a84      	ldr	r2, [pc, #528]	; (8008004 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007df4:	fa22 f303 	lsr.w	r3, r2, r3
 8007df8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e12:	4b7b      	ldr	r3, [pc, #492]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1a:	ee07 3a90 	vmov	s15, r3
 8007e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e42:	e087      	b.n	8007f54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800800c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e56:	4b6a      	ldr	r3, [pc, #424]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e86:	e065      	b.n	8007f54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008010 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9a:	4b59      	ldr	r3, [pc, #356]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eca:	e043      	b.n	8007f54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ede:	4b48      	ldr	r3, [pc, #288]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f0e:	e021      	b.n	8007f54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008010 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f22:	4b37      	ldr	r3, [pc, #220]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f54:	4b2a      	ldr	r3, [pc, #168]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	0a5b      	lsrs	r3, r3, #9
 8007f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f7a:	ee17 2a90 	vmov	r2, s15
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f82:	4b1f      	ldr	r3, [pc, #124]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f86:	0c1b      	lsrs	r3, r3, #16
 8007f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f8c:	ee07 3a90 	vmov	s15, r3
 8007f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fa8:	ee17 2a90 	vmov	r2, s15
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007fb0:	4b13      	ldr	r3, [pc, #76]	; (8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	0e1b      	lsrs	r3, r3, #24
 8007fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd6:	ee17 2a90 	vmov	r2, s15
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007fde:	e008      	b.n	8007ff2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	609a      	str	r2, [r3, #8]
}
 8007ff2:	bf00      	nop
 8007ff4:	3724      	adds	r7, #36	; 0x24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	58024400 	.word	0x58024400
 8008004:	03d09000 	.word	0x03d09000
 8008008:	46000000 	.word	0x46000000
 800800c:	4c742400 	.word	0x4c742400
 8008010:	4a742400 	.word	0x4a742400
 8008014:	4af42400 	.word	0x4af42400

08008018 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008018:	b480      	push	{r7}
 800801a:	b089      	sub	sp, #36	; 0x24
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008020:	4ba1      	ldr	r3, [pc, #644]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008024:	f003 0303 	and.w	r3, r3, #3
 8008028:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800802a:	4b9f      	ldr	r3, [pc, #636]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	0d1b      	lsrs	r3, r3, #20
 8008030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008034:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008036:	4b9c      	ldr	r3, [pc, #624]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803a:	0a1b      	lsrs	r3, r3, #8
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008042:	4b99      	ldr	r3, [pc, #612]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008046:	08db      	lsrs	r3, r3, #3
 8008048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	fb02 f303 	mul.w	r3, r2, r3
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 8111 	beq.w	8008288 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	2b02      	cmp	r3, #2
 800806a:	f000 8083 	beq.w	8008174 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	2b02      	cmp	r3, #2
 8008072:	f200 80a1 	bhi.w	80081b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d056      	beq.n	8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008082:	e099      	b.n	80081b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008084:	4b88      	ldr	r3, [pc, #544]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	2b00      	cmp	r3, #0
 800808e:	d02d      	beq.n	80080ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008090:	4b85      	ldr	r3, [pc, #532]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	08db      	lsrs	r3, r3, #3
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	4a84      	ldr	r2, [pc, #528]	; (80082ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800809c:	fa22 f303 	lsr.w	r3, r2, r3
 80080a0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ba:	4b7b      	ldr	r3, [pc, #492]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080ea:	e087      	b.n	80081fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80080fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080fe:	4b6a      	ldr	r3, [pc, #424]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008106:	ee07 3a90 	vmov	s15, r3
 800810a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008112:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800811e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800812e:	e065      	b.n	80081fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800813e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008142:	4b59      	ldr	r3, [pc, #356]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008152:	ed97 6a03 	vldr	s12, [r7, #12]
 8008156:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800815a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800815e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008172:	e043      	b.n	80081fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008186:	4b48      	ldr	r3, [pc, #288]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818e:	ee07 3a90 	vmov	s15, r3
 8008192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008196:	ed97 6a03 	vldr	s12, [r7, #12]
 800819a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800819e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081b6:	e021      	b.n	80081fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ca:	4b37      	ldr	r3, [pc, #220]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081da:	ed97 6a03 	vldr	s12, [r7, #12]
 80081de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80081fc:	4b2a      	ldr	r3, [pc, #168]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	0a5b      	lsrs	r3, r3, #9
 8008202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008216:	edd7 6a07 	vldr	s13, [r7, #28]
 800821a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800821e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008222:	ee17 2a90 	vmov	r2, s15
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800822a:	4b1f      	ldr	r3, [pc, #124]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	0c1b      	lsrs	r3, r3, #16
 8008230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008234:	ee07 3a90 	vmov	s15, r3
 8008238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008244:	edd7 6a07 	vldr	s13, [r7, #28]
 8008248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800824c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008250:	ee17 2a90 	vmov	r2, s15
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008258:	4b13      	ldr	r3, [pc, #76]	; (80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	0e1b      	lsrs	r3, r3, #24
 800825e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800826e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008272:	edd7 6a07 	vldr	s13, [r7, #28]
 8008276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800827a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800827e:	ee17 2a90 	vmov	r2, s15
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008286:	e008      	b.n	800829a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	609a      	str	r2, [r3, #8]
}
 800829a:	bf00      	nop
 800829c:	3724      	adds	r7, #36	; 0x24
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	58024400 	.word	0x58024400
 80082ac:	03d09000 	.word	0x03d09000
 80082b0:	46000000 	.word	0x46000000
 80082b4:	4c742400 	.word	0x4c742400
 80082b8:	4a742400 	.word	0x4a742400
 80082bc:	4af42400 	.word	0x4af42400

080082c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082ce:	4b53      	ldr	r3, [pc, #332]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d101      	bne.n	80082de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e099      	b.n	8008412 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082de:	4b4f      	ldr	r3, [pc, #316]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a4e      	ldr	r2, [pc, #312]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80082e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ea:	f7f9 febd 	bl	8002068 <HAL_GetTick>
 80082ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082f0:	e008      	b.n	8008304 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80082f2:	f7f9 feb9 	bl	8002068 <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d901      	bls.n	8008304 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e086      	b.n	8008412 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008304:	4b45      	ldr	r3, [pc, #276]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1f0      	bne.n	80082f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008310:	4b42      	ldr	r3, [pc, #264]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	031b      	lsls	r3, r3, #12
 800831e:	493f      	ldr	r1, [pc, #252]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 8008320:	4313      	orrs	r3, r2
 8008322:	628b      	str	r3, [r1, #40]	; 0x28
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	3b01      	subs	r3, #1
 800832a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	3b01      	subs	r3, #1
 8008334:	025b      	lsls	r3, r3, #9
 8008336:	b29b      	uxth	r3, r3
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	3b01      	subs	r3, #1
 8008340:	041b      	lsls	r3, r3, #16
 8008342:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	3b01      	subs	r3, #1
 800834e:	061b      	lsls	r3, r3, #24
 8008350:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008354:	4931      	ldr	r1, [pc, #196]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 8008356:	4313      	orrs	r3, r2
 8008358:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800835a:	4b30      	ldr	r3, [pc, #192]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 800835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	492d      	ldr	r1, [pc, #180]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 8008368:	4313      	orrs	r3, r2
 800836a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800836c:	4b2b      	ldr	r3, [pc, #172]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	f023 0220 	bic.w	r2, r3, #32
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	4928      	ldr	r1, [pc, #160]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 800837a:	4313      	orrs	r3, r2
 800837c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800837e:	4b27      	ldr	r3, [pc, #156]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	4a26      	ldr	r2, [pc, #152]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 8008384:	f023 0310 	bic.w	r3, r3, #16
 8008388:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800838a:	4b24      	ldr	r3, [pc, #144]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 800838c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800838e:	4b24      	ldr	r3, [pc, #144]	; (8008420 <RCCEx_PLL2_Config+0x160>)
 8008390:	4013      	ands	r3, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	69d2      	ldr	r2, [r2, #28]
 8008396:	00d2      	lsls	r2, r2, #3
 8008398:	4920      	ldr	r1, [pc, #128]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 800839a:	4313      	orrs	r3, r2
 800839c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800839e:	4b1f      	ldr	r3, [pc, #124]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	4a1e      	ldr	r2, [pc, #120]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80083a4:	f043 0310 	orr.w	r3, r3, #16
 80083a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d106      	bne.n	80083be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083b0:	4b1a      	ldr	r3, [pc, #104]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	4a19      	ldr	r2, [pc, #100]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80083b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083bc:	e00f      	b.n	80083de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d106      	bne.n	80083d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083c4:	4b15      	ldr	r3, [pc, #84]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	4a14      	ldr	r2, [pc, #80]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80083ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083d0:	e005      	b.n	80083de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083d2:	4b12      	ldr	r3, [pc, #72]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	4a11      	ldr	r2, [pc, #68]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80083d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083de:	4b0f      	ldr	r3, [pc, #60]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a0e      	ldr	r2, [pc, #56]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 80083e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ea:	f7f9 fe3d 	bl	8002068 <HAL_GetTick>
 80083ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083f0:	e008      	b.n	8008404 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80083f2:	f7f9 fe39 	bl	8002068 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e006      	b.n	8008412 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008404:	4b05      	ldr	r3, [pc, #20]	; (800841c <RCCEx_PLL2_Config+0x15c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0f0      	beq.n	80083f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	58024400 	.word	0x58024400
 8008420:	ffff0007 	.word	0xffff0007

08008424 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008432:	4b53      	ldr	r3, [pc, #332]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	2b03      	cmp	r3, #3
 800843c:	d101      	bne.n	8008442 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e099      	b.n	8008576 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008442:	4b4f      	ldr	r3, [pc, #316]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a4e      	ldr	r2, [pc, #312]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800844c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800844e:	f7f9 fe0b 	bl	8002068 <HAL_GetTick>
 8008452:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008454:	e008      	b.n	8008468 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008456:	f7f9 fe07 	bl	8002068 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	d901      	bls.n	8008468 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e086      	b.n	8008576 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008468:	4b45      	ldr	r3, [pc, #276]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f0      	bne.n	8008456 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008474:	4b42      	ldr	r3, [pc, #264]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008478:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	051b      	lsls	r3, r3, #20
 8008482:	493f      	ldr	r1, [pc, #252]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008484:	4313      	orrs	r3, r2
 8008486:	628b      	str	r3, [r1, #40]	; 0x28
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	3b01      	subs	r3, #1
 800848e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	3b01      	subs	r3, #1
 8008498:	025b      	lsls	r3, r3, #9
 800849a:	b29b      	uxth	r3, r3
 800849c:	431a      	orrs	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	041b      	lsls	r3, r3, #16
 80084a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	061b      	lsls	r3, r3, #24
 80084b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084b8:	4931      	ldr	r1, [pc, #196]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084be:	4b30      	ldr	r3, [pc, #192]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 80084c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	492d      	ldr	r1, [pc, #180]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084d0:	4b2b      	ldr	r3, [pc, #172]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	4928      	ldr	r1, [pc, #160]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084e2:	4b27      	ldr	r3, [pc, #156]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 80084e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e6:	4a26      	ldr	r2, [pc, #152]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 80084e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80084ee:	4b24      	ldr	r3, [pc, #144]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 80084f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084f2:	4b24      	ldr	r3, [pc, #144]	; (8008584 <RCCEx_PLL3_Config+0x160>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	69d2      	ldr	r2, [r2, #28]
 80084fa:	00d2      	lsls	r2, r2, #3
 80084fc:	4920      	ldr	r1, [pc, #128]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008502:	4b1f      	ldr	r3, [pc, #124]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008506:	4a1e      	ldr	r2, [pc, #120]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800850c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d106      	bne.n	8008522 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008514:	4b1a      	ldr	r3, [pc, #104]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	4a19      	ldr	r2, [pc, #100]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 800851a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800851e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008520:	e00f      	b.n	8008542 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d106      	bne.n	8008536 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008528:	4b15      	ldr	r3, [pc, #84]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	4a14      	ldr	r2, [pc, #80]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 800852e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008532:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008534:	e005      	b.n	8008542 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008536:	4b12      	ldr	r3, [pc, #72]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853a:	4a11      	ldr	r2, [pc, #68]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 800853c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008540:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a0e      	ldr	r2, [pc, #56]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 8008548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800854c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800854e:	f7f9 fd8b 	bl	8002068 <HAL_GetTick>
 8008552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008554:	e008      	b.n	8008568 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008556:	f7f9 fd87 	bl	8002068 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e006      	b.n	8008576 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008568:	4b05      	ldr	r3, [pc, #20]	; (8008580 <RCCEx_PLL3_Config+0x15c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0f0      	beq.n	8008556 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	58024400 	.word	0x58024400
 8008584:	ffff0007 	.word	0xffff0007

08008588 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d067      	beq.n	800866a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7f9 f958 	bl	8001864 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	22ca      	movs	r2, #202	; 0xca
 80085c2:	625a      	str	r2, [r3, #36]	; 0x24
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2253      	movs	r2, #83	; 0x53
 80085ca:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fbd1 	bl	8008d74 <RTC_EnterInitMode>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d13b      	bne.n	8008654 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6899      	ldr	r1, [r3, #8]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	4b23      	ldr	r3, [pc, #140]	; (8008674 <HAL_RTC_Init+0xec>)
 80085e8:	400b      	ands	r3, r1
 80085ea:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6899      	ldr	r1, [r3, #8]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	431a      	orrs	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	0419      	lsls	r1, r3, #16
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fbd9 	bl	8008dd4 <RTC_ExitInitMode>
 8008622:	4603      	mov	r3, r0
 8008624:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d113      	bne.n	8008654 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0203 	bic.w	r2, r2, #3
 800863a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69da      	ldr	r2, [r3, #28]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	431a      	orrs	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	430a      	orrs	r2, r1
 8008652:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	22ff      	movs	r2, #255	; 0xff
 800865a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d103      	bne.n	800866a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	ff8fffbf 	.word	0xff8fffbf

08008678 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008678:	b590      	push	{r4, r7, lr}
 800867a:	b087      	sub	sp, #28
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f893 3020 	ldrb.w	r3, [r3, #32]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_RTC_SetTime+0x1a>
 800868e:	2302      	movs	r3, #2
 8008690:	e089      	b.n	80087a6 <HAL_RTC_SetTime+0x12e>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2202      	movs	r2, #2
 800869e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	22ca      	movs	r2, #202	; 0xca
 80086a8:	625a      	str	r2, [r3, #36]	; 0x24
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2253      	movs	r2, #83	; 0x53
 80086b0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fb5e 	bl	8008d74 <RTC_EnterInitMode>
 80086b8:	4603      	mov	r3, r0
 80086ba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80086bc:	7cfb      	ldrb	r3, [r7, #19]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d161      	bne.n	8008786 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d126      	bne.n	8008716 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d102      	bne.n	80086dc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2200      	movs	r2, #0
 80086da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fbb5 	bl	8008e50 <RTC_ByteToBcd2>
 80086e6:	4603      	mov	r3, r0
 80086e8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fbae 	bl	8008e50 <RTC_ByteToBcd2>
 80086f4:	4603      	mov	r3, r0
 80086f6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80086f8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	789b      	ldrb	r3, [r3, #2]
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 fba6 	bl	8008e50 <RTC_ByteToBcd2>
 8008704:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008706:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	78db      	ldrb	r3, [r3, #3]
 800870e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008710:	4313      	orrs	r3, r2
 8008712:	617b      	str	r3, [r7, #20]
 8008714:	e018      	b.n	8008748 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	d102      	bne.n	800872a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2200      	movs	r2, #0
 8008728:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	785b      	ldrb	r3, [r3, #1]
 8008734:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008736:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800873c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	78db      	ldrb	r3, [r3, #3]
 8008742:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	6979      	ldr	r1, [r7, #20]
 800874e:	4b18      	ldr	r3, [pc, #96]	; (80087b0 <HAL_RTC_SetTime+0x138>)
 8008750:	400b      	ands	r3, r1
 8008752:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008762:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6899      	ldr	r1, [r3, #8]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	68da      	ldr	r2, [r3, #12]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	431a      	orrs	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fb29 	bl	8008dd4 <RTC_ExitInitMode>
 8008782:	4603      	mov	r3, r0
 8008784:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	22ff      	movs	r2, #255	; 0xff
 800878c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800878e:	7cfb      	ldrb	r3, [r7, #19]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80087a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	371c      	adds	r7, #28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd90      	pop	{r4, r7, pc}
 80087ae:	bf00      	nop
 80087b0:	007f7f7f 	.word	0x007f7f7f

080087b4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	4b22      	ldr	r3, [pc, #136]	; (8008868 <HAL_RTC_GetTime+0xb4>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	0c1b      	lsrs	r3, r3, #16
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	0a1b      	lsrs	r3, r3, #8
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800880c:	b2da      	uxtb	r2, r3
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	0d9b      	lsrs	r3, r3, #22
 8008816:	b2db      	uxtb	r3, r3
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	b2da      	uxtb	r2, r3
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d11a      	bne.n	800885e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f000 fb2f 	bl	8008e90 <RTC_Bcd2ToByte>
 8008832:	4603      	mov	r3, r0
 8008834:	461a      	mov	r2, r3
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fb26 	bl	8008e90 <RTC_Bcd2ToByte>
 8008844:	4603      	mov	r3, r0
 8008846:	461a      	mov	r2, r3
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	789b      	ldrb	r3, [r3, #2]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fb1d 	bl	8008e90 <RTC_Bcd2ToByte>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	007f7f7f 	.word	0x007f7f7f

0800886c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_RTC_SetDate+0x1a>
 8008882:	2302      	movs	r3, #2
 8008884:	e073      	b.n	800896e <HAL_RTC_SetDate+0x102>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2202      	movs	r2, #2
 8008892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10e      	bne.n	80088ba <HAL_RTC_SetDate+0x4e>
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d008      	beq.n	80088ba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	f023 0310 	bic.w	r3, r3, #16
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	330a      	adds	r3, #10
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d11c      	bne.n	80088fa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	78db      	ldrb	r3, [r3, #3]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 fac3 	bl	8008e50 <RTC_ByteToBcd2>
 80088ca:	4603      	mov	r3, r0
 80088cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	785b      	ldrb	r3, [r3, #1]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fabc 	bl	8008e50 <RTC_ByteToBcd2>
 80088d8:	4603      	mov	r3, r0
 80088da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	789b      	ldrb	r3, [r3, #2]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fab4 	bl	8008e50 <RTC_ByteToBcd2>
 80088e8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80088ea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088f4:	4313      	orrs	r3, r2
 80088f6:	617b      	str	r3, [r7, #20]
 80088f8:	e00e      	b.n	8008918 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	78db      	ldrb	r3, [r3, #3]
 80088fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	785b      	ldrb	r3, [r3, #1]
 8008904:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008906:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800890c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	22ca      	movs	r2, #202	; 0xca
 800891e:	625a      	str	r2, [r3, #36]	; 0x24
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2253      	movs	r2, #83	; 0x53
 8008926:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 fa23 	bl	8008d74 <RTC_EnterInitMode>
 800892e:	4603      	mov	r3, r0
 8008930:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008932:	7cfb      	ldrb	r3, [r7, #19]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10a      	bne.n	800894e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	6979      	ldr	r1, [r7, #20]
 800893e:	4b0e      	ldr	r3, [pc, #56]	; (8008978 <HAL_RTC_SetDate+0x10c>)
 8008940:	400b      	ands	r3, r1
 8008942:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 fa45 	bl	8008dd4 <RTC_ExitInitMode>
 800894a:	4603      	mov	r3, r0
 800894c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	22ff      	movs	r2, #255	; 0xff
 8008954:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008956:	7cfb      	ldrb	r3, [r7, #19]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d103      	bne.n	8008964 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800896c:	7cfb      	ldrb	r3, [r7, #19]


}
 800896e:	4618      	mov	r0, r3
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	bd90      	pop	{r4, r7, pc}
 8008976:	bf00      	nop
 8008978:	00ffff3f 	.word	0x00ffff3f

0800897c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	4b21      	ldr	r3, [pc, #132]	; (8008a14 <HAL_RTC_GetDate+0x98>)
 8008990:	4013      	ands	r3, r2
 8008992:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	0c1b      	lsrs	r3, r3, #16
 8008998:	b2da      	uxtb	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	0a1b      	lsrs	r3, r3, #8
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 031f 	and.w	r3, r3, #31
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	0b5b      	lsrs	r3, r3, #13
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d11a      	bne.n	8008a08 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	78db      	ldrb	r3, [r3, #3]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fa5a 	bl	8008e90 <RTC_Bcd2ToByte>
 80089dc:	4603      	mov	r3, r0
 80089de:	461a      	mov	r2, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	785b      	ldrb	r3, [r3, #1]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fa51 	bl	8008e90 <RTC_Bcd2ToByte>
 80089ee:	4603      	mov	r3, r0
 80089f0:	461a      	mov	r2, r3
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	789b      	ldrb	r3, [r3, #2]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fa48 	bl	8008e90 <RTC_Bcd2ToByte>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461a      	mov	r2, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	00ffff3f 	.word	0x00ffff3f

08008a18 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b089      	sub	sp, #36	; 0x24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_RTC_SetAlarm_IT+0x1a>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e123      	b.n	8008c7a <HAL_RTC_SetAlarm_IT+0x262>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d137      	bne.n	8008ab8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 f9f5 	bl	8008e50 <RTC_ByteToBcd2>
 8008a66:	4603      	mov	r3, r0
 8008a68:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	785b      	ldrb	r3, [r3, #1]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f9ee 	bl	8008e50 <RTC_ByteToBcd2>
 8008a74:	4603      	mov	r3, r0
 8008a76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a78:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	789b      	ldrb	r3, [r3, #2]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 f9e6 	bl	8008e50 <RTC_ByteToBcd2>
 8008a84:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a86:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	78db      	ldrb	r3, [r3, #3]
 8008a8e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008a90:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f9d8 	bl	8008e50 <RTC_ByteToBcd2>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008aa4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008aac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	61fb      	str	r3, [r7, #28]
 8008ab6:	e023      	b.n	8008b00 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d102      	bne.n	8008acc <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	785b      	ldrb	r3, [r3, #1]
 8008ad6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008ad8:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008ade:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	78db      	ldrb	r3, [r3, #3]
 8008ae4:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008ae6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008aee:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008af0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008af6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008afc:	4313      	orrs	r3, r2
 8008afe:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	22ca      	movs	r2, #202	; 0xca
 8008b12:	625a      	str	r2, [r3, #36]	; 0x24
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2253      	movs	r2, #83	; 0x53
 8008b1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b24:	d14a      	bne.n	8008bbc <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b34:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008b46:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008b48:	f7f9 fa8e 	bl	8002068 <HAL_GetTick>
 8008b4c:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008b4e:	e015      	b.n	8008b7c <HAL_RTC_SetAlarm_IT+0x164>
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b50:	f7f9 fa8a 	bl	8002068 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b5e:	d90d      	bls.n	8008b7c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	22ff      	movs	r2, #255	; 0xff
 8008b66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e07e      	b.n	8008c7a <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0e2      	beq.n	8008b50 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ba8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689a      	ldr	r2, [r3, #8]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bb8:	609a      	str	r2, [r3, #8]
 8008bba:	e049      	b.n	8008c50 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689a      	ldr	r2, [r3, #8]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008bca:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008bdc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008bde:	f7f9 fa43 	bl	8002068 <HAL_GetTick>
 8008be2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008be4:	e015      	b.n	8008c12 <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008be6:	f7f9 fa3f 	bl	8002068 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bf4:	d90d      	bls.n	8008c12 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	22ff      	movs	r2, #255	; 0xff
 8008bfc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2203      	movs	r2, #3
 8008c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e033      	b.n	8008c7a <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0e2      	beq.n	8008be6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	69fa      	ldr	r2, [r7, #28]
 8008c26:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689a      	ldr	r2, [r3, #8]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c3e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689a      	ldr	r2, [r3, #8]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c4e:	609a      	str	r2, [r3, #8]
#if !defined(DUAL_CORE)
  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c5e:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	22ff      	movs	r2, #255	; 0xff
 8008c66:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3724      	adds	r7, #36	; 0x24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd90      	pop	{r4, r7, pc}
	...

08008c84 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
#if defined(DUAL_CORE)
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8008c8c:	f7f9 fb4c 	bl	8002328 <HAL_GetCurrentCPUID>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d104      	bne.n	8008ca0 <HAL_RTC_AlarmIRQHandler+0x1c>
  {
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008c96:	4b22      	ldr	r3, [pc, #136]	; (8008d20 <HAL_RTC_AlarmIRQHandler+0x9c>)
 8008c98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008c9c:	609a      	str	r2, [r3, #8]
 8008c9e:	e003      	b.n	8008ca8 <HAL_RTC_AlarmIRQHandler+0x24>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
 8008ca0:	4b20      	ldr	r3, [pc, #128]	; (8008d24 <HAL_RTC_AlarmIRQHandler+0xa0>)
 8008ca2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ca6:	609a      	str	r2, [r3, #8]
  }
#endif /* RTC_MISR_ALRBMF */

#if defined(RTC_ISR_ALRAF)
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d012      	beq.n	8008cdc <HAL_RTC_AlarmIRQHandler+0x58>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <HAL_RTC_AlarmIRQHandler+0x58>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008cd4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7f8 fc94 	bl	8001604 <HAL_RTC_AlarmAEventCallback>
  }
#endif /* RTC_ISR_ALRAF */

#if defined(RTC_ISR_ALRBF)
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d012      	beq.n	8008d10 <HAL_RTC_AlarmIRQHandler+0x8c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00b      	beq.n	8008d10 <HAL_RTC_AlarmIRQHandler+0x8c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008d08:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f8da 	bl	8008ec4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008d18:	bf00      	nop
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	58000080 	.word	0x58000080
 8008d24:	580000c0 	.word	0x580000c0

08008d28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d3e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008d40:	f7f9 f992 	bl	8002068 <HAL_GetTick>
 8008d44:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d46:	e009      	b.n	8008d5c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d48:	f7f9 f98e 	bl	8002068 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d56:	d901      	bls.n	8008d5c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e007      	b.n	8008d6c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0ee      	beq.n	8008d48 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d11d      	bne.n	8008dca <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f04f 32ff 	mov.w	r2, #4294967295
 8008d96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008d98:	f7f9 f966 	bl	8002068 <HAL_GetTick>
 8008d9c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008d9e:	e00d      	b.n	8008dbc <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008da0:	f7f9 f962 	bl	8002068 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dae:	d905      	bls.n	8008dbc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2203      	movs	r2, #3
 8008db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0ea      	beq.n	8008da0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008de0:	4b1a      	ldr	r3, [pc, #104]	; (8008e4c <RTC_ExitInitMode+0x78>)
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	4a19      	ldr	r2, [pc, #100]	; (8008e4c <RTC_ExitInitMode+0x78>)
 8008de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dea:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008dec:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <RTC_ExitInitMode+0x78>)
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10c      	bne.n	8008e12 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7ff ff95 	bl	8008d28 <HAL_RTC_WaitForSynchro>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01e      	beq.n	8008e42 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2203      	movs	r2, #3
 8008e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	73fb      	strb	r3, [r7, #15]
 8008e10:	e017      	b.n	8008e42 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e12:	4b0e      	ldr	r3, [pc, #56]	; (8008e4c <RTC_ExitInitMode+0x78>)
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	4a0d      	ldr	r2, [pc, #52]	; (8008e4c <RTC_ExitInitMode+0x78>)
 8008e18:	f023 0320 	bic.w	r3, r3, #32
 8008e1c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff ff82 	bl	8008d28 <HAL_RTC_WaitForSynchro>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d005      	beq.n	8008e36 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2203      	movs	r2, #3
 8008e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e36:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <RTC_ExitInitMode+0x78>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	4a04      	ldr	r2, [pc, #16]	; (8008e4c <RTC_ExitInitMode+0x78>)
 8008e3c:	f043 0320 	orr.w	r3, r3, #32
 8008e40:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	58004000 	.word	0x58004000

08008e50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8008e62:	e005      	b.n	8008e70 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3301      	adds	r3, #1
 8008e68:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008e6a:	7afb      	ldrb	r3, [r7, #11]
 8008e6c:	3b0a      	subs	r3, #10
 8008e6e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	2b09      	cmp	r3, #9
 8008e74:	d8f6      	bhi.n	8008e64 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	011b      	lsls	r3, r3, #4
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	7afb      	ldrb	r3, [r7, #11]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	b2db      	uxtb	r3, r3
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	091b      	lsrs	r3, r3, #4
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	0092      	lsls	r2, r2, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	f003 030f 	and.w	r3, r3, #15
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	b2db      	uxtb	r3, r3
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e0eb      	b.n	80090c6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a75      	ldr	r2, [pc, #468]	; (80090d0 <HAL_SPI_Init+0x1f8>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00f      	beq.n	8008f1e <HAL_SPI_Init+0x46>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a74      	ldr	r2, [pc, #464]	; (80090d4 <HAL_SPI_Init+0x1fc>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00a      	beq.n	8008f1e <HAL_SPI_Init+0x46>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a72      	ldr	r2, [pc, #456]	; (80090d8 <HAL_SPI_Init+0x200>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d005      	beq.n	8008f1e <HAL_SPI_Init+0x46>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	2b0f      	cmp	r3, #15
 8008f18:	d901      	bls.n	8008f1e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e0d3      	b.n	80090c6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 ff62 	bl	8009de8 <SPI_GetPacketSize>
 8008f24:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a69      	ldr	r2, [pc, #420]	; (80090d0 <HAL_SPI_Init+0x1f8>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d00c      	beq.n	8008f4a <HAL_SPI_Init+0x72>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a67      	ldr	r2, [pc, #412]	; (80090d4 <HAL_SPI_Init+0x1fc>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d007      	beq.n	8008f4a <HAL_SPI_Init+0x72>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a66      	ldr	r2, [pc, #408]	; (80090d8 <HAL_SPI_Init+0x200>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d002      	beq.n	8008f4a <HAL_SPI_Init+0x72>
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2b08      	cmp	r3, #8
 8008f48:	d811      	bhi.n	8008f6e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f4e:	4a60      	ldr	r2, [pc, #384]	; (80090d0 <HAL_SPI_Init+0x1f8>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d009      	beq.n	8008f68 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a5e      	ldr	r2, [pc, #376]	; (80090d4 <HAL_SPI_Init+0x1fc>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d004      	beq.n	8008f68 <HAL_SPI_Init+0x90>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a5d      	ldr	r2, [pc, #372]	; (80090d8 <HAL_SPI_Init+0x200>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d104      	bne.n	8008f72 <HAL_SPI_Init+0x9a>
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2b10      	cmp	r3, #16
 8008f6c:	d901      	bls.n	8008f72 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e0a9      	b.n	80090c6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d106      	bne.n	8008f8c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7f8 fca4 	bl	80018d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0201 	bic.w	r2, r2, #1
 8008fa2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fac:	d119      	bne.n	8008fe2 <HAL_SPI_Init+0x10a>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fb6:	d103      	bne.n	8008fc0 <HAL_SPI_Init+0xe8>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d008      	beq.n	8008fd2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10c      	bne.n	8008fe2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd0:	d107      	bne.n	8008fe2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008fe0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69da      	ldr	r2, [r3, #28]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fea:	431a      	orrs	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff4:	ea42 0103 	orr.w	r1, r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68da      	ldr	r2, [r3, #12]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	430a      	orrs	r2, r1
 8009002:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	431a      	orrs	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	431a      	orrs	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	431a      	orrs	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	431a      	orrs	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	431a      	orrs	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009036:	431a      	orrs	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	431a      	orrs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009042:	ea42 0103 	orr.w	r1, r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d113      	bne.n	8009082 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800906c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009080:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 0201 	bic.w	r2, r2, #1
 8009090:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	40013000 	.word	0x40013000
 80090d4:	40003800 	.word	0x40003800
 80090d8:	40003c00 	.word	0x40003c00

080090dc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08a      	sub	sp, #40	; 0x28
 80090e0:	af02      	add	r7, sp, #8
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	603b      	str	r3, [r7, #0]
 80090e8:	4613      	mov	r3, r2
 80090ea:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3320      	adds	r3, #32
 80090f2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d101      	bne.n	8009106 <HAL_SPI_Transmit+0x2a>
 8009102:	2302      	movs	r3, #2
 8009104:	e1d7      	b.n	80094b6 <HAL_SPI_Transmit+0x3da>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800910e:	f7f8 ffab 	bl	8002068 <HAL_GetTick>
 8009112:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b01      	cmp	r3, #1
 800911e:	d007      	beq.n	8009130 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009120:	2302      	movs	r3, #2
 8009122:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800912c:	7efb      	ldrb	r3, [r7, #27]
 800912e:	e1c2      	b.n	80094b6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <HAL_SPI_Transmit+0x60>
 8009136:	88fb      	ldrh	r3, [r7, #6]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d107      	bne.n	800914c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009148:	7efb      	ldrb	r3, [r7, #27]
 800914a:	e1b4      	b.n	80094b6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2203      	movs	r2, #3
 8009150:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	88fa      	ldrh	r2, [r7, #6]
 8009166:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	88fa      	ldrh	r2, [r7, #6]
 800916e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800919c:	d107      	bne.n	80091ae <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	4b96      	ldr	r3, [pc, #600]	; (8009410 <HAL_SPI_Transmit+0x334>)
 80091b6:	4013      	ands	r3, r2
 80091b8:	88f9      	ldrh	r1, [r7, #6]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	6812      	ldr	r2, [r2, #0]
 80091be:	430b      	orrs	r3, r1
 80091c0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0201 	orr.w	r2, r2, #1
 80091d0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091da:	d107      	bne.n	80091ec <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	2b0f      	cmp	r3, #15
 80091f2:	d947      	bls.n	8009284 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80091f4:	e03f      	b.n	8009276 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b02      	cmp	r3, #2
 8009202:	d114      	bne.n	800922e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6812      	ldr	r2, [r2, #0]
 800920e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009214:	1d1a      	adds	r2, r3, #4
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009220:	b29b      	uxth	r3, r3
 8009222:	3b01      	subs	r3, #1
 8009224:	b29a      	uxth	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800922c:	e023      	b.n	8009276 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800922e:	f7f8 ff1b 	bl	8002068 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d803      	bhi.n	8009246 <HAL_SPI_Transmit+0x16a>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d102      	bne.n	800924c <HAL_SPI_Transmit+0x170>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d114      	bne.n	8009276 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 fcfd 	bl	8009c4c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e11f      	b.n	80094b6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800927c:	b29b      	uxth	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1b9      	bne.n	80091f6 <HAL_SPI_Transmit+0x11a>
 8009282:	e0f2      	b.n	800946a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	2b07      	cmp	r3, #7
 800928a:	f240 80e7 	bls.w	800945c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800928e:	e05d      	b.n	800934c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b02      	cmp	r3, #2
 800929c:	d132      	bne.n	8009304 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d918      	bls.n	80092dc <HAL_SPI_Transmit+0x200>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d014      	beq.n	80092dc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6812      	ldr	r2, [r2, #0]
 80092bc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092c2:	1d1a      	adds	r2, r3, #4
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	3b02      	subs	r3, #2
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80092da:	e037      	b.n	800934c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092e0:	881a      	ldrh	r2, [r3, #0]
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ea:	1c9a      	adds	r2, r3, #2
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	3b01      	subs	r3, #1
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009302:	e023      	b.n	800934c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009304:	f7f8 feb0 	bl	8002068 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	429a      	cmp	r2, r3
 8009312:	d803      	bhi.n	800931c <HAL_SPI_Transmit+0x240>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931a:	d102      	bne.n	8009322 <HAL_SPI_Transmit+0x246>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d114      	bne.n	800934c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fc92 	bl	8009c4c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e0b4      	b.n	80094b6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009352:	b29b      	uxth	r3, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	d19b      	bne.n	8009290 <HAL_SPI_Transmit+0x1b4>
 8009358:	e087      	b.n	800946a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b02      	cmp	r3, #2
 8009366:	d155      	bne.n	8009414 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800936e:	b29b      	uxth	r3, r3
 8009370:	2b03      	cmp	r3, #3
 8009372:	d918      	bls.n	80093a6 <HAL_SPI_Transmit+0x2ca>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009378:	2b40      	cmp	r3, #64	; 0x40
 800937a:	d914      	bls.n	80093a6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938c:	1d1a      	adds	r2, r3, #4
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009398:	b29b      	uxth	r3, r3
 800939a:	3b04      	subs	r3, #4
 800939c:	b29a      	uxth	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093a4:	e05a      	b.n	800945c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d917      	bls.n	80093e2 <HAL_SPI_Transmit+0x306>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d013      	beq.n	80093e2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093be:	881a      	ldrh	r2, [r3, #0]
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c8:	1c9a      	adds	r2, r3, #2
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	3b02      	subs	r3, #2
 80093d8:	b29a      	uxth	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093e0:	e03c      	b.n	800945c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3320      	adds	r3, #32
 80093ec:	7812      	ldrb	r2, [r2, #0]
 80093ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f4:	1c5a      	adds	r2, r3, #1
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009400:	b29b      	uxth	r3, r3
 8009402:	3b01      	subs	r3, #1
 8009404:	b29a      	uxth	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800940c:	e026      	b.n	800945c <HAL_SPI_Transmit+0x380>
 800940e:	bf00      	nop
 8009410:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009414:	f7f8 fe28 	bl	8002068 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	429a      	cmp	r2, r3
 8009422:	d803      	bhi.n	800942c <HAL_SPI_Transmit+0x350>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942a:	d102      	bne.n	8009432 <HAL_SPI_Transmit+0x356>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d114      	bne.n	800945c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fc0a 	bl	8009c4c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009446:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e02c      	b.n	80094b6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009462:	b29b      	uxth	r3, r3
 8009464:	2b00      	cmp	r3, #0
 8009466:	f47f af78 	bne.w	800935a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2200      	movs	r2, #0
 8009472:	2108      	movs	r1, #8
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 fc89 	bl	8009d8c <SPI_WaitOnFlagUntilTimeout>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d007      	beq.n	8009490 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009486:	f043 0220 	orr.w	r2, r3, #32
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 fbdb 	bl	8009c4c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e000      	b.n	80094b6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80094b4:	7efb      	ldrb	r3, [r7, #27]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3720      	adds	r7, #32
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop

080094c0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	4613      	mov	r3, r2
 80094cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d101      	bne.n	80094e0 <HAL_SPI_Transmit_DMA+0x20>
 80094dc:	2302      	movs	r3, #2
 80094de:	e128      	b.n	8009732 <HAL_SPI_Transmit_DMA+0x272>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d007      	beq.n	8009504 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80094f4:	2302      	movs	r3, #2
 80094f6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	e116      	b.n	8009732 <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d002      	beq.n	8009510 <HAL_SPI_Transmit_DMA+0x50>
 800950a:	88fb      	ldrh	r3, [r7, #6]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d107      	bne.n	8009520 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
 800951e:	e108      	b.n	8009732 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2203      	movs	r2, #3
 8009524:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	88fa      	ldrh	r2, [r7, #6]
 800953a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	88fa      	ldrh	r2, [r7, #6]
 8009542:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009570:	d107      	bne.n	8009582 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009580:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	2b0f      	cmp	r3, #15
 8009588:	d905      	bls.n	8009596 <HAL_SPI_Transmit_DMA+0xd6>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009594:	d10f      	bne.n	80095b6 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800959a:	2b07      	cmp	r3, #7
 800959c:	d913      	bls.n	80095c6 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095a8:	d00d      	beq.n	80095c6 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ae:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80095b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095b4:	d007      	beq.n	80095c6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	e0b5      	b.n	8009732 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	2b07      	cmp	r3, #7
 80095cc:	d820      	bhi.n	8009610 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d8:	d109      	bne.n	80095ee <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	3301      	adds	r3, #1
 80095e4:	105b      	asrs	r3, r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095f8:	d11e      	bne.n	8009638 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009600:	b29b      	uxth	r3, r3
 8009602:	3303      	adds	r3, #3
 8009604:	109b      	asrs	r3, r3, #2
 8009606:	b29a      	uxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800960e:	e013      	b.n	8009638 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	2b0f      	cmp	r3, #15
 8009616:	d80f      	bhi.n	8009638 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009622:	d109      	bne.n	8009638 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800962a:	b29b      	uxth	r3, r3
 800962c:	3301      	adds	r3, #1
 800962e:	105b      	asrs	r3, r3, #1
 8009630:	b29a      	uxth	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800963c:	4a3f      	ldr	r2, [pc, #252]	; (800973c <HAL_SPI_Transmit_DMA+0x27c>)
 800963e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009644:	4a3e      	ldr	r2, [pc, #248]	; (8009740 <HAL_SPI_Transmit_DMA+0x280>)
 8009646:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800964c:	4a3d      	ldr	r2, [pc, #244]	; (8009744 <HAL_SPI_Transmit_DMA+0x284>)
 800964e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009654:	2200      	movs	r2, #0
 8009656:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689a      	ldr	r2, [r3, #8]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009666:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009670:	4619      	mov	r1, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3320      	adds	r3, #32
 8009678:	461a      	mov	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009680:	b29b      	uxth	r3, r3
 8009682:	f7f9 f9c1 	bl	8002a08 <HAL_DMA_Start_IT>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00f      	beq.n	80096ac <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009692:	f043 0210 	orr.w	r2, r3, #16
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	e042      	b.n	8009732 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096b6:	d108      	bne.n	80096ca <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6859      	ldr	r1, [r3, #4]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b21      	ldr	r3, [pc, #132]	; (8009748 <HAL_SPI_Transmit_DMA+0x288>)
 80096c4:	400b      	ands	r3, r1
 80096c6:	6053      	str	r3, [r2, #4]
 80096c8:	e009      	b.n	80096de <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	4b1d      	ldr	r3, [pc, #116]	; (8009748 <HAL_SPI_Transmit_DMA+0x288>)
 80096d2:	4013      	ands	r3, r2
 80096d4:	88f9      	ldrh	r1, [r7, #6]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	6812      	ldr	r2, [r2, #0]
 80096da:	430b      	orrs	r3, r1
 80096dc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689a      	ldr	r2, [r3, #8]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096ec:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	691a      	ldr	r2, [r3, #16]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80096fc:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0201 	orr.w	r2, r2, #1
 800970c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009716:	d107      	bne.n	8009728 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009726:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	08009bb7 	.word	0x08009bb7
 8009740:	08009b71 	.word	0x08009b71
 8009744:	08009bd3 	.word	0x08009bd3
 8009748:	ffff0000 	.word	0xffff0000

0800974c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08a      	sub	sp, #40	; 0x28
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009764:	6a3a      	ldr	r2, [r7, #32]
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	4013      	ands	r3, r2
 800976a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009774:	2300      	movs	r3, #0
 8009776:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800977e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3330      	adds	r3, #48	; 0x30
 8009786:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978e:	2b00      	cmp	r3, #0
 8009790:	d113      	bne.n	80097ba <HAL_SPI_IRQHandler+0x6e>
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	f003 0320 	and.w	r3, r3, #32
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10e      	bne.n	80097ba <HAL_SPI_IRQHandler+0x6e>
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	f003 0304 	and.w	r3, r3, #4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d009      	beq.n	80097ba <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	4798      	blx	r3
    hspi->RxISR(hspi);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	4798      	blx	r3
    handled = 1UL;
 80097b6:	2301      	movs	r3, #1
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10f      	bne.n	80097e4 <HAL_SPI_IRQHandler+0x98>
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <HAL_SPI_IRQHandler+0x98>
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d105      	bne.n	80097e4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
    handled = 1UL;
 80097e0:	2301      	movs	r3, #1
 80097e2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10f      	bne.n	800980e <HAL_SPI_IRQHandler+0xc2>
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	f003 0302 	and.w	r3, r3, #2
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00a      	beq.n	800980e <HAL_SPI_IRQHandler+0xc2>
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	f003 0304 	and.w	r3, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d105      	bne.n	800980e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
    handled = 1UL;
 800980a:	2301      	movs	r3, #1
 800980c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	2b00      	cmp	r3, #0
 8009812:	f040 816f 	bne.w	8009af4 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	f003 0308 	and.w	r3, r3, #8
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 80a0 	beq.w	8009962 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699a      	ldr	r2, [r3, #24]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0208 	orr.w	r2, r2, #8
 8009830:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	699a      	ldr	r2, [r3, #24]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f042 0210 	orr.w	r2, r2, #16
 8009840:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	699a      	ldr	r2, [r3, #24]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009850:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	691a      	ldr	r2, [r3, #16]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 0208 	bic.w	r2, r2, #8
 8009860:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00f      	beq.n	800988c <HAL_SPI_IRQHandler+0x140>
 800986c:	7cfb      	ldrb	r3, [r7, #19]
 800986e:	2b04      	cmp	r3, #4
 8009870:	d004      	beq.n	800987c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d007      	beq.n	800988c <HAL_SPI_IRQHandler+0x140>
 800987c:	7cfb      	ldrb	r3, [r7, #19]
 800987e:	2b03      	cmp	r3, #3
 8009880:	d059      	beq.n	8009936 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d154      	bne.n	8009936 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d13d      	bne.n	8009916 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800989a:	e036      	b.n	800990a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	2b0f      	cmp	r3, #15
 80098a2:	d90b      	bls.n	80098bc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80098ae:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098b4:	1d1a      	adds	r2, r3, #4
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	665a      	str	r2, [r3, #100]	; 0x64
 80098ba:	e01d      	b.n	80098f8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	2b07      	cmp	r3, #7
 80098c2:	d90b      	bls.n	80098dc <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	8812      	ldrh	r2, [r2, #0]
 80098cc:	b292      	uxth	r2, r2
 80098ce:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098d4:	1c9a      	adds	r2, r3, #2
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	665a      	str	r2, [r3, #100]	; 0x64
 80098da:	e00d      	b.n	80098f8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098e8:	7812      	ldrb	r2, [r2, #0]
 80098ea:	b2d2      	uxtb	r2, r2
 80098ec:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80098fe:	b29b      	uxth	r3, r3
 8009900:	3b01      	subs	r3, #1
 8009902:	b29a      	uxth	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009910:	b29b      	uxth	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1c2      	bne.n	800989c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f998 	bl	8009c4c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f914 	bl	8009b5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8009934:	e0e3      	b.n	8009afe <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009936:	7cfb      	ldrb	r3, [r7, #19]
 8009938:	2b05      	cmp	r3, #5
 800993a:	d103      	bne.n	8009944 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f8f9 	bl	8009b34 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8009942:	e0d9      	b.n	8009af8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009944:	7cfb      	ldrb	r3, [r7, #19]
 8009946:	2b04      	cmp	r3, #4
 8009948:	d103      	bne.n	8009952 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f8e8 	bl	8009b20 <HAL_SPI_RxCpltCallback>
    return;
 8009950:	e0d2      	b.n	8009af8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009952:	7cfb      	ldrb	r3, [r7, #19]
 8009954:	2b03      	cmp	r3, #3
 8009956:	f040 80cf 	bne.w	8009af8 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f8d6 	bl	8009b0c <HAL_SPI_TxCpltCallback>
    return;
 8009960:	e0ca      	b.n	8009af8 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00d      	beq.n	8009988 <HAL_SPI_IRQHandler+0x23c>
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	f003 0308 	and.w	r3, r3, #8
 8009972:	2b00      	cmp	r3, #0
 8009974:	d008      	beq.n	8009988 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699a      	ldr	r2, [r3, #24]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009984:	619a      	str	r2, [r3, #24]

    return;
 8009986:	e0ba      	b.n	8009afe <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 80b5 	beq.w	8009afe <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00f      	beq.n	80099be <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099a4:	f043 0204 	orr.w	r2, r3, #4
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	699a      	ldr	r2, [r3, #24]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099bc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00f      	beq.n	80099e8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ce:	f043 0201 	orr.w	r2, r3, #1
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699a      	ldr	r2, [r3, #24]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00f      	beq.n	8009a12 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099f8:	f043 0208 	orr.w	r2, r3, #8
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	699a      	ldr	r2, [r3, #24]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a10:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00f      	beq.n	8009a3c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699a      	ldr	r2, [r3, #24]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f042 0220 	orr.w	r2, r2, #32
 8009a3a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d05a      	beq.n	8009afc <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0201 	bic.w	r2, r2, #1
 8009a54:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6919      	ldr	r1, [r3, #16]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	4b28      	ldr	r3, [pc, #160]	; (8009b04 <HAL_SPI_IRQHandler+0x3b8>)
 8009a62:	400b      	ands	r3, r1
 8009a64:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009a70:	d138      	bne.n	8009ae4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009a80:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d013      	beq.n	8009ab2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a8e:	4a1e      	ldr	r2, [pc, #120]	; (8009b08 <HAL_SPI_IRQHandler+0x3bc>)
 8009a90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7f9 fd3e 	bl	8003518 <HAL_DMA_Abort_IT>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d007      	beq.n	8009ab2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d020      	beq.n	8009afc <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009abe:	4a12      	ldr	r2, [pc, #72]	; (8009b08 <HAL_SPI_IRQHandler+0x3bc>)
 8009ac0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7f9 fd26 	bl	8003518 <HAL_DMA_Abort_IT>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d014      	beq.n	8009afc <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ad8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009ae2:	e00b      	b.n	8009afc <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f835 	bl	8009b5c <HAL_SPI_ErrorCallback>
    return;
 8009af2:	e003      	b.n	8009afc <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009af4:	bf00      	nop
 8009af6:	e002      	b.n	8009afe <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009af8:	bf00      	nop
 8009afa:	e000      	b.n	8009afe <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009afc:	bf00      	nop
  }
}
 8009afe:	3728      	adds	r7, #40	; 0x28
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	fffffc94 	.word	0xfffffc94
 8009b08:	08009c19 	.word	0x08009c19

08009b0c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b07      	cmp	r3, #7
 8009b88:	d011      	beq.n	8009bae <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b94:	d103      	bne.n	8009b9e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff ffb8 	bl	8009b0c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009b9c:	e007      	b.n	8009bae <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	691a      	ldr	r2, [r3, #16]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f042 0208 	orr.w	r2, r2, #8
 8009bac:	611a      	str	r2, [r3, #16]
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7ff ffbf 	bl	8009b48 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bca:	bf00      	nop
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bde:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7fa fe07 	bl	80047f4 <HAL_DMA_GetError>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d011      	beq.n	8009c10 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 f82d 	bl	8009c4c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bf8:	f043 0210 	orr.w	r2, r3, #16
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f7ff ffa6 	bl	8009b5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009c10:	bf00      	nop
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f7ff ff8c 	bl	8009b5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c44:	bf00      	nop
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f042 0208 	orr.w	r2, r2, #8
 8009c6a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699a      	ldr	r2, [r3, #24]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0210 	orr.w	r2, r2, #16
 8009c7a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f022 0201 	bic.w	r2, r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6919      	ldr	r1, [r3, #16]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	4b3c      	ldr	r3, [pc, #240]	; (8009d88 <SPI_CloseTransfer+0x13c>)
 8009c98:	400b      	ands	r3, r1
 8009c9a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	689a      	ldr	r2, [r3, #8]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009caa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d014      	beq.n	8009ce2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f003 0320 	and.w	r3, r3, #32
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00f      	beq.n	8009ce2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	699a      	ldr	r2, [r3, #24]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f042 0220 	orr.w	r2, r2, #32
 8009ce0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d014      	beq.n	8009d18 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00f      	beq.n	8009d18 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cfe:	f043 0204 	orr.w	r2, r3, #4
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	699a      	ldr	r2, [r3, #24]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d16:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00f      	beq.n	8009d42 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d28:	f043 0201 	orr.w	r2, r3, #1
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	699a      	ldr	r2, [r3, #24]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d40:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00f      	beq.n	8009d6c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d52:	f043 0208 	orr.w	r2, r3, #8
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	699a      	ldr	r2, [r3, #24]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d6a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009d7c:	bf00      	nop
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	fffffc90 	.word	0xfffffc90

08009d8c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	603b      	str	r3, [r7, #0]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d9c:	e010      	b.n	8009dc0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d9e:	f7f8 f963 	bl	8002068 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d803      	bhi.n	8009db6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db4:	d102      	bne.n	8009dbc <SPI_WaitOnFlagUntilTimeout+0x30>
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e00f      	b.n	8009de0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	695a      	ldr	r2, [r3, #20]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	4013      	ands	r3, r2
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	bf0c      	ite	eq
 8009dd0:	2301      	moveq	r3, #1
 8009dd2:	2300      	movne	r3, #0
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	79fb      	ldrb	r3, [r7, #7]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d0df      	beq.n	8009d9e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df4:	095b      	lsrs	r3, r3, #5
 8009df6:	3301      	adds	r3, #1
 8009df8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	3307      	adds	r3, #7
 8009e06:	08db      	lsrs	r3, r3, #3
 8009e08:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e049      	b.n	8009ec4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d106      	bne.n	8009e4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7f7 fe09 	bl	8001a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	f000 fc0b 	bl	800a678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d001      	beq.n	8009ee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e047      	b.n	8009f74 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a23      	ldr	r2, [pc, #140]	; (8009f80 <HAL_TIM_Base_Start+0xb4>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d01d      	beq.n	8009f32 <HAL_TIM_Base_Start+0x66>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009efe:	d018      	beq.n	8009f32 <HAL_TIM_Base_Start+0x66>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a1f      	ldr	r2, [pc, #124]	; (8009f84 <HAL_TIM_Base_Start+0xb8>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d013      	beq.n	8009f32 <HAL_TIM_Base_Start+0x66>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a1e      	ldr	r2, [pc, #120]	; (8009f88 <HAL_TIM_Base_Start+0xbc>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d00e      	beq.n	8009f32 <HAL_TIM_Base_Start+0x66>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a1c      	ldr	r2, [pc, #112]	; (8009f8c <HAL_TIM_Base_Start+0xc0>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d009      	beq.n	8009f32 <HAL_TIM_Base_Start+0x66>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a1b      	ldr	r2, [pc, #108]	; (8009f90 <HAL_TIM_Base_Start+0xc4>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d004      	beq.n	8009f32 <HAL_TIM_Base_Start+0x66>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a19      	ldr	r2, [pc, #100]	; (8009f94 <HAL_TIM_Base_Start+0xc8>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d115      	bne.n	8009f5e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	4b17      	ldr	r3, [pc, #92]	; (8009f98 <HAL_TIM_Base_Start+0xcc>)
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b06      	cmp	r3, #6
 8009f42:	d015      	beq.n	8009f70 <HAL_TIM_Base_Start+0xa4>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f4a:	d011      	beq.n	8009f70 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f042 0201 	orr.w	r2, r2, #1
 8009f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f5c:	e008      	b.n	8009f70 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f042 0201 	orr.w	r2, r2, #1
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	e000      	b.n	8009f72 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	40010000 	.word	0x40010000
 8009f84:	40000400 	.word	0x40000400
 8009f88:	40000800 	.word	0x40000800
 8009f8c:	40000c00 	.word	0x40000c00
 8009f90:	40010400 	.word	0x40010400
 8009f94:	40001800 	.word	0x40001800
 8009f98:	00010007 	.word	0x00010007

08009f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e049      	b.n	800a042 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d106      	bne.n	8009fc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f841 	bl	800a04a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4610      	mov	r0, r2
 8009fdc:	f000 fb4c 	bl	800a678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
	...

0800a060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <HAL_TIM_PWM_Start+0x24>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b01      	cmp	r3, #1
 800a07a:	bf14      	ite	ne
 800a07c:	2301      	movne	r3, #1
 800a07e:	2300      	moveq	r3, #0
 800a080:	b2db      	uxtb	r3, r3
 800a082:	e03c      	b.n	800a0fe <HAL_TIM_PWM_Start+0x9e>
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2b04      	cmp	r3, #4
 800a088:	d109      	bne.n	800a09e <HAL_TIM_PWM_Start+0x3e>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b01      	cmp	r3, #1
 800a094:	bf14      	ite	ne
 800a096:	2301      	movne	r3, #1
 800a098:	2300      	moveq	r3, #0
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	e02f      	b.n	800a0fe <HAL_TIM_PWM_Start+0x9e>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d109      	bne.n	800a0b8 <HAL_TIM_PWM_Start+0x58>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	bf14      	ite	ne
 800a0b0:	2301      	movne	r3, #1
 800a0b2:	2300      	moveq	r3, #0
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	e022      	b.n	800a0fe <HAL_TIM_PWM_Start+0x9e>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2b0c      	cmp	r3, #12
 800a0bc:	d109      	bne.n	800a0d2 <HAL_TIM_PWM_Start+0x72>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	bf14      	ite	ne
 800a0ca:	2301      	movne	r3, #1
 800a0cc:	2300      	moveq	r3, #0
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	e015      	b.n	800a0fe <HAL_TIM_PWM_Start+0x9e>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b10      	cmp	r3, #16
 800a0d6:	d109      	bne.n	800a0ec <HAL_TIM_PWM_Start+0x8c>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	bf14      	ite	ne
 800a0e4:	2301      	movne	r3, #1
 800a0e6:	2300      	moveq	r3, #0
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	e008      	b.n	800a0fe <HAL_TIM_PWM_Start+0x9e>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	bf14      	ite	ne
 800a0f8:	2301      	movne	r3, #1
 800a0fa:	2300      	moveq	r3, #0
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e09c      	b.n	800a240 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d104      	bne.n	800a116 <HAL_TIM_PWM_Start+0xb6>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a114:	e023      	b.n	800a15e <HAL_TIM_PWM_Start+0xfe>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d104      	bne.n	800a126 <HAL_TIM_PWM_Start+0xc6>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a124:	e01b      	b.n	800a15e <HAL_TIM_PWM_Start+0xfe>
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	2b08      	cmp	r3, #8
 800a12a:	d104      	bne.n	800a136 <HAL_TIM_PWM_Start+0xd6>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a134:	e013      	b.n	800a15e <HAL_TIM_PWM_Start+0xfe>
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b0c      	cmp	r3, #12
 800a13a:	d104      	bne.n	800a146 <HAL_TIM_PWM_Start+0xe6>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2202      	movs	r2, #2
 800a140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a144:	e00b      	b.n	800a15e <HAL_TIM_PWM_Start+0xfe>
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b10      	cmp	r3, #16
 800a14a:	d104      	bne.n	800a156 <HAL_TIM_PWM_Start+0xf6>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2202      	movs	r2, #2
 800a150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a154:	e003      	b.n	800a15e <HAL_TIM_PWM_Start+0xfe>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2202      	movs	r2, #2
 800a15a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2201      	movs	r2, #1
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	4618      	mov	r0, r3
 800a168:	f000 fe8c 	bl	800ae84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a35      	ldr	r2, [pc, #212]	; (800a248 <HAL_TIM_PWM_Start+0x1e8>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d013      	beq.n	800a19e <HAL_TIM_PWM_Start+0x13e>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a34      	ldr	r2, [pc, #208]	; (800a24c <HAL_TIM_PWM_Start+0x1ec>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00e      	beq.n	800a19e <HAL_TIM_PWM_Start+0x13e>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a32      	ldr	r2, [pc, #200]	; (800a250 <HAL_TIM_PWM_Start+0x1f0>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d009      	beq.n	800a19e <HAL_TIM_PWM_Start+0x13e>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a31      	ldr	r2, [pc, #196]	; (800a254 <HAL_TIM_PWM_Start+0x1f4>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d004      	beq.n	800a19e <HAL_TIM_PWM_Start+0x13e>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a2f      	ldr	r2, [pc, #188]	; (800a258 <HAL_TIM_PWM_Start+0x1f8>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d101      	bne.n	800a1a2 <HAL_TIM_PWM_Start+0x142>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e000      	b.n	800a1a4 <HAL_TIM_PWM_Start+0x144>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d007      	beq.n	800a1b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a22      	ldr	r2, [pc, #136]	; (800a248 <HAL_TIM_PWM_Start+0x1e8>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d01d      	beq.n	800a1fe <HAL_TIM_PWM_Start+0x19e>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ca:	d018      	beq.n	800a1fe <HAL_TIM_PWM_Start+0x19e>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a22      	ldr	r2, [pc, #136]	; (800a25c <HAL_TIM_PWM_Start+0x1fc>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d013      	beq.n	800a1fe <HAL_TIM_PWM_Start+0x19e>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a21      	ldr	r2, [pc, #132]	; (800a260 <HAL_TIM_PWM_Start+0x200>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d00e      	beq.n	800a1fe <HAL_TIM_PWM_Start+0x19e>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a1f      	ldr	r2, [pc, #124]	; (800a264 <HAL_TIM_PWM_Start+0x204>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d009      	beq.n	800a1fe <HAL_TIM_PWM_Start+0x19e>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a17      	ldr	r2, [pc, #92]	; (800a24c <HAL_TIM_PWM_Start+0x1ec>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d004      	beq.n	800a1fe <HAL_TIM_PWM_Start+0x19e>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a1b      	ldr	r2, [pc, #108]	; (800a268 <HAL_TIM_PWM_Start+0x208>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d115      	bne.n	800a22a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	4b19      	ldr	r3, [pc, #100]	; (800a26c <HAL_TIM_PWM_Start+0x20c>)
 800a206:	4013      	ands	r3, r2
 800a208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b06      	cmp	r3, #6
 800a20e:	d015      	beq.n	800a23c <HAL_TIM_PWM_Start+0x1dc>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a216:	d011      	beq.n	800a23c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f042 0201 	orr.w	r2, r2, #1
 800a226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a228:	e008      	b.n	800a23c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f042 0201 	orr.w	r2, r2, #1
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	e000      	b.n	800a23e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a23c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	40010000 	.word	0x40010000
 800a24c:	40010400 	.word	0x40010400
 800a250:	40014000 	.word	0x40014000
 800a254:	40014400 	.word	0x40014400
 800a258:	40014800 	.word	0x40014800
 800a25c:	40000400 	.word	0x40000400
 800a260:	40000800 	.word	0x40000800
 800a264:	40000c00 	.word	0x40000c00
 800a268:	40001800 	.word	0x40001800
 800a26c:	00010007 	.word	0x00010007

0800a270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a282:	2b01      	cmp	r3, #1
 800a284:	d101      	bne.n	800a28a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a286:	2302      	movs	r3, #2
 800a288:	e0fd      	b.n	800a486 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b14      	cmp	r3, #20
 800a296:	f200 80f0 	bhi.w	800a47a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a29a:	a201      	add	r2, pc, #4	; (adr r2, 800a2a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a0:	0800a2f5 	.word	0x0800a2f5
 800a2a4:	0800a47b 	.word	0x0800a47b
 800a2a8:	0800a47b 	.word	0x0800a47b
 800a2ac:	0800a47b 	.word	0x0800a47b
 800a2b0:	0800a335 	.word	0x0800a335
 800a2b4:	0800a47b 	.word	0x0800a47b
 800a2b8:	0800a47b 	.word	0x0800a47b
 800a2bc:	0800a47b 	.word	0x0800a47b
 800a2c0:	0800a377 	.word	0x0800a377
 800a2c4:	0800a47b 	.word	0x0800a47b
 800a2c8:	0800a47b 	.word	0x0800a47b
 800a2cc:	0800a47b 	.word	0x0800a47b
 800a2d0:	0800a3b7 	.word	0x0800a3b7
 800a2d4:	0800a47b 	.word	0x0800a47b
 800a2d8:	0800a47b 	.word	0x0800a47b
 800a2dc:	0800a47b 	.word	0x0800a47b
 800a2e0:	0800a3f9 	.word	0x0800a3f9
 800a2e4:	0800a47b 	.word	0x0800a47b
 800a2e8:	0800a47b 	.word	0x0800a47b
 800a2ec:	0800a47b 	.word	0x0800a47b
 800a2f0:	0800a439 	.word	0x0800a439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68b9      	ldr	r1, [r7, #8]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 fa56 	bl	800a7ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	699a      	ldr	r2, [r3, #24]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0208 	orr.w	r2, r2, #8
 800a30e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699a      	ldr	r2, [r3, #24]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f022 0204 	bic.w	r2, r2, #4
 800a31e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6999      	ldr	r1, [r3, #24]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	691a      	ldr	r2, [r3, #16]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	430a      	orrs	r2, r1
 800a330:	619a      	str	r2, [r3, #24]
      break;
 800a332:	e0a3      	b.n	800a47c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68b9      	ldr	r1, [r7, #8]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 fac6 	bl	800a8cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	699a      	ldr	r2, [r3, #24]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a34e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699a      	ldr	r2, [r3, #24]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a35e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6999      	ldr	r1, [r3, #24]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	021a      	lsls	r2, r3, #8
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	619a      	str	r2, [r3, #24]
      break;
 800a374:	e082      	b.n	800a47c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 fb2f 	bl	800a9e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69da      	ldr	r2, [r3, #28]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f042 0208 	orr.w	r2, r2, #8
 800a390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	69da      	ldr	r2, [r3, #28]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 0204 	bic.w	r2, r2, #4
 800a3a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69d9      	ldr	r1, [r3, #28]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	691a      	ldr	r2, [r3, #16]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	61da      	str	r2, [r3, #28]
      break;
 800a3b4:	e062      	b.n	800a47c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68b9      	ldr	r1, [r7, #8]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 fb95 	bl	800aaec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	69da      	ldr	r2, [r3, #28]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	69da      	ldr	r2, [r3, #28]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69d9      	ldr	r1, [r3, #28]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	021a      	lsls	r2, r3, #8
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	61da      	str	r2, [r3, #28]
      break;
 800a3f6:	e041      	b.n	800a47c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68b9      	ldr	r1, [r7, #8]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fbdc 	bl	800abbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f042 0208 	orr.w	r2, r2, #8
 800a412:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0204 	bic.w	r2, r2, #4
 800a422:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	691a      	ldr	r2, [r3, #16]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a436:	e021      	b.n	800a47c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 fc1e 	bl	800ac80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	021a      	lsls	r2, r3, #8
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	430a      	orrs	r2, r1
 800a476:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a478:	e000      	b.n	800a47c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a47a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop

0800a490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d101      	bne.n	800a4a8 <HAL_TIM_ConfigClockSource+0x18>
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	e0db      	b.n	800a660 <HAL_TIM_ConfigClockSource+0x1d0>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	4b69      	ldr	r3, [pc, #420]	; (800a668 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a63      	ldr	r2, [pc, #396]	; (800a66c <HAL_TIM_ConfigClockSource+0x1dc>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	f000 80a9 	beq.w	800a636 <HAL_TIM_ConfigClockSource+0x1a6>
 800a4e4:	4a61      	ldr	r2, [pc, #388]	; (800a66c <HAL_TIM_ConfigClockSource+0x1dc>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	f200 80ae 	bhi.w	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a4ec:	4a60      	ldr	r2, [pc, #384]	; (800a670 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	f000 80a1 	beq.w	800a636 <HAL_TIM_ConfigClockSource+0x1a6>
 800a4f4:	4a5e      	ldr	r2, [pc, #376]	; (800a670 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	f200 80a6 	bhi.w	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a4fc:	4a5d      	ldr	r2, [pc, #372]	; (800a674 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	f000 8099 	beq.w	800a636 <HAL_TIM_ConfigClockSource+0x1a6>
 800a504:	4a5b      	ldr	r2, [pc, #364]	; (800a674 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a506:	4293      	cmp	r3, r2
 800a508:	f200 809e 	bhi.w	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a50c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a510:	f000 8091 	beq.w	800a636 <HAL_TIM_ConfigClockSource+0x1a6>
 800a514:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a518:	f200 8096 	bhi.w	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a51c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a520:	f000 8089 	beq.w	800a636 <HAL_TIM_ConfigClockSource+0x1a6>
 800a524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a528:	f200 808e 	bhi.w	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a52c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a530:	d03e      	beq.n	800a5b0 <HAL_TIM_ConfigClockSource+0x120>
 800a532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a536:	f200 8087 	bhi.w	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a53a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a53e:	f000 8085 	beq.w	800a64c <HAL_TIM_ConfigClockSource+0x1bc>
 800a542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a546:	d87f      	bhi.n	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a548:	2b70      	cmp	r3, #112	; 0x70
 800a54a:	d01a      	beq.n	800a582 <HAL_TIM_ConfigClockSource+0xf2>
 800a54c:	2b70      	cmp	r3, #112	; 0x70
 800a54e:	d87b      	bhi.n	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a550:	2b60      	cmp	r3, #96	; 0x60
 800a552:	d050      	beq.n	800a5f6 <HAL_TIM_ConfigClockSource+0x166>
 800a554:	2b60      	cmp	r3, #96	; 0x60
 800a556:	d877      	bhi.n	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a558:	2b50      	cmp	r3, #80	; 0x50
 800a55a:	d03c      	beq.n	800a5d6 <HAL_TIM_ConfigClockSource+0x146>
 800a55c:	2b50      	cmp	r3, #80	; 0x50
 800a55e:	d873      	bhi.n	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a560:	2b40      	cmp	r3, #64	; 0x40
 800a562:	d058      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x186>
 800a564:	2b40      	cmp	r3, #64	; 0x40
 800a566:	d86f      	bhi.n	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a568:	2b30      	cmp	r3, #48	; 0x30
 800a56a:	d064      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x1a6>
 800a56c:	2b30      	cmp	r3, #48	; 0x30
 800a56e:	d86b      	bhi.n	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a570:	2b20      	cmp	r3, #32
 800a572:	d060      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x1a6>
 800a574:	2b20      	cmp	r3, #32
 800a576:	d867      	bhi.n	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d05c      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x1a6>
 800a57c:	2b10      	cmp	r3, #16
 800a57e:	d05a      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a580:	e062      	b.n	800a648 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	6899      	ldr	r1, [r3, #8]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	f000 fc57 	bl	800ae44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a5a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	609a      	str	r2, [r3, #8]
      break;
 800a5ae:	e04e      	b.n	800a64e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	6899      	ldr	r1, [r3, #8]
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f000 fc40 	bl	800ae44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	689a      	ldr	r2, [r3, #8]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5d2:	609a      	str	r2, [r3, #8]
      break;
 800a5d4:	e03b      	b.n	800a64e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6818      	ldr	r0, [r3, #0]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	6859      	ldr	r1, [r3, #4]
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f000 fbb0 	bl	800ad48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2150      	movs	r1, #80	; 0x50
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 fc0a 	bl	800ae08 <TIM_ITRx_SetConfig>
      break;
 800a5f4:	e02b      	b.n	800a64e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	6859      	ldr	r1, [r3, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	461a      	mov	r2, r3
 800a604:	f000 fbcf 	bl	800ada6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2160      	movs	r1, #96	; 0x60
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 fbfa 	bl	800ae08 <TIM_ITRx_SetConfig>
      break;
 800a614:	e01b      	b.n	800a64e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6818      	ldr	r0, [r3, #0]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	6859      	ldr	r1, [r3, #4]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	461a      	mov	r2, r3
 800a624:	f000 fb90 	bl	800ad48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2140      	movs	r1, #64	; 0x40
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 fbea 	bl	800ae08 <TIM_ITRx_SetConfig>
      break;
 800a634:	e00b      	b.n	800a64e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4619      	mov	r1, r3
 800a640:	4610      	mov	r0, r2
 800a642:	f000 fbe1 	bl	800ae08 <TIM_ITRx_SetConfig>
        break;
 800a646:	e002      	b.n	800a64e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a648:	bf00      	nop
 800a64a:	e000      	b.n	800a64e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a64c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	ffceff88 	.word	0xffceff88
 800a66c:	00100040 	.word	0x00100040
 800a670:	00100030 	.word	0x00100030
 800a674:	00100020 	.word	0x00100020

0800a678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a40      	ldr	r2, [pc, #256]	; (800a78c <TIM_Base_SetConfig+0x114>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d013      	beq.n	800a6b8 <TIM_Base_SetConfig+0x40>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a696:	d00f      	beq.n	800a6b8 <TIM_Base_SetConfig+0x40>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a3d      	ldr	r2, [pc, #244]	; (800a790 <TIM_Base_SetConfig+0x118>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d00b      	beq.n	800a6b8 <TIM_Base_SetConfig+0x40>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4a3c      	ldr	r2, [pc, #240]	; (800a794 <TIM_Base_SetConfig+0x11c>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d007      	beq.n	800a6b8 <TIM_Base_SetConfig+0x40>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a3b      	ldr	r2, [pc, #236]	; (800a798 <TIM_Base_SetConfig+0x120>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d003      	beq.n	800a6b8 <TIM_Base_SetConfig+0x40>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a3a      	ldr	r2, [pc, #232]	; (800a79c <TIM_Base_SetConfig+0x124>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d108      	bne.n	800a6ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a2f      	ldr	r2, [pc, #188]	; (800a78c <TIM_Base_SetConfig+0x114>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d01f      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6d8:	d01b      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a2c      	ldr	r2, [pc, #176]	; (800a790 <TIM_Base_SetConfig+0x118>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d017      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a2b      	ldr	r2, [pc, #172]	; (800a794 <TIM_Base_SetConfig+0x11c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d013      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a2a      	ldr	r2, [pc, #168]	; (800a798 <TIM_Base_SetConfig+0x120>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d00f      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a29      	ldr	r2, [pc, #164]	; (800a79c <TIM_Base_SetConfig+0x124>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d00b      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a28      	ldr	r2, [pc, #160]	; (800a7a0 <TIM_Base_SetConfig+0x128>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d007      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a27      	ldr	r2, [pc, #156]	; (800a7a4 <TIM_Base_SetConfig+0x12c>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d003      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a26      	ldr	r2, [pc, #152]	; (800a7a8 <TIM_Base_SetConfig+0x130>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d108      	bne.n	800a724 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a10      	ldr	r2, [pc, #64]	; (800a78c <TIM_Base_SetConfig+0x114>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00f      	beq.n	800a770 <TIM_Base_SetConfig+0xf8>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a12      	ldr	r2, [pc, #72]	; (800a79c <TIM_Base_SetConfig+0x124>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00b      	beq.n	800a770 <TIM_Base_SetConfig+0xf8>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a11      	ldr	r2, [pc, #68]	; (800a7a0 <TIM_Base_SetConfig+0x128>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d007      	beq.n	800a770 <TIM_Base_SetConfig+0xf8>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a10      	ldr	r2, [pc, #64]	; (800a7a4 <TIM_Base_SetConfig+0x12c>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d003      	beq.n	800a770 <TIM_Base_SetConfig+0xf8>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a0f      	ldr	r2, [pc, #60]	; (800a7a8 <TIM_Base_SetConfig+0x130>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d103      	bne.n	800a778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	691a      	ldr	r2, [r3, #16]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	615a      	str	r2, [r3, #20]
}
 800a77e:	bf00      	nop
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	40010000 	.word	0x40010000
 800a790:	40000400 	.word	0x40000400
 800a794:	40000800 	.word	0x40000800
 800a798:	40000c00 	.word	0x40000c00
 800a79c:	40010400 	.word	0x40010400
 800a7a0:	40014000 	.word	0x40014000
 800a7a4:	40014400 	.word	0x40014400
 800a7a8:	40014800 	.word	0x40014800

0800a7ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	f023 0201 	bic.w	r2, r3, #1
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4b37      	ldr	r3, [pc, #220]	; (800a8b4 <TIM_OC1_SetConfig+0x108>)
 800a7d8:	4013      	ands	r3, r2
 800a7da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f023 0303 	bic.w	r3, r3, #3
 800a7e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f023 0302 	bic.w	r3, r3, #2
 800a7f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a2d      	ldr	r2, [pc, #180]	; (800a8b8 <TIM_OC1_SetConfig+0x10c>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d00f      	beq.n	800a828 <TIM_OC1_SetConfig+0x7c>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a2c      	ldr	r2, [pc, #176]	; (800a8bc <TIM_OC1_SetConfig+0x110>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d00b      	beq.n	800a828 <TIM_OC1_SetConfig+0x7c>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a2b      	ldr	r2, [pc, #172]	; (800a8c0 <TIM_OC1_SetConfig+0x114>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d007      	beq.n	800a828 <TIM_OC1_SetConfig+0x7c>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a2a      	ldr	r2, [pc, #168]	; (800a8c4 <TIM_OC1_SetConfig+0x118>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d003      	beq.n	800a828 <TIM_OC1_SetConfig+0x7c>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a29      	ldr	r2, [pc, #164]	; (800a8c8 <TIM_OC1_SetConfig+0x11c>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d10c      	bne.n	800a842 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f023 0308 	bic.w	r3, r3, #8
 800a82e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	4313      	orrs	r3, r2
 800a838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f023 0304 	bic.w	r3, r3, #4
 800a840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a1c      	ldr	r2, [pc, #112]	; (800a8b8 <TIM_OC1_SetConfig+0x10c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00f      	beq.n	800a86a <TIM_OC1_SetConfig+0xbe>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a1b      	ldr	r2, [pc, #108]	; (800a8bc <TIM_OC1_SetConfig+0x110>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d00b      	beq.n	800a86a <TIM_OC1_SetConfig+0xbe>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a1a      	ldr	r2, [pc, #104]	; (800a8c0 <TIM_OC1_SetConfig+0x114>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d007      	beq.n	800a86a <TIM_OC1_SetConfig+0xbe>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a19      	ldr	r2, [pc, #100]	; (800a8c4 <TIM_OC1_SetConfig+0x118>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d003      	beq.n	800a86a <TIM_OC1_SetConfig+0xbe>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a18      	ldr	r2, [pc, #96]	; (800a8c8 <TIM_OC1_SetConfig+0x11c>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d111      	bne.n	800a88e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	695b      	ldr	r3, [r3, #20]
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	4313      	orrs	r3, r2
 800a882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	621a      	str	r2, [r3, #32]
}
 800a8a8:	bf00      	nop
 800a8aa:	371c      	adds	r7, #28
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	fffeff8f 	.word	0xfffeff8f
 800a8b8:	40010000 	.word	0x40010000
 800a8bc:	40010400 	.word	0x40010400
 800a8c0:	40014000 	.word	0x40014000
 800a8c4:	40014400 	.word	0x40014400
 800a8c8:	40014800 	.word	0x40014800

0800a8cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	f023 0210 	bic.w	r2, r3, #16
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	4b34      	ldr	r3, [pc, #208]	; (800a9c8 <TIM_OC2_SetConfig+0xfc>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	021b      	lsls	r3, r3, #8
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	f023 0320 	bic.w	r3, r3, #32
 800a916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	011b      	lsls	r3, r3, #4
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	4313      	orrs	r3, r2
 800a922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a29      	ldr	r2, [pc, #164]	; (800a9cc <TIM_OC2_SetConfig+0x100>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d003      	beq.n	800a934 <TIM_OC2_SetConfig+0x68>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a28      	ldr	r2, [pc, #160]	; (800a9d0 <TIM_OC2_SetConfig+0x104>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d10d      	bne.n	800a950 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a93a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	011b      	lsls	r3, r3, #4
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	4313      	orrs	r3, r2
 800a946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a94e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a1e      	ldr	r2, [pc, #120]	; (800a9cc <TIM_OC2_SetConfig+0x100>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d00f      	beq.n	800a978 <TIM_OC2_SetConfig+0xac>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a1d      	ldr	r2, [pc, #116]	; (800a9d0 <TIM_OC2_SetConfig+0x104>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d00b      	beq.n	800a978 <TIM_OC2_SetConfig+0xac>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a1c      	ldr	r2, [pc, #112]	; (800a9d4 <TIM_OC2_SetConfig+0x108>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d007      	beq.n	800a978 <TIM_OC2_SetConfig+0xac>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a1b      	ldr	r2, [pc, #108]	; (800a9d8 <TIM_OC2_SetConfig+0x10c>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d003      	beq.n	800a978 <TIM_OC2_SetConfig+0xac>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a1a      	ldr	r2, [pc, #104]	; (800a9dc <TIM_OC2_SetConfig+0x110>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d113      	bne.n	800a9a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a97e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	4313      	orrs	r3, r2
 800a992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	693a      	ldr	r2, [r7, #16]
 800a9a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	697a      	ldr	r2, [r7, #20]
 800a9b8:	621a      	str	r2, [r3, #32]
}
 800a9ba:	bf00      	nop
 800a9bc:	371c      	adds	r7, #28
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	feff8fff 	.word	0xfeff8fff
 800a9cc:	40010000 	.word	0x40010000
 800a9d0:	40010400 	.word	0x40010400
 800a9d4:	40014000 	.word	0x40014000
 800a9d8:	40014400 	.word	0x40014400
 800a9dc:	40014800 	.word	0x40014800

0800a9e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 0303 	bic.w	r3, r3, #3
 800aa16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	021b      	lsls	r3, r3, #8
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a27      	ldr	r2, [pc, #156]	; (800aad8 <TIM_OC3_SetConfig+0xf8>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d003      	beq.n	800aa46 <TIM_OC3_SetConfig+0x66>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a26      	ldr	r2, [pc, #152]	; (800aadc <TIM_OC3_SetConfig+0xfc>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d10d      	bne.n	800aa62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	021b      	lsls	r3, r3, #8
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a1c      	ldr	r2, [pc, #112]	; (800aad8 <TIM_OC3_SetConfig+0xf8>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d00f      	beq.n	800aa8a <TIM_OC3_SetConfig+0xaa>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a1b      	ldr	r2, [pc, #108]	; (800aadc <TIM_OC3_SetConfig+0xfc>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d00b      	beq.n	800aa8a <TIM_OC3_SetConfig+0xaa>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a1a      	ldr	r2, [pc, #104]	; (800aae0 <TIM_OC3_SetConfig+0x100>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d007      	beq.n	800aa8a <TIM_OC3_SetConfig+0xaa>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a19      	ldr	r2, [pc, #100]	; (800aae4 <TIM_OC3_SetConfig+0x104>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d003      	beq.n	800aa8a <TIM_OC3_SetConfig+0xaa>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a18      	ldr	r2, [pc, #96]	; (800aae8 <TIM_OC3_SetConfig+0x108>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d113      	bne.n	800aab2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	011b      	lsls	r3, r3, #4
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	011b      	lsls	r3, r3, #4
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	621a      	str	r2, [r3, #32]
}
 800aacc:	bf00      	nop
 800aace:	371c      	adds	r7, #28
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	40010000 	.word	0x40010000
 800aadc:	40010400 	.word	0x40010400
 800aae0:	40014000 	.word	0x40014000
 800aae4:	40014400 	.word	0x40014400
 800aae8:	40014800 	.word	0x40014800

0800aaec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	021b      	lsls	r3, r3, #8
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	031b      	lsls	r3, r3, #12
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a18      	ldr	r2, [pc, #96]	; (800aba8 <TIM_OC4_SetConfig+0xbc>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d00f      	beq.n	800ab6c <TIM_OC4_SetConfig+0x80>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a17      	ldr	r2, [pc, #92]	; (800abac <TIM_OC4_SetConfig+0xc0>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d00b      	beq.n	800ab6c <TIM_OC4_SetConfig+0x80>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a16      	ldr	r2, [pc, #88]	; (800abb0 <TIM_OC4_SetConfig+0xc4>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d007      	beq.n	800ab6c <TIM_OC4_SetConfig+0x80>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a15      	ldr	r2, [pc, #84]	; (800abb4 <TIM_OC4_SetConfig+0xc8>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d003      	beq.n	800ab6c <TIM_OC4_SetConfig+0x80>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a14      	ldr	r2, [pc, #80]	; (800abb8 <TIM_OC4_SetConfig+0xcc>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d109      	bne.n	800ab80 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	019b      	lsls	r3, r3, #6
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	685a      	ldr	r2, [r3, #4]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	621a      	str	r2, [r3, #32]
}
 800ab9a:	bf00      	nop
 800ab9c:	371c      	adds	r7, #28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	40010000 	.word	0x40010000
 800abac:	40010400 	.word	0x40010400
 800abb0:	40014000 	.word	0x40014000
 800abb4:	40014400 	.word	0x40014400
 800abb8:	40014800 	.word	0x40014800

0800abbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800abfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	041b      	lsls	r3, r3, #16
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a17      	ldr	r2, [pc, #92]	; (800ac6c <TIM_OC5_SetConfig+0xb0>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00f      	beq.n	800ac32 <TIM_OC5_SetConfig+0x76>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a16      	ldr	r2, [pc, #88]	; (800ac70 <TIM_OC5_SetConfig+0xb4>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00b      	beq.n	800ac32 <TIM_OC5_SetConfig+0x76>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a15      	ldr	r2, [pc, #84]	; (800ac74 <TIM_OC5_SetConfig+0xb8>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d007      	beq.n	800ac32 <TIM_OC5_SetConfig+0x76>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a14      	ldr	r2, [pc, #80]	; (800ac78 <TIM_OC5_SetConfig+0xbc>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d003      	beq.n	800ac32 <TIM_OC5_SetConfig+0x76>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a13      	ldr	r2, [pc, #76]	; (800ac7c <TIM_OC5_SetConfig+0xc0>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d109      	bne.n	800ac46 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	021b      	lsls	r3, r3, #8
 800ac40:	697a      	ldr	r2, [r7, #20]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	621a      	str	r2, [r3, #32]
}
 800ac60:	bf00      	nop
 800ac62:	371c      	adds	r7, #28
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	40010000 	.word	0x40010000
 800ac70:	40010400 	.word	0x40010400
 800ac74:	40014000 	.word	0x40014000
 800ac78:	40014400 	.word	0x40014400
 800ac7c:	40014800 	.word	0x40014800

0800ac80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	021b      	lsls	r3, r3, #8
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	4313      	orrs	r3, r2
 800acba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	051b      	lsls	r3, r3, #20
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	4313      	orrs	r3, r2
 800acce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a18      	ldr	r2, [pc, #96]	; (800ad34 <TIM_OC6_SetConfig+0xb4>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d00f      	beq.n	800acf8 <TIM_OC6_SetConfig+0x78>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a17      	ldr	r2, [pc, #92]	; (800ad38 <TIM_OC6_SetConfig+0xb8>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d00b      	beq.n	800acf8 <TIM_OC6_SetConfig+0x78>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a16      	ldr	r2, [pc, #88]	; (800ad3c <TIM_OC6_SetConfig+0xbc>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d007      	beq.n	800acf8 <TIM_OC6_SetConfig+0x78>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a15      	ldr	r2, [pc, #84]	; (800ad40 <TIM_OC6_SetConfig+0xc0>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d003      	beq.n	800acf8 <TIM_OC6_SetConfig+0x78>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a14      	ldr	r2, [pc, #80]	; (800ad44 <TIM_OC6_SetConfig+0xc4>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d109      	bne.n	800ad0c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800acfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	695b      	ldr	r3, [r3, #20]
 800ad04:	029b      	lsls	r3, r3, #10
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	621a      	str	r2, [r3, #32]
}
 800ad26:	bf00      	nop
 800ad28:	371c      	adds	r7, #28
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40010400 	.word	0x40010400
 800ad3c:	40014000 	.word	0x40014000
 800ad40:	40014400 	.word	0x40014400
 800ad44:	40014800 	.word	0x40014800

0800ad48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b087      	sub	sp, #28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	f023 0201 	bic.w	r2, r3, #1
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	011b      	lsls	r3, r3, #4
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f023 030a 	bic.w	r3, r3, #10
 800ad84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	621a      	str	r2, [r3, #32]
}
 800ad9a:	bf00      	nop
 800ad9c:	371c      	adds	r7, #28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b087      	sub	sp, #28
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	f023 0210 	bic.w	r2, r3, #16
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800add0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	031b      	lsls	r3, r3, #12
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	4313      	orrs	r3, r2
 800adda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ade2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	011b      	lsls	r3, r3, #4
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	4313      	orrs	r3, r2
 800adec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	621a      	str	r2, [r3, #32]
}
 800adfa:	bf00      	nop
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
	...

0800ae08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	4b09      	ldr	r3, [pc, #36]	; (800ae40 <TIM_ITRx_SetConfig+0x38>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	f043 0307 	orr.w	r3, r3, #7
 800ae2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	609a      	str	r2, [r3, #8]
}
 800ae32:	bf00      	nop
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	ffcfff8f 	.word	0xffcfff8f

0800ae44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b087      	sub	sp, #28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	021a      	lsls	r2, r3, #8
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	431a      	orrs	r2, r3
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	697a      	ldr	r2, [r7, #20]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	609a      	str	r2, [r3, #8]
}
 800ae78:	bf00      	nop
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b087      	sub	sp, #28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	f003 031f 	and.w	r3, r3, #31
 800ae96:	2201      	movs	r2, #1
 800ae98:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6a1a      	ldr	r2, [r3, #32]
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	43db      	mvns	r3, r3
 800aea6:	401a      	ands	r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6a1a      	ldr	r2, [r3, #32]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f003 031f 	and.w	r3, r3, #31
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	fa01 f303 	lsl.w	r3, r1, r3
 800aebc:	431a      	orrs	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	621a      	str	r2, [r3, #32]
}
 800aec2:	bf00      	nop
 800aec4:	371c      	adds	r7, #28
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
	...

0800aed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e068      	b.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2202      	movs	r2, #2
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a2e      	ldr	r2, [pc, #184]	; (800afc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d004      	beq.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a2d      	ldr	r2, [pc, #180]	; (800afcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d108      	bne.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a1e      	ldr	r2, [pc, #120]	; (800afc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d01d      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af5a:	d018      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a1b      	ldr	r2, [pc, #108]	; (800afd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d013      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a1a      	ldr	r2, [pc, #104]	; (800afd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d00e      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a18      	ldr	r2, [pc, #96]	; (800afd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d009      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a13      	ldr	r2, [pc, #76]	; (800afcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d004      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a14      	ldr	r2, [pc, #80]	; (800afdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d10c      	bne.n	800afa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	40010000 	.word	0x40010000
 800afcc:	40010400 	.word	0x40010400
 800afd0:	40000400 	.word	0x40000400
 800afd4:	40000800 	.word	0x40000800
 800afd8:	40000c00 	.word	0x40000c00
 800afdc:	40001800 	.word	0x40001800

0800afe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d101      	bne.n	800affc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aff8:	2302      	movs	r3, #2
 800affa:	e065      	b.n	800b0c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	4313      	orrs	r3, r2
 800b010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4313      	orrs	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	4313      	orrs	r3, r2
 800b048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	4313      	orrs	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b062:	4313      	orrs	r3, r2
 800b064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	041b      	lsls	r3, r3, #16
 800b072:	4313      	orrs	r3, r2
 800b074:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a16      	ldr	r2, [pc, #88]	; (800b0d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d004      	beq.n	800b08a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a14      	ldr	r2, [pc, #80]	; (800b0d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d115      	bne.n	800b0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b094:	051b      	lsls	r3, r3, #20
 800b096:	4313      	orrs	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	69db      	ldr	r3, [r3, #28]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	40010000 	.word	0x40010000
 800b0d8:	40010400 	.word	0x40010400

0800b0dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d101      	bne.n	800b0ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e042      	b.n	800b174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d106      	bne.n	800b106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7f6 fd09 	bl	8001b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2224      	movs	r2, #36	; 0x24
 800b10a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f022 0201 	bic.w	r2, r2, #1
 800b11c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fb60 	bl	800b7e4 <UART_SetConfig>
 800b124:	4603      	mov	r3, r0
 800b126:	2b01      	cmp	r3, #1
 800b128:	d101      	bne.n	800b12e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e022      	b.n	800b174 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f001 f8b4 	bl	800c2a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b14a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	689a      	ldr	r2, [r3, #8]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b15a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f042 0201 	orr.w	r2, r2, #1
 800b16a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f001 f93b 	bl	800c3e8 <UART_CheckIdleState>
 800b172:	4603      	mov	r3, r0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	4613      	mov	r3, r2
 800b188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b190:	2b20      	cmp	r3, #32
 800b192:	d131      	bne.n	800b1f8 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <HAL_UART_Receive_DMA+0x24>
 800b19a:	88fb      	ldrh	r3, [r7, #6]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e02a      	b.n	800b1fa <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d101      	bne.n	800b1b2 <HAL_UART_Receive_DMA+0x36>
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	e023      	b.n	800b1fa <HAL_UART_Receive_DMA+0x7e>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a0f      	ldr	r2, [pc, #60]	; (800b204 <HAL_UART_Receive_DMA+0x88>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d00e      	beq.n	800b1e8 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d007      	beq.n	800b1e8 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b1e6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b1e8:	88fb      	ldrh	r3, [r7, #6]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	68b9      	ldr	r1, [r7, #8]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f001 f9c6 	bl	800c580 <UART_Start_Receive_DMA>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	e000      	b.n	800b1fa <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b1f8:	2302      	movs	r3, #2
  }
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	58000c00 	.word	0x58000c00

0800b208 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b088      	sub	sp, #32
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	69db      	ldr	r3, [r3, #28]
 800b216:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b228:	69fa      	ldr	r2, [r7, #28]
 800b22a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b22e:	4013      	ands	r3, r2
 800b230:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d118      	bne.n	800b26a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	f003 0320 	and.w	r3, r3, #32
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d013      	beq.n	800b26a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	f003 0320 	and.w	r3, r3, #32
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d104      	bne.n	800b256 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d009      	beq.n	800b26a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 8282 	beq.w	800b764 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	4798      	blx	r3
      }
      return;
 800b268:	e27c      	b.n	800b764 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 80ef 	beq.w	800b450 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	4b73      	ldr	r3, [pc, #460]	; (800b444 <HAL_UART_IRQHandler+0x23c>)
 800b276:	4013      	ands	r3, r2
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d105      	bne.n	800b288 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b27c:	69ba      	ldr	r2, [r7, #24]
 800b27e:	4b72      	ldr	r3, [pc, #456]	; (800b448 <HAL_UART_IRQHandler+0x240>)
 800b280:	4013      	ands	r3, r2
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 80e4 	beq.w	800b450 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d010      	beq.n	800b2b4 <HAL_UART_IRQHandler+0xac>
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00b      	beq.n	800b2b4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2aa:	f043 0201 	orr.w	r2, r3, #1
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	f003 0302 	and.w	r3, r3, #2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d010      	beq.n	800b2e0 <HAL_UART_IRQHandler+0xd8>
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00b      	beq.n	800b2e0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2202      	movs	r2, #2
 800b2ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2d6:	f043 0204 	orr.w	r2, r3, #4
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	f003 0304 	and.w	r3, r3, #4
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d010      	beq.n	800b30c <HAL_UART_IRQHandler+0x104>
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00b      	beq.n	800b30c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2204      	movs	r2, #4
 800b2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b302:	f043 0202 	orr.w	r2, r3, #2
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	f003 0308 	and.w	r3, r3, #8
 800b312:	2b00      	cmp	r3, #0
 800b314:	d015      	beq.n	800b342 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	f003 0320 	and.w	r3, r3, #32
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d104      	bne.n	800b32a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	4b48      	ldr	r3, [pc, #288]	; (800b444 <HAL_UART_IRQHandler+0x23c>)
 800b324:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00b      	beq.n	800b342 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2208      	movs	r2, #8
 800b330:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b338:	f043 0208 	orr.w	r2, r3, #8
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d011      	beq.n	800b370 <HAL_UART_IRQHandler+0x168>
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00c      	beq.n	800b370 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b35e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b366:	f043 0220 	orr.w	r2, r3, #32
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 81f6 	beq.w	800b768 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	f003 0320 	and.w	r3, r3, #32
 800b382:	2b00      	cmp	r3, #0
 800b384:	d011      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	f003 0320 	and.w	r3, r3, #32
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d104      	bne.n	800b39a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d007      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3b0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3bc:	2b40      	cmp	r3, #64	; 0x40
 800b3be:	d004      	beq.n	800b3ca <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d031      	beq.n	800b42e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 f964 	bl	800c698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3da:	2b40      	cmp	r3, #64	; 0x40
 800b3dc:	d123      	bne.n	800b426 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	689a      	ldr	r2, [r3, #8]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3ec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d013      	beq.n	800b41e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3fa:	4a14      	ldr	r2, [pc, #80]	; (800b44c <HAL_UART_IRQHandler+0x244>)
 800b3fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b402:	4618      	mov	r0, r3
 800b404:	f7f8 f888 	bl	8003518 <HAL_DMA_Abort_IT>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d017      	beq.n	800b43e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b41c:	e00f      	b.n	800b43e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f9ca 	bl	800b7b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b424:	e00b      	b.n	800b43e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f9c6 	bl	800b7b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b42c:	e007      	b.n	800b43e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f9c2 	bl	800b7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b43c:	e194      	b.n	800b768 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b43e:	bf00      	nop
    return;
 800b440:	e192      	b.n	800b768 <HAL_UART_IRQHandler+0x560>
 800b442:	bf00      	nop
 800b444:	10000001 	.word	0x10000001
 800b448:	04000120 	.word	0x04000120
 800b44c:	0800c84b 	.word	0x0800c84b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b454:	2b01      	cmp	r3, #1
 800b456:	f040 810f 	bne.w	800b678 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	f003 0310 	and.w	r3, r3, #16
 800b460:	2b00      	cmp	r3, #0
 800b462:	f000 8109 	beq.w	800b678 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	f003 0310 	and.w	r3, r3, #16
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f000 8103 	beq.w	800b678 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2210      	movs	r2, #16
 800b478:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b484:	2b40      	cmp	r3, #64	; 0x40
 800b486:	f040 80bb 	bne.w	800b600 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a96      	ldr	r2, [pc, #600]	; (800b6ec <HAL_UART_IRQHandler+0x4e4>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d059      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a94      	ldr	r2, [pc, #592]	; (800b6f0 <HAL_UART_IRQHandler+0x4e8>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d053      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a92      	ldr	r2, [pc, #584]	; (800b6f4 <HAL_UART_IRQHandler+0x4ec>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d04d      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a90      	ldr	r2, [pc, #576]	; (800b6f8 <HAL_UART_IRQHandler+0x4f0>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d047      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a8e      	ldr	r2, [pc, #568]	; (800b6fc <HAL_UART_IRQHandler+0x4f4>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d041      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a8c      	ldr	r2, [pc, #560]	; (800b700 <HAL_UART_IRQHandler+0x4f8>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d03b      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a8a      	ldr	r2, [pc, #552]	; (800b704 <HAL_UART_IRQHandler+0x4fc>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d035      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a88      	ldr	r2, [pc, #544]	; (800b708 <HAL_UART_IRQHandler+0x500>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d02f      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a86      	ldr	r2, [pc, #536]	; (800b70c <HAL_UART_IRQHandler+0x504>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d029      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a84      	ldr	r2, [pc, #528]	; (800b710 <HAL_UART_IRQHandler+0x508>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d023      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a82      	ldr	r2, [pc, #520]	; (800b714 <HAL_UART_IRQHandler+0x50c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d01d      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a80      	ldr	r2, [pc, #512]	; (800b718 <HAL_UART_IRQHandler+0x510>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d017      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a7e      	ldr	r2, [pc, #504]	; (800b71c <HAL_UART_IRQHandler+0x514>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d011      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a7c      	ldr	r2, [pc, #496]	; (800b720 <HAL_UART_IRQHandler+0x518>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d00b      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a7a      	ldr	r2, [pc, #488]	; (800b724 <HAL_UART_IRQHandler+0x51c>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d005      	beq.n	800b54a <HAL_UART_IRQHandler+0x342>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a78      	ldr	r2, [pc, #480]	; (800b728 <HAL_UART_IRQHandler+0x520>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d105      	bne.n	800b556 <HAL_UART_IRQHandler+0x34e>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	b29b      	uxth	r3, r3
 800b554:	e004      	b.n	800b560 <HAL_UART_IRQHandler+0x358>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b562:	893b      	ldrh	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	f000 8101 	beq.w	800b76c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b570:	893a      	ldrh	r2, [r7, #8]
 800b572:	429a      	cmp	r2, r3
 800b574:	f080 80fa 	bcs.w	800b76c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	893a      	ldrh	r2, [r7, #8]
 800b57c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b58a:	d02b      	beq.n	800b5e4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b59a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	689a      	ldr	r2, [r3, #8]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f022 0201 	bic.w	r2, r2, #1
 800b5aa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	689a      	ldr	r2, [r3, #8]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5ba:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2220      	movs	r2, #32
 800b5c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f022 0210 	bic.w	r2, r2, #16
 800b5d8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7f7 fc7c 	bl	8002edc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f8e7 	bl	800b7cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5fe:	e0b5      	b.n	800b76c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b618:	b29b      	uxth	r3, r3
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	f000 80a8 	beq.w	800b770 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b620:	897b      	ldrh	r3, [r7, #10]
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 80a4 	beq.w	800b770 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b636:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6899      	ldr	r1, [r3, #8]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	4b3a      	ldr	r3, [pc, #232]	; (800b72c <HAL_UART_IRQHandler+0x524>)
 800b644:	400b      	ands	r3, r1
 800b646:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2220      	movs	r2, #32
 800b64c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f022 0210 	bic.w	r2, r2, #16
 800b66a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b66c:	897b      	ldrh	r3, [r7, #10]
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f8ab 	bl	800b7cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b676:	e07b      	b.n	800b770 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00d      	beq.n	800b69e <HAL_UART_IRQHandler+0x496>
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d008      	beq.n	800b69e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f001 f907 	bl	800c8aa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b69c:	e06b      	b.n	800b776 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d012      	beq.n	800b6ce <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d104      	bne.n	800b6bc <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d008      	beq.n	800b6ce <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d057      	beq.n	800b774 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	4798      	blx	r3
    }
    return;
 800b6cc:	e052      	b.n	800b774 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d02b      	beq.n	800b730 <HAL_UART_IRQHandler+0x528>
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d026      	beq.n	800b730 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f001 f8c7 	bl	800c876 <UART_EndTransmit_IT>
    return;
 800b6e8:	e045      	b.n	800b776 <HAL_UART_IRQHandler+0x56e>
 800b6ea:	bf00      	nop
 800b6ec:	40020010 	.word	0x40020010
 800b6f0:	40020028 	.word	0x40020028
 800b6f4:	40020040 	.word	0x40020040
 800b6f8:	40020058 	.word	0x40020058
 800b6fc:	40020070 	.word	0x40020070
 800b700:	40020088 	.word	0x40020088
 800b704:	400200a0 	.word	0x400200a0
 800b708:	400200b8 	.word	0x400200b8
 800b70c:	40020410 	.word	0x40020410
 800b710:	40020428 	.word	0x40020428
 800b714:	40020440 	.word	0x40020440
 800b718:	40020458 	.word	0x40020458
 800b71c:	40020470 	.word	0x40020470
 800b720:	40020488 	.word	0x40020488
 800b724:	400204a0 	.word	0x400204a0
 800b728:	400204b8 	.word	0x400204b8
 800b72c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b736:	2b00      	cmp	r3, #0
 800b738:	d008      	beq.n	800b74c <HAL_UART_IRQHandler+0x544>
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b740:	2b00      	cmp	r3, #0
 800b742:	d003      	beq.n	800b74c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f001 f8c4 	bl	800c8d2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b74a:	e014      	b.n	800b776 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00f      	beq.n	800b776 <HAL_UART_IRQHandler+0x56e>
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	da0c      	bge.n	800b776 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f001 f8ae 	bl	800c8be <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b762:	e008      	b.n	800b776 <HAL_UART_IRQHandler+0x56e>
      return;
 800b764:	bf00      	nop
 800b766:	e006      	b.n	800b776 <HAL_UART_IRQHandler+0x56e>
    return;
 800b768:	bf00      	nop
 800b76a:	e004      	b.n	800b776 <HAL_UART_IRQHandler+0x56e>
      return;
 800b76c:	bf00      	nop
 800b76e:	e002      	b.n	800b776 <HAL_UART_IRQHandler+0x56e>
      return;
 800b770:	bf00      	nop
 800b772:	e000      	b.n	800b776 <HAL_UART_IRQHandler+0x56e>
    return;
 800b774:	bf00      	nop
  }
}
 800b776:	3720      	adds	r7, #32
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7e4:	b5b0      	push	{r4, r5, r7, lr}
 800b7e6:	b08e      	sub	sp, #56	; 0x38
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	689a      	ldr	r2, [r3, #8]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	431a      	orrs	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	69db      	ldr	r3, [r3, #28]
 800b806:	4313      	orrs	r3, r2
 800b808:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	4bbf      	ldr	r3, [pc, #764]	; (800bb10 <UART_SetConfig+0x32c>)
 800b812:	4013      	ands	r3, r2
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	6812      	ldr	r2, [r2, #0]
 800b818:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b81a:	430b      	orrs	r3, r1
 800b81c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68da      	ldr	r2, [r3, #12]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	430a      	orrs	r2, r1
 800b832:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4ab5      	ldr	r2, [pc, #724]	; (800bb14 <UART_SetConfig+0x330>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d004      	beq.n	800b84e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a1b      	ldr	r3, [r3, #32]
 800b848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b84a:	4313      	orrs	r3, r2
 800b84c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689a      	ldr	r2, [r3, #8]
 800b854:	4bb0      	ldr	r3, [pc, #704]	; (800bb18 <UART_SetConfig+0x334>)
 800b856:	4013      	ands	r3, r2
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	6812      	ldr	r2, [r2, #0]
 800b85c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b85e:	430b      	orrs	r3, r1
 800b860:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b868:	f023 010f 	bic.w	r1, r3, #15
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	430a      	orrs	r2, r1
 800b876:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4aa7      	ldr	r2, [pc, #668]	; (800bb1c <UART_SetConfig+0x338>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d176      	bne.n	800b970 <UART_SetConfig+0x18c>
 800b882:	4ba7      	ldr	r3, [pc, #668]	; (800bb20 <UART_SetConfig+0x33c>)
 800b884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b88a:	2b28      	cmp	r3, #40	; 0x28
 800b88c:	d86c      	bhi.n	800b968 <UART_SetConfig+0x184>
 800b88e:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <UART_SetConfig+0xb0>)
 800b890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b894:	0800b939 	.word	0x0800b939
 800b898:	0800b969 	.word	0x0800b969
 800b89c:	0800b969 	.word	0x0800b969
 800b8a0:	0800b969 	.word	0x0800b969
 800b8a4:	0800b969 	.word	0x0800b969
 800b8a8:	0800b969 	.word	0x0800b969
 800b8ac:	0800b969 	.word	0x0800b969
 800b8b0:	0800b969 	.word	0x0800b969
 800b8b4:	0800b941 	.word	0x0800b941
 800b8b8:	0800b969 	.word	0x0800b969
 800b8bc:	0800b969 	.word	0x0800b969
 800b8c0:	0800b969 	.word	0x0800b969
 800b8c4:	0800b969 	.word	0x0800b969
 800b8c8:	0800b969 	.word	0x0800b969
 800b8cc:	0800b969 	.word	0x0800b969
 800b8d0:	0800b969 	.word	0x0800b969
 800b8d4:	0800b949 	.word	0x0800b949
 800b8d8:	0800b969 	.word	0x0800b969
 800b8dc:	0800b969 	.word	0x0800b969
 800b8e0:	0800b969 	.word	0x0800b969
 800b8e4:	0800b969 	.word	0x0800b969
 800b8e8:	0800b969 	.word	0x0800b969
 800b8ec:	0800b969 	.word	0x0800b969
 800b8f0:	0800b969 	.word	0x0800b969
 800b8f4:	0800b951 	.word	0x0800b951
 800b8f8:	0800b969 	.word	0x0800b969
 800b8fc:	0800b969 	.word	0x0800b969
 800b900:	0800b969 	.word	0x0800b969
 800b904:	0800b969 	.word	0x0800b969
 800b908:	0800b969 	.word	0x0800b969
 800b90c:	0800b969 	.word	0x0800b969
 800b910:	0800b969 	.word	0x0800b969
 800b914:	0800b959 	.word	0x0800b959
 800b918:	0800b969 	.word	0x0800b969
 800b91c:	0800b969 	.word	0x0800b969
 800b920:	0800b969 	.word	0x0800b969
 800b924:	0800b969 	.word	0x0800b969
 800b928:	0800b969 	.word	0x0800b969
 800b92c:	0800b969 	.word	0x0800b969
 800b930:	0800b969 	.word	0x0800b969
 800b934:	0800b961 	.word	0x0800b961
 800b938:	2301      	movs	r3, #1
 800b93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b93e:	e222      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b940:	2304      	movs	r3, #4
 800b942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b946:	e21e      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b948:	2308      	movs	r3, #8
 800b94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b94e:	e21a      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b950:	2310      	movs	r3, #16
 800b952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b956:	e216      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b958:	2320      	movs	r3, #32
 800b95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b95e:	e212      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b960:	2340      	movs	r3, #64	; 0x40
 800b962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b966:	e20e      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b968:	2380      	movs	r3, #128	; 0x80
 800b96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b96e:	e20a      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a6b      	ldr	r2, [pc, #428]	; (800bb24 <UART_SetConfig+0x340>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d130      	bne.n	800b9dc <UART_SetConfig+0x1f8>
 800b97a:	4b69      	ldr	r3, [pc, #420]	; (800bb20 <UART_SetConfig+0x33c>)
 800b97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b97e:	f003 0307 	and.w	r3, r3, #7
 800b982:	2b05      	cmp	r3, #5
 800b984:	d826      	bhi.n	800b9d4 <UART_SetConfig+0x1f0>
 800b986:	a201      	add	r2, pc, #4	; (adr r2, 800b98c <UART_SetConfig+0x1a8>)
 800b988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98c:	0800b9a5 	.word	0x0800b9a5
 800b990:	0800b9ad 	.word	0x0800b9ad
 800b994:	0800b9b5 	.word	0x0800b9b5
 800b998:	0800b9bd 	.word	0x0800b9bd
 800b99c:	0800b9c5 	.word	0x0800b9c5
 800b9a0:	0800b9cd 	.word	0x0800b9cd
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9aa:	e1ec      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b9ac:	2304      	movs	r3, #4
 800b9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9b2:	e1e8      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b9b4:	2308      	movs	r3, #8
 800b9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ba:	e1e4      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b9bc:	2310      	movs	r3, #16
 800b9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9c2:	e1e0      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b9c4:	2320      	movs	r3, #32
 800b9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ca:	e1dc      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b9cc:	2340      	movs	r3, #64	; 0x40
 800b9ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9d2:	e1d8      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b9d4:	2380      	movs	r3, #128	; 0x80
 800b9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9da:	e1d4      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a51      	ldr	r2, [pc, #324]	; (800bb28 <UART_SetConfig+0x344>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d130      	bne.n	800ba48 <UART_SetConfig+0x264>
 800b9e6:	4b4e      	ldr	r3, [pc, #312]	; (800bb20 <UART_SetConfig+0x33c>)
 800b9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ea:	f003 0307 	and.w	r3, r3, #7
 800b9ee:	2b05      	cmp	r3, #5
 800b9f0:	d826      	bhi.n	800ba40 <UART_SetConfig+0x25c>
 800b9f2:	a201      	add	r2, pc, #4	; (adr r2, 800b9f8 <UART_SetConfig+0x214>)
 800b9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f8:	0800ba11 	.word	0x0800ba11
 800b9fc:	0800ba19 	.word	0x0800ba19
 800ba00:	0800ba21 	.word	0x0800ba21
 800ba04:	0800ba29 	.word	0x0800ba29
 800ba08:	0800ba31 	.word	0x0800ba31
 800ba0c:	0800ba39 	.word	0x0800ba39
 800ba10:	2300      	movs	r3, #0
 800ba12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba16:	e1b6      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba18:	2304      	movs	r3, #4
 800ba1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba1e:	e1b2      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba20:	2308      	movs	r3, #8
 800ba22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba26:	e1ae      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba28:	2310      	movs	r3, #16
 800ba2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba2e:	e1aa      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba30:	2320      	movs	r3, #32
 800ba32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba36:	e1a6      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba38:	2340      	movs	r3, #64	; 0x40
 800ba3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba3e:	e1a2      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba40:	2380      	movs	r3, #128	; 0x80
 800ba42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba46:	e19e      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a37      	ldr	r2, [pc, #220]	; (800bb2c <UART_SetConfig+0x348>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d130      	bne.n	800bab4 <UART_SetConfig+0x2d0>
 800ba52:	4b33      	ldr	r3, [pc, #204]	; (800bb20 <UART_SetConfig+0x33c>)
 800ba54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba56:	f003 0307 	and.w	r3, r3, #7
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d826      	bhi.n	800baac <UART_SetConfig+0x2c8>
 800ba5e:	a201      	add	r2, pc, #4	; (adr r2, 800ba64 <UART_SetConfig+0x280>)
 800ba60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba64:	0800ba7d 	.word	0x0800ba7d
 800ba68:	0800ba85 	.word	0x0800ba85
 800ba6c:	0800ba8d 	.word	0x0800ba8d
 800ba70:	0800ba95 	.word	0x0800ba95
 800ba74:	0800ba9d 	.word	0x0800ba9d
 800ba78:	0800baa5 	.word	0x0800baa5
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba82:	e180      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba84:	2304      	movs	r3, #4
 800ba86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba8a:	e17c      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba8c:	2308      	movs	r3, #8
 800ba8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba92:	e178      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba94:	2310      	movs	r3, #16
 800ba96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba9a:	e174      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800ba9c:	2320      	movs	r3, #32
 800ba9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa2:	e170      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800baa4:	2340      	movs	r3, #64	; 0x40
 800baa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baaa:	e16c      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800baac:	2380      	movs	r3, #128	; 0x80
 800baae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab2:	e168      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a1d      	ldr	r2, [pc, #116]	; (800bb30 <UART_SetConfig+0x34c>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d142      	bne.n	800bb44 <UART_SetConfig+0x360>
 800babe:	4b18      	ldr	r3, [pc, #96]	; (800bb20 <UART_SetConfig+0x33c>)
 800bac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac2:	f003 0307 	and.w	r3, r3, #7
 800bac6:	2b05      	cmp	r3, #5
 800bac8:	d838      	bhi.n	800bb3c <UART_SetConfig+0x358>
 800baca:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <UART_SetConfig+0x2ec>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bae9 	.word	0x0800bae9
 800bad4:	0800baf1 	.word	0x0800baf1
 800bad8:	0800baf9 	.word	0x0800baf9
 800badc:	0800bb01 	.word	0x0800bb01
 800bae0:	0800bb09 	.word	0x0800bb09
 800bae4:	0800bb35 	.word	0x0800bb35
 800bae8:	2300      	movs	r3, #0
 800baea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baee:	e14a      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800baf0:	2304      	movs	r3, #4
 800baf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baf6:	e146      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800baf8:	2308      	movs	r3, #8
 800bafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bafe:	e142      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bb00:	2310      	movs	r3, #16
 800bb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb06:	e13e      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bb08:	2320      	movs	r3, #32
 800bb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb0e:	e13a      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bb10:	cfff69f3 	.word	0xcfff69f3
 800bb14:	58000c00 	.word	0x58000c00
 800bb18:	11fff4ff 	.word	0x11fff4ff
 800bb1c:	40011000 	.word	0x40011000
 800bb20:	58024400 	.word	0x58024400
 800bb24:	40004400 	.word	0x40004400
 800bb28:	40004800 	.word	0x40004800
 800bb2c:	40004c00 	.word	0x40004c00
 800bb30:	40005000 	.word	0x40005000
 800bb34:	2340      	movs	r3, #64	; 0x40
 800bb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb3a:	e124      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bb3c:	2380      	movs	r3, #128	; 0x80
 800bb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb42:	e120      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4acc      	ldr	r2, [pc, #816]	; (800be7c <UART_SetConfig+0x698>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d176      	bne.n	800bc3c <UART_SetConfig+0x458>
 800bb4e:	4bcc      	ldr	r3, [pc, #816]	; (800be80 <UART_SetConfig+0x69c>)
 800bb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb56:	2b28      	cmp	r3, #40	; 0x28
 800bb58:	d86c      	bhi.n	800bc34 <UART_SetConfig+0x450>
 800bb5a:	a201      	add	r2, pc, #4	; (adr r2, 800bb60 <UART_SetConfig+0x37c>)
 800bb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb60:	0800bc05 	.word	0x0800bc05
 800bb64:	0800bc35 	.word	0x0800bc35
 800bb68:	0800bc35 	.word	0x0800bc35
 800bb6c:	0800bc35 	.word	0x0800bc35
 800bb70:	0800bc35 	.word	0x0800bc35
 800bb74:	0800bc35 	.word	0x0800bc35
 800bb78:	0800bc35 	.word	0x0800bc35
 800bb7c:	0800bc35 	.word	0x0800bc35
 800bb80:	0800bc0d 	.word	0x0800bc0d
 800bb84:	0800bc35 	.word	0x0800bc35
 800bb88:	0800bc35 	.word	0x0800bc35
 800bb8c:	0800bc35 	.word	0x0800bc35
 800bb90:	0800bc35 	.word	0x0800bc35
 800bb94:	0800bc35 	.word	0x0800bc35
 800bb98:	0800bc35 	.word	0x0800bc35
 800bb9c:	0800bc35 	.word	0x0800bc35
 800bba0:	0800bc15 	.word	0x0800bc15
 800bba4:	0800bc35 	.word	0x0800bc35
 800bba8:	0800bc35 	.word	0x0800bc35
 800bbac:	0800bc35 	.word	0x0800bc35
 800bbb0:	0800bc35 	.word	0x0800bc35
 800bbb4:	0800bc35 	.word	0x0800bc35
 800bbb8:	0800bc35 	.word	0x0800bc35
 800bbbc:	0800bc35 	.word	0x0800bc35
 800bbc0:	0800bc1d 	.word	0x0800bc1d
 800bbc4:	0800bc35 	.word	0x0800bc35
 800bbc8:	0800bc35 	.word	0x0800bc35
 800bbcc:	0800bc35 	.word	0x0800bc35
 800bbd0:	0800bc35 	.word	0x0800bc35
 800bbd4:	0800bc35 	.word	0x0800bc35
 800bbd8:	0800bc35 	.word	0x0800bc35
 800bbdc:	0800bc35 	.word	0x0800bc35
 800bbe0:	0800bc25 	.word	0x0800bc25
 800bbe4:	0800bc35 	.word	0x0800bc35
 800bbe8:	0800bc35 	.word	0x0800bc35
 800bbec:	0800bc35 	.word	0x0800bc35
 800bbf0:	0800bc35 	.word	0x0800bc35
 800bbf4:	0800bc35 	.word	0x0800bc35
 800bbf8:	0800bc35 	.word	0x0800bc35
 800bbfc:	0800bc35 	.word	0x0800bc35
 800bc00:	0800bc2d 	.word	0x0800bc2d
 800bc04:	2301      	movs	r3, #1
 800bc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc0a:	e0bc      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc0c:	2304      	movs	r3, #4
 800bc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc12:	e0b8      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc14:	2308      	movs	r3, #8
 800bc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc1a:	e0b4      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc1c:	2310      	movs	r3, #16
 800bc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc22:	e0b0      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc24:	2320      	movs	r3, #32
 800bc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc2a:	e0ac      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc2c:	2340      	movs	r3, #64	; 0x40
 800bc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc32:	e0a8      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc34:	2380      	movs	r3, #128	; 0x80
 800bc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc3a:	e0a4      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a90      	ldr	r2, [pc, #576]	; (800be84 <UART_SetConfig+0x6a0>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d130      	bne.n	800bca8 <UART_SetConfig+0x4c4>
 800bc46:	4b8e      	ldr	r3, [pc, #568]	; (800be80 <UART_SetConfig+0x69c>)
 800bc48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4a:	f003 0307 	and.w	r3, r3, #7
 800bc4e:	2b05      	cmp	r3, #5
 800bc50:	d826      	bhi.n	800bca0 <UART_SetConfig+0x4bc>
 800bc52:	a201      	add	r2, pc, #4	; (adr r2, 800bc58 <UART_SetConfig+0x474>)
 800bc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc58:	0800bc71 	.word	0x0800bc71
 800bc5c:	0800bc79 	.word	0x0800bc79
 800bc60:	0800bc81 	.word	0x0800bc81
 800bc64:	0800bc89 	.word	0x0800bc89
 800bc68:	0800bc91 	.word	0x0800bc91
 800bc6c:	0800bc99 	.word	0x0800bc99
 800bc70:	2300      	movs	r3, #0
 800bc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc76:	e086      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc78:	2304      	movs	r3, #4
 800bc7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc7e:	e082      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc80:	2308      	movs	r3, #8
 800bc82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc86:	e07e      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc88:	2310      	movs	r3, #16
 800bc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc8e:	e07a      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc90:	2320      	movs	r3, #32
 800bc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc96:	e076      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bc98:	2340      	movs	r3, #64	; 0x40
 800bc9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9e:	e072      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bca0:	2380      	movs	r3, #128	; 0x80
 800bca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca6:	e06e      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a76      	ldr	r2, [pc, #472]	; (800be88 <UART_SetConfig+0x6a4>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d130      	bne.n	800bd14 <UART_SetConfig+0x530>
 800bcb2:	4b73      	ldr	r3, [pc, #460]	; (800be80 <UART_SetConfig+0x69c>)
 800bcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb6:	f003 0307 	and.w	r3, r3, #7
 800bcba:	2b05      	cmp	r3, #5
 800bcbc:	d826      	bhi.n	800bd0c <UART_SetConfig+0x528>
 800bcbe:	a201      	add	r2, pc, #4	; (adr r2, 800bcc4 <UART_SetConfig+0x4e0>)
 800bcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc4:	0800bcdd 	.word	0x0800bcdd
 800bcc8:	0800bce5 	.word	0x0800bce5
 800bccc:	0800bced 	.word	0x0800bced
 800bcd0:	0800bcf5 	.word	0x0800bcf5
 800bcd4:	0800bcfd 	.word	0x0800bcfd
 800bcd8:	0800bd05 	.word	0x0800bd05
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bce2:	e050      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bce4:	2304      	movs	r3, #4
 800bce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcea:	e04c      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bcec:	2308      	movs	r3, #8
 800bcee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcf2:	e048      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bcf4:	2310      	movs	r3, #16
 800bcf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfa:	e044      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bcfc:	2320      	movs	r3, #32
 800bcfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd02:	e040      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bd04:	2340      	movs	r3, #64	; 0x40
 800bd06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0a:	e03c      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bd0c:	2380      	movs	r3, #128	; 0x80
 800bd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd12:	e038      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a5c      	ldr	r2, [pc, #368]	; (800be8c <UART_SetConfig+0x6a8>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d130      	bne.n	800bd80 <UART_SetConfig+0x59c>
 800bd1e:	4b58      	ldr	r3, [pc, #352]	; (800be80 <UART_SetConfig+0x69c>)
 800bd20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd22:	f003 0307 	and.w	r3, r3, #7
 800bd26:	2b05      	cmp	r3, #5
 800bd28:	d826      	bhi.n	800bd78 <UART_SetConfig+0x594>
 800bd2a:	a201      	add	r2, pc, #4	; (adr r2, 800bd30 <UART_SetConfig+0x54c>)
 800bd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd30:	0800bd49 	.word	0x0800bd49
 800bd34:	0800bd51 	.word	0x0800bd51
 800bd38:	0800bd59 	.word	0x0800bd59
 800bd3c:	0800bd61 	.word	0x0800bd61
 800bd40:	0800bd69 	.word	0x0800bd69
 800bd44:	0800bd71 	.word	0x0800bd71
 800bd48:	2302      	movs	r3, #2
 800bd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd4e:	e01a      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bd50:	2304      	movs	r3, #4
 800bd52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd56:	e016      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bd58:	2308      	movs	r3, #8
 800bd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd5e:	e012      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bd60:	2310      	movs	r3, #16
 800bd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd66:	e00e      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bd68:	2320      	movs	r3, #32
 800bd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd6e:	e00a      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bd70:	2340      	movs	r3, #64	; 0x40
 800bd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd76:	e006      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bd78:	2380      	movs	r3, #128	; 0x80
 800bd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7e:	e002      	b.n	800bd86 <UART_SetConfig+0x5a2>
 800bd80:	2380      	movs	r3, #128	; 0x80
 800bd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a40      	ldr	r2, [pc, #256]	; (800be8c <UART_SetConfig+0x6a8>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	f040 80ef 	bne.w	800bf70 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	dc46      	bgt.n	800be28 <UART_SetConfig+0x644>
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	f2c0 8081 	blt.w	800bea2 <UART_SetConfig+0x6be>
 800bda0:	3b02      	subs	r3, #2
 800bda2:	2b1e      	cmp	r3, #30
 800bda4:	d87d      	bhi.n	800bea2 <UART_SetConfig+0x6be>
 800bda6:	a201      	add	r2, pc, #4	; (adr r2, 800bdac <UART_SetConfig+0x5c8>)
 800bda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdac:	0800be2f 	.word	0x0800be2f
 800bdb0:	0800bea3 	.word	0x0800bea3
 800bdb4:	0800be37 	.word	0x0800be37
 800bdb8:	0800bea3 	.word	0x0800bea3
 800bdbc:	0800bea3 	.word	0x0800bea3
 800bdc0:	0800bea3 	.word	0x0800bea3
 800bdc4:	0800be47 	.word	0x0800be47
 800bdc8:	0800bea3 	.word	0x0800bea3
 800bdcc:	0800bea3 	.word	0x0800bea3
 800bdd0:	0800bea3 	.word	0x0800bea3
 800bdd4:	0800bea3 	.word	0x0800bea3
 800bdd8:	0800bea3 	.word	0x0800bea3
 800bddc:	0800bea3 	.word	0x0800bea3
 800bde0:	0800bea3 	.word	0x0800bea3
 800bde4:	0800be57 	.word	0x0800be57
 800bde8:	0800bea3 	.word	0x0800bea3
 800bdec:	0800bea3 	.word	0x0800bea3
 800bdf0:	0800bea3 	.word	0x0800bea3
 800bdf4:	0800bea3 	.word	0x0800bea3
 800bdf8:	0800bea3 	.word	0x0800bea3
 800bdfc:	0800bea3 	.word	0x0800bea3
 800be00:	0800bea3 	.word	0x0800bea3
 800be04:	0800bea3 	.word	0x0800bea3
 800be08:	0800bea3 	.word	0x0800bea3
 800be0c:	0800bea3 	.word	0x0800bea3
 800be10:	0800bea3 	.word	0x0800bea3
 800be14:	0800bea3 	.word	0x0800bea3
 800be18:	0800bea3 	.word	0x0800bea3
 800be1c:	0800bea3 	.word	0x0800bea3
 800be20:	0800bea3 	.word	0x0800bea3
 800be24:	0800be95 	.word	0x0800be95
 800be28:	2b40      	cmp	r3, #64	; 0x40
 800be2a:	d036      	beq.n	800be9a <UART_SetConfig+0x6b6>
 800be2c:	e039      	b.n	800bea2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be2e:	f7fb ff89 	bl	8007d44 <HAL_RCCEx_GetD3PCLK1Freq>
 800be32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800be34:	e03b      	b.n	800beae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be36:	f107 0314 	add.w	r3, r7, #20
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fb ff98 	bl	8007d70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be44:	e033      	b.n	800beae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be46:	f107 0308 	add.w	r3, r7, #8
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fc f8e4 	bl	8008018 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be54:	e02b      	b.n	800beae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be56:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <UART_SetConfig+0x69c>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0320 	and.w	r3, r3, #32
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d009      	beq.n	800be76 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be62:	4b07      	ldr	r3, [pc, #28]	; (800be80 <UART_SetConfig+0x69c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	08db      	lsrs	r3, r3, #3
 800be68:	f003 0303 	and.w	r3, r3, #3
 800be6c:	4a08      	ldr	r2, [pc, #32]	; (800be90 <UART_SetConfig+0x6ac>)
 800be6e:	fa22 f303 	lsr.w	r3, r2, r3
 800be72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be74:	e01b      	b.n	800beae <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800be76:	4b06      	ldr	r3, [pc, #24]	; (800be90 <UART_SetConfig+0x6ac>)
 800be78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be7a:	e018      	b.n	800beae <UART_SetConfig+0x6ca>
 800be7c:	40011400 	.word	0x40011400
 800be80:	58024400 	.word	0x58024400
 800be84:	40007800 	.word	0x40007800
 800be88:	40007c00 	.word	0x40007c00
 800be8c:	58000c00 	.word	0x58000c00
 800be90:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be94:	4bc4      	ldr	r3, [pc, #784]	; (800c1a8 <UART_SetConfig+0x9c4>)
 800be96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be98:	e009      	b.n	800beae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bea0:	e005      	b.n	800beae <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800beac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800beae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 81da 	beq.w	800c26a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beba:	4abc      	ldr	r2, [pc, #752]	; (800c1ac <UART_SetConfig+0x9c8>)
 800bebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bec0:	461a      	mov	r2, r3
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bec8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	4613      	mov	r3, r2
 800bed0:	005b      	lsls	r3, r3, #1
 800bed2:	4413      	add	r3, r2
 800bed4:	6a3a      	ldr	r2, [r7, #32]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d305      	bcc.n	800bee6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bee0:	6a3a      	ldr	r2, [r7, #32]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d903      	bls.n	800beee <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800beec:	e1bd      	b.n	800c26a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800beee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef0:	4618      	mov	r0, r3
 800bef2:	f04f 0100 	mov.w	r1, #0
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befa:	4aac      	ldr	r2, [pc, #688]	; (800c1ac <UART_SetConfig+0x9c8>)
 800befc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	f04f 0300 	mov.w	r3, #0
 800bf06:	f7f4 f9e7 	bl	80002d8 <__aeabi_uldivmod>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4610      	mov	r0, r2
 800bf10:	4619      	mov	r1, r3
 800bf12:	f04f 0200 	mov.w	r2, #0
 800bf16:	f04f 0300 	mov.w	r3, #0
 800bf1a:	020b      	lsls	r3, r1, #8
 800bf1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf20:	0202      	lsls	r2, r0, #8
 800bf22:	6879      	ldr	r1, [r7, #4]
 800bf24:	6849      	ldr	r1, [r1, #4]
 800bf26:	0849      	lsrs	r1, r1, #1
 800bf28:	4608      	mov	r0, r1
 800bf2a:	f04f 0100 	mov.w	r1, #0
 800bf2e:	1814      	adds	r4, r2, r0
 800bf30:	eb43 0501 	adc.w	r5, r3, r1
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f04f 0300 	mov.w	r3, #0
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7f4 f9c9 	bl	80002d8 <__aeabi_uldivmod>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf54:	d308      	bcc.n	800bf68 <UART_SetConfig+0x784>
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf5c:	d204      	bcs.n	800bf68 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf64:	60da      	str	r2, [r3, #12]
 800bf66:	e180      	b.n	800c26a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf6e:	e17c      	b.n	800c26a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	69db      	ldr	r3, [r3, #28]
 800bf74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf78:	f040 80bf 	bne.w	800c0fa <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800bf7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf80:	2b20      	cmp	r3, #32
 800bf82:	dc49      	bgt.n	800c018 <UART_SetConfig+0x834>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	db7c      	blt.n	800c082 <UART_SetConfig+0x89e>
 800bf88:	2b20      	cmp	r3, #32
 800bf8a:	d87a      	bhi.n	800c082 <UART_SetConfig+0x89e>
 800bf8c:	a201      	add	r2, pc, #4	; (adr r2, 800bf94 <UART_SetConfig+0x7b0>)
 800bf8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf92:	bf00      	nop
 800bf94:	0800c01f 	.word	0x0800c01f
 800bf98:	0800c027 	.word	0x0800c027
 800bf9c:	0800c083 	.word	0x0800c083
 800bfa0:	0800c083 	.word	0x0800c083
 800bfa4:	0800c02f 	.word	0x0800c02f
 800bfa8:	0800c083 	.word	0x0800c083
 800bfac:	0800c083 	.word	0x0800c083
 800bfb0:	0800c083 	.word	0x0800c083
 800bfb4:	0800c03f 	.word	0x0800c03f
 800bfb8:	0800c083 	.word	0x0800c083
 800bfbc:	0800c083 	.word	0x0800c083
 800bfc0:	0800c083 	.word	0x0800c083
 800bfc4:	0800c083 	.word	0x0800c083
 800bfc8:	0800c083 	.word	0x0800c083
 800bfcc:	0800c083 	.word	0x0800c083
 800bfd0:	0800c083 	.word	0x0800c083
 800bfd4:	0800c04f 	.word	0x0800c04f
 800bfd8:	0800c083 	.word	0x0800c083
 800bfdc:	0800c083 	.word	0x0800c083
 800bfe0:	0800c083 	.word	0x0800c083
 800bfe4:	0800c083 	.word	0x0800c083
 800bfe8:	0800c083 	.word	0x0800c083
 800bfec:	0800c083 	.word	0x0800c083
 800bff0:	0800c083 	.word	0x0800c083
 800bff4:	0800c083 	.word	0x0800c083
 800bff8:	0800c083 	.word	0x0800c083
 800bffc:	0800c083 	.word	0x0800c083
 800c000:	0800c083 	.word	0x0800c083
 800c004:	0800c083 	.word	0x0800c083
 800c008:	0800c083 	.word	0x0800c083
 800c00c:	0800c083 	.word	0x0800c083
 800c010:	0800c083 	.word	0x0800c083
 800c014:	0800c075 	.word	0x0800c075
 800c018:	2b40      	cmp	r3, #64	; 0x40
 800c01a:	d02e      	beq.n	800c07a <UART_SetConfig+0x896>
 800c01c:	e031      	b.n	800c082 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c01e:	f7fa ff25 	bl	8006e6c <HAL_RCC_GetPCLK1Freq>
 800c022:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c024:	e033      	b.n	800c08e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c026:	f7fa ff37 	bl	8006e98 <HAL_RCC_GetPCLK2Freq>
 800c02a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c02c:	e02f      	b.n	800c08e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c02e:	f107 0314 	add.w	r3, r7, #20
 800c032:	4618      	mov	r0, r3
 800c034:	f7fb fe9c 	bl	8007d70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c03c:	e027      	b.n	800c08e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c03e:	f107 0308 	add.w	r3, r7, #8
 800c042:	4618      	mov	r0, r3
 800c044:	f7fb ffe8 	bl	8008018 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c04c:	e01f      	b.n	800c08e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c04e:	4b58      	ldr	r3, [pc, #352]	; (800c1b0 <UART_SetConfig+0x9cc>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 0320 	and.w	r3, r3, #32
 800c056:	2b00      	cmp	r3, #0
 800c058:	d009      	beq.n	800c06e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c05a:	4b55      	ldr	r3, [pc, #340]	; (800c1b0 <UART_SetConfig+0x9cc>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	08db      	lsrs	r3, r3, #3
 800c060:	f003 0303 	and.w	r3, r3, #3
 800c064:	4a53      	ldr	r2, [pc, #332]	; (800c1b4 <UART_SetConfig+0x9d0>)
 800c066:	fa22 f303 	lsr.w	r3, r2, r3
 800c06a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c06c:	e00f      	b.n	800c08e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c06e:	4b51      	ldr	r3, [pc, #324]	; (800c1b4 <UART_SetConfig+0x9d0>)
 800c070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c072:	e00c      	b.n	800c08e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c074:	4b4c      	ldr	r3, [pc, #304]	; (800c1a8 <UART_SetConfig+0x9c4>)
 800c076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c078:	e009      	b.n	800c08e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c07a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c07e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c080:	e005      	b.n	800c08e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c082:	2300      	movs	r3, #0
 800c084:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c08c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 80ea 	beq.w	800c26a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09a:	4a44      	ldr	r2, [pc, #272]	; (800c1ac <UART_SetConfig+0x9c8>)
 800c09c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0a8:	005a      	lsls	r2, r3, #1
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	085b      	lsrs	r3, r3, #1
 800c0b0:	441a      	add	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c0:	2b0f      	cmp	r3, #15
 800c0c2:	d916      	bls.n	800c0f2 <UART_SetConfig+0x90e>
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ca:	d212      	bcs.n	800c0f2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	f023 030f 	bic.w	r3, r3, #15
 800c0d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d8:	085b      	lsrs	r3, r3, #1
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	f003 0307 	and.w	r3, r3, #7
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c0ee:	60da      	str	r2, [r3, #12]
 800c0f0:	e0bb      	b.n	800c26a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c0f8:	e0b7      	b.n	800c26a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c0fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0fe:	2b20      	cmp	r3, #32
 800c100:	dc4a      	bgt.n	800c198 <UART_SetConfig+0x9b4>
 800c102:	2b00      	cmp	r3, #0
 800c104:	f2c0 8086 	blt.w	800c214 <UART_SetConfig+0xa30>
 800c108:	2b20      	cmp	r3, #32
 800c10a:	f200 8083 	bhi.w	800c214 <UART_SetConfig+0xa30>
 800c10e:	a201      	add	r2, pc, #4	; (adr r2, 800c114 <UART_SetConfig+0x930>)
 800c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c114:	0800c19f 	.word	0x0800c19f
 800c118:	0800c1b9 	.word	0x0800c1b9
 800c11c:	0800c215 	.word	0x0800c215
 800c120:	0800c215 	.word	0x0800c215
 800c124:	0800c1c1 	.word	0x0800c1c1
 800c128:	0800c215 	.word	0x0800c215
 800c12c:	0800c215 	.word	0x0800c215
 800c130:	0800c215 	.word	0x0800c215
 800c134:	0800c1d1 	.word	0x0800c1d1
 800c138:	0800c215 	.word	0x0800c215
 800c13c:	0800c215 	.word	0x0800c215
 800c140:	0800c215 	.word	0x0800c215
 800c144:	0800c215 	.word	0x0800c215
 800c148:	0800c215 	.word	0x0800c215
 800c14c:	0800c215 	.word	0x0800c215
 800c150:	0800c215 	.word	0x0800c215
 800c154:	0800c1e1 	.word	0x0800c1e1
 800c158:	0800c215 	.word	0x0800c215
 800c15c:	0800c215 	.word	0x0800c215
 800c160:	0800c215 	.word	0x0800c215
 800c164:	0800c215 	.word	0x0800c215
 800c168:	0800c215 	.word	0x0800c215
 800c16c:	0800c215 	.word	0x0800c215
 800c170:	0800c215 	.word	0x0800c215
 800c174:	0800c215 	.word	0x0800c215
 800c178:	0800c215 	.word	0x0800c215
 800c17c:	0800c215 	.word	0x0800c215
 800c180:	0800c215 	.word	0x0800c215
 800c184:	0800c215 	.word	0x0800c215
 800c188:	0800c215 	.word	0x0800c215
 800c18c:	0800c215 	.word	0x0800c215
 800c190:	0800c215 	.word	0x0800c215
 800c194:	0800c207 	.word	0x0800c207
 800c198:	2b40      	cmp	r3, #64	; 0x40
 800c19a:	d037      	beq.n	800c20c <UART_SetConfig+0xa28>
 800c19c:	e03a      	b.n	800c214 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c19e:	f7fa fe65 	bl	8006e6c <HAL_RCC_GetPCLK1Freq>
 800c1a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1a4:	e03c      	b.n	800c220 <UART_SetConfig+0xa3c>
 800c1a6:	bf00      	nop
 800c1a8:	003d0900 	.word	0x003d0900
 800c1ac:	0800d238 	.word	0x0800d238
 800c1b0:	58024400 	.word	0x58024400
 800c1b4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1b8:	f7fa fe6e 	bl	8006e98 <HAL_RCC_GetPCLK2Freq>
 800c1bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1be:	e02f      	b.n	800c220 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1c0:	f107 0314 	add.w	r3, r7, #20
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fb fdd3 	bl	8007d70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1ce:	e027      	b.n	800c220 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1d0:	f107 0308 	add.w	r3, r7, #8
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fb ff1f 	bl	8008018 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1de:	e01f      	b.n	800c220 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1e0:	4b2c      	ldr	r3, [pc, #176]	; (800c294 <UART_SetConfig+0xab0>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 0320 	and.w	r3, r3, #32
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d009      	beq.n	800c200 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1ec:	4b29      	ldr	r3, [pc, #164]	; (800c294 <UART_SetConfig+0xab0>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	08db      	lsrs	r3, r3, #3
 800c1f2:	f003 0303 	and.w	r3, r3, #3
 800c1f6:	4a28      	ldr	r2, [pc, #160]	; (800c298 <UART_SetConfig+0xab4>)
 800c1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1fe:	e00f      	b.n	800c220 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c200:	4b25      	ldr	r3, [pc, #148]	; (800c298 <UART_SetConfig+0xab4>)
 800c202:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c204:	e00c      	b.n	800c220 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c206:	4b25      	ldr	r3, [pc, #148]	; (800c29c <UART_SetConfig+0xab8>)
 800c208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c20a:	e009      	b.n	800c220 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c20c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c210:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c212:	e005      	b.n	800c220 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c214:	2300      	movs	r3, #0
 800c216:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c21e:	bf00      	nop
    }

    if (pclk != 0U)
 800c220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c222:	2b00      	cmp	r3, #0
 800c224:	d021      	beq.n	800c26a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22a:	4a1d      	ldr	r2, [pc, #116]	; (800c2a0 <UART_SetConfig+0xabc>)
 800c22c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c230:	461a      	mov	r2, r3
 800c232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c234:	fbb3 f2f2 	udiv	r2, r3, r2
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	085b      	lsrs	r3, r3, #1
 800c23e:	441a      	add	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	fbb2 f3f3 	udiv	r3, r2, r3
 800c248:	b29b      	uxth	r3, r3
 800c24a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24e:	2b0f      	cmp	r3, #15
 800c250:	d908      	bls.n	800c264 <UART_SetConfig+0xa80>
 800c252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c258:	d204      	bcs.n	800c264 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c260:	60da      	str	r2, [r3, #12]
 800c262:	e002      	b.n	800c26a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c286:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3738      	adds	r7, #56	; 0x38
 800c28e:	46bd      	mov	sp, r7
 800c290:	bdb0      	pop	{r4, r5, r7, pc}
 800c292:	bf00      	nop
 800c294:	58024400 	.word	0x58024400
 800c298:	03d09000 	.word	0x03d09000
 800c29c:	003d0900 	.word	0x003d0900
 800c2a0:	0800d238 	.word	0x0800d238

0800c2a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00a      	beq.n	800c2ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d2:	f003 0302 	and.w	r3, r3, #2
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00a      	beq.n	800c2f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	430a      	orrs	r2, r1
 800c2ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00a      	beq.n	800c312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	430a      	orrs	r2, r1
 800c310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c316:	f003 0308 	and.w	r3, r3, #8
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00a      	beq.n	800c334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	430a      	orrs	r2, r1
 800c332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c338:	f003 0310 	and.w	r3, r3, #16
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00a      	beq.n	800c356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	430a      	orrs	r2, r1
 800c354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c35a:	f003 0320 	and.w	r3, r3, #32
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00a      	beq.n	800c378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	430a      	orrs	r2, r1
 800c376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c380:	2b00      	cmp	r3, #0
 800c382:	d01a      	beq.n	800c3ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	430a      	orrs	r2, r1
 800c398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c39e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3a2:	d10a      	bne.n	800c3ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	430a      	orrs	r2, r1
 800c3b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00a      	beq.n	800c3dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	430a      	orrs	r2, r1
 800c3da:	605a      	str	r2, [r3, #4]
  }
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af02      	add	r7, sp, #8
 800c3ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3f8:	f7f5 fe36 	bl	8002068 <HAL_GetTick>
 800c3fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 0308 	and.w	r3, r3, #8
 800c408:	2b08      	cmp	r3, #8
 800c40a:	d10e      	bne.n	800c42a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c40c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2200      	movs	r2, #0
 800c416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f82f 	bl	800c47e <UART_WaitOnFlagUntilTimeout>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	e025      	b.n	800c476 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 0304 	and.w	r3, r3, #4
 800c434:	2b04      	cmp	r3, #4
 800c436:	d10e      	bne.n	800c456 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 f819 	bl	800c47e <UART_WaitOnFlagUntilTimeout>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c452:	2303      	movs	r3, #3
 800c454:	e00f      	b.n	800c476 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2220      	movs	r2, #32
 800c45a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2220      	movs	r2, #32
 800c462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	60f8      	str	r0, [r7, #12]
 800c486:	60b9      	str	r1, [r7, #8]
 800c488:	603b      	str	r3, [r7, #0]
 800c48a:	4613      	mov	r3, r2
 800c48c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c48e:	e062      	b.n	800c556 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c496:	d05e      	beq.n	800c556 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c498:	f7f5 fde6 	bl	8002068 <HAL_GetTick>
 800c49c:	4602      	mov	r2, r0
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	69ba      	ldr	r2, [r7, #24]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d302      	bcc.n	800c4ae <UART_WaitOnFlagUntilTimeout+0x30>
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d11d      	bne.n	800c4ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	689a      	ldr	r2, [r3, #8]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f022 0201 	bic.w	r2, r2, #1
 800c4cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2220      	movs	r2, #32
 800c4d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2220      	movs	r2, #32
 800c4da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c4e6:	2303      	movs	r3, #3
 800c4e8:	e045      	b.n	800c576 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 0304 	and.w	r3, r3, #4
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d02e      	beq.n	800c556 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c506:	d126      	bne.n	800c556 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c510:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c520:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	689a      	ldr	r2, [r3, #8]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f022 0201 	bic.w	r2, r2, #1
 800c530:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2220      	movs	r2, #32
 800c536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2220      	movs	r2, #32
 800c53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2220      	movs	r2, #32
 800c546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2200      	movs	r2, #0
 800c54e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c552:	2303      	movs	r3, #3
 800c554:	e00f      	b.n	800c576 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	69da      	ldr	r2, [r3, #28]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	4013      	ands	r3, r2
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	429a      	cmp	r2, r3
 800c564:	bf0c      	ite	eq
 800c566:	2301      	moveq	r3, #1
 800c568:	2300      	movne	r3, #0
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	461a      	mov	r2, r3
 800c56e:	79fb      	ldrb	r3, [r7, #7]
 800c570:	429a      	cmp	r2, r3
 800c572:	d08d      	beq.n	800c490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3710      	adds	r7, #16
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4613      	mov	r3, r2
 800c58c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	88fa      	ldrh	r2, [r7, #6]
 800c598:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2222      	movs	r2, #34	; 0x22
 800c5a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d02c      	beq.n	800c60e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5b8:	4a25      	ldr	r2, [pc, #148]	; (800c650 <UART_Start_Receive_DMA+0xd0>)
 800c5ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5c0:	4a24      	ldr	r2, [pc, #144]	; (800c654 <UART_Start_Receive_DMA+0xd4>)
 800c5c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5c8:	4a23      	ldr	r2, [pc, #140]	; (800c658 <UART_Start_Receive_DMA+0xd8>)
 800c5ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3324      	adds	r3, #36	; 0x24
 800c5de:	4619      	mov	r1, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	88fb      	ldrh	r3, [r7, #6]
 800c5e8:	f7f6 fa0e 	bl	8002a08 <HAL_DMA_Start_IT>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00d      	beq.n	800c60e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2210      	movs	r2, #16
 800c5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2220      	movs	r2, #32
 800c606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e01c      	b.n	800c648 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c624:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f042 0201 	orr.w	r2, r2, #1
 800c634:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	689a      	ldr	r2, [r3, #8]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c644:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	0800c6fd 	.word	0x0800c6fd
 800c654:	0800c793 	.word	0x0800c793
 800c658:	0800c7cb 	.word	0x0800c7cb

0800c65c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c672:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	689a      	ldr	r2, [r3, #8]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c682:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2220      	movs	r2, #32
 800c688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c6ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6899      	ldr	r1, [r3, #8]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	4b0f      	ldr	r3, [pc, #60]	; (800c6f8 <UART_EndRxTransfer+0x60>)
 800c6bc:	400b      	ands	r3, r1
 800c6be:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d107      	bne.n	800c6d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f022 0210 	bic.w	r2, r2, #16
 800c6d6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2220      	movs	r2, #32
 800c6dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr
 800c6f8:	effffffe 	.word	0xeffffffe

0800c6fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c708:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c712:	d02b      	beq.n	800c76c <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c72a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	689a      	ldr	r2, [r3, #8]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f022 0201 	bic.w	r2, r2, #1
 800c73a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	689a      	ldr	r2, [r3, #8]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c74a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2220      	movs	r2, #32
 800c750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d107      	bne.n	800c76c <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f022 0210 	bic.w	r2, r2, #16
 800c76a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c770:	2b01      	cmp	r3, #1
 800c772:	d107      	bne.n	800c784 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c77a:	4619      	mov	r1, r3
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7ff f825 	bl	800b7cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c782:	e002      	b.n	800c78a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f7ff f803 	bl	800b790 <HAL_UART_RxCpltCallback>
}
 800c78a:	bf00      	nop
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b084      	sub	sp, #16
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d109      	bne.n	800c7bc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7ae:	085b      	lsrs	r3, r3, #1
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f7ff f809 	bl	800b7cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c7ba:	e002      	b.n	800c7c2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f7fe fff1 	bl	800b7a4 <HAL_UART_RxHalfCpltCallback>
}
 800c7c2:	bf00      	nop
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b086      	sub	sp, #24
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f2:	2b80      	cmp	r3, #128	; 0x80
 800c7f4:	d109      	bne.n	800c80a <UART_DMAError+0x40>
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	2b21      	cmp	r3, #33	; 0x21
 800c7fa:	d106      	bne.n	800c80a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c804:	6978      	ldr	r0, [r7, #20]
 800c806:	f7ff ff29 	bl	800c65c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c814:	2b40      	cmp	r3, #64	; 0x40
 800c816:	d109      	bne.n	800c82c <UART_DMAError+0x62>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2b22      	cmp	r3, #34	; 0x22
 800c81c:	d106      	bne.n	800c82c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2200      	movs	r2, #0
 800c822:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c826:	6978      	ldr	r0, [r7, #20]
 800c828:	f7ff ff36 	bl	800c698 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c832:	f043 0210 	orr.w	r2, r3, #16
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c83c:	6978      	ldr	r0, [r7, #20]
 800c83e:	f7fe ffbb 	bl	800b7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c842:	bf00      	nop
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b084      	sub	sp, #16
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2200      	movs	r2, #0
 800c864:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f7fe ffa5 	bl	800b7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c86e:	bf00      	nop
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b082      	sub	sp, #8
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c88c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2220      	movs	r2, #32
 800c892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f7fe ff6d 	bl	800b77c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8a2:	bf00      	nop
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b083      	sub	sp, #12
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c8b2:	bf00      	nop
 800c8b4:	370c      	adds	r7, #12
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b083      	sub	sp, #12
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c8c6:	bf00      	nop
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b083      	sub	sp, #12
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c8da:	bf00      	nop
 800c8dc:	370c      	adds	r7, #12
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b085      	sub	sp, #20
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d101      	bne.n	800c8fc <HAL_UARTEx_DisableFifoMode+0x16>
 800c8f8:	2302      	movs	r3, #2
 800c8fa:	e027      	b.n	800c94c <HAL_UARTEx_DisableFifoMode+0x66>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2224      	movs	r2, #36	; 0x24
 800c908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f022 0201 	bic.w	r2, r2, #1
 800c922:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c92a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2220      	movs	r2, #32
 800c93e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3714      	adds	r7, #20
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr

0800c958 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d101      	bne.n	800c970 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c96c:	2302      	movs	r3, #2
 800c96e:	e02d      	b.n	800c9cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2224      	movs	r2, #36	; 0x24
 800c97c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f022 0201 	bic.w	r2, r2, #1
 800c996:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	430a      	orrs	r2, r1
 800c9aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f84f 	bl	800ca50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2220      	movs	r2, #32
 800c9be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3710      	adds	r7, #16
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d101      	bne.n	800c9ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c9e8:	2302      	movs	r3, #2
 800c9ea:	e02d      	b.n	800ca48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2224      	movs	r2, #36	; 0x24
 800c9f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f022 0201 	bic.w	r2, r2, #1
 800ca12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	430a      	orrs	r2, r1
 800ca26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f811 	bl	800ca50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2220      	movs	r2, #32
 800ca3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d108      	bne.n	800ca72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca70:	e031      	b.n	800cad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca72:	2310      	movs	r3, #16
 800ca74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca76:	2310      	movs	r3, #16
 800ca78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	0e5b      	lsrs	r3, r3, #25
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	f003 0307 	and.w	r3, r3, #7
 800ca88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	0f5b      	lsrs	r3, r3, #29
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	f003 0307 	and.w	r3, r3, #7
 800ca98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
 800ca9c:	7b3a      	ldrb	r2, [r7, #12]
 800ca9e:	4911      	ldr	r1, [pc, #68]	; (800cae4 <UARTEx_SetNbDataToProcess+0x94>)
 800caa0:	5c8a      	ldrb	r2, [r1, r2]
 800caa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800caa6:	7b3a      	ldrb	r2, [r7, #12]
 800caa8:	490f      	ldr	r1, [pc, #60]	; (800cae8 <UARTEx_SetNbDataToProcess+0x98>)
 800caaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800caac:	fb93 f3f2 	sdiv	r3, r3, r2
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cab8:	7bfb      	ldrb	r3, [r7, #15]
 800caba:	7b7a      	ldrb	r2, [r7, #13]
 800cabc:	4909      	ldr	r1, [pc, #36]	; (800cae4 <UARTEx_SetNbDataToProcess+0x94>)
 800cabe:	5c8a      	ldrb	r2, [r1, r2]
 800cac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cac4:	7b7a      	ldrb	r2, [r7, #13]
 800cac6:	4908      	ldr	r1, [pc, #32]	; (800cae8 <UARTEx_SetNbDataToProcess+0x98>)
 800cac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800caca:	fb93 f3f2 	sdiv	r3, r3, r2
 800cace:	b29a      	uxth	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cad6:	bf00      	nop
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	0800d250 	.word	0x0800d250
 800cae8:	0800d258 	.word	0x0800d258

0800caec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800caec:	b084      	sub	sp, #16
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	f107 001c 	add.w	r0, r7, #28
 800cafa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d120      	bne.n	800cb46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	68da      	ldr	r2, [r3, #12]
 800cb14:	4b2a      	ldr	r3, [pc, #168]	; (800cbc0 <USB_CoreInit+0xd4>)
 800cb16:	4013      	ands	r3, r2
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cb28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d105      	bne.n	800cb3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fa60 	bl	800d000 <USB_CoreReset>
 800cb40:	4603      	mov	r3, r0
 800cb42:	73fb      	strb	r3, [r7, #15]
 800cb44:	e01a      	b.n	800cb7c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fa54 	bl	800d000 <USB_CoreReset>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	639a      	str	r2, [r3, #56]	; 0x38
 800cb6e:	e005      	b.n	800cb7c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d116      	bne.n	800cbb0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb90:	4b0c      	ldr	r3, [pc, #48]	; (800cbc4 <USB_CoreInit+0xd8>)
 800cb92:	4313      	orrs	r3, r2
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	f043 0206 	orr.w	r2, r3, #6
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f043 0220 	orr.w	r2, r3, #32
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbbc:	b004      	add	sp, #16
 800cbbe:	4770      	bx	lr
 800cbc0:	ffbdffbf 	.word	0xffbdffbf
 800cbc4:	03ee0000 	.word	0x03ee0000

0800cbc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	f023 0201 	bic.w	r2, r3, #1
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b082      	sub	sp, #8
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cc02:	78fb      	ldrb	r3, [r7, #3]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d106      	bne.n	800cc16 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	60da      	str	r2, [r3, #12]
 800cc14:	e00b      	b.n	800cc2e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cc16:	78fb      	ldrb	r3, [r7, #3]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d106      	bne.n	800cc2a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	60da      	str	r2, [r3, #12]
 800cc28:	e001      	b.n	800cc2e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e003      	b.n	800cc36 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cc2e:	2032      	movs	r0, #50	; 0x32
 800cc30:	f7f5 fa26 	bl	8002080 <HAL_Delay>

  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
	...

0800cc40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc40:	b084      	sub	sp, #16
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b086      	sub	sp, #24
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cc4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cc52:	2300      	movs	r3, #0
 800cc54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	613b      	str	r3, [r7, #16]
 800cc5e:	e009      	b.n	800cc74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	3340      	adds	r3, #64	; 0x40
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	3301      	adds	r3, #1
 800cc72:	613b      	str	r3, [r7, #16]
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	2b0e      	cmp	r3, #14
 800cc78:	d9f2      	bls.n	800cc60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cc7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d11c      	bne.n	800ccba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc8e:	f043 0302 	orr.w	r3, r3, #2
 800cc92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	601a      	str	r2, [r3, #0]
 800ccb8:	e005      	b.n	800ccc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cccc:	461a      	mov	r2, r3
 800ccce:	2300      	movs	r3, #0
 800ccd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd8:	4619      	mov	r1, r3
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce0:	461a      	mov	r2, r3
 800cce2:	680b      	ldr	r3, [r1, #0]
 800cce4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d10c      	bne.n	800cd06 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d104      	bne.n	800ccfc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 f949 	bl	800cf8c <USB_SetDevSpeed>
 800ccfa:	e008      	b.n	800cd0e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 f944 	bl	800cf8c <USB_SetDevSpeed>
 800cd04:	e003      	b.n	800cd0e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cd06:	2103      	movs	r1, #3
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f93f 	bl	800cf8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cd0e:	2110      	movs	r1, #16
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f8f3 	bl	800cefc <USB_FlushTxFifo>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d001      	beq.n	800cd20 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f911 	bl	800cf48 <USB_FlushRxFifo>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd36:	461a      	mov	r2, r3
 800cd38:	2300      	movs	r3, #0
 800cd3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd42:	461a      	mov	r2, r3
 800cd44:	2300      	movs	r3, #0
 800cd46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd4e:	461a      	mov	r2, r3
 800cd50:	2300      	movs	r3, #0
 800cd52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd54:	2300      	movs	r3, #0
 800cd56:	613b      	str	r3, [r7, #16]
 800cd58:	e043      	b.n	800cde2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	015a      	lsls	r2, r3, #5
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	4413      	add	r3, r2
 800cd62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd70:	d118      	bne.n	800cda4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10a      	bne.n	800cd8e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	015a      	lsls	r2, r3, #5
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	4413      	add	r3, r2
 800cd80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd84:	461a      	mov	r2, r3
 800cd86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd8a:	6013      	str	r3, [r2, #0]
 800cd8c:	e013      	b.n	800cdb6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	015a      	lsls	r2, r3, #5
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	4413      	add	r3, r2
 800cd96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cda0:	6013      	str	r3, [r2, #0]
 800cda2:	e008      	b.n	800cdb6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	015a      	lsls	r2, r3, #5
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	4413      	add	r3, r2
 800cdac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	015a      	lsls	r2, r3, #5
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	015a      	lsls	r2, r3, #5
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4413      	add	r3, r2
 800cdd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cdda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	3301      	adds	r3, #1
 800cde0:	613b      	str	r3, [r7, #16]
 800cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde4:	693a      	ldr	r2, [r7, #16]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d3b7      	bcc.n	800cd5a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdea:	2300      	movs	r3, #0
 800cdec:	613b      	str	r3, [r7, #16]
 800cdee:	e043      	b.n	800ce78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	015a      	lsls	r2, r3, #5
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce06:	d118      	bne.n	800ce3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10a      	bne.n	800ce24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	015a      	lsls	r2, r3, #5
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	4413      	add	r3, r2
 800ce16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce20:	6013      	str	r3, [r2, #0]
 800ce22:	e013      	b.n	800ce4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	015a      	lsls	r2, r3, #5
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce30:	461a      	mov	r2, r3
 800ce32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	e008      	b.n	800ce4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	015a      	lsls	r2, r3, #5
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	4413      	add	r3, r2
 800ce42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce46:	461a      	mov	r2, r3
 800ce48:	2300      	movs	r3, #0
 800ce4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	015a      	lsls	r2, r3, #5
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	4413      	add	r3, r2
 800ce54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce58:	461a      	mov	r2, r3
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	015a      	lsls	r2, r3, #5
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	4413      	add	r3, r2
 800ce66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	3301      	adds	r3, #1
 800ce76:	613b      	str	r3, [r7, #16]
 800ce78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7a:	693a      	ldr	r2, [r7, #16]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d3b7      	bcc.n	800cdf0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cea0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d105      	bne.n	800ceb4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	699b      	ldr	r3, [r3, #24]
 800ceac:	f043 0210 	orr.w	r2, r3, #16
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	699a      	ldr	r2, [r3, #24]
 800ceb8:	4b0e      	ldr	r3, [pc, #56]	; (800cef4 <USB_DevInit+0x2b4>)
 800ceba:	4313      	orrs	r3, r2
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d005      	beq.n	800ced2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	699b      	ldr	r3, [r3, #24]
 800ceca:	f043 0208 	orr.w	r2, r3, #8
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ced2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d105      	bne.n	800cee4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	699a      	ldr	r2, [r3, #24]
 800cedc:	4b06      	ldr	r3, [pc, #24]	; (800cef8 <USB_DevInit+0x2b8>)
 800cede:	4313      	orrs	r3, r2
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cef0:	b004      	add	sp, #16
 800cef2:	4770      	bx	lr
 800cef4:	803c3800 	.word	0x803c3800
 800cef8:	40000004 	.word	0x40000004

0800cefc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cf06:	2300      	movs	r3, #0
 800cf08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	019b      	lsls	r3, r3, #6
 800cf0e:	f043 0220 	orr.w	r2, r3, #32
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	60fb      	str	r3, [r7, #12]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4a09      	ldr	r2, [pc, #36]	; (800cf44 <USB_FlushTxFifo+0x48>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d901      	bls.n	800cf28 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cf24:	2303      	movs	r3, #3
 800cf26:	e006      	b.n	800cf36 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	f003 0320 	and.w	r3, r3, #32
 800cf30:	2b20      	cmp	r3, #32
 800cf32:	d0f0      	beq.n	800cf16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	00030d40 	.word	0x00030d40

0800cf48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2210      	movs	r2, #16
 800cf58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	60fb      	str	r3, [r7, #12]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	4a09      	ldr	r2, [pc, #36]	; (800cf88 <USB_FlushRxFifo+0x40>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d901      	bls.n	800cf6c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	e006      	b.n	800cf7a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	f003 0310 	and.w	r3, r3, #16
 800cf74:	2b10      	cmp	r3, #16
 800cf76:	d0f0      	beq.n	800cf5a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	00030d40 	.word	0x00030d40

0800cf8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	78fb      	ldrb	r3, [r7, #3]
 800cfa6:	68f9      	ldr	r1, [r7, #12]
 800cfa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfac:	4313      	orrs	r3, r2
 800cfae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfbe:	b480      	push	{r7}
 800cfc0:	b085      	sub	sp, #20
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfd8:	f023 0303 	bic.w	r3, r3, #3
 800cfdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfec:	f043 0302 	orr.w	r3, r3, #2
 800cff0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cff2:	2300      	movs	r3, #0
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3714      	adds	r7, #20
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d008:	2300      	movs	r3, #0
 800d00a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	3301      	adds	r3, #1
 800d010:	60fb      	str	r3, [r7, #12]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	4a13      	ldr	r2, [pc, #76]	; (800d064 <USB_CoreReset+0x64>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d901      	bls.n	800d01e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d01a:	2303      	movs	r3, #3
 800d01c:	e01b      	b.n	800d056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	2b00      	cmp	r3, #0
 800d024:	daf2      	bge.n	800d00c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d026:	2300      	movs	r3, #0
 800d028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	f043 0201 	orr.w	r2, r3, #1
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	3301      	adds	r3, #1
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4a09      	ldr	r2, [pc, #36]	; (800d064 <USB_CoreReset+0x64>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d901      	bls.n	800d048 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d044:	2303      	movs	r3, #3
 800d046:	e006      	b.n	800d056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	f003 0301 	and.w	r3, r3, #1
 800d050:	2b01      	cmp	r3, #1
 800d052:	d0f0      	beq.n	800d036 <USB_CoreReset+0x36>

  return HAL_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3714      	adds	r7, #20
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	00030d40 	.word	0x00030d40

0800d068 <calloc>:
 800d068:	4b02      	ldr	r3, [pc, #8]	; (800d074 <calloc+0xc>)
 800d06a:	460a      	mov	r2, r1
 800d06c:	4601      	mov	r1, r0
 800d06e:	6818      	ldr	r0, [r3, #0]
 800d070:	f000 b842 	b.w	800d0f8 <_calloc_r>
 800d074:	2401139c 	.word	0x2401139c

0800d078 <__errno>:
 800d078:	4b01      	ldr	r3, [pc, #4]	; (800d080 <__errno+0x8>)
 800d07a:	6818      	ldr	r0, [r3, #0]
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	2401139c 	.word	0x2401139c

0800d084 <__libc_init_array>:
 800d084:	b570      	push	{r4, r5, r6, lr}
 800d086:	4d0d      	ldr	r5, [pc, #52]	; (800d0bc <__libc_init_array+0x38>)
 800d088:	4c0d      	ldr	r4, [pc, #52]	; (800d0c0 <__libc_init_array+0x3c>)
 800d08a:	1b64      	subs	r4, r4, r5
 800d08c:	10a4      	asrs	r4, r4, #2
 800d08e:	2600      	movs	r6, #0
 800d090:	42a6      	cmp	r6, r4
 800d092:	d109      	bne.n	800d0a8 <__libc_init_array+0x24>
 800d094:	4d0b      	ldr	r5, [pc, #44]	; (800d0c4 <__libc_init_array+0x40>)
 800d096:	4c0c      	ldr	r4, [pc, #48]	; (800d0c8 <__libc_init_array+0x44>)
 800d098:	f000 f8b6 	bl	800d208 <_init>
 800d09c:	1b64      	subs	r4, r4, r5
 800d09e:	10a4      	asrs	r4, r4, #2
 800d0a0:	2600      	movs	r6, #0
 800d0a2:	42a6      	cmp	r6, r4
 800d0a4:	d105      	bne.n	800d0b2 <__libc_init_array+0x2e>
 800d0a6:	bd70      	pop	{r4, r5, r6, pc}
 800d0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ac:	4798      	blx	r3
 800d0ae:	3601      	adds	r6, #1
 800d0b0:	e7ee      	b.n	800d090 <__libc_init_array+0xc>
 800d0b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0b6:	4798      	blx	r3
 800d0b8:	3601      	adds	r6, #1
 800d0ba:	e7f2      	b.n	800d0a2 <__libc_init_array+0x1e>
 800d0bc:	0800d268 	.word	0x0800d268
 800d0c0:	0800d268 	.word	0x0800d268
 800d0c4:	0800d268 	.word	0x0800d268
 800d0c8:	0800d26c 	.word	0x0800d26c

0800d0cc <memcpy>:
 800d0cc:	440a      	add	r2, r1
 800d0ce:	4291      	cmp	r1, r2
 800d0d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0d4:	d100      	bne.n	800d0d8 <memcpy+0xc>
 800d0d6:	4770      	bx	lr
 800d0d8:	b510      	push	{r4, lr}
 800d0da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0e2:	4291      	cmp	r1, r2
 800d0e4:	d1f9      	bne.n	800d0da <memcpy+0xe>
 800d0e6:	bd10      	pop	{r4, pc}

0800d0e8 <memset>:
 800d0e8:	4402      	add	r2, r0
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d100      	bne.n	800d0f2 <memset+0xa>
 800d0f0:	4770      	bx	lr
 800d0f2:	f803 1b01 	strb.w	r1, [r3], #1
 800d0f6:	e7f9      	b.n	800d0ec <memset+0x4>

0800d0f8 <_calloc_r>:
 800d0f8:	b513      	push	{r0, r1, r4, lr}
 800d0fa:	434a      	muls	r2, r1
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	9201      	str	r2, [sp, #4]
 800d100:	f000 f80a 	bl	800d118 <_malloc_r>
 800d104:	4604      	mov	r4, r0
 800d106:	b118      	cbz	r0, 800d110 <_calloc_r+0x18>
 800d108:	9a01      	ldr	r2, [sp, #4]
 800d10a:	2100      	movs	r1, #0
 800d10c:	f7ff ffec 	bl	800d0e8 <memset>
 800d110:	4620      	mov	r0, r4
 800d112:	b002      	add	sp, #8
 800d114:	bd10      	pop	{r4, pc}
	...

0800d118 <_malloc_r>:
 800d118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11a:	1ccd      	adds	r5, r1, #3
 800d11c:	f025 0503 	bic.w	r5, r5, #3
 800d120:	3508      	adds	r5, #8
 800d122:	2d0c      	cmp	r5, #12
 800d124:	bf38      	it	cc
 800d126:	250c      	movcc	r5, #12
 800d128:	2d00      	cmp	r5, #0
 800d12a:	4606      	mov	r6, r0
 800d12c:	db01      	blt.n	800d132 <_malloc_r+0x1a>
 800d12e:	42a9      	cmp	r1, r5
 800d130:	d903      	bls.n	800d13a <_malloc_r+0x22>
 800d132:	230c      	movs	r3, #12
 800d134:	6033      	str	r3, [r6, #0]
 800d136:	2000      	movs	r0, #0
 800d138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d13a:	f000 f857 	bl	800d1ec <__malloc_lock>
 800d13e:	4921      	ldr	r1, [pc, #132]	; (800d1c4 <_malloc_r+0xac>)
 800d140:	680a      	ldr	r2, [r1, #0]
 800d142:	4614      	mov	r4, r2
 800d144:	b99c      	cbnz	r4, 800d16e <_malloc_r+0x56>
 800d146:	4f20      	ldr	r7, [pc, #128]	; (800d1c8 <_malloc_r+0xb0>)
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	b923      	cbnz	r3, 800d156 <_malloc_r+0x3e>
 800d14c:	4621      	mov	r1, r4
 800d14e:	4630      	mov	r0, r6
 800d150:	f000 f83c 	bl	800d1cc <_sbrk_r>
 800d154:	6038      	str	r0, [r7, #0]
 800d156:	4629      	mov	r1, r5
 800d158:	4630      	mov	r0, r6
 800d15a:	f000 f837 	bl	800d1cc <_sbrk_r>
 800d15e:	1c43      	adds	r3, r0, #1
 800d160:	d123      	bne.n	800d1aa <_malloc_r+0x92>
 800d162:	230c      	movs	r3, #12
 800d164:	6033      	str	r3, [r6, #0]
 800d166:	4630      	mov	r0, r6
 800d168:	f000 f846 	bl	800d1f8 <__malloc_unlock>
 800d16c:	e7e3      	b.n	800d136 <_malloc_r+0x1e>
 800d16e:	6823      	ldr	r3, [r4, #0]
 800d170:	1b5b      	subs	r3, r3, r5
 800d172:	d417      	bmi.n	800d1a4 <_malloc_r+0x8c>
 800d174:	2b0b      	cmp	r3, #11
 800d176:	d903      	bls.n	800d180 <_malloc_r+0x68>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	441c      	add	r4, r3
 800d17c:	6025      	str	r5, [r4, #0]
 800d17e:	e004      	b.n	800d18a <_malloc_r+0x72>
 800d180:	6863      	ldr	r3, [r4, #4]
 800d182:	42a2      	cmp	r2, r4
 800d184:	bf0c      	ite	eq
 800d186:	600b      	streq	r3, [r1, #0]
 800d188:	6053      	strne	r3, [r2, #4]
 800d18a:	4630      	mov	r0, r6
 800d18c:	f000 f834 	bl	800d1f8 <__malloc_unlock>
 800d190:	f104 000b 	add.w	r0, r4, #11
 800d194:	1d23      	adds	r3, r4, #4
 800d196:	f020 0007 	bic.w	r0, r0, #7
 800d19a:	1ac2      	subs	r2, r0, r3
 800d19c:	d0cc      	beq.n	800d138 <_malloc_r+0x20>
 800d19e:	1a1b      	subs	r3, r3, r0
 800d1a0:	50a3      	str	r3, [r4, r2]
 800d1a2:	e7c9      	b.n	800d138 <_malloc_r+0x20>
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	6864      	ldr	r4, [r4, #4]
 800d1a8:	e7cc      	b.n	800d144 <_malloc_r+0x2c>
 800d1aa:	1cc4      	adds	r4, r0, #3
 800d1ac:	f024 0403 	bic.w	r4, r4, #3
 800d1b0:	42a0      	cmp	r0, r4
 800d1b2:	d0e3      	beq.n	800d17c <_malloc_r+0x64>
 800d1b4:	1a21      	subs	r1, r4, r0
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f000 f808 	bl	800d1cc <_sbrk_r>
 800d1bc:	3001      	adds	r0, #1
 800d1be:	d1dd      	bne.n	800d17c <_malloc_r+0x64>
 800d1c0:	e7cf      	b.n	800d162 <_malloc_r+0x4a>
 800d1c2:	bf00      	nop
 800d1c4:	2401d52c 	.word	0x2401d52c
 800d1c8:	2401d530 	.word	0x2401d530

0800d1cc <_sbrk_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4d06      	ldr	r5, [pc, #24]	; (800d1e8 <_sbrk_r+0x1c>)
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	4608      	mov	r0, r1
 800d1d6:	602b      	str	r3, [r5, #0]
 800d1d8:	f7f4 fe60 	bl	8001e9c <_sbrk>
 800d1dc:	1c43      	adds	r3, r0, #1
 800d1de:	d102      	bne.n	800d1e6 <_sbrk_r+0x1a>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	b103      	cbz	r3, 800d1e6 <_sbrk_r+0x1a>
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	bd38      	pop	{r3, r4, r5, pc}
 800d1e8:	2401dd04 	.word	0x2401dd04

0800d1ec <__malloc_lock>:
 800d1ec:	4801      	ldr	r0, [pc, #4]	; (800d1f4 <__malloc_lock+0x8>)
 800d1ee:	f000 b809 	b.w	800d204 <__retarget_lock_acquire_recursive>
 800d1f2:	bf00      	nop
 800d1f4:	2401dd0c 	.word	0x2401dd0c

0800d1f8 <__malloc_unlock>:
 800d1f8:	4801      	ldr	r0, [pc, #4]	; (800d200 <__malloc_unlock+0x8>)
 800d1fa:	f000 b804 	b.w	800d206 <__retarget_lock_release_recursive>
 800d1fe:	bf00      	nop
 800d200:	2401dd0c 	.word	0x2401dd0c

0800d204 <__retarget_lock_acquire_recursive>:
 800d204:	4770      	bx	lr

0800d206 <__retarget_lock_release_recursive>:
 800d206:	4770      	bx	lr

0800d208 <_init>:
 800d208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20a:	bf00      	nop
 800d20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d20e:	bc08      	pop	{r3}
 800d210:	469e      	mov	lr, r3
 800d212:	4770      	bx	lr

0800d214 <_fini>:
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d216:	bf00      	nop
 800d218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d21a:	bc08      	pop	{r3}
 800d21c:	469e      	mov	lr, r3
 800d21e:	4770      	bx	lr
