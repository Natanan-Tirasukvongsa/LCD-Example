
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d128  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800d3c0  0800d3c0  0001d3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d400  0800d400  00037280  2**0
                  CONTENTS
  4 .ARM          00000008  0800d400  0800d400  0001d400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d408  0800d408  00037280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d408  0800d408  0001d408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d40c  0800d40c  0001d40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000171c0  24000000  0800d410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240171c0  080245d0  000371c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24017220  08024630  00037220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c844  24017280  08024690  00037280  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24023ac4  08024690  00043ac4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00037280  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033e60  00000000  00000000  000372ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004bd5  00000000  00000000  0006b10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b10  00000000  00000000  0006fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001998  00000000  00000000  000717f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ddb3  00000000  00000000  00073190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022d0a  00000000  00000000  000b0f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00196f3b  00000000  00000000  000d3c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0026ab88  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076e8  00000000  00000000  0026abdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24017280 	.word	0x24017280
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d3a8 	.word	0x0800d3a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24017284 	.word	0x24017284
 80002d4:	0800d3a8 	.word	0x0800d3a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <LCD_init>:

//การสั่งขา D/C หรือ A0 เพื่อส่ง command หรือ parameter
//เปลี่ยนแปลง data command ให้เป็น high เพื่อส่ง parameter
//เปลี่ยนแปลง data command ให้เป็น low เพื่อส่ง command
//ส่งข้อมูลภาพไปในจอใช้ขา data command high
void LCD_init(LCDHandle *lcd){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	//reset LCD
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	b29b      	uxth	r3, r3
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	f005 fb03 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fd8c 	bl	800223c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6858      	ldr	r0, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	b29b      	uxth	r3, r3
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	f005 faf7 	bl	8005d24 <HAL_GPIO_WritePin>

	//select SPI CS
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	b29b      	uxth	r3, r3
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f005 faee 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 fd77 	bl	800223c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6898      	ldr	r0, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f005 fae2 	bl	8005d24 <HAL_GPIO_WritePin>

	//write reset , sleep out, display on, scan order
	//write command 0x01, 0x11, 0x29, 0x36
	//4 = 4 commands
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f005 fad9 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2204      	movs	r2, #4
 800077a:	4938      	ldr	r1, [pc, #224]	; (800085c <LCD_init+0x158>)
 800077c:	f008 fd7e 	bl	800927c <HAL_SPI_Transmit>

	//write parameter of scan order
	//write parameter 0b01001000
	//&LCDSTARTUPSeq[4] 0ffset ไป 4 ตำแหน่ง
	//1 = 1 parameter
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68d8      	ldr	r0, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	b29b      	uxth	r3, r3
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f005 fac9 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	2201      	movs	r2, #1
 800079a:	4931      	ldr	r1, [pc, #196]	; (8000860 <LCD_init+0x15c>)
 800079c:	f008 fd6e 	bl	800927c <HAL_SPI_Transmit>

	//write set C area
	//write command 0x2a
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f005 fab9 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	492a      	ldr	r1, [pc, #168]	; (8000864 <LCD_init+0x160>)
 80007bc:	f008 fd5e 	bl	800927c <HAL_SPI_Transmit>

	//write set C area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68d8      	ldr	r0, [r3, #12]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	f005 faa9 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2204      	movs	r2, #4
 80007da:	4923      	ldr	r1, [pc, #140]	; (8000868 <LCD_init+0x164>)
 80007dc:	f008 fd4e 	bl	800927c <HAL_SPI_Transmit>

	//write set R area
	//write command 0x2b
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68d8      	ldr	r0, [r3, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f005 fa99 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2201      	movs	r2, #1
 80007fa:	491c      	ldr	r1, [pc, #112]	; (800086c <LCD_init+0x168>)
 80007fc:	f008 fd3e 	bl	800927c <HAL_SPI_Transmit>

	//write set R area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68d8      	ldr	r0, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	b29b      	uxth	r3, r3
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	f005 fa89 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2204      	movs	r2, #4
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <LCD_init+0x16c>)
 800081c:	f008 fd2e 	bl	800927c <HAL_SPI_Transmit>

	//write to graphic memory
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68d8      	ldr	r0, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f005 fa79 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	2201      	movs	r2, #1
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LCD_init+0x170>)
 800083c:	f008 fd1e 	bl	800927c <HAL_SPI_Transmit>

	//set DC to high to read & send image data
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68d8      	ldr	r0, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	b29b      	uxth	r3, r3
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f005 fa69 	bl	8005d24 <HAL_GPIO_WritePin>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000008 	.word	0x24000008
 8000860:	2400000c 	.word	0x2400000c
 8000864:	2400000d 	.word	0x2400000d
 8000868:	2400000e 	.word	0x2400000e
 800086c:	24000012 	.word	0x24000012
 8000870:	24000013 	.word	0x24000013
 8000874:	24000017 	.word	0x24000017

08000878 <LCD_flush>:

//ส่งข้อมูลของ frame ไปให้จอ
void LCD_flush(LCDHandle *lcd)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	//circular dma
	//Framememory มีขนาดเท่ากับหน้าจอ
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000888:	4903      	ldr	r1, [pc, #12]	; (8000898 <LCD_flush+0x20>)
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fee8 	bl	8009660 <HAL_SPI_Transmit_DMA>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2401729c 	.word	0x2401729c

0800089c <LCD_timer>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void LCD_timer(uint8_t timer)
{
 800089c:	b480      	push	{r7}
 800089e:	b093      	sub	sp, #76	; 0x4c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	switch(timer)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b60      	cmp	r3, #96	; 0x60
 80008aa:	f000 80a6 	beq.w	80009fa <LCD_timer+0x15e>
 80008ae:	2b60      	cmp	r3, #96	; 0x60
 80008b0:	f300 80c8 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008b4:	2b45      	cmp	r3, #69	; 0x45
 80008b6:	d07b      	beq.n	80009b0 <LCD_timer+0x114>
 80008b8:	2b45      	cmp	r3, #69	; 0x45
 80008ba:	f300 80c3 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008be:	2b30      	cmp	r3, #48	; 0x30
 80008c0:	d051      	beq.n	8000966 <LCD_timer+0xca>
 80008c2:	2b30      	cmp	r3, #48	; 0x30
 80008c4:	f300 80be 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <LCD_timer+0x36>
 80008cc:	2b15      	cmp	r3, #21
 80008ce:	d025      	beq.n	800091c <LCD_timer+0x80>
			}
		}
			break;

		default:
			break;
 80008d0:	e0b8      	b.n	8000a44 <LCD_timer+0x1a8>
			int k= 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i = 180; i < 15156; i = i+384 )
 80008d6:	23b4      	movs	r3, #180	; 0xb4
 80008d8:	647b      	str	r3, [r7, #68]	; 0x44
 80008da:	e019      	b.n	8000910 <LCD_timer+0x74>
				for(j=0;j<120;j++)
 80008dc:	2300      	movs	r3, #0
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
 80008e0:	e00c      	b.n	80008fc <LCD_timer+0x60>
					Framememory[i+j] = n0[j+k];
 80008e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80008e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e6:	441a      	add	r2, r3
 80008e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80008ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008ec:	440b      	add	r3, r1
 80008ee:	4959      	ldr	r1, [pc, #356]	; (8000a54 <LCD_timer+0x1b8>)
 80008f0:	5c89      	ldrb	r1, [r1, r2]
 80008f2:	4a59      	ldr	r2, [pc, #356]	; (8000a58 <LCD_timer+0x1bc>)
 80008f4:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 80008f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f8:	3301      	adds	r3, #1
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
 80008fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008fe:	2b77      	cmp	r3, #119	; 0x77
 8000900:	ddef      	ble.n	80008e2 <LCD_timer+0x46>
				k = k +120;
 8000902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000904:	3378      	adds	r3, #120	; 0x78
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i = 180; i < 15156; i = i+384 )
 8000908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800090a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
 8000910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000912:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000916:	4293      	cmp	r3, r2
 8000918:	dde0      	ble.n	80008dc <LCD_timer+0x40>
			break;
 800091a:	e094      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
			for(i = 180; i < 15156; i = i+384 )
 8000920:	23b4      	movs	r3, #180	; 0xb4
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
 8000924:	e019      	b.n	800095a <LCD_timer+0xbe>
				for(j=0;j<120;j++)
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
 800092a:	e00c      	b.n	8000946 <LCD_timer+0xaa>
					Framememory[i+j] = n15[j+k];
 800092c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800092e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000930:	441a      	add	r2, r3
 8000932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000936:	440b      	add	r3, r1
 8000938:	4948      	ldr	r1, [pc, #288]	; (8000a5c <LCD_timer+0x1c0>)
 800093a:	5c89      	ldrb	r1, [r1, r2]
 800093c:	4a46      	ldr	r2, [pc, #280]	; (8000a58 <LCD_timer+0x1bc>)
 800093e:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	3301      	adds	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
 8000946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000948:	2b77      	cmp	r3, #119	; 0x77
 800094a:	ddef      	ble.n	800092c <LCD_timer+0x90>
				k = k +120;
 800094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094e:	3378      	adds	r3, #120	; 0x78
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
			for(i = 180; i < 15156; i = i+384 )
 8000952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000954:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
 800095a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800095c:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000960:	4293      	cmp	r3, r2
 8000962:	dde0      	ble.n	8000926 <LCD_timer+0x8a>
			break;
 8000964:	e06f      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 180; i < 15156; i = i+384 )
 800096a:	23b4      	movs	r3, #180	; 0xb4
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800096e:	e019      	b.n	80009a4 <LCD_timer+0x108>
				for(j=0;j<120;j++)
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
 8000974:	e00c      	b.n	8000990 <LCD_timer+0xf4>
					Framememory[i+j] = n30[j+k];
 8000976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	441a      	add	r2, r3
 800097c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	440b      	add	r3, r1
 8000982:	4937      	ldr	r1, [pc, #220]	; (8000a60 <LCD_timer+0x1c4>)
 8000984:	5c89      	ldrb	r1, [r1, r2]
 8000986:	4a34      	ldr	r2, [pc, #208]	; (8000a58 <LCD_timer+0x1bc>)
 8000988:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 800098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098c:	3301      	adds	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000992:	2b77      	cmp	r3, #119	; 0x77
 8000994:	ddef      	ble.n	8000976 <LCD_timer+0xda>
				k = k +120;
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	3378      	adds	r3, #120	; 0x78
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 180; i < 15156; i = i+384 )
 800099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a6:	f643 3233 	movw	r2, #15155	; 0x3b33
 80009aa:	4293      	cmp	r3, r2
 80009ac:	dde0      	ble.n	8000970 <LCD_timer+0xd4>
			break;
 80009ae:	e04a      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
			for(i = 180; i < 15156; i = i+384 )
 80009b4:	23b4      	movs	r3, #180	; 0xb4
 80009b6:	623b      	str	r3, [r7, #32]
 80009b8:	e019      	b.n	80009ee <LCD_timer+0x152>
				for(j=0;j<120;j++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	e00c      	b.n	80009da <LCD_timer+0x13e>
					Framememory[i+j] = n45[j+k];
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	441a      	add	r2, r3
 80009c6:	6a39      	ldr	r1, [r7, #32]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	440b      	add	r3, r1
 80009cc:	4925      	ldr	r1, [pc, #148]	; (8000a64 <LCD_timer+0x1c8>)
 80009ce:	5c89      	ldrb	r1, [r1, r2]
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <LCD_timer+0x1bc>)
 80009d2:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	2b77      	cmp	r3, #119	; 0x77
 80009de:	ddef      	ble.n	80009c0 <LCD_timer+0x124>
				k = k +120;
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	3378      	adds	r3, #120	; 0x78
 80009e4:	61bb      	str	r3, [r7, #24]
			for(i = 180; i < 15156; i = i+384 )
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	f643 3233 	movw	r2, #15155	; 0x3b33
 80009f4:	4293      	cmp	r3, r2
 80009f6:	dde0      	ble.n	80009ba <LCD_timer+0x11e>
			break;
 80009f8:	e025      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
			for(i = 180; i < 15156; i = i+384 )
 80009fe:	23b4      	movs	r3, #180	; 0xb4
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e019      	b.n	8000a38 <LCD_timer+0x19c>
				for(j=0;j<120;j++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	e00c      	b.n	8000a24 <LCD_timer+0x188>
					Framememory[i+j] = n60[j+k];
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	441a      	add	r2, r3
 8000a10:	6979      	ldr	r1, [r7, #20]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	440b      	add	r3, r1
 8000a16:	4914      	ldr	r1, [pc, #80]	; (8000a68 <LCD_timer+0x1cc>)
 8000a18:	5c89      	ldrb	r1, [r1, r2]
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <LCD_timer+0x1bc>)
 8000a1c:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	3301      	adds	r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2b77      	cmp	r3, #119	; 0x77
 8000a28:	ddef      	ble.n	8000a0a <LCD_timer+0x16e>
				k = k +120;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3378      	adds	r3, #120	; 0x78
 8000a2e:	60fb      	str	r3, [r7, #12]
			for(i = 180; i < 15156; i = i+384 )
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	dde0      	ble.n	8000a04 <LCD_timer+0x168>
			break;
 8000a42:	e000      	b.n	8000a46 <LCD_timer+0x1aa>
			break;
 8000a44:	bf00      	nop
	}
}
 8000a46:	bf00      	nop
 8000a48:	374c      	adds	r7, #76	; 0x4c
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	24011390 	.word	0x24011390
 8000a58:	2401729c 	.word	0x2401729c
 8000a5c:	24012650 	.word	0x24012650
 8000a60:	24013910 	.word	0x24013910
 8000a64:	24014bd0 	.word	0x24014bd0
 8000a68:	24015e90 	.word	0x24015e90

08000a6c <LCD_fan>:

void LCD_fan(uint8_t RTC_ON)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	switch(RTC_ON)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <LCD_fan+0x16>
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d026      	beq.n	8000ace <LCD_fan+0x62>
			}
		}
			break;

		default:
			break;
 8000a80:	e04b      	b.n	8000b1a <LCD_fan+0xae>
			int a,b,c = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
			for(a = 23100; a <= 39996; a = a+384 )
 8000a86:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e019      	b.n	8000ac2 <LCD_fan+0x56>
				for(b=0;b<135;b++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	e00c      	b.n	8000aae <LCD_fan+0x42>
					Framememory[a+b] = fan_off[b+c];
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	441a      	add	r2, r3
 8000a9a:	69f9      	ldr	r1, [r7, #28]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	4921      	ldr	r1, [pc, #132]	; (8000b28 <LCD_fan+0xbc>)
 8000aa2:	5c89      	ldrb	r1, [r1, r2]
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <LCD_fan+0xc0>)
 8000aa6:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	2b86      	cmp	r3, #134	; 0x86
 8000ab2:	ddef      	ble.n	8000a94 <LCD_fan+0x28>
				c = c +135;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3387      	adds	r3, #135	; 0x87
 8000ab8:	617b      	str	r3, [r7, #20]
			for(a = 23100; a <= 39996; a = a+384 )
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	dde0      	ble.n	8000a8e <LCD_fan+0x22>
			break;
 8000acc:	e025      	b.n	8000b1a <LCD_fan+0xae>
			int a,b,c = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
			for(a = 23100; a <= 39996; a = a+384 )
 8000ad2:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	e019      	b.n	8000b0e <LCD_fan+0xa2>
				for(b=0;b<135;b++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e00c      	b.n	8000afa <LCD_fan+0x8e>
					Framememory[a+b] = fan_on[b+c];
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	6939      	ldr	r1, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	440b      	add	r3, r1
 8000aec:	4910      	ldr	r1, [pc, #64]	; (8000b30 <LCD_fan+0xc4>)
 8000aee:	5c89      	ldrb	r1, [r1, r2]
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LCD_fan+0xc0>)
 8000af2:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b86      	cmp	r3, #134	; 0x86
 8000afe:	ddef      	ble.n	8000ae0 <LCD_fan+0x74>
				c = c +135;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	3387      	adds	r3, #135	; 0x87
 8000b04:	60bb      	str	r3, [r7, #8]
			for(a = 23100; a <= 39996; a = a+384 )
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000b14:	4293      	cmp	r3, r2
 8000b16:	dde0      	ble.n	8000ada <LCD_fan+0x6e>
			break;
 8000b18:	bf00      	nop
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2400c018 	.word	0x2400c018
 8000b2c:	2401729c 	.word	0x2401729c
 8000b30:	2400d7d4 	.word	0x2400d7d4

08000b34 <LCD_speed>:

void LCD_speed(uint8_t speed)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b08d      	sub	sp, #52	; 0x34
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	switch(speed)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d052      	beq.n	8000bea <LCD_speed+0xb6>
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	dc76      	bgt.n	8000c36 <LCD_speed+0x102>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d002      	beq.n	8000b52 <LCD_speed+0x1e>
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d026      	beq.n	8000b9e <LCD_speed+0x6a>
		}
			break;


		default:
			break;
 8000b50:	e071      	b.n	8000c36 <LCD_speed+0x102>
			int i,j,n = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 25956; i <= 37760; i = i+384 )
 8000b56:	f246 5364 	movw	r3, #25956	; 0x6564
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b5c:	e019      	b.n	8000b92 <LCD_speed+0x5e>
				for(j=0;j<96;j++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b62:	e00c      	b.n	8000b7e <LCD_speed+0x4a>
					Framememory[i+j] = speed1[j+n];
 8000b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	441a      	add	r2, r3
 8000b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6e:	440b      	add	r3, r1
 8000b70:	4934      	ldr	r1, [pc, #208]	; (8000c44 <LCD_speed+0x110>)
 8000b72:	5c89      	ldrb	r1, [r1, r2]
 8000b74:	4a34      	ldr	r2, [pc, #208]	; (8000c48 <LCD_speed+0x114>)
 8000b76:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b80:	2b5f      	cmp	r3, #95	; 0x5f
 8000b82:	ddef      	ble.n	8000b64 <LCD_speed+0x30>
				n = n +96;
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	3360      	adds	r3, #96	; 0x60
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 25956; i <= 37760; i = i+384 )
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	f249 3280 	movw	r2, #37760	; 0x9380
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	dde0      	ble.n	8000b5e <LCD_speed+0x2a>
			break;
 8000b9c:	e04c      	b.n	8000c38 <LCD_speed+0x104>
			int i,j,n = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
			for(i = 25956; i <= 37760; i = i+384 )
 8000ba2:	f246 5364 	movw	r3, #25956	; 0x6564
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	e019      	b.n	8000bde <LCD_speed+0xaa>
				for(j=0;j<96;j++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	e00c      	b.n	8000bca <LCD_speed+0x96>
					Framememory[i+j] = speed2[j+n];
 8000bb0:	69fa      	ldr	r2, [r7, #28]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	441a      	add	r2, r3
 8000bb6:	6a39      	ldr	r1, [r7, #32]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	440b      	add	r3, r1
 8000bbc:	4923      	ldr	r1, [pc, #140]	; (8000c4c <LCD_speed+0x118>)
 8000bbe:	5c89      	ldrb	r1, [r1, r2]
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <LCD_speed+0x114>)
 8000bc2:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	2b5f      	cmp	r3, #95	; 0x5f
 8000bce:	ddef      	ble.n	8000bb0 <LCD_speed+0x7c>
				n = n +96;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	3360      	adds	r3, #96	; 0x60
 8000bd4:	61bb      	str	r3, [r7, #24]
			for(i = 25956; i <= 37760; i = i+384 )
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	f249 3280 	movw	r2, #37760	; 0x9380
 8000be4:	4293      	cmp	r3, r2
 8000be6:	dde0      	ble.n	8000baa <LCD_speed+0x76>
			break;
 8000be8:	e026      	b.n	8000c38 <LCD_speed+0x104>
			int i,j,n = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
			for(i = 25956; i <= 37760; i = i+384 )
 8000bee:	f246 5364 	movw	r3, #25956	; 0x6564
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	e019      	b.n	8000c2a <LCD_speed+0xf6>
				for(j=0;j<96;j++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	e00c      	b.n	8000c16 <LCD_speed+0xe2>
					Framememory[i+j] = speed3[j+n];
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	441a      	add	r2, r3
 8000c02:	6979      	ldr	r1, [r7, #20]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	440b      	add	r3, r1
 8000c08:	4911      	ldr	r1, [pc, #68]	; (8000c50 <LCD_speed+0x11c>)
 8000c0a:	5c89      	ldrb	r1, [r1, r2]
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <LCD_speed+0x114>)
 8000c0e:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	3301      	adds	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	2b5f      	cmp	r3, #95	; 0x5f
 8000c1a:	ddef      	ble.n	8000bfc <LCD_speed+0xc8>
				n = n +96;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3360      	adds	r3, #96	; 0x60
 8000c20:	60fb      	str	r3, [r7, #12]
			for(i = 25956; i <= 37760; i = i+384 )
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f249 3280 	movw	r2, #37760	; 0x9380
 8000c30:	4293      	cmp	r3, r2
 8000c32:	dde0      	ble.n	8000bf6 <LCD_speed+0xc2>
			break;
 8000c34:	e000      	b.n	8000c38 <LCD_speed+0x104>
			break;
 8000c36:	bf00      	nop
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3734      	adds	r7, #52	; 0x34
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	2400ef90 	.word	0x2400ef90
 8000c48:	2401729c 	.word	0x2401729c
 8000c4c:	2400fb90 	.word	0x2400fb90
 8000c50:	24010790 	.word	0x24010790

08000c54 <UARTInit>:
#include "stm32h7xx_hal.h"
#include "Uart.h"


void UARTInit(UARTStucrture *uart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->RxLen);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	88db      	ldrh	r3, [r3, #6]
 8000c60:	4619      	mov	r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	f00c fad0 	bl	800d208 <calloc>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->TxLen);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	889b      	ldrh	r3, [r3, #4]
 8000c74:	4619      	mov	r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	f00c fac6 	bl	800d208 <calloc>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	81da      	strh	r2, [r3, #14]

}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6919      	ldr	r1, [r3, #16]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	88db      	ldrh	r3, [r3, #6]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f00a fb32 	bl	800b31c <HAL_UART_Receive_DMA>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000ccc:	bf00      	nop
 8000cce:	4baf      	ldr	r3, [pc, #700]	; (8000f8c <main+0x2cc>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d004      	beq.n	8000ce4 <main+0x24>
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	dcf4      	bgt.n	8000cce <main+0xe>
		;
	if (timeout < 0) {
 8000ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	da01      	bge.n	8000cee <main+0x2e>
		Error_Handler();
 8000cea:	f000 fdab 	bl	8001844 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cee:	f001 fa13 	bl	8002118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf2:	f000 f9b7 	bl	8001064 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000cf6:	4ba5      	ldr	r3, [pc, #660]	; (8000f8c <main+0x2cc>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	4aa3      	ldr	r2, [pc, #652]	; (8000f8c <main+0x2cc>)
 8000cfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d06:	4ba1      	ldr	r3, [pc, #644]	; (8000f8c <main+0x2cc>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000d14:	2000      	movs	r0, #0
 8000d16:	f005 f81f 	bl	8005d58 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f005 f835 	bl	8005d8c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000d28:	bf00      	nop
 8000d2a:	4b98      	ldr	r3, [pc, #608]	; (8000f8c <main+0x2cc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d104      	bne.n	8000d40 <main+0x80>
 8000d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dcf4      	bgt.n	8000d2a <main+0x6a>
		;
	if (timeout < 0) {
 8000d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	da01      	bge.n	8000d4a <main+0x8a>
		Error_Handler();
 8000d46:	f000 fd7d 	bl	8001844 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 fca1 	bl	8001690 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d4e:	f000 fa0f 	bl	8001170 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d52:	f000 fbef 	bl	8001534 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000d56:	f000 fc6b 	bl	8001630 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d5a:	f000 fae7 	bl	800132c <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d5e:	f000 fc35 	bl	80015cc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000d62:	f000 fb3b 	bl	80013dc <MX_TIM1_Init>
  MX_RTC_Init();
 8000d66:	f000 fa4f 	bl	8001208 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  	//�?ำหนดขา pin
	ST7735.hspi = &hspi1;
 8000d6a:	4b89      	ldr	r3, [pc, #548]	; (8000f90 <main+0x2d0>)
 8000d6c:	4a89      	ldr	r2, [pc, #548]	; (8000f94 <main+0x2d4>)
 8000d6e:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 8000d70:	4b87      	ldr	r3, [pc, #540]	; (8000f90 <main+0x2d0>)
 8000d72:	4a89      	ldr	r2, [pc, #548]	; (8000f98 <main+0x2d8>)
 8000d74:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 8000d76:	4b86      	ldr	r3, [pc, #536]	; (8000f90 <main+0x2d0>)
 8000d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d7c:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 8000d7e:	4b84      	ldr	r3, [pc, #528]	; (8000f90 <main+0x2d0>)
 8000d80:	4a85      	ldr	r2, [pc, #532]	; (8000f98 <main+0x2d8>)
 8000d82:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 8000d84:	4b82      	ldr	r3, [pc, #520]	; (8000f90 <main+0x2d0>)
 8000d86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d8a:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 8000d8c:	4b80      	ldr	r3, [pc, #512]	; (8000f90 <main+0x2d0>)
 8000d8e:	4a83      	ldr	r2, [pc, #524]	; (8000f9c <main+0x2dc>)
 8000d90:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 8000d92:	4b7f      	ldr	r3, [pc, #508]	; (8000f90 <main+0x2d0>)
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	611a      	str	r2, [r3, #16]
	//เริ่ม�?ารเขียน sequence data
	LCD_init(&ST7735);
 8000d9a:	487d      	ldr	r0, [pc, #500]	; (8000f90 <main+0x2d0>)
 8000d9c:	f7ff fcb2 	bl	8000704 <LCD_init>
	//flush ข้อมูล dma
	LCD_flush(&ST7735);
 8000da0:	487b      	ldr	r0, [pc, #492]	; (8000f90 <main+0x2d0>)
 8000da2:	f7ff fd69 	bl	8000878 <LCD_flush>
	//รับข้อมูลภาพด้วย uart
	UART2.huart = &huart3;
 8000da6:	4b7e      	ldr	r3, [pc, #504]	; (8000fa0 <main+0x2e0>)
 8000da8:	4a7e      	ldr	r2, [pc, #504]	; (8000fa4 <main+0x2e4>)
 8000daa:	601a      	str	r2, [r3, #0]
	UART2.RxLen =255;
 8000dac:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <main+0x2e0>)
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	80da      	strh	r2, [r3, #6]
	UART2.TxLen =255;
 8000db2:	4b7b      	ldr	r3, [pc, #492]	; (8000fa0 <main+0x2e0>)
 8000db4:	22ff      	movs	r2, #255	; 0xff
 8000db6:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 8000db8:	4879      	ldr	r0, [pc, #484]	; (8000fa0 <main+0x2e0>)
 8000dba:	f7ff ff4b 	bl	8000c54 <UARTInit>
	UARTResetStart(&UART2);
 8000dbe:	4878      	ldr	r0, [pc, #480]	; (8000fa0 <main+0x2e0>)
 8000dc0:	f7ff ff6d 	bl	8000c9e <UARTResetStart>

	//start pwm
	HAL_TIM_Base_Start(&htim1);
 8000dc4:	4878      	ldr	r0, [pc, #480]	; (8000fa8 <main+0x2e8>)
 8000dc6:	f009 f951 	bl	800a06c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4876      	ldr	r0, [pc, #472]	; (8000fa8 <main+0x2e8>)
 8000dce:	f009 fa17 	bl	800a200 <HAL_TIM_PWM_Start>

	//initial parameter
	shareMemory->PWM = 2500; //pwm @ 25%
 8000dd2:	4b76      	ldr	r3, [pc, #472]	; (8000fac <main+0x2ec>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000dda:	601a      	str	r2, [r3, #0]
	shareMemory->fan_mode = 1; //fan low speed
 8000ddc:	4b73      	ldr	r3, [pc, #460]	; (8000fac <main+0x2ec>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2201      	movs	r2, #1
 8000de2:	711a      	strb	r2, [r3, #4]
	shareMemory->mode_change = 0; //if fan changes mode
 8000de4:	4b71      	ldr	r3, [pc, #452]	; (8000fac <main+0x2ec>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	715a      	strb	r2, [r3, #5]
	shareMemory->RTC_ON = 0; //does rtc work?
 8000dec:	4b6f      	ldr	r3, [pc, #444]	; (8000fac <main+0x2ec>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	719a      	strb	r2, [r3, #6]
	shareMemory->RTC_change = 0; //rtc change
 8000df4:	4b6d      	ldr	r3, [pc, #436]	; (8000fac <main+0x2ec>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	71da      	strb	r2, [r3, #7]
	shareMemory->finish = 0; //does fan work 1 min?
 8000dfc:	4b6b      	ldr	r3, [pc, #428]	; (8000fac <main+0x2ec>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	721a      	strb	r2, [r3, #8]
	shareMemory->led1 = 0; //led1 status
 8000e04:	4b69      	ldr	r3, [pc, #420]	; (8000fac <main+0x2ec>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	725a      	strb	r2, [r3, #9]
	shareMemory->led2 = 1; //led2 status
 8000e0c:	4b67      	ldr	r3, [pc, #412]	; (8000fac <main+0x2ec>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2201      	movs	r2, #1
 8000e12:	729a      	strb	r2, [r3, #10]
	shareMemory->led3 = 1; //led3 status
 8000e14:	4b65      	ldr	r3, [pc, #404]	; (8000fac <main+0x2ec>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	72da      	strb	r2, [r3, #11]

	//led setup
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, shareMemory->led1); //show led1
 8000e1c:	4b63      	ldr	r3, [pc, #396]	; (8000fac <main+0x2ec>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	7a5b      	ldrb	r3, [r3, #9]
 8000e22:	461a      	mov	r2, r3
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	4861      	ldr	r0, [pc, #388]	; (8000fb0 <main+0x2f0>)
 8000e2a:	f004 ff7b 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, shareMemory->led2); //close led2
 8000e2e:	4b5f      	ldr	r3, [pc, #380]	; (8000fac <main+0x2ec>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	7a9b      	ldrb	r3, [r3, #10]
 8000e34:	461a      	mov	r2, r3
 8000e36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e3a:	485d      	ldr	r0, [pc, #372]	; (8000fb0 <main+0x2f0>)
 8000e3c:	f004 ff72 	bl	8005d24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, shareMemory->led3); //close led3
 8000e40:	4b5a      	ldr	r3, [pc, #360]	; (8000fac <main+0x2ec>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	7adb      	ldrb	r3, [r3, #11]
 8000e46:	461a      	mov	r2, r3
 8000e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4c:	4858      	ldr	r0, [pc, #352]	; (8000fb0 <main+0x2f0>)
 8000e4e:	f004 ff69 	bl	8005d24 <HAL_GPIO_WritePin>

	//lcd UI
	memcpy(Framememory,fan,sizeof(fan)); //background
 8000e52:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <main+0x2f4>)
 8000e54:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <main+0x2f8>)
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e5e:	461a      	mov	r2, r3
 8000e60:	f00c fa04 	bl	800d26c <memcpy>
	LCD_speed(shareMemory->fan_mode); //show fan mode
 8000e64:	4b51      	ldr	r3, [pc, #324]	; (8000fac <main+0x2ec>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fe62 	bl	8000b34 <LCD_speed>
	LCD_fan(shareMemory->RTC_ON); //show rtc status
 8000e70:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <main+0x2ec>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	799b      	ldrb	r3, [r3, #6]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fdf8 	bl	8000a6c <LCD_fan>
	LCD_timer(0x00); //show timer
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fd0d 	bl	800089c <LCD_timer>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_HSEM_FastTake(1) == HAL_OK) //hsem cm7 is ready
 8000e82:	2001      	movs	r0, #1
 8000e84:	f004 ff68 	bl	8005d58 <HAL_HSEM_FastTake>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f9      	bne.n	8000e82 <main+0x1c2>
		{

			if (shareMemory->RTC_change ) //rtc status change
 8000e8e:	4b47      	ldr	r3, [pc, #284]	; (8000fac <main+0x2ec>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	79db      	ldrb	r3, [r3, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d021      	beq.n	8000edc <main+0x21c>
			{
				LCD_flush(&ST7735); //spi transmit dma normal
 8000e98:	483d      	ldr	r0, [pc, #244]	; (8000f90 <main+0x2d0>)
 8000e9a:	f7ff fced 	bl	8000878 <LCD_flush>
				LCD_fan(shareMemory->RTC_ON); //show fan status on
 8000e9e:	4b43      	ldr	r3, [pc, #268]	; (8000fac <main+0x2ec>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	799b      	ldrb	r3, [r3, #6]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fde1 	bl	8000a6c <LCD_fan>
				shareMemory->RTC_change = 0; //change rtc status (reset)
 8000eaa:	4b40      	ldr	r3, [pc, #256]	; (8000fac <main+0x2ec>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	71da      	strb	r2, [r3, #7]

				//rtc work
				//start clock
				RTC_TimeTypeDef sTime = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
				sTime.Hours =0x00; //0x14 (2 pm.)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	753b      	strb	r3, [r7, #20]
				sTime.Minutes =0x00; //0x30 (half hour or 30 min)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	757b      	strb	r3, [r7, #21]
				sTime.Seconds = 0x00; // 0 second
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75bb      	strb	r3, [r7, #22]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4839      	ldr	r0, [pc, #228]	; (8000fbc <main+0x2fc>)
 8000ed8:	f007 fc94 	bl	8008804 <HAL_RTC_SetTime>
//				sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
//				sDate.Year = 0x21;
//				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
			}

			if (shareMemory->mode_change) //fan mode chande
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <main+0x2ec>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	795b      	ldrb	r3, [r3, #5]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d027      	beq.n	8000f36 <main+0x276>
			{
				LCD_flush(&ST7735); //spi transmit dma normal
 8000ee6:	482a      	ldr	r0, [pc, #168]	; (8000f90 <main+0x2d0>)
 8000ee8:	f7ff fcc6 	bl	8000878 <LCD_flush>
				LCD_speed(shareMemory->fan_mode); //change fan speed
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <main+0x2ec>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	791b      	ldrb	r3, [r3, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fe1e 	bl	8000b34 <LCD_speed>
				shareMemory->mode_change = 0; ////change fan status (reset)
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <main+0x2ec>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2200      	movs	r2, #0
 8000efe:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, shareMemory->led1); //show led1
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <main+0x2ec>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	7a5b      	ldrb	r3, [r3, #9]
 8000f06:	461a      	mov	r2, r3
 8000f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0c:	4828      	ldr	r0, [pc, #160]	; (8000fb0 <main+0x2f0>)
 8000f0e:	f004 ff09 	bl	8005d24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, shareMemory->led2); //show led2
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <main+0x2ec>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	7a9b      	ldrb	r3, [r3, #10]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f1e:	4824      	ldr	r0, [pc, #144]	; (8000fb0 <main+0x2f0>)
 8000f20:	f004 ff00 	bl	8005d24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, shareMemory->led3); //show led3
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <main+0x2ec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	7adb      	ldrb	r3, [r3, #11]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f30:	481f      	ldr	r0, [pc, #124]	; (8000fb0 <main+0x2f0>)
 8000f32:	f004 fef7 	bl	8005d24 <HAL_GPIO_WritePin>
			}

			if (shareMemory->RTC_ON == 1) //if rtc work
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <main+0x2ec>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	799b      	ldrb	r3, [r3, #6]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d176      	bne.n	800102e <main+0x36e>
			{
				RTC_TimeTypeDef sTime = NowTime; //save time
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <main+0x300>)
 8000f42:	463c      	mov	r4, r7
 8000f44:	461d      	mov	r5, r3
 8000f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4a:	682b      	ldr	r3, [r5, #0]
 8000f4c:	6023      	str	r3, [r4, #0]

				//time over flow
				if (sTime.Seconds >= 0x60)
 8000f4e:	78bb      	ldrb	r3, [r7, #2]
 8000f50:	2b5f      	cmp	r3, #95	; 0x5f
 8000f52:	d937      	bls.n	8000fc4 <main+0x304>
				{
					sTime.Seconds -= 0x60;
 8000f54:	78bb      	ldrb	r3, [r7, #2]
 8000f56:	3b60      	subs	r3, #96	; 0x60
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	70bb      	strb	r3, [r7, #2]
					sTime.Minutes++;
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	707b      	strb	r3, [r7, #1]
					if (sTime.Minutes >= 0x60)
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b5f      	cmp	r3, #95	; 0x5f
 8000f68:	d92c      	bls.n	8000fc4 <main+0x304>
					{
						sTime.Minutes -= 0x60;
 8000f6a:	787b      	ldrb	r3, [r7, #1]
 8000f6c:	3b60      	subs	r3, #96	; 0x60
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	707b      	strb	r3, [r7, #1]
						sTime.Hours++;
 8000f72:	783b      	ldrb	r3, [r7, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	703b      	strb	r3, [r7, #0]
						if (sTime.Hours >= 0x24)
 8000f7a:	783b      	ldrb	r3, [r7, #0]
 8000f7c:	2b23      	cmp	r3, #35	; 0x23
 8000f7e:	d921      	bls.n	8000fc4 <main+0x304>
						{
							sTime.Hours -= 0x24;
 8000f80:	783b      	ldrb	r3, [r7, #0]
 8000f82:	3b24      	subs	r3, #36	; 0x24
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	703b      	strb	r3, [r7, #0]
 8000f88:	e01c      	b.n	8000fc4 <main+0x304>
 8000f8a:	bf00      	nop
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	2402329c 	.word	0x2402329c
 8000f94:	240238e0 	.word	0x240238e0
 8000f98:	58020c00 	.word	0x58020c00
 8000f9c:	58021800 	.word	0x58021800
 8000fa0:	240232b8 	.word	0x240232b8
 8000fa4:	2402335c 	.word	0x2402335c
 8000fa8:	24023894 	.word	0x24023894
 8000fac:	24017150 	.word	0x24017150
 8000fb0:	58020800 	.word	0x58020800
 8000fb4:	2401729c 	.word	0x2401729c
 8000fb8:	24000018 	.word	0x24000018
 8000fbc:	24023870 	.word	0x24023870
 8000fc0:	24023968 	.word	0x24023968
						}
					}
				}

				//if fan does not work for 1 min
				if (sTime.Minutes < 0x01)
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <main+0x33e>
				{
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, shareMemory->PWM); //drive motor
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <main+0x38c>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <main+0x390>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34

					//show timer every 15 sec
					if (sTime.Seconds == 0x00 || sTime.Seconds == 0x15 || sTime.Seconds ==0x30 ||sTime.Seconds == 0x45)
 8000fd6:	78bb      	ldrb	r3, [r7, #2]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d008      	beq.n	8000fee <main+0x32e>
 8000fdc:	78bb      	ldrb	r3, [r7, #2]
 8000fde:	2b15      	cmp	r3, #21
 8000fe0:	d005      	beq.n	8000fee <main+0x32e>
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	2b30      	cmp	r3, #48	; 0x30
 8000fe6:	d002      	beq.n	8000fee <main+0x32e>
 8000fe8:	78bb      	ldrb	r3, [r7, #2]
 8000fea:	2b45      	cmp	r3, #69	; 0x45
 8000fec:	d11f      	bne.n	800102e <main+0x36e>
					{
						LCD_flush(&ST7735); //spi transmit dma normal
 8000fee:	4819      	ldr	r0, [pc, #100]	; (8001054 <main+0x394>)
 8000ff0:	f7ff fc42 	bl	8000878 <LCD_flush>
						LCD_timer(sTime.Seconds); //show timer
 8000ff4:	78bb      	ldrb	r3, [r7, #2]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fc50 	bl	800089c <LCD_timer>
 8000ffc:	e017      	b.n	800102e <main+0x36e>

				}
				//if fan works for 1 min
				else
				{
					shareMemory->RTC_ON = 0; //rtc work done (reset)
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <main+0x38c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	719a      	strb	r2, [r3, #6]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0); //stop driving motor
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <main+0x390>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	635a      	str	r2, [r3, #52]	; 0x34

					LCD_flush(&ST7735); //spi transmit dma normal
 800100e:	4811      	ldr	r0, [pc, #68]	; (8001054 <main+0x394>)
 8001010:	f7ff fc32 	bl	8000878 <LCD_flush>
					LCD_timer(0x60); //show 60 sec
 8001014:	2060      	movs	r0, #96	; 0x60
 8001016:	f7ff fc41 	bl	800089c <LCD_timer>
					LCD_fan(shareMemory->RTC_ON); //show rtc status
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <main+0x38c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	799b      	ldrb	r3, [r3, #6]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fd23 	bl	8000a6c <LCD_fan>

					shareMemory->finish = 1; //work for 1 min is done
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <main+0x38c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2201      	movs	r2, #1
 800102c:	721a      	strb	r2, [r3, #8]

				}
			}

			//read RTC
			HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 800102e:	2201      	movs	r2, #1
 8001030:	4909      	ldr	r1, [pc, #36]	; (8001058 <main+0x398>)
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <main+0x39c>)
 8001034:	f007 fc84 	bl	8008940 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8001038:	2201      	movs	r2, #1
 800103a:	4909      	ldr	r1, [pc, #36]	; (8001060 <main+0x3a0>)
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <main+0x39c>)
 800103e:	f007 fd63 	bl	8008b08 <HAL_RTC_GetDate>

			//hsem release
			HAL_HSEM_Release(1, 0);
 8001042:	2100      	movs	r1, #0
 8001044:	2001      	movs	r0, #1
 8001046:	f004 fea1 	bl	8005d8c <HAL_HSEM_Release>
		if (HAL_HSEM_FastTake(1) == HAL_OK) //hsem cm7 is ready
 800104a:	e71a      	b.n	8000e82 <main+0x1c2>
 800104c:	24017150 	.word	0x24017150
 8001050:	24023894 	.word	0x24023894
 8001054:	2402329c 	.word	0x2402329c
 8001058:	24023968 	.word	0x24023968
 800105c:	24023870 	.word	0x24023870
 8001060:	2402386c 	.word	0x2402386c

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09c      	sub	sp, #112	; 0x70
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	224c      	movs	r2, #76	; 0x4c
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f00c f908 	bl	800d288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2220      	movs	r2, #32
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f00c f902 	bl	800d288 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001084:	2004      	movs	r0, #4
 8001086:	f004 ffdd 	bl	8006044 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <SystemClock_Config+0x100>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a34      	ldr	r2, [pc, #208]	; (8001164 <SystemClock_Config+0x100>)
 8001094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <SystemClock_Config+0x100>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <SystemClock_Config+0x104>)
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <SystemClock_Config+0x104>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <SystemClock_Config+0x104>)
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010bc:	bf00      	nop
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <SystemClock_Config+0x100>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ca:	d1f8      	bne.n	80010be <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <SystemClock_Config+0x108>)
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	f023 0303 	bic.w	r3, r3, #3
 80010d4:	4a25      	ldr	r2, [pc, #148]	; (800116c <SystemClock_Config+0x108>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010dc:	2309      	movs	r3, #9
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e6:	2301      	movs	r3, #1
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2302      	movs	r3, #2
 80010ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ee:	2302      	movs	r3, #2
 80010f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80010f6:	2319      	movs	r3, #25
 80010f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80010fe:	2306      	movs	r3, #6
 8001100:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001102:	2302      	movs	r3, #2
 8001104:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001106:	230c      	movs	r3, #12
 8001108:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800110a:	2300      	movs	r3, #0
 800110c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fffe 	bl	8006118 <HAL_RCC_OscConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001122:	f000 fb8f 	bl	8001844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001126:	233f      	movs	r3, #63	; 0x3f
 8001128:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112a:	2303      	movs	r3, #3
 800112c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001132:	2308      	movs	r3, #8
 8001134:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001136:	2340      	movs	r3, #64	; 0x40
 8001138:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800113a:	2340      	movs	r3, #64	; 0x40
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001142:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001144:	2340      	movs	r3, #64	; 0x40
 8001146:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f005 fbf3 	bl	8006938 <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001158:	f000 fb74 	bl	8001844 <Error_Handler>
  }
}
 800115c:	bf00      	nop
 800115e:	3770      	adds	r7, #112	; 0x70
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	58024800 	.word	0x58024800
 8001168:	58000400 	.word	0x58000400
 800116c:	58024400 	.word	0x58024400

08001170 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_ETH_Init+0x80>)
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <MX_ETH_Init+0x84>)
 8001178:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_ETH_Init+0x88>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ETH_Init+0x88>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_ETH_Init+0x88>)
 8001188:	22e1      	movs	r2, #225	; 0xe1
 800118a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_ETH_Init+0x88>)
 800118e:	2200      	movs	r2, #0
 8001190:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_ETH_Init+0x88>)
 8001194:	2200      	movs	r2, #0
 8001196:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_ETH_Init+0x88>)
 800119a:	2200      	movs	r2, #0
 800119c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_ETH_Init+0x80>)
 80011a0:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <MX_ETH_Init+0x88>)
 80011a2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_ETH_Init+0x80>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_ETH_Init+0x80>)
 80011ac:	4a13      	ldr	r2, [pc, #76]	; (80011fc <MX_ETH_Init+0x8c>)
 80011ae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_ETH_Init+0x80>)
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MX_ETH_Init+0x90>)
 80011b4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_ETH_Init+0x80>)
 80011b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_ETH_Init+0x80>)
 80011c0:	f003 ffea 	bl	8005198 <HAL_ETH_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80011ca:	f000 fb3b 	bl	8001844 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011ce:	2234      	movs	r2, #52	; 0x34
 80011d0:	2100      	movs	r1, #0
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <MX_ETH_Init+0x94>)
 80011d4:	f00c f858 	bl	800d288 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <MX_ETH_Init+0x94>)
 80011da:	2221      	movs	r2, #33	; 0x21
 80011dc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_ETH_Init+0x94>)
 80011e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011e4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <MX_ETH_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2402397c 	.word	0x2402397c
 80011f4:	40028000 	.word	0x40028000
 80011f8:	240232d0 	.word	0x240232d0
 80011fc:	24017220 	.word	0x24017220
 8001200:	240171c0 	.word	0x240171c0
 8001204:	24023a04 	.word	0x24023a04

08001208 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b090      	sub	sp, #64	; 0x40
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800120e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	2228      	movs	r2, #40	; 0x28
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f00c f82d 	bl	800d288 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800122e:	4b3c      	ldr	r3, [pc, #240]	; (8001320 <MX_RTC_Init+0x118>)
 8001230:	4a3c      	ldr	r2, [pc, #240]	; (8001324 <MX_RTC_Init+0x11c>)
 8001232:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001234:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <MX_RTC_Init+0x118>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <MX_RTC_Init+0x118>)
 800123c:	227f      	movs	r2, #127	; 0x7f
 800123e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <MX_RTC_Init+0x118>)
 8001242:	22ff      	movs	r2, #255	; 0xff
 8001244:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <MX_RTC_Init+0x118>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800124c:	4b34      	ldr	r3, [pc, #208]	; (8001320 <MX_RTC_Init+0x118>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <MX_RTC_Init+0x118>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <MX_RTC_Init+0x118>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800125e:	4830      	ldr	r0, [pc, #192]	; (8001320 <MX_RTC_Init+0x118>)
 8001260:	f007 fa58 	bl	8008714 <HAL_RTC_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800126a:	f000 faeb 	bl	8001844 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001274:	2300      	movs	r3, #0
 8001276:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800127a:	2300      	movs	r3, #0
 800127c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001280:	2300      	movs	r3, #0
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128c:	2201      	movs	r2, #1
 800128e:	4619      	mov	r1, r3
 8001290:	4823      	ldr	r0, [pc, #140]	; (8001320 <MX_RTC_Init+0x118>)
 8001292:	f007 fab7 	bl	8008804 <HAL_RTC_SetTime>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800129c:	f000 fad2 	bl	8001844 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012bc:	2201      	movs	r2, #1
 80012be:	4619      	mov	r1, r3
 80012c0:	4817      	ldr	r0, [pc, #92]	; (8001320 <MX_RTC_Init+0x118>)
 80012c2:	f007 fb99 	bl	80089f8 <HAL_RTC_SetDate>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80012cc:	f000 faba 	bl	8001844 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80012d8:	2300      	movs	r3, #0
 80012da:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_RTC_Init+0x120>)
 80012ea:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80012fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	2201      	movs	r2, #1
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_RTC_Init+0x118>)
 8001308:	f007 fc4c 	bl	8008ba4 <HAL_RTC_SetAlarm_IT>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001312:	f000 fa97 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3740      	adds	r7, #64	; 0x40
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	24023870 	.word	0x24023870
 8001324:	58004000 	.word	0x58004000
 8001328:	00808080 	.word	0x00808080

0800132c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001332:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <MX_SPI1_Init+0xac>)
 8001334:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001338:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800133c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001340:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001344:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001348:	2207      	movs	r2, #7
 800134a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800135a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800135e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001362:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001366:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800136a:	2200      	movs	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001370:	2200      	movs	r2, #0
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001376:	2200      	movs	r2, #0
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001386:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800138a:	2200      	movs	r2, #0
 800138c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001390:	2200      	movs	r2, #0
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001396:	2200      	movs	r2, #0
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013c2:	f007 fe59 	bl	8009078 <HAL_SPI_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80013cc:	f000 fa3a 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	240238e0 	.word	0x240238e0
 80013d8:	40013000 	.word	0x40013000

080013dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b09a      	sub	sp, #104	; 0x68
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]
 800140e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	222c      	movs	r2, #44	; 0x2c
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f00b ff36 	bl	800d288 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <MX_TIM1_Init+0x150>)
 800141e:	4a44      	ldr	r2, [pc, #272]	; (8001530 <MX_TIM1_Init+0x154>)
 8001420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001422:	4b42      	ldr	r3, [pc, #264]	; (800152c <MX_TIM1_Init+0x150>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <MX_TIM1_Init+0x150>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800142e:	4b3f      	ldr	r3, [pc, #252]	; (800152c <MX_TIM1_Init+0x150>)
 8001430:	f242 7210 	movw	r2, #10000	; 0x2710
 8001434:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <MX_TIM1_Init+0x150>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800143c:	4b3b      	ldr	r3, [pc, #236]	; (800152c <MX_TIM1_Init+0x150>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <MX_TIM1_Init+0x150>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001448:	4838      	ldr	r0, [pc, #224]	; (800152c <MX_TIM1_Init+0x150>)
 800144a:	f008 fdb8 	bl	8009fbe <HAL_TIM_Base_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001454:	f000 f9f6 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800145e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001462:	4619      	mov	r1, r3
 8001464:	4831      	ldr	r0, [pc, #196]	; (800152c <MX_TIM1_Init+0x150>)
 8001466:	f009 f8e3 	bl	800a630 <HAL_TIM_ConfigClockSource>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001470:	f000 f9e8 	bl	8001844 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001474:	482d      	ldr	r0, [pc, #180]	; (800152c <MX_TIM1_Init+0x150>)
 8001476:	f008 fe61 	bl	800a13c <HAL_TIM_PWM_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001480:	f000 f9e0 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001490:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001494:	4619      	mov	r1, r3
 8001496:	4825      	ldr	r0, [pc, #148]	; (800152c <MX_TIM1_Init+0x150>)
 8001498:	f009 fdea 	bl	800b070 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80014a2:	f000 f9cf 	bl	8001844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a6:	2360      	movs	r3, #96	; 0x60
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ae:	2300      	movs	r3, #0
 80014b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014b2:	2300      	movs	r3, #0
 80014b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c6:	2200      	movs	r2, #0
 80014c8:	4619      	mov	r1, r3
 80014ca:	4818      	ldr	r0, [pc, #96]	; (800152c <MX_TIM1_Init+0x150>)
 80014cc:	f008 ffa0 	bl	800a410 <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80014d6:	f000 f9b5 	bl	8001844 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_TIM1_Init+0x150>)
 8001510:	f009 fe36 	bl	800b180 <HAL_TIMEx_ConfigBreakDeadTime>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800151a:	f000 f993 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <MX_TIM1_Init+0x150>)
 8001520:	f000 fb9c 	bl	8001c5c <HAL_TIM_MspPostInit>

}
 8001524:	bf00      	nop
 8001526:	3768      	adds	r7, #104	; 0x68
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	24023894 	.word	0x24023894
 8001530:	40010000 	.word	0x40010000

08001534 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 800153a:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <MX_USART3_UART_Init+0x94>)
 800153c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001540:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001544:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 800157e:	f009 fe7d 	bl	800b27c <HAL_UART_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001588:	f000 f95c 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158c:	2100      	movs	r1, #0
 800158e:	480d      	ldr	r0, [pc, #52]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 8001590:	f00b fab2 	bl	800caf8 <HAL_UARTEx_SetTxFifoThreshold>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800159a:	f000 f953 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 80015a2:	f00b fae7 	bl	800cb74 <HAL_UARTEx_SetRxFifoThreshold>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015ac:	f000 f94a 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_USART3_UART_Init+0x90>)
 80015b2:	f00b fa68 	bl	800ca86 <HAL_UARTEx_DisableFifoMode>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015bc:	f000 f942 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2402335c 	.word	0x2402335c
 80015c8:	40004800 	.word	0x40004800

080015cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80015d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015d8:	2209      	movs	r2, #9
 80015da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015de:	2202      	movs	r2, #2
 80015e0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015ea:	2202      	movs	r2, #2
 80015ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001602:	2201      	movs	r2, #1
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001608:	2201      	movs	r2, #1
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800160e:	2200      	movs	r2, #0
 8001610:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001614:	f004 fbce 	bl	8005db4 <HAL_PCD_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800161e:	f000 f911 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	240233ec 	.word	0x240233ec
 800162c:	40080000 	.word	0x40080000

08001630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <MX_DMA_Init+0x5c>)
 8001638:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800163c:	4a13      	ldr	r2, [pc, #76]	; (800168c <MX_DMA_Init+0x5c>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_DMA_Init+0x5c>)
 8001648:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	200b      	movs	r0, #11
 800165a:	f000 ff0e 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800165e:	200b      	movs	r0, #11
 8001660:	f000 ff25 	bl	80024ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	200c      	movs	r0, #12
 800166a:	f000 ff06 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800166e:	200c      	movs	r0, #12
 8001670:	f000 ff1d 	bl	80024ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	200d      	movs	r0, #13
 800167a:	f000 fefe 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800167e:	200d      	movs	r0, #13
 8001680:	f000 ff15 	bl	80024ae <HAL_NVIC_EnableIRQ>

}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	58024400 	.word	0x58024400

08001690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	; 0x30
 8001694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	4b62      	ldr	r3, [pc, #392]	; (8001830 <MX_GPIO_Init+0x1a0>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	4a60      	ldr	r2, [pc, #384]	; (8001830 <MX_GPIO_Init+0x1a0>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b6:	4b5e      	ldr	r3, [pc, #376]	; (8001830 <MX_GPIO_Init+0x1a0>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c4:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <MX_GPIO_Init+0x1a0>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	4a59      	ldr	r2, [pc, #356]	; (8001830 <MX_GPIO_Init+0x1a0>)
 80016cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d4:	4b56      	ldr	r3, [pc, #344]	; (8001830 <MX_GPIO_Init+0x1a0>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b53      	ldr	r3, [pc, #332]	; (8001830 <MX_GPIO_Init+0x1a0>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	4a51      	ldr	r2, [pc, #324]	; (8001830 <MX_GPIO_Init+0x1a0>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f2:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <MX_GPIO_Init+0x1a0>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <MX_GPIO_Init+0x1a0>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	4a4a      	ldr	r2, [pc, #296]	; (8001830 <MX_GPIO_Init+0x1a0>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001710:	4b47      	ldr	r3, [pc, #284]	; (8001830 <MX_GPIO_Init+0x1a0>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800171e:	4b44      	ldr	r3, [pc, #272]	; (8001830 <MX_GPIO_Init+0x1a0>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	4a42      	ldr	r2, [pc, #264]	; (8001830 <MX_GPIO_Init+0x1a0>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172e:	4b40      	ldr	r3, [pc, #256]	; (8001830 <MX_GPIO_Init+0x1a0>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800173c:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <MX_GPIO_Init+0x1a0>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	4a3b      	ldr	r2, [pc, #236]	; (8001830 <MX_GPIO_Init+0x1a0>)
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800174c:	4b38      	ldr	r3, [pc, #224]	; (8001830 <MX_GPIO_Init+0x1a0>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800175a:	4b35      	ldr	r3, [pc, #212]	; (8001830 <MX_GPIO_Init+0x1a0>)
 800175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001760:	4a33      	ldr	r2, [pc, #204]	; (8001830 <MX_GPIO_Init+0x1a0>)
 8001762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <MX_GPIO_Init+0x1a0>)
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	2101      	movs	r1, #1
 800177c:	482d      	ldr	r0, [pc, #180]	; (8001834 <MX_GPIO_Init+0x1a4>)
 800177e:	f004 fad1 	bl	8005d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001788:	482b      	ldr	r0, [pc, #172]	; (8001838 <MX_GPIO_Init+0x1a8>)
 800178a:	f004 facb 	bl	8005d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	4828      	ldr	r0, [pc, #160]	; (8001838 <MX_GPIO_Init+0x1a8>)
 8001796:	f004 fac5 	bl	8005d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80017a0:	4826      	ldr	r0, [pc, #152]	; (800183c <MX_GPIO_Init+0x1ac>)
 80017a2:	f004 fabf 	bl	8005d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ac:	4824      	ldr	r0, [pc, #144]	; (8001840 <MX_GPIO_Init+0x1b0>)
 80017ae:	f004 fab9 	bl	8005d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80017b2:	2301      	movs	r3, #1
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	481a      	ldr	r0, [pc, #104]	; (8001834 <MX_GPIO_Init+0x1a4>)
 80017ca:	f004 f8fb 	bl	80059c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 80017ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4814      	ldr	r0, [pc, #80]	; (8001838 <MX_GPIO_Init+0x1a8>)
 80017e8:	f004 f8ec 	bl	80059c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : led3_Pin led2_Pin led1_Pin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 80017ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <MX_GPIO_Init+0x1ac>)
 8001806:	f004 f8dd 	bl	80059c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800180a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <MX_GPIO_Init+0x1b0>)
 8001824:	f004 f8ce 	bl	80059c4 <HAL_GPIO_Init>

}
 8001828:	bf00      	nop
 800182a:	3730      	adds	r7, #48	; 0x30
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	58024400 	.word	0x58024400
 8001834:	58020400 	.word	0x58020400
 8001838:	58020c00 	.word	0x58020c00
 800183c:	58020800 	.word	0x58020800
 8001840:	58021800 	.word	0x58021800

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_MspInit+0x30>)
 8001858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800185c:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_MspInit+0x30>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_MspInit+0x30>)
 8001868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	58024400 	.word	0x58024400

08001884 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08e      	sub	sp, #56	; 0x38
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a59      	ldr	r2, [pc, #356]	; (8001a08 <HAL_ETH_MspInit+0x184>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	f040 80ab 	bne.w	80019fe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80018a8:	4b58      	ldr	r3, [pc, #352]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 80018aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ae:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 80018b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018b8:	4b54      	ldr	r3, [pc, #336]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 80018ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80018c6:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 80018c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018cc:	4a4f      	ldr	r2, [pc, #316]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018d6:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 80018d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80018e4:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 80018e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ea:	4a48      	ldr	r2, [pc, #288]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018f4:	4b45      	ldr	r3, [pc, #276]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 80018f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001908:	4a40      	ldr	r2, [pc, #256]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	4a39      	ldr	r2, [pc, #228]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001944:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001962:	4a2a      	ldr	r2, [pc, #168]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 8001964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_ETH_MspInit+0x188>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800197a:	2332      	movs	r3, #50	; 0x32
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800198a:	230b      	movs	r3, #11
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001992:	4619      	mov	r1, r3
 8001994:	481e      	ldr	r0, [pc, #120]	; (8001a10 <HAL_ETH_MspInit+0x18c>)
 8001996:	f004 f815 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800199a:	2386      	movs	r3, #134	; 0x86
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019aa:	230b      	movs	r3, #11
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	4817      	ldr	r0, [pc, #92]	; (8001a14 <HAL_ETH_MspInit+0x190>)
 80019b6:	f004 f805 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019cc:	230b      	movs	r3, #11
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	4619      	mov	r1, r3
 80019d6:	4810      	ldr	r0, [pc, #64]	; (8001a18 <HAL_ETH_MspInit+0x194>)
 80019d8:	f003 fff4 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80019dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ee:	230b      	movs	r3, #11
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f6:	4619      	mov	r1, r3
 80019f8:	4808      	ldr	r0, [pc, #32]	; (8001a1c <HAL_ETH_MspInit+0x198>)
 80019fa:	f003 ffe3 	bl	80059c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3738      	adds	r7, #56	; 0x38
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40028000 	.word	0x40028000
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	58020800 	.word	0x58020800
 8001a14:	58020000 	.word	0x58020000
 8001a18:	58020400 	.word	0x58020400
 8001a1c:	58021800 	.word	0x58021800

08001a20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0b2      	sub	sp, #200	; 0xc8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	22bc      	movs	r2, #188	; 0xbc
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00b fc29 	bl	800d288 <memset>
  if(hrtc->Instance==RTC)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <HAL_RTC_MspInit+0x68>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d11e      	bne.n	8001a7e <HAL_RTC_MspInit+0x5e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a44:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	4618      	mov	r0, r3
 8001a54:	f005 fafc 	bl	8007050 <HAL_RCCEx_PeriphCLKConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a5e:	f7ff fef1 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_RTC_MspInit+0x6c>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_RTC_MspInit+0x6c>)
 8001a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	2029      	movs	r0, #41	; 0x29
 8001a74:	f000 fd01 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a78:	2029      	movs	r0, #41	; 0x29
 8001a7a:	f000 fd18 	bl	80024ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	37c8      	adds	r7, #200	; 0xc8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	58004000 	.word	0x58004000
 8001a8c:	58024400 	.word	0x58024400

08001a90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0ba      	sub	sp, #232	; 0xe8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	22bc      	movs	r2, #188	; 0xbc
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00b fbe9 	bl	800d288 <memset>
  if(hspi->Instance==SPI1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <HAL_SPI_MspInit+0x170>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	f040 809b 	bne.w	8001bf8 <HAL_SPI_MspInit+0x168>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f005 fabd 	bl	8007050 <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001adc:	f7ff feb2 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ae0:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HAL_SPI_MspInit+0x174>)
 8001ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae6:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_SPI_MspInit+0x174>)
 8001ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001af0:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <HAL_SPI_MspInit+0x174>)
 8001af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_SPI_MspInit+0x174>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b04:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <HAL_SPI_MspInit+0x174>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_SPI_MspInit+0x174>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_SPI_MspInit+0x174>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	4a38      	ldr	r2, [pc, #224]	; (8001c04 <HAL_SPI_MspInit+0x174>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2c:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_SPI_MspInit+0x174>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b52:	2305      	movs	r3, #5
 8001b54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	482a      	ldr	r0, [pc, #168]	; (8001c08 <HAL_SPI_MspInit+0x178>)
 8001b60:	f003 ff30 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b64:	2320      	movs	r3, #32
 8001b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4820      	ldr	r0, [pc, #128]	; (8001c0c <HAL_SPI_MspInit+0x17c>)
 8001b8a:	f003 ff1b 	bl	80059c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001b90:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <HAL_SPI_MspInit+0x184>)
 8001b92:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001b96:	2226      	movs	r2, #38	; 0x26
 8001b98:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001b9c:	2240      	movs	r2, #64	; 0x40
 8001b9e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bcc:	4810      	ldr	r0, [pc, #64]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001bce:	f000 fc9d 	bl	800250c <HAL_DMA_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8001bd8:	f7ff fe34 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001be0:	679a      	str	r2, [r3, #120]	; 0x78
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_SPI_MspInit+0x180>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	2023      	movs	r0, #35	; 0x23
 8001bee:	f000 fc44 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bf2:	2023      	movs	r0, #35	; 0x23
 8001bf4:	f000 fc5b 	bl	80024ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bf8:	bf00      	nop
 8001bfa:	37e8      	adds	r7, #232	; 0xe8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40013000 	.word	0x40013000
 8001c04:	58024400 	.word	0x58024400
 8001c08:	58020000 	.word	0x58020000
 8001c0c:	58020400 	.word	0x58020400
 8001c10:	24023a38 	.word	0x24023a38
 8001c14:	40020010 	.word	0x40020010

08001c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <HAL_TIM_Base_MspInit+0x3c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d10e      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_TIM_Base_MspInit+0x40>)
 8001c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c30:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_TIM_Base_MspInit+0x40>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_TIM_Base_MspInit+0x40>)
 8001c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40010000 	.word	0x40010000
 8001c58:	58024400 	.word	0x58024400

08001c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <HAL_TIM_MspPostInit+0x6c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d11f      	bne.n	8001cbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_TIM_MspPostInit+0x70>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <HAL_TIM_MspPostInit+0x70>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_TIM_MspPostInit+0x70>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <HAL_TIM_MspPostInit+0x74>)
 8001cba:	f003 fe83 	bl	80059c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	58021000 	.word	0x58021000

08001cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0b8      	sub	sp, #224	; 0xe0
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	22bc      	movs	r2, #188	; 0xbc
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f00b fac7 	bl	800d288 <memset>
  if(huart->Instance==USART3)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a57      	ldr	r2, [pc, #348]	; (8001e5c <HAL_UART_MspInit+0x188>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	f040 80a6 	bne.w	8001e52 <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d06:	2302      	movs	r3, #2
 8001d08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	4618      	mov	r0, r3
 8001d16:	f005 f99b 	bl	8007050 <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001d20:	f7ff fd90 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d24:	4b4e      	ldr	r3, [pc, #312]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d2a:	4a4d      	ldr	r2, [pc, #308]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d34:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d42:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	4a45      	ldr	r2, [pc, #276]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001d4a:	f043 0308 	orr.w	r3, r3, #8
 8001d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d52:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d84:	4619      	mov	r1, r3
 8001d86:	4837      	ldr	r0, [pc, #220]	; (8001e64 <HAL_UART_MspInit+0x190>)
 8001d88:	f003 fe1c 	bl	80059c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001d8e:	4a37      	ldr	r2, [pc, #220]	; (8001e6c <HAL_UART_MspInit+0x198>)
 8001d90:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d92:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001d94:	222d      	movs	r2, #45	; 0x2d
 8001d96:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d98:	4b33      	ldr	r3, [pc, #204]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9e:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001da4:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001daa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dac:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dbe:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dc0:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001dcc:	4826      	ldr	r0, [pc, #152]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001dce:	f000 fb9d 	bl	800250c <HAL_DMA_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001dd8:	f7ff fd34 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a22      	ldr	r2, [pc, #136]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001de0:	67da      	str	r2, [r3, #124]	; 0x7c
 8001de2:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <HAL_UART_MspInit+0x194>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001dea:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <HAL_UART_MspInit+0x1a0>)
 8001dec:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001df0:	222e      	movs	r2, #46	; 0x2e
 8001df2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e06:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e26:	4812      	ldr	r0, [pc, #72]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001e28:	f000 fb70 	bl	800250c <HAL_DMA_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001e32:	f7ff fd07 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001e3a:	679a      	str	r2, [r3, #120]	; 0x78
 8001e3c:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_UART_MspInit+0x19c>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2027      	movs	r0, #39	; 0x27
 8001e48:	f000 fb17 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e4c:	2027      	movs	r0, #39	; 0x27
 8001e4e:	f000 fb2e 	bl	80024ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e52:	bf00      	nop
 8001e54:	37e0      	adds	r7, #224	; 0xe0
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40004800 	.word	0x40004800
 8001e60:	58024400 	.word	0x58024400
 8001e64:	58020c00 	.word	0x58020c00
 8001e68:	240232e4 	.word	0x240232e4
 8001e6c:	40020028 	.word	0x40020028
 8001e70:	240237f4 	.word	0x240237f4
 8001e74:	40020040 	.word	0x40020040

08001e78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0b8      	sub	sp, #224	; 0xe0
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	22bc      	movs	r2, #188	; 0xbc
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00b f9f5 	bl	800d288 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a37      	ldr	r2, [pc, #220]	; (8001f80 <HAL_PCD_MspInit+0x108>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d166      	bne.n	8001f76 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ea8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001eac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001eb2:	2312      	movs	r3, #18
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001ec2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ec6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001ec8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ecc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001ece:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4618      	mov	r0, r3
 8001edc:	f005 f8b8 	bl	8007050 <HAL_RCCEx_PeriphCLKConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001ee6:	f7ff fcad 	bl	8001844 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001eea:	f004 f905 	bl	80060f8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_PCD_MspInit+0x10c>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <HAL_PCD_MspInit+0x10c>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_PCD_MspInit+0x10c>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001f0c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001f26:	230a      	movs	r3, #10
 8001f28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f30:	4619      	mov	r1, r3
 8001f32:	4815      	ldr	r0, [pc, #84]	; (8001f88 <HAL_PCD_MspInit+0x110>)
 8001f34:	f003 fd46 	bl	80059c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f50:	4619      	mov	r1, r3
 8001f52:	480d      	ldr	r0, [pc, #52]	; (8001f88 <HAL_PCD_MspInit+0x110>)
 8001f54:	f003 fd36 	bl	80059c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_PCD_MspInit+0x10c>)
 8001f5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_PCD_MspInit+0x10c>)
 8001f60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_PCD_MspInit+0x10c>)
 8001f6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	37e0      	adds	r7, #224	; 0xe0
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40080000 	.word	0x40080000
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58020000 	.word	0x58020000

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <NMI_Handler+0x4>

08001f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <MemManage_Handler+0x4>

08001f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd8:	f000 f910 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <DMA1_Stream0_IRQHandler+0x10>)
 8001fe6:	f001 fdb9 	bl	8003b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	24023a38 	.word	0x24023a38

08001ff4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <DMA1_Stream1_IRQHandler+0x10>)
 8001ffa:	f001 fdaf 	bl	8003b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	240232e4 	.word	0x240232e4

08002008 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <DMA1_Stream2_IRQHandler+0x10>)
 800200e:	f001 fda5 	bl	8003b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	240237f4 	.word	0x240237f4

0800201c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <SPI1_IRQHandler+0x10>)
 8002022:	f007 fc63 	bl	80098ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	240238e0 	.word	0x240238e0

08002030 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <USART3_IRQHandler+0x10>)
 8002036:	f009 f9b7 	bl	800b3a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2402335c 	.word	0x2402335c

08002044 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <RTC_Alarm_IRQHandler+0x10>)
 800204a:	f006 fee1 	bl	8008e10 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	24023870 	.word	0x24023870

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f00b f8c6 	bl	800d218 <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	24080000 	.word	0x24080000
 80020b8:	00000400 	.word	0x00000400
 80020bc:	240232d8 	.word	0x240232d8
 80020c0:	24023ac8 	.word	0x24023ac8

080020c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020c8:	f7fe fa82 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ce:	490d      	ldr	r1, [pc, #52]	; (8002104 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e4:	4c0a      	ldr	r4, [pc, #40]	; (8002110 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f2:	f00b f897 	bl	800d224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f6:	f7fe fde3 	bl	8000cc0 <main>
  bx  lr
 80020fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002100:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002104:	240171c0 	.word	0x240171c0
  ldr r2, =_sidata
 8002108:	0800d410 	.word	0x0800d410
  ldr r2, =_sbss
 800210c:	24017280 	.word	0x24017280
  ldr r4, =_ebss
 8002110:	24023ac4 	.word	0x24023ac4

08002114 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC3_IRQHandler>
	...

08002118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211e:	2003      	movs	r0, #3
 8002120:	f000 f9a0 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002124:	f004 fdbe 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_Init+0x68>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	4913      	ldr	r1, [pc, #76]	; (8002184 <HAL_Init+0x6c>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
 8002140:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_Init+0x68>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <HAL_Init+0x6c>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <HAL_Init+0x70>)
 800215a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_Init+0x74>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002162:	2000      	movs	r0, #0
 8002164:	f000 f814 	bl	8002190 <HAL_InitTick>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e002      	b.n	8002178 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002172:	f7ff fb6d 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	58024400 	.word	0x58024400
 8002184:	0800d3c0 	.word	0x0800d3c0
 8002188:	24000004 	.word	0x24000004
 800218c:	24000000 	.word	0x24000000

08002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_InitTick+0x60>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e021      	b.n	80021e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_InitTick+0x64>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_InitTick+0x60>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f985 	bl	80024ca <HAL_SYSTICK_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00e      	b.n	80021e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d80a      	bhi.n	80021e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f000 f94f 	bl	800247a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021dc:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <HAL_InitTick+0x68>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	24017158 	.word	0x24017158
 80021f4:	24000000 	.word	0x24000000
 80021f8:	24017154 	.word	0x24017154

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	24017158 	.word	0x24017158
 8002220:	24023ab0 	.word	0x24023ab0

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	24023ab0 	.word	0x24023ab0

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff ffee 	bl	8002224 <HAL_GetTick>
 8002248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002262:	bf00      	nop
 8002264:	f7ff ffde 	bl	8002224 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	24017158 	.word	0x24017158

08002284 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_GetREVID+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0c1b      	lsrs	r3, r3, #16
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	5c001000 	.word	0x5c001000

0800229c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80022ac:	4904      	ldr	r1, [pc, #16]	; (80022c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	58000400 	.word	0x58000400

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <__NVIC_SetPriorityGrouping+0x40>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	; (8002304 <__NVIC_SetPriorityGrouping+0x40>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00
 8002308:	05fa0000 	.word	0x05fa0000

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4907      	ldr	r1, [pc, #28]	; (8002360 <__NVIC_EnableIRQ+0x38>)
 8002342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	; (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	; (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7ff ff8e 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff29 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002488:	f7ff ff40 	bl	800230c <__NVIC_GetPriorityGrouping>
 800248c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ff90 	bl	80023b8 <NVIC_EncodePriority>
 8002498:	4602      	mov	r2, r0
 800249a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff5f 	bl	8002364 <__NVIC_SetPriority>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff33 	bl	8002328 <__NVIC_EnableIRQ>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ffa4 	bl	8002420 <SysTick_Config>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <HAL_GetCurrentCPUID+0x24>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	2b07      	cmp	r3, #7
 80024f4:	d101      	bne.n	80024fa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e000      	b.n	80024fc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80024fa:	2301      	movs	r3, #1
  }
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff fe86 	bl	8002224 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e316      	b.n	8002b52 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a66      	ldr	r2, [pc, #408]	; (80026c4 <HAL_DMA_Init+0x1b8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d04a      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a65      	ldr	r2, [pc, #404]	; (80026c8 <HAL_DMA_Init+0x1bc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d045      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a63      	ldr	r2, [pc, #396]	; (80026cc <HAL_DMA_Init+0x1c0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d040      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a62      	ldr	r2, [pc, #392]	; (80026d0 <HAL_DMA_Init+0x1c4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d03b      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a60      	ldr	r2, [pc, #384]	; (80026d4 <HAL_DMA_Init+0x1c8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d036      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a5f      	ldr	r2, [pc, #380]	; (80026d8 <HAL_DMA_Init+0x1cc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d031      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5d      	ldr	r2, [pc, #372]	; (80026dc <HAL_DMA_Init+0x1d0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d02c      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a5c      	ldr	r2, [pc, #368]	; (80026e0 <HAL_DMA_Init+0x1d4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d027      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a5a      	ldr	r2, [pc, #360]	; (80026e4 <HAL_DMA_Init+0x1d8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d022      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a59      	ldr	r2, [pc, #356]	; (80026e8 <HAL_DMA_Init+0x1dc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d01d      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_DMA_Init+0x1e0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d018      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_DMA_Init+0x1e4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a54      	ldr	r2, [pc, #336]	; (80026f4 <HAL_DMA_Init+0x1e8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00e      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a53      	ldr	r2, [pc, #332]	; (80026f8 <HAL_DMA_Init+0x1ec>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a51      	ldr	r2, [pc, #324]	; (80026fc <HAL_DMA_Init+0x1f0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_DMA_Init+0xb8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a50      	ldr	r2, [pc, #320]	; (8002700 <HAL_DMA_Init+0x1f4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_DMA_Init+0xbc>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_DMA_Init+0xbe>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 813b 	beq.w	8002846 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a37      	ldr	r2, [pc, #220]	; (80026c4 <HAL_DMA_Init+0x1b8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d04a      	beq.n	8002680 <HAL_DMA_Init+0x174>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a36      	ldr	r2, [pc, #216]	; (80026c8 <HAL_DMA_Init+0x1bc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d045      	beq.n	8002680 <HAL_DMA_Init+0x174>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a34      	ldr	r2, [pc, #208]	; (80026cc <HAL_DMA_Init+0x1c0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d040      	beq.n	8002680 <HAL_DMA_Init+0x174>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a33      	ldr	r2, [pc, #204]	; (80026d0 <HAL_DMA_Init+0x1c4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d03b      	beq.n	8002680 <HAL_DMA_Init+0x174>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a31      	ldr	r2, [pc, #196]	; (80026d4 <HAL_DMA_Init+0x1c8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d036      	beq.n	8002680 <HAL_DMA_Init+0x174>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a30      	ldr	r2, [pc, #192]	; (80026d8 <HAL_DMA_Init+0x1cc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d031      	beq.n	8002680 <HAL_DMA_Init+0x174>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2e      	ldr	r2, [pc, #184]	; (80026dc <HAL_DMA_Init+0x1d0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d02c      	beq.n	8002680 <HAL_DMA_Init+0x174>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2d      	ldr	r2, [pc, #180]	; (80026e0 <HAL_DMA_Init+0x1d4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d027      	beq.n	8002680 <HAL_DMA_Init+0x174>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <HAL_DMA_Init+0x1d8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d022      	beq.n	8002680 <HAL_DMA_Init+0x174>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <HAL_DMA_Init+0x1dc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d01d      	beq.n	8002680 <HAL_DMA_Init+0x174>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a28      	ldr	r2, [pc, #160]	; (80026ec <HAL_DMA_Init+0x1e0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d018      	beq.n	8002680 <HAL_DMA_Init+0x174>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <HAL_DMA_Init+0x1e4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d013      	beq.n	8002680 <HAL_DMA_Init+0x174>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <HAL_DMA_Init+0x1e8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00e      	beq.n	8002680 <HAL_DMA_Init+0x174>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <HAL_DMA_Init+0x1ec>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_DMA_Init+0x174>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_DMA_Init+0x1f0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_DMA_Init+0x174>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a21      	ldr	r2, [pc, #132]	; (8002700 <HAL_DMA_Init+0x1f4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d108      	bne.n	8002692 <HAL_DMA_Init+0x186>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e007      	b.n	80026a2 <HAL_DMA_Init+0x196>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026a2:	e02f      	b.n	8002704 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a4:	f7ff fdbe 	bl	8002224 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	d928      	bls.n	8002704 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2203      	movs	r2, #3
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e246      	b.n	8002b52 <HAL_DMA_Init+0x646>
 80026c4:	40020010 	.word	0x40020010
 80026c8:	40020028 	.word	0x40020028
 80026cc:	40020040 	.word	0x40020040
 80026d0:	40020058 	.word	0x40020058
 80026d4:	40020070 	.word	0x40020070
 80026d8:	40020088 	.word	0x40020088
 80026dc:	400200a0 	.word	0x400200a0
 80026e0:	400200b8 	.word	0x400200b8
 80026e4:	40020410 	.word	0x40020410
 80026e8:	40020428 	.word	0x40020428
 80026ec:	40020440 	.word	0x40020440
 80026f0:	40020458 	.word	0x40020458
 80026f4:	40020470 	.word	0x40020470
 80026f8:	40020488 	.word	0x40020488
 80026fc:	400204a0 	.word	0x400204a0
 8002700:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1c8      	bne.n	80026a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4b83      	ldr	r3, [pc, #524]	; (800292c <HAL_DMA_Init+0x420>)
 800271e:	4013      	ands	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800272a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002736:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002742:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2b04      	cmp	r3, #4
 8002756:	d107      	bne.n	8002768 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	4313      	orrs	r3, r2
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002768:	4b71      	ldr	r3, [pc, #452]	; (8002930 <HAL_DMA_Init+0x424>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b71      	ldr	r3, [pc, #452]	; (8002934 <HAL_DMA_Init+0x428>)
 800276e:	4013      	ands	r3, r2
 8002770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002774:	d328      	bcc.n	80027c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b28      	cmp	r3, #40	; 0x28
 800277c:	d903      	bls.n	8002786 <HAL_DMA_Init+0x27a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b2e      	cmp	r3, #46	; 0x2e
 8002784:	d917      	bls.n	80027b6 <HAL_DMA_Init+0x2aa>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b3e      	cmp	r3, #62	; 0x3e
 800278c:	d903      	bls.n	8002796 <HAL_DMA_Init+0x28a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b42      	cmp	r3, #66	; 0x42
 8002794:	d90f      	bls.n	80027b6 <HAL_DMA_Init+0x2aa>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b46      	cmp	r3, #70	; 0x46
 800279c:	d903      	bls.n	80027a6 <HAL_DMA_Init+0x29a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b48      	cmp	r3, #72	; 0x48
 80027a4:	d907      	bls.n	80027b6 <HAL_DMA_Init+0x2aa>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b4e      	cmp	r3, #78	; 0x4e
 80027ac:	d905      	bls.n	80027ba <HAL_DMA_Init+0x2ae>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b52      	cmp	r3, #82	; 0x52
 80027b4:	d801      	bhi.n	80027ba <HAL_DMA_Init+0x2ae>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_DMA_Init+0x2b0>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0307 	bic.w	r3, r3, #7
 80027de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d117      	bne.n	8002822 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f002 fb3d 	bl	8004e84 <DMA_CheckFifoParam>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2240      	movs	r2, #64	; 0x40
 8002814:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e197      	b.n	8002b52 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f002 fa78 	bl	8004d20 <DMA_CalcBaseAndBitshift>
 8002830:	4603      	mov	r3, r0
 8002832:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	223f      	movs	r2, #63	; 0x3f
 800283e:	409a      	lsls	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	e0cd      	b.n	80029e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a3b      	ldr	r2, [pc, #236]	; (8002938 <HAL_DMA_Init+0x42c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d022      	beq.n	8002896 <HAL_DMA_Init+0x38a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a39      	ldr	r2, [pc, #228]	; (800293c <HAL_DMA_Init+0x430>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01d      	beq.n	8002896 <HAL_DMA_Init+0x38a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a38      	ldr	r2, [pc, #224]	; (8002940 <HAL_DMA_Init+0x434>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d018      	beq.n	8002896 <HAL_DMA_Init+0x38a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a36      	ldr	r2, [pc, #216]	; (8002944 <HAL_DMA_Init+0x438>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_DMA_Init+0x38a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a35      	ldr	r2, [pc, #212]	; (8002948 <HAL_DMA_Init+0x43c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00e      	beq.n	8002896 <HAL_DMA_Init+0x38a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a33      	ldr	r2, [pc, #204]	; (800294c <HAL_DMA_Init+0x440>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_DMA_Init+0x38a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a32      	ldr	r2, [pc, #200]	; (8002950 <HAL_DMA_Init+0x444>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d004      	beq.n	8002896 <HAL_DMA_Init+0x38a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a30      	ldr	r2, [pc, #192]	; (8002954 <HAL_DMA_Init+0x448>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_DMA_Init+0x38e>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_DMA_Init+0x390>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8097 	beq.w	80029d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a24      	ldr	r2, [pc, #144]	; (8002938 <HAL_DMA_Init+0x42c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d021      	beq.n	80028f0 <HAL_DMA_Init+0x3e4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_DMA_Init+0x430>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01c      	beq.n	80028f0 <HAL_DMA_Init+0x3e4>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a21      	ldr	r2, [pc, #132]	; (8002940 <HAL_DMA_Init+0x434>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d017      	beq.n	80028f0 <HAL_DMA_Init+0x3e4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_DMA_Init+0x438>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d012      	beq.n	80028f0 <HAL_DMA_Init+0x3e4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <HAL_DMA_Init+0x43c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00d      	beq.n	80028f0 <HAL_DMA_Init+0x3e4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1c      	ldr	r2, [pc, #112]	; (800294c <HAL_DMA_Init+0x440>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d008      	beq.n	80028f0 <HAL_DMA_Init+0x3e4>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_DMA_Init+0x444>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <HAL_DMA_Init+0x3e4>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <HAL_DMA_Init+0x448>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2202      	movs	r2, #2
 80028fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_DMA_Init+0x44c>)
 800290e:	4013      	ands	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d020      	beq.n	800295c <HAL_DMA_Init+0x450>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b80      	cmp	r3, #128	; 0x80
 8002920:	d102      	bne.n	8002928 <HAL_DMA_Init+0x41c>
 8002922:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002926:	e01a      	b.n	800295e <HAL_DMA_Init+0x452>
 8002928:	2300      	movs	r3, #0
 800292a:	e018      	b.n	800295e <HAL_DMA_Init+0x452>
 800292c:	fe10803f 	.word	0xfe10803f
 8002930:	5c001000 	.word	0x5c001000
 8002934:	ffff0000 	.word	0xffff0000
 8002938:	58025408 	.word	0x58025408
 800293c:	5802541c 	.word	0x5802541c
 8002940:	58025430 	.word	0x58025430
 8002944:	58025444 	.word	0x58025444
 8002948:	58025458 	.word	0x58025458
 800294c:	5802546c 	.word	0x5802546c
 8002950:	58025480 	.word	0x58025480
 8002954:	58025494 	.word	0x58025494
 8002958:	fffe000f 	.word	0xfffe000f
 800295c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002964:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800296c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800297c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002984:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800298c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <HAL_DMA_Init+0x650>)
 80029a4:	4413      	add	r3, r2
 80029a6:	4a6e      	ldr	r2, [pc, #440]	; (8002b60 <HAL_DMA_Init+0x654>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	009a      	lsls	r2, r3, #2
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f002 f9b3 	bl	8004d20 <DMA_CalcBaseAndBitshift>
 80029ba:	4603      	mov	r3, r0
 80029bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	2201      	movs	r2, #1
 80029c8:	409a      	lsls	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	e008      	b.n	80029e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0b7      	b.n	8002b52 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5f      	ldr	r2, [pc, #380]	; (8002b64 <HAL_DMA_Init+0x658>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d072      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a5d      	ldr	r2, [pc, #372]	; (8002b68 <HAL_DMA_Init+0x65c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d06d      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5c      	ldr	r2, [pc, #368]	; (8002b6c <HAL_DMA_Init+0x660>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d068      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5a      	ldr	r2, [pc, #360]	; (8002b70 <HAL_DMA_Init+0x664>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d063      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a59      	ldr	r2, [pc, #356]	; (8002b74 <HAL_DMA_Init+0x668>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d05e      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a57      	ldr	r2, [pc, #348]	; (8002b78 <HAL_DMA_Init+0x66c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d059      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a56      	ldr	r2, [pc, #344]	; (8002b7c <HAL_DMA_Init+0x670>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d054      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a54      	ldr	r2, [pc, #336]	; (8002b80 <HAL_DMA_Init+0x674>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d04f      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a53      	ldr	r2, [pc, #332]	; (8002b84 <HAL_DMA_Init+0x678>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d04a      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a51      	ldr	r2, [pc, #324]	; (8002b88 <HAL_DMA_Init+0x67c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d045      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a50      	ldr	r2, [pc, #320]	; (8002b8c <HAL_DMA_Init+0x680>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d040      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a4e      	ldr	r2, [pc, #312]	; (8002b90 <HAL_DMA_Init+0x684>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d03b      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a4d      	ldr	r2, [pc, #308]	; (8002b94 <HAL_DMA_Init+0x688>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d036      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a4b      	ldr	r2, [pc, #300]	; (8002b98 <HAL_DMA_Init+0x68c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d031      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a4a      	ldr	r2, [pc, #296]	; (8002b9c <HAL_DMA_Init+0x690>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d02c      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a48      	ldr	r2, [pc, #288]	; (8002ba0 <HAL_DMA_Init+0x694>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d027      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a47      	ldr	r2, [pc, #284]	; (8002ba4 <HAL_DMA_Init+0x698>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d022      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a45      	ldr	r2, [pc, #276]	; (8002ba8 <HAL_DMA_Init+0x69c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01d      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a44      	ldr	r2, [pc, #272]	; (8002bac <HAL_DMA_Init+0x6a0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d018      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a42      	ldr	r2, [pc, #264]	; (8002bb0 <HAL_DMA_Init+0x6a4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a41      	ldr	r2, [pc, #260]	; (8002bb4 <HAL_DMA_Init+0x6a8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00e      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a3f      	ldr	r2, [pc, #252]	; (8002bb8 <HAL_DMA_Init+0x6ac>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d009      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a3e      	ldr	r2, [pc, #248]	; (8002bbc <HAL_DMA_Init+0x6b0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_DMA_Init+0x5c6>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a3c      	ldr	r2, [pc, #240]	; (8002bc0 <HAL_DMA_Init+0x6b4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_DMA_Init+0x5ca>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_DMA_Init+0x5cc>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d032      	beq.n	8002b42 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f002 fa4d 	bl	8004f7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b80      	cmp	r3, #128	; 0x80
 8002ae8:	d102      	bne.n	8002af0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d010      	beq.n	8002b30 <HAL_DMA_Init+0x624>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d80c      	bhi.n	8002b30 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f002 faca 	bl	80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	e008      	b.n	8002b42 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	a7fdabf8 	.word	0xa7fdabf8
 8002b60:	cccccccd 	.word	0xcccccccd
 8002b64:	40020010 	.word	0x40020010
 8002b68:	40020028 	.word	0x40020028
 8002b6c:	40020040 	.word	0x40020040
 8002b70:	40020058 	.word	0x40020058
 8002b74:	40020070 	.word	0x40020070
 8002b78:	40020088 	.word	0x40020088
 8002b7c:	400200a0 	.word	0x400200a0
 8002b80:	400200b8 	.word	0x400200b8
 8002b84:	40020410 	.word	0x40020410
 8002b88:	40020428 	.word	0x40020428
 8002b8c:	40020440 	.word	0x40020440
 8002b90:	40020458 	.word	0x40020458
 8002b94:	40020470 	.word	0x40020470
 8002b98:	40020488 	.word	0x40020488
 8002b9c:	400204a0 	.word	0x400204a0
 8002ba0:	400204b8 	.word	0x400204b8
 8002ba4:	58025408 	.word	0x58025408
 8002ba8:	5802541c 	.word	0x5802541c
 8002bac:	58025430 	.word	0x58025430
 8002bb0:	58025444 	.word	0x58025444
 8002bb4:	58025458 	.word	0x58025458
 8002bb8:	5802546c 	.word	0x5802546c
 8002bbc:	58025480 	.word	0x58025480
 8002bc0:	58025494 	.word	0x58025494

08002bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e226      	b.n	800302e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_DMA_Start_IT+0x2a>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e21f      	b.n	800302e <HAL_DMA_Start_IT+0x46a>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	f040 820a 	bne.w	8003018 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a68      	ldr	r2, [pc, #416]	; (8002db8 <HAL_DMA_Start_IT+0x1f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d04a      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a66      	ldr	r2, [pc, #408]	; (8002dbc <HAL_DMA_Start_IT+0x1f8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d045      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a65      	ldr	r2, [pc, #404]	; (8002dc0 <HAL_DMA_Start_IT+0x1fc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d040      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a63      	ldr	r2, [pc, #396]	; (8002dc4 <HAL_DMA_Start_IT+0x200>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d03b      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a62      	ldr	r2, [pc, #392]	; (8002dc8 <HAL_DMA_Start_IT+0x204>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d036      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a60      	ldr	r2, [pc, #384]	; (8002dcc <HAL_DMA_Start_IT+0x208>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d031      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a5f      	ldr	r2, [pc, #380]	; (8002dd0 <HAL_DMA_Start_IT+0x20c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d02c      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5d      	ldr	r2, [pc, #372]	; (8002dd4 <HAL_DMA_Start_IT+0x210>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d027      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5c      	ldr	r2, [pc, #368]	; (8002dd8 <HAL_DMA_Start_IT+0x214>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a5a      	ldr	r2, [pc, #360]	; (8002ddc <HAL_DMA_Start_IT+0x218>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01d      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a59      	ldr	r2, [pc, #356]	; (8002de0 <HAL_DMA_Start_IT+0x21c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a57      	ldr	r2, [pc, #348]	; (8002de4 <HAL_DMA_Start_IT+0x220>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a56      	ldr	r2, [pc, #344]	; (8002de8 <HAL_DMA_Start_IT+0x224>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a54      	ldr	r2, [pc, #336]	; (8002dec <HAL_DMA_Start_IT+0x228>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a53      	ldr	r2, [pc, #332]	; (8002df0 <HAL_DMA_Start_IT+0x22c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a51      	ldr	r2, [pc, #324]	; (8002df4 <HAL_DMA_Start_IT+0x230>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <HAL_DMA_Start_IT+0x100>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e007      	b.n	8002cd4 <HAL_DMA_Start_IT+0x110>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f001 fe74 	bl	80049c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a34      	ldr	r2, [pc, #208]	; (8002db8 <HAL_DMA_Start_IT+0x1f4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04a      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <HAL_DMA_Start_IT+0x1f8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d045      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <HAL_DMA_Start_IT+0x1fc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d040      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_DMA_Start_IT+0x200>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d03b      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <HAL_DMA_Start_IT+0x204>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d036      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2d      	ldr	r2, [pc, #180]	; (8002dcc <HAL_DMA_Start_IT+0x208>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d031      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <HAL_DMA_Start_IT+0x20c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02c      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2a      	ldr	r2, [pc, #168]	; (8002dd4 <HAL_DMA_Start_IT+0x210>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d027      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_DMA_Start_IT+0x214>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d022      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <HAL_DMA_Start_IT+0x218>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01d      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <HAL_DMA_Start_IT+0x21c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <HAL_DMA_Start_IT+0x220>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_DMA_Start_IT+0x224>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a21      	ldr	r2, [pc, #132]	; (8002dec <HAL_DMA_Start_IT+0x228>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <HAL_DMA_Start_IT+0x22c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_DMA_Start_IT+0x230>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_DMA_Start_IT+0x1c0>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_DMA_Start_IT+0x1c2>
 8002d84:	2300      	movs	r3, #0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d036      	beq.n	8002df8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 021e 	bic.w	r2, r3, #30
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0216 	orr.w	r2, r2, #22
 8002d9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d03e      	beq.n	8002e24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0208 	orr.w	r2, r2, #8
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e035      	b.n	8002e24 <HAL_DMA_Start_IT+0x260>
 8002db8:	40020010 	.word	0x40020010
 8002dbc:	40020028 	.word	0x40020028
 8002dc0:	40020040 	.word	0x40020040
 8002dc4:	40020058 	.word	0x40020058
 8002dc8:	40020070 	.word	0x40020070
 8002dcc:	40020088 	.word	0x40020088
 8002dd0:	400200a0 	.word	0x400200a0
 8002dd4:	400200b8 	.word	0x400200b8
 8002dd8:	40020410 	.word	0x40020410
 8002ddc:	40020428 	.word	0x40020428
 8002de0:	40020440 	.word	0x40020440
 8002de4:	40020458 	.word	0x40020458
 8002de8:	40020470 	.word	0x40020470
 8002dec:	40020488 	.word	0x40020488
 8002df0:	400204a0 	.word	0x400204a0
 8002df4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 020e 	bic.w	r2, r3, #14
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 020a 	orr.w	r2, r2, #10
 8002e0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0204 	orr.w	r2, r2, #4
 8002e22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a83      	ldr	r2, [pc, #524]	; (8003038 <HAL_DMA_Start_IT+0x474>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d072      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a82      	ldr	r2, [pc, #520]	; (800303c <HAL_DMA_Start_IT+0x478>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d06d      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a80      	ldr	r2, [pc, #512]	; (8003040 <HAL_DMA_Start_IT+0x47c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d068      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7f      	ldr	r2, [pc, #508]	; (8003044 <HAL_DMA_Start_IT+0x480>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d063      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a7d      	ldr	r2, [pc, #500]	; (8003048 <HAL_DMA_Start_IT+0x484>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d05e      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a7c      	ldr	r2, [pc, #496]	; (800304c <HAL_DMA_Start_IT+0x488>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d059      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a7a      	ldr	r2, [pc, #488]	; (8003050 <HAL_DMA_Start_IT+0x48c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d054      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a79      	ldr	r2, [pc, #484]	; (8003054 <HAL_DMA_Start_IT+0x490>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d04f      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a77      	ldr	r2, [pc, #476]	; (8003058 <HAL_DMA_Start_IT+0x494>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d04a      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a76      	ldr	r2, [pc, #472]	; (800305c <HAL_DMA_Start_IT+0x498>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d045      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a74      	ldr	r2, [pc, #464]	; (8003060 <HAL_DMA_Start_IT+0x49c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d040      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a73      	ldr	r2, [pc, #460]	; (8003064 <HAL_DMA_Start_IT+0x4a0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d03b      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a71      	ldr	r2, [pc, #452]	; (8003068 <HAL_DMA_Start_IT+0x4a4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d036      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a70      	ldr	r2, [pc, #448]	; (800306c <HAL_DMA_Start_IT+0x4a8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d031      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_DMA_Start_IT+0x4ac>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d02c      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6d      	ldr	r2, [pc, #436]	; (8003074 <HAL_DMA_Start_IT+0x4b0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d027      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6b      	ldr	r2, [pc, #428]	; (8003078 <HAL_DMA_Start_IT+0x4b4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d022      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a6a      	ldr	r2, [pc, #424]	; (800307c <HAL_DMA_Start_IT+0x4b8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d01d      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a68      	ldr	r2, [pc, #416]	; (8003080 <HAL_DMA_Start_IT+0x4bc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d018      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a67      	ldr	r2, [pc, #412]	; (8003084 <HAL_DMA_Start_IT+0x4c0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a65      	ldr	r2, [pc, #404]	; (8003088 <HAL_DMA_Start_IT+0x4c4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00e      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a64      	ldr	r2, [pc, #400]	; (800308c <HAL_DMA_Start_IT+0x4c8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a62      	ldr	r2, [pc, #392]	; (8003090 <HAL_DMA_Start_IT+0x4cc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a61      	ldr	r2, [pc, #388]	; (8003094 <HAL_DMA_Start_IT+0x4d0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_DMA_Start_IT+0x354>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <HAL_DMA_Start_IT+0x356>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01a      	beq.n	8002f54 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a37      	ldr	r2, [pc, #220]	; (8003038 <HAL_DMA_Start_IT+0x474>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d04a      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a36      	ldr	r2, [pc, #216]	; (800303c <HAL_DMA_Start_IT+0x478>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d045      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a34      	ldr	r2, [pc, #208]	; (8003040 <HAL_DMA_Start_IT+0x47c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d040      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a33      	ldr	r2, [pc, #204]	; (8003044 <HAL_DMA_Start_IT+0x480>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d03b      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a31      	ldr	r2, [pc, #196]	; (8003048 <HAL_DMA_Start_IT+0x484>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d036      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a30      	ldr	r2, [pc, #192]	; (800304c <HAL_DMA_Start_IT+0x488>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d031      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2e      	ldr	r2, [pc, #184]	; (8003050 <HAL_DMA_Start_IT+0x48c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d02c      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <HAL_DMA_Start_IT+0x490>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d027      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2b      	ldr	r2, [pc, #172]	; (8003058 <HAL_DMA_Start_IT+0x494>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d022      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2a      	ldr	r2, [pc, #168]	; (800305c <HAL_DMA_Start_IT+0x498>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d01d      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a28      	ldr	r2, [pc, #160]	; (8003060 <HAL_DMA_Start_IT+0x49c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d018      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a27      	ldr	r2, [pc, #156]	; (8003064 <HAL_DMA_Start_IT+0x4a0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d013      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a25      	ldr	r2, [pc, #148]	; (8003068 <HAL_DMA_Start_IT+0x4a4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a24      	ldr	r2, [pc, #144]	; (800306c <HAL_DMA_Start_IT+0x4a8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d009      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a22      	ldr	r2, [pc, #136]	; (8003070 <HAL_DMA_Start_IT+0x4ac>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a21      	ldr	r2, [pc, #132]	; (8003074 <HAL_DMA_Start_IT+0x4b0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d108      	bne.n	8003006 <HAL_DMA_Start_IT+0x442>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e012      	b.n	800302c <HAL_DMA_Start_IT+0x468>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e009      	b.n	800302c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003026:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800302c:	7dfb      	ldrb	r3, [r7, #23]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40020010 	.word	0x40020010
 800303c:	40020028 	.word	0x40020028
 8003040:	40020040 	.word	0x40020040
 8003044:	40020058 	.word	0x40020058
 8003048:	40020070 	.word	0x40020070
 800304c:	40020088 	.word	0x40020088
 8003050:	400200a0 	.word	0x400200a0
 8003054:	400200b8 	.word	0x400200b8
 8003058:	40020410 	.word	0x40020410
 800305c:	40020428 	.word	0x40020428
 8003060:	40020440 	.word	0x40020440
 8003064:	40020458 	.word	0x40020458
 8003068:	40020470 	.word	0x40020470
 800306c:	40020488 	.word	0x40020488
 8003070:	400204a0 	.word	0x400204a0
 8003074:	400204b8 	.word	0x400204b8
 8003078:	58025408 	.word	0x58025408
 800307c:	5802541c 	.word	0x5802541c
 8003080:	58025430 	.word	0x58025430
 8003084:	58025444 	.word	0x58025444
 8003088:	58025458 	.word	0x58025458
 800308c:	5802546c 	.word	0x5802546c
 8003090:	58025480 	.word	0x58025480
 8003094:	58025494 	.word	0x58025494

08003098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7ff f8c0 	bl	8002224 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e2dc      	b.n	800366a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d008      	beq.n	80030ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e2cd      	b.n	800366a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a76      	ldr	r2, [pc, #472]	; (80032ac <HAL_DMA_Abort+0x214>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d04a      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a74      	ldr	r2, [pc, #464]	; (80032b0 <HAL_DMA_Abort+0x218>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d045      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a73      	ldr	r2, [pc, #460]	; (80032b4 <HAL_DMA_Abort+0x21c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d040      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a71      	ldr	r2, [pc, #452]	; (80032b8 <HAL_DMA_Abort+0x220>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d03b      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a70      	ldr	r2, [pc, #448]	; (80032bc <HAL_DMA_Abort+0x224>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d036      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6e      	ldr	r2, [pc, #440]	; (80032c0 <HAL_DMA_Abort+0x228>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d031      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6d      	ldr	r2, [pc, #436]	; (80032c4 <HAL_DMA_Abort+0x22c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d02c      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6b      	ldr	r2, [pc, #428]	; (80032c8 <HAL_DMA_Abort+0x230>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d027      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6a      	ldr	r2, [pc, #424]	; (80032cc <HAL_DMA_Abort+0x234>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d022      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a68      	ldr	r2, [pc, #416]	; (80032d0 <HAL_DMA_Abort+0x238>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01d      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a67      	ldr	r2, [pc, #412]	; (80032d4 <HAL_DMA_Abort+0x23c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d018      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <HAL_DMA_Abort+0x240>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a64      	ldr	r2, [pc, #400]	; (80032dc <HAL_DMA_Abort+0x244>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a62      	ldr	r2, [pc, #392]	; (80032e0 <HAL_DMA_Abort+0x248>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d009      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a61      	ldr	r2, [pc, #388]	; (80032e4 <HAL_DMA_Abort+0x24c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_DMA_Abort+0xd6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5f      	ldr	r2, [pc, #380]	; (80032e8 <HAL_DMA_Abort+0x250>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <HAL_DMA_Abort+0xda>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_DMA_Abort+0xdc>
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 021e 	bic.w	r2, r2, #30
 8003186:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003196:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e00a      	b.n	80031b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 020e 	bic.w	r2, r2, #14
 80031ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a3c      	ldr	r2, [pc, #240]	; (80032ac <HAL_DMA_Abort+0x214>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d072      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a3a      	ldr	r2, [pc, #232]	; (80032b0 <HAL_DMA_Abort+0x218>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d06d      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a39      	ldr	r2, [pc, #228]	; (80032b4 <HAL_DMA_Abort+0x21c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d068      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a37      	ldr	r2, [pc, #220]	; (80032b8 <HAL_DMA_Abort+0x220>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d063      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a36      	ldr	r2, [pc, #216]	; (80032bc <HAL_DMA_Abort+0x224>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d05e      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a34      	ldr	r2, [pc, #208]	; (80032c0 <HAL_DMA_Abort+0x228>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d059      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a33      	ldr	r2, [pc, #204]	; (80032c4 <HAL_DMA_Abort+0x22c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d054      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a31      	ldr	r2, [pc, #196]	; (80032c8 <HAL_DMA_Abort+0x230>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d04f      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a30      	ldr	r2, [pc, #192]	; (80032cc <HAL_DMA_Abort+0x234>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d04a      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2e      	ldr	r2, [pc, #184]	; (80032d0 <HAL_DMA_Abort+0x238>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d045      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2d      	ldr	r2, [pc, #180]	; (80032d4 <HAL_DMA_Abort+0x23c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d040      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2b      	ldr	r2, [pc, #172]	; (80032d8 <HAL_DMA_Abort+0x240>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d03b      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2a      	ldr	r2, [pc, #168]	; (80032dc <HAL_DMA_Abort+0x244>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d036      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <HAL_DMA_Abort+0x248>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d031      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <HAL_DMA_Abort+0x24c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d02c      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a25      	ldr	r2, [pc, #148]	; (80032e8 <HAL_DMA_Abort+0x250>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d027      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a24      	ldr	r2, [pc, #144]	; (80032ec <HAL_DMA_Abort+0x254>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d022      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <HAL_DMA_Abort+0x258>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01d      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <HAL_DMA_Abort+0x25c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d018      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_DMA_Abort+0x260>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <HAL_DMA_Abort+0x264>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00e      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <HAL_DMA_Abort+0x268>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <HAL_DMA_Abort+0x26c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d004      	beq.n	80032a6 <HAL_DMA_Abort+0x20e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a19      	ldr	r2, [pc, #100]	; (8003308 <HAL_DMA_Abort+0x270>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d132      	bne.n	800330c <HAL_DMA_Abort+0x274>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e031      	b.n	800330e <HAL_DMA_Abort+0x276>
 80032aa:	bf00      	nop
 80032ac:	40020010 	.word	0x40020010
 80032b0:	40020028 	.word	0x40020028
 80032b4:	40020040 	.word	0x40020040
 80032b8:	40020058 	.word	0x40020058
 80032bc:	40020070 	.word	0x40020070
 80032c0:	40020088 	.word	0x40020088
 80032c4:	400200a0 	.word	0x400200a0
 80032c8:	400200b8 	.word	0x400200b8
 80032cc:	40020410 	.word	0x40020410
 80032d0:	40020428 	.word	0x40020428
 80032d4:	40020440 	.word	0x40020440
 80032d8:	40020458 	.word	0x40020458
 80032dc:	40020470 	.word	0x40020470
 80032e0:	40020488 	.word	0x40020488
 80032e4:	400204a0 	.word	0x400204a0
 80032e8:	400204b8 	.word	0x400204b8
 80032ec:	58025408 	.word	0x58025408
 80032f0:	5802541c 	.word	0x5802541c
 80032f4:	58025430 	.word	0x58025430
 80032f8:	58025444 	.word	0x58025444
 80032fc:	58025458 	.word	0x58025458
 8003300:	5802546c 	.word	0x5802546c
 8003304:	58025480 	.word	0x58025480
 8003308:	58025494 	.word	0x58025494
 800330c:	2300      	movs	r3, #0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003320:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6d      	ldr	r2, [pc, #436]	; (80034dc <HAL_DMA_Abort+0x444>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d04a      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6b      	ldr	r2, [pc, #428]	; (80034e0 <HAL_DMA_Abort+0x448>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d045      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6a      	ldr	r2, [pc, #424]	; (80034e4 <HAL_DMA_Abort+0x44c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d040      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a68      	ldr	r2, [pc, #416]	; (80034e8 <HAL_DMA_Abort+0x450>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d03b      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a67      	ldr	r2, [pc, #412]	; (80034ec <HAL_DMA_Abort+0x454>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d036      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a65      	ldr	r2, [pc, #404]	; (80034f0 <HAL_DMA_Abort+0x458>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a64      	ldr	r2, [pc, #400]	; (80034f4 <HAL_DMA_Abort+0x45c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d02c      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a62      	ldr	r2, [pc, #392]	; (80034f8 <HAL_DMA_Abort+0x460>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d027      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a61      	ldr	r2, [pc, #388]	; (80034fc <HAL_DMA_Abort+0x464>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5f      	ldr	r2, [pc, #380]	; (8003500 <HAL_DMA_Abort+0x468>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01d      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5e      	ldr	r2, [pc, #376]	; (8003504 <HAL_DMA_Abort+0x46c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5c      	ldr	r2, [pc, #368]	; (8003508 <HAL_DMA_Abort+0x470>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5b      	ldr	r2, [pc, #364]	; (800350c <HAL_DMA_Abort+0x474>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a59      	ldr	r2, [pc, #356]	; (8003510 <HAL_DMA_Abort+0x478>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a58      	ldr	r2, [pc, #352]	; (8003514 <HAL_DMA_Abort+0x47c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_DMA_Abort+0x32a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a56      	ldr	r2, [pc, #344]	; (8003518 <HAL_DMA_Abort+0x480>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d108      	bne.n	80033d4 <HAL_DMA_Abort+0x33c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e007      	b.n	80033e4 <HAL_DMA_Abort+0x34c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033e4:	e013      	b.n	800340e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033e6:	f7fe ff1d 	bl	8002224 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d90c      	bls.n	800340e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2203      	movs	r2, #3
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e12d      	b.n	800366a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e5      	bne.n	80033e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <HAL_DMA_Abort+0x444>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d04a      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2d      	ldr	r2, [pc, #180]	; (80034e0 <HAL_DMA_Abort+0x448>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d045      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a2c      	ldr	r2, [pc, #176]	; (80034e4 <HAL_DMA_Abort+0x44c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d040      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <HAL_DMA_Abort+0x450>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d03b      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a29      	ldr	r2, [pc, #164]	; (80034ec <HAL_DMA_Abort+0x454>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d036      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a27      	ldr	r2, [pc, #156]	; (80034f0 <HAL_DMA_Abort+0x458>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d031      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a26      	ldr	r2, [pc, #152]	; (80034f4 <HAL_DMA_Abort+0x45c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d02c      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a24      	ldr	r2, [pc, #144]	; (80034f8 <HAL_DMA_Abort+0x460>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d027      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a23      	ldr	r2, [pc, #140]	; (80034fc <HAL_DMA_Abort+0x464>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d022      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a21      	ldr	r2, [pc, #132]	; (8003500 <HAL_DMA_Abort+0x468>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01d      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a20      	ldr	r2, [pc, #128]	; (8003504 <HAL_DMA_Abort+0x46c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d018      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <HAL_DMA_Abort+0x470>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1d      	ldr	r2, [pc, #116]	; (800350c <HAL_DMA_Abort+0x474>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00e      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <HAL_DMA_Abort+0x478>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1a      	ldr	r2, [pc, #104]	; (8003514 <HAL_DMA_Abort+0x47c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_DMA_Abort+0x422>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_DMA_Abort+0x480>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d101      	bne.n	80034be <HAL_DMA_Abort+0x426>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_DMA_Abort+0x428>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d02b      	beq.n	800351c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	223f      	movs	r2, #63	; 0x3f
 80034d4:	409a      	lsls	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	e02a      	b.n	8003532 <HAL_DMA_Abort+0x49a>
 80034dc:	40020010 	.word	0x40020010
 80034e0:	40020028 	.word	0x40020028
 80034e4:	40020040 	.word	0x40020040
 80034e8:	40020058 	.word	0x40020058
 80034ec:	40020070 	.word	0x40020070
 80034f0:	40020088 	.word	0x40020088
 80034f4:	400200a0 	.word	0x400200a0
 80034f8:	400200b8 	.word	0x400200b8
 80034fc:	40020410 	.word	0x40020410
 8003500:	40020428 	.word	0x40020428
 8003504:	40020440 	.word	0x40020440
 8003508:	40020458 	.word	0x40020458
 800350c:	40020470 	.word	0x40020470
 8003510:	40020488 	.word	0x40020488
 8003514:	400204a0 	.word	0x400204a0
 8003518:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2201      	movs	r2, #1
 800352c:	409a      	lsls	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a4f      	ldr	r2, [pc, #316]	; (8003674 <HAL_DMA_Abort+0x5dc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d072      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a4d      	ldr	r2, [pc, #308]	; (8003678 <HAL_DMA_Abort+0x5e0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d06d      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4c      	ldr	r2, [pc, #304]	; (800367c <HAL_DMA_Abort+0x5e4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d068      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a4a      	ldr	r2, [pc, #296]	; (8003680 <HAL_DMA_Abort+0x5e8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d063      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a49      	ldr	r2, [pc, #292]	; (8003684 <HAL_DMA_Abort+0x5ec>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d05e      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a47      	ldr	r2, [pc, #284]	; (8003688 <HAL_DMA_Abort+0x5f0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d059      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a46      	ldr	r2, [pc, #280]	; (800368c <HAL_DMA_Abort+0x5f4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d054      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a44      	ldr	r2, [pc, #272]	; (8003690 <HAL_DMA_Abort+0x5f8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d04f      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a43      	ldr	r2, [pc, #268]	; (8003694 <HAL_DMA_Abort+0x5fc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d04a      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a41      	ldr	r2, [pc, #260]	; (8003698 <HAL_DMA_Abort+0x600>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d045      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a40      	ldr	r2, [pc, #256]	; (800369c <HAL_DMA_Abort+0x604>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d040      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3e      	ldr	r2, [pc, #248]	; (80036a0 <HAL_DMA_Abort+0x608>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d03b      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3d      	ldr	r2, [pc, #244]	; (80036a4 <HAL_DMA_Abort+0x60c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d036      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3b      	ldr	r2, [pc, #236]	; (80036a8 <HAL_DMA_Abort+0x610>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d031      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3a      	ldr	r2, [pc, #232]	; (80036ac <HAL_DMA_Abort+0x614>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d02c      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a38      	ldr	r2, [pc, #224]	; (80036b0 <HAL_DMA_Abort+0x618>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d027      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a37      	ldr	r2, [pc, #220]	; (80036b4 <HAL_DMA_Abort+0x61c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d022      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a35      	ldr	r2, [pc, #212]	; (80036b8 <HAL_DMA_Abort+0x620>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01d      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a34      	ldr	r2, [pc, #208]	; (80036bc <HAL_DMA_Abort+0x624>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d018      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a32      	ldr	r2, [pc, #200]	; (80036c0 <HAL_DMA_Abort+0x628>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a31      	ldr	r2, [pc, #196]	; (80036c4 <HAL_DMA_Abort+0x62c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00e      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2f      	ldr	r2, [pc, #188]	; (80036c8 <HAL_DMA_Abort+0x630>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2e      	ldr	r2, [pc, #184]	; (80036cc <HAL_DMA_Abort+0x634>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_DMA_Abort+0x58a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2c      	ldr	r2, [pc, #176]	; (80036d0 <HAL_DMA_Abort+0x638>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_DMA_Abort+0x58e>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_DMA_Abort+0x590>
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d015      	beq.n	8003658 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003634:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00c      	beq.n	8003658 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800364c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003656:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40020010 	.word	0x40020010
 8003678:	40020028 	.word	0x40020028
 800367c:	40020040 	.word	0x40020040
 8003680:	40020058 	.word	0x40020058
 8003684:	40020070 	.word	0x40020070
 8003688:	40020088 	.word	0x40020088
 800368c:	400200a0 	.word	0x400200a0
 8003690:	400200b8 	.word	0x400200b8
 8003694:	40020410 	.word	0x40020410
 8003698:	40020428 	.word	0x40020428
 800369c:	40020440 	.word	0x40020440
 80036a0:	40020458 	.word	0x40020458
 80036a4:	40020470 	.word	0x40020470
 80036a8:	40020488 	.word	0x40020488
 80036ac:	400204a0 	.word	0x400204a0
 80036b0:	400204b8 	.word	0x400204b8
 80036b4:	58025408 	.word	0x58025408
 80036b8:	5802541c 	.word	0x5802541c
 80036bc:	58025430 	.word	0x58025430
 80036c0:	58025444 	.word	0x58025444
 80036c4:	58025458 	.word	0x58025458
 80036c8:	5802546c 	.word	0x5802546c
 80036cc:	58025480 	.word	0x58025480
 80036d0:	58025494 	.word	0x58025494

080036d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e205      	b.n	8003af2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d004      	beq.n	80036fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2280      	movs	r2, #128	; 0x80
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e1fa      	b.n	8003af2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a8c      	ldr	r2, [pc, #560]	; (8003934 <HAL_DMA_Abort_IT+0x260>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d04a      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a8b      	ldr	r2, [pc, #556]	; (8003938 <HAL_DMA_Abort_IT+0x264>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d045      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a89      	ldr	r2, [pc, #548]	; (800393c <HAL_DMA_Abort_IT+0x268>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d040      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a88      	ldr	r2, [pc, #544]	; (8003940 <HAL_DMA_Abort_IT+0x26c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d03b      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a86      	ldr	r2, [pc, #536]	; (8003944 <HAL_DMA_Abort_IT+0x270>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d036      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a85      	ldr	r2, [pc, #532]	; (8003948 <HAL_DMA_Abort_IT+0x274>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d031      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a83      	ldr	r2, [pc, #524]	; (800394c <HAL_DMA_Abort_IT+0x278>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02c      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a82      	ldr	r2, [pc, #520]	; (8003950 <HAL_DMA_Abort_IT+0x27c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d027      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a80      	ldr	r2, [pc, #512]	; (8003954 <HAL_DMA_Abort_IT+0x280>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d022      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7f      	ldr	r2, [pc, #508]	; (8003958 <HAL_DMA_Abort_IT+0x284>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d01d      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7d      	ldr	r2, [pc, #500]	; (800395c <HAL_DMA_Abort_IT+0x288>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d018      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7c      	ldr	r2, [pc, #496]	; (8003960 <HAL_DMA_Abort_IT+0x28c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a7a      	ldr	r2, [pc, #488]	; (8003964 <HAL_DMA_Abort_IT+0x290>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00e      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a79      	ldr	r2, [pc, #484]	; (8003968 <HAL_DMA_Abort_IT+0x294>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a77      	ldr	r2, [pc, #476]	; (800396c <HAL_DMA_Abort_IT+0x298>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a76      	ldr	r2, [pc, #472]	; (8003970 <HAL_DMA_Abort_IT+0x29c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d101      	bne.n	80037a0 <HAL_DMA_Abort_IT+0xcc>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_DMA_Abort_IT+0xce>
 80037a0:	2300      	movs	r3, #0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d065      	beq.n	8003872 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2204      	movs	r2, #4
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a60      	ldr	r2, [pc, #384]	; (8003934 <HAL_DMA_Abort_IT+0x260>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d04a      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5e      	ldr	r2, [pc, #376]	; (8003938 <HAL_DMA_Abort_IT+0x264>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d045      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5d      	ldr	r2, [pc, #372]	; (800393c <HAL_DMA_Abort_IT+0x268>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d040      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a5b      	ldr	r2, [pc, #364]	; (8003940 <HAL_DMA_Abort_IT+0x26c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d03b      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a5a      	ldr	r2, [pc, #360]	; (8003944 <HAL_DMA_Abort_IT+0x270>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d036      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a58      	ldr	r2, [pc, #352]	; (8003948 <HAL_DMA_Abort_IT+0x274>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d031      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a57      	ldr	r2, [pc, #348]	; (800394c <HAL_DMA_Abort_IT+0x278>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d02c      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a55      	ldr	r2, [pc, #340]	; (8003950 <HAL_DMA_Abort_IT+0x27c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d027      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a54      	ldr	r2, [pc, #336]	; (8003954 <HAL_DMA_Abort_IT+0x280>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d022      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a52      	ldr	r2, [pc, #328]	; (8003958 <HAL_DMA_Abort_IT+0x284>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01d      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a51      	ldr	r2, [pc, #324]	; (800395c <HAL_DMA_Abort_IT+0x288>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d018      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a4f      	ldr	r2, [pc, #316]	; (8003960 <HAL_DMA_Abort_IT+0x28c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a4e      	ldr	r2, [pc, #312]	; (8003964 <HAL_DMA_Abort_IT+0x290>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00e      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a4c      	ldr	r2, [pc, #304]	; (8003968 <HAL_DMA_Abort_IT+0x294>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d009      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a4b      	ldr	r2, [pc, #300]	; (800396c <HAL_DMA_Abort_IT+0x298>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d004      	beq.n	800384e <HAL_DMA_Abort_IT+0x17a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a49      	ldr	r2, [pc, #292]	; (8003970 <HAL_DMA_Abort_IT+0x29c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d108      	bne.n	8003860 <HAL_DMA_Abort_IT+0x18c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e147      	b.n	8003af0 <HAL_DMA_Abort_IT+0x41c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e13e      	b.n	8003af0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 020e 	bic.w	r2, r2, #14
 8003880:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <HAL_DMA_Abort_IT+0x260>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d04a      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a29      	ldr	r2, [pc, #164]	; (8003938 <HAL_DMA_Abort_IT+0x264>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d045      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_DMA_Abort_IT+0x268>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d040      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <HAL_DMA_Abort_IT+0x26c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d03b      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a25      	ldr	r2, [pc, #148]	; (8003944 <HAL_DMA_Abort_IT+0x270>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d036      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a23      	ldr	r2, [pc, #140]	; (8003948 <HAL_DMA_Abort_IT+0x274>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d031      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a22      	ldr	r2, [pc, #136]	; (800394c <HAL_DMA_Abort_IT+0x278>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d02c      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a20      	ldr	r2, [pc, #128]	; (8003950 <HAL_DMA_Abort_IT+0x27c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d027      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <HAL_DMA_Abort_IT+0x280>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <HAL_DMA_Abort_IT+0x284>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01d      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <HAL_DMA_Abort_IT+0x288>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d018      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <HAL_DMA_Abort_IT+0x28c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a19      	ldr	r2, [pc, #100]	; (8003964 <HAL_DMA_Abort_IT+0x290>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a17      	ldr	r2, [pc, #92]	; (8003968 <HAL_DMA_Abort_IT+0x294>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <HAL_DMA_Abort_IT+0x298>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a14      	ldr	r2, [pc, #80]	; (8003970 <HAL_DMA_Abort_IT+0x29c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d128      	bne.n	8003974 <HAL_DMA_Abort_IT+0x2a0>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e027      	b.n	8003984 <HAL_DMA_Abort_IT+0x2b0>
 8003934:	40020010 	.word	0x40020010
 8003938:	40020028 	.word	0x40020028
 800393c:	40020040 	.word	0x40020040
 8003940:	40020058 	.word	0x40020058
 8003944:	40020070 	.word	0x40020070
 8003948:	40020088 	.word	0x40020088
 800394c:	400200a0 	.word	0x400200a0
 8003950:	400200b8 	.word	0x400200b8
 8003954:	40020410 	.word	0x40020410
 8003958:	40020428 	.word	0x40020428
 800395c:	40020440 	.word	0x40020440
 8003960:	40020458 	.word	0x40020458
 8003964:	40020470 	.word	0x40020470
 8003968:	40020488 	.word	0x40020488
 800396c:	400204a0 	.word	0x400204a0
 8003970:	400204b8 	.word	0x400204b8
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a5c      	ldr	r2, [pc, #368]	; (8003afc <HAL_DMA_Abort_IT+0x428>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d072      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5b      	ldr	r2, [pc, #364]	; (8003b00 <HAL_DMA_Abort_IT+0x42c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d06d      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a59      	ldr	r2, [pc, #356]	; (8003b04 <HAL_DMA_Abort_IT+0x430>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d068      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <HAL_DMA_Abort_IT+0x434>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d063      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a56      	ldr	r2, [pc, #344]	; (8003b0c <HAL_DMA_Abort_IT+0x438>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d05e      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a55      	ldr	r2, [pc, #340]	; (8003b10 <HAL_DMA_Abort_IT+0x43c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d059      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a53      	ldr	r2, [pc, #332]	; (8003b14 <HAL_DMA_Abort_IT+0x440>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d054      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_DMA_Abort_IT+0x444>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d04f      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a50      	ldr	r2, [pc, #320]	; (8003b1c <HAL_DMA_Abort_IT+0x448>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d04a      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a4f      	ldr	r2, [pc, #316]	; (8003b20 <HAL_DMA_Abort_IT+0x44c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d045      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a4d      	ldr	r2, [pc, #308]	; (8003b24 <HAL_DMA_Abort_IT+0x450>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d040      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4c      	ldr	r2, [pc, #304]	; (8003b28 <HAL_DMA_Abort_IT+0x454>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d03b      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a4a      	ldr	r2, [pc, #296]	; (8003b2c <HAL_DMA_Abort_IT+0x458>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d036      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a49      	ldr	r2, [pc, #292]	; (8003b30 <HAL_DMA_Abort_IT+0x45c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d031      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a47      	ldr	r2, [pc, #284]	; (8003b34 <HAL_DMA_Abort_IT+0x460>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d02c      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a46      	ldr	r2, [pc, #280]	; (8003b38 <HAL_DMA_Abort_IT+0x464>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d027      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a44      	ldr	r2, [pc, #272]	; (8003b3c <HAL_DMA_Abort_IT+0x468>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d022      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a43      	ldr	r2, [pc, #268]	; (8003b40 <HAL_DMA_Abort_IT+0x46c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d01d      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a41      	ldr	r2, [pc, #260]	; (8003b44 <HAL_DMA_Abort_IT+0x470>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d018      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a40      	ldr	r2, [pc, #256]	; (8003b48 <HAL_DMA_Abort_IT+0x474>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a3e      	ldr	r2, [pc, #248]	; (8003b4c <HAL_DMA_Abort_IT+0x478>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00e      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a3d      	ldr	r2, [pc, #244]	; (8003b50 <HAL_DMA_Abort_IT+0x47c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d009      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a3b      	ldr	r2, [pc, #236]	; (8003b54 <HAL_DMA_Abort_IT+0x480>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x3a0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <HAL_DMA_Abort_IT+0x484>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_DMA_Abort_IT+0x3a4>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_DMA_Abort_IT+0x3a6>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d028      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003aac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ace:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40020010 	.word	0x40020010
 8003b00:	40020028 	.word	0x40020028
 8003b04:	40020040 	.word	0x40020040
 8003b08:	40020058 	.word	0x40020058
 8003b0c:	40020070 	.word	0x40020070
 8003b10:	40020088 	.word	0x40020088
 8003b14:	400200a0 	.word	0x400200a0
 8003b18:	400200b8 	.word	0x400200b8
 8003b1c:	40020410 	.word	0x40020410
 8003b20:	40020428 	.word	0x40020428
 8003b24:	40020440 	.word	0x40020440
 8003b28:	40020458 	.word	0x40020458
 8003b2c:	40020470 	.word	0x40020470
 8003b30:	40020488 	.word	0x40020488
 8003b34:	400204a0 	.word	0x400204a0
 8003b38:	400204b8 	.word	0x400204b8
 8003b3c:	58025408 	.word	0x58025408
 8003b40:	5802541c 	.word	0x5802541c
 8003b44:	58025430 	.word	0x58025430
 8003b48:	58025444 	.word	0x58025444
 8003b4c:	58025458 	.word	0x58025458
 8003b50:	5802546c 	.word	0x5802546c
 8003b54:	58025480 	.word	0x58025480
 8003b58:	58025494 	.word	0x58025494

08003b5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b68:	4b67      	ldr	r3, [pc, #412]	; (8003d08 <HAL_DMA_IRQHandler+0x1ac>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a67      	ldr	r2, [pc, #412]	; (8003d0c <HAL_DMA_IRQHandler+0x1b0>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0a9b      	lsrs	r3, r3, #10
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a5f      	ldr	r2, [pc, #380]	; (8003d10 <HAL_DMA_IRQHandler+0x1b4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d04a      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5d      	ldr	r2, [pc, #372]	; (8003d14 <HAL_DMA_IRQHandler+0x1b8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d045      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5c      	ldr	r2, [pc, #368]	; (8003d18 <HAL_DMA_IRQHandler+0x1bc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d040      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a5a      	ldr	r2, [pc, #360]	; (8003d1c <HAL_DMA_IRQHandler+0x1c0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d03b      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a59      	ldr	r2, [pc, #356]	; (8003d20 <HAL_DMA_IRQHandler+0x1c4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d036      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a57      	ldr	r2, [pc, #348]	; (8003d24 <HAL_DMA_IRQHandler+0x1c8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d031      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a56      	ldr	r2, [pc, #344]	; (8003d28 <HAL_DMA_IRQHandler+0x1cc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d02c      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a54      	ldr	r2, [pc, #336]	; (8003d2c <HAL_DMA_IRQHandler+0x1d0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d027      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a53      	ldr	r2, [pc, #332]	; (8003d30 <HAL_DMA_IRQHandler+0x1d4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a51      	ldr	r2, [pc, #324]	; (8003d34 <HAL_DMA_IRQHandler+0x1d8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01d      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a50      	ldr	r2, [pc, #320]	; (8003d38 <HAL_DMA_IRQHandler+0x1dc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a4e      	ldr	r2, [pc, #312]	; (8003d3c <HAL_DMA_IRQHandler+0x1e0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a4d      	ldr	r2, [pc, #308]	; (8003d40 <HAL_DMA_IRQHandler+0x1e4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a4b      	ldr	r2, [pc, #300]	; (8003d44 <HAL_DMA_IRQHandler+0x1e8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a4a      	ldr	r2, [pc, #296]	; (8003d48 <HAL_DMA_IRQHandler+0x1ec>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xd2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a48      	ldr	r2, [pc, #288]	; (8003d4c <HAL_DMA_IRQHandler+0x1f0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <HAL_DMA_IRQHandler+0xd6>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_DMA_IRQHandler+0xd8>
 8003c32:	2300      	movs	r3, #0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 842b 	beq.w	8004490 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2208      	movs	r2, #8
 8003c44:	409a      	lsls	r2, r3
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80a2 	beq.w	8003d94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a2e      	ldr	r2, [pc, #184]	; (8003d10 <HAL_DMA_IRQHandler+0x1b4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d04a      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <HAL_DMA_IRQHandler+0x1b8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d045      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2b      	ldr	r2, [pc, #172]	; (8003d18 <HAL_DMA_IRQHandler+0x1bc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d040      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2a      	ldr	r2, [pc, #168]	; (8003d1c <HAL_DMA_IRQHandler+0x1c0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d03b      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a28      	ldr	r2, [pc, #160]	; (8003d20 <HAL_DMA_IRQHandler+0x1c4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d036      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a27      	ldr	r2, [pc, #156]	; (8003d24 <HAL_DMA_IRQHandler+0x1c8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d031      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <HAL_DMA_IRQHandler+0x1cc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02c      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a24      	ldr	r2, [pc, #144]	; (8003d2c <HAL_DMA_IRQHandler+0x1d0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d027      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <HAL_DMA_IRQHandler+0x1d4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d022      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <HAL_DMA_IRQHandler+0x1d8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01d      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <HAL_DMA_IRQHandler+0x1dc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d018      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <HAL_DMA_IRQHandler+0x1e0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <HAL_DMA_IRQHandler+0x1e4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1b      	ldr	r2, [pc, #108]	; (8003d44 <HAL_DMA_IRQHandler+0x1e8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	; (8003d48 <HAL_DMA_IRQHandler+0x1ec>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x194>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <HAL_DMA_IRQHandler+0x1f0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d12f      	bne.n	8003d50 <HAL_DMA_IRQHandler+0x1f4>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	e02e      	b.n	8003d64 <HAL_DMA_IRQHandler+0x208>
 8003d06:	bf00      	nop
 8003d08:	24000000 	.word	0x24000000
 8003d0c:	1b4e81b5 	.word	0x1b4e81b5
 8003d10:	40020010 	.word	0x40020010
 8003d14:	40020028 	.word	0x40020028
 8003d18:	40020040 	.word	0x40020040
 8003d1c:	40020058 	.word	0x40020058
 8003d20:	40020070 	.word	0x40020070
 8003d24:	40020088 	.word	0x40020088
 8003d28:	400200a0 	.word	0x400200a0
 8003d2c:	400200b8 	.word	0x400200b8
 8003d30:	40020410 	.word	0x40020410
 8003d34:	40020428 	.word	0x40020428
 8003d38:	40020440 	.word	0x40020440
 8003d3c:	40020458 	.word	0x40020458
 8003d40:	40020470 	.word	0x40020470
 8003d44:	40020488 	.word	0x40020488
 8003d48:	400204a0 	.word	0x400204a0
 8003d4c:	400204b8 	.word	0x400204b8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0204 	bic.w	r2, r2, #4
 8003d76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2208      	movs	r2, #8
 8003d82:	409a      	lsls	r2, r3
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	f043 0201 	orr.w	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d06e      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a69      	ldr	r2, [pc, #420]	; (8003f54 <HAL_DMA_IRQHandler+0x3f8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d04a      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a67      	ldr	r2, [pc, #412]	; (8003f58 <HAL_DMA_IRQHandler+0x3fc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d045      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a66      	ldr	r2, [pc, #408]	; (8003f5c <HAL_DMA_IRQHandler+0x400>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d040      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a64      	ldr	r2, [pc, #400]	; (8003f60 <HAL_DMA_IRQHandler+0x404>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d03b      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a63      	ldr	r2, [pc, #396]	; (8003f64 <HAL_DMA_IRQHandler+0x408>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d036      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a61      	ldr	r2, [pc, #388]	; (8003f68 <HAL_DMA_IRQHandler+0x40c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d031      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a60      	ldr	r2, [pc, #384]	; (8003f6c <HAL_DMA_IRQHandler+0x410>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d02c      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a5e      	ldr	r2, [pc, #376]	; (8003f70 <HAL_DMA_IRQHandler+0x414>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d027      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a5d      	ldr	r2, [pc, #372]	; (8003f74 <HAL_DMA_IRQHandler+0x418>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d022      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a5b      	ldr	r2, [pc, #364]	; (8003f78 <HAL_DMA_IRQHandler+0x41c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01d      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a5a      	ldr	r2, [pc, #360]	; (8003f7c <HAL_DMA_IRQHandler+0x420>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d018      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a58      	ldr	r2, [pc, #352]	; (8003f80 <HAL_DMA_IRQHandler+0x424>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a57      	ldr	r2, [pc, #348]	; (8003f84 <HAL_DMA_IRQHandler+0x428>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a55      	ldr	r2, [pc, #340]	; (8003f88 <HAL_DMA_IRQHandler+0x42c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a54      	ldr	r2, [pc, #336]	; (8003f8c <HAL_DMA_IRQHandler+0x430>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ee>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a52      	ldr	r2, [pc, #328]	; (8003f90 <HAL_DMA_IRQHandler+0x434>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10a      	bne.n	8003e60 <HAL_DMA_IRQHandler+0x304>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf14      	ite	ne
 8003e58:	2301      	movne	r3, #1
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	e003      	b.n	8003e68 <HAL_DMA_IRQHandler+0x30c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2300      	movs	r3, #0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00d      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	2201      	movs	r2, #1
 8003e76:	409a      	lsls	r2, r3
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f043 0202 	orr.w	r2, r3, #2
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2204      	movs	r2, #4
 8003e92:	409a      	lsls	r2, r3
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 808f 	beq.w	8003fbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2c      	ldr	r2, [pc, #176]	; (8003f54 <HAL_DMA_IRQHandler+0x3f8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d04a      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2a      	ldr	r2, [pc, #168]	; (8003f58 <HAL_DMA_IRQHandler+0x3fc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d045      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a29      	ldr	r2, [pc, #164]	; (8003f5c <HAL_DMA_IRQHandler+0x400>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d040      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <HAL_DMA_IRQHandler+0x404>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d03b      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a26      	ldr	r2, [pc, #152]	; (8003f64 <HAL_DMA_IRQHandler+0x408>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d036      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a24      	ldr	r2, [pc, #144]	; (8003f68 <HAL_DMA_IRQHandler+0x40c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d031      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <HAL_DMA_IRQHandler+0x410>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d02c      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <HAL_DMA_IRQHandler+0x414>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d027      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <HAL_DMA_IRQHandler+0x418>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d022      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <HAL_DMA_IRQHandler+0x41c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01d      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_DMA_IRQHandler+0x420>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d018      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1b      	ldr	r2, [pc, #108]	; (8003f80 <HAL_DMA_IRQHandler+0x424>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <HAL_DMA_IRQHandler+0x428>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00e      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_DMA_IRQHandler+0x42c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a17      	ldr	r2, [pc, #92]	; (8003f8c <HAL_DMA_IRQHandler+0x430>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x3e2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <HAL_DMA_IRQHandler+0x434>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d12a      	bne.n	8003f94 <HAL_DMA_IRQHandler+0x438>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e023      	b.n	8003f9c <HAL_DMA_IRQHandler+0x440>
 8003f54:	40020010 	.word	0x40020010
 8003f58:	40020028 	.word	0x40020028
 8003f5c:	40020040 	.word	0x40020040
 8003f60:	40020058 	.word	0x40020058
 8003f64:	40020070 	.word	0x40020070
 8003f68:	40020088 	.word	0x40020088
 8003f6c:	400200a0 	.word	0x400200a0
 8003f70:	400200b8 	.word	0x400200b8
 8003f74:	40020410 	.word	0x40020410
 8003f78:	40020428 	.word	0x40020428
 8003f7c:	40020440 	.word	0x40020440
 8003f80:	40020458 	.word	0x40020458
 8003f84:	40020470 	.word	0x40020470
 8003f88:	40020488 	.word	0x40020488
 8003f8c:	400204a0 	.word	0x400204a0
 8003f90:	400204b8 	.word	0x400204b8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	2204      	movs	r2, #4
 8003faa:	409a      	lsls	r2, r3
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	f043 0204 	orr.w	r2, r3, #4
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80a6 	beq.w	800411e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a85      	ldr	r2, [pc, #532]	; (80041ec <HAL_DMA_IRQHandler+0x690>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d04a      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a83      	ldr	r2, [pc, #524]	; (80041f0 <HAL_DMA_IRQHandler+0x694>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d045      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a82      	ldr	r2, [pc, #520]	; (80041f4 <HAL_DMA_IRQHandler+0x698>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d040      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a80      	ldr	r2, [pc, #512]	; (80041f8 <HAL_DMA_IRQHandler+0x69c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d03b      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7f      	ldr	r2, [pc, #508]	; (80041fc <HAL_DMA_IRQHandler+0x6a0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d036      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a7d      	ldr	r2, [pc, #500]	; (8004200 <HAL_DMA_IRQHandler+0x6a4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d031      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7c      	ldr	r2, [pc, #496]	; (8004204 <HAL_DMA_IRQHandler+0x6a8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d02c      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a7a      	ldr	r2, [pc, #488]	; (8004208 <HAL_DMA_IRQHandler+0x6ac>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d027      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a79      	ldr	r2, [pc, #484]	; (800420c <HAL_DMA_IRQHandler+0x6b0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d022      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a77      	ldr	r2, [pc, #476]	; (8004210 <HAL_DMA_IRQHandler+0x6b4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01d      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a76      	ldr	r2, [pc, #472]	; (8004214 <HAL_DMA_IRQHandler+0x6b8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d018      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a74      	ldr	r2, [pc, #464]	; (8004218 <HAL_DMA_IRQHandler+0x6bc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a73      	ldr	r2, [pc, #460]	; (800421c <HAL_DMA_IRQHandler+0x6c0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a71      	ldr	r2, [pc, #452]	; (8004220 <HAL_DMA_IRQHandler+0x6c4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a70      	ldr	r2, [pc, #448]	; (8004224 <HAL_DMA_IRQHandler+0x6c8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_DMA_IRQHandler+0x516>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a6e      	ldr	r2, [pc, #440]	; (8004228 <HAL_DMA_IRQHandler+0x6cc>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10a      	bne.n	8004088 <HAL_DMA_IRQHandler+0x52c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e009      	b.n	800409c <HAL_DMA_IRQHandler+0x540>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d03e      	beq.n	800411e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2210      	movs	r2, #16
 80040aa:	409a      	lsls	r2, r3
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d018      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d108      	bne.n	80040de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d024      	beq.n	800411e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
 80040dc:	e01f      	b.n	800411e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01b      	beq.n	800411e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
 80040ee:	e016      	b.n	800411e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d107      	bne.n	800410e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0208 	bic.w	r2, r2, #8
 800410c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2220      	movs	r2, #32
 8004128:	409a      	lsls	r2, r3
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8110 	beq.w	8004354 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a2c      	ldr	r2, [pc, #176]	; (80041ec <HAL_DMA_IRQHandler+0x690>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d04a      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <HAL_DMA_IRQHandler+0x694>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d045      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <HAL_DMA_IRQHandler+0x698>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d040      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <HAL_DMA_IRQHandler+0x69c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d03b      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a26      	ldr	r2, [pc, #152]	; (80041fc <HAL_DMA_IRQHandler+0x6a0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d036      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a25      	ldr	r2, [pc, #148]	; (8004200 <HAL_DMA_IRQHandler+0x6a4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d031      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a23      	ldr	r2, [pc, #140]	; (8004204 <HAL_DMA_IRQHandler+0x6a8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d02c      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a22      	ldr	r2, [pc, #136]	; (8004208 <HAL_DMA_IRQHandler+0x6ac>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d027      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a20      	ldr	r2, [pc, #128]	; (800420c <HAL_DMA_IRQHandler+0x6b0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d022      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <HAL_DMA_IRQHandler+0x6b4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d01d      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <HAL_DMA_IRQHandler+0x6b8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d018      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <HAL_DMA_IRQHandler+0x6bc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d013      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1a      	ldr	r2, [pc, #104]	; (800421c <HAL_DMA_IRQHandler+0x6c0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00e      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a19      	ldr	r2, [pc, #100]	; (8004220 <HAL_DMA_IRQHandler+0x6c4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d009      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a17      	ldr	r2, [pc, #92]	; (8004224 <HAL_DMA_IRQHandler+0x6c8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x678>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a16      	ldr	r2, [pc, #88]	; (8004228 <HAL_DMA_IRQHandler+0x6cc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d12b      	bne.n	800422c <HAL_DMA_IRQHandler+0x6d0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bf14      	ite	ne
 80041e2:	2301      	movne	r3, #1
 80041e4:	2300      	moveq	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	e02a      	b.n	8004240 <HAL_DMA_IRQHandler+0x6e4>
 80041ea:	bf00      	nop
 80041ec:	40020010 	.word	0x40020010
 80041f0:	40020028 	.word	0x40020028
 80041f4:	40020040 	.word	0x40020040
 80041f8:	40020058 	.word	0x40020058
 80041fc:	40020070 	.word	0x40020070
 8004200:	40020088 	.word	0x40020088
 8004204:	400200a0 	.word	0x400200a0
 8004208:	400200b8 	.word	0x400200b8
 800420c:	40020410 	.word	0x40020410
 8004210:	40020428 	.word	0x40020428
 8004214:	40020440 	.word	0x40020440
 8004218:	40020458 	.word	0x40020458
 800421c:	40020470 	.word	0x40020470
 8004220:	40020488 	.word	0x40020488
 8004224:	400204a0 	.word	0x400204a0
 8004228:	400204b8 	.word	0x400204b8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8087 	beq.w	8004354 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	2220      	movs	r2, #32
 8004250:	409a      	lsls	r2, r3
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b04      	cmp	r3, #4
 8004260:	d139      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0216 	bic.w	r2, r2, #22
 8004270:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004280:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <HAL_DMA_IRQHandler+0x736>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0208 	bic.w	r2, r2, #8
 80042a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	223f      	movs	r2, #63	; 0x3f
 80042ac:	409a      	lsls	r2, r3
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 834a 	beq.w	8004960 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
          }
          return;
 80042d4:	e344      	b.n	8004960 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d018      	beq.n	8004316 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d02c      	beq.n	8004354 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
 8004302:	e027      	b.n	8004354 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d023      	beq.n	8004354 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
 8004314:	e01e      	b.n	8004354 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10f      	bne.n	8004344 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0210 	bic.w	r2, r2, #16
 8004332:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8306 	beq.w	800496a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8088 	beq.w	800447c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2204      	movs	r2, #4
 8004370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a7a      	ldr	r2, [pc, #488]	; (8004564 <HAL_DMA_IRQHandler+0xa08>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d04a      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a79      	ldr	r2, [pc, #484]	; (8004568 <HAL_DMA_IRQHandler+0xa0c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d045      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a77      	ldr	r2, [pc, #476]	; (800456c <HAL_DMA_IRQHandler+0xa10>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d040      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a76      	ldr	r2, [pc, #472]	; (8004570 <HAL_DMA_IRQHandler+0xa14>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d03b      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a74      	ldr	r2, [pc, #464]	; (8004574 <HAL_DMA_IRQHandler+0xa18>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d036      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a73      	ldr	r2, [pc, #460]	; (8004578 <HAL_DMA_IRQHandler+0xa1c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d031      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a71      	ldr	r2, [pc, #452]	; (800457c <HAL_DMA_IRQHandler+0xa20>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d02c      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a70      	ldr	r2, [pc, #448]	; (8004580 <HAL_DMA_IRQHandler+0xa24>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d027      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6e      	ldr	r2, [pc, #440]	; (8004584 <HAL_DMA_IRQHandler+0xa28>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d022      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6d      	ldr	r2, [pc, #436]	; (8004588 <HAL_DMA_IRQHandler+0xa2c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d01d      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6b      	ldr	r2, [pc, #428]	; (800458c <HAL_DMA_IRQHandler+0xa30>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6a      	ldr	r2, [pc, #424]	; (8004590 <HAL_DMA_IRQHandler+0xa34>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a68      	ldr	r2, [pc, #416]	; (8004594 <HAL_DMA_IRQHandler+0xa38>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a67      	ldr	r2, [pc, #412]	; (8004598 <HAL_DMA_IRQHandler+0xa3c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a65      	ldr	r2, [pc, #404]	; (800459c <HAL_DMA_IRQHandler+0xa40>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_DMA_IRQHandler+0x8b8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a64      	ldr	r2, [pc, #400]	; (80045a0 <HAL_DMA_IRQHandler+0xa44>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d108      	bne.n	8004426 <HAL_DMA_IRQHandler+0x8ca>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e007      	b.n	8004436 <HAL_DMA_IRQHandler+0x8da>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3301      	adds	r3, #1
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443e:	429a      	cmp	r2, r3
 8004440:	d307      	bcc.n	8004452 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f2      	bne.n	8004436 <HAL_DMA_IRQHandler+0x8da>
 8004450:	e000      	b.n	8004454 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004452:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2203      	movs	r2, #3
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004472:	e003      	b.n	800447c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8272 	beq.w	800496a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4798      	blx	r3
 800448e:	e26c      	b.n	800496a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a43      	ldr	r2, [pc, #268]	; (80045a4 <HAL_DMA_IRQHandler+0xa48>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d022      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x984>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a42      	ldr	r2, [pc, #264]	; (80045a8 <HAL_DMA_IRQHandler+0xa4c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d01d      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x984>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a40      	ldr	r2, [pc, #256]	; (80045ac <HAL_DMA_IRQHandler+0xa50>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d018      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x984>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a3f      	ldr	r2, [pc, #252]	; (80045b0 <HAL_DMA_IRQHandler+0xa54>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x984>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a3d      	ldr	r2, [pc, #244]	; (80045b4 <HAL_DMA_IRQHandler+0xa58>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00e      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x984>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a3c      	ldr	r2, [pc, #240]	; (80045b8 <HAL_DMA_IRQHandler+0xa5c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x984>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3a      	ldr	r2, [pc, #232]	; (80045bc <HAL_DMA_IRQHandler+0xa60>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x984>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a39      	ldr	r2, [pc, #228]	; (80045c0 <HAL_DMA_IRQHandler+0xa64>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d101      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x988>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <HAL_DMA_IRQHandler+0x98a>
 80044e4:	2300      	movs	r3, #0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 823f 	beq.w	800496a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2204      	movs	r2, #4
 80044fe:	409a      	lsls	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80cd 	beq.w	80046a4 <HAL_DMA_IRQHandler+0xb48>
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80c7 	beq.w	80046a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2204      	movs	r2, #4
 8004520:	409a      	lsls	r2, r3
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d049      	beq.n	80045c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8210 	beq.w	8004964 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800454c:	e20a      	b.n	8004964 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8206 	beq.w	8004964 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004560:	e200      	b.n	8004964 <HAL_DMA_IRQHandler+0xe08>
 8004562:	bf00      	nop
 8004564:	40020010 	.word	0x40020010
 8004568:	40020028 	.word	0x40020028
 800456c:	40020040 	.word	0x40020040
 8004570:	40020058 	.word	0x40020058
 8004574:	40020070 	.word	0x40020070
 8004578:	40020088 	.word	0x40020088
 800457c:	400200a0 	.word	0x400200a0
 8004580:	400200b8 	.word	0x400200b8
 8004584:	40020410 	.word	0x40020410
 8004588:	40020428 	.word	0x40020428
 800458c:	40020440 	.word	0x40020440
 8004590:	40020458 	.word	0x40020458
 8004594:	40020470 	.word	0x40020470
 8004598:	40020488 	.word	0x40020488
 800459c:	400204a0 	.word	0x400204a0
 80045a0:	400204b8 	.word	0x400204b8
 80045a4:	58025408 	.word	0x58025408
 80045a8:	5802541c 	.word	0x5802541c
 80045ac:	58025430 	.word	0x58025430
 80045b0:	58025444 	.word	0x58025444
 80045b4:	58025458 	.word	0x58025458
 80045b8:	5802546c 	.word	0x5802546c
 80045bc:	58025480 	.word	0x58025480
 80045c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d160      	bne.n	8004690 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a8c      	ldr	r2, [pc, #560]	; (8004804 <HAL_DMA_IRQHandler+0xca8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d04a      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a8a      	ldr	r2, [pc, #552]	; (8004808 <HAL_DMA_IRQHandler+0xcac>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d045      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a89      	ldr	r2, [pc, #548]	; (800480c <HAL_DMA_IRQHandler+0xcb0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d040      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a87      	ldr	r2, [pc, #540]	; (8004810 <HAL_DMA_IRQHandler+0xcb4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d03b      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a86      	ldr	r2, [pc, #536]	; (8004814 <HAL_DMA_IRQHandler+0xcb8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d036      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a84      	ldr	r2, [pc, #528]	; (8004818 <HAL_DMA_IRQHandler+0xcbc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d031      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a83      	ldr	r2, [pc, #524]	; (800481c <HAL_DMA_IRQHandler+0xcc0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d02c      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a81      	ldr	r2, [pc, #516]	; (8004820 <HAL_DMA_IRQHandler+0xcc4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d027      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a80      	ldr	r2, [pc, #512]	; (8004824 <HAL_DMA_IRQHandler+0xcc8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d022      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a7e      	ldr	r2, [pc, #504]	; (8004828 <HAL_DMA_IRQHandler+0xccc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01d      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a7d      	ldr	r2, [pc, #500]	; (800482c <HAL_DMA_IRQHandler+0xcd0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d018      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a7b      	ldr	r2, [pc, #492]	; (8004830 <HAL_DMA_IRQHandler+0xcd4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a7a      	ldr	r2, [pc, #488]	; (8004834 <HAL_DMA_IRQHandler+0xcd8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00e      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a78      	ldr	r2, [pc, #480]	; (8004838 <HAL_DMA_IRQHandler+0xcdc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d009      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a77      	ldr	r2, [pc, #476]	; (800483c <HAL_DMA_IRQHandler+0xce0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <HAL_DMA_IRQHandler+0xb12>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a75      	ldr	r2, [pc, #468]	; (8004840 <HAL_DMA_IRQHandler+0xce4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d108      	bne.n	8004680 <HAL_DMA_IRQHandler+0xb24>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0208 	bic.w	r2, r2, #8
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e007      	b.n	8004690 <HAL_DMA_IRQHandler+0xb34>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0204 	bic.w	r2, r2, #4
 800468e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8165 	beq.w	8004964 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a2:	e15f      	b.n	8004964 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2202      	movs	r2, #2
 80046ae:	409a      	lsls	r2, r3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80c5 	beq.w	8004844 <HAL_DMA_IRQHandler+0xce8>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80bf 	beq.w	8004844 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2202      	movs	r2, #2
 80046d0:	409a      	lsls	r2, r3
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d018      	beq.n	8004712 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 813a 	beq.w	8004968 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046fc:	e134      	b.n	8004968 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8130 	beq.w	8004968 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004710:	e12a      	b.n	8004968 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d168      	bne.n	80047ee <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a38      	ldr	r2, [pc, #224]	; (8004804 <HAL_DMA_IRQHandler+0xca8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d04a      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a37      	ldr	r2, [pc, #220]	; (8004808 <HAL_DMA_IRQHandler+0xcac>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d045      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a35      	ldr	r2, [pc, #212]	; (800480c <HAL_DMA_IRQHandler+0xcb0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d040      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a34      	ldr	r2, [pc, #208]	; (8004810 <HAL_DMA_IRQHandler+0xcb4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d03b      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a32      	ldr	r2, [pc, #200]	; (8004814 <HAL_DMA_IRQHandler+0xcb8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d036      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a31      	ldr	r2, [pc, #196]	; (8004818 <HAL_DMA_IRQHandler+0xcbc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d031      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2f      	ldr	r2, [pc, #188]	; (800481c <HAL_DMA_IRQHandler+0xcc0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d02c      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2e      	ldr	r2, [pc, #184]	; (8004820 <HAL_DMA_IRQHandler+0xcc4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d027      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <HAL_DMA_IRQHandler+0xcc8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2b      	ldr	r2, [pc, #172]	; (8004828 <HAL_DMA_IRQHandler+0xccc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01d      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a29      	ldr	r2, [pc, #164]	; (800482c <HAL_DMA_IRQHandler+0xcd0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a28      	ldr	r2, [pc, #160]	; (8004830 <HAL_DMA_IRQHandler+0xcd4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a26      	ldr	r2, [pc, #152]	; (8004834 <HAL_DMA_IRQHandler+0xcd8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a25      	ldr	r2, [pc, #148]	; (8004838 <HAL_DMA_IRQHandler+0xcdc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a23      	ldr	r2, [pc, #140]	; (800483c <HAL_DMA_IRQHandler+0xce0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_DMA_IRQHandler+0xc60>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a22      	ldr	r2, [pc, #136]	; (8004840 <HAL_DMA_IRQHandler+0xce4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d108      	bne.n	80047ce <HAL_DMA_IRQHandler+0xc72>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0214 	bic.w	r2, r2, #20
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e007      	b.n	80047de <HAL_DMA_IRQHandler+0xc82>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 020a 	bic.w	r2, r2, #10
 80047dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80b8 	beq.w	8004968 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004800:	e0b2      	b.n	8004968 <HAL_DMA_IRQHandler+0xe0c>
 8004802:	bf00      	nop
 8004804:	40020010 	.word	0x40020010
 8004808:	40020028 	.word	0x40020028
 800480c:	40020040 	.word	0x40020040
 8004810:	40020058 	.word	0x40020058
 8004814:	40020070 	.word	0x40020070
 8004818:	40020088 	.word	0x40020088
 800481c:	400200a0 	.word	0x400200a0
 8004820:	400200b8 	.word	0x400200b8
 8004824:	40020410 	.word	0x40020410
 8004828:	40020428 	.word	0x40020428
 800482c:	40020440 	.word	0x40020440
 8004830:	40020458 	.word	0x40020458
 8004834:	40020470 	.word	0x40020470
 8004838:	40020488 	.word	0x40020488
 800483c:	400204a0 	.word	0x400204a0
 8004840:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2208      	movs	r2, #8
 800484e:	409a      	lsls	r2, r3
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8088 	beq.w	800496a <HAL_DMA_IRQHandler+0xe0e>
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8082 	beq.w	800496a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a41      	ldr	r2, [pc, #260]	; (8004970 <HAL_DMA_IRQHandler+0xe14>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d04a      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a3f      	ldr	r2, [pc, #252]	; (8004974 <HAL_DMA_IRQHandler+0xe18>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d045      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a3e      	ldr	r2, [pc, #248]	; (8004978 <HAL_DMA_IRQHandler+0xe1c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d040      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a3c      	ldr	r2, [pc, #240]	; (800497c <HAL_DMA_IRQHandler+0xe20>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d03b      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a3b      	ldr	r2, [pc, #236]	; (8004980 <HAL_DMA_IRQHandler+0xe24>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d036      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a39      	ldr	r2, [pc, #228]	; (8004984 <HAL_DMA_IRQHandler+0xe28>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d031      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a38      	ldr	r2, [pc, #224]	; (8004988 <HAL_DMA_IRQHandler+0xe2c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d02c      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a36      	ldr	r2, [pc, #216]	; (800498c <HAL_DMA_IRQHandler+0xe30>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d027      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a35      	ldr	r2, [pc, #212]	; (8004990 <HAL_DMA_IRQHandler+0xe34>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d022      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a33      	ldr	r2, [pc, #204]	; (8004994 <HAL_DMA_IRQHandler+0xe38>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01d      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a32      	ldr	r2, [pc, #200]	; (8004998 <HAL_DMA_IRQHandler+0xe3c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d018      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a30      	ldr	r2, [pc, #192]	; (800499c <HAL_DMA_IRQHandler+0xe40>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a2f      	ldr	r2, [pc, #188]	; (80049a0 <HAL_DMA_IRQHandler+0xe44>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00e      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a2d      	ldr	r2, [pc, #180]	; (80049a4 <HAL_DMA_IRQHandler+0xe48>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2c      	ldr	r2, [pc, #176]	; (80049a8 <HAL_DMA_IRQHandler+0xe4c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d004      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdaa>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <HAL_DMA_IRQHandler+0xe50>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <HAL_DMA_IRQHandler+0xdbc>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 021c 	bic.w	r2, r2, #28
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e007      	b.n	8004928 <HAL_DMA_IRQHandler+0xdcc>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 020e 	bic.w	r2, r2, #14
 8004926:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	2201      	movs	r2, #1
 8004932:	409a      	lsls	r2, r3
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
 800495e:	e004      	b.n	800496a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004960:	bf00      	nop
 8004962:	e002      	b.n	800496a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004964:	bf00      	nop
 8004966:	e000      	b.n	800496a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004968:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800496a:	3728      	adds	r7, #40	; 0x28
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40020010 	.word	0x40020010
 8004974:	40020028 	.word	0x40020028
 8004978:	40020040 	.word	0x40020040
 800497c:	40020058 	.word	0x40020058
 8004980:	40020070 	.word	0x40020070
 8004984:	40020088 	.word	0x40020088
 8004988:	400200a0 	.word	0x400200a0
 800498c:	400200b8 	.word	0x400200b8
 8004990:	40020410 	.word	0x40020410
 8004994:	40020428 	.word	0x40020428
 8004998:	40020440 	.word	0x40020440
 800499c:	40020458 	.word	0x40020458
 80049a0:	40020470 	.word	0x40020470
 80049a4:	40020488 	.word	0x40020488
 80049a8:	400204a0 	.word	0x400204a0
 80049ac:	400204b8 	.word	0x400204b8

080049b0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a84      	ldr	r2, [pc, #528]	; (8004bf8 <DMA_SetConfig+0x230>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d072      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a82      	ldr	r2, [pc, #520]	; (8004bfc <DMA_SetConfig+0x234>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d06d      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a81      	ldr	r2, [pc, #516]	; (8004c00 <DMA_SetConfig+0x238>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d068      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a7f      	ldr	r2, [pc, #508]	; (8004c04 <DMA_SetConfig+0x23c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d063      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a7e      	ldr	r2, [pc, #504]	; (8004c08 <DMA_SetConfig+0x240>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d05e      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a7c      	ldr	r2, [pc, #496]	; (8004c0c <DMA_SetConfig+0x244>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d059      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a7b      	ldr	r2, [pc, #492]	; (8004c10 <DMA_SetConfig+0x248>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d054      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a79      	ldr	r2, [pc, #484]	; (8004c14 <DMA_SetConfig+0x24c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d04f      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a78      	ldr	r2, [pc, #480]	; (8004c18 <DMA_SetConfig+0x250>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d04a      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a76      	ldr	r2, [pc, #472]	; (8004c1c <DMA_SetConfig+0x254>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d045      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a75      	ldr	r2, [pc, #468]	; (8004c20 <DMA_SetConfig+0x258>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d040      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a73      	ldr	r2, [pc, #460]	; (8004c24 <DMA_SetConfig+0x25c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d03b      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a72      	ldr	r2, [pc, #456]	; (8004c28 <DMA_SetConfig+0x260>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d036      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a70      	ldr	r2, [pc, #448]	; (8004c2c <DMA_SetConfig+0x264>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d031      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a6f      	ldr	r2, [pc, #444]	; (8004c30 <DMA_SetConfig+0x268>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d02c      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a6d      	ldr	r2, [pc, #436]	; (8004c34 <DMA_SetConfig+0x26c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d027      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6c      	ldr	r2, [pc, #432]	; (8004c38 <DMA_SetConfig+0x270>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d022      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6a      	ldr	r2, [pc, #424]	; (8004c3c <DMA_SetConfig+0x274>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d01d      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a69      	ldr	r2, [pc, #420]	; (8004c40 <DMA_SetConfig+0x278>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d018      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a67      	ldr	r2, [pc, #412]	; (8004c44 <DMA_SetConfig+0x27c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a66      	ldr	r2, [pc, #408]	; (8004c48 <DMA_SetConfig+0x280>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00e      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a64      	ldr	r2, [pc, #400]	; (8004c4c <DMA_SetConfig+0x284>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a63      	ldr	r2, [pc, #396]	; (8004c50 <DMA_SetConfig+0x288>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <DMA_SetConfig+0x10a>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a61      	ldr	r2, [pc, #388]	; (8004c54 <DMA_SetConfig+0x28c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d101      	bne.n	8004ad6 <DMA_SetConfig+0x10e>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <DMA_SetConfig+0x110>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ae4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004af6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3e      	ldr	r2, [pc, #248]	; (8004bf8 <DMA_SetConfig+0x230>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d04a      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a3d      	ldr	r2, [pc, #244]	; (8004bfc <DMA_SetConfig+0x234>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d045      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a3b      	ldr	r2, [pc, #236]	; (8004c00 <DMA_SetConfig+0x238>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d040      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a3a      	ldr	r2, [pc, #232]	; (8004c04 <DMA_SetConfig+0x23c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d03b      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <DMA_SetConfig+0x240>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d036      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a37      	ldr	r2, [pc, #220]	; (8004c0c <DMA_SetConfig+0x244>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d031      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a35      	ldr	r2, [pc, #212]	; (8004c10 <DMA_SetConfig+0x248>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02c      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a34      	ldr	r2, [pc, #208]	; (8004c14 <DMA_SetConfig+0x24c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d027      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <DMA_SetConfig+0x250>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a31      	ldr	r2, [pc, #196]	; (8004c1c <DMA_SetConfig+0x254>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d01d      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <DMA_SetConfig+0x258>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <DMA_SetConfig+0x25c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a2c      	ldr	r2, [pc, #176]	; (8004c28 <DMA_SetConfig+0x260>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2b      	ldr	r2, [pc, #172]	; (8004c2c <DMA_SetConfig+0x264>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <DMA_SetConfig+0x268>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <DMA_SetConfig+0x1d0>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <DMA_SetConfig+0x26c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <DMA_SetConfig+0x1d4>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <DMA_SetConfig+0x1d6>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d05a      	beq.n	8004c58 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	223f      	movs	r2, #63	; 0x3f
 8004bac:	409a      	lsls	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bc0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d108      	bne.n	8004be4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004be2:	e087      	b.n	8004cf4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
}
 8004bf4:	e07e      	b.n	8004cf4 <DMA_SetConfig+0x32c>
 8004bf6:	bf00      	nop
 8004bf8:	40020010 	.word	0x40020010
 8004bfc:	40020028 	.word	0x40020028
 8004c00:	40020040 	.word	0x40020040
 8004c04:	40020058 	.word	0x40020058
 8004c08:	40020070 	.word	0x40020070
 8004c0c:	40020088 	.word	0x40020088
 8004c10:	400200a0 	.word	0x400200a0
 8004c14:	400200b8 	.word	0x400200b8
 8004c18:	40020410 	.word	0x40020410
 8004c1c:	40020428 	.word	0x40020428
 8004c20:	40020440 	.word	0x40020440
 8004c24:	40020458 	.word	0x40020458
 8004c28:	40020470 	.word	0x40020470
 8004c2c:	40020488 	.word	0x40020488
 8004c30:	400204a0 	.word	0x400204a0
 8004c34:	400204b8 	.word	0x400204b8
 8004c38:	58025408 	.word	0x58025408
 8004c3c:	5802541c 	.word	0x5802541c
 8004c40:	58025430 	.word	0x58025430
 8004c44:	58025444 	.word	0x58025444
 8004c48:	58025458 	.word	0x58025458
 8004c4c:	5802546c 	.word	0x5802546c
 8004c50:	58025480 	.word	0x58025480
 8004c54:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <DMA_SetConfig+0x338>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <DMA_SetConfig+0x33c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d01d      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <DMA_SetConfig+0x340>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <DMA_SetConfig+0x344>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <DMA_SetConfig+0x348>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <DMA_SetConfig+0x34c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <DMA_SetConfig+0x350>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <DMA_SetConfig+0x2e0>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <DMA_SetConfig+0x354>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d101      	bne.n	8004cac <DMA_SetConfig+0x2e4>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <DMA_SetConfig+0x2e6>
 8004cac:	2300      	movs	r3, #0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	2201      	movs	r2, #1
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d108      	bne.n	8004ce4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	60da      	str	r2, [r3, #12]
}
 8004ce2:	e007      	b.n	8004cf4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	58025408 	.word	0x58025408
 8004d04:	5802541c 	.word	0x5802541c
 8004d08:	58025430 	.word	0x58025430
 8004d0c:	58025444 	.word	0x58025444
 8004d10:	58025458 	.word	0x58025458
 8004d14:	5802546c 	.word	0x5802546c
 8004d18:	58025480 	.word	0x58025480
 8004d1c:	58025494 	.word	0x58025494

08004d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a42      	ldr	r2, [pc, #264]	; (8004e38 <DMA_CalcBaseAndBitshift+0x118>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d04a      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a41      	ldr	r2, [pc, #260]	; (8004e3c <DMA_CalcBaseAndBitshift+0x11c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d045      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a3f      	ldr	r2, [pc, #252]	; (8004e40 <DMA_CalcBaseAndBitshift+0x120>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d040      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3e      	ldr	r2, [pc, #248]	; (8004e44 <DMA_CalcBaseAndBitshift+0x124>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d03b      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3c      	ldr	r2, [pc, #240]	; (8004e48 <DMA_CalcBaseAndBitshift+0x128>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d036      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3b      	ldr	r2, [pc, #236]	; (8004e4c <DMA_CalcBaseAndBitshift+0x12c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d031      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a39      	ldr	r2, [pc, #228]	; (8004e50 <DMA_CalcBaseAndBitshift+0x130>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02c      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a38      	ldr	r2, [pc, #224]	; (8004e54 <DMA_CalcBaseAndBitshift+0x134>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d027      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a36      	ldr	r2, [pc, #216]	; (8004e58 <DMA_CalcBaseAndBitshift+0x138>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d022      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a35      	ldr	r2, [pc, #212]	; (8004e5c <DMA_CalcBaseAndBitshift+0x13c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d01d      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a33      	ldr	r2, [pc, #204]	; (8004e60 <DMA_CalcBaseAndBitshift+0x140>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d018      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <DMA_CalcBaseAndBitshift+0x144>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a30      	ldr	r2, [pc, #192]	; (8004e68 <DMA_CalcBaseAndBitshift+0x148>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00e      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2f      	ldr	r2, [pc, #188]	; (8004e6c <DMA_CalcBaseAndBitshift+0x14c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a2d      	ldr	r2, [pc, #180]	; (8004e70 <DMA_CalcBaseAndBitshift+0x150>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2c      	ldr	r2, [pc, #176]	; (8004e74 <DMA_CalcBaseAndBitshift+0x154>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <DMA_CalcBaseAndBitshift+0xac>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <DMA_CalcBaseAndBitshift+0xae>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d024      	beq.n	8004e1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	3b10      	subs	r3, #16
 8004dda:	4a27      	ldr	r2, [pc, #156]	; (8004e78 <DMA_CalcBaseAndBitshift+0x158>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	4a24      	ldr	r2, [pc, #144]	; (8004e7c <DMA_CalcBaseAndBitshift+0x15c>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	461a      	mov	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d908      	bls.n	8004e0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <DMA_CalcBaseAndBitshift+0x160>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	1d1a      	adds	r2, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	659a      	str	r2, [r3, #88]	; 0x58
 8004e0a:	e00d      	b.n	8004e28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <DMA_CalcBaseAndBitshift+0x160>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6593      	str	r3, [r2, #88]	; 0x58
 8004e1a:	e005      	b.n	8004e28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40020010 	.word	0x40020010
 8004e3c:	40020028 	.word	0x40020028
 8004e40:	40020040 	.word	0x40020040
 8004e44:	40020058 	.word	0x40020058
 8004e48:	40020070 	.word	0x40020070
 8004e4c:	40020088 	.word	0x40020088
 8004e50:	400200a0 	.word	0x400200a0
 8004e54:	400200b8 	.word	0x400200b8
 8004e58:	40020410 	.word	0x40020410
 8004e5c:	40020428 	.word	0x40020428
 8004e60:	40020440 	.word	0x40020440
 8004e64:	40020458 	.word	0x40020458
 8004e68:	40020470 	.word	0x40020470
 8004e6c:	40020488 	.word	0x40020488
 8004e70:	400204a0 	.word	0x400204a0
 8004e74:	400204b8 	.word	0x400204b8
 8004e78:	aaaaaaab 	.word	0xaaaaaaab
 8004e7c:	0800d3d0 	.word	0x0800d3d0
 8004e80:	fffffc00 	.word	0xfffffc00

08004e84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d120      	bne.n	8004eda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d858      	bhi.n	8004f52 <DMA_CheckFifoParam+0xce>
 8004ea0:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <DMA_CheckFifoParam+0x24>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004eb9 	.word	0x08004eb9
 8004eac:	08004ecb 	.word	0x08004ecb
 8004eb0:	08004eb9 	.word	0x08004eb9
 8004eb4:	08004f53 	.word	0x08004f53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d048      	beq.n	8004f56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ec8:	e045      	b.n	8004f56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ed2:	d142      	bne.n	8004f5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ed8:	e03f      	b.n	8004f5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee2:	d123      	bne.n	8004f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d838      	bhi.n	8004f5e <DMA_CheckFifoParam+0xda>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <DMA_CheckFifoParam+0x70>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f0b 	.word	0x08004f0b
 8004efc:	08004f05 	.word	0x08004f05
 8004f00:	08004f1d 	.word	0x08004f1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
        break;
 8004f08:	e030      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d025      	beq.n	8004f62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f1a:	e022      	b.n	8004f62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f24:	d11f      	bne.n	8004f66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f2a:	e01c      	b.n	8004f66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d902      	bls.n	8004f3a <DMA_CheckFifoParam+0xb6>
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d003      	beq.n	8004f40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004f38:	e018      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f3e:	e015      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8004f50:	e00b      	b.n	8004f6a <DMA_CheckFifoParam+0xe6>
        break;
 8004f52:	bf00      	nop
 8004f54:	e00a      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f56:	bf00      	nop
 8004f58:	e008      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f5a:	bf00      	nop
 8004f5c:	e006      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f5e:	bf00      	nop
 8004f60:	e004      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
        break;
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
    break;
 8004f6a:	bf00      	nop
    }
  }

  return status;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a38      	ldr	r2, [pc, #224]	; (8005070 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d022      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a36      	ldr	r2, [pc, #216]	; (8005074 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01d      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a35      	ldr	r2, [pc, #212]	; (8005078 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a33      	ldr	r2, [pc, #204]	; (800507c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a32      	ldr	r2, [pc, #200]	; (8005080 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a30      	ldr	r2, [pc, #192]	; (8005084 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	; (800508c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01a      	beq.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	3b08      	subs	r3, #8
 8004fec:	4a28      	ldr	r2, [pc, #160]	; (8005090 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4b26      	ldr	r3, [pc, #152]	; (8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a24      	ldr	r2, [pc, #144]	; (8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005008:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005018:	e024      	b.n	8005064 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	3b10      	subs	r3, #16
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d806      	bhi.n	8005042 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d902      	bls.n	8005042 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3308      	adds	r3, #8
 8005040:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a16      	ldr	r2, [pc, #88]	; (80050ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005054:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	2201      	movs	r2, #1
 800505e:	409a      	lsls	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	58025408 	.word	0x58025408
 8005074:	5802541c 	.word	0x5802541c
 8005078:	58025430 	.word	0x58025430
 800507c:	58025444 	.word	0x58025444
 8005080:	58025458 	.word	0x58025458
 8005084:	5802546c 	.word	0x5802546c
 8005088:	58025480 	.word	0x58025480
 800508c:	58025494 	.word	0x58025494
 8005090:	cccccccd 	.word	0xcccccccd
 8005094:	16009600 	.word	0x16009600
 8005098:	58025880 	.word	0x58025880
 800509c:	aaaaaaab 	.word	0xaaaaaaab
 80050a0:	400204b8 	.word	0x400204b8
 80050a4:	4002040f 	.word	0x4002040f
 80050a8:	10008200 	.word	0x10008200
 80050ac:	40020880 	.word	0x40020880

080050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04a      	beq.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d847      	bhi.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a25      	ldr	r2, [pc, #148]	; (8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d022      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a24      	ldr	r2, [pc, #144]	; (800516c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d01d      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d018      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a21      	ldr	r2, [pc, #132]	; (8005174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00e      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1e      	ldr	r2, [pc, #120]	; (800517c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d009      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d101      	bne.n	8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005120:	2300      	movs	r3, #0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005138:	671a      	str	r2, [r3, #112]	; 0x70
 800513a:	e009      	b.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4b14      	ldr	r3, [pc, #80]	; (8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	461a      	mov	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a11      	ldr	r2, [pc, #68]	; (8005194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800514e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3b01      	subs	r3, #1
 8005154:	2201      	movs	r2, #1
 8005156:	409a      	lsls	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	58025408 	.word	0x58025408
 800516c:	5802541c 	.word	0x5802541c
 8005170:	58025430 	.word	0x58025430
 8005174:	58025444 	.word	0x58025444
 8005178:	58025458 	.word	0x58025458
 800517c:	5802546c 	.word	0x5802546c
 8005180:	58025480 	.word	0x58025480
 8005184:	58025494 	.word	0x58025494
 8005188:	1600963f 	.word	0x1600963f
 800518c:	58025940 	.word	0x58025940
 8005190:	1000823f 	.word	0x1000823f
 8005194:	40020940 	.word	0x40020940

08005198 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0c6      	b.n	8005338 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc fb66 	bl	8001884 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2223      	movs	r2, #35	; 0x23
 80051bc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051be:	4b60      	ldr	r3, [pc, #384]	; (8005340 <HAL_ETH_Init+0x1a8>)
 80051c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051c4:	4a5e      	ldr	r2, [pc, #376]	; (8005340 <HAL_ETH_Init+0x1a8>)
 80051c6:	f043 0302 	orr.w	r3, r3, #2
 80051ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051ce:	4b5c      	ldr	r3, [pc, #368]	; (8005340 <HAL_ETH_Init+0x1a8>)
 80051d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	7a1b      	ldrb	r3, [r3, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80051e4:	2000      	movs	r0, #0
 80051e6:	f7fd f859 	bl	800229c <HAL_SYSCFG_ETHInterfaceSelect>
 80051ea:	e003      	b.n	80051f4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80051ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80051f0:	f7fd f854 	bl	800229c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800520c:	f7fd f80a 	bl	8002224 <HAL_GetTick>
 8005210:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005212:	e00f      	b.n	8005234 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005214:	f7fd f806 	bl	8002224 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005222:	d907      	bls.n	8005234 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2204      	movs	r2, #4
 8005228:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	22e0      	movs	r2, #224	; 0xe0
 800522e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e081      	b.n	8005338 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e6      	bne.n	8005214 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fac0 	bl	80057cc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800524c:	f001 fea4 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 8005250:	4603      	mov	r3, r0
 8005252:	4a3c      	ldr	r2, [pc, #240]	; (8005344 <HAL_ETH_Init+0x1ac>)
 8005254:	fba2 2303 	umull	r2, r3, r2, r3
 8005258:	0c9a      	lsrs	r2, r3, #18
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3a01      	subs	r2, #1
 8005260:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fa13 	bl	8005690 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005280:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005284:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	22e0      	movs	r2, #224	; 0xe0
 800529c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e04a      	b.n	8005338 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	f241 1308 	movw	r3, #4360	; 0x1108
 80052aa:	4413      	add	r3, r2
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4b26      	ldr	r3, [pc, #152]	; (8005348 <HAL_ETH_Init+0x1b0>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6952      	ldr	r2, [r2, #20]
 80052b6:	0052      	lsls	r2, r2, #1
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	6809      	ldr	r1, [r1, #0]
 80052bc:	431a      	orrs	r2, r3
 80052be:	f241 1308 	movw	r3, #4360	; 0x1108
 80052c2:	440b      	add	r3, r1
 80052c4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fad8 	bl	800587c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fb1c 	bl	800590a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	3305      	adds	r3, #5
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	021a      	lsls	r2, r3, #8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	3304      	adds	r3, #4
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	4619      	mov	r1, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	3303      	adds	r3, #3
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	061a      	lsls	r2, r3, #24
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	3302      	adds	r3, #2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	3301      	adds	r3, #1
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005310:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800531e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005320:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2210      	movs	r2, #16
 800532e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2210      	movs	r2, #16
 8005334:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	58024400 	.word	0x58024400
 8005344:	431bde83 	.word	0x431bde83
 8005348:	ffff8001 	.word	0xffff8001

0800534c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800535e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	791b      	ldrb	r3, [r3, #4]
 8005364:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005366:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	7b1b      	ldrb	r3, [r3, #12]
 800536c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800536e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	7b5b      	ldrb	r3, [r3, #13]
 8005374:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005376:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	7b9b      	ldrb	r3, [r3, #14]
 800537c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800537e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	7bdb      	ldrb	r3, [r3, #15]
 8005384:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005386:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	7c12      	ldrb	r2, [r2, #16]
 800538c:	2a00      	cmp	r2, #0
 800538e:	d102      	bne.n	8005396 <ETH_SetMACConfig+0x4a>
 8005390:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005394:	e000      	b.n	8005398 <ETH_SetMACConfig+0x4c>
 8005396:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005398:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	7c52      	ldrb	r2, [r2, #17]
 800539e:	2a00      	cmp	r2, #0
 80053a0:	d102      	bne.n	80053a8 <ETH_SetMACConfig+0x5c>
 80053a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053a6:	e000      	b.n	80053aa <ETH_SetMACConfig+0x5e>
 80053a8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053aa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	7c9b      	ldrb	r3, [r3, #18]
 80053b0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80053b2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80053b8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80053be:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	7f1b      	ldrb	r3, [r3, #28]
 80053c4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80053c6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	7f5b      	ldrb	r3, [r3, #29]
 80053cc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80053ce:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	7f92      	ldrb	r2, [r2, #30]
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	d102      	bne.n	80053de <ETH_SetMACConfig+0x92>
 80053d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053dc:	e000      	b.n	80053e0 <ETH_SetMACConfig+0x94>
 80053de:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80053e0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	7fdb      	ldrb	r3, [r3, #31]
 80053e6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80053e8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d102      	bne.n	80053fa <ETH_SetMACConfig+0xae>
 80053f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053f8:	e000      	b.n	80053fc <ETH_SetMACConfig+0xb0>
 80053fa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80053fc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005402:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800540a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800540c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4b56      	ldr	r3, [pc, #344]	; (8005578 <ETH_SetMACConfig+0x22c>)
 800541e:	4013      	ands	r3, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6812      	ldr	r2, [r2, #0]
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	430b      	orrs	r3, r1
 8005428:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005436:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005438:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005440:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005442:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800544a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800544c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005454:	2a00      	cmp	r2, #0
 8005456:	d102      	bne.n	800545e <ETH_SetMACConfig+0x112>
 8005458:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800545c:	e000      	b.n	8005460 <ETH_SetMACConfig+0x114>
 800545e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005460:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4b42      	ldr	r3, [pc, #264]	; (800557c <ETH_SetMACConfig+0x230>)
 8005472:	4013      	ands	r3, r2
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6812      	ldr	r2, [r2, #0]
 8005478:	68f9      	ldr	r1, [r7, #12]
 800547a:	430b      	orrs	r3, r1
 800547c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005484:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	4b3a      	ldr	r3, [pc, #232]	; (8005580 <ETH_SetMACConfig+0x234>)
 8005496:	4013      	ands	r3, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	68f9      	ldr	r1, [r7, #12]
 800549e:	430b      	orrs	r3, r1
 80054a0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80054a8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054ae:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80054b6:	2a00      	cmp	r2, #0
 80054b8:	d101      	bne.n	80054be <ETH_SetMACConfig+0x172>
 80054ba:	2280      	movs	r2, #128	; 0x80
 80054bc:	e000      	b.n	80054c0 <ETH_SetMACConfig+0x174>
 80054be:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80054c0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054d2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80054d6:	4013      	ands	r3, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	430b      	orrs	r3, r1
 80054e0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80054e8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80054f0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fe:	f023 0103 	bic.w	r1, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	430a      	orrs	r2, r1
 800550a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005516:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005532:	2a00      	cmp	r2, #0
 8005534:	d101      	bne.n	800553a <ETH_SetMACConfig+0x1ee>
 8005536:	2240      	movs	r2, #64	; 0x40
 8005538:	e000      	b.n	800553c <ETH_SetMACConfig+0x1f0>
 800553a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800553c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005544:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005546:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800554e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800555c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	430a      	orrs	r2, r1
 8005568:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	00048083 	.word	0x00048083
 800557c:	c0f88000 	.word	0xc0f88000
 8005580:	fffffef0 	.word	0xfffffef0

08005584 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b38      	ldr	r3, [pc, #224]	; (800567c <ETH_SetDMAConfig+0xf8>)
 800559a:	4013      	ands	r3, r2
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	6809      	ldr	r1, [r1, #0]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80055aa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	791b      	ldrb	r3, [r3, #4]
 80055b0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055b6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	7b1b      	ldrb	r3, [r3, #12]
 80055bc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	f241 0304 	movw	r3, #4100	; 0x1004
 80055ca:	4413      	add	r3, r2
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4b2c      	ldr	r3, [pc, #176]	; (8005680 <ETH_SetDMAConfig+0xfc>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6811      	ldr	r1, [r2, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	431a      	orrs	r2, r3
 80055da:	f241 0304 	movw	r3, #4100	; 0x1004
 80055de:	440b      	add	r3, r1
 80055e0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	7b5b      	ldrb	r3, [r3, #13]
 80055e6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b22      	ldr	r3, [pc, #136]	; (8005684 <ETH_SetDMAConfig+0x100>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6811      	ldr	r1, [r2, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	431a      	orrs	r2, r3
 8005606:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800560a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	7d1b      	ldrb	r3, [r3, #20]
 8005614:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005616:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	7f5b      	ldrb	r3, [r3, #29]
 800561c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f241 1304 	movw	r3, #4356	; 0x1104
 800562a:	4413      	add	r3, r2
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	4b16      	ldr	r3, [pc, #88]	; (8005688 <ETH_SetDMAConfig+0x104>)
 8005630:	4013      	ands	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6811      	ldr	r1, [r2, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	431a      	orrs	r2, r3
 800563a:	f241 1304 	movw	r3, #4356	; 0x1104
 800563e:	440b      	add	r3, r1
 8005640:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	7f1b      	ldrb	r3, [r3, #28]
 8005646:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	f241 1308 	movw	r3, #4360	; 0x1108
 8005658:	4413      	add	r3, r2
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4b0b      	ldr	r3, [pc, #44]	; (800568c <ETH_SetDMAConfig+0x108>)
 800565e:	4013      	ands	r3, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6811      	ldr	r1, [r2, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	431a      	orrs	r2, r3
 8005668:	f241 1308 	movw	r3, #4360	; 0x1108
 800566c:	440b      	add	r3, r1
 800566e:	601a      	str	r2, [r3, #0]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	ffff87fd 	.word	0xffff87fd
 8005680:	ffff2ffe 	.word	0xffff2ffe
 8005684:	fffec000 	.word	0xfffec000
 8005688:	ffc0efef 	.word	0xffc0efef
 800568c:	7fc0ffff 	.word	0x7fc0ffff

08005690 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b0a4      	sub	sp, #144	; 0x90
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800569e:	2300      	movs	r3, #0
 80056a0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80056c0:	2300      	movs	r3, #0
 80056c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80056cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056d0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80056d8:	2300      	movs	r3, #0
 80056da:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80056e8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80056ec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80056f4:	2300      	movs	r3, #0
 80056f6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80056fe:	2300      	movs	r3, #0
 8005700:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005704:	2300      	movs	r3, #0
 8005706:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800570a:	2300      	movs	r3, #0
 800570c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800570e:	2300      	movs	r3, #0
 8005710:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005712:	2300      	movs	r3, #0
 8005714:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005716:	2300      	movs	r3, #0
 8005718:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800571c:	2300      	movs	r3, #0
 800571e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005728:	2320      	movs	r3, #32
 800572a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005734:	2300      	movs	r3, #0
 8005736:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800573a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005744:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005746:	2300      	movs	r3, #0
 8005748:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800574c:	2302      	movs	r3, #2
 800574e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005752:	2300      	movs	r3, #0
 8005754:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005758:	2300      	movs	r3, #0
 800575a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800575e:	2300      	movs	r3, #0
 8005760:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005764:	2301      	movs	r3, #1
 8005766:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800576a:	2300      	movs	r3, #0
 800576c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff fde6 	bl	800534c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005780:	2301      	movs	r3, #1
 8005782:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005784:	2301      	movs	r3, #1
 8005786:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005788:	2300      	movs	r3, #0
 800578a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005792:	2300      	movs	r3, #0
 8005794:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005796:	2300      	movs	r3, #0
 8005798:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800579a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800579e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80057a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80057a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80057b0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80057b6:	f107 0308 	add.w	r3, r7, #8
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff fee1 	bl	8005584 <ETH_SetDMAConfig>
}
 80057c2:	bf00      	nop
 80057c4:	3790      	adds	r7, #144	; 0x90
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80057e6:	f001 fbd7 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 80057ea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4a1e      	ldr	r2, [pc, #120]	; (8005868 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d908      	bls.n	8005806 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4a1d      	ldr	r2, [pc, #116]	; (800586c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d804      	bhi.n	8005806 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e027      	b.n	8005856 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4a18      	ldr	r2, [pc, #96]	; (800586c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d908      	bls.n	8005820 <ETH_MAC_MDIO_ClkConfig+0x54>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4a17      	ldr	r2, [pc, #92]	; (8005870 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d204      	bcs.n	8005820 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	e01a      	b.n	8005856 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4a13      	ldr	r2, [pc, #76]	; (8005870 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d303      	bcc.n	8005830 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d911      	bls.n	8005854 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a10      	ldr	r2, [pc, #64]	; (8005874 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d908      	bls.n	800584a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4a0f      	ldr	r2, [pc, #60]	; (8005878 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d804      	bhi.n	800584a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e005      	b.n	8005856 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e000      	b.n	8005856 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005854:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	01312cff 	.word	0x01312cff
 800586c:	02160ebf 	.word	0x02160ebf
 8005870:	03938700 	.word	0x03938700
 8005874:	05f5e0ff 	.word	0x05f5e0ff
 8005878:	08f0d17f 	.word	0x08f0d17f

0800587c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e01d      	b.n	80058c6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68d9      	ldr	r1, [r3, #12]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	440b      	add	r3, r1
 800589a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2200      	movs	r2, #0
 80058ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2200      	movs	r2, #0
 80058b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	3206      	adds	r2, #6
 80058bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d9de      	bls.n	800588a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	f241 132c 	movw	r3, #4396	; 0x112c
 80058da:	4413      	add	r3, r2
 80058dc:	2203      	movs	r2, #3
 80058de:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68d9      	ldr	r1, [r3, #12]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	f241 1314 	movw	r3, #4372	; 0x1114
 80058ec:	4413      	add	r3, r2
 80058ee:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e024      	b.n	8005962 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6919      	ldr	r1, [r3, #16]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4613      	mov	r3, r2
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	4413      	add	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	440b      	add	r3, r1
 8005928:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2200      	movs	r2, #0
 8005934:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2200      	movs	r2, #0
 800593a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2200      	movs	r2, #0
 8005940:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2200      	movs	r2, #0
 8005946:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2200      	movs	r2, #0
 800594c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3310      	adds	r3, #16
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3301      	adds	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d9d7      	bls.n	8005918 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	f241 1330 	movw	r3, #4400	; 0x1130
 800598e:	4413      	add	r3, r2
 8005990:	2203      	movs	r2, #3
 8005992:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6919      	ldr	r1, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f241 131c 	movw	r3, #4380	; 0x111c
 80059a0:	4413      	add	r3, r2
 80059a2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	f241 1328 	movw	r3, #4392	; 0x1128
 80059b4:	4413      	add	r3, r2
 80059b6:	6019      	str	r1, [r3, #0]
}
 80059b8:	bf00      	nop
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b089      	sub	sp, #36	; 0x24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059d2:	4b89      	ldr	r3, [pc, #548]	; (8005bf8 <HAL_GPIO_Init+0x234>)
 80059d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059d6:	e194      	b.n	8005d02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	2101      	movs	r1, #1
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	fa01 f303 	lsl.w	r3, r1, r3
 80059e4:	4013      	ands	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 8186 	beq.w	8005cfc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d00b      	beq.n	8005a10 <HAL_GPIO_Init+0x4c>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d007      	beq.n	8005a10 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a04:	2b11      	cmp	r3, #17
 8005a06:	d003      	beq.n	8005a10 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b12      	cmp	r3, #18
 8005a0e:	d130      	bne.n	8005a72 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	43db      	mvns	r3, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4013      	ands	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a46:	2201      	movs	r2, #1
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	091b      	lsrs	r3, r3, #4
 8005a5c:	f003 0201 	and.w	r2, r3, #1
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	43db      	mvns	r3, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4013      	ands	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d003      	beq.n	8005ab2 <HAL_GPIO_Init+0xee>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b12      	cmp	r3, #18
 8005ab0:	d123      	bne.n	8005afa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	08da      	lsrs	r2, r3, #3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3208      	adds	r2, #8
 8005aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	220f      	movs	r2, #15
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	08da      	lsrs	r2, r3, #3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3208      	adds	r2, #8
 8005af4:	69b9      	ldr	r1, [r7, #24]
 8005af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	2203      	movs	r2, #3
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 0203 	and.w	r2, r3, #3
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80e0 	beq.w	8005cfc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b3c:	4b2f      	ldr	r3, [pc, #188]	; (8005bfc <HAL_GPIO_Init+0x238>)
 8005b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b42:	4a2e      	ldr	r2, [pc, #184]	; (8005bfc <HAL_GPIO_Init+0x238>)
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b4c:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <HAL_GPIO_Init+0x238>)
 8005b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b5a:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <HAL_GPIO_Init+0x23c>)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	089b      	lsrs	r3, r3, #2
 8005b60:	3302      	adds	r3, #2
 8005b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	220f      	movs	r2, #15
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a20      	ldr	r2, [pc, #128]	; (8005c04 <HAL_GPIO_Init+0x240>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d052      	beq.n	8005c2c <HAL_GPIO_Init+0x268>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <HAL_GPIO_Init+0x244>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d031      	beq.n	8005bf2 <HAL_GPIO_Init+0x22e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1e      	ldr	r2, [pc, #120]	; (8005c0c <HAL_GPIO_Init+0x248>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d02b      	beq.n	8005bee <HAL_GPIO_Init+0x22a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1d      	ldr	r2, [pc, #116]	; (8005c10 <HAL_GPIO_Init+0x24c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d025      	beq.n	8005bea <HAL_GPIO_Init+0x226>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <HAL_GPIO_Init+0x250>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <HAL_GPIO_Init+0x222>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <HAL_GPIO_Init+0x254>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d019      	beq.n	8005be2 <HAL_GPIO_Init+0x21e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1a      	ldr	r2, [pc, #104]	; (8005c1c <HAL_GPIO_Init+0x258>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_GPIO_Init+0x21a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <HAL_GPIO_Init+0x25c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00d      	beq.n	8005bda <HAL_GPIO_Init+0x216>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a18      	ldr	r2, [pc, #96]	; (8005c24 <HAL_GPIO_Init+0x260>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <HAL_GPIO_Init+0x212>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <HAL_GPIO_Init+0x264>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_GPIO_Init+0x20e>
 8005bce:	2309      	movs	r3, #9
 8005bd0:	e02d      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bd2:	230a      	movs	r3, #10
 8005bd4:	e02b      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	e029      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bda:	2307      	movs	r3, #7
 8005bdc:	e027      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bde:	2306      	movs	r3, #6
 8005be0:	e025      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005be2:	2305      	movs	r3, #5
 8005be4:	e023      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005be6:	2304      	movs	r3, #4
 8005be8:	e021      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bea:	2303      	movs	r3, #3
 8005bec:	e01f      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e01d      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e01b      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bf6:	bf00      	nop
 8005bf8:	58000080 	.word	0x58000080
 8005bfc:	58024400 	.word	0x58024400
 8005c00:	58000400 	.word	0x58000400
 8005c04:	58020000 	.word	0x58020000
 8005c08:	58020400 	.word	0x58020400
 8005c0c:	58020800 	.word	0x58020800
 8005c10:	58020c00 	.word	0x58020c00
 8005c14:	58021000 	.word	0x58021000
 8005c18:	58021400 	.word	0x58021400
 8005c1c:	58021800 	.word	0x58021800
 8005c20:	58021c00 	.word	0x58021c00
 8005c24:	58022000 	.word	0x58022000
 8005c28:	58022400 	.word	0x58022400
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	f002 0203 	and.w	r2, r2, #3
 8005c34:	0092      	lsls	r2, r2, #2
 8005c36:	4093      	lsls	r3, r2
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c3e:	4938      	ldr	r1, [pc, #224]	; (8005d20 <HAL_GPIO_Init+0x35c>)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	089b      	lsrs	r3, r3, #2
 8005c44:	3302      	adds	r3, #2
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4013      	ands	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f47f ae63 	bne.w	80059d8 <HAL_GPIO_Init+0x14>
  }
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	3724      	adds	r7, #36	; 0x24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	58000400 	.word	0x58000400

08005d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	807b      	strh	r3, [r7, #2]
 8005d30:	4613      	mov	r3, r2
 8005d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d34:	787b      	ldrb	r3, [r7, #1]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d3a:	887a      	ldrh	r2, [r7, #2]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d40:	e003      	b.n	8005d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d42:	887b      	ldrh	r3, [r7, #2]
 8005d44:	041a      	lsls	r2, r3, #16
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	619a      	str	r2, [r3, #24]
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005d60:	4a08      	ldr	r2, [pc, #32]	; (8005d84 <HAL_HSEM_FastTake+0x2c>)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3320      	adds	r3, #32
 8005d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6a:	4a07      	ldr	r2, [pc, #28]	; (8005d88 <HAL_HSEM_FastTake+0x30>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d101      	bne.n	8005d74 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e000      	b.n	8005d76 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	58026400 	.word	0x58026400
 8005d88:	80000300 	.word	0x80000300

08005d8c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005d96:	4906      	ldr	r1, [pc, #24]	; (8005db0 <HAL_HSEM_Release+0x24>)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	58026400 	.word	0x58026400

08005db4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db6:	b08f      	sub	sp, #60	; 0x3c
 8005db8:	af0a      	add	r7, sp, #40	; 0x28
 8005dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e116      	b.n	8005ff4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d106      	bne.n	8005de6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7fc f849 	bl	8001e78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2203      	movs	r2, #3
 8005dea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f006 ffaf 	bl	800cd68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	687e      	ldr	r6, [r7, #4]
 8005e12:	466d      	mov	r5, sp
 8005e14:	f106 0410 	add.w	r4, r6, #16
 8005e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e24:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e28:	1d33      	adds	r3, r6, #4
 8005e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e2c:	6838      	ldr	r0, [r7, #0]
 8005e2e:	f006 ff2d 	bl	800cc8c <USB_CoreInit>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e0d7      	b.n	8005ff4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f006 ff9d 	bl	800cd8a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e50:	2300      	movs	r3, #0
 8005e52:	73fb      	strb	r3, [r7, #15]
 8005e54:	e04a      	b.n	8005eec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e56:	7bfa      	ldrb	r2, [r7, #15]
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	333d      	adds	r3, #61	; 0x3d
 8005e66:	2201      	movs	r2, #1
 8005e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e6a:	7bfa      	ldrb	r2, [r7, #15]
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	333c      	adds	r3, #60	; 0x3c
 8005e7a:	7bfa      	ldrb	r2, [r7, #15]
 8005e7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e7e:	7bfa      	ldrb	r2, [r7, #15]
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	b298      	uxth	r0, r3
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	3342      	adds	r3, #66	; 0x42
 8005e92:	4602      	mov	r2, r0
 8005e94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e96:	7bfa      	ldrb	r2, [r7, #15]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	333f      	adds	r3, #63	; 0x3f
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005eaa:	7bfa      	ldrb	r2, [r7, #15]
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	3344      	adds	r3, #68	; 0x44
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ebe:	7bfa      	ldrb	r2, [r7, #15]
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	3348      	adds	r3, #72	; 0x48
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ed2:	7bfa      	ldrb	r2, [r7, #15]
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	3350      	adds	r3, #80	; 0x50
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
 8005eec:	7bfa      	ldrb	r2, [r7, #15]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d3af      	bcc.n	8005e56 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	73fb      	strb	r3, [r7, #15]
 8005efa:	e044      	b.n	8005f86 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005efc:	7bfa      	ldrb	r2, [r7, #15]
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4613      	mov	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f12:	7bfa      	ldrb	r2, [r7, #15]
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005f24:	7bfa      	ldrb	r2, [r7, #15]
 8005f26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f3e:	7bfa      	ldrb	r2, [r7, #15]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f54:	7bfa      	ldrb	r2, [r7, #15]
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	3301      	adds	r3, #1
 8005f84:	73fb      	strb	r3, [r7, #15]
 8005f86:	7bfa      	ldrb	r2, [r7, #15]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d3b5      	bcc.n	8005efc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	687e      	ldr	r6, [r7, #4]
 8005f98:	466d      	mov	r5, sp
 8005f9a:	f106 0410 	add.w	r4, r6, #16
 8005f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005faa:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fae:	1d33      	adds	r3, r6, #4
 8005fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fb2:	6838      	ldr	r0, [r7, #0]
 8005fb4:	f006 ff14 	bl	800cde0 <USB_DevInit>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e014      	b.n	8005ff4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d102      	bne.n	8005fe8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f80a 	bl	8005ffc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f007 f8b6 	bl	800d15e <USB_DevDisconnect>

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ffc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_PCDEx_ActivateLPM+0x44>)
 800602c:	4313      	orrs	r3, r2
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	10000003 	.word	0x10000003

08006044 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800604c:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	2b06      	cmp	r3, #6
 8006056:	d00a      	beq.n	800606e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006058:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	429a      	cmp	r2, r3
 8006064:	d001      	beq.n	800606a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e040      	b.n	80060ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e03e      	b.n	80060ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800606e:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006076:	491f      	ldr	r1, [pc, #124]	; (80060f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4313      	orrs	r3, r2
 800607c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800607e:	f7fc f8d1 	bl	8002224 <HAL_GetTick>
 8006082:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006084:	e009      	b.n	800609a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006086:	f7fc f8cd 	bl	8002224 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006094:	d901      	bls.n	800609a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e028      	b.n	80060ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800609a:	4b16      	ldr	r3, [pc, #88]	; (80060f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a6:	d1ee      	bne.n	8006086 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b1e      	cmp	r3, #30
 80060ac:	d008      	beq.n	80060c0 <HAL_PWREx_ConfigSupply+0x7c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b2e      	cmp	r3, #46	; 0x2e
 80060b2:	d005      	beq.n	80060c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b1d      	cmp	r3, #29
 80060b8:	d002      	beq.n	80060c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b2d      	cmp	r3, #45	; 0x2d
 80060be:	d114      	bne.n	80060ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80060c0:	f7fc f8b0 	bl	8002224 <HAL_GetTick>
 80060c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80060c6:	e009      	b.n	80060dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80060c8:	f7fc f8ac 	bl	8002224 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060d6:	d901      	bls.n	80060dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e007      	b.n	80060ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e8:	d1ee      	bne.n	80060c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	58024800 	.word	0x58024800

080060f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	4a04      	ldr	r2, [pc, #16]	; (8006114 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006106:	60d3      	str	r3, [r2, #12]
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	58024800 	.word	0x58024800

08006118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08c      	sub	sp, #48	; 0x30
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e3ff      	b.n	800692a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 8087 	beq.w	8006246 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006138:	4b99      	ldr	r3, [pc, #612]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006142:	4b97      	ldr	r3, [pc, #604]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	2b10      	cmp	r3, #16
 800614c:	d007      	beq.n	800615e <HAL_RCC_OscConfig+0x46>
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	2b18      	cmp	r3, #24
 8006152:	d110      	bne.n	8006176 <HAL_RCC_OscConfig+0x5e>
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d10b      	bne.n	8006176 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800615e:	4b90      	ldr	r3, [pc, #576]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d06c      	beq.n	8006244 <HAL_RCC_OscConfig+0x12c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d168      	bne.n	8006244 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e3d9      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617e:	d106      	bne.n	800618e <HAL_RCC_OscConfig+0x76>
 8006180:	4b87      	ldr	r3, [pc, #540]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a86      	ldr	r2, [pc, #536]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e02e      	b.n	80061ec <HAL_RCC_OscConfig+0xd4>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10c      	bne.n	80061b0 <HAL_RCC_OscConfig+0x98>
 8006196:	4b82      	ldr	r3, [pc, #520]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a81      	ldr	r2, [pc, #516]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800619c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	4b7f      	ldr	r3, [pc, #508]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a7e      	ldr	r2, [pc, #504]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	e01d      	b.n	80061ec <HAL_RCC_OscConfig+0xd4>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061b8:	d10c      	bne.n	80061d4 <HAL_RCC_OscConfig+0xbc>
 80061ba:	4b79      	ldr	r3, [pc, #484]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a78      	ldr	r2, [pc, #480]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	4b76      	ldr	r3, [pc, #472]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a75      	ldr	r2, [pc, #468]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	e00b      	b.n	80061ec <HAL_RCC_OscConfig+0xd4>
 80061d4:	4b72      	ldr	r3, [pc, #456]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a71      	ldr	r2, [pc, #452]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	4b6f      	ldr	r3, [pc, #444]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a6e      	ldr	r2, [pc, #440]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d013      	beq.n	800621c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f4:	f7fc f816 	bl	8002224 <HAL_GetTick>
 80061f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061fc:	f7fc f812 	bl	8002224 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b64      	cmp	r3, #100	; 0x64
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e38d      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800620e:	4b64      	ldr	r3, [pc, #400]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0xe4>
 800621a:	e014      	b.n	8006246 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621c:	f7fc f802 	bl	8002224 <HAL_GetTick>
 8006220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006224:	f7fb fffe 	bl	8002224 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b64      	cmp	r3, #100	; 0x64
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e379      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006236:	4b5a      	ldr	r3, [pc, #360]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0x10c>
 8006242:	e000      	b.n	8006246 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 80ae 	beq.w	80063b0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006254:	4b52      	ldr	r3, [pc, #328]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800625c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800625e:	4b50      	ldr	r3, [pc, #320]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d007      	beq.n	800627a <HAL_RCC_OscConfig+0x162>
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	2b18      	cmp	r3, #24
 800626e:	d13a      	bne.n	80062e6 <HAL_RCC_OscConfig+0x1ce>
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d135      	bne.n	80062e6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800627a:	4b49      	ldr	r3, [pc, #292]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <HAL_RCC_OscConfig+0x17a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e34b      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006292:	f7fb fff7 	bl	8002284 <HAL_GetREVID>
 8006296:	4603      	mov	r3, r0
 8006298:	f241 0203 	movw	r2, #4099	; 0x1003
 800629c:	4293      	cmp	r3, r2
 800629e:	d817      	bhi.n	80062d0 <HAL_RCC_OscConfig+0x1b8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	d108      	bne.n	80062ba <HAL_RCC_OscConfig+0x1a2>
 80062a8:	4b3d      	ldr	r3, [pc, #244]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80062b0:	4a3b      	ldr	r2, [pc, #236]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062b8:	e07a      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ba:	4b39      	ldr	r3, [pc, #228]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	031b      	lsls	r3, r3, #12
 80062c8:	4935      	ldr	r1, [pc, #212]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ce:	e06f      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d0:	4b33      	ldr	r3, [pc, #204]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	061b      	lsls	r3, r3, #24
 80062de:	4930      	ldr	r1, [pc, #192]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062e4:	e064      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d045      	beq.n	800637a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062ee:	4b2c      	ldr	r3, [pc, #176]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f023 0219 	bic.w	r2, r3, #25
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	4929      	ldr	r1, [pc, #164]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7fb ff90 	bl	8002224 <HAL_GetTick>
 8006304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006308:	f7fb ff8c 	bl	8002224 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e307      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800631a:	4b21      	ldr	r3, [pc, #132]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f0      	beq.n	8006308 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006326:	f7fb ffad 	bl	8002284 <HAL_GetREVID>
 800632a:	4603      	mov	r3, r0
 800632c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006330:	4293      	cmp	r3, r2
 8006332:	d817      	bhi.n	8006364 <HAL_RCC_OscConfig+0x24c>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d108      	bne.n	800634e <HAL_RCC_OscConfig+0x236>
 800633c:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006344:	4a16      	ldr	r2, [pc, #88]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800634a:	6053      	str	r3, [r2, #4]
 800634c:	e030      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
 800634e:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	031b      	lsls	r3, r3, #12
 800635c:	4910      	ldr	r1, [pc, #64]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800635e:	4313      	orrs	r3, r2
 8006360:	604b      	str	r3, [r1, #4]
 8006362:	e025      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
 8006364:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	061b      	lsls	r3, r3, #24
 8006372:	490b      	ldr	r1, [pc, #44]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
 8006378:	e01a      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a08      	ldr	r2, [pc, #32]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006386:	f7fb ff4d 	bl	8002224 <HAL_GetTick>
 800638a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800638c:	e00a      	b.n	80063a4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800638e:	f7fb ff49 	bl	8002224 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d903      	bls.n	80063a4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e2c4      	b.n	800692a <HAL_RCC_OscConfig+0x812>
 80063a0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063a4:	4ba4      	ldr	r3, [pc, #656]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ee      	bne.n	800638e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80a9 	beq.w	8006510 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063be:	4b9e      	ldr	r3, [pc, #632]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063c8:	4b9b      	ldr	r3, [pc, #620]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d007      	beq.n	80063e4 <HAL_RCC_OscConfig+0x2cc>
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	2b18      	cmp	r3, #24
 80063d8:	d13a      	bne.n	8006450 <HAL_RCC_OscConfig+0x338>
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d135      	bne.n	8006450 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063e4:	4b94      	ldr	r3, [pc, #592]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <HAL_RCC_OscConfig+0x2e4>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d001      	beq.n	80063fc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e296      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063fc:	f7fb ff42 	bl	8002284 <HAL_GetREVID>
 8006400:	4603      	mov	r3, r0
 8006402:	f241 0203 	movw	r2, #4099	; 0x1003
 8006406:	4293      	cmp	r3, r2
 8006408:	d817      	bhi.n	800643a <HAL_RCC_OscConfig+0x322>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	2b20      	cmp	r3, #32
 8006410:	d108      	bne.n	8006424 <HAL_RCC_OscConfig+0x30c>
 8006412:	4b89      	ldr	r3, [pc, #548]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800641a:	4a87      	ldr	r2, [pc, #540]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800641c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006420:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006422:	e075      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006424:	4b84      	ldr	r3, [pc, #528]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	069b      	lsls	r3, r3, #26
 8006432:	4981      	ldr	r1, [pc, #516]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006434:	4313      	orrs	r3, r2
 8006436:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006438:	e06a      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800643a:	4b7f      	ldr	r3, [pc, #508]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	061b      	lsls	r3, r3, #24
 8006448:	497b      	ldr	r1, [pc, #492]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800644a:	4313      	orrs	r3, r2
 800644c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800644e:	e05f      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d042      	beq.n	80064de <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006458:	4b77      	ldr	r3, [pc, #476]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a76      	ldr	r2, [pc, #472]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800645e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006464:	f7fb fede 	bl	8002224 <HAL_GetTick>
 8006468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800646c:	f7fb feda 	bl	8002224 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e255      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800647e:	4b6e      	ldr	r3, [pc, #440]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0f0      	beq.n	800646c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800648a:	f7fb fefb 	bl	8002284 <HAL_GetREVID>
 800648e:	4603      	mov	r3, r0
 8006490:	f241 0203 	movw	r2, #4099	; 0x1003
 8006494:	4293      	cmp	r3, r2
 8006496:	d817      	bhi.n	80064c8 <HAL_RCC_OscConfig+0x3b0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	2b20      	cmp	r3, #32
 800649e:	d108      	bne.n	80064b2 <HAL_RCC_OscConfig+0x39a>
 80064a0:	4b65      	ldr	r3, [pc, #404]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80064a8:	4a63      	ldr	r2, [pc, #396]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ae:	6053      	str	r3, [r2, #4]
 80064b0:	e02e      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
 80064b2:	4b61      	ldr	r3, [pc, #388]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	069b      	lsls	r3, r3, #26
 80064c0:	495d      	ldr	r1, [pc, #372]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	604b      	str	r3, [r1, #4]
 80064c6:	e023      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
 80064c8:	4b5b      	ldr	r3, [pc, #364]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	061b      	lsls	r3, r3, #24
 80064d6:	4958      	ldr	r1, [pc, #352]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	60cb      	str	r3, [r1, #12]
 80064dc:	e018      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064de:	4b56      	ldr	r3, [pc, #344]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a55      	ldr	r2, [pc, #340]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fb fe9b 	bl	8002224 <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80064f2:	f7fb fe97 	bl	8002224 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e212      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006504:	4b4c      	ldr	r3, [pc, #304]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f0      	bne.n	80064f2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d036      	beq.n	800658a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d019      	beq.n	8006558 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006524:	4b44      	ldr	r3, [pc, #272]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006528:	4a43      	ldr	r2, [pc, #268]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006530:	f7fb fe78 	bl	8002224 <HAL_GetTick>
 8006534:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006538:	f7fb fe74 	bl	8002224 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e1ef      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800654a:	4b3b      	ldr	r3, [pc, #236]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800654c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCC_OscConfig+0x420>
 8006556:	e018      	b.n	800658a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006558:	4b37      	ldr	r3, [pc, #220]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800655a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655c:	4a36      	ldr	r2, [pc, #216]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800655e:	f023 0301 	bic.w	r3, r3, #1
 8006562:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006564:	f7fb fe5e 	bl	8002224 <HAL_GetTick>
 8006568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800656c:	f7fb fe5a 	bl	8002224 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e1d5      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800657e:	4b2e      	ldr	r3, [pc, #184]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1f0      	bne.n	800656c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d036      	beq.n	8006604 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d019      	beq.n	80065d2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800659e:	4b26      	ldr	r3, [pc, #152]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a25      	ldr	r2, [pc, #148]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065aa:	f7fb fe3b 	bl	8002224 <HAL_GetTick>
 80065ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065b2:	f7fb fe37 	bl	8002224 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e1b2      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065c4:	4b1c      	ldr	r3, [pc, #112]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x49a>
 80065d0:	e018      	b.n	8006604 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065d2:	4b19      	ldr	r3, [pc, #100]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a18      	ldr	r2, [pc, #96]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065de:	f7fb fe21 	bl	8002224 <HAL_GetTick>
 80065e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065e6:	f7fb fe1d 	bl	8002224 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e198      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065f8:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f0      	bne.n	80065e6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 8085 	beq.w	800671c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <HAL_RCC_OscConfig+0x524>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a09      	ldr	r2, [pc, #36]	; (800663c <HAL_RCC_OscConfig+0x524>)
 8006618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800661c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800661e:	f7fb fe01 	bl	8002224 <HAL_GetTick>
 8006622:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006624:	e00c      	b.n	8006640 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006626:	f7fb fdfd 	bl	8002224 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b64      	cmp	r3, #100	; 0x64
 8006632:	d905      	bls.n	8006640 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e178      	b.n	800692a <HAL_RCC_OscConfig+0x812>
 8006638:	58024400 	.word	0x58024400
 800663c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006640:	4b96      	ldr	r3, [pc, #600]	; (800689c <HAL_RCC_OscConfig+0x784>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0ec      	beq.n	8006626 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d106      	bne.n	8006662 <HAL_RCC_OscConfig+0x54a>
 8006654:	4b92      	ldr	r3, [pc, #584]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	4a91      	ldr	r2, [pc, #580]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6713      	str	r3, [r2, #112]	; 0x70
 8006660:	e02d      	b.n	80066be <HAL_RCC_OscConfig+0x5a6>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10c      	bne.n	8006684 <HAL_RCC_OscConfig+0x56c>
 800666a:	4b8d      	ldr	r3, [pc, #564]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	4a8c      	ldr	r2, [pc, #560]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	6713      	str	r3, [r2, #112]	; 0x70
 8006676:	4b8a      	ldr	r3, [pc, #552]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	4a89      	ldr	r2, [pc, #548]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800667c:	f023 0304 	bic.w	r3, r3, #4
 8006680:	6713      	str	r3, [r2, #112]	; 0x70
 8006682:	e01c      	b.n	80066be <HAL_RCC_OscConfig+0x5a6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b05      	cmp	r3, #5
 800668a:	d10c      	bne.n	80066a6 <HAL_RCC_OscConfig+0x58e>
 800668c:	4b84      	ldr	r3, [pc, #528]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	4a83      	ldr	r2, [pc, #524]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006692:	f043 0304 	orr.w	r3, r3, #4
 8006696:	6713      	str	r3, [r2, #112]	; 0x70
 8006698:	4b81      	ldr	r3, [pc, #516]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	4a80      	ldr	r2, [pc, #512]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	6713      	str	r3, [r2, #112]	; 0x70
 80066a4:	e00b      	b.n	80066be <HAL_RCC_OscConfig+0x5a6>
 80066a6:	4b7e      	ldr	r3, [pc, #504]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	4a7d      	ldr	r2, [pc, #500]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	6713      	str	r3, [r2, #112]	; 0x70
 80066b2:	4b7b      	ldr	r3, [pc, #492]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	4a7a      	ldr	r2, [pc, #488]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80066b8:	f023 0304 	bic.w	r3, r3, #4
 80066bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d015      	beq.n	80066f2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c6:	f7fb fdad 	bl	8002224 <HAL_GetTick>
 80066ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066cc:	e00a      	b.n	80066e4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ce:	f7fb fda9 	bl	8002224 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e122      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066e4:	4b6e      	ldr	r3, [pc, #440]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80066e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0ee      	beq.n	80066ce <HAL_RCC_OscConfig+0x5b6>
 80066f0:	e014      	b.n	800671c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f2:	f7fb fd97 	bl	8002224 <HAL_GetTick>
 80066f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fb fd93 	bl	8002224 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e10c      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006710:	4b63      	ldr	r3, [pc, #396]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1ee      	bne.n	80066fa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8101 	beq.w	8006928 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006726:	4b5e      	ldr	r3, [pc, #376]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800672e:	2b18      	cmp	r3, #24
 8006730:	f000 80bc 	beq.w	80068ac <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	2b02      	cmp	r3, #2
 800673a:	f040 8095 	bne.w	8006868 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800673e:	4b58      	ldr	r3, [pc, #352]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a57      	ldr	r2, [pc, #348]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674a:	f7fb fd6b 	bl	8002224 <HAL_GetTick>
 800674e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006752:	f7fb fd67 	bl	8002224 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e0e2      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006764:	4b4e      	ldr	r3, [pc, #312]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1f0      	bne.n	8006752 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006770:	4b4b      	ldr	r3, [pc, #300]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006774:	4b4b      	ldr	r3, [pc, #300]	; (80068a4 <HAL_RCC_OscConfig+0x78c>)
 8006776:	4013      	ands	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006780:	0112      	lsls	r2, r2, #4
 8006782:	430a      	orrs	r2, r1
 8006784:	4946      	ldr	r1, [pc, #280]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006786:	4313      	orrs	r3, r2
 8006788:	628b      	str	r3, [r1, #40]	; 0x28
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	3b01      	subs	r3, #1
 8006790:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006798:	3b01      	subs	r3, #1
 800679a:	025b      	lsls	r3, r3, #9
 800679c:	b29b      	uxth	r3, r3
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	3b01      	subs	r3, #1
 80067a6:	041b      	lsls	r3, r3, #16
 80067a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	3b01      	subs	r3, #1
 80067b4:	061b      	lsls	r3, r3, #24
 80067b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067ba:	4939      	ldr	r1, [pc, #228]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80067c0:	4b37      	ldr	r3, [pc, #220]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	4a36      	ldr	r2, [pc, #216]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067cc:	4b34      	ldr	r3, [pc, #208]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d0:	4b35      	ldr	r3, [pc, #212]	; (80068a8 <HAL_RCC_OscConfig+0x790>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067d8:	00d2      	lsls	r2, r2, #3
 80067da:	4931      	ldr	r1, [pc, #196]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067e0:	4b2f      	ldr	r3, [pc, #188]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	f023 020c 	bic.w	r2, r3, #12
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	492c      	ldr	r1, [pc, #176]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067f2:	4b2b      	ldr	r3, [pc, #172]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	f023 0202 	bic.w	r2, r3, #2
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	4928      	ldr	r1, [pc, #160]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006800:	4313      	orrs	r3, r2
 8006802:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006804:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	4a25      	ldr	r2, [pc, #148]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800680a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006810:	4b23      	ldr	r3, [pc, #140]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800681c:	4b20      	ldr	r3, [pc, #128]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006828:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	4a1c      	ldr	r2, [pc, #112]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006834:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a19      	ldr	r2, [pc, #100]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800683a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800683e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fb fcf0 	bl	8002224 <HAL_GetTick>
 8006844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006848:	f7fb fcec 	bl	8002224 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e067      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <HAL_RCC_OscConfig+0x730>
 8006866:	e05f      	b.n	8006928 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006868:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a0c      	ldr	r2, [pc, #48]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800686e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006874:	f7fb fcd6 	bl	8002224 <HAL_GetTick>
 8006878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800687c:	f7fb fcd2 	bl	8002224 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e04d      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800688e:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x764>
 800689a:	e045      	b.n	8006928 <HAL_RCC_OscConfig+0x810>
 800689c:	58024800 	.word	0x58024800
 80068a0:	58024400 	.word	0x58024400
 80068a4:	fffffc0c 	.word	0xfffffc0c
 80068a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068ac:	4b21      	ldr	r3, [pc, #132]	; (8006934 <HAL_RCC_OscConfig+0x81c>)
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <HAL_RCC_OscConfig+0x81c>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d031      	beq.n	8006924 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f003 0203 	and.w	r2, r3, #3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d12a      	bne.n	8006924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068da:	429a      	cmp	r2, r3
 80068dc:	d122      	bne.n	8006924 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d11a      	bne.n	8006924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	0a5b      	lsrs	r3, r3, #9
 80068f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d111      	bne.n	8006924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	0c1b      	lsrs	r3, r3, #16
 8006904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800690e:	429a      	cmp	r2, r3
 8006910:	d108      	bne.n	8006924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	0e1b      	lsrs	r3, r3, #24
 8006916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006920:	429a      	cmp	r2, r3
 8006922:	d001      	beq.n	8006928 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3730      	adds	r7, #48	; 0x30
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	58024400 	.word	0x58024400

08006938 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e19c      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800694c:	4b8a      	ldr	r3, [pc, #552]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d910      	bls.n	800697c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695a:	4b87      	ldr	r3, [pc, #540]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 020f 	bic.w	r2, r3, #15
 8006962:	4985      	ldr	r1, [pc, #532]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	4313      	orrs	r3, r2
 8006968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800696a:	4b83      	ldr	r3, [pc, #524]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	429a      	cmp	r2, r3
 8006976:	d001      	beq.n	800697c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e184      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d010      	beq.n	80069aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	4b7b      	ldr	r3, [pc, #492]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006994:	429a      	cmp	r2, r3
 8006996:	d908      	bls.n	80069aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006998:	4b78      	ldr	r3, [pc, #480]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	4975      	ldr	r1, [pc, #468]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695a      	ldr	r2, [r3, #20]
 80069ba:	4b70      	ldr	r3, [pc, #448]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d908      	bls.n	80069d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069c6:	4b6d      	ldr	r3, [pc, #436]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	496a      	ldr	r1, [pc, #424]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d010      	beq.n	8006a06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699a      	ldr	r2, [r3, #24]
 80069e8:	4b64      	ldr	r3, [pc, #400]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d908      	bls.n	8006a06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069f4:	4b61      	ldr	r3, [pc, #388]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	495e      	ldr	r1, [pc, #376]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d010      	beq.n	8006a34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	69da      	ldr	r2, [r3, #28]
 8006a16:	4b59      	ldr	r3, [pc, #356]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d908      	bls.n	8006a34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a22:	4b56      	ldr	r3, [pc, #344]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	4953      	ldr	r1, [pc, #332]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d010      	beq.n	8006a62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	4b4d      	ldr	r3, [pc, #308]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d908      	bls.n	8006a62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a50:	4b4a      	ldr	r3, [pc, #296]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f023 020f 	bic.w	r2, r3, #15
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4947      	ldr	r1, [pc, #284]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d055      	beq.n	8006b1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a6e:	4b43      	ldr	r3, [pc, #268]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	4940      	ldr	r1, [pc, #256]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d107      	bne.n	8006a98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a88:	4b3c      	ldr	r3, [pc, #240]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d121      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0f6      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d107      	bne.n	8006ab0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aa0:	4b36      	ldr	r3, [pc, #216]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d115      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0ea      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d107      	bne.n	8006ac8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ab8:	4b30      	ldr	r3, [pc, #192]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0de      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac8:	4b2c      	ldr	r3, [pc, #176]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0d6      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ad8:	4b28      	ldr	r3, [pc, #160]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f023 0207 	bic.w	r2, r3, #7
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4925      	ldr	r1, [pc, #148]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aea:	f7fb fb9b 	bl	8002224 <HAL_GetTick>
 8006aee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af0:	e00a      	b.n	8006b08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af2:	f7fb fb97 	bl	8002224 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e0be      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b08:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d1eb      	bne.n	8006af2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d010      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d208      	bcs.n	8006b48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f023 020f 	bic.w	r2, r3, #15
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	490e      	ldr	r1, [pc, #56]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b48:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d214      	bcs.n	8006b80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f023 020f 	bic.w	r2, r3, #15
 8006b5e:	4906      	ldr	r1, [pc, #24]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b66:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 030f 	and.w	r3, r3, #15
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d005      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e086      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
 8006b78:	52002000 	.word	0x52002000
 8006b7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d010      	beq.n	8006bae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	4b3f      	ldr	r3, [pc, #252]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d208      	bcs.n	8006bae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b9c:	4b3c      	ldr	r3, [pc, #240]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	4939      	ldr	r1, [pc, #228]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d010      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	4b34      	ldr	r3, [pc, #208]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d208      	bcs.n	8006bdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bca:	4b31      	ldr	r3, [pc, #196]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	492e      	ldr	r1, [pc, #184]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d010      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	699a      	ldr	r2, [r3, #24]
 8006bec:	4b28      	ldr	r3, [pc, #160]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d208      	bcs.n	8006c0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bf8:	4b25      	ldr	r3, [pc, #148]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	4922      	ldr	r1, [pc, #136]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d010      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69da      	ldr	r2, [r3, #28]
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d208      	bcs.n	8006c38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	4917      	ldr	r1, [pc, #92]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c38:	f000 f834 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	0a1b      	lsrs	r3, r3, #8
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	4912      	ldr	r1, [pc, #72]	; (8006c94 <HAL_RCC_ClockConfig+0x35c>)
 8006c4a:	5ccb      	ldrb	r3, [r1, r3]
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
 8006c54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c56:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	4a0d      	ldr	r2, [pc, #52]	; (8006c94 <HAL_RCC_ClockConfig+0x35c>)
 8006c60:	5cd3      	ldrb	r3, [r2, r3]
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <HAL_RCC_ClockConfig+0x360>)
 8006c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c70:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <HAL_RCC_ClockConfig+0x364>)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <HAL_RCC_ClockConfig+0x368>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fb fa88 	bl	8002190 <HAL_InitTick>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	58024400 	.word	0x58024400
 8006c94:	0800d3c0 	.word	0x0800d3c0
 8006c98:	24000004 	.word	0x24000004
 8006c9c:	24000000 	.word	0x24000000
 8006ca0:	24017154 	.word	0x24017154

08006ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b089      	sub	sp, #36	; 0x24
 8006ca8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006caa:	4bb3      	ldr	r3, [pc, #716]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cb2:	2b18      	cmp	r3, #24
 8006cb4:	f200 8155 	bhi.w	8006f62 <HAL_RCC_GetSysClockFreq+0x2be>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006d25 	.word	0x08006d25
 8006cc4:	08006f63 	.word	0x08006f63
 8006cc8:	08006f63 	.word	0x08006f63
 8006ccc:	08006f63 	.word	0x08006f63
 8006cd0:	08006f63 	.word	0x08006f63
 8006cd4:	08006f63 	.word	0x08006f63
 8006cd8:	08006f63 	.word	0x08006f63
 8006cdc:	08006f63 	.word	0x08006f63
 8006ce0:	08006d4b 	.word	0x08006d4b
 8006ce4:	08006f63 	.word	0x08006f63
 8006ce8:	08006f63 	.word	0x08006f63
 8006cec:	08006f63 	.word	0x08006f63
 8006cf0:	08006f63 	.word	0x08006f63
 8006cf4:	08006f63 	.word	0x08006f63
 8006cf8:	08006f63 	.word	0x08006f63
 8006cfc:	08006f63 	.word	0x08006f63
 8006d00:	08006d51 	.word	0x08006d51
 8006d04:	08006f63 	.word	0x08006f63
 8006d08:	08006f63 	.word	0x08006f63
 8006d0c:	08006f63 	.word	0x08006f63
 8006d10:	08006f63 	.word	0x08006f63
 8006d14:	08006f63 	.word	0x08006f63
 8006d18:	08006f63 	.word	0x08006f63
 8006d1c:	08006f63 	.word	0x08006f63
 8006d20:	08006d57 	.word	0x08006d57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d24:	4b94      	ldr	r3, [pc, #592]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d30:	4b91      	ldr	r3, [pc, #580]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	08db      	lsrs	r3, r3, #3
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	4a90      	ldr	r2, [pc, #576]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006d42:	e111      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d44:	4b8d      	ldr	r3, [pc, #564]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d46:	61bb      	str	r3, [r7, #24]
    break;
 8006d48:	e10e      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006d4a:	4b8d      	ldr	r3, [pc, #564]	; (8006f80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d4c:	61bb      	str	r3, [r7, #24]
    break;
 8006d4e:	e10b      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006d50:	4b8c      	ldr	r3, [pc, #560]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d52:	61bb      	str	r3, [r7, #24]
    break;
 8006d54:	e108      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d56:	4b88      	ldr	r3, [pc, #544]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006d60:	4b85      	ldr	r3, [pc, #532]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d6c:	4b82      	ldr	r3, [pc, #520]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d76:	4b80      	ldr	r3, [pc, #512]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7a:	08db      	lsrs	r3, r3, #3
 8006d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	fb02 f303 	mul.w	r3, r2, r3
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80e1 	beq.w	8006f5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	f000 8083 	beq.w	8006ea8 <HAL_RCC_GetSysClockFreq+0x204>
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	f200 80a1 	bhi.w	8006eec <HAL_RCC_GetSysClockFreq+0x248>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_RCC_GetSysClockFreq+0x114>
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d056      	beq.n	8006e64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006db6:	e099      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db8:	4b6f      	ldr	r3, [pc, #444]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0320 	and.w	r3, r3, #32
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d02d      	beq.n	8006e20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dc4:	4b6c      	ldr	r3, [pc, #432]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	08db      	lsrs	r3, r3, #3
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	4a6b      	ldr	r2, [pc, #428]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dee:	4b62      	ldr	r3, [pc, #392]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006e1e:	e087      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006f8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e32:	4b51      	ldr	r3, [pc, #324]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e62:	e065      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006f90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e76:	4b40      	ldr	r3, [pc, #256]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ea6:	e043      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006f94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eba:	4b2f      	ldr	r3, [pc, #188]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ece:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eea:	e021      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006f90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efe:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006f30:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	0a5b      	lsrs	r3, r3, #9
 8006f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f54:	ee17 3a90 	vmov	r3, s15
 8006f58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006f5a:	e005      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61bb      	str	r3, [r7, #24]
    break;
 8006f60:	e002      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006f62:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f64:	61bb      	str	r3, [r7, #24]
    break;
 8006f66:	bf00      	nop
  }

  return sysclockfreq;
 8006f68:	69bb      	ldr	r3, [r7, #24]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3724      	adds	r7, #36	; 0x24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	58024400 	.word	0x58024400
 8006f7c:	03d09000 	.word	0x03d09000
 8006f80:	003d0900 	.word	0x003d0900
 8006f84:	007a1200 	.word	0x007a1200
 8006f88:	46000000 	.word	0x46000000
 8006f8c:	4c742400 	.word	0x4c742400
 8006f90:	4a742400 	.word	0x4a742400
 8006f94:	4af42400 	.word	0x4af42400

08006f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006f9e:	f7ff fe81 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	4b10      	ldr	r3, [pc, #64]	; (8006fe8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	0a1b      	lsrs	r3, r3, #8
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	490f      	ldr	r1, [pc, #60]	; (8006fec <HAL_RCC_GetHCLKFreq+0x54>)
 8006fb0:	5ccb      	ldrb	r3, [r1, r3]
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	4a09      	ldr	r2, [pc, #36]	; (8006fec <HAL_RCC_GetHCLKFreq+0x54>)
 8006fc6:	5cd3      	ldrb	r3, [r2, r3]
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd2:	4a07      	ldr	r2, [pc, #28]	; (8006ff0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fd6:	4a07      	ldr	r2, [pc, #28]	; (8006ff4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fde:	681b      	ldr	r3, [r3, #0]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	58024400 	.word	0x58024400
 8006fec:	0800d3c0 	.word	0x0800d3c0
 8006ff0:	24000004 	.word	0x24000004
 8006ff4:	24000000 	.word	0x24000000

08006ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ffc:	f7ff ffcc 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 8007000:	4602      	mov	r2, r0
 8007002:	4b06      	ldr	r3, [pc, #24]	; (800701c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	091b      	lsrs	r3, r3, #4
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	4904      	ldr	r1, [pc, #16]	; (8007020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800700e:	5ccb      	ldrb	r3, [r1, r3]
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007018:	4618      	mov	r0, r3
 800701a:	bd80      	pop	{r7, pc}
 800701c:	58024400 	.word	0x58024400
 8007020:	0800d3c0 	.word	0x0800d3c0

08007024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007028:	f7ff ffb6 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 800702c:	4602      	mov	r2, r0
 800702e:	4b06      	ldr	r3, [pc, #24]	; (8007048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	4904      	ldr	r1, [pc, #16]	; (800704c <HAL_RCC_GetPCLK2Freq+0x28>)
 800703a:	5ccb      	ldrb	r3, [r1, r3]
 800703c:	f003 031f 	and.w	r3, r3, #31
 8007040:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007044:	4618      	mov	r0, r3
 8007046:	bd80      	pop	{r7, pc}
 8007048:	58024400 	.word	0x58024400
 800704c:	0800d3c0 	.word	0x0800d3c0

08007050 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007058:	2300      	movs	r3, #0
 800705a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800705c:	2300      	movs	r3, #0
 800705e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d03f      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007070:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007074:	d02a      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007076:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800707a:	d824      	bhi.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800707c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007080:	d018      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007086:	d81e      	bhi.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800708c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007090:	d007      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007092:	e018      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007094:	4bab      	ldr	r3, [pc, #684]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	4aaa      	ldr	r2, [pc, #680]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800709a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800709e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070a0:	e015      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3304      	adds	r3, #4
 80070a6:	2102      	movs	r1, #2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f001 f9cf 	bl	800844c <RCCEx_PLL2_Config>
 80070ae:	4603      	mov	r3, r0
 80070b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070b2:	e00c      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3324      	adds	r3, #36	; 0x24
 80070b8:	2102      	movs	r1, #2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 fa78 	bl	80085b0 <RCCEx_PLL3_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070c4:	e003      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	75fb      	strb	r3, [r7, #23]
      break;
 80070ca:	e000      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80070cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d109      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80070d4:	4b9b      	ldr	r3, [pc, #620]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e0:	4998      	ldr	r1, [pc, #608]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	650b      	str	r3, [r1, #80]	; 0x50
 80070e6:	e001      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d03d      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d826      	bhi.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007100:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	0800711d 	.word	0x0800711d
 800710c:	0800712b 	.word	0x0800712b
 8007110:	0800713d 	.word	0x0800713d
 8007114:	08007155 	.word	0x08007155
 8007118:	08007155 	.word	0x08007155
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800711c:	4b89      	ldr	r3, [pc, #548]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	4a88      	ldr	r2, [pc, #544]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007126:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007128:	e015      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3304      	adds	r3, #4
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f001 f98b 	bl	800844c <RCCEx_PLL2_Config>
 8007136:	4603      	mov	r3, r0
 8007138:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800713a:	e00c      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3324      	adds	r3, #36	; 0x24
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f001 fa34 	bl	80085b0 <RCCEx_PLL3_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800714c:	e003      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	75fb      	strb	r3, [r7, #23]
      break;
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d109      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800715c:	4b79      	ldr	r3, [pc, #484]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800715e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007160:	f023 0207 	bic.w	r2, r3, #7
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007168:	4976      	ldr	r1, [pc, #472]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800716a:	4313      	orrs	r3, r2
 800716c:	650b      	str	r3, [r1, #80]	; 0x50
 800716e:	e001      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800717c:	2b00      	cmp	r3, #0
 800717e:	d042      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007188:	d02b      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800718a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800718e:	d825      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007190:	2bc0      	cmp	r3, #192	; 0xc0
 8007192:	d028      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007194:	2bc0      	cmp	r3, #192	; 0xc0
 8007196:	d821      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007198:	2b80      	cmp	r3, #128	; 0x80
 800719a:	d016      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800719c:	2b80      	cmp	r3, #128	; 0x80
 800719e:	d81d      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d007      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80071a8:	e018      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071aa:	4b66      	ldr	r3, [pc, #408]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	4a65      	ldr	r2, [pc, #404]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80071b6:	e017      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 f944 	bl	800844c <RCCEx_PLL2_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80071c8:	e00e      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3324      	adds	r3, #36	; 0x24
 80071ce:	2100      	movs	r1, #0
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 f9ed 	bl	80085b0 <RCCEx_PLL3_Config>
 80071d6:	4603      	mov	r3, r0
 80071d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80071da:	e005      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	75fb      	strb	r3, [r7, #23]
      break;
 80071e0:	e002      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80071e2:	bf00      	nop
 80071e4:	e000      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80071e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80071ee:	4b55      	ldr	r3, [pc, #340]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fa:	4952      	ldr	r1, [pc, #328]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	650b      	str	r3, [r1, #80]	; 0x50
 8007200:	e001      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800720e:	2b00      	cmp	r3, #0
 8007210:	d049      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007218:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800721c:	d030      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800721e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007222:	d82a      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007224:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007228:	d02c      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800722a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800722e:	d824      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007234:	d018      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800723a:	d81e      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007244:	d007      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007246:	e018      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007248:	4b3e      	ldr	r3, [pc, #248]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	4a3d      	ldr	r2, [pc, #244]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800724e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007254:	e017      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3304      	adds	r3, #4
 800725a:	2100      	movs	r1, #0
 800725c:	4618      	mov	r0, r3
 800725e:	f001 f8f5 	bl	800844c <RCCEx_PLL2_Config>
 8007262:	4603      	mov	r3, r0
 8007264:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007266:	e00e      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3324      	adds	r3, #36	; 0x24
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f001 f99e 	bl	80085b0 <RCCEx_PLL3_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007278:	e005      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
      break;
 800727e:	e002      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007280:	bf00      	nop
 8007282:	e000      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800728c:	4b2d      	ldr	r3, [pc, #180]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800728e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007290:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800729a:	492a      	ldr	r1, [pc, #168]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800729c:	4313      	orrs	r3, r2
 800729e:	658b      	str	r3, [r1, #88]	; 0x58
 80072a0:	e001      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d04c      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072bc:	d030      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80072be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072c2:	d82a      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072c8:	d02c      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80072ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072ce:	d824      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072d4:	d018      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80072d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072da:	d81e      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80072e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072e4:	d007      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80072e6:	e018      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e8:	4b16      	ldr	r3, [pc, #88]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	4a15      	ldr	r2, [pc, #84]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072f4:	e017      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3304      	adds	r3, #4
 80072fa:	2100      	movs	r1, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 f8a5 	bl	800844c <RCCEx_PLL2_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007306:	e00e      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	2100      	movs	r1, #0
 800730e:	4618      	mov	r0, r3
 8007310:	f001 f94e 	bl	80085b0 <RCCEx_PLL3_Config>
 8007314:	4603      	mov	r3, r0
 8007316:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007318:	e005      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	75fb      	strb	r3, [r7, #23]
      break;
 800731e:	e002      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007320:	bf00      	nop
 8007322:	e000      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800732e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007330:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800733a:	4902      	ldr	r1, [pc, #8]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800733c:	4313      	orrs	r3, r2
 800733e:	658b      	str	r3, [r1, #88]	; 0x58
 8007340:	e004      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007342:	bf00      	nop
 8007344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d032      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735c:	2b30      	cmp	r3, #48	; 0x30
 800735e:	d01c      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007360:	2b30      	cmp	r3, #48	; 0x30
 8007362:	d817      	bhi.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007364:	2b20      	cmp	r3, #32
 8007366:	d00c      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007368:	2b20      	cmp	r3, #32
 800736a:	d813      	bhi.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d016      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007370:	2b10      	cmp	r3, #16
 8007372:	d10f      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007374:	4baf      	ldr	r3, [pc, #700]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	4aae      	ldr	r2, [pc, #696]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800737a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007380:	e00e      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3304      	adds	r3, #4
 8007386:	2102      	movs	r1, #2
 8007388:	4618      	mov	r0, r3
 800738a:	f001 f85f 	bl	800844c <RCCEx_PLL2_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007392:	e005      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	75fb      	strb	r3, [r7, #23]
      break;
 8007398:	e002      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800739e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80073a6:	4ba3      	ldr	r3, [pc, #652]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b2:	49a0      	ldr	r1, [pc, #640]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073b8:	e001      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d047      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073d2:	d030      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80073d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073d8:	d82a      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80073da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073de:	d02c      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80073e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073e4:	d824      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80073e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ea:	d018      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80073ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f0:	d81e      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fa:	d007      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80073fc:	e018      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fe:	4b8d      	ldr	r3, [pc, #564]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	4a8c      	ldr	r2, [pc, #560]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800740a:	e017      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	2100      	movs	r1, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f001 f81a 	bl	800844c <RCCEx_PLL2_Config>
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800741c:	e00e      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3324      	adds	r3, #36	; 0x24
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f001 f8c3 	bl	80085b0 <RCCEx_PLL3_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800742e:	e005      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
      break;
 8007434:	e002      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800743a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d109      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007442:	4b7c      	ldr	r3, [pc, #496]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007446:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744e:	4979      	ldr	r1, [pc, #484]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007450:	4313      	orrs	r3, r2
 8007452:	650b      	str	r3, [r1, #80]	; 0x50
 8007454:	e001      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d049      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800746e:	d02e      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007474:	d828      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800747a:	d02a      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800747c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007480:	d822      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007482:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007486:	d026      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007488:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800748c:	d81c      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800748e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007492:	d010      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007498:	d816      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d01d      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800749e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a2:	d111      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3304      	adds	r3, #4
 80074a8:	2101      	movs	r1, #1
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 ffce 	bl	800844c <RCCEx_PLL2_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80074b4:	e012      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3324      	adds	r3, #36	; 0x24
 80074ba:	2101      	movs	r1, #1
 80074bc:	4618      	mov	r0, r3
 80074be:	f001 f877 	bl	80085b0 <RCCEx_PLL3_Config>
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80074c6:	e009      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]
      break;
 80074cc:	e006      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074ce:	bf00      	nop
 80074d0:	e004      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074d2:	bf00      	nop
 80074d4:	e002      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074d6:	bf00      	nop
 80074d8:	e000      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074e2:	4b54      	ldr	r3, [pc, #336]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ee:	4951      	ldr	r1, [pc, #324]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	650b      	str	r3, [r1, #80]	; 0x50
 80074f4:	e001      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d04b      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800750c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007510:	d02e      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007516:	d828      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d02a      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800751e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007522:	d822      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007524:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007528:	d026      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800752a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800752e:	d81c      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007534:	d010      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800753a:	d816      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01d      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007544:	d111      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3304      	adds	r3, #4
 800754a:	2101      	movs	r1, #1
 800754c:	4618      	mov	r0, r3
 800754e:	f000 ff7d 	bl	800844c <RCCEx_PLL2_Config>
 8007552:	4603      	mov	r3, r0
 8007554:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007556:	e012      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3324      	adds	r3, #36	; 0x24
 800755c:	2101      	movs	r1, #1
 800755e:	4618      	mov	r0, r3
 8007560:	f001 f826 	bl	80085b0 <RCCEx_PLL3_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007568:	e009      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
      break;
 800756e:	e006      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007570:	bf00      	nop
 8007572:	e004      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007574:	bf00      	nop
 8007576:	e002      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007578:	bf00      	nop
 800757a:	e000      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800757c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007584:	4b2b      	ldr	r3, [pc, #172]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007588:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007592:	4928      	ldr	r1, [pc, #160]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007594:	4313      	orrs	r3, r2
 8007596:	658b      	str	r3, [r1, #88]	; 0x58
 8007598:	e001      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d02f      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075b2:	d00e      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80075b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075b8:	d814      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d015      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80075be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075c2:	d10f      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c4:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80075d0:	e00c      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3304      	adds	r3, #4
 80075d6:	2101      	movs	r1, #1
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 ff37 	bl	800844c <RCCEx_PLL2_Config>
 80075de:	4603      	mov	r3, r0
 80075e0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80075e2:	e003      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]
      break;
 80075e8:	e000      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80075ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075f2:	4b10      	ldr	r3, [pc, #64]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075fe:	490d      	ldr	r1, [pc, #52]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007600:	4313      	orrs	r3, r2
 8007602:	650b      	str	r3, [r1, #80]	; 0x50
 8007604:	e001      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d033      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	2b03      	cmp	r3, #3
 800761c:	d81c      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800761e:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	0800765f 	.word	0x0800765f
 8007628:	08007639 	.word	0x08007639
 800762c:	08007647 	.word	0x08007647
 8007630:	0800765f 	.word	0x0800765f
 8007634:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007638:	4bb8      	ldr	r3, [pc, #736]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	4ab7      	ldr	r2, [pc, #732]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800763e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007642:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007644:	e00c      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3304      	adds	r3, #4
 800764a:	2102      	movs	r1, #2
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fefd 	bl	800844c <RCCEx_PLL2_Config>
 8007652:	4603      	mov	r3, r0
 8007654:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007656:	e003      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	75fb      	strb	r3, [r7, #23]
      break;
 800765c:	e000      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800765e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007666:	4bad      	ldr	r3, [pc, #692]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766a:	f023 0203 	bic.w	r2, r3, #3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007672:	49aa      	ldr	r1, [pc, #680]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007674:	4313      	orrs	r3, r2
 8007676:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007678:	e001      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 8086 	beq.w	8007798 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800768c:	4ba4      	ldr	r3, [pc, #656]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4aa3      	ldr	r2, [pc, #652]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007696:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007698:	f7fa fdc4 	bl	8002224 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800769e:	e009      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076a0:	f7fa fdc0 	bl	8002224 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b64      	cmp	r3, #100	; 0x64
 80076ac:	d902      	bls.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	75fb      	strb	r3, [r7, #23]
        break;
 80076b2:	e005      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076b4:	4b9a      	ldr	r3, [pc, #616]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0ef      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d166      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80076c6:	4b95      	ldr	r3, [pc, #596]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076d0:	4053      	eors	r3, r2
 80076d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d013      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076da:	4b90      	ldr	r3, [pc, #576]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076e4:	4b8d      	ldr	r3, [pc, #564]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e8:	4a8c      	ldr	r2, [pc, #560]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076f0:	4b8a      	ldr	r3, [pc, #552]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f4:	4a89      	ldr	r2, [pc, #548]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80076fc:	4a87      	ldr	r2, [pc, #540]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	d115      	bne.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770e:	f7fa fd89 	bl	8002224 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007714:	e00b      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007716:	f7fa fd85 	bl	8002224 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	f241 3288 	movw	r2, #5000	; 0x1388
 8007724:	4293      	cmp	r3, r2
 8007726:	d902      	bls.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	75fb      	strb	r3, [r7, #23]
            break;
 800772c:	e005      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800772e:	4b7b      	ldr	r3, [pc, #492]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0ed      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d126      	bne.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800774a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800774e:	d10d      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007750:	4b72      	ldr	r3, [pc, #456]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800775e:	0919      	lsrs	r1, r3, #4
 8007760:	4b70      	ldr	r3, [pc, #448]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007762:	400b      	ands	r3, r1
 8007764:	496d      	ldr	r1, [pc, #436]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007766:	4313      	orrs	r3, r2
 8007768:	610b      	str	r3, [r1, #16]
 800776a:	e005      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800776c:	4b6b      	ldr	r3, [pc, #428]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	4a6a      	ldr	r2, [pc, #424]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007772:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007776:	6113      	str	r3, [r2, #16]
 8007778:	4b68      	ldr	r3, [pc, #416]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800777a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007786:	4965      	ldr	r1, [pc, #404]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007788:	4313      	orrs	r3, r2
 800778a:	670b      	str	r3, [r1, #112]	; 0x70
 800778c:	e004      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	75bb      	strb	r3, [r7, #22]
 8007792:	e001      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d07e      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077a8:	2b28      	cmp	r3, #40	; 0x28
 80077aa:	d867      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	08007883 	.word	0x08007883
 80077b8:	0800787d 	.word	0x0800787d
 80077bc:	0800787d 	.word	0x0800787d
 80077c0:	0800787d 	.word	0x0800787d
 80077c4:	0800787d 	.word	0x0800787d
 80077c8:	0800787d 	.word	0x0800787d
 80077cc:	0800787d 	.word	0x0800787d
 80077d0:	0800787d 	.word	0x0800787d
 80077d4:	08007859 	.word	0x08007859
 80077d8:	0800787d 	.word	0x0800787d
 80077dc:	0800787d 	.word	0x0800787d
 80077e0:	0800787d 	.word	0x0800787d
 80077e4:	0800787d 	.word	0x0800787d
 80077e8:	0800787d 	.word	0x0800787d
 80077ec:	0800787d 	.word	0x0800787d
 80077f0:	0800787d 	.word	0x0800787d
 80077f4:	0800786b 	.word	0x0800786b
 80077f8:	0800787d 	.word	0x0800787d
 80077fc:	0800787d 	.word	0x0800787d
 8007800:	0800787d 	.word	0x0800787d
 8007804:	0800787d 	.word	0x0800787d
 8007808:	0800787d 	.word	0x0800787d
 800780c:	0800787d 	.word	0x0800787d
 8007810:	0800787d 	.word	0x0800787d
 8007814:	08007883 	.word	0x08007883
 8007818:	0800787d 	.word	0x0800787d
 800781c:	0800787d 	.word	0x0800787d
 8007820:	0800787d 	.word	0x0800787d
 8007824:	0800787d 	.word	0x0800787d
 8007828:	0800787d 	.word	0x0800787d
 800782c:	0800787d 	.word	0x0800787d
 8007830:	0800787d 	.word	0x0800787d
 8007834:	08007883 	.word	0x08007883
 8007838:	0800787d 	.word	0x0800787d
 800783c:	0800787d 	.word	0x0800787d
 8007840:	0800787d 	.word	0x0800787d
 8007844:	0800787d 	.word	0x0800787d
 8007848:	0800787d 	.word	0x0800787d
 800784c:	0800787d 	.word	0x0800787d
 8007850:	0800787d 	.word	0x0800787d
 8007854:	08007883 	.word	0x08007883
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3304      	adds	r3, #4
 800785c:	2101      	movs	r1, #1
 800785e:	4618      	mov	r0, r3
 8007860:	f000 fdf4 	bl	800844c <RCCEx_PLL2_Config>
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007868:	e00c      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3324      	adds	r3, #36	; 0x24
 800786e:	2101      	movs	r1, #1
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fe9d 	bl	80085b0 <RCCEx_PLL3_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800787a:	e003      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]
      break;
 8007880:	e000      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800788a:	4b24      	ldr	r3, [pc, #144]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800788c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007896:	4921      	ldr	r1, [pc, #132]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007898:	4313      	orrs	r3, r2
 800789a:	654b      	str	r3, [r1, #84]	; 0x54
 800789c:	e001      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d03e      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	d820      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80078b6:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	080078ff 	.word	0x080078ff
 80078c0:	080078d5 	.word	0x080078d5
 80078c4:	080078e7 	.word	0x080078e7
 80078c8:	080078ff 	.word	0x080078ff
 80078cc:	080078ff 	.word	0x080078ff
 80078d0:	080078ff 	.word	0x080078ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3304      	adds	r3, #4
 80078d8:	2101      	movs	r1, #1
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fdb6 	bl	800844c <RCCEx_PLL2_Config>
 80078e0:	4603      	mov	r3, r0
 80078e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80078e4:	e00c      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3324      	adds	r3, #36	; 0x24
 80078ea:	2101      	movs	r1, #1
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fe5f 	bl	80085b0 <RCCEx_PLL3_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80078f6:	e003      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
      break;
 80078fc:	e000      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80078fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d110      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007906:	4b05      	ldr	r3, [pc, #20]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790a:	f023 0207 	bic.w	r2, r3, #7
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007912:	4902      	ldr	r1, [pc, #8]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007914:	4313      	orrs	r3, r2
 8007916:	654b      	str	r3, [r1, #84]	; 0x54
 8007918:	e008      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
 8007920:	58024800 	.word	0x58024800
 8007924:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d039      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793e:	2b05      	cmp	r3, #5
 8007940:	d820      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007942:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	0800798b 	.word	0x0800798b
 800794c:	08007961 	.word	0x08007961
 8007950:	08007973 	.word	0x08007973
 8007954:	0800798b 	.word	0x0800798b
 8007958:	0800798b 	.word	0x0800798b
 800795c:	0800798b 	.word	0x0800798b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3304      	adds	r3, #4
 8007964:	2101      	movs	r1, #1
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fd70 	bl	800844c <RCCEx_PLL2_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007970:	e00c      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3324      	adds	r3, #36	; 0x24
 8007976:	2101      	movs	r1, #1
 8007978:	4618      	mov	r0, r3
 800797a:	f000 fe19 	bl	80085b0 <RCCEx_PLL3_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007982:	e003      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	75fb      	strb	r3, [r7, #23]
      break;
 8007988:	e000      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800798a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007992:	4bb7      	ldr	r3, [pc, #732]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007996:	f023 0207 	bic.w	r2, r3, #7
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a0:	49b3      	ldr	r1, [pc, #716]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	658b      	str	r3, [r1, #88]	; 0x58
 80079a6:	e001      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d04b      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079c2:	d02e      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80079c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079c8:	d828      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ce:	d02a      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80079d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d4:	d822      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079da:	d026      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80079dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079e0:	d81c      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079e6:	d010      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80079e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ec:	d816      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01d      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80079f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079f6:	d111      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3304      	adds	r3, #4
 80079fc:	2100      	movs	r1, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fd24 	bl	800844c <RCCEx_PLL2_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007a08:	e012      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3324      	adds	r3, #36	; 0x24
 8007a0e:	2102      	movs	r1, #2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fdcd 	bl	80085b0 <RCCEx_PLL3_Config>
 8007a16:	4603      	mov	r3, r0
 8007a18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007a1a:	e009      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a20:	e006      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a22:	bf00      	nop
 8007a24:	e004      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a26:	bf00      	nop
 8007a28:	e002      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a2a:	bf00      	nop
 8007a2c:	e000      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a36:	4b8e      	ldr	r3, [pc, #568]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a44:	498a      	ldr	r1, [pc, #552]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	654b      	str	r3, [r1, #84]	; 0x54
 8007a4a:	e001      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
 8007a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d04b      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a66:	d02e      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007a68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a6c:	d828      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a72:	d02a      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a78:	d822      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a7e:	d026      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a84:	d81c      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a8a:	d010      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a90:	d816      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01d      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a9a:	d111      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fcd2 	bl	800844c <RCCEx_PLL2_Config>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007aac:	e012      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3324      	adds	r3, #36	; 0x24
 8007ab2:	2102      	movs	r1, #2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fd7b 	bl	80085b0 <RCCEx_PLL3_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007abe:	e009      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac4:	e006      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e004      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007aca:	bf00      	nop
 8007acc:	e002      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ace:	bf00      	nop
 8007ad0:	e000      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ada:	4b65      	ldr	r3, [pc, #404]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ae8:	4961      	ldr	r1, [pc, #388]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	658b      	str	r3, [r1, #88]	; 0x58
 8007aee:	e001      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d04b      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b0a:	d02e      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007b0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b10:	d828      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b16:	d02a      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b1c:	d822      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b22:	d026      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007b24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b28:	d81c      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b2e:	d010      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b34:	d816      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d01d      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b3e:	d111      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	2100      	movs	r1, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fc80 	bl	800844c <RCCEx_PLL2_Config>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b50:	e012      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3324      	adds	r3, #36	; 0x24
 8007b56:	2102      	movs	r1, #2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fd29 	bl	80085b0 <RCCEx_PLL3_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b62:	e009      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	75fb      	strb	r3, [r7, #23]
      break;
 8007b68:	e006      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e004      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b6e:	bf00      	nop
 8007b70:	e002      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b72:	bf00      	nop
 8007b74:	e000      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b7e:	4b3c      	ldr	r3, [pc, #240]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b8c:	4938      	ldr	r1, [pc, #224]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	658b      	str	r3, [r1, #88]	; 0x58
 8007b92:	e001      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
 8007b96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01a      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bae:	d10a      	bne.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3324      	adds	r3, #36	; 0x24
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fcfa 	bl	80085b0 <RCCEx_PLL3_Config>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007bc6:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bd4:	4926      	ldr	r1, [pc, #152]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0310 	and.w	r3, r3, #16
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01a      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf0:	d10a      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3324      	adds	r3, #36	; 0x24
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fcd9 	bl	80085b0 <RCCEx_PLL3_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c08:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c16:	4916      	ldr	r1, [pc, #88]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d036      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c32:	d01f      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c38:	d817      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c42:	d009      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007c44:	e011      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 fbfd 	bl	800844c <RCCEx_PLL2_Config>
 8007c52:	4603      	mov	r3, r0
 8007c54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c56:	e00e      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3324      	adds	r3, #36	; 0x24
 8007c5c:	2102      	movs	r1, #2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fca6 	bl	80085b0 <RCCEx_PLL3_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c68:	e005      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6e:	e002      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007c70:	58024400 	.word	0x58024400
      break;
 8007c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c7c:	4b93      	ldr	r3, [pc, #588]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c8a:	4990      	ldr	r1, [pc, #576]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	658b      	str	r3, [r1, #88]	; 0x58
 8007c90:	e001      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d033      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cac:	d01c      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007cae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cb2:	d816      	bhi.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb8:	d003      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cbe:	d007      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007cc0:	e00f      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc2:	4b82      	ldr	r3, [pc, #520]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	4a81      	ldr	r2, [pc, #516]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007cce:	e00c      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3324      	adds	r3, #36	; 0x24
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fc6a 	bl	80085b0 <RCCEx_PLL3_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ce0:	e003      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce6:	e000      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cf0:	4b76      	ldr	r3, [pc, #472]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cfe:	4973      	ldr	r1, [pc, #460]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	654b      	str	r3, [r1, #84]	; 0x54
 8007d04:	e001      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
 8007d08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d029      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d22:	d007      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007d24:	e00f      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d26:	4b69      	ldr	r3, [pc, #420]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	4a68      	ldr	r2, [pc, #416]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d32:	e00b      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3304      	adds	r3, #4
 8007d38:	2102      	movs	r1, #2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fb86 	bl	800844c <RCCEx_PLL2_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d44:	e002      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	75fb      	strb	r3, [r7, #23]
      break;
 8007d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d109      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d52:	4b5e      	ldr	r3, [pc, #376]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5e:	495b      	ldr	r1, [pc, #364]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d64:	e001      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3324      	adds	r3, #36	; 0x24
 8007d7a:	2102      	movs	r1, #2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fc17 	bl	80085b0 <RCCEx_PLL3_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d030      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da0:	d017      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da6:	d811      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dac:	d013      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db2:	d80b      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d010      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbc:	d106      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbe:	4b43      	ldr	r3, [pc, #268]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	4a42      	ldr	r2, [pc, #264]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007dca:	e007      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd0:	e004      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e002      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007dd6:	bf00      	nop
 8007dd8:	e000      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007de2:	4b3a      	ldr	r3, [pc, #232]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dee:	4937      	ldr	r1, [pc, #220]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	654b      	str	r3, [r1, #84]	; 0x54
 8007df4:	e001      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e06:	4b31      	ldr	r3, [pc, #196]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e12:	492e      	ldr	r1, [pc, #184]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d009      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e24:	4b29      	ldr	r3, [pc, #164]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007e32:	4926      	ldr	r1, [pc, #152]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e44:	4b21      	ldr	r3, [pc, #132]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e50:	491e      	ldr	r1, [pc, #120]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00d      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e62:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	4a19      	ldr	r2, [pc, #100]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e6c:	6113      	str	r3, [r2, #16]
 8007e6e:	4b17      	ldr	r3, [pc, #92]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e70:	691a      	ldr	r2, [r3, #16]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e78:	4914      	ldr	r1, [pc, #80]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da08      	bge.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e86:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e92:	490e      	ldr	r1, [pc, #56]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d009      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ea4:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb2:	4906      	ldr	r1, [pc, #24]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007eb8:	7dbb      	ldrb	r3, [r7, #22]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e000      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	58024400 	.word	0x58024400

08007ed0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ed4:	f7ff f860 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	091b      	lsrs	r3, r3, #4
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	4904      	ldr	r1, [pc, #16]	; (8007ef8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ee6:	5ccb      	ldrb	r3, [r1, r3]
 8007ee8:	f003 031f 	and.w	r3, r3, #31
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	0800d3c0 	.word	0x0800d3c0

08007efc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b089      	sub	sp, #36	; 0x24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f04:	4ba1      	ldr	r3, [pc, #644]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007f0e:	4b9f      	ldr	r3, [pc, #636]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	0b1b      	lsrs	r3, r3, #12
 8007f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f1a:	4b9c      	ldr	r3, [pc, #624]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	091b      	lsrs	r3, r3, #4
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007f26:	4b99      	ldr	r3, [pc, #612]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	08db      	lsrs	r3, r3, #3
 8007f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	fb02 f303 	mul.w	r3, r2, r3
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8111 	beq.w	800816c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	f000 8083 	beq.w	8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	f200 80a1 	bhi.w	800809c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d056      	beq.n	8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f66:	e099      	b.n	800809c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f68:	4b88      	ldr	r3, [pc, #544]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d02d      	beq.n	8007fd0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f74:	4b85      	ldr	r3, [pc, #532]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	08db      	lsrs	r3, r3, #3
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	4a84      	ldr	r2, [pc, #528]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
 8007f84:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	ee07 3a90 	vmov	s15, r3
 8007f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9e:	4b7b      	ldr	r3, [pc, #492]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fce:	e087      	b.n	80080e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe2:	4b6a      	ldr	r3, [pc, #424]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008012:	e065      	b.n	80080e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008026:	4b59      	ldr	r3, [pc, #356]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802e:	ee07 3a90 	vmov	s15, r3
 8008032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008036:	ed97 6a03 	vldr	s12, [r7, #12]
 800803a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800803e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800804a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008052:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008056:	e043      	b.n	80080e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008062:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806a:	4b48      	ldr	r3, [pc, #288]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807a:	ed97 6a03 	vldr	s12, [r7, #12]
 800807e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008096:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800809a:	e021      	b.n	80080e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ae:	4b37      	ldr	r3, [pc, #220]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080be:	ed97 6a03 	vldr	s12, [r7, #12]
 80080c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80080e0:	4b2a      	ldr	r3, [pc, #168]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	0a5b      	lsrs	r3, r3, #9
 80080e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80080fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008106:	ee17 2a90 	vmov	r2, s15
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800810e:	4b1f      	ldr	r3, [pc, #124]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	0c1b      	lsrs	r3, r3, #16
 8008114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008118:	ee07 3a90 	vmov	s15, r3
 800811c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008124:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008128:	edd7 6a07 	vldr	s13, [r7, #28]
 800812c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008134:	ee17 2a90 	vmov	r2, s15
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800813c:	4b13      	ldr	r3, [pc, #76]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800813e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008140:	0e1b      	lsrs	r3, r3, #24
 8008142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008156:	edd7 6a07 	vldr	s13, [r7, #28]
 800815a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008162:	ee17 2a90 	vmov	r2, s15
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800816a:	e008      	b.n	800817e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	609a      	str	r2, [r3, #8]
}
 800817e:	bf00      	nop
 8008180:	3724      	adds	r7, #36	; 0x24
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	58024400 	.word	0x58024400
 8008190:	03d09000 	.word	0x03d09000
 8008194:	46000000 	.word	0x46000000
 8008198:	4c742400 	.word	0x4c742400
 800819c:	4a742400 	.word	0x4a742400
 80081a0:	4af42400 	.word	0x4af42400

080081a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b089      	sub	sp, #36	; 0x24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081ac:	4ba1      	ldr	r3, [pc, #644]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f003 0303 	and.w	r3, r3, #3
 80081b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80081b6:	4b9f      	ldr	r3, [pc, #636]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	0d1b      	lsrs	r3, r3, #20
 80081bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081c2:	4b9c      	ldr	r3, [pc, #624]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	0a1b      	lsrs	r3, r3, #8
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80081ce:	4b99      	ldr	r3, [pc, #612]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d2:	08db      	lsrs	r3, r3, #3
 80081d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	fb02 f303 	mul.w	r3, r2, r3
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8111 	beq.w	8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	f000 8083 	beq.w	8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	f200 80a1 	bhi.w	8008344 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d056      	beq.n	80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800820e:	e099      	b.n	8008344 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008210:	4b88      	ldr	r3, [pc, #544]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0320 	and.w	r3, r3, #32
 8008218:	2b00      	cmp	r3, #0
 800821a:	d02d      	beq.n	8008278 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800821c:	4b85      	ldr	r3, [pc, #532]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	08db      	lsrs	r3, r3, #3
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	4a84      	ldr	r2, [pc, #528]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008228:	fa22 f303 	lsr.w	r3, r2, r3
 800822c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008246:	4b7b      	ldr	r3, [pc, #492]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008256:	ed97 6a03 	vldr	s12, [r7, #12]
 800825a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800825e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800826a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800826e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008272:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008276:	e087      	b.n	8008388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008282:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828a:	4b6a      	ldr	r3, [pc, #424]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829a:	ed97 6a03 	vldr	s12, [r7, #12]
 800829e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ba:	e065      	b.n	8008388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ce:	4b59      	ldr	r3, [pc, #356]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082de:	ed97 6a03 	vldr	s12, [r7, #12]
 80082e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082fe:	e043      	b.n	8008388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800830e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008312:	4b48      	ldr	r3, [pc, #288]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008322:	ed97 6a03 	vldr	s12, [r7, #12]
 8008326:	eddf 5a45 	vldr	s11, [pc, #276]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800832a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008342:	e021      	b.n	8008388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008356:	4b37      	ldr	r3, [pc, #220]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008366:	ed97 6a03 	vldr	s12, [r7, #12]
 800836a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800836e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800837a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008386:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008388:	4b2a      	ldr	r3, [pc, #168]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	0a5b      	lsrs	r3, r3, #9
 800838e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800839e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ae:	ee17 2a90 	vmov	r2, s15
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80083b6:	4b1f      	ldr	r3, [pc, #124]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	0c1b      	lsrs	r3, r3, #16
 80083bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c0:	ee07 3a90 	vmov	s15, r3
 80083c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083dc:	ee17 2a90 	vmov	r2, s15
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80083e4:	4b13      	ldr	r3, [pc, #76]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e8:	0e1b      	lsrs	r3, r3, #24
 80083ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800840a:	ee17 2a90 	vmov	r2, s15
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008412:	e008      	b.n	8008426 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	609a      	str	r2, [r3, #8]
}
 8008426:	bf00      	nop
 8008428:	3724      	adds	r7, #36	; 0x24
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	58024400 	.word	0x58024400
 8008438:	03d09000 	.word	0x03d09000
 800843c:	46000000 	.word	0x46000000
 8008440:	4c742400 	.word	0x4c742400
 8008444:	4a742400 	.word	0x4a742400
 8008448:	4af42400 	.word	0x4af42400

0800844c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800845a:	4b53      	ldr	r3, [pc, #332]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	f003 0303 	and.w	r3, r3, #3
 8008462:	2b03      	cmp	r3, #3
 8008464:	d101      	bne.n	800846a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e099      	b.n	800859e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800846a:	4b4f      	ldr	r3, [pc, #316]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a4e      	ldr	r2, [pc, #312]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008470:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008476:	f7f9 fed5 	bl	8002224 <HAL_GetTick>
 800847a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800847c:	e008      	b.n	8008490 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800847e:	f7f9 fed1 	bl	8002224 <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d901      	bls.n	8008490 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e086      	b.n	800859e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008490:	4b45      	ldr	r3, [pc, #276]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1f0      	bne.n	800847e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800849c:	4b42      	ldr	r3, [pc, #264]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800849e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	031b      	lsls	r3, r3, #12
 80084aa:	493f      	ldr	r1, [pc, #252]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	628b      	str	r3, [r1, #40]	; 0x28
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	3b01      	subs	r3, #1
 80084c0:	025b      	lsls	r3, r3, #9
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	041b      	lsls	r3, r3, #16
 80084ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084d2:	431a      	orrs	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	3b01      	subs	r3, #1
 80084da:	061b      	lsls	r3, r3, #24
 80084dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084e0:	4931      	ldr	r1, [pc, #196]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80084e6:	4b30      	ldr	r3, [pc, #192]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	492d      	ldr	r1, [pc, #180]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80084f8:	4b2b      	ldr	r3, [pc, #172]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	f023 0220 	bic.w	r2, r3, #32
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	4928      	ldr	r1, [pc, #160]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008506:	4313      	orrs	r3, r2
 8008508:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800850a:	4b27      	ldr	r3, [pc, #156]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	4a26      	ldr	r2, [pc, #152]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008510:	f023 0310 	bic.w	r3, r3, #16
 8008514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008516:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800851a:	4b24      	ldr	r3, [pc, #144]	; (80085ac <RCCEx_PLL2_Config+0x160>)
 800851c:	4013      	ands	r3, r2
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	69d2      	ldr	r2, [r2, #28]
 8008522:	00d2      	lsls	r2, r2, #3
 8008524:	4920      	ldr	r1, [pc, #128]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008526:	4313      	orrs	r3, r2
 8008528:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800852a:	4b1f      	ldr	r3, [pc, #124]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800852c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852e:	4a1e      	ldr	r2, [pc, #120]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008530:	f043 0310 	orr.w	r3, r3, #16
 8008534:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d106      	bne.n	800854a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800853c:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	4a19      	ldr	r2, [pc, #100]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008546:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008548:	e00f      	b.n	800856a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d106      	bne.n	800855e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008550:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	4a14      	ldr	r2, [pc, #80]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800855a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800855c:	e005      	b.n	800856a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800855e:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	4a11      	ldr	r2, [pc, #68]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008568:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800856a:	4b0f      	ldr	r3, [pc, #60]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a0e      	ldr	r2, [pc, #56]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008570:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008576:	f7f9 fe55 	bl	8002224 <HAL_GetTick>
 800857a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800857c:	e008      	b.n	8008590 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800857e:	f7f9 fe51 	bl	8002224 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d901      	bls.n	8008590 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e006      	b.n	800859e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0f0      	beq.n	800857e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800859c:	7bfb      	ldrb	r3, [r7, #15]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	58024400 	.word	0x58024400
 80085ac:	ffff0007 	.word	0xffff0007

080085b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085be:	4b53      	ldr	r3, [pc, #332]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80085c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d101      	bne.n	80085ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e099      	b.n	8008702 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80085ce:	4b4f      	ldr	r3, [pc, #316]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a4e      	ldr	r2, [pc, #312]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80085d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085da:	f7f9 fe23 	bl	8002224 <HAL_GetTick>
 80085de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085e0:	e008      	b.n	80085f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085e2:	f7f9 fe1f 	bl	8002224 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d901      	bls.n	80085f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e086      	b.n	8008702 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085f4:	4b45      	ldr	r3, [pc, #276]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1f0      	bne.n	80085e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008600:	4b42      	ldr	r3, [pc, #264]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	051b      	lsls	r3, r3, #20
 800860e:	493f      	ldr	r1, [pc, #252]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008610:	4313      	orrs	r3, r2
 8008612:	628b      	str	r3, [r1, #40]	; 0x28
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	3b01      	subs	r3, #1
 800861a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	3b01      	subs	r3, #1
 8008624:	025b      	lsls	r3, r3, #9
 8008626:	b29b      	uxth	r3, r3
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	3b01      	subs	r3, #1
 8008630:	041b      	lsls	r3, r3, #16
 8008632:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	3b01      	subs	r3, #1
 800863e:	061b      	lsls	r3, r3, #24
 8008640:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008644:	4931      	ldr	r1, [pc, #196]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008646:	4313      	orrs	r3, r2
 8008648:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800864a:	4b30      	ldr	r3, [pc, #192]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	492d      	ldr	r1, [pc, #180]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008658:	4313      	orrs	r3, r2
 800865a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800865c:	4b2b      	ldr	r3, [pc, #172]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	4928      	ldr	r1, [pc, #160]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 800866a:	4313      	orrs	r3, r2
 800866c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800866e:	4b27      	ldr	r3, [pc, #156]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	4a26      	ldr	r2, [pc, #152]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 800867c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800867e:	4b24      	ldr	r3, [pc, #144]	; (8008710 <RCCEx_PLL3_Config+0x160>)
 8008680:	4013      	ands	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	69d2      	ldr	r2, [r2, #28]
 8008686:	00d2      	lsls	r2, r2, #3
 8008688:	4920      	ldr	r1, [pc, #128]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 800868a:	4313      	orrs	r3, r2
 800868c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800868e:	4b1f      	ldr	r3, [pc, #124]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	4a1e      	ldr	r2, [pc, #120]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d106      	bne.n	80086ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80086a0:	4b1a      	ldr	r3, [pc, #104]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	4a19      	ldr	r2, [pc, #100]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086ac:	e00f      	b.n	80086ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d106      	bne.n	80086c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80086b4:	4b15      	ldr	r3, [pc, #84]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4a14      	ldr	r2, [pc, #80]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086c0:	e005      	b.n	80086ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	4a11      	ldr	r2, [pc, #68]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a0e      	ldr	r2, [pc, #56]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086da:	f7f9 fda3 	bl	8002224 <HAL_GetTick>
 80086de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086e0:	e008      	b.n	80086f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086e2:	f7f9 fd9f 	bl	8002224 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d901      	bls.n	80086f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e006      	b.n	8008702 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086f4:	4b05      	ldr	r3, [pc, #20]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0f0      	beq.n	80086e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	58024400 	.word	0x58024400
 8008710:	ffff0007 	.word	0xffff0007

08008714 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d067      	beq.n	80087f6 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7f9 f970 	bl	8001a20 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	22ca      	movs	r2, #202	; 0xca
 800874e:	625a      	str	r2, [r3, #36]	; 0x24
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2253      	movs	r2, #83	; 0x53
 8008756:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fbdb 	bl	8008f14 <RTC_EnterInitMode>
 800875e:	4603      	mov	r3, r0
 8008760:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d13b      	bne.n	80087e0 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6899      	ldr	r1, [r3, #8]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	4b23      	ldr	r3, [pc, #140]	; (8008800 <HAL_RTC_Init+0xec>)
 8008774:	400b      	ands	r3, r1
 8008776:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6899      	ldr	r1, [r3, #8]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	431a      	orrs	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	0419      	lsls	r1, r3, #16
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fbe3 	bl	8008f74 <RTC_ExitInitMode>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d113      	bne.n	80087e0 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0203 	bic.w	r2, r2, #3
 80087c6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	69da      	ldr	r2, [r3, #28]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	22ff      	movs	r2, #255	; 0xff
 80087e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d103      	bne.n	80087f6 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	ff8fffbf 	.word	0xff8fffbf

08008804 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008804:	b590      	push	{r4, r7, lr}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_RTC_SetTime+0x1a>
 800881a:	2302      	movs	r3, #2
 800881c:	e089      	b.n	8008932 <HAL_RTC_SetTime+0x12e>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2202      	movs	r2, #2
 800882a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	22ca      	movs	r2, #202	; 0xca
 8008834:	625a      	str	r2, [r3, #36]	; 0x24
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2253      	movs	r2, #83	; 0x53
 800883c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 fb68 	bl	8008f14 <RTC_EnterInitMode>
 8008844:	4603      	mov	r3, r0
 8008846:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008848:	7cfb      	ldrb	r3, [r7, #19]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d161      	bne.n	8008912 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d126      	bne.n	80088a2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885e:	2b00      	cmp	r3, #0
 8008860:	d102      	bne.n	8008868 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2200      	movs	r2, #0
 8008866:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	4618      	mov	r0, r3
 800886e:	f000 fbbf 	bl	8008ff0 <RTC_ByteToBcd2>
 8008872:	4603      	mov	r3, r0
 8008874:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	785b      	ldrb	r3, [r3, #1]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fbb8 	bl	8008ff0 <RTC_ByteToBcd2>
 8008880:	4603      	mov	r3, r0
 8008882:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008884:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	789b      	ldrb	r3, [r3, #2]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fbb0 	bl	8008ff0 <RTC_ByteToBcd2>
 8008890:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008892:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	78db      	ldrb	r3, [r3, #3]
 800889a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800889c:	4313      	orrs	r3, r2
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e018      	b.n	80088d4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d102      	bne.n	80088b6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2200      	movs	r2, #0
 80088b4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80088c2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80088c8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	78db      	ldrb	r3, [r3, #3]
 80088ce:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80088d0:	4313      	orrs	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	6979      	ldr	r1, [r7, #20]
 80088da:	4b18      	ldr	r3, [pc, #96]	; (800893c <HAL_RTC_SetTime+0x138>)
 80088dc:	400b      	ands	r3, r1
 80088de:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6899      	ldr	r1, [r3, #8]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	431a      	orrs	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 fb33 	bl	8008f74 <RTC_ExitInitMode>
 800890e:	4603      	mov	r3, r0
 8008910:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	22ff      	movs	r2, #255	; 0xff
 8008918:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800891a:	7cfb      	ldrb	r3, [r7, #19]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d103      	bne.n	8008928 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008930:	7cfb      	ldrb	r3, [r7, #19]
}
 8008932:	4618      	mov	r0, r3
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	bd90      	pop	{r4, r7, pc}
 800893a:	bf00      	nop
 800893c:	007f7f7f 	.word	0x007f7f7f

08008940 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	4b22      	ldr	r3, [pc, #136]	; (80089f4 <HAL_RTC_GetTime+0xb4>)
 800896c:	4013      	ands	r3, r2
 800896e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	0c1b      	lsrs	r3, r3, #16
 8008974:	b2db      	uxtb	r3, r3
 8008976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800897a:	b2da      	uxtb	r2, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	b2db      	uxtb	r3, r3
 8008986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898a:	b2da      	uxtb	r2, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008998:	b2da      	uxtb	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	0d9b      	lsrs	r3, r3, #22
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d11a      	bne.n	80089ea <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 fb39 	bl	8009030 <RTC_Bcd2ToByte>
 80089be:	4603      	mov	r3, r0
 80089c0:	461a      	mov	r2, r3
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fb30 	bl	8009030 <RTC_Bcd2ToByte>
 80089d0:	4603      	mov	r3, r0
 80089d2:	461a      	mov	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	789b      	ldrb	r3, [r3, #2]
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fb27 	bl	8009030 <RTC_Bcd2ToByte>
 80089e2:	4603      	mov	r3, r0
 80089e4:	461a      	mov	r2, r3
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	007f7f7f 	.word	0x007f7f7f

080089f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80089f8:	b590      	push	{r4, r7, lr}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d101      	bne.n	8008a12 <HAL_RTC_SetDate+0x1a>
 8008a0e:	2302      	movs	r3, #2
 8008a10:	e073      	b.n	8008afa <HAL_RTC_SetDate+0x102>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10e      	bne.n	8008a46 <HAL_RTC_SetDate+0x4e>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d008      	beq.n	8008a46 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	785b      	ldrb	r3, [r3, #1]
 8008a38:	f023 0310 	bic.w	r3, r3, #16
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	330a      	adds	r3, #10
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d11c      	bne.n	8008a86 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	78db      	ldrb	r3, [r3, #3]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 facd 	bl	8008ff0 <RTC_ByteToBcd2>
 8008a56:	4603      	mov	r3, r0
 8008a58:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fac6 	bl	8008ff0 <RTC_ByteToBcd2>
 8008a64:	4603      	mov	r3, r0
 8008a66:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008a68:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	789b      	ldrb	r3, [r3, #2]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 fabe 	bl	8008ff0 <RTC_ByteToBcd2>
 8008a74:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008a76:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e00e      	b.n	8008aa4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	78db      	ldrb	r3, [r3, #3]
 8008a8a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	785b      	ldrb	r3, [r3, #1]
 8008a90:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008a92:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008a98:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	22ca      	movs	r2, #202	; 0xca
 8008aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2253      	movs	r2, #83	; 0x53
 8008ab2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 fa2d 	bl	8008f14 <RTC_EnterInitMode>
 8008aba:	4603      	mov	r3, r0
 8008abc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008abe:	7cfb      	ldrb	r3, [r7, #19]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10a      	bne.n	8008ada <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	6979      	ldr	r1, [r7, #20]
 8008aca:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <HAL_RTC_SetDate+0x10c>)
 8008acc:	400b      	ands	r3, r1
 8008ace:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 fa4f 	bl	8008f74 <RTC_ExitInitMode>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	22ff      	movs	r2, #255	; 0xff
 8008ae0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008ae2:	7cfb      	ldrb	r3, [r7, #19]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d103      	bne.n	8008af0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008af8:	7cfb      	ldrb	r3, [r7, #19]


}
 8008afa:	4618      	mov	r0, r3
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd90      	pop	{r4, r7, pc}
 8008b02:	bf00      	nop
 8008b04:	00ffff3f 	.word	0x00ffff3f

08008b08 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	4b21      	ldr	r3, [pc, #132]	; (8008ba0 <HAL_RTC_GetDate+0x98>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	0c1b      	lsrs	r3, r3, #16
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	0a1b      	lsrs	r3, r3, #8
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f003 031f 	and.w	r3, r3, #31
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	0b5b      	lsrs	r3, r3, #13
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d11a      	bne.n	8008b94 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	78db      	ldrb	r3, [r3, #3]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fa64 	bl	8009030 <RTC_Bcd2ToByte>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 fa5b 	bl	8009030 <RTC_Bcd2ToByte>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	789b      	ldrb	r3, [r3, #2]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fa52 	bl	8009030 <RTC_Bcd2ToByte>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	00ffff3f 	.word	0x00ffff3f

08008ba4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008ba4:	b590      	push	{r4, r7, lr}
 8008ba6:	b089      	sub	sp, #36	; 0x24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d101      	bne.n	8008bbe <HAL_RTC_SetAlarm_IT+0x1a>
 8008bba:	2302      	movs	r3, #2
 8008bbc:	e123      	b.n	8008e06 <HAL_RTC_SetAlarm_IT+0x262>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2202      	movs	r2, #2
 8008bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d137      	bne.n	8008c44 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d102      	bne.n	8008be8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2200      	movs	r2, #0
 8008be6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f9ff 	bl	8008ff0 <RTC_ByteToBcd2>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 f9f8 	bl	8008ff0 <RTC_ByteToBcd2>
 8008c00:	4603      	mov	r3, r0
 8008c02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008c04:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	789b      	ldrb	r3, [r3, #2]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f9f0 	bl	8008ff0 <RTC_ByteToBcd2>
 8008c10:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008c12:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	78db      	ldrb	r3, [r3, #3]
 8008c1a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008c1c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 f9e2 	bl	8008ff0 <RTC_ByteToBcd2>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008c30:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008c38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	e023      	b.n	8008c8c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d102      	bne.n	8008c58 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2200      	movs	r2, #0
 8008c56:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008c64:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008c6a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	78db      	ldrb	r3, [r3, #3]
 8008c70:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008c72:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008c7c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008c82:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	22ca      	movs	r2, #202	; 0xca
 8008c9e:	625a      	str	r2, [r3, #36]	; 0x24
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2253      	movs	r2, #83	; 0x53
 8008ca6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb0:	d14a      	bne.n	8008d48 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cc0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008cd2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008cd4:	f7f9 faa6 	bl	8002224 <HAL_GetTick>
 8008cd8:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008cda:	e015      	b.n	8008d08 <HAL_RTC_SetAlarm_IT+0x164>
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cdc:	f7f9 faa2 	bl	8002224 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cea:	d90d      	bls.n	8008d08 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	22ff      	movs	r2, #255	; 0xff
 8008cf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2203      	movs	r2, #3
 8008cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e07e      	b.n	8008e06 <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0e2      	beq.n	8008cdc <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	69fa      	ldr	r2, [r7, #28]
 8008d1c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d34:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d44:	609a      	str	r2, [r3, #8]
 8008d46:	e049      	b.n	8008ddc <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008d56:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008d68:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008d6a:	f7f9 fa5b 	bl	8002224 <HAL_GetTick>
 8008d6e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008d70:	e015      	b.n	8008d9e <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d72:	f7f9 fa57 	bl	8002224 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d80:	d90d      	bls.n	8008d9e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	22ff      	movs	r2, #255	; 0xff
 8008d88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2203      	movs	r2, #3
 8008d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e033      	b.n	8008e06 <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d0e2      	beq.n	8008d72 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dda:	609a      	str	r2, [r3, #8]
#if !defined(DUAL_CORE)
  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dea:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3724      	adds	r7, #36	; 0x24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd90      	pop	{r4, r7, pc}
	...

08008e10 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
#if defined(DUAL_CORE)
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8008e18:	f7f9 fb64 	bl	80024e4 <HAL_GetCurrentCPUID>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d104      	bne.n	8008e2c <HAL_RTC_AlarmIRQHandler+0x1c>
  {
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008e22:	4b22      	ldr	r3, [pc, #136]	; (8008eac <HAL_RTC_AlarmIRQHandler+0x9c>)
 8008e24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008e28:	609a      	str	r2, [r3, #8]
 8008e2a:	e003      	b.n	8008e34 <HAL_RTC_AlarmIRQHandler+0x24>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
 8008e2c:	4b20      	ldr	r3, [pc, #128]	; (8008eb0 <HAL_RTC_AlarmIRQHandler+0xa0>)
 8008e2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008e32:	609a      	str	r2, [r3, #8]
  }
#endif /* RTC_MISR_ALRBMF */

#if defined(RTC_ISR_ALRAF)
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d012      	beq.n	8008e68 <HAL_RTC_AlarmIRQHandler+0x58>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00b      	beq.n	8008e68 <HAL_RTC_AlarmIRQHandler+0x58>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008e60:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f826 	bl	8008eb4 <HAL_RTC_AlarmAEventCallback>
  }
#endif /* RTC_ISR_ALRAF */

#if defined(RTC_ISR_ALRBF)
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d012      	beq.n	8008e9c <HAL_RTC_AlarmIRQHandler+0x8c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <HAL_RTC_AlarmIRQHandler+0x8c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008e94:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f8e4 	bl	8009064 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	58000080 	.word	0x58000080
 8008eb0:	580000c0 	.word	0x580000c0

08008eb4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ede:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008ee0:	f7f9 f9a0 	bl	8002224 <HAL_GetTick>
 8008ee4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ee6:	e009      	b.n	8008efc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ee8:	f7f9 f99c 	bl	8002224 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ef6:	d901      	bls.n	8008efc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e007      	b.n	8008f0c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d0ee      	beq.n	8008ee8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d11d      	bne.n	8008f6a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f04f 32ff 	mov.w	r2, #4294967295
 8008f36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008f38:	f7f9 f974 	bl	8002224 <HAL_GetTick>
 8008f3c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008f3e:	e00d      	b.n	8008f5c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008f40:	f7f9 f970 	bl	8002224 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f4e:	d905      	bls.n	8008f5c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2203      	movs	r2, #3
 8008f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d0ea      	beq.n	8008f40 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008f80:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <RTC_ExitInitMode+0x78>)
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	4a19      	ldr	r2, [pc, #100]	; (8008fec <RTC_ExitInitMode+0x78>)
 8008f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f8a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008f8c:	4b17      	ldr	r3, [pc, #92]	; (8008fec <RTC_ExitInitMode+0x78>)
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10c      	bne.n	8008fb2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff ff95 	bl	8008ec8 <HAL_RTC_WaitForSynchro>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01e      	beq.n	8008fe2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2203      	movs	r2, #3
 8008fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	73fb      	strb	r3, [r7, #15]
 8008fb0:	e017      	b.n	8008fe2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008fb2:	4b0e      	ldr	r3, [pc, #56]	; (8008fec <RTC_ExitInitMode+0x78>)
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	4a0d      	ldr	r2, [pc, #52]	; (8008fec <RTC_ExitInitMode+0x78>)
 8008fb8:	f023 0320 	bic.w	r3, r3, #32
 8008fbc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff ff82 	bl	8008ec8 <HAL_RTC_WaitForSynchro>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2203      	movs	r2, #3
 8008fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008fd6:	4b05      	ldr	r3, [pc, #20]	; (8008fec <RTC_ExitInitMode+0x78>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	4a04      	ldr	r2, [pc, #16]	; (8008fec <RTC_ExitInitMode+0x78>)
 8008fdc:	f043 0320 	orr.w	r3, r3, #32
 8008fe0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	58004000 	.word	0x58004000

08008ff0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8009002:	e005      	b.n	8009010 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3301      	adds	r3, #1
 8009008:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800900a:	7afb      	ldrb	r3, [r7, #11]
 800900c:	3b0a      	subs	r3, #10
 800900e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	2b09      	cmp	r3, #9
 8009014:	d8f6      	bhi.n	8009004 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	011b      	lsls	r3, r3, #4
 800901c:	b2da      	uxtb	r2, r3
 800901e:	7afb      	ldrb	r3, [r7, #11]
 8009020:	4313      	orrs	r3, r2
 8009022:	b2db      	uxtb	r3, r3
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800903a:	79fb      	ldrb	r3, [r7, #7]
 800903c:	091b      	lsrs	r3, r3, #4
 800903e:	b2db      	uxtb	r3, r3
 8009040:	461a      	mov	r2, r3
 8009042:	0092      	lsls	r2, r2, #2
 8009044:	4413      	add	r3, r2
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	f003 030f 	and.w	r3, r3, #15
 8009050:	b2da      	uxtb	r2, r3
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	4413      	add	r3, r2
 8009056:	b2db      	uxtb	r3, r3
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e0eb      	b.n	8009266 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a75      	ldr	r2, [pc, #468]	; (8009270 <HAL_SPI_Init+0x1f8>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00f      	beq.n	80090be <HAL_SPI_Init+0x46>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a74      	ldr	r2, [pc, #464]	; (8009274 <HAL_SPI_Init+0x1fc>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d00a      	beq.n	80090be <HAL_SPI_Init+0x46>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a72      	ldr	r2, [pc, #456]	; (8009278 <HAL_SPI_Init+0x200>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d005      	beq.n	80090be <HAL_SPI_Init+0x46>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	2b0f      	cmp	r3, #15
 80090b8:	d901      	bls.n	80090be <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e0d3      	b.n	8009266 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 ff62 	bl	8009f88 <SPI_GetPacketSize>
 80090c4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a69      	ldr	r2, [pc, #420]	; (8009270 <HAL_SPI_Init+0x1f8>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d00c      	beq.n	80090ea <HAL_SPI_Init+0x72>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a67      	ldr	r2, [pc, #412]	; (8009274 <HAL_SPI_Init+0x1fc>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d007      	beq.n	80090ea <HAL_SPI_Init+0x72>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a66      	ldr	r2, [pc, #408]	; (8009278 <HAL_SPI_Init+0x200>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d002      	beq.n	80090ea <HAL_SPI_Init+0x72>
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b08      	cmp	r3, #8
 80090e8:	d811      	bhi.n	800910e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80090ee:	4a60      	ldr	r2, [pc, #384]	; (8009270 <HAL_SPI_Init+0x1f8>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d009      	beq.n	8009108 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a5e      	ldr	r2, [pc, #376]	; (8009274 <HAL_SPI_Init+0x1fc>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d004      	beq.n	8009108 <HAL_SPI_Init+0x90>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a5d      	ldr	r2, [pc, #372]	; (8009278 <HAL_SPI_Init+0x200>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d104      	bne.n	8009112 <HAL_SPI_Init+0x9a>
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2b10      	cmp	r3, #16
 800910c:	d901      	bls.n	8009112 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e0a9      	b.n	8009266 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7f8 fcb2 	bl	8001a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0201 	bic.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800914c:	d119      	bne.n	8009182 <HAL_SPI_Init+0x10a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009156:	d103      	bne.n	8009160 <HAL_SPI_Init+0xe8>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	2b00      	cmp	r3, #0
 800915e:	d008      	beq.n	8009172 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10c      	bne.n	8009182 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009170:	d107      	bne.n	8009182 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009180:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69da      	ldr	r2, [r3, #28]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918a:	431a      	orrs	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	431a      	orrs	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009194:	ea42 0103 	orr.w	r1, r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68da      	ldr	r2, [r3, #12]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	431a      	orrs	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	431a      	orrs	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	431a      	orrs	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	431a      	orrs	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	431a      	orrs	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	431a      	orrs	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d6:	431a      	orrs	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	431a      	orrs	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091e2:	ea42 0103 	orr.w	r1, r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d113      	bne.n	8009222 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800920c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009220:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0201 	bic.w	r2, r2, #1
 8009230:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	40013000 	.word	0x40013000
 8009274:	40003800 	.word	0x40003800
 8009278:	40003c00 	.word	0x40003c00

0800927c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	; 0x28
 8009280:	af02      	add	r7, sp, #8
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	4613      	mov	r3, r2
 800928a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3320      	adds	r3, #32
 8009292:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d101      	bne.n	80092a6 <HAL_SPI_Transmit+0x2a>
 80092a2:	2302      	movs	r3, #2
 80092a4:	e1d7      	b.n	8009656 <HAL_SPI_Transmit+0x3da>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092ae:	f7f8 ffb9 	bl	8002224 <HAL_GetTick>
 80092b2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d007      	beq.n	80092d0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80092c0:	2302      	movs	r3, #2
 80092c2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80092cc:	7efb      	ldrb	r3, [r7, #27]
 80092ce:	e1c2      	b.n	8009656 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <HAL_SPI_Transmit+0x60>
 80092d6:	88fb      	ldrh	r3, [r7, #6]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d107      	bne.n	80092ec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80092e8:	7efb      	ldrb	r3, [r7, #27]
 80092ea:	e1b4      	b.n	8009656 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2203      	movs	r2, #3
 80092f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	88fa      	ldrh	r2, [r7, #6]
 8009306:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	88fa      	ldrh	r2, [r7, #6]
 800930e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800933c:	d107      	bne.n	800934e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800934c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	4b96      	ldr	r3, [pc, #600]	; (80095b0 <HAL_SPI_Transmit+0x334>)
 8009356:	4013      	ands	r3, r2
 8009358:	88f9      	ldrh	r1, [r7, #6]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	6812      	ldr	r2, [r2, #0]
 800935e:	430b      	orrs	r3, r1
 8009360:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f042 0201 	orr.w	r2, r2, #1
 8009370:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800937a:	d107      	bne.n	800938c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800938a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	2b0f      	cmp	r3, #15
 8009392:	d947      	bls.n	8009424 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009394:	e03f      	b.n	8009416 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d114      	bne.n	80093ce <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6812      	ldr	r2, [r2, #0]
 80093ae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b4:	1d1a      	adds	r2, r3, #4
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093cc:	e023      	b.n	8009416 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093ce:	f7f8 ff29 	bl	8002224 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d803      	bhi.n	80093e6 <HAL_SPI_Transmit+0x16a>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e4:	d102      	bne.n	80093ec <HAL_SPI_Transmit+0x170>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d114      	bne.n	8009416 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 fcfd 	bl	8009dec <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e11f      	b.n	8009656 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1b9      	bne.n	8009396 <HAL_SPI_Transmit+0x11a>
 8009422:	e0f2      	b.n	800960a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	2b07      	cmp	r3, #7
 800942a:	f240 80e7 	bls.w	80095fc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800942e:	e05d      	b.n	80094ec <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b02      	cmp	r3, #2
 800943c:	d132      	bne.n	80094a4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009444:	b29b      	uxth	r3, r3
 8009446:	2b01      	cmp	r3, #1
 8009448:	d918      	bls.n	800947c <HAL_SPI_Transmit+0x200>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d014      	beq.n	800947c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6812      	ldr	r2, [r2, #0]
 800945c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009462:	1d1a      	adds	r2, r3, #4
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b02      	subs	r3, #2
 8009472:	b29a      	uxth	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800947a:	e037      	b.n	80094ec <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009480:	881a      	ldrh	r2, [r3, #0]
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800948a:	1c9a      	adds	r2, r3, #2
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009496:	b29b      	uxth	r3, r3
 8009498:	3b01      	subs	r3, #1
 800949a:	b29a      	uxth	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80094a2:	e023      	b.n	80094ec <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094a4:	f7f8 febe 	bl	8002224 <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d803      	bhi.n	80094bc <HAL_SPI_Transmit+0x240>
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ba:	d102      	bne.n	80094c2 <HAL_SPI_Transmit+0x246>
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d114      	bne.n	80094ec <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fc92 	bl	8009dec <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e0b4      	b.n	8009656 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d19b      	bne.n	8009430 <HAL_SPI_Transmit+0x1b4>
 80094f8:	e087      	b.n	800960a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	f003 0302 	and.w	r3, r3, #2
 8009504:	2b02      	cmp	r3, #2
 8009506:	d155      	bne.n	80095b4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800950e:	b29b      	uxth	r3, r3
 8009510:	2b03      	cmp	r3, #3
 8009512:	d918      	bls.n	8009546 <HAL_SPI_Transmit+0x2ca>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009518:	2b40      	cmp	r3, #64	; 0x40
 800951a:	d914      	bls.n	8009546 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6812      	ldr	r2, [r2, #0]
 8009526:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800952c:	1d1a      	adds	r2, r3, #4
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009538:	b29b      	uxth	r3, r3
 800953a:	3b04      	subs	r3, #4
 800953c:	b29a      	uxth	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009544:	e05a      	b.n	80095fc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800954c:	b29b      	uxth	r3, r3
 800954e:	2b01      	cmp	r3, #1
 8009550:	d917      	bls.n	8009582 <HAL_SPI_Transmit+0x306>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009556:	2b00      	cmp	r3, #0
 8009558:	d013      	beq.n	8009582 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955e:	881a      	ldrh	r2, [r3, #0]
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009568:	1c9a      	adds	r2, r3, #2
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009574:	b29b      	uxth	r3, r3
 8009576:	3b02      	subs	r3, #2
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009580:	e03c      	b.n	80095fc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3320      	adds	r3, #32
 800958c:	7812      	ldrb	r2, [r2, #0]
 800958e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	3b01      	subs	r3, #1
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80095ac:	e026      	b.n	80095fc <HAL_SPI_Transmit+0x380>
 80095ae:	bf00      	nop
 80095b0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095b4:	f7f8 fe36 	bl	8002224 <HAL_GetTick>
 80095b8:	4602      	mov	r2, r0
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d803      	bhi.n	80095cc <HAL_SPI_Transmit+0x350>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ca:	d102      	bne.n	80095d2 <HAL_SPI_Transmit+0x356>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d114      	bne.n	80095fc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fc0a 	bl	8009dec <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e02c      	b.n	8009656 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	f47f af78 	bne.w	80094fa <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2200      	movs	r2, #0
 8009612:	2108      	movs	r1, #8
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 fc89 	bl	8009f2c <SPI_WaitOnFlagUntilTimeout>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d007      	beq.n	8009630 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009626:	f043 0220 	orr.w	r2, r3, #32
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f000 fbdb 	bl	8009dec <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e000      	b.n	8009656 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009654:	7efb      	ldrb	r3, [r7, #27]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3720      	adds	r7, #32
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop

08009660 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009678:	2b01      	cmp	r3, #1
 800967a:	d101      	bne.n	8009680 <HAL_SPI_Transmit_DMA+0x20>
 800967c:	2302      	movs	r3, #2
 800967e:	e128      	b.n	80098d2 <HAL_SPI_Transmit_DMA+0x272>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b01      	cmp	r3, #1
 8009692:	d007      	beq.n	80096a4 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8009694:	2302      	movs	r3, #2
 8009696:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80096a0:	7dfb      	ldrb	r3, [r7, #23]
 80096a2:	e116      	b.n	80098d2 <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <HAL_SPI_Transmit_DMA+0x50>
 80096aa:	88fb      	ldrh	r3, [r7, #6]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d107      	bne.n	80096c0 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	e108      	b.n	80098d2 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2203      	movs	r2, #3
 80096c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	88fa      	ldrh	r2, [r7, #6]
 80096da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	88fa      	ldrh	r2, [r7, #6]
 80096e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009710:	d107      	bne.n	8009722 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009720:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2b0f      	cmp	r3, #15
 8009728:	d905      	bls.n	8009736 <HAL_SPI_Transmit_DMA+0xd6>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009734:	d10f      	bne.n	8009756 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800973a:	2b07      	cmp	r3, #7
 800973c:	d913      	bls.n	8009766 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009748:	d00d      	beq.n	8009766 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800974e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009754:	d007      	beq.n	8009766 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	e0b5      	b.n	80098d2 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	2b07      	cmp	r3, #7
 800976c:	d820      	bhi.n	80097b0 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009778:	d109      	bne.n	800978e <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009780:	b29b      	uxth	r3, r3
 8009782:	3301      	adds	r3, #1
 8009784:	105b      	asrs	r3, r3, #1
 8009786:	b29a      	uxth	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009798:	d11e      	bne.n	80097d8 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	3303      	adds	r3, #3
 80097a4:	109b      	asrs	r3, r3, #2
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80097ae:	e013      	b.n	80097d8 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	2b0f      	cmp	r3, #15
 80097b6:	d80f      	bhi.n	80097d8 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097c2:	d109      	bne.n	80097d8 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	3301      	adds	r3, #1
 80097ce:	105b      	asrs	r3, r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097dc:	4a3f      	ldr	r2, [pc, #252]	; (80098dc <HAL_SPI_Transmit_DMA+0x27c>)
 80097de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097e4:	4a3e      	ldr	r2, [pc, #248]	; (80098e0 <HAL_SPI_Transmit_DMA+0x280>)
 80097e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097ec:	4a3d      	ldr	r2, [pc, #244]	; (80098e4 <HAL_SPI_Transmit_DMA+0x284>)
 80097ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097f4:	2200      	movs	r2, #0
 80097f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689a      	ldr	r2, [r3, #8]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009806:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009810:	4619      	mov	r1, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3320      	adds	r3, #32
 8009818:	461a      	mov	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009820:	b29b      	uxth	r3, r3
 8009822:	f7f9 f9cf 	bl	8002bc4 <HAL_DMA_Start_IT>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00f      	beq.n	800984c <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009832:	f043 0210 	orr.w	r2, r3, #16
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 8009848:	7dfb      	ldrb	r3, [r7, #23]
 800984a:	e042      	b.n	80098d2 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009856:	d108      	bne.n	800986a <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6859      	ldr	r1, [r3, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	4b21      	ldr	r3, [pc, #132]	; (80098e8 <HAL_SPI_Transmit_DMA+0x288>)
 8009864:	400b      	ands	r3, r1
 8009866:	6053      	str	r3, [r2, #4]
 8009868:	e009      	b.n	800987e <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	4b1d      	ldr	r3, [pc, #116]	; (80098e8 <HAL_SPI_Transmit_DMA+0x288>)
 8009872:	4013      	ands	r3, r2
 8009874:	88f9      	ldrh	r1, [r7, #6]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	6812      	ldr	r2, [r2, #0]
 800987a:	430b      	orrs	r3, r1
 800987c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800988c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	691a      	ldr	r2, [r3, #16]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800989c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f042 0201 	orr.w	r2, r2, #1
 80098ac:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098b6:	d107      	bne.n	80098c8 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	08009d57 	.word	0x08009d57
 80098e0:	08009d11 	.word	0x08009d11
 80098e4:	08009d73 	.word	0x08009d73
 80098e8:	ffff0000 	.word	0xffff0000

080098ec <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08a      	sub	sp, #40	; 0x28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009904:	6a3a      	ldr	r2, [r7, #32]
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	4013      	ands	r3, r2
 800990a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009914:	2300      	movs	r3, #0
 8009916:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800991e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3330      	adds	r3, #48	; 0x30
 8009926:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992e:	2b00      	cmp	r3, #0
 8009930:	d113      	bne.n	800995a <HAL_SPI_IRQHandler+0x6e>
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	f003 0320 	and.w	r3, r3, #32
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10e      	bne.n	800995a <HAL_SPI_IRQHandler+0x6e>
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d009      	beq.n	800995a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	4798      	blx	r3
    handled = 1UL;
 8009956:	2301      	movs	r3, #1
 8009958:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10f      	bne.n	8009984 <HAL_SPI_IRQHandler+0x98>
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <HAL_SPI_IRQHandler+0x98>
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b00      	cmp	r3, #0
 8009976:	d105      	bne.n	8009984 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	4798      	blx	r3
    handled = 1UL;
 8009980:	2301      	movs	r3, #1
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	f003 0320 	and.w	r3, r3, #32
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10f      	bne.n	80099ae <HAL_SPI_IRQHandler+0xc2>
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	f003 0302 	and.w	r3, r3, #2
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00a      	beq.n	80099ae <HAL_SPI_IRQHandler+0xc2>
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	f003 0304 	and.w	r3, r3, #4
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d105      	bne.n	80099ae <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
    handled = 1UL;
 80099aa:	2301      	movs	r3, #1
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f040 816f 	bne.w	8009c94 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	f003 0308 	and.w	r3, r3, #8
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 80a0 	beq.w	8009b02 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	699a      	ldr	r2, [r3, #24]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f042 0208 	orr.w	r2, r2, #8
 80099d0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	699a      	ldr	r2, [r3, #24]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f042 0210 	orr.w	r2, r2, #16
 80099e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	699a      	ldr	r2, [r3, #24]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099f0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	691a      	ldr	r2, [r3, #16]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0208 	bic.w	r2, r2, #8
 8009a00:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00f      	beq.n	8009a2c <HAL_SPI_IRQHandler+0x140>
 8009a0c:	7cfb      	ldrb	r3, [r7, #19]
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d004      	beq.n	8009a1c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d007      	beq.n	8009a2c <HAL_SPI_IRQHandler+0x140>
 8009a1c:	7cfb      	ldrb	r3, [r7, #19]
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d059      	beq.n	8009ad6 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d154      	bne.n	8009ad6 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d13d      	bne.n	8009ab6 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8009a3a:	e036      	b.n	8009aaa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2b0f      	cmp	r3, #15
 8009a42:	d90b      	bls.n	8009a5c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009a4e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a54:	1d1a      	adds	r2, r3, #4
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	665a      	str	r2, [r3, #100]	; 0x64
 8009a5a:	e01d      	b.n	8009a98 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	2b07      	cmp	r3, #7
 8009a62:	d90b      	bls.n	8009a7c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	8812      	ldrh	r2, [r2, #0]
 8009a6c:	b292      	uxth	r2, r2
 8009a6e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a74:	1c9a      	adds	r2, r3, #2
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	665a      	str	r2, [r3, #100]	; 0x64
 8009a7a:	e00d      	b.n	8009a98 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a88:	7812      	ldrb	r2, [r2, #0]
 8009a8a:	b2d2      	uxtb	r2, r2
 8009a8c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a92:	1c5a      	adds	r2, r3, #1
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1c2      	bne.n	8009a3c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f998 	bl	8009dec <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f914 	bl	8009cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8009ad4:	e0e3      	b.n	8009c9e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009ad6:	7cfb      	ldrb	r3, [r7, #19]
 8009ad8:	2b05      	cmp	r3, #5
 8009ada:	d103      	bne.n	8009ae4 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f8f9 	bl	8009cd4 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8009ae2:	e0d9      	b.n	8009c98 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009ae4:	7cfb      	ldrb	r3, [r7, #19]
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d103      	bne.n	8009af2 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f8e8 	bl	8009cc0 <HAL_SPI_RxCpltCallback>
    return;
 8009af0:	e0d2      	b.n	8009c98 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009af2:	7cfb      	ldrb	r3, [r7, #19]
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	f040 80cf 	bne.w	8009c98 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f8d6 	bl	8009cac <HAL_SPI_TxCpltCallback>
    return;
 8009b00:	e0ca      	b.n	8009c98 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00d      	beq.n	8009b28 <HAL_SPI_IRQHandler+0x23c>
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	f003 0308 	and.w	r3, r3, #8
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d008      	beq.n	8009b28 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699a      	ldr	r2, [r3, #24]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b24:	619a      	str	r2, [r3, #24]

    return;
 8009b26:	e0ba      	b.n	8009c9e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 80b5 	beq.w	8009c9e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00f      	beq.n	8009b5e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b44:	f043 0204 	orr.w	r2, r3, #4
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	699a      	ldr	r2, [r3, #24]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b5c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00f      	beq.n	8009b88 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b6e:	f043 0201 	orr.w	r2, r3, #1
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699a      	ldr	r2, [r3, #24]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b86:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00f      	beq.n	8009bb2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b98:	f043 0208 	orr.w	r2, r3, #8
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	699a      	ldr	r2, [r3, #24]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bb0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	f003 0320 	and.w	r3, r3, #32
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00f      	beq.n	8009bdc <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699a      	ldr	r2, [r3, #24]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f042 0220 	orr.w	r2, r2, #32
 8009bda:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d05a      	beq.n	8009c9c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f022 0201 	bic.w	r2, r2, #1
 8009bf4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6919      	ldr	r1, [r3, #16]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	4b28      	ldr	r3, [pc, #160]	; (8009ca4 <HAL_SPI_IRQHandler+0x3b8>)
 8009c02:	400b      	ands	r3, r1
 8009c04:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c10:	d138      	bne.n	8009c84 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009c20:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d013      	beq.n	8009c52 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ca8 <HAL_SPI_IRQHandler+0x3bc>)
 8009c30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f9 fd4c 	bl	80036d4 <HAL_DMA_Abort_IT>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d007      	beq.n	8009c52 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d020      	beq.n	8009c9c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c5e:	4a12      	ldr	r2, [pc, #72]	; (8009ca8 <HAL_SPI_IRQHandler+0x3bc>)
 8009c60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f9 fd34 	bl	80036d4 <HAL_DMA_Abort_IT>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d014      	beq.n	8009c9c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009c82:	e00b      	b.n	8009c9c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f835 	bl	8009cfc <HAL_SPI_ErrorCallback>
    return;
 8009c92:	e003      	b.n	8009c9c <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009c94:	bf00      	nop
 8009c96:	e002      	b.n	8009c9e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009c98:	bf00      	nop
 8009c9a:	e000      	b.n	8009c9e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009c9c:	bf00      	nop
  }
}
 8009c9e:	3728      	adds	r7, #40	; 0x28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	fffffc94 	.word	0xfffffc94
 8009ca8:	08009db9 	.word	0x08009db9

08009cac <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b07      	cmp	r3, #7
 8009d28:	d011      	beq.n	8009d4e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d34:	d103      	bne.n	8009d3e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f7ff ffb8 	bl	8009cac <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009d3c:	e007      	b.n	8009d4e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	691a      	ldr	r2, [r3, #16]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f042 0208 	orr.w	r2, r2, #8
 8009d4c:	611a      	str	r2, [r3, #16]
}
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d62:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f7ff ffbf 	bl	8009ce8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7fa fe15 	bl	80049b0 <HAL_DMA_GetError>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d011      	beq.n	8009db0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 f82d 	bl	8009dec <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d98:	f043 0210 	orr.w	r2, r3, #16
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f7ff ffa6 	bl	8009cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009db0:	bf00      	nop
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f7ff ff8c 	bl	8009cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009de4:	bf00      	nop
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699a      	ldr	r2, [r3, #24]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0208 	orr.w	r2, r2, #8
 8009e0a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	699a      	ldr	r2, [r3, #24]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0210 	orr.w	r2, r2, #16
 8009e1a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f022 0201 	bic.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6919      	ldr	r1, [r3, #16]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	4b3c      	ldr	r3, [pc, #240]	; (8009f28 <SPI_CloseTransfer+0x13c>)
 8009e38:	400b      	ands	r3, r1
 8009e3a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689a      	ldr	r2, [r3, #8]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009e4a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d014      	beq.n	8009e82 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f003 0320 	and.w	r3, r3, #32
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00f      	beq.n	8009e82 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	699a      	ldr	r2, [r3, #24]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f042 0220 	orr.w	r2, r2, #32
 8009e80:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d014      	beq.n	8009eb8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00f      	beq.n	8009eb8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e9e:	f043 0204 	orr.w	r2, r3, #4
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eb6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00f      	beq.n	8009ee2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ec8:	f043 0201 	orr.w	r2, r3, #1
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	699a      	ldr	r2, [r3, #24]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ee0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00f      	beq.n	8009f0c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ef2:	f043 0208 	orr.w	r2, r3, #8
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	699a      	ldr	r2, [r3, #24]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f0a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009f1c:	bf00      	nop
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	fffffc90 	.word	0xfffffc90

08009f2c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	603b      	str	r3, [r7, #0]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f3c:	e010      	b.n	8009f60 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f3e:	f7f8 f971 	bl	8002224 <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d803      	bhi.n	8009f56 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f54:	d102      	bne.n	8009f5c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e00f      	b.n	8009f80 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	695a      	ldr	r2, [r3, #20]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	bf0c      	ite	eq
 8009f70:	2301      	moveq	r3, #1
 8009f72:	2300      	movne	r3, #0
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	461a      	mov	r2, r3
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d0df      	beq.n	8009f3e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f94:	095b      	lsrs	r3, r3, #5
 8009f96:	3301      	adds	r3, #1
 8009f98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	3307      	adds	r3, #7
 8009fa6:	08db      	lsrs	r3, r3, #3
 8009fa8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	fb02 f303 	mul.w	r3, r2, r3
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3714      	adds	r7, #20
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e049      	b.n	800a064 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d106      	bne.n	8009fea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7f7 fe17 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2202      	movs	r2, #2
 8009fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f000 fc0b 	bl	800a818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d001      	beq.n	800a084 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e047      	b.n	800a114 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2202      	movs	r2, #2
 800a088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a23      	ldr	r2, [pc, #140]	; (800a120 <HAL_TIM_Base_Start+0xb4>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d01d      	beq.n	800a0d2 <HAL_TIM_Base_Start+0x66>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a09e:	d018      	beq.n	800a0d2 <HAL_TIM_Base_Start+0x66>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a1f      	ldr	r2, [pc, #124]	; (800a124 <HAL_TIM_Base_Start+0xb8>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d013      	beq.n	800a0d2 <HAL_TIM_Base_Start+0x66>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a1e      	ldr	r2, [pc, #120]	; (800a128 <HAL_TIM_Base_Start+0xbc>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d00e      	beq.n	800a0d2 <HAL_TIM_Base_Start+0x66>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a1c      	ldr	r2, [pc, #112]	; (800a12c <HAL_TIM_Base_Start+0xc0>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d009      	beq.n	800a0d2 <HAL_TIM_Base_Start+0x66>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a1b      	ldr	r2, [pc, #108]	; (800a130 <HAL_TIM_Base_Start+0xc4>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d004      	beq.n	800a0d2 <HAL_TIM_Base_Start+0x66>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a19      	ldr	r2, [pc, #100]	; (800a134 <HAL_TIM_Base_Start+0xc8>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d115      	bne.n	800a0fe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	4b17      	ldr	r3, [pc, #92]	; (800a138 <HAL_TIM_Base_Start+0xcc>)
 800a0da:	4013      	ands	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b06      	cmp	r3, #6
 800a0e2:	d015      	beq.n	800a110 <HAL_TIM_Base_Start+0xa4>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ea:	d011      	beq.n	800a110 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f042 0201 	orr.w	r2, r2, #1
 800a0fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0fc:	e008      	b.n	800a110 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f042 0201 	orr.w	r2, r2, #1
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	e000      	b.n	800a112 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	40010000 	.word	0x40010000
 800a124:	40000400 	.word	0x40000400
 800a128:	40000800 	.word	0x40000800
 800a12c:	40000c00 	.word	0x40000c00
 800a130:	40010400 	.word	0x40010400
 800a134:	40001800 	.word	0x40001800
 800a138:	00010007 	.word	0x00010007

0800a13c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e049      	b.n	800a1e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d106      	bne.n	800a168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f841 	bl	800a1ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3304      	adds	r3, #4
 800a178:	4619      	mov	r1, r3
 800a17a:	4610      	mov	r0, r2
 800a17c:	f000 fb4c 	bl	800a818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b083      	sub	sp, #12
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a1f2:	bf00      	nop
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
	...

0800a200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d109      	bne.n	800a224 <HAL_TIM_PWM_Start+0x24>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a216:	b2db      	uxtb	r3, r3
 800a218:	2b01      	cmp	r3, #1
 800a21a:	bf14      	ite	ne
 800a21c:	2301      	movne	r3, #1
 800a21e:	2300      	moveq	r3, #0
 800a220:	b2db      	uxtb	r3, r3
 800a222:	e03c      	b.n	800a29e <HAL_TIM_PWM_Start+0x9e>
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2b04      	cmp	r3, #4
 800a228:	d109      	bne.n	800a23e <HAL_TIM_PWM_Start+0x3e>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b01      	cmp	r3, #1
 800a234:	bf14      	ite	ne
 800a236:	2301      	movne	r3, #1
 800a238:	2300      	moveq	r3, #0
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	e02f      	b.n	800a29e <HAL_TIM_PWM_Start+0x9e>
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b08      	cmp	r3, #8
 800a242:	d109      	bne.n	800a258 <HAL_TIM_PWM_Start+0x58>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	bf14      	ite	ne
 800a250:	2301      	movne	r3, #1
 800a252:	2300      	moveq	r3, #0
 800a254:	b2db      	uxtb	r3, r3
 800a256:	e022      	b.n	800a29e <HAL_TIM_PWM_Start+0x9e>
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	2b0c      	cmp	r3, #12
 800a25c:	d109      	bne.n	800a272 <HAL_TIM_PWM_Start+0x72>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b01      	cmp	r3, #1
 800a268:	bf14      	ite	ne
 800a26a:	2301      	movne	r3, #1
 800a26c:	2300      	moveq	r3, #0
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	e015      	b.n	800a29e <HAL_TIM_PWM_Start+0x9e>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b10      	cmp	r3, #16
 800a276:	d109      	bne.n	800a28c <HAL_TIM_PWM_Start+0x8c>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b01      	cmp	r3, #1
 800a282:	bf14      	ite	ne
 800a284:	2301      	movne	r3, #1
 800a286:	2300      	moveq	r3, #0
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	e008      	b.n	800a29e <HAL_TIM_PWM_Start+0x9e>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a292:	b2db      	uxtb	r3, r3
 800a294:	2b01      	cmp	r3, #1
 800a296:	bf14      	ite	ne
 800a298:	2301      	movne	r3, #1
 800a29a:	2300      	moveq	r3, #0
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e09c      	b.n	800a3e0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d104      	bne.n	800a2b6 <HAL_TIM_PWM_Start+0xb6>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2b4:	e023      	b.n	800a2fe <HAL_TIM_PWM_Start+0xfe>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d104      	bne.n	800a2c6 <HAL_TIM_PWM_Start+0xc6>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2c4:	e01b      	b.n	800a2fe <HAL_TIM_PWM_Start+0xfe>
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b08      	cmp	r3, #8
 800a2ca:	d104      	bne.n	800a2d6 <HAL_TIM_PWM_Start+0xd6>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2d4:	e013      	b.n	800a2fe <HAL_TIM_PWM_Start+0xfe>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b0c      	cmp	r3, #12
 800a2da:	d104      	bne.n	800a2e6 <HAL_TIM_PWM_Start+0xe6>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2e4:	e00b      	b.n	800a2fe <HAL_TIM_PWM_Start+0xfe>
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	2b10      	cmp	r3, #16
 800a2ea:	d104      	bne.n	800a2f6 <HAL_TIM_PWM_Start+0xf6>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2f4:	e003      	b.n	800a2fe <HAL_TIM_PWM_Start+0xfe>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2202      	movs	r2, #2
 800a2fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2201      	movs	r2, #1
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fe8c 	bl	800b024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a35      	ldr	r2, [pc, #212]	; (800a3e8 <HAL_TIM_PWM_Start+0x1e8>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d013      	beq.n	800a33e <HAL_TIM_PWM_Start+0x13e>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a34      	ldr	r2, [pc, #208]	; (800a3ec <HAL_TIM_PWM_Start+0x1ec>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d00e      	beq.n	800a33e <HAL_TIM_PWM_Start+0x13e>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a32      	ldr	r2, [pc, #200]	; (800a3f0 <HAL_TIM_PWM_Start+0x1f0>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d009      	beq.n	800a33e <HAL_TIM_PWM_Start+0x13e>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a31      	ldr	r2, [pc, #196]	; (800a3f4 <HAL_TIM_PWM_Start+0x1f4>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d004      	beq.n	800a33e <HAL_TIM_PWM_Start+0x13e>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a2f      	ldr	r2, [pc, #188]	; (800a3f8 <HAL_TIM_PWM_Start+0x1f8>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d101      	bne.n	800a342 <HAL_TIM_PWM_Start+0x142>
 800a33e:	2301      	movs	r3, #1
 800a340:	e000      	b.n	800a344 <HAL_TIM_PWM_Start+0x144>
 800a342:	2300      	movs	r3, #0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d007      	beq.n	800a358 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a356:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a22      	ldr	r2, [pc, #136]	; (800a3e8 <HAL_TIM_PWM_Start+0x1e8>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d01d      	beq.n	800a39e <HAL_TIM_PWM_Start+0x19e>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a36a:	d018      	beq.n	800a39e <HAL_TIM_PWM_Start+0x19e>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a22      	ldr	r2, [pc, #136]	; (800a3fc <HAL_TIM_PWM_Start+0x1fc>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d013      	beq.n	800a39e <HAL_TIM_PWM_Start+0x19e>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a21      	ldr	r2, [pc, #132]	; (800a400 <HAL_TIM_PWM_Start+0x200>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d00e      	beq.n	800a39e <HAL_TIM_PWM_Start+0x19e>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a1f      	ldr	r2, [pc, #124]	; (800a404 <HAL_TIM_PWM_Start+0x204>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d009      	beq.n	800a39e <HAL_TIM_PWM_Start+0x19e>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a17      	ldr	r2, [pc, #92]	; (800a3ec <HAL_TIM_PWM_Start+0x1ec>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d004      	beq.n	800a39e <HAL_TIM_PWM_Start+0x19e>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a1b      	ldr	r2, [pc, #108]	; (800a408 <HAL_TIM_PWM_Start+0x208>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d115      	bne.n	800a3ca <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	4b19      	ldr	r3, [pc, #100]	; (800a40c <HAL_TIM_PWM_Start+0x20c>)
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b06      	cmp	r3, #6
 800a3ae:	d015      	beq.n	800a3dc <HAL_TIM_PWM_Start+0x1dc>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b6:	d011      	beq.n	800a3dc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f042 0201 	orr.w	r2, r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c8:	e008      	b.n	800a3dc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f042 0201 	orr.w	r2, r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	e000      	b.n	800a3de <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	40010000 	.word	0x40010000
 800a3ec:	40010400 	.word	0x40010400
 800a3f0:	40014000 	.word	0x40014000
 800a3f4:	40014400 	.word	0x40014400
 800a3f8:	40014800 	.word	0x40014800
 800a3fc:	40000400 	.word	0x40000400
 800a400:	40000800 	.word	0x40000800
 800a404:	40000c00 	.word	0x40000c00
 800a408:	40001800 	.word	0x40001800
 800a40c:	00010007 	.word	0x00010007

0800a410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a422:	2b01      	cmp	r3, #1
 800a424:	d101      	bne.n	800a42a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a426:	2302      	movs	r3, #2
 800a428:	e0fd      	b.n	800a626 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b14      	cmp	r3, #20
 800a436:	f200 80f0 	bhi.w	800a61a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a43a:	a201      	add	r2, pc, #4	; (adr r2, 800a440 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a440:	0800a495 	.word	0x0800a495
 800a444:	0800a61b 	.word	0x0800a61b
 800a448:	0800a61b 	.word	0x0800a61b
 800a44c:	0800a61b 	.word	0x0800a61b
 800a450:	0800a4d5 	.word	0x0800a4d5
 800a454:	0800a61b 	.word	0x0800a61b
 800a458:	0800a61b 	.word	0x0800a61b
 800a45c:	0800a61b 	.word	0x0800a61b
 800a460:	0800a517 	.word	0x0800a517
 800a464:	0800a61b 	.word	0x0800a61b
 800a468:	0800a61b 	.word	0x0800a61b
 800a46c:	0800a61b 	.word	0x0800a61b
 800a470:	0800a557 	.word	0x0800a557
 800a474:	0800a61b 	.word	0x0800a61b
 800a478:	0800a61b 	.word	0x0800a61b
 800a47c:	0800a61b 	.word	0x0800a61b
 800a480:	0800a599 	.word	0x0800a599
 800a484:	0800a61b 	.word	0x0800a61b
 800a488:	0800a61b 	.word	0x0800a61b
 800a48c:	0800a61b 	.word	0x0800a61b
 800a490:	0800a5d9 	.word	0x0800a5d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68b9      	ldr	r1, [r7, #8]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fa56 	bl	800a94c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	699a      	ldr	r2, [r3, #24]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f042 0208 	orr.w	r2, r2, #8
 800a4ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	699a      	ldr	r2, [r3, #24]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0204 	bic.w	r2, r2, #4
 800a4be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6999      	ldr	r1, [r3, #24]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	691a      	ldr	r2, [r3, #16]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	619a      	str	r2, [r3, #24]
      break;
 800a4d2:	e0a3      	b.n	800a61c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fac6 	bl	800aa6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	699a      	ldr	r2, [r3, #24]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	699a      	ldr	r2, [r3, #24]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6999      	ldr	r1, [r3, #24]
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	021a      	lsls	r2, r3, #8
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	619a      	str	r2, [r3, #24]
      break;
 800a514:	e082      	b.n	800a61c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68b9      	ldr	r1, [r7, #8]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 fb2f 	bl	800ab80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	69da      	ldr	r2, [r3, #28]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f042 0208 	orr.w	r2, r2, #8
 800a530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69da      	ldr	r2, [r3, #28]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 0204 	bic.w	r2, r2, #4
 800a540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69d9      	ldr	r1, [r3, #28]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	691a      	ldr	r2, [r3, #16]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	430a      	orrs	r2, r1
 800a552:	61da      	str	r2, [r3, #28]
      break;
 800a554:	e062      	b.n	800a61c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68b9      	ldr	r1, [r7, #8]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fb95 	bl	800ac8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	69da      	ldr	r2, [r3, #28]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69da      	ldr	r2, [r3, #28]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	69d9      	ldr	r1, [r3, #28]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	021a      	lsls	r2, r3, #8
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	61da      	str	r2, [r3, #28]
      break;
 800a596:	e041      	b.n	800a61c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68b9      	ldr	r1, [r7, #8]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 fbdc 	bl	800ad5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f042 0208 	orr.w	r2, r2, #8
 800a5b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 0204 	bic.w	r2, r2, #4
 800a5c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	691a      	ldr	r2, [r3, #16]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a5d6:	e021      	b.n	800a61c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68b9      	ldr	r1, [r7, #8]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 fc1e 	bl	800ae20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a602:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	021a      	lsls	r2, r3, #8
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	430a      	orrs	r2, r1
 800a616:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a618:	e000      	b.n	800a61c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a61a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop

0800a630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a640:	2b01      	cmp	r3, #1
 800a642:	d101      	bne.n	800a648 <HAL_TIM_ConfigClockSource+0x18>
 800a644:	2302      	movs	r3, #2
 800a646:	e0db      	b.n	800a800 <HAL_TIM_ConfigClockSource+0x1d0>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2202      	movs	r2, #2
 800a654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	4b69      	ldr	r3, [pc, #420]	; (800a808 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a664:	4013      	ands	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a66e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a63      	ldr	r2, [pc, #396]	; (800a80c <HAL_TIM_ConfigClockSource+0x1dc>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	f000 80a9 	beq.w	800a7d6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a684:	4a61      	ldr	r2, [pc, #388]	; (800a80c <HAL_TIM_ConfigClockSource+0x1dc>)
 800a686:	4293      	cmp	r3, r2
 800a688:	f200 80ae 	bhi.w	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a68c:	4a60      	ldr	r2, [pc, #384]	; (800a810 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	f000 80a1 	beq.w	800a7d6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a694:	4a5e      	ldr	r2, [pc, #376]	; (800a810 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a696:	4293      	cmp	r3, r2
 800a698:	f200 80a6 	bhi.w	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a69c:	4a5d      	ldr	r2, [pc, #372]	; (800a814 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	f000 8099 	beq.w	800a7d6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a6a4:	4a5b      	ldr	r2, [pc, #364]	; (800a814 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	f200 809e 	bhi.w	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a6b0:	f000 8091 	beq.w	800a7d6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a6b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a6b8:	f200 8096 	bhi.w	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6c0:	f000 8089 	beq.w	800a7d6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a6c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6c8:	f200 808e 	bhi.w	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6d0:	d03e      	beq.n	800a750 <HAL_TIM_ConfigClockSource+0x120>
 800a6d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6d6:	f200 8087 	bhi.w	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6de:	f000 8085 	beq.w	800a7ec <HAL_TIM_ConfigClockSource+0x1bc>
 800a6e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6e6:	d87f      	bhi.n	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6e8:	2b70      	cmp	r3, #112	; 0x70
 800a6ea:	d01a      	beq.n	800a722 <HAL_TIM_ConfigClockSource+0xf2>
 800a6ec:	2b70      	cmp	r3, #112	; 0x70
 800a6ee:	d87b      	bhi.n	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6f0:	2b60      	cmp	r3, #96	; 0x60
 800a6f2:	d050      	beq.n	800a796 <HAL_TIM_ConfigClockSource+0x166>
 800a6f4:	2b60      	cmp	r3, #96	; 0x60
 800a6f6:	d877      	bhi.n	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6f8:	2b50      	cmp	r3, #80	; 0x50
 800a6fa:	d03c      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x146>
 800a6fc:	2b50      	cmp	r3, #80	; 0x50
 800a6fe:	d873      	bhi.n	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a700:	2b40      	cmp	r3, #64	; 0x40
 800a702:	d058      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x186>
 800a704:	2b40      	cmp	r3, #64	; 0x40
 800a706:	d86f      	bhi.n	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a708:	2b30      	cmp	r3, #48	; 0x30
 800a70a:	d064      	beq.n	800a7d6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a70c:	2b30      	cmp	r3, #48	; 0x30
 800a70e:	d86b      	bhi.n	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a710:	2b20      	cmp	r3, #32
 800a712:	d060      	beq.n	800a7d6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a714:	2b20      	cmp	r3, #32
 800a716:	d867      	bhi.n	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d05c      	beq.n	800a7d6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a71c:	2b10      	cmp	r3, #16
 800a71e:	d05a      	beq.n	800a7d6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a720:	e062      	b.n	800a7e8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6818      	ldr	r0, [r3, #0]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	6899      	ldr	r1, [r3, #8]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	f000 fc57 	bl	800afe4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a744:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	609a      	str	r2, [r3, #8]
      break;
 800a74e:	e04e      	b.n	800a7ee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6818      	ldr	r0, [r3, #0]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	6899      	ldr	r1, [r3, #8]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	f000 fc40 	bl	800afe4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	689a      	ldr	r2, [r3, #8]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a772:	609a      	str	r2, [r3, #8]
      break;
 800a774:	e03b      	b.n	800a7ee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	6859      	ldr	r1, [r3, #4]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	461a      	mov	r2, r3
 800a784:	f000 fbb0 	bl	800aee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2150      	movs	r1, #80	; 0x50
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 fc0a 	bl	800afa8 <TIM_ITRx_SetConfig>
      break;
 800a794:	e02b      	b.n	800a7ee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	6859      	ldr	r1, [r3, #4]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f000 fbcf 	bl	800af46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2160      	movs	r1, #96	; 0x60
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 fbfa 	bl	800afa8 <TIM_ITRx_SetConfig>
      break;
 800a7b4:	e01b      	b.n	800a7ee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6818      	ldr	r0, [r3, #0]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	6859      	ldr	r1, [r3, #4]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f000 fb90 	bl	800aee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2140      	movs	r1, #64	; 0x40
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 fbea 	bl	800afa8 <TIM_ITRx_SetConfig>
      break;
 800a7d4:	e00b      	b.n	800a7ee <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	f000 fbe1 	bl	800afa8 <TIM_ITRx_SetConfig>
        break;
 800a7e6:	e002      	b.n	800a7ee <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a7e8:	bf00      	nop
 800a7ea:	e000      	b.n	800a7ee <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a7ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	ffceff88 	.word	0xffceff88
 800a80c:	00100040 	.word	0x00100040
 800a810:	00100030 	.word	0x00100030
 800a814:	00100020 	.word	0x00100020

0800a818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a40      	ldr	r2, [pc, #256]	; (800a92c <TIM_Base_SetConfig+0x114>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d013      	beq.n	800a858 <TIM_Base_SetConfig+0x40>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a836:	d00f      	beq.n	800a858 <TIM_Base_SetConfig+0x40>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a3d      	ldr	r2, [pc, #244]	; (800a930 <TIM_Base_SetConfig+0x118>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d00b      	beq.n	800a858 <TIM_Base_SetConfig+0x40>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a3c      	ldr	r2, [pc, #240]	; (800a934 <TIM_Base_SetConfig+0x11c>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d007      	beq.n	800a858 <TIM_Base_SetConfig+0x40>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a3b      	ldr	r2, [pc, #236]	; (800a938 <TIM_Base_SetConfig+0x120>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d003      	beq.n	800a858 <TIM_Base_SetConfig+0x40>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a3a      	ldr	r2, [pc, #232]	; (800a93c <TIM_Base_SetConfig+0x124>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d108      	bne.n	800a86a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a85e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	4313      	orrs	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a2f      	ldr	r2, [pc, #188]	; (800a92c <TIM_Base_SetConfig+0x114>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d01f      	beq.n	800a8b2 <TIM_Base_SetConfig+0x9a>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a878:	d01b      	beq.n	800a8b2 <TIM_Base_SetConfig+0x9a>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a2c      	ldr	r2, [pc, #176]	; (800a930 <TIM_Base_SetConfig+0x118>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d017      	beq.n	800a8b2 <TIM_Base_SetConfig+0x9a>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a2b      	ldr	r2, [pc, #172]	; (800a934 <TIM_Base_SetConfig+0x11c>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d013      	beq.n	800a8b2 <TIM_Base_SetConfig+0x9a>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a2a      	ldr	r2, [pc, #168]	; (800a938 <TIM_Base_SetConfig+0x120>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d00f      	beq.n	800a8b2 <TIM_Base_SetConfig+0x9a>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a29      	ldr	r2, [pc, #164]	; (800a93c <TIM_Base_SetConfig+0x124>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d00b      	beq.n	800a8b2 <TIM_Base_SetConfig+0x9a>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a28      	ldr	r2, [pc, #160]	; (800a940 <TIM_Base_SetConfig+0x128>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d007      	beq.n	800a8b2 <TIM_Base_SetConfig+0x9a>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a27      	ldr	r2, [pc, #156]	; (800a944 <TIM_Base_SetConfig+0x12c>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d003      	beq.n	800a8b2 <TIM_Base_SetConfig+0x9a>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a26      	ldr	r2, [pc, #152]	; (800a948 <TIM_Base_SetConfig+0x130>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d108      	bne.n	800a8c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	689a      	ldr	r2, [r3, #8]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a10      	ldr	r2, [pc, #64]	; (800a92c <TIM_Base_SetConfig+0x114>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d00f      	beq.n	800a910 <TIM_Base_SetConfig+0xf8>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a12      	ldr	r2, [pc, #72]	; (800a93c <TIM_Base_SetConfig+0x124>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d00b      	beq.n	800a910 <TIM_Base_SetConfig+0xf8>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a11      	ldr	r2, [pc, #68]	; (800a940 <TIM_Base_SetConfig+0x128>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d007      	beq.n	800a910 <TIM_Base_SetConfig+0xf8>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a10      	ldr	r2, [pc, #64]	; (800a944 <TIM_Base_SetConfig+0x12c>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d003      	beq.n	800a910 <TIM_Base_SetConfig+0xf8>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a0f      	ldr	r2, [pc, #60]	; (800a948 <TIM_Base_SetConfig+0x130>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d103      	bne.n	800a918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	691a      	ldr	r2, [r3, #16]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	615a      	str	r2, [r3, #20]
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	40010000 	.word	0x40010000
 800a930:	40000400 	.word	0x40000400
 800a934:	40000800 	.word	0x40000800
 800a938:	40000c00 	.word	0x40000c00
 800a93c:	40010400 	.word	0x40010400
 800a940:	40014000 	.word	0x40014000
 800a944:	40014400 	.word	0x40014400
 800a948:	40014800 	.word	0x40014800

0800a94c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	f023 0201 	bic.w	r2, r3, #1
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	4b37      	ldr	r3, [pc, #220]	; (800aa54 <TIM_OC1_SetConfig+0x108>)
 800a978:	4013      	ands	r3, r2
 800a97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 0303 	bic.w	r3, r3, #3
 800a982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f023 0302 	bic.w	r3, r3, #2
 800a994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a2d      	ldr	r2, [pc, #180]	; (800aa58 <TIM_OC1_SetConfig+0x10c>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d00f      	beq.n	800a9c8 <TIM_OC1_SetConfig+0x7c>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a2c      	ldr	r2, [pc, #176]	; (800aa5c <TIM_OC1_SetConfig+0x110>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d00b      	beq.n	800a9c8 <TIM_OC1_SetConfig+0x7c>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a2b      	ldr	r2, [pc, #172]	; (800aa60 <TIM_OC1_SetConfig+0x114>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d007      	beq.n	800a9c8 <TIM_OC1_SetConfig+0x7c>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a2a      	ldr	r2, [pc, #168]	; (800aa64 <TIM_OC1_SetConfig+0x118>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d003      	beq.n	800a9c8 <TIM_OC1_SetConfig+0x7c>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a29      	ldr	r2, [pc, #164]	; (800aa68 <TIM_OC1_SetConfig+0x11c>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d10c      	bne.n	800a9e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	f023 0308 	bic.w	r3, r3, #8
 800a9ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f023 0304 	bic.w	r3, r3, #4
 800a9e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a1c      	ldr	r2, [pc, #112]	; (800aa58 <TIM_OC1_SetConfig+0x10c>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d00f      	beq.n	800aa0a <TIM_OC1_SetConfig+0xbe>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a1b      	ldr	r2, [pc, #108]	; (800aa5c <TIM_OC1_SetConfig+0x110>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00b      	beq.n	800aa0a <TIM_OC1_SetConfig+0xbe>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a1a      	ldr	r2, [pc, #104]	; (800aa60 <TIM_OC1_SetConfig+0x114>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d007      	beq.n	800aa0a <TIM_OC1_SetConfig+0xbe>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a19      	ldr	r2, [pc, #100]	; (800aa64 <TIM_OC1_SetConfig+0x118>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d003      	beq.n	800aa0a <TIM_OC1_SetConfig+0xbe>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a18      	ldr	r2, [pc, #96]	; (800aa68 <TIM_OC1_SetConfig+0x11c>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d111      	bne.n	800aa2e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	621a      	str	r2, [r3, #32]
}
 800aa48:	bf00      	nop
 800aa4a:	371c      	adds	r7, #28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	fffeff8f 	.word	0xfffeff8f
 800aa58:	40010000 	.word	0x40010000
 800aa5c:	40010400 	.word	0x40010400
 800aa60:	40014000 	.word	0x40014000
 800aa64:	40014400 	.word	0x40014400
 800aa68:	40014800 	.word	0x40014800

0800aa6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b087      	sub	sp, #28
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	f023 0210 	bic.w	r2, r3, #16
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	4b34      	ldr	r3, [pc, #208]	; (800ab68 <TIM_OC2_SetConfig+0xfc>)
 800aa98:	4013      	ands	r3, r2
 800aa9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	021b      	lsls	r3, r3, #8
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f023 0320 	bic.w	r3, r3, #32
 800aab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	011b      	lsls	r3, r3, #4
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a29      	ldr	r2, [pc, #164]	; (800ab6c <TIM_OC2_SetConfig+0x100>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d003      	beq.n	800aad4 <TIM_OC2_SetConfig+0x68>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a28      	ldr	r2, [pc, #160]	; (800ab70 <TIM_OC2_SetConfig+0x104>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d10d      	bne.n	800aaf0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	011b      	lsls	r3, r3, #4
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a1e      	ldr	r2, [pc, #120]	; (800ab6c <TIM_OC2_SetConfig+0x100>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d00f      	beq.n	800ab18 <TIM_OC2_SetConfig+0xac>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a1d      	ldr	r2, [pc, #116]	; (800ab70 <TIM_OC2_SetConfig+0x104>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d00b      	beq.n	800ab18 <TIM_OC2_SetConfig+0xac>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a1c      	ldr	r2, [pc, #112]	; (800ab74 <TIM_OC2_SetConfig+0x108>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d007      	beq.n	800ab18 <TIM_OC2_SetConfig+0xac>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a1b      	ldr	r2, [pc, #108]	; (800ab78 <TIM_OC2_SetConfig+0x10c>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d003      	beq.n	800ab18 <TIM_OC2_SetConfig+0xac>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a1a      	ldr	r2, [pc, #104]	; (800ab7c <TIM_OC2_SetConfig+0x110>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d113      	bne.n	800ab40 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	621a      	str	r2, [r3, #32]
}
 800ab5a:	bf00      	nop
 800ab5c:	371c      	adds	r7, #28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	feff8fff 	.word	0xfeff8fff
 800ab6c:	40010000 	.word	0x40010000
 800ab70:	40010400 	.word	0x40010400
 800ab74:	40014000 	.word	0x40014000
 800ab78:	40014400 	.word	0x40014400
 800ab7c:	40014800 	.word	0x40014800

0800ab80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	69db      	ldr	r3, [r3, #28]
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f023 0303 	bic.w	r3, r3, #3
 800abb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	021b      	lsls	r3, r3, #8
 800abd0:	697a      	ldr	r2, [r7, #20]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a27      	ldr	r2, [pc, #156]	; (800ac78 <TIM_OC3_SetConfig+0xf8>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d003      	beq.n	800abe6 <TIM_OC3_SetConfig+0x66>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a26      	ldr	r2, [pc, #152]	; (800ac7c <TIM_OC3_SetConfig+0xfc>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d10d      	bne.n	800ac02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	021b      	lsls	r3, r3, #8
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a1c      	ldr	r2, [pc, #112]	; (800ac78 <TIM_OC3_SetConfig+0xf8>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d00f      	beq.n	800ac2a <TIM_OC3_SetConfig+0xaa>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a1b      	ldr	r2, [pc, #108]	; (800ac7c <TIM_OC3_SetConfig+0xfc>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00b      	beq.n	800ac2a <TIM_OC3_SetConfig+0xaa>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a1a      	ldr	r2, [pc, #104]	; (800ac80 <TIM_OC3_SetConfig+0x100>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d007      	beq.n	800ac2a <TIM_OC3_SetConfig+0xaa>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a19      	ldr	r2, [pc, #100]	; (800ac84 <TIM_OC3_SetConfig+0x104>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d003      	beq.n	800ac2a <TIM_OC3_SetConfig+0xaa>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a18      	ldr	r2, [pc, #96]	; (800ac88 <TIM_OC3_SetConfig+0x108>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d113      	bne.n	800ac52 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	011b      	lsls	r3, r3, #4
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	011b      	lsls	r3, r3, #4
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	621a      	str	r2, [r3, #32]
}
 800ac6c:	bf00      	nop
 800ac6e:	371c      	adds	r7, #28
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	40010000 	.word	0x40010000
 800ac7c:	40010400 	.word	0x40010400
 800ac80:	40014000 	.word	0x40014000
 800ac84:	40014400 	.word	0x40014400
 800ac88:	40014800 	.word	0x40014800

0800ac8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b087      	sub	sp, #28
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	021b      	lsls	r3, r3, #8
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	4313      	orrs	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	031b      	lsls	r3, r3, #12
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a18      	ldr	r2, [pc, #96]	; (800ad48 <TIM_OC4_SetConfig+0xbc>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d00f      	beq.n	800ad0c <TIM_OC4_SetConfig+0x80>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a17      	ldr	r2, [pc, #92]	; (800ad4c <TIM_OC4_SetConfig+0xc0>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00b      	beq.n	800ad0c <TIM_OC4_SetConfig+0x80>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a16      	ldr	r2, [pc, #88]	; (800ad50 <TIM_OC4_SetConfig+0xc4>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d007      	beq.n	800ad0c <TIM_OC4_SetConfig+0x80>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a15      	ldr	r2, [pc, #84]	; (800ad54 <TIM_OC4_SetConfig+0xc8>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d003      	beq.n	800ad0c <TIM_OC4_SetConfig+0x80>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a14      	ldr	r2, [pc, #80]	; (800ad58 <TIM_OC4_SetConfig+0xcc>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d109      	bne.n	800ad20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	019b      	lsls	r3, r3, #6
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	693a      	ldr	r2, [r7, #16]
 800ad38:	621a      	str	r2, [r3, #32]
}
 800ad3a:	bf00      	nop
 800ad3c:	371c      	adds	r7, #28
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	40010000 	.word	0x40010000
 800ad4c:	40010400 	.word	0x40010400
 800ad50:	40014000 	.word	0x40014000
 800ad54:	40014400 	.word	0x40014400
 800ad58:	40014800 	.word	0x40014800

0800ad5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	041b      	lsls	r3, r3, #16
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a17      	ldr	r2, [pc, #92]	; (800ae0c <TIM_OC5_SetConfig+0xb0>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d00f      	beq.n	800add2 <TIM_OC5_SetConfig+0x76>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a16      	ldr	r2, [pc, #88]	; (800ae10 <TIM_OC5_SetConfig+0xb4>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d00b      	beq.n	800add2 <TIM_OC5_SetConfig+0x76>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a15      	ldr	r2, [pc, #84]	; (800ae14 <TIM_OC5_SetConfig+0xb8>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d007      	beq.n	800add2 <TIM_OC5_SetConfig+0x76>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <TIM_OC5_SetConfig+0xbc>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d003      	beq.n	800add2 <TIM_OC5_SetConfig+0x76>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a13      	ldr	r2, [pc, #76]	; (800ae1c <TIM_OC5_SetConfig+0xc0>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d109      	bne.n	800ade6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800add8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	021b      	lsls	r3, r3, #8
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	697a      	ldr	r2, [r7, #20]
 800adea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	685a      	ldr	r2, [r3, #4]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	621a      	str	r2, [r3, #32]
}
 800ae00:	bf00      	nop
 800ae02:	371c      	adds	r7, #28
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	40010000 	.word	0x40010000
 800ae10:	40010400 	.word	0x40010400
 800ae14:	40014000 	.word	0x40014000
 800ae18:	40014400 	.word	0x40014400
 800ae1c:	40014800 	.word	0x40014800

0800ae20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b087      	sub	sp, #28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	021b      	lsls	r3, r3, #8
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	051b      	lsls	r3, r3, #20
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a18      	ldr	r2, [pc, #96]	; (800aed4 <TIM_OC6_SetConfig+0xb4>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d00f      	beq.n	800ae98 <TIM_OC6_SetConfig+0x78>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a17      	ldr	r2, [pc, #92]	; (800aed8 <TIM_OC6_SetConfig+0xb8>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d00b      	beq.n	800ae98 <TIM_OC6_SetConfig+0x78>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a16      	ldr	r2, [pc, #88]	; (800aedc <TIM_OC6_SetConfig+0xbc>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d007      	beq.n	800ae98 <TIM_OC6_SetConfig+0x78>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a15      	ldr	r2, [pc, #84]	; (800aee0 <TIM_OC6_SetConfig+0xc0>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d003      	beq.n	800ae98 <TIM_OC6_SetConfig+0x78>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a14      	ldr	r2, [pc, #80]	; (800aee4 <TIM_OC6_SetConfig+0xc4>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d109      	bne.n	800aeac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ae9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	029b      	lsls	r3, r3, #10
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	621a      	str	r2, [r3, #32]
}
 800aec6:	bf00      	nop
 800aec8:	371c      	adds	r7, #28
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	40010000 	.word	0x40010000
 800aed8:	40010400 	.word	0x40010400
 800aedc:	40014000 	.word	0x40014000
 800aee0:	40014400 	.word	0x40014400
 800aee4:	40014800 	.word	0x40014800

0800aee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	f023 0201 	bic.w	r2, r3, #1
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f023 030a 	bic.w	r3, r3, #10
 800af24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	621a      	str	r2, [r3, #32]
}
 800af3a:	bf00      	nop
 800af3c:	371c      	adds	r7, #28
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af46:	b480      	push	{r7}
 800af48:	b087      	sub	sp, #28
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	60b9      	str	r1, [r7, #8]
 800af50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	f023 0210 	bic.w	r2, r3, #16
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a1b      	ldr	r3, [r3, #32]
 800af68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	031b      	lsls	r3, r3, #12
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	4313      	orrs	r3, r2
 800af7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	011b      	lsls	r3, r3, #4
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	621a      	str	r2, [r3, #32]
}
 800af9a:	bf00      	nop
 800af9c:	371c      	adds	r7, #28
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
	...

0800afa8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <TIM_ITRx_SetConfig+0x38>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	f043 0307 	orr.w	r3, r3, #7
 800afca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	609a      	str	r2, [r3, #8]
}
 800afd2:	bf00      	nop
 800afd4:	3714      	adds	r7, #20
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	ffcfff8f 	.word	0xffcfff8f

0800afe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b087      	sub	sp, #28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
 800aff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800affe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	021a      	lsls	r2, r3, #8
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	431a      	orrs	r2, r3
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	697a      	ldr	r2, [r7, #20]
 800b00e:	4313      	orrs	r3, r2
 800b010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	609a      	str	r2, [r3, #8]
}
 800b018:	bf00      	nop
 800b01a:	371c      	adds	r7, #28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b024:	b480      	push	{r7}
 800b026:	b087      	sub	sp, #28
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	f003 031f 	and.w	r3, r3, #31
 800b036:	2201      	movs	r2, #1
 800b038:	fa02 f303 	lsl.w	r3, r2, r3
 800b03c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6a1a      	ldr	r2, [r3, #32]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	43db      	mvns	r3, r3
 800b046:	401a      	ands	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6a1a      	ldr	r2, [r3, #32]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	f003 031f 	and.w	r3, r3, #31
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	fa01 f303 	lsl.w	r3, r1, r3
 800b05c:	431a      	orrs	r2, r3
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	621a      	str	r2, [r3, #32]
}
 800b062:	bf00      	nop
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
	...

0800b070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b080:	2b01      	cmp	r3, #1
 800b082:	d101      	bne.n	800b088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b084:	2302      	movs	r3, #2
 800b086:	e068      	b.n	800b15a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2202      	movs	r2, #2
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a2e      	ldr	r2, [pc, #184]	; (800b168 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d004      	beq.n	800b0bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a2d      	ldr	r2, [pc, #180]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d108      	bne.n	800b0ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a1e      	ldr	r2, [pc, #120]	; (800b168 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d01d      	beq.n	800b12e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0fa:	d018      	beq.n	800b12e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a1b      	ldr	r2, [pc, #108]	; (800b170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d013      	beq.n	800b12e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a1a      	ldr	r2, [pc, #104]	; (800b174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d00e      	beq.n	800b12e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a18      	ldr	r2, [pc, #96]	; (800b178 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d009      	beq.n	800b12e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a13      	ldr	r2, [pc, #76]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d004      	beq.n	800b12e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a14      	ldr	r2, [pc, #80]	; (800b17c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d10c      	bne.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	40010000 	.word	0x40010000
 800b16c:	40010400 	.word	0x40010400
 800b170:	40000400 	.word	0x40000400
 800b174:	40000800 	.word	0x40000800
 800b178:	40000c00 	.word	0x40000c00
 800b17c:	40001800 	.word	0x40001800

0800b180 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b194:	2b01      	cmp	r3, #1
 800b196:	d101      	bne.n	800b19c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b198:	2302      	movs	r3, #2
 800b19a:	e065      	b.n	800b268 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	695b      	ldr	r3, [r3, #20]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b202:	4313      	orrs	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	041b      	lsls	r3, r3, #16
 800b212:	4313      	orrs	r3, r2
 800b214:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a16      	ldr	r2, [pc, #88]	; (800b274 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d004      	beq.n	800b22a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a14      	ldr	r2, [pc, #80]	; (800b278 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d115      	bne.n	800b256 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b234:	051b      	lsls	r3, r3, #20
 800b236:	4313      	orrs	r3, r2
 800b238:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	69db      	ldr	r3, [r3, #28]
 800b244:	4313      	orrs	r3, r2
 800b246:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	6a1b      	ldr	r3, [r3, #32]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr
 800b274:	40010000 	.word	0x40010000
 800b278:	40010400 	.word	0x40010400

0800b27c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d101      	bne.n	800b28e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e042      	b.n	800b314 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b294:	2b00      	cmp	r3, #0
 800b296:	d106      	bne.n	800b2a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7f6 fd17 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2224      	movs	r2, #36	; 0x24
 800b2aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f022 0201 	bic.w	r2, r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fb60 	bl	800b984 <UART_SetConfig>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d101      	bne.n	800b2ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e022      	b.n	800b314 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d002      	beq.n	800b2dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f001 f8b4 	bl	800c444 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	689a      	ldr	r2, [r3, #8]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f042 0201 	orr.w	r2, r2, #1
 800b30a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f001 f93b 	bl	800c588 <UART_CheckIdleState>
 800b312:	4603      	mov	r3, r0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	4613      	mov	r3, r2
 800b328:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b330:	2b20      	cmp	r3, #32
 800b332:	d131      	bne.n	800b398 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <HAL_UART_Receive_DMA+0x24>
 800b33a:	88fb      	ldrh	r3, [r7, #6]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	e02a      	b.n	800b39a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d101      	bne.n	800b352 <HAL_UART_Receive_DMA+0x36>
 800b34e:	2302      	movs	r3, #2
 800b350:	e023      	b.n	800b39a <HAL_UART_Receive_DMA+0x7e>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2201      	movs	r2, #1
 800b356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a0f      	ldr	r2, [pc, #60]	; (800b3a4 <HAL_UART_Receive_DMA+0x88>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d00e      	beq.n	800b388 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b374:	2b00      	cmp	r3, #0
 800b376:	d007      	beq.n	800b388 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b386:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b388:	88fb      	ldrh	r3, [r7, #6]
 800b38a:	461a      	mov	r2, r3
 800b38c:	68b9      	ldr	r1, [r7, #8]
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f001 f9c6 	bl	800c720 <UART_Start_Receive_DMA>
 800b394:	4603      	mov	r3, r0
 800b396:	e000      	b.n	800b39a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b398:	2302      	movs	r3, #2
  }
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	58000c00 	.word	0x58000c00

0800b3a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b088      	sub	sp, #32
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3c8:	69fa      	ldr	r2, [r7, #28]
 800b3ca:	f640 030f 	movw	r3, #2063	; 0x80f
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d118      	bne.n	800b40a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d013      	beq.n	800b40a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	f003 0320 	and.w	r3, r3, #32
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d104      	bne.n	800b3f6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d009      	beq.n	800b40a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 8282 	beq.w	800b904 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	4798      	blx	r3
      }
      return;
 800b408:	e27c      	b.n	800b904 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 80ef 	beq.w	800b5f0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	4b73      	ldr	r3, [pc, #460]	; (800b5e4 <HAL_UART_IRQHandler+0x23c>)
 800b416:	4013      	ands	r3, r2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d105      	bne.n	800b428 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b41c:	69ba      	ldr	r2, [r7, #24]
 800b41e:	4b72      	ldr	r3, [pc, #456]	; (800b5e8 <HAL_UART_IRQHandler+0x240>)
 800b420:	4013      	ands	r3, r2
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80e4 	beq.w	800b5f0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d010      	beq.n	800b454 <HAL_UART_IRQHandler+0xac>
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2201      	movs	r2, #1
 800b442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b44a:	f043 0201 	orr.w	r2, r3, #1
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	f003 0302 	and.w	r3, r3, #2
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d010      	beq.n	800b480 <HAL_UART_IRQHandler+0xd8>
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00b      	beq.n	800b480 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2202      	movs	r2, #2
 800b46e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b476:	f043 0204 	orr.w	r2, r3, #4
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	2b00      	cmp	r3, #0
 800b488:	d010      	beq.n	800b4ac <HAL_UART_IRQHandler+0x104>
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00b      	beq.n	800b4ac <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2204      	movs	r2, #4
 800b49a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4a2:	f043 0202 	orr.w	r2, r3, #2
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	f003 0308 	and.w	r3, r3, #8
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d015      	beq.n	800b4e2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	f003 0320 	and.w	r3, r3, #32
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d104      	bne.n	800b4ca <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	4b48      	ldr	r3, [pc, #288]	; (800b5e4 <HAL_UART_IRQHandler+0x23c>)
 800b4c4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00b      	beq.n	800b4e2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2208      	movs	r2, #8
 800b4d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4d8:	f043 0208 	orr.w	r2, r3, #8
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d011      	beq.n	800b510 <HAL_UART_IRQHandler+0x168>
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00c      	beq.n	800b510 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b506:	f043 0220 	orr.w	r2, r3, #32
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 81f6 	beq.w	800b908 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	f003 0320 	and.w	r3, r3, #32
 800b522:	2b00      	cmp	r3, #0
 800b524:	d011      	beq.n	800b54a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	f003 0320 	and.w	r3, r3, #32
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d104      	bne.n	800b53a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d007      	beq.n	800b54a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b550:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b55c:	2b40      	cmp	r3, #64	; 0x40
 800b55e:	d004      	beq.n	800b56a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b566:	2b00      	cmp	r3, #0
 800b568:	d031      	beq.n	800b5ce <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f001 f964 	bl	800c838 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b57a:	2b40      	cmp	r3, #64	; 0x40
 800b57c:	d123      	bne.n	800b5c6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689a      	ldr	r2, [r3, #8]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b58c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b592:	2b00      	cmp	r3, #0
 800b594:	d013      	beq.n	800b5be <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b59a:	4a14      	ldr	r2, [pc, #80]	; (800b5ec <HAL_UART_IRQHandler+0x244>)
 800b59c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7f8 f896 	bl	80036d4 <HAL_DMA_Abort_IT>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d017      	beq.n	800b5de <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5bc:	e00f      	b.n	800b5de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f9ca 	bl	800b958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5c4:	e00b      	b.n	800b5de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f9c6 	bl	800b958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5cc:	e007      	b.n	800b5de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f9c2 	bl	800b958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b5dc:	e194      	b.n	800b908 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5de:	bf00      	nop
    return;
 800b5e0:	e192      	b.n	800b908 <HAL_UART_IRQHandler+0x560>
 800b5e2:	bf00      	nop
 800b5e4:	10000001 	.word	0x10000001
 800b5e8:	04000120 	.word	0x04000120
 800b5ec:	0800c9eb 	.word	0x0800c9eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	f040 810f 	bne.w	800b818 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	f003 0310 	and.w	r3, r3, #16
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 8109 	beq.w	800b818 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	f003 0310 	and.w	r3, r3, #16
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 8103 	beq.w	800b818 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2210      	movs	r2, #16
 800b618:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b624:	2b40      	cmp	r3, #64	; 0x40
 800b626:	f040 80bb 	bne.w	800b7a0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a96      	ldr	r2, [pc, #600]	; (800b88c <HAL_UART_IRQHandler+0x4e4>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d059      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a94      	ldr	r2, [pc, #592]	; (800b890 <HAL_UART_IRQHandler+0x4e8>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d053      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a92      	ldr	r2, [pc, #584]	; (800b894 <HAL_UART_IRQHandler+0x4ec>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d04d      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a90      	ldr	r2, [pc, #576]	; (800b898 <HAL_UART_IRQHandler+0x4f0>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d047      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a8e      	ldr	r2, [pc, #568]	; (800b89c <HAL_UART_IRQHandler+0x4f4>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d041      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a8c      	ldr	r2, [pc, #560]	; (800b8a0 <HAL_UART_IRQHandler+0x4f8>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d03b      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a8a      	ldr	r2, [pc, #552]	; (800b8a4 <HAL_UART_IRQHandler+0x4fc>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d035      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a88      	ldr	r2, [pc, #544]	; (800b8a8 <HAL_UART_IRQHandler+0x500>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d02f      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a86      	ldr	r2, [pc, #536]	; (800b8ac <HAL_UART_IRQHandler+0x504>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d029      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a84      	ldr	r2, [pc, #528]	; (800b8b0 <HAL_UART_IRQHandler+0x508>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d023      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a82      	ldr	r2, [pc, #520]	; (800b8b4 <HAL_UART_IRQHandler+0x50c>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d01d      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a80      	ldr	r2, [pc, #512]	; (800b8b8 <HAL_UART_IRQHandler+0x510>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d017      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a7e      	ldr	r2, [pc, #504]	; (800b8bc <HAL_UART_IRQHandler+0x514>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d011      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a7c      	ldr	r2, [pc, #496]	; (800b8c0 <HAL_UART_IRQHandler+0x518>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d00b      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a7a      	ldr	r2, [pc, #488]	; (800b8c4 <HAL_UART_IRQHandler+0x51c>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d005      	beq.n	800b6ea <HAL_UART_IRQHandler+0x342>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a78      	ldr	r2, [pc, #480]	; (800b8c8 <HAL_UART_IRQHandler+0x520>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d105      	bne.n	800b6f6 <HAL_UART_IRQHandler+0x34e>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	e004      	b.n	800b700 <HAL_UART_IRQHandler+0x358>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b702:	893b      	ldrh	r3, [r7, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	f000 8101 	beq.w	800b90c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b710:	893a      	ldrh	r2, [r7, #8]
 800b712:	429a      	cmp	r2, r3
 800b714:	f080 80fa 	bcs.w	800b90c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	893a      	ldrh	r2, [r7, #8]
 800b71c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b724:	69db      	ldr	r3, [r3, #28]
 800b726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b72a:	d02b      	beq.n	800b784 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b73a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689a      	ldr	r2, [r3, #8]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f022 0201 	bic.w	r2, r2, #1
 800b74a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	689a      	ldr	r2, [r3, #8]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b75a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2220      	movs	r2, #32
 800b760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0210 	bic.w	r2, r2, #16
 800b778:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b77e:	4618      	mov	r0, r3
 800b780:	f7f7 fc8a 	bl	8003098 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b790:	b29b      	uxth	r3, r3
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	b29b      	uxth	r3, r3
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f8e7 	bl	800b96c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b79e:	e0b5      	b.n	800b90c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	1ad3      	subs	r3, r2, r3
 800b7b0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 80a8 	beq.w	800b910 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b7c0:	897b      	ldrh	r3, [r7, #10]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 80a4 	beq.w	800b910 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b7d6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6899      	ldr	r1, [r3, #8]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	4b3a      	ldr	r3, [pc, #232]	; (800b8cc <HAL_UART_IRQHandler+0x524>)
 800b7e4:	400b      	ands	r3, r1
 800b7e6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f022 0210 	bic.w	r2, r2, #16
 800b80a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b80c:	897b      	ldrh	r3, [r7, #10]
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f8ab 	bl	800b96c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b816:	e07b      	b.n	800b910 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00d      	beq.n	800b83e <HAL_UART_IRQHandler+0x496>
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d008      	beq.n	800b83e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b834:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f001 f907 	bl	800ca4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b83c:	e06b      	b.n	800b916 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b844:	2b00      	cmp	r3, #0
 800b846:	d012      	beq.n	800b86e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d104      	bne.n	800b85c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d008      	beq.n	800b86e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b860:	2b00      	cmp	r3, #0
 800b862:	d057      	beq.n	800b914 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	4798      	blx	r3
    }
    return;
 800b86c:	e052      	b.n	800b914 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b874:	2b00      	cmp	r3, #0
 800b876:	d02b      	beq.n	800b8d0 <HAL_UART_IRQHandler+0x528>
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d026      	beq.n	800b8d0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f001 f8c7 	bl	800ca16 <UART_EndTransmit_IT>
    return;
 800b888:	e045      	b.n	800b916 <HAL_UART_IRQHandler+0x56e>
 800b88a:	bf00      	nop
 800b88c:	40020010 	.word	0x40020010
 800b890:	40020028 	.word	0x40020028
 800b894:	40020040 	.word	0x40020040
 800b898:	40020058 	.word	0x40020058
 800b89c:	40020070 	.word	0x40020070
 800b8a0:	40020088 	.word	0x40020088
 800b8a4:	400200a0 	.word	0x400200a0
 800b8a8:	400200b8 	.word	0x400200b8
 800b8ac:	40020410 	.word	0x40020410
 800b8b0:	40020428 	.word	0x40020428
 800b8b4:	40020440 	.word	0x40020440
 800b8b8:	40020458 	.word	0x40020458
 800b8bc:	40020470 	.word	0x40020470
 800b8c0:	40020488 	.word	0x40020488
 800b8c4:	400204a0 	.word	0x400204a0
 800b8c8:	400204b8 	.word	0x400204b8
 800b8cc:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d008      	beq.n	800b8ec <HAL_UART_IRQHandler+0x544>
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d003      	beq.n	800b8ec <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f001 f8c4 	bl	800ca72 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8ea:	e014      	b.n	800b916 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00f      	beq.n	800b916 <HAL_UART_IRQHandler+0x56e>
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	da0c      	bge.n	800b916 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 f8ae 	bl	800ca5e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b902:	e008      	b.n	800b916 <HAL_UART_IRQHandler+0x56e>
      return;
 800b904:	bf00      	nop
 800b906:	e006      	b.n	800b916 <HAL_UART_IRQHandler+0x56e>
    return;
 800b908:	bf00      	nop
 800b90a:	e004      	b.n	800b916 <HAL_UART_IRQHandler+0x56e>
      return;
 800b90c:	bf00      	nop
 800b90e:	e002      	b.n	800b916 <HAL_UART_IRQHandler+0x56e>
      return;
 800b910:	bf00      	nop
 800b912:	e000      	b.n	800b916 <HAL_UART_IRQHandler+0x56e>
    return;
 800b914:	bf00      	nop
  }
}
 800b916:	3720      	adds	r7, #32
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b924:	bf00      	nop
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b938:	bf00      	nop
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b94c:	bf00      	nop
 800b94e:	370c      	adds	r7, #12
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b984:	b5b0      	push	{r4, r5, r7, lr}
 800b986:	b08e      	sub	sp, #56	; 0x38
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	689a      	ldr	r2, [r3, #8]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	431a      	orrs	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	431a      	orrs	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	4bbf      	ldr	r3, [pc, #764]	; (800bcb0 <UART_SetConfig+0x32c>)
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	6812      	ldr	r2, [r2, #0]
 800b9b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9ba:	430b      	orrs	r3, r1
 800b9bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68da      	ldr	r2, [r3, #12]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	430a      	orrs	r2, r1
 800b9d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4ab5      	ldr	r2, [pc, #724]	; (800bcb4 <UART_SetConfig+0x330>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d004      	beq.n	800b9ee <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a1b      	ldr	r3, [r3, #32]
 800b9e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	689a      	ldr	r2, [r3, #8]
 800b9f4:	4bb0      	ldr	r3, [pc, #704]	; (800bcb8 <UART_SetConfig+0x334>)
 800b9f6:	4013      	ands	r3, r2
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	6812      	ldr	r2, [r2, #0]
 800b9fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9fe:	430b      	orrs	r3, r1
 800ba00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba08:	f023 010f 	bic.w	r1, r3, #15
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	430a      	orrs	r2, r1
 800ba16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4aa7      	ldr	r2, [pc, #668]	; (800bcbc <UART_SetConfig+0x338>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d176      	bne.n	800bb10 <UART_SetConfig+0x18c>
 800ba22:	4ba7      	ldr	r3, [pc, #668]	; (800bcc0 <UART_SetConfig+0x33c>)
 800ba24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba2a:	2b28      	cmp	r3, #40	; 0x28
 800ba2c:	d86c      	bhi.n	800bb08 <UART_SetConfig+0x184>
 800ba2e:	a201      	add	r2, pc, #4	; (adr r2, 800ba34 <UART_SetConfig+0xb0>)
 800ba30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba34:	0800bad9 	.word	0x0800bad9
 800ba38:	0800bb09 	.word	0x0800bb09
 800ba3c:	0800bb09 	.word	0x0800bb09
 800ba40:	0800bb09 	.word	0x0800bb09
 800ba44:	0800bb09 	.word	0x0800bb09
 800ba48:	0800bb09 	.word	0x0800bb09
 800ba4c:	0800bb09 	.word	0x0800bb09
 800ba50:	0800bb09 	.word	0x0800bb09
 800ba54:	0800bae1 	.word	0x0800bae1
 800ba58:	0800bb09 	.word	0x0800bb09
 800ba5c:	0800bb09 	.word	0x0800bb09
 800ba60:	0800bb09 	.word	0x0800bb09
 800ba64:	0800bb09 	.word	0x0800bb09
 800ba68:	0800bb09 	.word	0x0800bb09
 800ba6c:	0800bb09 	.word	0x0800bb09
 800ba70:	0800bb09 	.word	0x0800bb09
 800ba74:	0800bae9 	.word	0x0800bae9
 800ba78:	0800bb09 	.word	0x0800bb09
 800ba7c:	0800bb09 	.word	0x0800bb09
 800ba80:	0800bb09 	.word	0x0800bb09
 800ba84:	0800bb09 	.word	0x0800bb09
 800ba88:	0800bb09 	.word	0x0800bb09
 800ba8c:	0800bb09 	.word	0x0800bb09
 800ba90:	0800bb09 	.word	0x0800bb09
 800ba94:	0800baf1 	.word	0x0800baf1
 800ba98:	0800bb09 	.word	0x0800bb09
 800ba9c:	0800bb09 	.word	0x0800bb09
 800baa0:	0800bb09 	.word	0x0800bb09
 800baa4:	0800bb09 	.word	0x0800bb09
 800baa8:	0800bb09 	.word	0x0800bb09
 800baac:	0800bb09 	.word	0x0800bb09
 800bab0:	0800bb09 	.word	0x0800bb09
 800bab4:	0800baf9 	.word	0x0800baf9
 800bab8:	0800bb09 	.word	0x0800bb09
 800babc:	0800bb09 	.word	0x0800bb09
 800bac0:	0800bb09 	.word	0x0800bb09
 800bac4:	0800bb09 	.word	0x0800bb09
 800bac8:	0800bb09 	.word	0x0800bb09
 800bacc:	0800bb09 	.word	0x0800bb09
 800bad0:	0800bb09 	.word	0x0800bb09
 800bad4:	0800bb01 	.word	0x0800bb01
 800bad8:	2301      	movs	r3, #1
 800bada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bade:	e222      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bae0:	2304      	movs	r3, #4
 800bae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bae6:	e21e      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bae8:	2308      	movs	r3, #8
 800baea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baee:	e21a      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800baf0:	2310      	movs	r3, #16
 800baf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baf6:	e216      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800baf8:	2320      	movs	r3, #32
 800bafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bafe:	e212      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bb00:	2340      	movs	r3, #64	; 0x40
 800bb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb06:	e20e      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bb08:	2380      	movs	r3, #128	; 0x80
 800bb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb0e:	e20a      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a6b      	ldr	r2, [pc, #428]	; (800bcc4 <UART_SetConfig+0x340>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d130      	bne.n	800bb7c <UART_SetConfig+0x1f8>
 800bb1a:	4b69      	ldr	r3, [pc, #420]	; (800bcc0 <UART_SetConfig+0x33c>)
 800bb1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb1e:	f003 0307 	and.w	r3, r3, #7
 800bb22:	2b05      	cmp	r3, #5
 800bb24:	d826      	bhi.n	800bb74 <UART_SetConfig+0x1f0>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <UART_SetConfig+0x1a8>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb45 	.word	0x0800bb45
 800bb30:	0800bb4d 	.word	0x0800bb4d
 800bb34:	0800bb55 	.word	0x0800bb55
 800bb38:	0800bb5d 	.word	0x0800bb5d
 800bb3c:	0800bb65 	.word	0x0800bb65
 800bb40:	0800bb6d 	.word	0x0800bb6d
 800bb44:	2300      	movs	r3, #0
 800bb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb4a:	e1ec      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bb4c:	2304      	movs	r3, #4
 800bb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb52:	e1e8      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bb54:	2308      	movs	r3, #8
 800bb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb5a:	e1e4      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bb5c:	2310      	movs	r3, #16
 800bb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb62:	e1e0      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bb64:	2320      	movs	r3, #32
 800bb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb6a:	e1dc      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bb6c:	2340      	movs	r3, #64	; 0x40
 800bb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb72:	e1d8      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bb74:	2380      	movs	r3, #128	; 0x80
 800bb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb7a:	e1d4      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a51      	ldr	r2, [pc, #324]	; (800bcc8 <UART_SetConfig+0x344>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d130      	bne.n	800bbe8 <UART_SetConfig+0x264>
 800bb86:	4b4e      	ldr	r3, [pc, #312]	; (800bcc0 <UART_SetConfig+0x33c>)
 800bb88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8a:	f003 0307 	and.w	r3, r3, #7
 800bb8e:	2b05      	cmp	r3, #5
 800bb90:	d826      	bhi.n	800bbe0 <UART_SetConfig+0x25c>
 800bb92:	a201      	add	r2, pc, #4	; (adr r2, 800bb98 <UART_SetConfig+0x214>)
 800bb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb98:	0800bbb1 	.word	0x0800bbb1
 800bb9c:	0800bbb9 	.word	0x0800bbb9
 800bba0:	0800bbc1 	.word	0x0800bbc1
 800bba4:	0800bbc9 	.word	0x0800bbc9
 800bba8:	0800bbd1 	.word	0x0800bbd1
 800bbac:	0800bbd9 	.word	0x0800bbd9
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbb6:	e1b6      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bbb8:	2304      	movs	r3, #4
 800bbba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbbe:	e1b2      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bbc0:	2308      	movs	r3, #8
 800bbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbc6:	e1ae      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bbc8:	2310      	movs	r3, #16
 800bbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbce:	e1aa      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bbd0:	2320      	movs	r3, #32
 800bbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbd6:	e1a6      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bbd8:	2340      	movs	r3, #64	; 0x40
 800bbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbde:	e1a2      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bbe0:	2380      	movs	r3, #128	; 0x80
 800bbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbe6:	e19e      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a37      	ldr	r2, [pc, #220]	; (800bccc <UART_SetConfig+0x348>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d130      	bne.n	800bc54 <UART_SetConfig+0x2d0>
 800bbf2:	4b33      	ldr	r3, [pc, #204]	; (800bcc0 <UART_SetConfig+0x33c>)
 800bbf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf6:	f003 0307 	and.w	r3, r3, #7
 800bbfa:	2b05      	cmp	r3, #5
 800bbfc:	d826      	bhi.n	800bc4c <UART_SetConfig+0x2c8>
 800bbfe:	a201      	add	r2, pc, #4	; (adr r2, 800bc04 <UART_SetConfig+0x280>)
 800bc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc04:	0800bc1d 	.word	0x0800bc1d
 800bc08:	0800bc25 	.word	0x0800bc25
 800bc0c:	0800bc2d 	.word	0x0800bc2d
 800bc10:	0800bc35 	.word	0x0800bc35
 800bc14:	0800bc3d 	.word	0x0800bc3d
 800bc18:	0800bc45 	.word	0x0800bc45
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc22:	e180      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bc24:	2304      	movs	r3, #4
 800bc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc2a:	e17c      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bc2c:	2308      	movs	r3, #8
 800bc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc32:	e178      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bc34:	2310      	movs	r3, #16
 800bc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc3a:	e174      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bc3c:	2320      	movs	r3, #32
 800bc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc42:	e170      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bc44:	2340      	movs	r3, #64	; 0x40
 800bc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc4a:	e16c      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bc4c:	2380      	movs	r3, #128	; 0x80
 800bc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc52:	e168      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a1d      	ldr	r2, [pc, #116]	; (800bcd0 <UART_SetConfig+0x34c>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d142      	bne.n	800bce4 <UART_SetConfig+0x360>
 800bc5e:	4b18      	ldr	r3, [pc, #96]	; (800bcc0 <UART_SetConfig+0x33c>)
 800bc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc62:	f003 0307 	and.w	r3, r3, #7
 800bc66:	2b05      	cmp	r3, #5
 800bc68:	d838      	bhi.n	800bcdc <UART_SetConfig+0x358>
 800bc6a:	a201      	add	r2, pc, #4	; (adr r2, 800bc70 <UART_SetConfig+0x2ec>)
 800bc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc70:	0800bc89 	.word	0x0800bc89
 800bc74:	0800bc91 	.word	0x0800bc91
 800bc78:	0800bc99 	.word	0x0800bc99
 800bc7c:	0800bca1 	.word	0x0800bca1
 800bc80:	0800bca9 	.word	0x0800bca9
 800bc84:	0800bcd5 	.word	0x0800bcd5
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc8e:	e14a      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bc90:	2304      	movs	r3, #4
 800bc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc96:	e146      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bc98:	2308      	movs	r3, #8
 800bc9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9e:	e142      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bca0:	2310      	movs	r3, #16
 800bca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca6:	e13e      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bca8:	2320      	movs	r3, #32
 800bcaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcae:	e13a      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bcb0:	cfff69f3 	.word	0xcfff69f3
 800bcb4:	58000c00 	.word	0x58000c00
 800bcb8:	11fff4ff 	.word	0x11fff4ff
 800bcbc:	40011000 	.word	0x40011000
 800bcc0:	58024400 	.word	0x58024400
 800bcc4:	40004400 	.word	0x40004400
 800bcc8:	40004800 	.word	0x40004800
 800bccc:	40004c00 	.word	0x40004c00
 800bcd0:	40005000 	.word	0x40005000
 800bcd4:	2340      	movs	r3, #64	; 0x40
 800bcd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcda:	e124      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bcdc:	2380      	movs	r3, #128	; 0x80
 800bcde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bce2:	e120      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4acc      	ldr	r2, [pc, #816]	; (800c01c <UART_SetConfig+0x698>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d176      	bne.n	800bddc <UART_SetConfig+0x458>
 800bcee:	4bcc      	ldr	r3, [pc, #816]	; (800c020 <UART_SetConfig+0x69c>)
 800bcf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bcf6:	2b28      	cmp	r3, #40	; 0x28
 800bcf8:	d86c      	bhi.n	800bdd4 <UART_SetConfig+0x450>
 800bcfa:	a201      	add	r2, pc, #4	; (adr r2, 800bd00 <UART_SetConfig+0x37c>)
 800bcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd00:	0800bda5 	.word	0x0800bda5
 800bd04:	0800bdd5 	.word	0x0800bdd5
 800bd08:	0800bdd5 	.word	0x0800bdd5
 800bd0c:	0800bdd5 	.word	0x0800bdd5
 800bd10:	0800bdd5 	.word	0x0800bdd5
 800bd14:	0800bdd5 	.word	0x0800bdd5
 800bd18:	0800bdd5 	.word	0x0800bdd5
 800bd1c:	0800bdd5 	.word	0x0800bdd5
 800bd20:	0800bdad 	.word	0x0800bdad
 800bd24:	0800bdd5 	.word	0x0800bdd5
 800bd28:	0800bdd5 	.word	0x0800bdd5
 800bd2c:	0800bdd5 	.word	0x0800bdd5
 800bd30:	0800bdd5 	.word	0x0800bdd5
 800bd34:	0800bdd5 	.word	0x0800bdd5
 800bd38:	0800bdd5 	.word	0x0800bdd5
 800bd3c:	0800bdd5 	.word	0x0800bdd5
 800bd40:	0800bdb5 	.word	0x0800bdb5
 800bd44:	0800bdd5 	.word	0x0800bdd5
 800bd48:	0800bdd5 	.word	0x0800bdd5
 800bd4c:	0800bdd5 	.word	0x0800bdd5
 800bd50:	0800bdd5 	.word	0x0800bdd5
 800bd54:	0800bdd5 	.word	0x0800bdd5
 800bd58:	0800bdd5 	.word	0x0800bdd5
 800bd5c:	0800bdd5 	.word	0x0800bdd5
 800bd60:	0800bdbd 	.word	0x0800bdbd
 800bd64:	0800bdd5 	.word	0x0800bdd5
 800bd68:	0800bdd5 	.word	0x0800bdd5
 800bd6c:	0800bdd5 	.word	0x0800bdd5
 800bd70:	0800bdd5 	.word	0x0800bdd5
 800bd74:	0800bdd5 	.word	0x0800bdd5
 800bd78:	0800bdd5 	.word	0x0800bdd5
 800bd7c:	0800bdd5 	.word	0x0800bdd5
 800bd80:	0800bdc5 	.word	0x0800bdc5
 800bd84:	0800bdd5 	.word	0x0800bdd5
 800bd88:	0800bdd5 	.word	0x0800bdd5
 800bd8c:	0800bdd5 	.word	0x0800bdd5
 800bd90:	0800bdd5 	.word	0x0800bdd5
 800bd94:	0800bdd5 	.word	0x0800bdd5
 800bd98:	0800bdd5 	.word	0x0800bdd5
 800bd9c:	0800bdd5 	.word	0x0800bdd5
 800bda0:	0800bdcd 	.word	0x0800bdcd
 800bda4:	2301      	movs	r3, #1
 800bda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdaa:	e0bc      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bdac:	2304      	movs	r3, #4
 800bdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdb2:	e0b8      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bdb4:	2308      	movs	r3, #8
 800bdb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdba:	e0b4      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bdbc:	2310      	movs	r3, #16
 800bdbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdc2:	e0b0      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bdc4:	2320      	movs	r3, #32
 800bdc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdca:	e0ac      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bdcc:	2340      	movs	r3, #64	; 0x40
 800bdce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdd2:	e0a8      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bdd4:	2380      	movs	r3, #128	; 0x80
 800bdd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdda:	e0a4      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a90      	ldr	r2, [pc, #576]	; (800c024 <UART_SetConfig+0x6a0>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d130      	bne.n	800be48 <UART_SetConfig+0x4c4>
 800bde6:	4b8e      	ldr	r3, [pc, #568]	; (800c020 <UART_SetConfig+0x69c>)
 800bde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdea:	f003 0307 	and.w	r3, r3, #7
 800bdee:	2b05      	cmp	r3, #5
 800bdf0:	d826      	bhi.n	800be40 <UART_SetConfig+0x4bc>
 800bdf2:	a201      	add	r2, pc, #4	; (adr r2, 800bdf8 <UART_SetConfig+0x474>)
 800bdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf8:	0800be11 	.word	0x0800be11
 800bdfc:	0800be19 	.word	0x0800be19
 800be00:	0800be21 	.word	0x0800be21
 800be04:	0800be29 	.word	0x0800be29
 800be08:	0800be31 	.word	0x0800be31
 800be0c:	0800be39 	.word	0x0800be39
 800be10:	2300      	movs	r3, #0
 800be12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be16:	e086      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be18:	2304      	movs	r3, #4
 800be1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be1e:	e082      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be20:	2308      	movs	r3, #8
 800be22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be26:	e07e      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be28:	2310      	movs	r3, #16
 800be2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be2e:	e07a      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be30:	2320      	movs	r3, #32
 800be32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be36:	e076      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be38:	2340      	movs	r3, #64	; 0x40
 800be3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be3e:	e072      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be40:	2380      	movs	r3, #128	; 0x80
 800be42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be46:	e06e      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a76      	ldr	r2, [pc, #472]	; (800c028 <UART_SetConfig+0x6a4>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d130      	bne.n	800beb4 <UART_SetConfig+0x530>
 800be52:	4b73      	ldr	r3, [pc, #460]	; (800c020 <UART_SetConfig+0x69c>)
 800be54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be56:	f003 0307 	and.w	r3, r3, #7
 800be5a:	2b05      	cmp	r3, #5
 800be5c:	d826      	bhi.n	800beac <UART_SetConfig+0x528>
 800be5e:	a201      	add	r2, pc, #4	; (adr r2, 800be64 <UART_SetConfig+0x4e0>)
 800be60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be64:	0800be7d 	.word	0x0800be7d
 800be68:	0800be85 	.word	0x0800be85
 800be6c:	0800be8d 	.word	0x0800be8d
 800be70:	0800be95 	.word	0x0800be95
 800be74:	0800be9d 	.word	0x0800be9d
 800be78:	0800bea5 	.word	0x0800bea5
 800be7c:	2300      	movs	r3, #0
 800be7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be82:	e050      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be84:	2304      	movs	r3, #4
 800be86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be8a:	e04c      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be8c:	2308      	movs	r3, #8
 800be8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be92:	e048      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be94:	2310      	movs	r3, #16
 800be96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be9a:	e044      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800be9c:	2320      	movs	r3, #32
 800be9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bea2:	e040      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bea4:	2340      	movs	r3, #64	; 0x40
 800bea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beaa:	e03c      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800beac:	2380      	movs	r3, #128	; 0x80
 800beae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beb2:	e038      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a5c      	ldr	r2, [pc, #368]	; (800c02c <UART_SetConfig+0x6a8>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d130      	bne.n	800bf20 <UART_SetConfig+0x59c>
 800bebe:	4b58      	ldr	r3, [pc, #352]	; (800c020 <UART_SetConfig+0x69c>)
 800bec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bec2:	f003 0307 	and.w	r3, r3, #7
 800bec6:	2b05      	cmp	r3, #5
 800bec8:	d826      	bhi.n	800bf18 <UART_SetConfig+0x594>
 800beca:	a201      	add	r2, pc, #4	; (adr r2, 800bed0 <UART_SetConfig+0x54c>)
 800becc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed0:	0800bee9 	.word	0x0800bee9
 800bed4:	0800bef1 	.word	0x0800bef1
 800bed8:	0800bef9 	.word	0x0800bef9
 800bedc:	0800bf01 	.word	0x0800bf01
 800bee0:	0800bf09 	.word	0x0800bf09
 800bee4:	0800bf11 	.word	0x0800bf11
 800bee8:	2302      	movs	r3, #2
 800beea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beee:	e01a      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bef0:	2304      	movs	r3, #4
 800bef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bef6:	e016      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bef8:	2308      	movs	r3, #8
 800befa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800befe:	e012      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bf00:	2310      	movs	r3, #16
 800bf02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf06:	e00e      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bf08:	2320      	movs	r3, #32
 800bf0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf0e:	e00a      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bf10:	2340      	movs	r3, #64	; 0x40
 800bf12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf16:	e006      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bf18:	2380      	movs	r3, #128	; 0x80
 800bf1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf1e:	e002      	b.n	800bf26 <UART_SetConfig+0x5a2>
 800bf20:	2380      	movs	r3, #128	; 0x80
 800bf22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a40      	ldr	r2, [pc, #256]	; (800c02c <UART_SetConfig+0x6a8>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	f040 80ef 	bne.w	800c110 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf36:	2b20      	cmp	r3, #32
 800bf38:	dc46      	bgt.n	800bfc8 <UART_SetConfig+0x644>
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	f2c0 8081 	blt.w	800c042 <UART_SetConfig+0x6be>
 800bf40:	3b02      	subs	r3, #2
 800bf42:	2b1e      	cmp	r3, #30
 800bf44:	d87d      	bhi.n	800c042 <UART_SetConfig+0x6be>
 800bf46:	a201      	add	r2, pc, #4	; (adr r2, 800bf4c <UART_SetConfig+0x5c8>)
 800bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4c:	0800bfcf 	.word	0x0800bfcf
 800bf50:	0800c043 	.word	0x0800c043
 800bf54:	0800bfd7 	.word	0x0800bfd7
 800bf58:	0800c043 	.word	0x0800c043
 800bf5c:	0800c043 	.word	0x0800c043
 800bf60:	0800c043 	.word	0x0800c043
 800bf64:	0800bfe7 	.word	0x0800bfe7
 800bf68:	0800c043 	.word	0x0800c043
 800bf6c:	0800c043 	.word	0x0800c043
 800bf70:	0800c043 	.word	0x0800c043
 800bf74:	0800c043 	.word	0x0800c043
 800bf78:	0800c043 	.word	0x0800c043
 800bf7c:	0800c043 	.word	0x0800c043
 800bf80:	0800c043 	.word	0x0800c043
 800bf84:	0800bff7 	.word	0x0800bff7
 800bf88:	0800c043 	.word	0x0800c043
 800bf8c:	0800c043 	.word	0x0800c043
 800bf90:	0800c043 	.word	0x0800c043
 800bf94:	0800c043 	.word	0x0800c043
 800bf98:	0800c043 	.word	0x0800c043
 800bf9c:	0800c043 	.word	0x0800c043
 800bfa0:	0800c043 	.word	0x0800c043
 800bfa4:	0800c043 	.word	0x0800c043
 800bfa8:	0800c043 	.word	0x0800c043
 800bfac:	0800c043 	.word	0x0800c043
 800bfb0:	0800c043 	.word	0x0800c043
 800bfb4:	0800c043 	.word	0x0800c043
 800bfb8:	0800c043 	.word	0x0800c043
 800bfbc:	0800c043 	.word	0x0800c043
 800bfc0:	0800c043 	.word	0x0800c043
 800bfc4:	0800c035 	.word	0x0800c035
 800bfc8:	2b40      	cmp	r3, #64	; 0x40
 800bfca:	d036      	beq.n	800c03a <UART_SetConfig+0x6b6>
 800bfcc:	e039      	b.n	800c042 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bfce:	f7fb ff7f 	bl	8007ed0 <HAL_RCCEx_GetD3PCLK1Freq>
 800bfd2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bfd4:	e03b      	b.n	800c04e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfd6:	f107 0314 	add.w	r3, r7, #20
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fb ff8e 	bl	8007efc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfe4:	e033      	b.n	800c04e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfe6:	f107 0308 	add.w	r3, r7, #8
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fc f8da 	bl	80081a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bff4:	e02b      	b.n	800c04e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bff6:	4b0a      	ldr	r3, [pc, #40]	; (800c020 <UART_SetConfig+0x69c>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 0320 	and.w	r3, r3, #32
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d009      	beq.n	800c016 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c002:	4b07      	ldr	r3, [pc, #28]	; (800c020 <UART_SetConfig+0x69c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	08db      	lsrs	r3, r3, #3
 800c008:	f003 0303 	and.w	r3, r3, #3
 800c00c:	4a08      	ldr	r2, [pc, #32]	; (800c030 <UART_SetConfig+0x6ac>)
 800c00e:	fa22 f303 	lsr.w	r3, r2, r3
 800c012:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c014:	e01b      	b.n	800c04e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800c016:	4b06      	ldr	r3, [pc, #24]	; (800c030 <UART_SetConfig+0x6ac>)
 800c018:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c01a:	e018      	b.n	800c04e <UART_SetConfig+0x6ca>
 800c01c:	40011400 	.word	0x40011400
 800c020:	58024400 	.word	0x58024400
 800c024:	40007800 	.word	0x40007800
 800c028:	40007c00 	.word	0x40007c00
 800c02c:	58000c00 	.word	0x58000c00
 800c030:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c034:	4bc4      	ldr	r3, [pc, #784]	; (800c348 <UART_SetConfig+0x9c4>)
 800c036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c038:	e009      	b.n	800c04e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c03e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c040:	e005      	b.n	800c04e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c042:	2300      	movs	r3, #0
 800c044:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c04c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	2b00      	cmp	r3, #0
 800c052:	f000 81da 	beq.w	800c40a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05a:	4abc      	ldr	r2, [pc, #752]	; (800c34c <UART_SetConfig+0x9c8>)
 800c05c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c060:	461a      	mov	r2, r3
 800c062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c064:	fbb3 f3f2 	udiv	r3, r3, r2
 800c068:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685a      	ldr	r2, [r3, #4]
 800c06e:	4613      	mov	r3, r2
 800c070:	005b      	lsls	r3, r3, #1
 800c072:	4413      	add	r3, r2
 800c074:	6a3a      	ldr	r2, [r7, #32]
 800c076:	429a      	cmp	r2, r3
 800c078:	d305      	bcc.n	800c086 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c080:	6a3a      	ldr	r2, [r7, #32]
 800c082:	429a      	cmp	r2, r3
 800c084:	d903      	bls.n	800c08e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c08c:	e1bd      	b.n	800c40a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	4618      	mov	r0, r3
 800c092:	f04f 0100 	mov.w	r1, #0
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09a:	4aac      	ldr	r2, [pc, #688]	; (800c34c <UART_SetConfig+0x9c8>)
 800c09c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	f04f 0300 	mov.w	r3, #0
 800c0a6:	f7f4 f917 	bl	80002d8 <__aeabi_uldivmod>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	f04f 0200 	mov.w	r2, #0
 800c0b6:	f04f 0300 	mov.w	r3, #0
 800c0ba:	020b      	lsls	r3, r1, #8
 800c0bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c0c0:	0202      	lsls	r2, r0, #8
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	6849      	ldr	r1, [r1, #4]
 800c0c6:	0849      	lsrs	r1, r1, #1
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	f04f 0100 	mov.w	r1, #0
 800c0ce:	1814      	adds	r4, r2, r0
 800c0d0:	eb43 0501 	adc.w	r5, r3, r1
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	f04f 0300 	mov.w	r3, #0
 800c0de:	4620      	mov	r0, r4
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	f7f4 f8f9 	bl	80002d8 <__aeabi_uldivmod>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0f4:	d308      	bcc.n	800c108 <UART_SetConfig+0x784>
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0fc:	d204      	bcs.n	800c108 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c104:	60da      	str	r2, [r3, #12]
 800c106:	e180      	b.n	800c40a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c10e:	e17c      	b.n	800c40a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	69db      	ldr	r3, [r3, #28]
 800c114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c118:	f040 80bf 	bne.w	800c29a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c11c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c120:	2b20      	cmp	r3, #32
 800c122:	dc49      	bgt.n	800c1b8 <UART_SetConfig+0x834>
 800c124:	2b00      	cmp	r3, #0
 800c126:	db7c      	blt.n	800c222 <UART_SetConfig+0x89e>
 800c128:	2b20      	cmp	r3, #32
 800c12a:	d87a      	bhi.n	800c222 <UART_SetConfig+0x89e>
 800c12c:	a201      	add	r2, pc, #4	; (adr r2, 800c134 <UART_SetConfig+0x7b0>)
 800c12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c132:	bf00      	nop
 800c134:	0800c1bf 	.word	0x0800c1bf
 800c138:	0800c1c7 	.word	0x0800c1c7
 800c13c:	0800c223 	.word	0x0800c223
 800c140:	0800c223 	.word	0x0800c223
 800c144:	0800c1cf 	.word	0x0800c1cf
 800c148:	0800c223 	.word	0x0800c223
 800c14c:	0800c223 	.word	0x0800c223
 800c150:	0800c223 	.word	0x0800c223
 800c154:	0800c1df 	.word	0x0800c1df
 800c158:	0800c223 	.word	0x0800c223
 800c15c:	0800c223 	.word	0x0800c223
 800c160:	0800c223 	.word	0x0800c223
 800c164:	0800c223 	.word	0x0800c223
 800c168:	0800c223 	.word	0x0800c223
 800c16c:	0800c223 	.word	0x0800c223
 800c170:	0800c223 	.word	0x0800c223
 800c174:	0800c1ef 	.word	0x0800c1ef
 800c178:	0800c223 	.word	0x0800c223
 800c17c:	0800c223 	.word	0x0800c223
 800c180:	0800c223 	.word	0x0800c223
 800c184:	0800c223 	.word	0x0800c223
 800c188:	0800c223 	.word	0x0800c223
 800c18c:	0800c223 	.word	0x0800c223
 800c190:	0800c223 	.word	0x0800c223
 800c194:	0800c223 	.word	0x0800c223
 800c198:	0800c223 	.word	0x0800c223
 800c19c:	0800c223 	.word	0x0800c223
 800c1a0:	0800c223 	.word	0x0800c223
 800c1a4:	0800c223 	.word	0x0800c223
 800c1a8:	0800c223 	.word	0x0800c223
 800c1ac:	0800c223 	.word	0x0800c223
 800c1b0:	0800c223 	.word	0x0800c223
 800c1b4:	0800c215 	.word	0x0800c215
 800c1b8:	2b40      	cmp	r3, #64	; 0x40
 800c1ba:	d02e      	beq.n	800c21a <UART_SetConfig+0x896>
 800c1bc:	e031      	b.n	800c222 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1be:	f7fa ff1b 	bl	8006ff8 <HAL_RCC_GetPCLK1Freq>
 800c1c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1c4:	e033      	b.n	800c22e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1c6:	f7fa ff2d 	bl	8007024 <HAL_RCC_GetPCLK2Freq>
 800c1ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1cc:	e02f      	b.n	800c22e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1ce:	f107 0314 	add.w	r3, r7, #20
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fb fe92 	bl	8007efc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1dc:	e027      	b.n	800c22e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fb ffde 	bl	80081a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1ec:	e01f      	b.n	800c22e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1ee:	4b58      	ldr	r3, [pc, #352]	; (800c350 <UART_SetConfig+0x9cc>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f003 0320 	and.w	r3, r3, #32
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d009      	beq.n	800c20e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1fa:	4b55      	ldr	r3, [pc, #340]	; (800c350 <UART_SetConfig+0x9cc>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	08db      	lsrs	r3, r3, #3
 800c200:	f003 0303 	and.w	r3, r3, #3
 800c204:	4a53      	ldr	r2, [pc, #332]	; (800c354 <UART_SetConfig+0x9d0>)
 800c206:	fa22 f303 	lsr.w	r3, r2, r3
 800c20a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c20c:	e00f      	b.n	800c22e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c20e:	4b51      	ldr	r3, [pc, #324]	; (800c354 <UART_SetConfig+0x9d0>)
 800c210:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c212:	e00c      	b.n	800c22e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c214:	4b4c      	ldr	r3, [pc, #304]	; (800c348 <UART_SetConfig+0x9c4>)
 800c216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c218:	e009      	b.n	800c22e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c21e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c220:	e005      	b.n	800c22e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c222:	2300      	movs	r3, #0
 800c224:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c22c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 80ea 	beq.w	800c40a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23a:	4a44      	ldr	r2, [pc, #272]	; (800c34c <UART_SetConfig+0x9c8>)
 800c23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c240:	461a      	mov	r2, r3
 800c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c244:	fbb3 f3f2 	udiv	r3, r3, r2
 800c248:	005a      	lsls	r2, r3, #1
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	085b      	lsrs	r3, r3, #1
 800c250:	441a      	add	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	fbb2 f3f3 	udiv	r3, r2, r3
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c260:	2b0f      	cmp	r3, #15
 800c262:	d916      	bls.n	800c292 <UART_SetConfig+0x90e>
 800c264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c26a:	d212      	bcs.n	800c292 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26e:	b29b      	uxth	r3, r3
 800c270:	f023 030f 	bic.w	r3, r3, #15
 800c274:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c278:	085b      	lsrs	r3, r3, #1
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	f003 0307 	and.w	r3, r3, #7
 800c280:	b29a      	uxth	r2, r3
 800c282:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c284:	4313      	orrs	r3, r2
 800c286:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c28e:	60da      	str	r2, [r3, #12]
 800c290:	e0bb      	b.n	800c40a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c298:	e0b7      	b.n	800c40a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c29a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c29e:	2b20      	cmp	r3, #32
 800c2a0:	dc4a      	bgt.n	800c338 <UART_SetConfig+0x9b4>
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f2c0 8086 	blt.w	800c3b4 <UART_SetConfig+0xa30>
 800c2a8:	2b20      	cmp	r3, #32
 800c2aa:	f200 8083 	bhi.w	800c3b4 <UART_SetConfig+0xa30>
 800c2ae:	a201      	add	r2, pc, #4	; (adr r2, 800c2b4 <UART_SetConfig+0x930>)
 800c2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b4:	0800c33f 	.word	0x0800c33f
 800c2b8:	0800c359 	.word	0x0800c359
 800c2bc:	0800c3b5 	.word	0x0800c3b5
 800c2c0:	0800c3b5 	.word	0x0800c3b5
 800c2c4:	0800c361 	.word	0x0800c361
 800c2c8:	0800c3b5 	.word	0x0800c3b5
 800c2cc:	0800c3b5 	.word	0x0800c3b5
 800c2d0:	0800c3b5 	.word	0x0800c3b5
 800c2d4:	0800c371 	.word	0x0800c371
 800c2d8:	0800c3b5 	.word	0x0800c3b5
 800c2dc:	0800c3b5 	.word	0x0800c3b5
 800c2e0:	0800c3b5 	.word	0x0800c3b5
 800c2e4:	0800c3b5 	.word	0x0800c3b5
 800c2e8:	0800c3b5 	.word	0x0800c3b5
 800c2ec:	0800c3b5 	.word	0x0800c3b5
 800c2f0:	0800c3b5 	.word	0x0800c3b5
 800c2f4:	0800c381 	.word	0x0800c381
 800c2f8:	0800c3b5 	.word	0x0800c3b5
 800c2fc:	0800c3b5 	.word	0x0800c3b5
 800c300:	0800c3b5 	.word	0x0800c3b5
 800c304:	0800c3b5 	.word	0x0800c3b5
 800c308:	0800c3b5 	.word	0x0800c3b5
 800c30c:	0800c3b5 	.word	0x0800c3b5
 800c310:	0800c3b5 	.word	0x0800c3b5
 800c314:	0800c3b5 	.word	0x0800c3b5
 800c318:	0800c3b5 	.word	0x0800c3b5
 800c31c:	0800c3b5 	.word	0x0800c3b5
 800c320:	0800c3b5 	.word	0x0800c3b5
 800c324:	0800c3b5 	.word	0x0800c3b5
 800c328:	0800c3b5 	.word	0x0800c3b5
 800c32c:	0800c3b5 	.word	0x0800c3b5
 800c330:	0800c3b5 	.word	0x0800c3b5
 800c334:	0800c3a7 	.word	0x0800c3a7
 800c338:	2b40      	cmp	r3, #64	; 0x40
 800c33a:	d037      	beq.n	800c3ac <UART_SetConfig+0xa28>
 800c33c:	e03a      	b.n	800c3b4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c33e:	f7fa fe5b 	bl	8006ff8 <HAL_RCC_GetPCLK1Freq>
 800c342:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c344:	e03c      	b.n	800c3c0 <UART_SetConfig+0xa3c>
 800c346:	bf00      	nop
 800c348:	003d0900 	.word	0x003d0900
 800c34c:	0800d3d8 	.word	0x0800d3d8
 800c350:	58024400 	.word	0x58024400
 800c354:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c358:	f7fa fe64 	bl	8007024 <HAL_RCC_GetPCLK2Freq>
 800c35c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c35e:	e02f      	b.n	800c3c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c360:	f107 0314 	add.w	r3, r7, #20
 800c364:	4618      	mov	r0, r3
 800c366:	f7fb fdc9 	bl	8007efc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c36e:	e027      	b.n	800c3c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c370:	f107 0308 	add.w	r3, r7, #8
 800c374:	4618      	mov	r0, r3
 800c376:	f7fb ff15 	bl	80081a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c37e:	e01f      	b.n	800c3c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c380:	4b2c      	ldr	r3, [pc, #176]	; (800c434 <UART_SetConfig+0xab0>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 0320 	and.w	r3, r3, #32
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d009      	beq.n	800c3a0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c38c:	4b29      	ldr	r3, [pc, #164]	; (800c434 <UART_SetConfig+0xab0>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	08db      	lsrs	r3, r3, #3
 800c392:	f003 0303 	and.w	r3, r3, #3
 800c396:	4a28      	ldr	r2, [pc, #160]	; (800c438 <UART_SetConfig+0xab4>)
 800c398:	fa22 f303 	lsr.w	r3, r2, r3
 800c39c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c39e:	e00f      	b.n	800c3c0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c3a0:	4b25      	ldr	r3, [pc, #148]	; (800c438 <UART_SetConfig+0xab4>)
 800c3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3a4:	e00c      	b.n	800c3c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3a6:	4b25      	ldr	r3, [pc, #148]	; (800c43c <UART_SetConfig+0xab8>)
 800c3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3aa:	e009      	b.n	800c3c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3b2:	e005      	b.n	800c3c0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c3be:	bf00      	nop
    }

    if (pclk != 0U)
 800c3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d021      	beq.n	800c40a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ca:	4a1d      	ldr	r2, [pc, #116]	; (800c440 <UART_SetConfig+0xabc>)
 800c3cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d4:	fbb3 f2f2 	udiv	r2, r3, r2
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	085b      	lsrs	r3, r3, #1
 800c3de:	441a      	add	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ee:	2b0f      	cmp	r3, #15
 800c3f0:	d908      	bls.n	800c404 <UART_SetConfig+0xa80>
 800c3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3f8:	d204      	bcs.n	800c404 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c400:	60da      	str	r2, [r3, #12]
 800c402:	e002      	b.n	800c40a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c426:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3738      	adds	r7, #56	; 0x38
 800c42e:	46bd      	mov	sp, r7
 800c430:	bdb0      	pop	{r4, r5, r7, pc}
 800c432:	bf00      	nop
 800c434:	58024400 	.word	0x58024400
 800c438:	03d09000 	.word	0x03d09000
 800c43c:	003d0900 	.word	0x003d0900
 800c440:	0800d3d8 	.word	0x0800d3d8

0800c444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c450:	f003 0301 	and.w	r3, r3, #1
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00a      	beq.n	800c46e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	430a      	orrs	r2, r1
 800c46c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c472:	f003 0302 	and.w	r3, r3, #2
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00a      	beq.n	800c490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	430a      	orrs	r2, r1
 800c48e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c494:	f003 0304 	and.w	r3, r3, #4
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00a      	beq.n	800c4b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b6:	f003 0308 	and.w	r3, r3, #8
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00a      	beq.n	800c4d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	430a      	orrs	r2, r1
 800c4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d8:	f003 0310 	and.w	r3, r3, #16
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00a      	beq.n	800c4f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fa:	f003 0320 	and.w	r3, r3, #32
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00a      	beq.n	800c518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	430a      	orrs	r2, r1
 800c516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c520:	2b00      	cmp	r3, #0
 800c522:	d01a      	beq.n	800c55a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	430a      	orrs	r2, r1
 800c538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c53e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c542:	d10a      	bne.n	800c55a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	430a      	orrs	r2, r1
 800c558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00a      	beq.n	800c57c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	430a      	orrs	r2, r1
 800c57a:	605a      	str	r2, [r3, #4]
  }
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af02      	add	r7, sp, #8
 800c58e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c598:	f7f5 fe44 	bl	8002224 <HAL_GetTick>
 800c59c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 0308 	and.w	r3, r3, #8
 800c5a8:	2b08      	cmp	r3, #8
 800c5aa:	d10e      	bne.n	800c5ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f82f 	bl	800c61e <UART_WaitOnFlagUntilTimeout>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e025      	b.n	800c616 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 0304 	and.w	r3, r3, #4
 800c5d4:	2b04      	cmp	r3, #4
 800c5d6:	d10e      	bne.n	800c5f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f819 	bl	800c61e <UART_WaitOnFlagUntilTimeout>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d001      	beq.n	800c5f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	e00f      	b.n	800c616 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2220      	movs	r2, #32
 800c5fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2220      	movs	r2, #32
 800c602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b084      	sub	sp, #16
 800c622:	af00      	add	r7, sp, #0
 800c624:	60f8      	str	r0, [r7, #12]
 800c626:	60b9      	str	r1, [r7, #8]
 800c628:	603b      	str	r3, [r7, #0]
 800c62a:	4613      	mov	r3, r2
 800c62c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c62e:	e062      	b.n	800c6f6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c636:	d05e      	beq.n	800c6f6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c638:	f7f5 fdf4 	bl	8002224 <HAL_GetTick>
 800c63c:	4602      	mov	r2, r0
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	69ba      	ldr	r2, [r7, #24]
 800c644:	429a      	cmp	r2, r3
 800c646:	d302      	bcc.n	800c64e <UART_WaitOnFlagUntilTimeout+0x30>
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d11d      	bne.n	800c68a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c65c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	689a      	ldr	r2, [r3, #8]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f022 0201 	bic.w	r2, r2, #1
 800c66c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2220      	movs	r2, #32
 800c672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2220      	movs	r2, #32
 800c67a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c686:	2303      	movs	r3, #3
 800c688:	e045      	b.n	800c716 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f003 0304 	and.w	r3, r3, #4
 800c694:	2b00      	cmp	r3, #0
 800c696:	d02e      	beq.n	800c6f6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	69db      	ldr	r3, [r3, #28]
 800c69e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6a6:	d126      	bne.n	800c6f6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c6c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	689a      	ldr	r2, [r3, #8]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f022 0201 	bic.w	r2, r2, #1
 800c6d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2220      	movs	r2, #32
 800c6d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2220      	movs	r2, #32
 800c6de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2220      	movs	r2, #32
 800c6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c6f2:	2303      	movs	r3, #3
 800c6f4:	e00f      	b.n	800c716 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	69da      	ldr	r2, [r3, #28]
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	4013      	ands	r3, r2
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	429a      	cmp	r2, r3
 800c704:	bf0c      	ite	eq
 800c706:	2301      	moveq	r3, #1
 800c708:	2300      	movne	r3, #0
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	461a      	mov	r2, r3
 800c70e:	79fb      	ldrb	r3, [r7, #7]
 800c710:	429a      	cmp	r2, r3
 800c712:	d08d      	beq.n	800c630 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
	...

0800c720 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	4613      	mov	r3, r2
 800c72c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	88fa      	ldrh	r2, [r7, #6]
 800c738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2200      	movs	r2, #0
 800c740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2222      	movs	r2, #34	; 0x22
 800c748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c750:	2b00      	cmp	r3, #0
 800c752:	d02c      	beq.n	800c7ae <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c758:	4a25      	ldr	r2, [pc, #148]	; (800c7f0 <UART_Start_Receive_DMA+0xd0>)
 800c75a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c760:	4a24      	ldr	r2, [pc, #144]	; (800c7f4 <UART_Start_Receive_DMA+0xd4>)
 800c762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c768:	4a23      	ldr	r2, [pc, #140]	; (800c7f8 <UART_Start_Receive_DMA+0xd8>)
 800c76a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c770:	2200      	movs	r2, #0
 800c772:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	3324      	adds	r3, #36	; 0x24
 800c77e:	4619      	mov	r1, r3
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c784:	461a      	mov	r2, r3
 800c786:	88fb      	ldrh	r3, [r7, #6]
 800c788:	f7f6 fa1c 	bl	8002bc4 <HAL_DMA_Start_IT>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00d      	beq.n	800c7ae <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2210      	movs	r2, #16
 800c796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2220      	movs	r2, #32
 800c7a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e01c      	b.n	800c7e8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7c4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	689a      	ldr	r2, [r3, #8]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f042 0201 	orr.w	r2, r2, #1
 800c7d4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7e4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	0800c89d 	.word	0x0800c89d
 800c7f4:	0800c933 	.word	0x0800c933
 800c7f8:	0800c96b 	.word	0x0800c96b

0800c7fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c812:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689a      	ldr	r2, [r3, #8]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c822:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2220      	movs	r2, #32
 800c828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c84e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	6899      	ldr	r1, [r3, #8]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	4b0f      	ldr	r3, [pc, #60]	; (800c898 <UART_EndRxTransfer+0x60>)
 800c85c:	400b      	ands	r3, r1
 800c85e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c864:	2b01      	cmp	r3, #1
 800c866:	d107      	bne.n	800c878 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f022 0210 	bic.w	r2, r2, #16
 800c876:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2220      	movs	r2, #32
 800c87c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	effffffe 	.word	0xeffffffe

0800c89c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	69db      	ldr	r3, [r3, #28]
 800c8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b2:	d02b      	beq.n	800c90c <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8ca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689a      	ldr	r2, [r3, #8]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f022 0201 	bic.w	r2, r2, #1
 800c8da:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	689a      	ldr	r2, [r3, #8]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8ea:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2220      	movs	r2, #32
 800c8f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d107      	bne.n	800c90c <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f022 0210 	bic.w	r2, r2, #16
 800c90a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c910:	2b01      	cmp	r3, #1
 800c912:	d107      	bne.n	800c924 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c91a:	4619      	mov	r1, r3
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f7ff f825 	bl	800b96c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c922:	e002      	b.n	800c92a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f7ff f803 	bl	800b930 <HAL_UART_RxCpltCallback>
}
 800c92a:	bf00      	nop
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c944:	2b01      	cmp	r3, #1
 800c946:	d109      	bne.n	800c95c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c94e:	085b      	lsrs	r3, r3, #1
 800c950:	b29b      	uxth	r3, r3
 800c952:	4619      	mov	r1, r3
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff f809 	bl	800b96c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c95a:	e002      	b.n	800c962 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f7fe fff1 	bl	800b944 <HAL_UART_RxHalfCpltCallback>
}
 800c962:	bf00      	nop
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b086      	sub	sp, #24
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c97e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c986:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c992:	2b80      	cmp	r3, #128	; 0x80
 800c994:	d109      	bne.n	800c9aa <UART_DMAError+0x40>
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	2b21      	cmp	r3, #33	; 0x21
 800c99a:	d106      	bne.n	800c9aa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c9a4:	6978      	ldr	r0, [r7, #20]
 800c9a6:	f7ff ff29 	bl	800c7fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b4:	2b40      	cmp	r3, #64	; 0x40
 800c9b6:	d109      	bne.n	800c9cc <UART_DMAError+0x62>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2b22      	cmp	r3, #34	; 0x22
 800c9bc:	d106      	bne.n	800c9cc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c9c6:	6978      	ldr	r0, [r7, #20]
 800c9c8:	f7ff ff36 	bl	800c838 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9d2:	f043 0210 	orr.w	r2, r3, #16
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9dc:	6978      	ldr	r0, [r7, #20]
 800c9de:	f7fe ffbb 	bl	800b958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9e2:	bf00      	nop
 800c9e4:	3718      	adds	r7, #24
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b084      	sub	sp, #16
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f7fe ffa5 	bl	800b958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca0e:	bf00      	nop
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b082      	sub	sp, #8
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca2c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2220      	movs	r2, #32
 800ca32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7fe ff6d 	bl	800b91c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca42:	bf00      	nop
 800ca44:	3708      	adds	r7, #8
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b083      	sub	sp, #12
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca52:	bf00      	nop
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b083      	sub	sp, #12
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca66:	bf00      	nop
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ca72:	b480      	push	{r7}
 800ca74:	b083      	sub	sp, #12
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ca7a:	bf00      	nop
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr

0800ca86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca86:	b480      	push	{r7}
 800ca88:	b085      	sub	sp, #20
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d101      	bne.n	800ca9c <HAL_UARTEx_DisableFifoMode+0x16>
 800ca98:	2302      	movs	r3, #2
 800ca9a:	e027      	b.n	800caec <HAL_UARTEx_DisableFifoMode+0x66>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2224      	movs	r2, #36	; 0x24
 800caa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f022 0201 	bic.w	r2, r2, #1
 800cac2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800caca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2220      	movs	r2, #32
 800cade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d101      	bne.n	800cb10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	e02d      	b.n	800cb6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2224      	movs	r2, #36	; 0x24
 800cb1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f022 0201 	bic.w	r2, r2, #1
 800cb36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	430a      	orrs	r2, r1
 800cb4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 f84f 	bl	800cbf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68fa      	ldr	r2, [r7, #12]
 800cb58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2220      	movs	r2, #32
 800cb5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3710      	adds	r7, #16
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d101      	bne.n	800cb8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb88:	2302      	movs	r3, #2
 800cb8a:	e02d      	b.n	800cbe8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2224      	movs	r2, #36	; 0x24
 800cb98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f022 0201 	bic.w	r2, r2, #1
 800cbb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	430a      	orrs	r2, r1
 800cbc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f811 	bl	800cbf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2220      	movs	r2, #32
 800cbda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d108      	bne.n	800cc12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc10:	e031      	b.n	800cc76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc12:	2310      	movs	r3, #16
 800cc14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc16:	2310      	movs	r3, #16
 800cc18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	0e5b      	lsrs	r3, r3, #25
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	f003 0307 	and.w	r3, r3, #7
 800cc28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	0f5b      	lsrs	r3, r3, #29
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	f003 0307 	and.w	r3, r3, #7
 800cc38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc3a:	7bbb      	ldrb	r3, [r7, #14]
 800cc3c:	7b3a      	ldrb	r2, [r7, #12]
 800cc3e:	4911      	ldr	r1, [pc, #68]	; (800cc84 <UARTEx_SetNbDataToProcess+0x94>)
 800cc40:	5c8a      	ldrb	r2, [r1, r2]
 800cc42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc46:	7b3a      	ldrb	r2, [r7, #12]
 800cc48:	490f      	ldr	r1, [pc, #60]	; (800cc88 <UARTEx_SetNbDataToProcess+0x98>)
 800cc4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	7b7a      	ldrb	r2, [r7, #13]
 800cc5c:	4909      	ldr	r1, [pc, #36]	; (800cc84 <UARTEx_SetNbDataToProcess+0x94>)
 800cc5e:	5c8a      	ldrb	r2, [r1, r2]
 800cc60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc64:	7b7a      	ldrb	r2, [r7, #13]
 800cc66:	4908      	ldr	r1, [pc, #32]	; (800cc88 <UARTEx_SetNbDataToProcess+0x98>)
 800cc68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cc76:	bf00      	nop
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	0800d3f0 	.word	0x0800d3f0
 800cc88:	0800d3f8 	.word	0x0800d3f8

0800cc8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b084      	sub	sp, #16
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	f107 001c 	add.w	r0, r7, #28
 800cc9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d120      	bne.n	800cce6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	68da      	ldr	r2, [r3, #12]
 800ccb4:	4b2a      	ldr	r3, [pc, #168]	; (800cd60 <USB_CoreInit+0xd4>)
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ccc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d105      	bne.n	800ccda <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 fa60 	bl	800d1a0 <USB_CoreReset>
 800cce0:	4603      	mov	r3, r0
 800cce2:	73fb      	strb	r3, [r7, #15]
 800cce4:	e01a      	b.n	800cd1c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fa54 	bl	800d1a0 <USB_CoreReset>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ccfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d106      	bne.n	800cd10 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	639a      	str	r2, [r3, #56]	; 0x38
 800cd0e:	e005      	b.n	800cd1c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d116      	bne.n	800cd50 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cd30:	4b0c      	ldr	r3, [pc, #48]	; (800cd64 <USB_CoreInit+0xd8>)
 800cd32:	4313      	orrs	r3, r2
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	f043 0206 	orr.w	r2, r3, #6
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	f043 0220 	orr.w	r2, r3, #32
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd5c:	b004      	add	sp, #16
 800cd5e:	4770      	bx	lr
 800cd60:	ffbdffbf 	.word	0xffbdffbf
 800cd64:	03ee0000 	.word	0x03ee0000

0800cd68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	f023 0201 	bic.w	r2, r3, #1
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b082      	sub	sp, #8
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	460b      	mov	r3, r1
 800cd94:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cda2:	78fb      	ldrb	r3, [r7, #3]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d106      	bne.n	800cdb6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	60da      	str	r2, [r3, #12]
 800cdb4:	e00b      	b.n	800cdce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cdb6:	78fb      	ldrb	r3, [r7, #3]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d106      	bne.n	800cdca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	60da      	str	r2, [r3, #12]
 800cdc8:	e001      	b.n	800cdce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e003      	b.n	800cdd6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cdce:	2032      	movs	r0, #50	; 0x32
 800cdd0:	f7f5 fa34 	bl	800223c <HAL_Delay>

  return HAL_OK;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
	...

0800cde0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cde0:	b084      	sub	sp, #16
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b086      	sub	sp, #24
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cdee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	613b      	str	r3, [r7, #16]
 800cdfe:	e009      	b.n	800ce14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	3340      	adds	r3, #64	; 0x40
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	3301      	adds	r3, #1
 800ce12:	613b      	str	r3, [r7, #16]
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	2b0e      	cmp	r3, #14
 800ce18:	d9f2      	bls.n	800ce00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ce1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d11c      	bne.n	800ce5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce2e:	f043 0302 	orr.w	r3, r3, #2
 800ce32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	601a      	str	r2, [r3, #0]
 800ce58:	e005      	b.n	800ce66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	2300      	movs	r3, #0
 800ce70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce78:	4619      	mov	r1, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce80:	461a      	mov	r2, r3
 800ce82:	680b      	ldr	r3, [r1, #0]
 800ce84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d10c      	bne.n	800cea6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d104      	bne.n	800ce9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ce92:	2100      	movs	r1, #0
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 f949 	bl	800d12c <USB_SetDevSpeed>
 800ce9a:	e008      	b.n	800ceae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ce9c:	2101      	movs	r1, #1
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 f944 	bl	800d12c <USB_SetDevSpeed>
 800cea4:	e003      	b.n	800ceae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cea6:	2103      	movs	r1, #3
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f93f 	bl	800d12c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ceae:	2110      	movs	r1, #16
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f8f3 	bl	800d09c <USB_FlushTxFifo>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d001      	beq.n	800cec0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f911 	bl	800d0e8 <USB_FlushRxFifo>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d001      	beq.n	800ced0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced6:	461a      	mov	r2, r3
 800ced8:	2300      	movs	r3, #0
 800ceda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cee2:	461a      	mov	r2, r3
 800cee4:	2300      	movs	r3, #0
 800cee6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceee:	461a      	mov	r2, r3
 800cef0:	2300      	movs	r3, #0
 800cef2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cef4:	2300      	movs	r3, #0
 800cef6:	613b      	str	r3, [r7, #16]
 800cef8:	e043      	b.n	800cf82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	015a      	lsls	r2, r3, #5
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	4413      	add	r3, r2
 800cf02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf10:	d118      	bne.n	800cf44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10a      	bne.n	800cf2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	015a      	lsls	r2, r3, #5
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4413      	add	r3, r2
 800cf20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf24:	461a      	mov	r2, r3
 800cf26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf2a:	6013      	str	r3, [r2, #0]
 800cf2c:	e013      	b.n	800cf56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	015a      	lsls	r2, r3, #5
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	4413      	add	r3, r2
 800cf36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cf40:	6013      	str	r3, [r2, #0]
 800cf42:	e008      	b.n	800cf56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	015a      	lsls	r2, r3, #5
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf50:	461a      	mov	r2, r3
 800cf52:	2300      	movs	r3, #0
 800cf54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	015a      	lsls	r2, r3, #5
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf62:	461a      	mov	r2, r3
 800cf64:	2300      	movs	r3, #0
 800cf66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	015a      	lsls	r2, r3, #5
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4413      	add	r3, r2
 800cf70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf74:	461a      	mov	r2, r3
 800cf76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	613b      	str	r3, [r7, #16]
 800cf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf84:	693a      	ldr	r2, [r7, #16]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d3b7      	bcc.n	800cefa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	613b      	str	r3, [r7, #16]
 800cf8e:	e043      	b.n	800d018 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	015a      	lsls	r2, r3, #5
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	4413      	add	r3, r2
 800cf98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfa6:	d118      	bne.n	800cfda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d10a      	bne.n	800cfc4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	015a      	lsls	r2, r3, #5
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfba:	461a      	mov	r2, r3
 800cfbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cfc0:	6013      	str	r3, [r2, #0]
 800cfc2:	e013      	b.n	800cfec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	015a      	lsls	r2, r3, #5
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	4413      	add	r3, r2
 800cfcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	e008      	b.n	800cfec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	015a      	lsls	r2, r3, #5
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	2300      	movs	r3, #0
 800cfea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	015a      	lsls	r2, r3, #5
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cff8:	461a      	mov	r2, r3
 800cffa:	2300      	movs	r3, #0
 800cffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	015a      	lsls	r2, r3, #5
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	4413      	add	r3, r2
 800d006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d00a:	461a      	mov	r2, r3
 800d00c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d010:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	3301      	adds	r3, #1
 800d016:	613b      	str	r3, [r7, #16]
 800d018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01a:	693a      	ldr	r2, [r7, #16]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d3b7      	bcc.n	800cf90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d02e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d032:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d040:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d044:	2b00      	cmp	r3, #0
 800d046:	d105      	bne.n	800d054 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	699b      	ldr	r3, [r3, #24]
 800d04c:	f043 0210 	orr.w	r2, r3, #16
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	699a      	ldr	r2, [r3, #24]
 800d058:	4b0e      	ldr	r3, [pc, #56]	; (800d094 <USB_DevInit+0x2b4>)
 800d05a:	4313      	orrs	r3, r2
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d062:	2b00      	cmp	r3, #0
 800d064:	d005      	beq.n	800d072 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	f043 0208 	orr.w	r2, r3, #8
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d074:	2b01      	cmp	r3, #1
 800d076:	d105      	bne.n	800d084 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	699a      	ldr	r2, [r3, #24]
 800d07c:	4b06      	ldr	r3, [pc, #24]	; (800d098 <USB_DevInit+0x2b8>)
 800d07e:	4313      	orrs	r3, r2
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d084:	7dfb      	ldrb	r3, [r7, #23]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d090:	b004      	add	sp, #16
 800d092:	4770      	bx	lr
 800d094:	803c3800 	.word	0x803c3800
 800d098:	40000004 	.word	0x40000004

0800d09c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	019b      	lsls	r3, r3, #6
 800d0ae:	f043 0220 	orr.w	r2, r3, #32
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	60fb      	str	r3, [r7, #12]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	4a09      	ldr	r2, [pc, #36]	; (800d0e4 <USB_FlushTxFifo+0x48>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d901      	bls.n	800d0c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	e006      	b.n	800d0d6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	f003 0320 	and.w	r3, r3, #32
 800d0d0:	2b20      	cmp	r3, #32
 800d0d2:	d0f0      	beq.n	800d0b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3714      	adds	r7, #20
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	00030d40 	.word	0x00030d40

0800d0e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2210      	movs	r2, #16
 800d0f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	60fb      	str	r3, [r7, #12]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	4a09      	ldr	r2, [pc, #36]	; (800d128 <USB_FlushRxFifo+0x40>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d901      	bls.n	800d10c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d108:	2303      	movs	r3, #3
 800d10a:	e006      	b.n	800d11a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	f003 0310 	and.w	r3, r3, #16
 800d114:	2b10      	cmp	r3, #16
 800d116:	d0f0      	beq.n	800d0fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	00030d40 	.word	0x00030d40

0800d12c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	78fb      	ldrb	r3, [r7, #3]
 800d146:	68f9      	ldr	r1, [r7, #12]
 800d148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d14c:	4313      	orrs	r3, r2
 800d14e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3714      	adds	r7, #20
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr

0800d15e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d15e:	b480      	push	{r7}
 800d160:	b085      	sub	sp, #20
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d178:	f023 0303 	bic.w	r3, r3, #3
 800d17c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d18c:	f043 0302 	orr.w	r3, r3, #2
 800d190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	60fb      	str	r3, [r7, #12]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	4a13      	ldr	r2, [pc, #76]	; (800d204 <USB_CoreReset+0x64>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d901      	bls.n	800d1be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	e01b      	b.n	800d1f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	daf2      	bge.n	800d1ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	f043 0201 	orr.w	r2, r3, #1
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	60fb      	str	r3, [r7, #12]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	4a09      	ldr	r2, [pc, #36]	; (800d204 <USB_CoreReset+0x64>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d901      	bls.n	800d1e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d1e4:	2303      	movs	r3, #3
 800d1e6:	e006      	b.n	800d1f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d0f0      	beq.n	800d1d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3714      	adds	r7, #20
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	00030d40 	.word	0x00030d40

0800d208 <calloc>:
 800d208:	4b02      	ldr	r3, [pc, #8]	; (800d214 <calloc+0xc>)
 800d20a:	460a      	mov	r2, r1
 800d20c:	4601      	mov	r1, r0
 800d20e:	6818      	ldr	r0, [r3, #0]
 800d210:	f000 b842 	b.w	800d298 <_calloc_r>
 800d214:	2401715c 	.word	0x2401715c

0800d218 <__errno>:
 800d218:	4b01      	ldr	r3, [pc, #4]	; (800d220 <__errno+0x8>)
 800d21a:	6818      	ldr	r0, [r3, #0]
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	2401715c 	.word	0x2401715c

0800d224 <__libc_init_array>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	4d0d      	ldr	r5, [pc, #52]	; (800d25c <__libc_init_array+0x38>)
 800d228:	4c0d      	ldr	r4, [pc, #52]	; (800d260 <__libc_init_array+0x3c>)
 800d22a:	1b64      	subs	r4, r4, r5
 800d22c:	10a4      	asrs	r4, r4, #2
 800d22e:	2600      	movs	r6, #0
 800d230:	42a6      	cmp	r6, r4
 800d232:	d109      	bne.n	800d248 <__libc_init_array+0x24>
 800d234:	4d0b      	ldr	r5, [pc, #44]	; (800d264 <__libc_init_array+0x40>)
 800d236:	4c0c      	ldr	r4, [pc, #48]	; (800d268 <__libc_init_array+0x44>)
 800d238:	f000 f8b6 	bl	800d3a8 <_init>
 800d23c:	1b64      	subs	r4, r4, r5
 800d23e:	10a4      	asrs	r4, r4, #2
 800d240:	2600      	movs	r6, #0
 800d242:	42a6      	cmp	r6, r4
 800d244:	d105      	bne.n	800d252 <__libc_init_array+0x2e>
 800d246:	bd70      	pop	{r4, r5, r6, pc}
 800d248:	f855 3b04 	ldr.w	r3, [r5], #4
 800d24c:	4798      	blx	r3
 800d24e:	3601      	adds	r6, #1
 800d250:	e7ee      	b.n	800d230 <__libc_init_array+0xc>
 800d252:	f855 3b04 	ldr.w	r3, [r5], #4
 800d256:	4798      	blx	r3
 800d258:	3601      	adds	r6, #1
 800d25a:	e7f2      	b.n	800d242 <__libc_init_array+0x1e>
 800d25c:	0800d408 	.word	0x0800d408
 800d260:	0800d408 	.word	0x0800d408
 800d264:	0800d408 	.word	0x0800d408
 800d268:	0800d40c 	.word	0x0800d40c

0800d26c <memcpy>:
 800d26c:	440a      	add	r2, r1
 800d26e:	4291      	cmp	r1, r2
 800d270:	f100 33ff 	add.w	r3, r0, #4294967295
 800d274:	d100      	bne.n	800d278 <memcpy+0xc>
 800d276:	4770      	bx	lr
 800d278:	b510      	push	{r4, lr}
 800d27a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d27e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d282:	4291      	cmp	r1, r2
 800d284:	d1f9      	bne.n	800d27a <memcpy+0xe>
 800d286:	bd10      	pop	{r4, pc}

0800d288 <memset>:
 800d288:	4402      	add	r2, r0
 800d28a:	4603      	mov	r3, r0
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d100      	bne.n	800d292 <memset+0xa>
 800d290:	4770      	bx	lr
 800d292:	f803 1b01 	strb.w	r1, [r3], #1
 800d296:	e7f9      	b.n	800d28c <memset+0x4>

0800d298 <_calloc_r>:
 800d298:	b513      	push	{r0, r1, r4, lr}
 800d29a:	434a      	muls	r2, r1
 800d29c:	4611      	mov	r1, r2
 800d29e:	9201      	str	r2, [sp, #4]
 800d2a0:	f000 f80a 	bl	800d2b8 <_malloc_r>
 800d2a4:	4604      	mov	r4, r0
 800d2a6:	b118      	cbz	r0, 800d2b0 <_calloc_r+0x18>
 800d2a8:	9a01      	ldr	r2, [sp, #4]
 800d2aa:	2100      	movs	r1, #0
 800d2ac:	f7ff ffec 	bl	800d288 <memset>
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	b002      	add	sp, #8
 800d2b4:	bd10      	pop	{r4, pc}
	...

0800d2b8 <_malloc_r>:
 800d2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ba:	1ccd      	adds	r5, r1, #3
 800d2bc:	f025 0503 	bic.w	r5, r5, #3
 800d2c0:	3508      	adds	r5, #8
 800d2c2:	2d0c      	cmp	r5, #12
 800d2c4:	bf38      	it	cc
 800d2c6:	250c      	movcc	r5, #12
 800d2c8:	2d00      	cmp	r5, #0
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	db01      	blt.n	800d2d2 <_malloc_r+0x1a>
 800d2ce:	42a9      	cmp	r1, r5
 800d2d0:	d903      	bls.n	800d2da <_malloc_r+0x22>
 800d2d2:	230c      	movs	r3, #12
 800d2d4:	6033      	str	r3, [r6, #0]
 800d2d6:	2000      	movs	r0, #0
 800d2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2da:	f000 f857 	bl	800d38c <__malloc_lock>
 800d2de:	4921      	ldr	r1, [pc, #132]	; (800d364 <_malloc_r+0xac>)
 800d2e0:	680a      	ldr	r2, [r1, #0]
 800d2e2:	4614      	mov	r4, r2
 800d2e4:	b99c      	cbnz	r4, 800d30e <_malloc_r+0x56>
 800d2e6:	4f20      	ldr	r7, [pc, #128]	; (800d368 <_malloc_r+0xb0>)
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	b923      	cbnz	r3, 800d2f6 <_malloc_r+0x3e>
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	4630      	mov	r0, r6
 800d2f0:	f000 f83c 	bl	800d36c <_sbrk_r>
 800d2f4:	6038      	str	r0, [r7, #0]
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f000 f837 	bl	800d36c <_sbrk_r>
 800d2fe:	1c43      	adds	r3, r0, #1
 800d300:	d123      	bne.n	800d34a <_malloc_r+0x92>
 800d302:	230c      	movs	r3, #12
 800d304:	6033      	str	r3, [r6, #0]
 800d306:	4630      	mov	r0, r6
 800d308:	f000 f846 	bl	800d398 <__malloc_unlock>
 800d30c:	e7e3      	b.n	800d2d6 <_malloc_r+0x1e>
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	1b5b      	subs	r3, r3, r5
 800d312:	d417      	bmi.n	800d344 <_malloc_r+0x8c>
 800d314:	2b0b      	cmp	r3, #11
 800d316:	d903      	bls.n	800d320 <_malloc_r+0x68>
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	441c      	add	r4, r3
 800d31c:	6025      	str	r5, [r4, #0]
 800d31e:	e004      	b.n	800d32a <_malloc_r+0x72>
 800d320:	6863      	ldr	r3, [r4, #4]
 800d322:	42a2      	cmp	r2, r4
 800d324:	bf0c      	ite	eq
 800d326:	600b      	streq	r3, [r1, #0]
 800d328:	6053      	strne	r3, [r2, #4]
 800d32a:	4630      	mov	r0, r6
 800d32c:	f000 f834 	bl	800d398 <__malloc_unlock>
 800d330:	f104 000b 	add.w	r0, r4, #11
 800d334:	1d23      	adds	r3, r4, #4
 800d336:	f020 0007 	bic.w	r0, r0, #7
 800d33a:	1ac2      	subs	r2, r0, r3
 800d33c:	d0cc      	beq.n	800d2d8 <_malloc_r+0x20>
 800d33e:	1a1b      	subs	r3, r3, r0
 800d340:	50a3      	str	r3, [r4, r2]
 800d342:	e7c9      	b.n	800d2d8 <_malloc_r+0x20>
 800d344:	4622      	mov	r2, r4
 800d346:	6864      	ldr	r4, [r4, #4]
 800d348:	e7cc      	b.n	800d2e4 <_malloc_r+0x2c>
 800d34a:	1cc4      	adds	r4, r0, #3
 800d34c:	f024 0403 	bic.w	r4, r4, #3
 800d350:	42a0      	cmp	r0, r4
 800d352:	d0e3      	beq.n	800d31c <_malloc_r+0x64>
 800d354:	1a21      	subs	r1, r4, r0
 800d356:	4630      	mov	r0, r6
 800d358:	f000 f808 	bl	800d36c <_sbrk_r>
 800d35c:	3001      	adds	r0, #1
 800d35e:	d1dd      	bne.n	800d31c <_malloc_r+0x64>
 800d360:	e7cf      	b.n	800d302 <_malloc_r+0x4a>
 800d362:	bf00      	nop
 800d364:	240232dc 	.word	0x240232dc
 800d368:	240232e0 	.word	0x240232e0

0800d36c <_sbrk_r>:
 800d36c:	b538      	push	{r3, r4, r5, lr}
 800d36e:	4d06      	ldr	r5, [pc, #24]	; (800d388 <_sbrk_r+0x1c>)
 800d370:	2300      	movs	r3, #0
 800d372:	4604      	mov	r4, r0
 800d374:	4608      	mov	r0, r1
 800d376:	602b      	str	r3, [r5, #0]
 800d378:	f7f4 fe6e 	bl	8002058 <_sbrk>
 800d37c:	1c43      	adds	r3, r0, #1
 800d37e:	d102      	bne.n	800d386 <_sbrk_r+0x1a>
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	b103      	cbz	r3, 800d386 <_sbrk_r+0x1a>
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	24023ab4 	.word	0x24023ab4

0800d38c <__malloc_lock>:
 800d38c:	4801      	ldr	r0, [pc, #4]	; (800d394 <__malloc_lock+0x8>)
 800d38e:	f000 b809 	b.w	800d3a4 <__retarget_lock_acquire_recursive>
 800d392:	bf00      	nop
 800d394:	24023abc 	.word	0x24023abc

0800d398 <__malloc_unlock>:
 800d398:	4801      	ldr	r0, [pc, #4]	; (800d3a0 <__malloc_unlock+0x8>)
 800d39a:	f000 b804 	b.w	800d3a6 <__retarget_lock_release_recursive>
 800d39e:	bf00      	nop
 800d3a0:	24023abc 	.word	0x24023abc

0800d3a4 <__retarget_lock_acquire_recursive>:
 800d3a4:	4770      	bx	lr

0800d3a6 <__retarget_lock_release_recursive>:
 800d3a6:	4770      	bx	lr

0800d3a8 <_init>:
 800d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3aa:	bf00      	nop
 800d3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ae:	bc08      	pop	{r3}
 800d3b0:	469e      	mov	lr, r3
 800d3b2:	4770      	bx	lr

0800d3b4 <_fini>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	bf00      	nop
 800d3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ba:	bc08      	pop	{r3}
 800d3bc:	469e      	mov	lr, r3
 800d3be:	4770      	bx	lr
