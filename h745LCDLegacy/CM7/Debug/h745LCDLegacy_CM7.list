
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc6c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800cf04  0800cf04  0001cf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf44  0800cf44  00037220  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf44  0800cf44  0001cf44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf4c  0800cf4c  00037220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf4c  0800cf4c  0001cf4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf50  0800cf50  0001cf50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00017160  24000000  0800cf54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24017160  080240b4  00037160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240171c0  08024114  000371c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c850  24017220  08024174  00037220  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24023a70  08024174  00043a70  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00037220  2**0
                  CONTENTS, READONLY
 14 .debug_info   00031fce  00000000  00000000  0003724e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004797  00000000  00000000  0006921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ab0  00000000  00000000  0006d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001958  00000000  00000000  0006f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d75c  00000000  00000000  00070dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021ce2  00000000  00000000  000ae51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019699a  00000000  00000000  000d01fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00266b98  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000073e4  00000000  00000000  00266bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24017220 	.word	0x24017220
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ceec 	.word	0x0800ceec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24017224 	.word	0x24017224
 80002d4:	0800ceec 	.word	0x0800ceec

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <LCD_init>:

//การสั่งขา D/C หรือ A0 เพื่อส่ง command หรือ parameter
//เปลี่ยนแปลง data command ให้เป็น high เพื่อส่ง parameter
//เปลี่ยนแปลง data command ให้เป็น low เพื่อส่ง command
//ส่งข้อมูลภาพไปในจอใช้ขา data command high
void LCD_init(LCDHandle *lcd){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	//reset LCD
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	b29b      	uxth	r3, r3
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	f005 fad1 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fd5a 	bl	80021d8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6858      	ldr	r0, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	b29b      	uxth	r3, r3
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	f005 fac5 	bl	8005cc0 <HAL_GPIO_WritePin>

	//select SPI CS
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	b29b      	uxth	r3, r3
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f005 fabc 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 fd45 	bl	80021d8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6898      	ldr	r0, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f005 fab0 	bl	8005cc0 <HAL_GPIO_WritePin>

	//write reset , sleep out, display on, scan order
	//write command 0x01, 0x11, 0x29, 0x36
	//4 = 4 commands
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f005 faa7 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2204      	movs	r2, #4
 800077a:	4938      	ldr	r1, [pc, #224]	; (800085c <LCD_init+0x158>)
 800077c:	f008 fd42 	bl	8009204 <HAL_SPI_Transmit>

	//write parameter of scan order
	//write parameter 0b01001000
	//&LCDSTARTUPSeq[4] offset ไป 4 ตำแหน่ง
	//1 = 1 parameter
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68d8      	ldr	r0, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	b29b      	uxth	r3, r3
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f005 fa97 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	2201      	movs	r2, #1
 800079a:	4931      	ldr	r1, [pc, #196]	; (8000860 <LCD_init+0x15c>)
 800079c:	f008 fd32 	bl	8009204 <HAL_SPI_Transmit>

	//write set C area
	//write command 0x2a
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f005 fa87 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	492a      	ldr	r1, [pc, #168]	; (8000864 <LCD_init+0x160>)
 80007bc:	f008 fd22 	bl	8009204 <HAL_SPI_Transmit>

	//write set C area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68d8      	ldr	r0, [r3, #12]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	f005 fa77 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2204      	movs	r2, #4
 80007da:	4923      	ldr	r1, [pc, #140]	; (8000868 <LCD_init+0x164>)
 80007dc:	f008 fd12 	bl	8009204 <HAL_SPI_Transmit>

	//write set R area
	//write command 0x2b
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68d8      	ldr	r0, [r3, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f005 fa67 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2201      	movs	r2, #1
 80007fa:	491c      	ldr	r1, [pc, #112]	; (800086c <LCD_init+0x168>)
 80007fc:	f008 fd02 	bl	8009204 <HAL_SPI_Transmit>

	//write set R area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68d8      	ldr	r0, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	b29b      	uxth	r3, r3
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	f005 fa57 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2204      	movs	r2, #4
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <LCD_init+0x16c>)
 800081c:	f008 fcf2 	bl	8009204 <HAL_SPI_Transmit>

	//write to graphic memory
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68d8      	ldr	r0, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f005 fa47 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	2201      	movs	r2, #1
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LCD_init+0x170>)
 800083c:	f008 fce2 	bl	8009204 <HAL_SPI_Transmit>

	//set DC to high to read & send image data
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68d8      	ldr	r0, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	b29b      	uxth	r3, r3
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f005 fa37 	bl	8005cc0 <HAL_GPIO_WritePin>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000008 	.word	0x24000008
 8000860:	2400000c 	.word	0x2400000c
 8000864:	2400000d 	.word	0x2400000d
 8000868:	2400000e 	.word	0x2400000e
 800086c:	24000012 	.word	0x24000012
 8000870:	24000013 	.word	0x24000013
 8000874:	24000017 	.word	0x24000017

08000878 <LCD_flush>:

//ส่งข้อมูลของ frame ไปให้จอ
void LCD_flush(LCDHandle *lcd)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	//circular dma
	//Framememory มีขนาดเท่ากับหน้าจอ
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000888:	4903      	ldr	r1, [pc, #12]	; (8000898 <LCD_flush+0x20>)
 800088a:	4618      	mov	r0, r3
 800088c:	f008 feac 	bl	80095e8 <HAL_SPI_Transmit_DMA>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2401723c 	.word	0x2401723c

0800089c <LCD_timer>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void LCD_timer(uint8_t timer)
{
 800089c:	b480      	push	{r7}
 800089e:	b093      	sub	sp, #76	; 0x4c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	switch(timer)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b60      	cmp	r3, #96	; 0x60
 80008aa:	f000 80a6 	beq.w	80009fa <LCD_timer+0x15e>
 80008ae:	2b60      	cmp	r3, #96	; 0x60
 80008b0:	f300 80c8 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008b4:	2b45      	cmp	r3, #69	; 0x45
 80008b6:	d07b      	beq.n	80009b0 <LCD_timer+0x114>
 80008b8:	2b45      	cmp	r3, #69	; 0x45
 80008ba:	f300 80c3 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008be:	2b30      	cmp	r3, #48	; 0x30
 80008c0:	d051      	beq.n	8000966 <LCD_timer+0xca>
 80008c2:	2b30      	cmp	r3, #48	; 0x30
 80008c4:	f300 80be 	bgt.w	8000a44 <LCD_timer+0x1a8>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <LCD_timer+0x36>
 80008cc:	2b15      	cmp	r3, #21
 80008ce:	d025      	beq.n	800091c <LCD_timer+0x80>
			}
		}
			break;

		default:
			break;
 80008d0:	e0b8      	b.n	8000a44 <LCD_timer+0x1a8>
			int k= 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i = 180; i < 15156; i = i+384 )
 80008d6:	23b4      	movs	r3, #180	; 0xb4
 80008d8:	647b      	str	r3, [r7, #68]	; 0x44
 80008da:	e019      	b.n	8000910 <LCD_timer+0x74>
				for(j=0;j<120;j++)
 80008dc:	2300      	movs	r3, #0
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
 80008e0:	e00c      	b.n	80008fc <LCD_timer+0x60>
					Framememory[i+j] = n0[j+k];
 80008e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80008e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e6:	441a      	add	r2, r3
 80008e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80008ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008ec:	440b      	add	r3, r1
 80008ee:	4959      	ldr	r1, [pc, #356]	; (8000a54 <LCD_timer+0x1b8>)
 80008f0:	5c89      	ldrb	r1, [r1, r2]
 80008f2:	4a59      	ldr	r2, [pc, #356]	; (8000a58 <LCD_timer+0x1bc>)
 80008f4:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 80008f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f8:	3301      	adds	r3, #1
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
 80008fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008fe:	2b77      	cmp	r3, #119	; 0x77
 8000900:	ddef      	ble.n	80008e2 <LCD_timer+0x46>
				k = k +120;
 8000902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000904:	3378      	adds	r3, #120	; 0x78
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i = 180; i < 15156; i = i+384 )
 8000908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800090a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
 8000910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000912:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000916:	4293      	cmp	r3, r2
 8000918:	dde0      	ble.n	80008dc <LCD_timer+0x40>
			break;
 800091a:	e094      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
			for(i = 180; i < 15156; i = i+384 )
 8000920:	23b4      	movs	r3, #180	; 0xb4
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
 8000924:	e019      	b.n	800095a <LCD_timer+0xbe>
				for(j=0;j<120;j++)
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
 800092a:	e00c      	b.n	8000946 <LCD_timer+0xaa>
					Framememory[i+j] = n15[j+k];
 800092c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800092e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000930:	441a      	add	r2, r3
 8000932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000936:	440b      	add	r3, r1
 8000938:	4948      	ldr	r1, [pc, #288]	; (8000a5c <LCD_timer+0x1c0>)
 800093a:	5c89      	ldrb	r1, [r1, r2]
 800093c:	4a46      	ldr	r2, [pc, #280]	; (8000a58 <LCD_timer+0x1bc>)
 800093e:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	3301      	adds	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
 8000946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000948:	2b77      	cmp	r3, #119	; 0x77
 800094a:	ddef      	ble.n	800092c <LCD_timer+0x90>
				k = k +120;
 800094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094e:	3378      	adds	r3, #120	; 0x78
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
			for(i = 180; i < 15156; i = i+384 )
 8000952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000954:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
 800095a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800095c:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000960:	4293      	cmp	r3, r2
 8000962:	dde0      	ble.n	8000926 <LCD_timer+0x8a>
			break;
 8000964:	e06f      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 180; i < 15156; i = i+384 )
 800096a:	23b4      	movs	r3, #180	; 0xb4
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800096e:	e019      	b.n	80009a4 <LCD_timer+0x108>
				for(j=0;j<120;j++)
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
 8000974:	e00c      	b.n	8000990 <LCD_timer+0xf4>
					Framememory[i+j] = n30[j+k];
 8000976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	441a      	add	r2, r3
 800097c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	440b      	add	r3, r1
 8000982:	4937      	ldr	r1, [pc, #220]	; (8000a60 <LCD_timer+0x1c4>)
 8000984:	5c89      	ldrb	r1, [r1, r2]
 8000986:	4a34      	ldr	r2, [pc, #208]	; (8000a58 <LCD_timer+0x1bc>)
 8000988:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 800098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098c:	3301      	adds	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000992:	2b77      	cmp	r3, #119	; 0x77
 8000994:	ddef      	ble.n	8000976 <LCD_timer+0xda>
				k = k +120;
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	3378      	adds	r3, #120	; 0x78
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 180; i < 15156; i = i+384 )
 800099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a6:	f643 3233 	movw	r2, #15155	; 0x3b33
 80009aa:	4293      	cmp	r3, r2
 80009ac:	dde0      	ble.n	8000970 <LCD_timer+0xd4>
			break;
 80009ae:	e04a      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
			for(i = 180; i < 15156; i = i+384 )
 80009b4:	23b4      	movs	r3, #180	; 0xb4
 80009b6:	623b      	str	r3, [r7, #32]
 80009b8:	e019      	b.n	80009ee <LCD_timer+0x152>
				for(j=0;j<120;j++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	e00c      	b.n	80009da <LCD_timer+0x13e>
					Framememory[i+j] = n45[j+k];
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	441a      	add	r2, r3
 80009c6:	6a39      	ldr	r1, [r7, #32]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	440b      	add	r3, r1
 80009cc:	4925      	ldr	r1, [pc, #148]	; (8000a64 <LCD_timer+0x1c8>)
 80009ce:	5c89      	ldrb	r1, [r1, r2]
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <LCD_timer+0x1bc>)
 80009d2:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	2b77      	cmp	r3, #119	; 0x77
 80009de:	ddef      	ble.n	80009c0 <LCD_timer+0x124>
				k = k +120;
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	3378      	adds	r3, #120	; 0x78
 80009e4:	61bb      	str	r3, [r7, #24]
			for(i = 180; i < 15156; i = i+384 )
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	f643 3233 	movw	r2, #15155	; 0x3b33
 80009f4:	4293      	cmp	r3, r2
 80009f6:	dde0      	ble.n	80009ba <LCD_timer+0x11e>
			break;
 80009f8:	e025      	b.n	8000a46 <LCD_timer+0x1aa>
			int k= 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
			for(i = 180; i < 15156; i = i+384 )
 80009fe:	23b4      	movs	r3, #180	; 0xb4
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e019      	b.n	8000a38 <LCD_timer+0x19c>
				for(j=0;j<120;j++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	e00c      	b.n	8000a24 <LCD_timer+0x188>
					Framememory[i+j] = n60[j+k];
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	441a      	add	r2, r3
 8000a10:	6979      	ldr	r1, [r7, #20]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	440b      	add	r3, r1
 8000a16:	4914      	ldr	r1, [pc, #80]	; (8000a68 <LCD_timer+0x1cc>)
 8000a18:	5c89      	ldrb	r1, [r1, r2]
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <LCD_timer+0x1bc>)
 8000a1c:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<120;j++)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	3301      	adds	r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2b77      	cmp	r3, #119	; 0x77
 8000a28:	ddef      	ble.n	8000a0a <LCD_timer+0x16e>
				k = k +120;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3378      	adds	r3, #120	; 0x78
 8000a2e:	60fb      	str	r3, [r7, #12]
			for(i = 180; i < 15156; i = i+384 )
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f643 3233 	movw	r2, #15155	; 0x3b33
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	dde0      	ble.n	8000a04 <LCD_timer+0x168>
			break;
 8000a42:	e000      	b.n	8000a46 <LCD_timer+0x1aa>
			break;
 8000a44:	bf00      	nop
	}
}
 8000a46:	bf00      	nop
 8000a48:	374c      	adds	r7, #76	; 0x4c
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	24011390 	.word	0x24011390
 8000a58:	2401723c 	.word	0x2401723c
 8000a5c:	24012650 	.word	0x24012650
 8000a60:	24013910 	.word	0x24013910
 8000a64:	24014bd0 	.word	0x24014bd0
 8000a68:	24015e90 	.word	0x24015e90

08000a6c <LCD_fan>:

void LCD_fan(uint8_t RTC_ON)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	switch(RTC_ON)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <LCD_fan+0x16>
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d026      	beq.n	8000ace <LCD_fan+0x62>
			}
		}
			break;

		default:
			break;
 8000a80:	e04b      	b.n	8000b1a <LCD_fan+0xae>
			int a,b,c = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
			for(a = 23100; a <= 39996; a = a+384 )
 8000a86:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e019      	b.n	8000ac2 <LCD_fan+0x56>
				for(b=0;b<135;b++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	e00c      	b.n	8000aae <LCD_fan+0x42>
					Framememory[a+b] = fan_off[b+c];
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	441a      	add	r2, r3
 8000a9a:	69f9      	ldr	r1, [r7, #28]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	4921      	ldr	r1, [pc, #132]	; (8000b28 <LCD_fan+0xbc>)
 8000aa2:	5c89      	ldrb	r1, [r1, r2]
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <LCD_fan+0xc0>)
 8000aa6:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	2b86      	cmp	r3, #134	; 0x86
 8000ab2:	ddef      	ble.n	8000a94 <LCD_fan+0x28>
				c = c +135;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3387      	adds	r3, #135	; 0x87
 8000ab8:	617b      	str	r3, [r7, #20]
			for(a = 23100; a <= 39996; a = a+384 )
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	dde0      	ble.n	8000a8e <LCD_fan+0x22>
			break;
 8000acc:	e025      	b.n	8000b1a <LCD_fan+0xae>
			int a,b,c = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
			for(a = 23100; a <= 39996; a = a+384 )
 8000ad2:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	e019      	b.n	8000b0e <LCD_fan+0xa2>
				for(b=0;b<135;b++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e00c      	b.n	8000afa <LCD_fan+0x8e>
					Framememory[a+b] = fan_on[b+c];
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	6939      	ldr	r1, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	440b      	add	r3, r1
 8000aec:	4910      	ldr	r1, [pc, #64]	; (8000b30 <LCD_fan+0xc4>)
 8000aee:	5c89      	ldrb	r1, [r1, r2]
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LCD_fan+0xc0>)
 8000af2:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b86      	cmp	r3, #134	; 0x86
 8000afe:	ddef      	ble.n	8000ae0 <LCD_fan+0x74>
				c = c +135;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	3387      	adds	r3, #135	; 0x87
 8000b04:	60bb      	str	r3, [r7, #8]
			for(a = 23100; a <= 39996; a = a+384 )
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000b14:	4293      	cmp	r3, r2
 8000b16:	dde0      	ble.n	8000ada <LCD_fan+0x6e>
			break;
 8000b18:	bf00      	nop
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2400c018 	.word	0x2400c018
 8000b2c:	2401723c 	.word	0x2401723c
 8000b30:	2400d7d4 	.word	0x2400d7d4

08000b34 <LCD_speed>:

void LCD_speed(uint8_t speed)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b08d      	sub	sp, #52	; 0x34
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	switch(speed)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d052      	beq.n	8000bea <LCD_speed+0xb6>
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	dc76      	bgt.n	8000c36 <LCD_speed+0x102>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d002      	beq.n	8000b52 <LCD_speed+0x1e>
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d026      	beq.n	8000b9e <LCD_speed+0x6a>
		}
			break;


		default:
			break;
 8000b50:	e071      	b.n	8000c36 <LCD_speed+0x102>
			int i,j,n = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 25956; i <= 37760; i = i+384 )
 8000b56:	f246 5364 	movw	r3, #25956	; 0x6564
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b5c:	e019      	b.n	8000b92 <LCD_speed+0x5e>
				for(j=0;j<96;j++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b62:	e00c      	b.n	8000b7e <LCD_speed+0x4a>
					Framememory[i+j] = speed1[j+n];
 8000b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	441a      	add	r2, r3
 8000b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6e:	440b      	add	r3, r1
 8000b70:	4934      	ldr	r1, [pc, #208]	; (8000c44 <LCD_speed+0x110>)
 8000b72:	5c89      	ldrb	r1, [r1, r2]
 8000b74:	4a34      	ldr	r2, [pc, #208]	; (8000c48 <LCD_speed+0x114>)
 8000b76:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b80:	2b5f      	cmp	r3, #95	; 0x5f
 8000b82:	ddef      	ble.n	8000b64 <LCD_speed+0x30>
				n = n +96;
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	3360      	adds	r3, #96	; 0x60
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 25956; i <= 37760; i = i+384 )
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	f249 3280 	movw	r2, #37760	; 0x9380
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	dde0      	ble.n	8000b5e <LCD_speed+0x2a>
			break;
 8000b9c:	e04c      	b.n	8000c38 <LCD_speed+0x104>
			int i,j,n = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
			for(i = 25956; i <= 37760; i = i+384 )
 8000ba2:	f246 5364 	movw	r3, #25956	; 0x6564
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	e019      	b.n	8000bde <LCD_speed+0xaa>
				for(j=0;j<96;j++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	e00c      	b.n	8000bca <LCD_speed+0x96>
					Framememory[i+j] = speed2[j+n];
 8000bb0:	69fa      	ldr	r2, [r7, #28]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	441a      	add	r2, r3
 8000bb6:	6a39      	ldr	r1, [r7, #32]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	440b      	add	r3, r1
 8000bbc:	4923      	ldr	r1, [pc, #140]	; (8000c4c <LCD_speed+0x118>)
 8000bbe:	5c89      	ldrb	r1, [r1, r2]
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <LCD_speed+0x114>)
 8000bc2:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	2b5f      	cmp	r3, #95	; 0x5f
 8000bce:	ddef      	ble.n	8000bb0 <LCD_speed+0x7c>
				n = n +96;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	3360      	adds	r3, #96	; 0x60
 8000bd4:	61bb      	str	r3, [r7, #24]
			for(i = 25956; i <= 37760; i = i+384 )
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	f249 3280 	movw	r2, #37760	; 0x9380
 8000be4:	4293      	cmp	r3, r2
 8000be6:	dde0      	ble.n	8000baa <LCD_speed+0x76>
			break;
 8000be8:	e026      	b.n	8000c38 <LCD_speed+0x104>
			int i,j,n = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
			for(i = 25956; i <= 37760; i = i+384 )
 8000bee:	f246 5364 	movw	r3, #25956	; 0x6564
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	e019      	b.n	8000c2a <LCD_speed+0xf6>
				for(j=0;j<96;j++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	e00c      	b.n	8000c16 <LCD_speed+0xe2>
					Framememory[i+j] = speed3[j+n];
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	441a      	add	r2, r3
 8000c02:	6979      	ldr	r1, [r7, #20]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	440b      	add	r3, r1
 8000c08:	4911      	ldr	r1, [pc, #68]	; (8000c50 <LCD_speed+0x11c>)
 8000c0a:	5c89      	ldrb	r1, [r1, r2]
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <LCD_speed+0x114>)
 8000c0e:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	3301      	adds	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	2b5f      	cmp	r3, #95	; 0x5f
 8000c1a:	ddef      	ble.n	8000bfc <LCD_speed+0xc8>
				n = n +96;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3360      	adds	r3, #96	; 0x60
 8000c20:	60fb      	str	r3, [r7, #12]
			for(i = 25956; i <= 37760; i = i+384 )
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f249 3280 	movw	r2, #37760	; 0x9380
 8000c30:	4293      	cmp	r3, r2
 8000c32:	dde0      	ble.n	8000bf6 <LCD_speed+0xc2>
			break;
 8000c34:	e000      	b.n	8000c38 <LCD_speed+0x104>
			break;
 8000c36:	bf00      	nop
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3734      	adds	r7, #52	; 0x34
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	2400ef90 	.word	0x2400ef90
 8000c48:	2401723c 	.word	0x2401723c
 8000c4c:	2400fb90 	.word	0x2400fb90
 8000c50:	24010790 	.word	0x24010790

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000c60:	bf00      	nop
 8000c62:	4bb0      	ldr	r3, [pc, #704]	; (8000f24 <main+0x2d0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d004      	beq.n	8000c78 <main+0x24>
 8000c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dcf4      	bgt.n	8000c62 <main+0xe>
		;
	if (timeout < 0) {
 8000c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da01      	bge.n	8000c82 <main+0x2e>
		Error_Handler();
 8000c7e:	f000 fde5 	bl	800184c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c82:	f001 fa17 	bl	80020b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c86:	f000 f9c5 	bl	8001014 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000c8a:	4ba6      	ldr	r3, [pc, #664]	; (8000f24 <main+0x2d0>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4aa4      	ldr	r2, [pc, #656]	; (8000f24 <main+0x2d0>)
 8000c92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4ba2      	ldr	r3, [pc, #648]	; (8000f24 <main+0x2d0>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f005 f823 	bl	8005cf4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f005 f839 	bl	8005d28 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000cbc:	bf00      	nop
 8000cbe:	4b99      	ldr	r3, [pc, #612]	; (8000f24 <main+0x2d0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d104      	bne.n	8000cd4 <main+0x80>
 8000cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dcf4      	bgt.n	8000cbe <main+0x6a>
		;
	if (timeout < 0) {
 8000cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da01      	bge.n	8000cde <main+0x8a>
		Error_Handler();
 8000cda:	f000 fdb7 	bl	800184c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f000 fcaf 	bl	8001640 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ce2:	f000 fa1d 	bl	8001120 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ce6:	f000 fbfd 	bl	80014e4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000cea:	f000 fc79 	bl	80015e0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cee:	f000 faf5 	bl	80012dc <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cf2:	f000 fc43 	bl	800157c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000cf6:	f000 fb49 	bl	800138c <MX_TIM1_Init>
  MX_RTC_Init();
 8000cfa:	f000 fa5d 	bl	80011b8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  	//�?ำหนดขา pin
	ST7735.hspi = &hspi1;
 8000cfe:	4b8a      	ldr	r3, [pc, #552]	; (8000f28 <main+0x2d4>)
 8000d00:	4a8a      	ldr	r2, [pc, #552]	; (8000f2c <main+0x2d8>)
 8000d02:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 8000d04:	4b88      	ldr	r3, [pc, #544]	; (8000f28 <main+0x2d4>)
 8000d06:	4a8a      	ldr	r2, [pc, #552]	; (8000f30 <main+0x2dc>)
 8000d08:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 8000d0a:	4b87      	ldr	r3, [pc, #540]	; (8000f28 <main+0x2d4>)
 8000d0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d10:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 8000d12:	4b85      	ldr	r3, [pc, #532]	; (8000f28 <main+0x2d4>)
 8000d14:	4a86      	ldr	r2, [pc, #536]	; (8000f30 <main+0x2dc>)
 8000d16:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 8000d18:	4b83      	ldr	r3, [pc, #524]	; (8000f28 <main+0x2d4>)
 8000d1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d1e:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 8000d20:	4b81      	ldr	r3, [pc, #516]	; (8000f28 <main+0x2d4>)
 8000d22:	4a84      	ldr	r2, [pc, #528]	; (8000f34 <main+0x2e0>)
 8000d24:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 8000d26:	4b80      	ldr	r3, [pc, #512]	; (8000f28 <main+0x2d4>)
 8000d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2c:	611a      	str	r2, [r3, #16]
	//เริ่ม�?ารเขียน sequence data
	LCD_init(&ST7735);
 8000d2e:	487e      	ldr	r0, [pc, #504]	; (8000f28 <main+0x2d4>)
 8000d30:	f7ff fce8 	bl	8000704 <LCD_init>

	//start pwm
	//tim1 @APB2 timer clock 100 MHz
	//counter period 10000 -> 10 kHz
	//couter period 10000 = pwm 100%
	HAL_TIM_Base_Start(&htim1);
 8000d34:	4880      	ldr	r0, [pc, #512]	; (8000f38 <main+0x2e4>)
 8000d36:	f009 f95d 	bl	8009ff4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	487e      	ldr	r0, [pc, #504]	; (8000f38 <main+0x2e4>)
 8000d3e:	f009 fa23 	bl	800a188 <HAL_TIM_PWM_Start>

	//initial parameter
	shareMemory->PWM = 2500; //pwm @ 25%
 8000d42:	4b7e      	ldr	r3, [pc, #504]	; (8000f3c <main+0x2e8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d4a:	601a      	str	r2, [r3, #0]
	shareMemory->fan_mode = 1; //fan low speed
 8000d4c:	4b7b      	ldr	r3, [pc, #492]	; (8000f3c <main+0x2e8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2201      	movs	r2, #1
 8000d52:	711a      	strb	r2, [r3, #4]
	shareMemory->mode_change = 0; //if fan changes mode
 8000d54:	4b79      	ldr	r3, [pc, #484]	; (8000f3c <main+0x2e8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	715a      	strb	r2, [r3, #5]
	shareMemory->RTC_ON = 0; //does rtc work?
 8000d5c:	4b77      	ldr	r3, [pc, #476]	; (8000f3c <main+0x2e8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	719a      	strb	r2, [r3, #6]
	shareMemory->RTC_change = 0; //rtc change
 8000d64:	4b75      	ldr	r3, [pc, #468]	; (8000f3c <main+0x2e8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	71da      	strb	r2, [r3, #7]
	shareMemory->finish = 0; //does fan work 1 min?
 8000d6c:	4b73      	ldr	r3, [pc, #460]	; (8000f3c <main+0x2e8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2200      	movs	r2, #0
 8000d72:	721a      	strb	r2, [r3, #8]
	shareMemory->led1 = 0; //led1 status
 8000d74:	4b71      	ldr	r3, [pc, #452]	; (8000f3c <main+0x2e8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	725a      	strb	r2, [r3, #9]
	shareMemory->led2 = 1; //led2 status
 8000d7c:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <main+0x2e8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2201      	movs	r2, #1
 8000d82:	729a      	strb	r2, [r3, #10]
	shareMemory->led3 = 1; //led3 status
 8000d84:	4b6d      	ldr	r3, [pc, #436]	; (8000f3c <main+0x2e8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	72da      	strb	r2, [r3, #11]

	//led setup
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, shareMemory->led1); //show led1
 8000d8c:	4b6b      	ldr	r3, [pc, #428]	; (8000f3c <main+0x2e8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	7a5b      	ldrb	r3, [r3, #9]
 8000d92:	461a      	mov	r2, r3
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4869      	ldr	r0, [pc, #420]	; (8000f40 <main+0x2ec>)
 8000d9a:	f004 ff91 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, shareMemory->led2); //close led2
 8000d9e:	4b67      	ldr	r3, [pc, #412]	; (8000f3c <main+0x2e8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	7a9b      	ldrb	r3, [r3, #10]
 8000da4:	461a      	mov	r2, r3
 8000da6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000daa:	4865      	ldr	r0, [pc, #404]	; (8000f40 <main+0x2ec>)
 8000dac:	f004 ff88 	bl	8005cc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, shareMemory->led3); //close led3
 8000db0:	4b62      	ldr	r3, [pc, #392]	; (8000f3c <main+0x2e8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	7adb      	ldrb	r3, [r3, #11]
 8000db6:	461a      	mov	r2, r3
 8000db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dbc:	4860      	ldr	r0, [pc, #384]	; (8000f40 <main+0x2ec>)
 8000dbe:	f004 ff7f 	bl	8005cc0 <HAL_GPIO_WritePin>

	//lcd UI
	memcpy(Framememory,fan,sizeof(fan)); //background
 8000dc2:	4a60      	ldr	r2, [pc, #384]	; (8000f44 <main+0x2f0>)
 8000dc4:	4b60      	ldr	r3, [pc, #384]	; (8000f48 <main+0x2f4>)
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dce:	461a      	mov	r2, r3
 8000dd0:	f00c f876 	bl	800cec0 <memcpy>
	LCD_speed(shareMemory->fan_mode); //show fan mode
 8000dd4:	4b59      	ldr	r3, [pc, #356]	; (8000f3c <main+0x2e8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	791b      	ldrb	r3, [r3, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff feaa 	bl	8000b34 <LCD_speed>
	LCD_fan(shareMemory->RTC_ON); //show rtc status
 8000de0:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <main+0x2e8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	799b      	ldrb	r3, [r3, #6]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fe40 	bl	8000a6c <LCD_fan>
	LCD_timer(0x00); //show timer
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fd55 	bl	800089c <LCD_timer>
	//flush ข้อมูล dma
	LCD_flush(&ST7735);
 8000df2:	484d      	ldr	r0, [pc, #308]	; (8000f28 <main+0x2d4>)
 8000df4:	f7ff fd40 	bl	8000878 <LCD_flush>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_HSEM_FastTake(1) == HAL_OK) //hsem cm7 is ready
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f004 ff7b 	bl	8005cf4 <HAL_HSEM_FastTake>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f9      	bne.n	8000df8 <main+0x1a4>
		{
			if (RTC_start)
 8000e04:	4b51      	ldr	r3, [pc, #324]	; (8000f4c <main+0x2f8>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d021      	beq.n	8000e50 <main+0x1fc>
			{
				//rtc work
				//start clock
				//set up time
				sTime.Hours =0x00; //0x14 (2 pm.)
 8000e0c:	4b50      	ldr	r3, [pc, #320]	; (8000f50 <main+0x2fc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
				sTime.Minutes =0x00; //0x30 (half hour or 30 min)
 8000e12:	4b4f      	ldr	r3, [pc, #316]	; (8000f50 <main+0x2fc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	705a      	strb	r2, [r3, #1]
				sTime.Seconds = 0x00; // 0 second
 8000e18:	4b4d      	ldr	r3, [pc, #308]	; (8000f50 <main+0x2fc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	709a      	strb	r2, [r3, #2]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);//set rtc
 8000e1e:	2201      	movs	r2, #1
 8000e20:	494b      	ldr	r1, [pc, #300]	; (8000f50 <main+0x2fc>)
 8000e22:	484c      	ldr	r0, [pc, #304]	; (8000f54 <main+0x300>)
 8000e24:	f007 fcbc 	bl	80087a0 <HAL_RTC_SetTime>

				sDate.Date = 0x20;
 8000e28:	4b4b      	ldr	r3, [pc, #300]	; (8000f58 <main+0x304>)
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	709a      	strb	r2, [r3, #2]
				sDate.Month = 0x10;
 8000e2e:	4b4a      	ldr	r3, [pc, #296]	; (8000f58 <main+0x304>)
 8000e30:	2210      	movs	r2, #16
 8000e32:	705a      	strb	r2, [r3, #1]
				sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000e34:	4b48      	ldr	r3, [pc, #288]	; (8000f58 <main+0x304>)
 8000e36:	2203      	movs	r2, #3
 8000e38:	701a      	strb	r2, [r3, #0]
				sDate.Year = 0x21;
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <main+0x304>)
 8000e3c:	2221      	movs	r2, #33	; 0x21
 8000e3e:	70da      	strb	r2, [r3, #3]

				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000e40:	2201      	movs	r2, #1
 8000e42:	4945      	ldr	r1, [pc, #276]	; (8000f58 <main+0x304>)
 8000e44:	4843      	ldr	r0, [pc, #268]	; (8000f54 <main+0x300>)
 8000e46:	f007 fda5 	bl	8008994 <HAL_RTC_SetDate>
				RTC_start = 0;
 8000e4a:	4b40      	ldr	r3, [pc, #256]	; (8000f4c <main+0x2f8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
			}
			if (shareMemory->RTC_change ) //rtc status change
 8000e50:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <main+0x2e8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	79db      	ldrb	r3, [r3, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d050      	beq.n	8000efc <main+0x2a8>
			{
				LCD_fan(shareMemory->RTC_ON); //show fan status on
 8000e5a:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <main+0x2e8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	799b      	ldrb	r3, [r3, #6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fe03 	bl	8000a6c <LCD_fan>
				LCD_flush(&ST7735); //spi transmit dma normal
 8000e66:	4830      	ldr	r0, [pc, #192]	; (8000f28 <main+0x2d4>)
 8000e68:	f7ff fd06 	bl	8000878 <LCD_flush>
				shareMemory->RTC_change = 0; //change rtc status (reset)
 8000e6c:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <main+0x2e8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2200      	movs	r2, #0
 8000e72:	71da      	strb	r2, [r3, #7]

				RTC_TimeTypeDef sTime = NowTime; //save time
 8000e74:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <main+0x308>)
 8000e76:	f107 0414 	add.w	r4, r7, #20
 8000e7a:	461d      	mov	r5, r3
 8000e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e80:	682b      	ldr	r3, [r5, #0]
 8000e82:	6023      	str	r3, [r4, #0]

				sTime.Minutes += 0x01;
 8000e84:	7d7b      	ldrb	r3, [r7, #21]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	757b      	strb	r3, [r7, #21]
				//time over flow
				if (sTime.Seconds >= 0x60)
 8000e8c:	7dbb      	ldrb	r3, [r7, #22]
 8000e8e:	2b5f      	cmp	r3, #95	; 0x5f
 8000e90:	d919      	bls.n	8000ec6 <main+0x272>
				{
					sTime.Seconds -= 0x60;
 8000e92:	7dbb      	ldrb	r3, [r7, #22]
 8000e94:	3b60      	subs	r3, #96	; 0x60
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	75bb      	strb	r3, [r7, #22]
					sTime.Minutes++;
 8000e9a:	7d7b      	ldrb	r3, [r7, #21]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	757b      	strb	r3, [r7, #21]
					if (sTime.Minutes >= 0x60)
 8000ea2:	7d7b      	ldrb	r3, [r7, #21]
 8000ea4:	2b5f      	cmp	r3, #95	; 0x5f
 8000ea6:	d90e      	bls.n	8000ec6 <main+0x272>
					{
						sTime.Minutes -= 0x60;
 8000ea8:	7d7b      	ldrb	r3, [r7, #21]
 8000eaa:	3b60      	subs	r3, #96	; 0x60
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	757b      	strb	r3, [r7, #21]
						sTime.Hours++;
 8000eb0:	7d3b      	ldrb	r3, [r7, #20]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	753b      	strb	r3, [r7, #20]
						if (sTime.Hours >= 0x24)
 8000eb8:	7d3b      	ldrb	r3, [r7, #20]
 8000eba:	2b23      	cmp	r3, #35	; 0x23
 8000ebc:	d903      	bls.n	8000ec6 <main+0x272>
						{
							sTime.Hours -= 0x24;
 8000ebe:	7d3b      	ldrb	r3, [r7, #20]
 8000ec0:	3b24      	subs	r3, #36	; 0x24
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	753b      	strb	r3, [r7, #20]
						}
					}
				}
				//setting alarm mask
				sAlarm.AlarmTime = sTime;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <main+0x30c>)
 8000ec8:	461d      	mov	r5, r3
 8000eca:	f107 0414 	add.w	r4, r7, #20
 8000ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	602b      	str	r3, [r5, #0]
				sAlarm.Alarm = RTC_ALARM_A;
 8000ed6:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <main+0x30c>)
 8000ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
				sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <main+0x30c>)
 8000ee0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ee4:	615a      	str	r2, [r3, #20]
				sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <main+0x30c>)
 8000ee8:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000eec:	619a      	str	r2, [r3, #24]
				sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <main+0x30c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
				sAlarm.AlarmDateWeekDay = 0x1;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <main+0x30c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2020 	strb.w	r2, [r3, #32]


			}

			if (shareMemory->mode_change) //fan mode chande
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <main+0x2e8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	795b      	ldrb	r3, [r3, #5]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d049      	beq.n	8000f9a <main+0x346>
			{
				LCD_speed(shareMemory->fan_mode); //change fan speed
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <main+0x2e8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	791b      	ldrb	r3, [r3, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe11 	bl	8000b34 <LCD_speed>
				LCD_flush(&ST7735); //spi transmit dma normal
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <main+0x2d4>)
 8000f14:	f7ff fcb0 	bl	8000878 <LCD_flush>
				shareMemory->mode_change = 0; ////change fan status (reset)
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <main+0x2e8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	715a      	strb	r2, [r3, #5]
 8000f20:	e020      	b.n	8000f64 <main+0x310>
 8000f22:	bf00      	nop
 8000f24:	58024400 	.word	0x58024400
 8000f28:	2402327c 	.word	0x2402327c
 8000f2c:	2402389c 	.word	0x2402389c
 8000f30:	58020c00 	.word	0x58020c00
 8000f34:	58021800 	.word	0x58021800
 8000f38:	24023850 	.word	0x24023850
 8000f3c:	24017150 	.word	0x24017150
 8000f40:	58020800 	.word	0x58020800
 8000f44:	2401723c 	.word	0x2401723c
 8000f48:	24000018 	.word	0x24000018
 8000f4c:	24017154 	.word	0x24017154
 8000f50:	2402323c 	.word	0x2402323c
 8000f54:	2402382c 	.word	0x2402382c
 8000f58:	24023250 	.word	0x24023250
 8000f5c:	24023924 	.word	0x24023924
 8000f60:	24023254 	.word	0x24023254
				HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, shareMemory->led1); //show led1
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <main+0x3a0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	7a5b      	ldrb	r3, [r3, #9]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f70:	4821      	ldr	r0, [pc, #132]	; (8000ff8 <main+0x3a4>)
 8000f72:	f004 fea5 	bl	8005cc0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, shareMemory->led2); //show led2
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <main+0x3a0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	7a9b      	ldrb	r3, [r3, #10]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f82:	481d      	ldr	r0, [pc, #116]	; (8000ff8 <main+0x3a4>)
 8000f84:	f004 fe9c 	bl	8005cc0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, shareMemory->led3); //show led3
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <main+0x3a0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	7adb      	ldrb	r3, [r3, #11]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f94:	4818      	ldr	r0, [pc, #96]	; (8000ff8 <main+0x3a4>)
 8000f96:	f004 fe93 	bl	8005cc0 <HAL_GPIO_WritePin>
			}

			if (shareMemory->RTC_ON == 1) //if rtc work
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <main+0x3a0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	799b      	ldrb	r3, [r3, #6]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d118      	bne.n	8000fd6 <main+0x382>
			{
				RTC_TimeTypeDef sTime = NowTime; //save time
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <main+0x3a8>)
 8000fa6:	463c      	mov	r4, r7
 8000fa8:	461d      	mov	r5, r3
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	6023      	str	r3, [r4, #0]

				//if fan does not work for 1 min
//				if (sTime.Minutes < 0x01)
//				{
					//set alarm
					HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4912      	ldr	r1, [pc, #72]	; (8001000 <main+0x3ac>)
 8000fb6:	4813      	ldr	r0, [pc, #76]	; (8001004 <main+0x3b0>)
 8000fb8:	f007 fdc2 	bl	8008b40 <HAL_RTC_SetAlarm_IT>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, shareMemory->PWM); //drive motor
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <main+0x3a0>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <main+0x3b4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34

					//show timer every 15 sec
//					if (sTime.Seconds == 0x00 || sTime.Seconds == 0x15 || sTime.Seconds ==0x30 ||sTime.Seconds == 0x45)
//					{
						LCD_timer(sTime.Seconds); //show timer
 8000fc8:	78bb      	ldrb	r3, [r7, #2]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fc66 	bl	800089c <LCD_timer>
						LCD_flush(&ST7735); //spi transmit dma normal
 8000fd0:	480e      	ldr	r0, [pc, #56]	; (800100c <main+0x3b8>)
 8000fd2:	f7ff fc51 	bl	8000878 <LCD_flush>
//
//				}
			}

			//read RTC
			HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4908      	ldr	r1, [pc, #32]	; (8000ffc <main+0x3a8>)
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <main+0x3b0>)
 8000fdc:	f007 fc7e 	bl	80088dc <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	490b      	ldr	r1, [pc, #44]	; (8001010 <main+0x3bc>)
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <main+0x3b0>)
 8000fe6:	f007 fd5d 	bl	8008aa4 <HAL_RTC_GetDate>

			//hsem release
			HAL_HSEM_Release(1, 0);
 8000fea:	2100      	movs	r1, #0
 8000fec:	2001      	movs	r0, #1
 8000fee:	f004 fe9b 	bl	8005d28 <HAL_HSEM_Release>
		if (HAL_HSEM_FastTake(1) == HAL_OK) //hsem cm7 is ready
 8000ff2:	e701      	b.n	8000df8 <main+0x1a4>
 8000ff4:	24017150 	.word	0x24017150
 8000ff8:	58020800 	.word	0x58020800
 8000ffc:	24023924 	.word	0x24023924
 8001000:	24023254 	.word	0x24023254
 8001004:	2402382c 	.word	0x2402382c
 8001008:	24023850 	.word	0x24023850
 800100c:	2402327c 	.word	0x2402327c
 8001010:	24023828 	.word	0x24023828

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b09c      	sub	sp, #112	; 0x70
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	224c      	movs	r2, #76	; 0x4c
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f00b ff5a 	bl	800cedc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2220      	movs	r2, #32
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00b ff54 	bl	800cedc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001034:	2004      	movs	r0, #4
 8001036:	f004 ffd3 	bl	8005fe0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b35      	ldr	r3, [pc, #212]	; (8001114 <SystemClock_Config+0x100>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4a34      	ldr	r2, [pc, #208]	; (8001114 <SystemClock_Config+0x100>)
 8001044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001048:	6193      	str	r3, [r2, #24]
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <SystemClock_Config+0x100>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	4b30      	ldr	r3, [pc, #192]	; (8001118 <SystemClock_Config+0x104>)
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	4a2f      	ldr	r2, [pc, #188]	; (8001118 <SystemClock_Config+0x104>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <SystemClock_Config+0x104>)
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800106c:	bf00      	nop
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <SystemClock_Config+0x100>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800107a:	d1f8      	bne.n	800106e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <SystemClock_Config+0x108>)
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f023 0303 	bic.w	r3, r3, #3
 8001084:	4a25      	ldr	r2, [pc, #148]	; (800111c <SystemClock_Config+0x108>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800108c:	2309      	movs	r3, #9
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001090:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001096:	2301      	movs	r3, #1
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109e:	2302      	movs	r3, #2
 80010a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80010a6:	2319      	movs	r3, #25
 80010a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010b6:	230c      	movs	r3, #12
 80010b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 fff4 	bl	80060b4 <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010d2:	f000 fbbb 	bl	800184c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	233f      	movs	r3, #63	; 0x3f
 80010d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2303      	movs	r3, #3
 80010dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010e6:	2340      	movs	r3, #64	; 0x40
 80010e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010f4:	2340      	movs	r3, #64	; 0x40
 80010f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2101      	movs	r1, #1
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 fbe9 	bl	80068d4 <HAL_RCC_ClockConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001108:	f000 fba0 	bl	800184c <Error_Handler>
  }
}
 800110c:	bf00      	nop
 800110e:	3770      	adds	r7, #112	; 0x70
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	58024800 	.word	0x58024800
 8001118:	58000400 	.word	0x58000400
 800111c:	58024400 	.word	0x58024400

08001120 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <MX_ETH_Init+0x80>)
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <MX_ETH_Init+0x84>)
 8001128:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_ETH_Init+0x88>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_ETH_Init+0x88>)
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_ETH_Init+0x88>)
 8001138:	22e1      	movs	r2, #225	; 0xe1
 800113a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_ETH_Init+0x88>)
 800113e:	2200      	movs	r2, #0
 8001140:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_ETH_Init+0x88>)
 8001144:	2200      	movs	r2, #0
 8001146:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_ETH_Init+0x88>)
 800114a:	2200      	movs	r2, #0
 800114c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_ETH_Init+0x80>)
 8001150:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <MX_ETH_Init+0x88>)
 8001152:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_ETH_Init+0x80>)
 8001156:	2201      	movs	r2, #1
 8001158:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_ETH_Init+0x80>)
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <MX_ETH_Init+0x8c>)
 800115e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_ETH_Init+0x80>)
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <MX_ETH_Init+0x90>)
 8001164:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_ETH_Init+0x80>)
 8001168:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800116c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <MX_ETH_Init+0x80>)
 8001170:	f003 ffe0 	bl	8005134 <HAL_ETH_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800117a:	f000 fb67 	bl	800184c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800117e:	2234      	movs	r2, #52	; 0x34
 8001180:	2100      	movs	r1, #0
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_ETH_Init+0x94>)
 8001184:	f00b feaa 	bl	800cedc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_ETH_Init+0x94>)
 800118a:	2221      	movs	r2, #33	; 0x21
 800118c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_ETH_Init+0x94>)
 8001190:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001194:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_ETH_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	24023938 	.word	0x24023938
 80011a4:	40028000 	.word	0x40028000
 80011a8:	24023298 	.word	0x24023298
 80011ac:	240171c0 	.word	0x240171c0
 80011b0:	24017160 	.word	0x24017160
 80011b4:	240239c0 	.word	0x240239c0

080011b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b090      	sub	sp, #64	; 0x40
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2228      	movs	r2, #40	; 0x28
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f00b fe7f 	bl	800cedc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011de:	4b3c      	ldr	r3, [pc, #240]	; (80012d0 <MX_RTC_Init+0x118>)
 80011e0:	4a3c      	ldr	r2, [pc, #240]	; (80012d4 <MX_RTC_Init+0x11c>)
 80011e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011e4:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <MX_RTC_Init+0x118>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011ea:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <MX_RTC_Init+0x118>)
 80011ec:	227f      	movs	r2, #127	; 0x7f
 80011ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011f0:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <MX_RTC_Init+0x118>)
 80011f2:	22ff      	movs	r2, #255	; 0xff
 80011f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011f6:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <MX_RTC_Init+0x118>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011fc:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <MX_RTC_Init+0x118>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001202:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <MX_RTC_Init+0x118>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <MX_RTC_Init+0x118>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800120e:	4830      	ldr	r0, [pc, #192]	; (80012d0 <MX_RTC_Init+0x118>)
 8001210:	f007 fa4e 	bl	80086b0 <HAL_RTC_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800121a:	f000 fb17 	bl	800184c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001230:	2300      	movs	r3, #0
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123c:	2201      	movs	r2, #1
 800123e:	4619      	mov	r1, r3
 8001240:	4823      	ldr	r0, [pc, #140]	; (80012d0 <MX_RTC_Init+0x118>)
 8001242:	f007 faad 	bl	80087a0 <HAL_RTC_SetTime>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800124c:	f000 fafe 	bl	800184c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001250:	2301      	movs	r3, #1
 8001252:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001256:	2301      	movs	r3, #1
 8001258:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800125c:	2301      	movs	r3, #1
 800125e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	4817      	ldr	r0, [pc, #92]	; (80012d0 <MX_RTC_Init+0x118>)
 8001272:	f007 fb8f 	bl	8008994 <HAL_RTC_SetDate>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800127c:	f000 fae6 	bl	800184c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001280:	2300      	movs	r3, #0
 8001282:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001284:	2300      	movs	r3, #0
 8001286:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001288:	2300      	movs	r3, #0
 800128a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_RTC_Init+0x120>)
 800129a:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80012aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	2201      	movs	r2, #1
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_RTC_Init+0x118>)
 80012b8:	f007 fc42 	bl	8008b40 <HAL_RTC_SetAlarm_IT>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 80012c2:	f000 fac3 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3740      	adds	r7, #64	; 0x40
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2402382c 	.word	0x2402382c
 80012d4:	58004000 	.word	0x58004000
 80012d8:	00808080 	.word	0x00808080

080012dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012e0:	4b28      	ldr	r3, [pc, #160]	; (8001384 <MX_SPI1_Init+0xa8>)
 80012e2:	4a29      	ldr	r2, [pc, #164]	; (8001388 <MX_SPI1_Init+0xac>)
 80012e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_SPI1_Init+0xa8>)
 80012e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <MX_SPI1_Init+0xa8>)
 80012f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MX_SPI1_Init+0xa8>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_SPI1_Init+0xa8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_SPI1_Init+0xa8>)
 800130a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800130e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001312:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001316:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_SPI1_Init+0xa8>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001326:	2200      	movs	r2, #0
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_SPI1_Init+0xa8>)
 800132c:	2200      	movs	r2, #0
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_SPI1_Init+0xa8>)
 800133a:	2200      	movs	r2, #0
 800133c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001346:	2200      	movs	r2, #0
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_SPI1_Init+0xa8>)
 800134c:	2200      	movs	r2, #0
 800134e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001352:	2200      	movs	r2, #0
 8001354:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001358:	2200      	movs	r2, #0
 800135a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_SPI1_Init+0xa8>)
 800135e:	2200      	movs	r2, #0
 8001360:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001364:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_SPI1_Init+0xa8>)
 800136c:	2200      	movs	r2, #0
 800136e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_SPI1_Init+0xa8>)
 8001372:	f007 fe45 	bl	8009000 <HAL_SPI_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800137c:	f000 fa66 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2402389c 	.word	0x2402389c
 8001388:	40013000 	.word	0x40013000

0800138c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b09a      	sub	sp, #104	; 0x68
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	222c      	movs	r2, #44	; 0x2c
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00b fd88 	bl	800cedc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013cc:	4b43      	ldr	r3, [pc, #268]	; (80014dc <MX_TIM1_Init+0x150>)
 80013ce:	4a44      	ldr	r2, [pc, #272]	; (80014e0 <MX_TIM1_Init+0x154>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013d2:	4b42      	ldr	r3, [pc, #264]	; (80014dc <MX_TIM1_Init+0x150>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <MX_TIM1_Init+0x150>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80013de:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <MX_TIM1_Init+0x150>)
 80013e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80013e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <MX_TIM1_Init+0x150>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ec:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <MX_TIM1_Init+0x150>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <MX_TIM1_Init+0x150>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013f8:	4838      	ldr	r0, [pc, #224]	; (80014dc <MX_TIM1_Init+0x150>)
 80013fa:	f008 fda4 	bl	8009f46 <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001404:	f000 fa22 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001412:	4619      	mov	r1, r3
 8001414:	4831      	ldr	r0, [pc, #196]	; (80014dc <MX_TIM1_Init+0x150>)
 8001416:	f009 f8cf 	bl	800a5b8 <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001420:	f000 fa14 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001424:	482d      	ldr	r0, [pc, #180]	; (80014dc <MX_TIM1_Init+0x150>)
 8001426:	f008 fe4d 	bl	800a0c4 <HAL_TIM_PWM_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001430:	f000 fa0c 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001440:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001444:	4619      	mov	r1, r3
 8001446:	4825      	ldr	r0, [pc, #148]	; (80014dc <MX_TIM1_Init+0x150>)
 8001448:	f009 fdd6 	bl	800aff8 <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001452:	f000 f9fb 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001456:	2360      	movs	r3, #96	; 0x60
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145e:	2300      	movs	r3, #0
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	4818      	ldr	r0, [pc, #96]	; (80014dc <MX_TIM1_Init+0x150>)
 800147c:	f008 ff8c 	bl	800a398 <HAL_TIM_PWM_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001486:	f000 f9e1 	bl	800184c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800149e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4807      	ldr	r0, [pc, #28]	; (80014dc <MX_TIM1_Init+0x150>)
 80014c0:	f009 fe22 	bl	800b108 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80014ca:	f000 f9bf 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014ce:	4803      	ldr	r0, [pc, #12]	; (80014dc <MX_TIM1_Init+0x150>)
 80014d0:	f000 fbc8 	bl	8001c64 <HAL_TIM_MspPostInit>

}
 80014d4:	bf00      	nop
 80014d6:	3768      	adds	r7, #104	; 0x68
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	24023850 	.word	0x24023850
 80014e0:	40010000 	.word	0x40010000

080014e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <MX_USART3_UART_Init+0x90>)
 80014ea:	4a23      	ldr	r2, [pc, #140]	; (8001578 <MX_USART3_UART_Init+0x94>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_USART3_UART_Init+0x90>)
 80014f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <MX_USART3_UART_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_USART3_UART_Init+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_USART3_UART_Init+0x90>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_USART3_UART_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800152c:	4811      	ldr	r0, [pc, #68]	; (8001574 <MX_USART3_UART_Init+0x90>)
 800152e:	f009 fe69 	bl	800b204 <HAL_UART_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001538:	f000 f988 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800153c:	2100      	movs	r1, #0
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001540:	f00b f911 	bl	800c766 <HAL_UARTEx_SetTxFifoThreshold>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800154a:	f000 f97f 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800154e:	2100      	movs	r1, #0
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001552:	f00b f946 	bl	800c7e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800155c:	f000 f976 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001562:	f00b f8c7 	bl	800c6f4 <HAL_UARTEx_DisableFifoMode>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800156c:	f000 f96e 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	24023318 	.word	0x24023318
 8001578:	40004800 	.word	0x40004800

0800157c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001584:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001588:	2209      	movs	r2, #9
 800158a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800158e:	2202      	movs	r2, #2
 8001590:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800159a:	2202      	movs	r2, #2
 800159c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015c4:	f004 fbc4 	bl	8005d50 <HAL_PCD_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80015ce:	f000 f93d 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	240233a8 	.word	0x240233a8
 80015dc:	40080000 	.word	0x40080000

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_DMA_Init+0x5c>)
 80015e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <MX_DMA_Init+0x5c>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_DMA_Init+0x5c>)
 80015f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	200b      	movs	r0, #11
 800160a:	f000 ff04 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800160e:	200b      	movs	r0, #11
 8001610:	f000 ff1b 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	200c      	movs	r0, #12
 800161a:	f000 fefc 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800161e:	200c      	movs	r0, #12
 8001620:	f000 ff13 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	200d      	movs	r0, #13
 800162a:	f000 fef4 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800162e:	200d      	movs	r0, #13
 8001630:	f000 ff0b 	bl	800244a <HAL_NVIC_EnableIRQ>

}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	58024400 	.word	0x58024400

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	4b62      	ldr	r3, [pc, #392]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	4a60      	ldr	r2, [pc, #384]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001666:	4b5e      	ldr	r3, [pc, #376]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001674:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167a:	4a59      	ldr	r2, [pc, #356]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001684:	4b56      	ldr	r3, [pc, #344]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001698:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a2:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b4b      	ldr	r3, [pc, #300]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b6:	4a4a      	ldr	r2, [pc, #296]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c0:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4b44      	ldr	r3, [pc, #272]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d4:	4a42      	ldr	r2, [pc, #264]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016de:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ec:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f2:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800170a:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001710:	4a33      	ldr	r2, [pc, #204]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 8001712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <MX_GPIO_Init+0x1a0>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	2101      	movs	r1, #1
 800172c:	482d      	ldr	r0, [pc, #180]	; (80017e4 <MX_GPIO_Init+0x1a4>)
 800172e:	f004 fac7 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001738:	482b      	ldr	r0, [pc, #172]	; (80017e8 <MX_GPIO_Init+0x1a8>)
 800173a:	f004 fac1 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001744:	4828      	ldr	r0, [pc, #160]	; (80017e8 <MX_GPIO_Init+0x1a8>)
 8001746:	f004 fabb 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001750:	4826      	ldr	r0, [pc, #152]	; (80017ec <MX_GPIO_Init+0x1ac>)
 8001752:	f004 fab5 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175c:	4824      	ldr	r0, [pc, #144]	; (80017f0 <MX_GPIO_Init+0x1b0>)
 800175e:	f004 faaf 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001762:	2301      	movs	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4619      	mov	r1, r3
 8001778:	481a      	ldr	r0, [pc, #104]	; (80017e4 <MX_GPIO_Init+0x1a4>)
 800177a:	f004 f8f1 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 800177e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4814      	ldr	r0, [pc, #80]	; (80017e8 <MX_GPIO_Init+0x1a8>)
 8001798:	f004 f8e2 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : led3_Pin led2_Pin led1_Pin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 800179c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	480d      	ldr	r0, [pc, #52]	; (80017ec <MX_GPIO_Init+0x1ac>)
 80017b6:	f004 f8d3 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80017ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <MX_GPIO_Init+0x1b0>)
 80017d4:	f004 f8c4 	bl	8005960 <HAL_GPIO_Init>

}
 80017d8:	bf00      	nop
 80017da:	3730      	adds	r7, #48	; 0x30
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58020400 	.word	0x58020400
 80017e8:	58020c00 	.word	0x58020c00
 80017ec:	58020800 	.word	0x58020800
 80017f0:	58021800 	.word	0x58021800

080017f4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	shareMemory->RTC_ON = 0; //rtc work done (reset)
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_RTC_AlarmAEventCallback+0x48>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2200      	movs	r2, #0
 8001802:	719a      	strb	r2, [r3, #6]
	shareMemory->finish = 1; //work for 1 min is done
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_RTC_AlarmAEventCallback+0x48>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2201      	movs	r2, #1
 800180a:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0); //stop driving motor
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_RTC_AlarmAEventCallback+0x4c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2200      	movs	r2, #0
 8001812:	635a      	str	r2, [r3, #52]	; 0x34

	LCD_timer(0x60); //show 60 sec
 8001814:	2060      	movs	r0, #96	; 0x60
 8001816:	f7ff f841 	bl	800089c <LCD_timer>
	LCD_fan(shareMemory->RTC_ON); //show rtc status
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_RTC_AlarmAEventCallback+0x48>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	799b      	ldrb	r3, [r3, #6]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff f923 	bl	8000a6c <LCD_fan>
	LCD_flush(&ST7735); //spi transmit dma normal
 8001826:	4807      	ldr	r0, [pc, #28]	; (8001844 <HAL_RTC_AlarmAEventCallback+0x50>)
 8001828:	f7ff f826 	bl	8000878 <LCD_flush>

	RTC_start = 1;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_RTC_AlarmAEventCallback+0x54>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	24017150 	.word	0x24017150
 8001840:	24023850 	.word	0x24023850
 8001844:	2402327c 	.word	0x2402327c
 8001848:	24017154 	.word	0x24017154

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>
	...

08001858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_MspInit+0x30>)
 8001860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001864:	4a08      	ldr	r2, [pc, #32]	; (8001888 <HAL_MspInit+0x30>)
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_MspInit+0x30>)
 8001870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	58024400 	.word	0x58024400

0800188c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	; 0x38
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a59      	ldr	r2, [pc, #356]	; (8001a10 <HAL_ETH_MspInit+0x184>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	f040 80ab 	bne.w	8001a06 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80018b0:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 80018b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018b6:	4a57      	ldr	r2, [pc, #348]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 80018b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018c0:	4b54      	ldr	r3, [pc, #336]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 80018c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ca:	623b      	str	r3, [r7, #32]
 80018cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80018ce:	4b51      	ldr	r3, [pc, #324]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 80018d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018d4:	4a4f      	ldr	r2, [pc, #316]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 80018d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018de:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 80018e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80018ec:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 80018ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018f2:	4a48      	ldr	r2, [pc, #288]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018fc:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 80018fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	4a40      	ldr	r2, [pc, #256]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	4a39      	ldr	r2, [pc, #228]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001938:	4b36      	ldr	r3, [pc, #216]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	4a31      	ldr	r2, [pc, #196]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001956:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	4a2a      	ldr	r2, [pc, #168]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 800196c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_ETH_MspInit+0x188>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001982:	2332      	movs	r3, #50	; 0x32
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001992:	230b      	movs	r3, #11
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199a:	4619      	mov	r1, r3
 800199c:	481e      	ldr	r0, [pc, #120]	; (8001a18 <HAL_ETH_MspInit+0x18c>)
 800199e:	f003 ffdf 	bl	8005960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80019a2:	2386      	movs	r3, #134	; 0x86
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019b2:	230b      	movs	r3, #11
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ba:	4619      	mov	r1, r3
 80019bc:	4817      	ldr	r0, [pc, #92]	; (8001a1c <HAL_ETH_MspInit+0x190>)
 80019be:	f003 ffcf 	bl	8005960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019d4:	230b      	movs	r3, #11
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	4810      	ldr	r0, [pc, #64]	; (8001a20 <HAL_ETH_MspInit+0x194>)
 80019e0:	f003 ffbe 	bl	8005960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80019e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019f6:	230b      	movs	r3, #11
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	4808      	ldr	r0, [pc, #32]	; (8001a24 <HAL_ETH_MspInit+0x198>)
 8001a02:	f003 ffad 	bl	8005960 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3738      	adds	r7, #56	; 0x38
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40028000 	.word	0x40028000
 8001a14:	58024400 	.word	0x58024400
 8001a18:	58020800 	.word	0x58020800
 8001a1c:	58020000 	.word	0x58020000
 8001a20:	58020400 	.word	0x58020400
 8001a24:	58021800 	.word	0x58021800

08001a28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0b2      	sub	sp, #200	; 0xc8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	22bc      	movs	r2, #188	; 0xbc
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f00b fa4f 	bl	800cedc <memset>
  if(hrtc->Instance==RTC)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <HAL_RTC_MspInit+0x68>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d11e      	bne.n	8001a86 <HAL_RTC_MspInit+0x5e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a4c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f005 fac6 	bl	8006fec <HAL_RCCEx_PeriphCLKConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a66:	f7ff fef1 	bl	800184c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_RTC_MspInit+0x6c>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_RTC_MspInit+0x6c>)
 8001a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2029      	movs	r0, #41	; 0x29
 8001a7c:	f000 fccb 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a80:	2029      	movs	r0, #41	; 0x29
 8001a82:	f000 fce2 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	37c8      	adds	r7, #200	; 0xc8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	58004000 	.word	0x58004000
 8001a94:	58024400 	.word	0x58024400

08001a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0ba      	sub	sp, #232	; 0xe8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	22bc      	movs	r2, #188	; 0xbc
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f00b fa0f 	bl	800cedc <memset>
  if(hspi->Instance==SPI1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a51      	ldr	r2, [pc, #324]	; (8001c08 <HAL_SPI_MspInit+0x170>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	f040 809b 	bne.w	8001c00 <HAL_SPI_MspInit+0x168>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ace:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f005 fa87 	bl	8006fec <HAL_RCCEx_PeriphCLKConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001ae4:	f7ff feb2 	bl	800184c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ae8:	4b48      	ldr	r3, [pc, #288]	; (8001c0c <HAL_SPI_MspInit+0x174>)
 8001aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aee:	4a47      	ldr	r2, [pc, #284]	; (8001c0c <HAL_SPI_MspInit+0x174>)
 8001af0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001af4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <HAL_SPI_MspInit+0x174>)
 8001afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <HAL_SPI_MspInit+0x174>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0c:	4a3f      	ldr	r2, [pc, #252]	; (8001c0c <HAL_SPI_MspInit+0x174>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_SPI_MspInit+0x174>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b24:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_SPI_MspInit+0x174>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	4a38      	ldr	r2, [pc, #224]	; (8001c0c <HAL_SPI_MspInit+0x174>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b34:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <HAL_SPI_MspInit+0x174>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b42:	2320      	movs	r3, #32
 8001b44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b64:	4619      	mov	r1, r3
 8001b66:	482a      	ldr	r0, [pc, #168]	; (8001c10 <HAL_SPI_MspInit+0x178>)
 8001b68:	f003 fefa 	bl	8005960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b84:	2305      	movs	r3, #5
 8001b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4820      	ldr	r0, [pc, #128]	; (8001c14 <HAL_SPI_MspInit+0x17c>)
 8001b92:	f003 fee5 	bl	8005960 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001b98:	4a20      	ldr	r2, [pc, #128]	; (8001c1c <HAL_SPI_MspInit+0x184>)
 8001b9a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001b9e:	2226      	movs	r2, #38	; 0x26
 8001ba0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bd4:	4810      	ldr	r0, [pc, #64]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001bd6:	f000 fc67 	bl	80024a8 <HAL_DMA_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8001be0:	f7ff fe34 	bl	800184c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001be8:	679a      	str	r2, [r3, #120]	; 0x78
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_SPI_MspInit+0x180>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2023      	movs	r0, #35	; 0x23
 8001bf6:	f000 fc0e 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bfa:	2023      	movs	r0, #35	; 0x23
 8001bfc:	f000 fc25 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	37e8      	adds	r7, #232	; 0xe8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40013000 	.word	0x40013000
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	58020000 	.word	0x58020000
 8001c14:	58020400 	.word	0x58020400
 8001c18:	240239f4 	.word	0x240239f4
 8001c1c:	40020010 	.word	0x40020010

08001c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <HAL_TIM_Base_MspInit+0x3c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10e      	bne.n	8001c50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_TIM_Base_MspInit+0x40>)
 8001c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c38:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_TIM_Base_MspInit+0x40>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_TIM_Base_MspInit+0x40>)
 8001c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	58024400 	.word	0x58024400

08001c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <HAL_TIM_MspPostInit+0x6c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d11f      	bne.n	8001cc6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_TIM_MspPostInit+0x70>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_TIM_MspPostInit+0x70>)
 8001c8e:	f043 0310 	orr.w	r3, r3, #16
 8001c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_TIM_MspPostInit+0x70>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_TIM_MspPostInit+0x74>)
 8001cc2:	f003 fe4d 	bl	8005960 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	58021000 	.word	0x58021000

08001cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0b8      	sub	sp, #224	; 0xe0
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	22bc      	movs	r2, #188	; 0xbc
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f00b f8ed 	bl	800cedc <memset>
  if(huart->Instance==USART3)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a57      	ldr	r2, [pc, #348]	; (8001e64 <HAL_UART_MspInit+0x188>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	f040 80a6 	bne.w	8001e5a <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f005 f965 	bl	8006fec <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001d28:	f7ff fd90 	bl	800184c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d2c:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <HAL_UART_MspInit+0x18c>)
 8001d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d32:	4a4d      	ldr	r2, [pc, #308]	; (8001e68 <HAL_UART_MspInit+0x18c>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d3c:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <HAL_UART_MspInit+0x18c>)
 8001d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4a:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_UART_MspInit+0x18c>)
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d50:	4a45      	ldr	r2, [pc, #276]	; (8001e68 <HAL_UART_MspInit+0x18c>)
 8001d52:	f043 0308 	orr.w	r3, r3, #8
 8001d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d5a:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <HAL_UART_MspInit+0x18c>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d82:	2307      	movs	r3, #7
 8001d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4837      	ldr	r0, [pc, #220]	; (8001e6c <HAL_UART_MspInit+0x190>)
 8001d90:	f003 fde6 	bl	8005960 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d94:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001d96:	4a37      	ldr	r2, [pc, #220]	; (8001e74 <HAL_UART_MspInit+0x198>)
 8001d98:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d9a:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001d9c:	222d      	movs	r2, #45	; 0x2d
 8001d9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da0:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da6:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dac:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001db4:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dba:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001dd4:	4826      	ldr	r0, [pc, #152]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001dd6:	f000 fb67 	bl	80024a8 <HAL_DMA_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001de0:	f7ff fd34 	bl	800184c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001de8:	67da      	str	r2, [r3, #124]	; 0x7c
 8001dea:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <HAL_UART_MspInit+0x194>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001df2:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <HAL_UART_MspInit+0x1a0>)
 8001df4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001df8:	222e      	movs	r2, #46	; 0x2e
 8001dfa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001dfe:	2240      	movs	r2, #64	; 0x40
 8001e00:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e2e:	4812      	ldr	r0, [pc, #72]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001e30:	f000 fb3a 	bl	80024a8 <HAL_DMA_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001e3a:	f7ff fd07 	bl	800184c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001e42:	679a      	str	r2, [r3, #120]	; 0x78
 8001e44:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_UART_MspInit+0x19c>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2027      	movs	r0, #39	; 0x27
 8001e50:	f000 fae1 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e54:	2027      	movs	r0, #39	; 0x27
 8001e56:	f000 faf8 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	37e0      	adds	r7, #224	; 0xe0
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40004800 	.word	0x40004800
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	58020c00 	.word	0x58020c00
 8001e70:	240232a0 	.word	0x240232a0
 8001e74:	40020028 	.word	0x40020028
 8001e78:	240237b0 	.word	0x240237b0
 8001e7c:	40020040 	.word	0x40020040

08001e80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b0b8      	sub	sp, #224	; 0xe0
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	22bc      	movs	r2, #188	; 0xbc
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f00b f81b 	bl	800cedc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <HAL_PCD_MspInit+0x108>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d166      	bne.n	8001f7e <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001eb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001eb4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001eba:	2312      	movs	r3, #18
 8001ebc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001eca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ece:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001ed0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ed4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001ed6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f005 f882 	bl	8006fec <HAL_RCCEx_PeriphCLKConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001eee:	f7ff fcad 	bl	800184c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001ef2:	f004 f8cf 	bl	8006094 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_PCD_MspInit+0x10c>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efc:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <HAL_PCD_MspInit+0x10c>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_PCD_MspInit+0x10c>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001f14:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001f2e:	230a      	movs	r3, #10
 8001f30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4815      	ldr	r0, [pc, #84]	; (8001f90 <HAL_PCD_MspInit+0x110>)
 8001f3c:	f003 fd10 	bl	8005960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480d      	ldr	r0, [pc, #52]	; (8001f90 <HAL_PCD_MspInit+0x110>)
 8001f5c:	f003 fd00 	bl	8005960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_PCD_MspInit+0x10c>)
 8001f62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_PCD_MspInit+0x10c>)
 8001f68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_PCD_MspInit+0x10c>)
 8001f72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	37e0      	adds	r7, #224	; 0xe0
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40080000 	.word	0x40080000
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	58020000 	.word	0x58020000

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 f8da 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <DMA1_Stream0_IRQHandler+0x10>)
 8001fee:	f001 fd83 	bl	8003af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	240239f4 	.word	0x240239f4

08001ffc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA1_Stream1_IRQHandler+0x10>)
 8002002:	f001 fd79 	bl	8003af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	240232a0 	.word	0x240232a0

08002010 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA1_Stream2_IRQHandler+0x10>)
 8002016:	f001 fd6f 	bl	8003af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	240237b0 	.word	0x240237b0

08002024 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <SPI1_IRQHandler+0x10>)
 800202a:	f007 fc23 	bl	8009874 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2402389c 	.word	0x2402389c

08002038 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <USART3_IRQHandler+0x10>)
 800203e:	f009 f931 	bl	800b2a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	24023318 	.word	0x24023318

0800204c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <RTC_Alarm_IRQHandler+0x10>)
 8002052:	f006 feab 	bl	8008dac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2402382c 	.word	0x2402382c

08002060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002098 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002064:	f7fe fab4 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800206a:	490d      	ldr	r1, [pc, #52]	; (80020a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002070:	e002      	b.n	8002078 <LoopCopyDataInit>

08002072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002076:	3304      	adds	r3, #4

08002078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800207c:	d3f9      	bcc.n	8002072 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002080:	4c0a      	ldr	r4, [pc, #40]	; (80020ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002084:	e001      	b.n	800208a <LoopFillZerobss>

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002088:	3204      	adds	r2, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800208e:	f00a fef3 	bl	800ce78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002092:	f7fe fddf 	bl	8000c54 <main>
  bx  lr
 8002096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002098:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800209c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80020a0:	24017160 	.word	0x24017160
  ldr r2, =_sidata
 80020a4:	0800cf54 	.word	0x0800cf54
  ldr r2, =_sbss
 80020a8:	24017220 	.word	0x24017220
  ldr r4, =_ebss
 80020ac:	24023a70 	.word	0x24023a70

080020b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b0:	e7fe      	b.n	80020b0 <ADC3_IRQHandler>
	...

080020b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ba:	2003      	movs	r0, #3
 80020bc:	f000 f9a0 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020c0:	f004 fdbe 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_Init+0x68>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	4913      	ldr	r1, [pc, #76]	; (8002120 <HAL_Init+0x6c>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_Init+0x68>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_Init+0x6c>)
 80020e8:	5cd3      	ldrb	r3, [r2, r3]
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
 80020f4:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_Init+0x70>)
 80020f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020f8:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <HAL_Init+0x74>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fe:	2000      	movs	r0, #0
 8002100:	f000 f814 	bl	800212c <HAL_InitTick>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e002      	b.n	8002114 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800210e:	f7ff fba3 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	58024400 	.word	0x58024400
 8002120:	0800cf04 	.word	0x0800cf04
 8002124:	24000004 	.word	0x24000004
 8002128:	24000000 	.word	0x24000000

0800212c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_InitTick+0x60>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e021      	b.n	8002184 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_InitTick+0x64>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_InitTick+0x60>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f985 	bl	8002466 <HAL_SYSTICK_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00e      	b.n	8002184 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d80a      	bhi.n	8002182 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f000 f94f 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <HAL_InitTick+0x68>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	2401715c 	.word	0x2401715c
 8002190:	24000000 	.word	0x24000000
 8002194:	24017158 	.word	0x24017158

08002198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_IncTick+0x20>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_IncTick+0x24>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_IncTick+0x24>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	2401715c 	.word	0x2401715c
 80021bc:	24023a6c 	.word	0x24023a6c

080021c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_GetTick+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	24023a6c 	.word	0x24023a6c

080021d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff ffee 	bl	80021c0 <HAL_GetTick>
 80021e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d005      	beq.n	80021fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_Delay+0x44>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021fe:	bf00      	nop
 8002200:	f7ff ffde 	bl	80021c0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	d8f7      	bhi.n	8002200 <HAL_Delay+0x28>
  {
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	2401715c 	.word	0x2401715c

08002220 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetREVID+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0c1b      	lsrs	r3, r3, #16
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	5c001000 	.word	0x5c001000

08002238 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002248:	4904      	ldr	r1, [pc, #16]	; (800225c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	58000400 	.word	0x58000400

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	4313      	orrs	r3, r2
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00
 80022a4:	05fa0000 	.word	0x05fa0000

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff29 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff40 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff90 	bl	8002354 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff5f 	bl	8002300 <__NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff33 	bl	80022c4 <__NVIC_EnableIRQ>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffa4 	bl	80023bc <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_GetCurrentCPUID+0x24>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	2b07      	cmp	r3, #7
 8002490:	d101      	bne.n	8002496 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002492:	2303      	movs	r3, #3
 8002494:	e000      	b.n	8002498 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002496:	2301      	movs	r3, #1
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff fe86 	bl	80021c0 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e316      	b.n	8002aee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a66      	ldr	r2, [pc, #408]	; (8002660 <HAL_DMA_Init+0x1b8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d04a      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a65      	ldr	r2, [pc, #404]	; (8002664 <HAL_DMA_Init+0x1bc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d045      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a63      	ldr	r2, [pc, #396]	; (8002668 <HAL_DMA_Init+0x1c0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d040      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a62      	ldr	r2, [pc, #392]	; (800266c <HAL_DMA_Init+0x1c4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d03b      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a60      	ldr	r2, [pc, #384]	; (8002670 <HAL_DMA_Init+0x1c8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d036      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a5f      	ldr	r2, [pc, #380]	; (8002674 <HAL_DMA_Init+0x1cc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d031      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a5d      	ldr	r2, [pc, #372]	; (8002678 <HAL_DMA_Init+0x1d0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02c      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a5c      	ldr	r2, [pc, #368]	; (800267c <HAL_DMA_Init+0x1d4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d027      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a5a      	ldr	r2, [pc, #360]	; (8002680 <HAL_DMA_Init+0x1d8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d022      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a59      	ldr	r2, [pc, #356]	; (8002684 <HAL_DMA_Init+0x1dc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d01d      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a57      	ldr	r2, [pc, #348]	; (8002688 <HAL_DMA_Init+0x1e0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d018      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a56      	ldr	r2, [pc, #344]	; (800268c <HAL_DMA_Init+0x1e4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_DMA_Init+0x1e8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00e      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a53      	ldr	r2, [pc, #332]	; (8002694 <HAL_DMA_Init+0x1ec>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d009      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a51      	ldr	r2, [pc, #324]	; (8002698 <HAL_DMA_Init+0x1f0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a50      	ldr	r2, [pc, #320]	; (800269c <HAL_DMA_Init+0x1f4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_DMA_Init+0xbc>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_DMA_Init+0xbe>
 8002564:	2300      	movs	r3, #0
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 813b 	beq.w	80027e2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a37      	ldr	r2, [pc, #220]	; (8002660 <HAL_DMA_Init+0x1b8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d04a      	beq.n	800261c <HAL_DMA_Init+0x174>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a36      	ldr	r2, [pc, #216]	; (8002664 <HAL_DMA_Init+0x1bc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d045      	beq.n	800261c <HAL_DMA_Init+0x174>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a34      	ldr	r2, [pc, #208]	; (8002668 <HAL_DMA_Init+0x1c0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d040      	beq.n	800261c <HAL_DMA_Init+0x174>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a33      	ldr	r2, [pc, #204]	; (800266c <HAL_DMA_Init+0x1c4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d03b      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a31      	ldr	r2, [pc, #196]	; (8002670 <HAL_DMA_Init+0x1c8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d036      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a30      	ldr	r2, [pc, #192]	; (8002674 <HAL_DMA_Init+0x1cc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d031      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2e      	ldr	r2, [pc, #184]	; (8002678 <HAL_DMA_Init+0x1d0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02c      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a2d      	ldr	r2, [pc, #180]	; (800267c <HAL_DMA_Init+0x1d4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d027      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <HAL_DMA_Init+0x1d8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d022      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <HAL_DMA_Init+0x1dc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d01d      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_DMA_Init+0x1e0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d018      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a27      	ldr	r2, [pc, #156]	; (800268c <HAL_DMA_Init+0x1e4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a25      	ldr	r2, [pc, #148]	; (8002690 <HAL_DMA_Init+0x1e8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00e      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a24      	ldr	r2, [pc, #144]	; (8002694 <HAL_DMA_Init+0x1ec>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_DMA_Init+0x174>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a22      	ldr	r2, [pc, #136]	; (8002698 <HAL_DMA_Init+0x1f0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_DMA_Init+0x174>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a21      	ldr	r2, [pc, #132]	; (800269c <HAL_DMA_Init+0x1f4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d108      	bne.n	800262e <HAL_DMA_Init+0x186>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e007      	b.n	800263e <HAL_DMA_Init+0x196>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800263e:	e02f      	b.n	80026a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002640:	f7ff fdbe 	bl	80021c0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b05      	cmp	r3, #5
 800264c:	d928      	bls.n	80026a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2203      	movs	r2, #3
 8002658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e246      	b.n	8002aee <HAL_DMA_Init+0x646>
 8002660:	40020010 	.word	0x40020010
 8002664:	40020028 	.word	0x40020028
 8002668:	40020040 	.word	0x40020040
 800266c:	40020058 	.word	0x40020058
 8002670:	40020070 	.word	0x40020070
 8002674:	40020088 	.word	0x40020088
 8002678:	400200a0 	.word	0x400200a0
 800267c:	400200b8 	.word	0x400200b8
 8002680:	40020410 	.word	0x40020410
 8002684:	40020428 	.word	0x40020428
 8002688:	40020440 	.word	0x40020440
 800268c:	40020458 	.word	0x40020458
 8002690:	40020470 	.word	0x40020470
 8002694:	40020488 	.word	0x40020488
 8002698:	400204a0 	.word	0x400204a0
 800269c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1c8      	bne.n	8002640 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4b83      	ldr	r3, [pc, #524]	; (80028c8 <HAL_DMA_Init+0x420>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d107      	bne.n	8002704 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	4313      	orrs	r3, r2
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002704:	4b71      	ldr	r3, [pc, #452]	; (80028cc <HAL_DMA_Init+0x424>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b71      	ldr	r3, [pc, #452]	; (80028d0 <HAL_DMA_Init+0x428>)
 800270a:	4013      	ands	r3, r2
 800270c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002710:	d328      	bcc.n	8002764 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b28      	cmp	r3, #40	; 0x28
 8002718:	d903      	bls.n	8002722 <HAL_DMA_Init+0x27a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b2e      	cmp	r3, #46	; 0x2e
 8002720:	d917      	bls.n	8002752 <HAL_DMA_Init+0x2aa>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b3e      	cmp	r3, #62	; 0x3e
 8002728:	d903      	bls.n	8002732 <HAL_DMA_Init+0x28a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b42      	cmp	r3, #66	; 0x42
 8002730:	d90f      	bls.n	8002752 <HAL_DMA_Init+0x2aa>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b46      	cmp	r3, #70	; 0x46
 8002738:	d903      	bls.n	8002742 <HAL_DMA_Init+0x29a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b48      	cmp	r3, #72	; 0x48
 8002740:	d907      	bls.n	8002752 <HAL_DMA_Init+0x2aa>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b4e      	cmp	r3, #78	; 0x4e
 8002748:	d905      	bls.n	8002756 <HAL_DMA_Init+0x2ae>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b52      	cmp	r3, #82	; 0x52
 8002750:	d801      	bhi.n	8002756 <HAL_DMA_Init+0x2ae>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_DMA_Init+0x2b0>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002762:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0307 	bic.w	r3, r3, #7
 800277a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2b04      	cmp	r3, #4
 800278c:	d117      	bne.n	80027be <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00e      	beq.n	80027be <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f002 fb3d 	bl	8004e20 <DMA_CheckFifoParam>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e197      	b.n	8002aee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f002 fa78 	bl	8004cbc <DMA_CalcBaseAndBitshift>
 80027cc:	4603      	mov	r3, r0
 80027ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	223f      	movs	r2, #63	; 0x3f
 80027da:	409a      	lsls	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e0cd      	b.n	800297e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_DMA_Init+0x42c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d022      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a39      	ldr	r2, [pc, #228]	; (80028d8 <HAL_DMA_Init+0x430>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01d      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a38      	ldr	r2, [pc, #224]	; (80028dc <HAL_DMA_Init+0x434>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d018      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a36      	ldr	r2, [pc, #216]	; (80028e0 <HAL_DMA_Init+0x438>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a35      	ldr	r2, [pc, #212]	; (80028e4 <HAL_DMA_Init+0x43c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00e      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a33      	ldr	r2, [pc, #204]	; (80028e8 <HAL_DMA_Init+0x440>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d009      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a32      	ldr	r2, [pc, #200]	; (80028ec <HAL_DMA_Init+0x444>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d004      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a30      	ldr	r2, [pc, #192]	; (80028f0 <HAL_DMA_Init+0x448>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_DMA_Init+0x38e>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_DMA_Init+0x390>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8097 	beq.w	800296c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a24      	ldr	r2, [pc, #144]	; (80028d4 <HAL_DMA_Init+0x42c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d021      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_DMA_Init+0x430>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01c      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <HAL_DMA_Init+0x434>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d017      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_DMA_Init+0x438>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d012      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_DMA_Init+0x43c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00d      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_DMA_Init+0x440>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d008      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_DMA_Init+0x444>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d003      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_DMA_Init+0x448>)
 800288a:	4293      	cmp	r3, r2
 800288c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_DMA_Init+0x44c>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b40      	cmp	r3, #64	; 0x40
 80028b4:	d020      	beq.n	80028f8 <HAL_DMA_Init+0x450>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b80      	cmp	r3, #128	; 0x80
 80028bc:	d102      	bne.n	80028c4 <HAL_DMA_Init+0x41c>
 80028be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028c2:	e01a      	b.n	80028fa <HAL_DMA_Init+0x452>
 80028c4:	2300      	movs	r3, #0
 80028c6:	e018      	b.n	80028fa <HAL_DMA_Init+0x452>
 80028c8:	fe10803f 	.word	0xfe10803f
 80028cc:	5c001000 	.word	0x5c001000
 80028d0:	ffff0000 	.word	0xffff0000
 80028d4:	58025408 	.word	0x58025408
 80028d8:	5802541c 	.word	0x5802541c
 80028dc:	58025430 	.word	0x58025430
 80028e0:	58025444 	.word	0x58025444
 80028e4:	58025458 	.word	0x58025458
 80028e8:	5802546c 	.word	0x5802546c
 80028ec:	58025480 	.word	0x58025480
 80028f0:	58025494 	.word	0x58025494
 80028f4:	fffe000f 	.word	0xfffe000f
 80028f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68d2      	ldr	r2, [r2, #12]
 80028fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002910:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002918:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002920:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002928:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	4b6e      	ldr	r3, [pc, #440]	; (8002af8 <HAL_DMA_Init+0x650>)
 8002940:	4413      	add	r3, r2
 8002942:	4a6e      	ldr	r2, [pc, #440]	; (8002afc <HAL_DMA_Init+0x654>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	009a      	lsls	r2, r3, #2
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f002 f9b3 	bl	8004cbc <DMA_CalcBaseAndBitshift>
 8002956:	4603      	mov	r3, r0
 8002958:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2201      	movs	r2, #1
 8002964:	409a      	lsls	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	e008      	b.n	800297e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0b7      	b.n	8002aee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5f      	ldr	r2, [pc, #380]	; (8002b00 <HAL_DMA_Init+0x658>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d072      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5d      	ldr	r2, [pc, #372]	; (8002b04 <HAL_DMA_Init+0x65c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d06d      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5c      	ldr	r2, [pc, #368]	; (8002b08 <HAL_DMA_Init+0x660>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d068      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5a      	ldr	r2, [pc, #360]	; (8002b0c <HAL_DMA_Init+0x664>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d063      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a59      	ldr	r2, [pc, #356]	; (8002b10 <HAL_DMA_Init+0x668>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d05e      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a57      	ldr	r2, [pc, #348]	; (8002b14 <HAL_DMA_Init+0x66c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d059      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a56      	ldr	r2, [pc, #344]	; (8002b18 <HAL_DMA_Init+0x670>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d054      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_DMA_Init+0x674>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d04f      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a53      	ldr	r2, [pc, #332]	; (8002b20 <HAL_DMA_Init+0x678>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d04a      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a51      	ldr	r2, [pc, #324]	; (8002b24 <HAL_DMA_Init+0x67c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d045      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a50      	ldr	r2, [pc, #320]	; (8002b28 <HAL_DMA_Init+0x680>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d040      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a4e      	ldr	r2, [pc, #312]	; (8002b2c <HAL_DMA_Init+0x684>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d03b      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a4d      	ldr	r2, [pc, #308]	; (8002b30 <HAL_DMA_Init+0x688>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d036      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	; (8002b34 <HAL_DMA_Init+0x68c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a4a      	ldr	r2, [pc, #296]	; (8002b38 <HAL_DMA_Init+0x690>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02c      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a48      	ldr	r2, [pc, #288]	; (8002b3c <HAL_DMA_Init+0x694>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d027      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a47      	ldr	r2, [pc, #284]	; (8002b40 <HAL_DMA_Init+0x698>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a45      	ldr	r2, [pc, #276]	; (8002b44 <HAL_DMA_Init+0x69c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a44      	ldr	r2, [pc, #272]	; (8002b48 <HAL_DMA_Init+0x6a0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a42      	ldr	r2, [pc, #264]	; (8002b4c <HAL_DMA_Init+0x6a4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a41      	ldr	r2, [pc, #260]	; (8002b50 <HAL_DMA_Init+0x6a8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3f      	ldr	r2, [pc, #252]	; (8002b54 <HAL_DMA_Init+0x6ac>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a3e      	ldr	r2, [pc, #248]	; (8002b58 <HAL_DMA_Init+0x6b0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a3c      	ldr	r2, [pc, #240]	; (8002b5c <HAL_DMA_Init+0x6b4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_DMA_Init+0x5ca>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_DMA_Init+0x5cc>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d032      	beq.n	8002ade <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f002 fa4d 	bl	8004f18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d102      	bne.n	8002a8c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002aa0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d010      	beq.n	8002acc <HAL_DMA_Init+0x624>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d80c      	bhi.n	8002acc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f002 faca 	bl	800504c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	e008      	b.n	8002ade <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	a7fdabf8 	.word	0xa7fdabf8
 8002afc:	cccccccd 	.word	0xcccccccd
 8002b00:	40020010 	.word	0x40020010
 8002b04:	40020028 	.word	0x40020028
 8002b08:	40020040 	.word	0x40020040
 8002b0c:	40020058 	.word	0x40020058
 8002b10:	40020070 	.word	0x40020070
 8002b14:	40020088 	.word	0x40020088
 8002b18:	400200a0 	.word	0x400200a0
 8002b1c:	400200b8 	.word	0x400200b8
 8002b20:	40020410 	.word	0x40020410
 8002b24:	40020428 	.word	0x40020428
 8002b28:	40020440 	.word	0x40020440
 8002b2c:	40020458 	.word	0x40020458
 8002b30:	40020470 	.word	0x40020470
 8002b34:	40020488 	.word	0x40020488
 8002b38:	400204a0 	.word	0x400204a0
 8002b3c:	400204b8 	.word	0x400204b8
 8002b40:	58025408 	.word	0x58025408
 8002b44:	5802541c 	.word	0x5802541c
 8002b48:	58025430 	.word	0x58025430
 8002b4c:	58025444 	.word	0x58025444
 8002b50:	58025458 	.word	0x58025458
 8002b54:	5802546c 	.word	0x5802546c
 8002b58:	58025480 	.word	0x58025480
 8002b5c:	58025494 	.word	0x58025494

08002b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e226      	b.n	8002fca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_DMA_Start_IT+0x2a>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e21f      	b.n	8002fca <HAL_DMA_Start_IT+0x46a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	f040 820a 	bne.w	8002fb4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a68      	ldr	r2, [pc, #416]	; (8002d54 <HAL_DMA_Start_IT+0x1f4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d04a      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a66      	ldr	r2, [pc, #408]	; (8002d58 <HAL_DMA_Start_IT+0x1f8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d045      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a65      	ldr	r2, [pc, #404]	; (8002d5c <HAL_DMA_Start_IT+0x1fc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d040      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a63      	ldr	r2, [pc, #396]	; (8002d60 <HAL_DMA_Start_IT+0x200>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d03b      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a62      	ldr	r2, [pc, #392]	; (8002d64 <HAL_DMA_Start_IT+0x204>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d036      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a60      	ldr	r2, [pc, #384]	; (8002d68 <HAL_DMA_Start_IT+0x208>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d031      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5f      	ldr	r2, [pc, #380]	; (8002d6c <HAL_DMA_Start_IT+0x20c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d02c      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5d      	ldr	r2, [pc, #372]	; (8002d70 <HAL_DMA_Start_IT+0x210>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d027      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5c      	ldr	r2, [pc, #368]	; (8002d74 <HAL_DMA_Start_IT+0x214>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d022      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5a      	ldr	r2, [pc, #360]	; (8002d78 <HAL_DMA_Start_IT+0x218>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01d      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a59      	ldr	r2, [pc, #356]	; (8002d7c <HAL_DMA_Start_IT+0x21c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d018      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a57      	ldr	r2, [pc, #348]	; (8002d80 <HAL_DMA_Start_IT+0x220>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a56      	ldr	r2, [pc, #344]	; (8002d84 <HAL_DMA_Start_IT+0x224>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00e      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a54      	ldr	r2, [pc, #336]	; (8002d88 <HAL_DMA_Start_IT+0x228>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a53      	ldr	r2, [pc, #332]	; (8002d8c <HAL_DMA_Start_IT+0x22c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_DMA_Start_IT+0xee>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a51      	ldr	r2, [pc, #324]	; (8002d90 <HAL_DMA_Start_IT+0x230>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <HAL_DMA_Start_IT+0x100>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e007      	b.n	8002c70 <HAL_DMA_Start_IT+0x110>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f001 fe74 	bl	8004964 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <HAL_DMA_Start_IT+0x1f4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d04a      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a33      	ldr	r2, [pc, #204]	; (8002d58 <HAL_DMA_Start_IT+0x1f8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d045      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a31      	ldr	r2, [pc, #196]	; (8002d5c <HAL_DMA_Start_IT+0x1fc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d040      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a30      	ldr	r2, [pc, #192]	; (8002d60 <HAL_DMA_Start_IT+0x200>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d03b      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2e      	ldr	r2, [pc, #184]	; (8002d64 <HAL_DMA_Start_IT+0x204>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d036      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <HAL_DMA_Start_IT+0x208>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d031      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2b      	ldr	r2, [pc, #172]	; (8002d6c <HAL_DMA_Start_IT+0x20c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02c      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2a      	ldr	r2, [pc, #168]	; (8002d70 <HAL_DMA_Start_IT+0x210>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d027      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a28      	ldr	r2, [pc, #160]	; (8002d74 <HAL_DMA_Start_IT+0x214>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d022      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <HAL_DMA_Start_IT+0x218>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d01d      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <HAL_DMA_Start_IT+0x21c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d018      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <HAL_DMA_Start_IT+0x220>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <HAL_DMA_Start_IT+0x224>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <HAL_DMA_Start_IT+0x228>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <HAL_DMA_Start_IT+0x22c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_DMA_Start_IT+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <HAL_DMA_Start_IT+0x230>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_DMA_Start_IT+0x1c0>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_DMA_Start_IT+0x1c2>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d036      	beq.n	8002d94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 021e 	bic.w	r2, r3, #30
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0216 	orr.w	r2, r2, #22
 8002d38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d03e      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0208 	orr.w	r2, r2, #8
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e035      	b.n	8002dc0 <HAL_DMA_Start_IT+0x260>
 8002d54:	40020010 	.word	0x40020010
 8002d58:	40020028 	.word	0x40020028
 8002d5c:	40020040 	.word	0x40020040
 8002d60:	40020058 	.word	0x40020058
 8002d64:	40020070 	.word	0x40020070
 8002d68:	40020088 	.word	0x40020088
 8002d6c:	400200a0 	.word	0x400200a0
 8002d70:	400200b8 	.word	0x400200b8
 8002d74:	40020410 	.word	0x40020410
 8002d78:	40020428 	.word	0x40020428
 8002d7c:	40020440 	.word	0x40020440
 8002d80:	40020458 	.word	0x40020458
 8002d84:	40020470 	.word	0x40020470
 8002d88:	40020488 	.word	0x40020488
 8002d8c:	400204a0 	.word	0x400204a0
 8002d90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 020e 	bic.w	r2, r3, #14
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 020a 	orr.w	r2, r2, #10
 8002da6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0204 	orr.w	r2, r2, #4
 8002dbe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a83      	ldr	r2, [pc, #524]	; (8002fd4 <HAL_DMA_Start_IT+0x474>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d072      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a82      	ldr	r2, [pc, #520]	; (8002fd8 <HAL_DMA_Start_IT+0x478>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d06d      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a80      	ldr	r2, [pc, #512]	; (8002fdc <HAL_DMA_Start_IT+0x47c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d068      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a7f      	ldr	r2, [pc, #508]	; (8002fe0 <HAL_DMA_Start_IT+0x480>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d063      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a7d      	ldr	r2, [pc, #500]	; (8002fe4 <HAL_DMA_Start_IT+0x484>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d05e      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a7c      	ldr	r2, [pc, #496]	; (8002fe8 <HAL_DMA_Start_IT+0x488>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d059      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a7a      	ldr	r2, [pc, #488]	; (8002fec <HAL_DMA_Start_IT+0x48c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d054      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a79      	ldr	r2, [pc, #484]	; (8002ff0 <HAL_DMA_Start_IT+0x490>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d04f      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a77      	ldr	r2, [pc, #476]	; (8002ff4 <HAL_DMA_Start_IT+0x494>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d04a      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a76      	ldr	r2, [pc, #472]	; (8002ff8 <HAL_DMA_Start_IT+0x498>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d045      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a74      	ldr	r2, [pc, #464]	; (8002ffc <HAL_DMA_Start_IT+0x49c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d040      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a73      	ldr	r2, [pc, #460]	; (8003000 <HAL_DMA_Start_IT+0x4a0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d03b      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a71      	ldr	r2, [pc, #452]	; (8003004 <HAL_DMA_Start_IT+0x4a4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d036      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a70      	ldr	r2, [pc, #448]	; (8003008 <HAL_DMA_Start_IT+0x4a8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d031      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a6e      	ldr	r2, [pc, #440]	; (800300c <HAL_DMA_Start_IT+0x4ac>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d02c      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6d      	ldr	r2, [pc, #436]	; (8003010 <HAL_DMA_Start_IT+0x4b0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d027      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a6b      	ldr	r2, [pc, #428]	; (8003014 <HAL_DMA_Start_IT+0x4b4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d022      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6a      	ldr	r2, [pc, #424]	; (8003018 <HAL_DMA_Start_IT+0x4b8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d01d      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a68      	ldr	r2, [pc, #416]	; (800301c <HAL_DMA_Start_IT+0x4bc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d018      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a67      	ldr	r2, [pc, #412]	; (8003020 <HAL_DMA_Start_IT+0x4c0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a65      	ldr	r2, [pc, #404]	; (8003024 <HAL_DMA_Start_IT+0x4c4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00e      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a64      	ldr	r2, [pc, #400]	; (8003028 <HAL_DMA_Start_IT+0x4c8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a62      	ldr	r2, [pc, #392]	; (800302c <HAL_DMA_Start_IT+0x4cc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x350>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a61      	ldr	r2, [pc, #388]	; (8003030 <HAL_DMA_Start_IT+0x4d0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_DMA_Start_IT+0x354>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_DMA_Start_IT+0x356>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01a      	beq.n	8002ef0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a37      	ldr	r2, [pc, #220]	; (8002fd4 <HAL_DMA_Start_IT+0x474>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d04a      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a36      	ldr	r2, [pc, #216]	; (8002fd8 <HAL_DMA_Start_IT+0x478>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d045      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <HAL_DMA_Start_IT+0x47c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d040      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a33      	ldr	r2, [pc, #204]	; (8002fe0 <HAL_DMA_Start_IT+0x480>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d03b      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <HAL_DMA_Start_IT+0x484>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d036      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a30      	ldr	r2, [pc, #192]	; (8002fe8 <HAL_DMA_Start_IT+0x488>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d031      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2e      	ldr	r2, [pc, #184]	; (8002fec <HAL_DMA_Start_IT+0x48c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d02c      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2d      	ldr	r2, [pc, #180]	; (8002ff0 <HAL_DMA_Start_IT+0x490>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d027      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2b      	ldr	r2, [pc, #172]	; (8002ff4 <HAL_DMA_Start_IT+0x494>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d022      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2a      	ldr	r2, [pc, #168]	; (8002ff8 <HAL_DMA_Start_IT+0x498>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d01d      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <HAL_DMA_Start_IT+0x49c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d018      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a27      	ldr	r2, [pc, #156]	; (8003000 <HAL_DMA_Start_IT+0x4a0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a25      	ldr	r2, [pc, #148]	; (8003004 <HAL_DMA_Start_IT+0x4a4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00e      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a24      	ldr	r2, [pc, #144]	; (8003008 <HAL_DMA_Start_IT+0x4a8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d009      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a22      	ldr	r2, [pc, #136]	; (800300c <HAL_DMA_Start_IT+0x4ac>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_DMA_Start_IT+0x430>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a21      	ldr	r2, [pc, #132]	; (8003010 <HAL_DMA_Start_IT+0x4b0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d108      	bne.n	8002fa2 <HAL_DMA_Start_IT+0x442>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e012      	b.n	8002fc8 <HAL_DMA_Start_IT+0x468>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e009      	b.n	8002fc8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40020010 	.word	0x40020010
 8002fd8:	40020028 	.word	0x40020028
 8002fdc:	40020040 	.word	0x40020040
 8002fe0:	40020058 	.word	0x40020058
 8002fe4:	40020070 	.word	0x40020070
 8002fe8:	40020088 	.word	0x40020088
 8002fec:	400200a0 	.word	0x400200a0
 8002ff0:	400200b8 	.word	0x400200b8
 8002ff4:	40020410 	.word	0x40020410
 8002ff8:	40020428 	.word	0x40020428
 8002ffc:	40020440 	.word	0x40020440
 8003000:	40020458 	.word	0x40020458
 8003004:	40020470 	.word	0x40020470
 8003008:	40020488 	.word	0x40020488
 800300c:	400204a0 	.word	0x400204a0
 8003010:	400204b8 	.word	0x400204b8
 8003014:	58025408 	.word	0x58025408
 8003018:	5802541c 	.word	0x5802541c
 800301c:	58025430 	.word	0x58025430
 8003020:	58025444 	.word	0x58025444
 8003024:	58025458 	.word	0x58025458
 8003028:	5802546c 	.word	0x5802546c
 800302c:	58025480 	.word	0x58025480
 8003030:	58025494 	.word	0x58025494

08003034 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff f8c0 	bl	80021c0 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e2dc      	b.n	8003606 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d008      	beq.n	800306a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e2cd      	b.n	8003606 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a76      	ldr	r2, [pc, #472]	; (8003248 <HAL_DMA_Abort+0x214>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d04a      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a74      	ldr	r2, [pc, #464]	; (800324c <HAL_DMA_Abort+0x218>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d045      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a73      	ldr	r2, [pc, #460]	; (8003250 <HAL_DMA_Abort+0x21c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d040      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a71      	ldr	r2, [pc, #452]	; (8003254 <HAL_DMA_Abort+0x220>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d03b      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a70      	ldr	r2, [pc, #448]	; (8003258 <HAL_DMA_Abort+0x224>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d036      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a6e      	ldr	r2, [pc, #440]	; (800325c <HAL_DMA_Abort+0x228>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d031      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6d      	ldr	r2, [pc, #436]	; (8003260 <HAL_DMA_Abort+0x22c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d02c      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a6b      	ldr	r2, [pc, #428]	; (8003264 <HAL_DMA_Abort+0x230>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d027      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6a      	ldr	r2, [pc, #424]	; (8003268 <HAL_DMA_Abort+0x234>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a68      	ldr	r2, [pc, #416]	; (800326c <HAL_DMA_Abort+0x238>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01d      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a67      	ldr	r2, [pc, #412]	; (8003270 <HAL_DMA_Abort+0x23c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a65      	ldr	r2, [pc, #404]	; (8003274 <HAL_DMA_Abort+0x240>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a64      	ldr	r2, [pc, #400]	; (8003278 <HAL_DMA_Abort+0x244>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a62      	ldr	r2, [pc, #392]	; (800327c <HAL_DMA_Abort+0x248>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a61      	ldr	r2, [pc, #388]	; (8003280 <HAL_DMA_Abort+0x24c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_DMA_Abort+0xd6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a5f      	ldr	r2, [pc, #380]	; (8003284 <HAL_DMA_Abort+0x250>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_DMA_Abort+0xda>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_DMA_Abort+0xdc>
 800310e:	2300      	movs	r3, #0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d013      	beq.n	800313c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 021e 	bic.w	r2, r2, #30
 8003122:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003132:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e00a      	b.n	8003152 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 020e 	bic.w	r2, r2, #14
 800314a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <HAL_DMA_Abort+0x214>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d072      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3a      	ldr	r2, [pc, #232]	; (800324c <HAL_DMA_Abort+0x218>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d06d      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a39      	ldr	r2, [pc, #228]	; (8003250 <HAL_DMA_Abort+0x21c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d068      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a37      	ldr	r2, [pc, #220]	; (8003254 <HAL_DMA_Abort+0x220>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d063      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a36      	ldr	r2, [pc, #216]	; (8003258 <HAL_DMA_Abort+0x224>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d05e      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a34      	ldr	r2, [pc, #208]	; (800325c <HAL_DMA_Abort+0x228>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d059      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a33      	ldr	r2, [pc, #204]	; (8003260 <HAL_DMA_Abort+0x22c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d054      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a31      	ldr	r2, [pc, #196]	; (8003264 <HAL_DMA_Abort+0x230>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d04f      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a30      	ldr	r2, [pc, #192]	; (8003268 <HAL_DMA_Abort+0x234>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d04a      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2e      	ldr	r2, [pc, #184]	; (800326c <HAL_DMA_Abort+0x238>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d045      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2d      	ldr	r2, [pc, #180]	; (8003270 <HAL_DMA_Abort+0x23c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d040      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <HAL_DMA_Abort+0x240>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d03b      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <HAL_DMA_Abort+0x244>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d036      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a28      	ldr	r2, [pc, #160]	; (800327c <HAL_DMA_Abort+0x248>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d031      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a27      	ldr	r2, [pc, #156]	; (8003280 <HAL_DMA_Abort+0x24c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d02c      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a25      	ldr	r2, [pc, #148]	; (8003284 <HAL_DMA_Abort+0x250>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d027      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a24      	ldr	r2, [pc, #144]	; (8003288 <HAL_DMA_Abort+0x254>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d022      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <HAL_DMA_Abort+0x258>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01d      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <HAL_DMA_Abort+0x25c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d018      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <HAL_DMA_Abort+0x260>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <HAL_DMA_Abort+0x264>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1c      	ldr	r2, [pc, #112]	; (800329c <HAL_DMA_Abort+0x268>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <HAL_DMA_Abort+0x26c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_DMA_Abort+0x20e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_DMA_Abort+0x270>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d132      	bne.n	80032a8 <HAL_DMA_Abort+0x274>
 8003242:	2301      	movs	r3, #1
 8003244:	e031      	b.n	80032aa <HAL_DMA_Abort+0x276>
 8003246:	bf00      	nop
 8003248:	40020010 	.word	0x40020010
 800324c:	40020028 	.word	0x40020028
 8003250:	40020040 	.word	0x40020040
 8003254:	40020058 	.word	0x40020058
 8003258:	40020070 	.word	0x40020070
 800325c:	40020088 	.word	0x40020088
 8003260:	400200a0 	.word	0x400200a0
 8003264:	400200b8 	.word	0x400200b8
 8003268:	40020410 	.word	0x40020410
 800326c:	40020428 	.word	0x40020428
 8003270:	40020440 	.word	0x40020440
 8003274:	40020458 	.word	0x40020458
 8003278:	40020470 	.word	0x40020470
 800327c:	40020488 	.word	0x40020488
 8003280:	400204a0 	.word	0x400204a0
 8003284:	400204b8 	.word	0x400204b8
 8003288:	58025408 	.word	0x58025408
 800328c:	5802541c 	.word	0x5802541c
 8003290:	58025430 	.word	0x58025430
 8003294:	58025444 	.word	0x58025444
 8003298:	58025458 	.word	0x58025458
 800329c:	5802546c 	.word	0x5802546c
 80032a0:	58025480 	.word	0x58025480
 80032a4:	58025494 	.word	0x58025494
 80032a8:	2300      	movs	r3, #0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6d      	ldr	r2, [pc, #436]	; (8003478 <HAL_DMA_Abort+0x444>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d04a      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a6b      	ldr	r2, [pc, #428]	; (800347c <HAL_DMA_Abort+0x448>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d045      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a6a      	ldr	r2, [pc, #424]	; (8003480 <HAL_DMA_Abort+0x44c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d040      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a68      	ldr	r2, [pc, #416]	; (8003484 <HAL_DMA_Abort+0x450>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d03b      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a67      	ldr	r2, [pc, #412]	; (8003488 <HAL_DMA_Abort+0x454>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d036      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a65      	ldr	r2, [pc, #404]	; (800348c <HAL_DMA_Abort+0x458>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d031      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a64      	ldr	r2, [pc, #400]	; (8003490 <HAL_DMA_Abort+0x45c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d02c      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a62      	ldr	r2, [pc, #392]	; (8003494 <HAL_DMA_Abort+0x460>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d027      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a61      	ldr	r2, [pc, #388]	; (8003498 <HAL_DMA_Abort+0x464>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a5f      	ldr	r2, [pc, #380]	; (800349c <HAL_DMA_Abort+0x468>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01d      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5e      	ldr	r2, [pc, #376]	; (80034a0 <HAL_DMA_Abort+0x46c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a5c      	ldr	r2, [pc, #368]	; (80034a4 <HAL_DMA_Abort+0x470>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5b      	ldr	r2, [pc, #364]	; (80034a8 <HAL_DMA_Abort+0x474>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a59      	ldr	r2, [pc, #356]	; (80034ac <HAL_DMA_Abort+0x478>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_DMA_Abort+0x47c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_DMA_Abort+0x32a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a56      	ldr	r2, [pc, #344]	; (80034b4 <HAL_DMA_Abort+0x480>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <HAL_DMA_Abort+0x33c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e007      	b.n	8003380 <HAL_DMA_Abort+0x34c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003380:	e013      	b.n	80033aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003382:	f7fe ff1d 	bl	80021c0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b05      	cmp	r3, #5
 800338e:	d90c      	bls.n	80033aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2203      	movs	r2, #3
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e12d      	b.n	8003606 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e5      	bne.n	8003382 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <HAL_DMA_Abort+0x444>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d04a      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2d      	ldr	r2, [pc, #180]	; (800347c <HAL_DMA_Abort+0x448>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d045      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2c      	ldr	r2, [pc, #176]	; (8003480 <HAL_DMA_Abort+0x44c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d040      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <HAL_DMA_Abort+0x450>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d03b      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a29      	ldr	r2, [pc, #164]	; (8003488 <HAL_DMA_Abort+0x454>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d036      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a27      	ldr	r2, [pc, #156]	; (800348c <HAL_DMA_Abort+0x458>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d031      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a26      	ldr	r2, [pc, #152]	; (8003490 <HAL_DMA_Abort+0x45c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d02c      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a24      	ldr	r2, [pc, #144]	; (8003494 <HAL_DMA_Abort+0x460>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d027      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a23      	ldr	r2, [pc, #140]	; (8003498 <HAL_DMA_Abort+0x464>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a21      	ldr	r2, [pc, #132]	; (800349c <HAL_DMA_Abort+0x468>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01d      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a20      	ldr	r2, [pc, #128]	; (80034a0 <HAL_DMA_Abort+0x46c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d018      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1e      	ldr	r2, [pc, #120]	; (80034a4 <HAL_DMA_Abort+0x470>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <HAL_DMA_Abort+0x474>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1b      	ldr	r2, [pc, #108]	; (80034ac <HAL_DMA_Abort+0x478>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_DMA_Abort+0x47c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_DMA_Abort+0x422>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <HAL_DMA_Abort+0x480>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_DMA_Abort+0x426>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_DMA_Abort+0x428>
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02b      	beq.n	80034b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	223f      	movs	r2, #63	; 0x3f
 8003470:	409a      	lsls	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	e02a      	b.n	80034ce <HAL_DMA_Abort+0x49a>
 8003478:	40020010 	.word	0x40020010
 800347c:	40020028 	.word	0x40020028
 8003480:	40020040 	.word	0x40020040
 8003484:	40020058 	.word	0x40020058
 8003488:	40020070 	.word	0x40020070
 800348c:	40020088 	.word	0x40020088
 8003490:	400200a0 	.word	0x400200a0
 8003494:	400200b8 	.word	0x400200b8
 8003498:	40020410 	.word	0x40020410
 800349c:	40020428 	.word	0x40020428
 80034a0:	40020440 	.word	0x40020440
 80034a4:	40020458 	.word	0x40020458
 80034a8:	40020470 	.word	0x40020470
 80034ac:	40020488 	.word	0x40020488
 80034b0:	400204a0 	.word	0x400204a0
 80034b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	2201      	movs	r2, #1
 80034c8:	409a      	lsls	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a4f      	ldr	r2, [pc, #316]	; (8003610 <HAL_DMA_Abort+0x5dc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d072      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a4d      	ldr	r2, [pc, #308]	; (8003614 <HAL_DMA_Abort+0x5e0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d06d      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a4c      	ldr	r2, [pc, #304]	; (8003618 <HAL_DMA_Abort+0x5e4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d068      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a4a      	ldr	r2, [pc, #296]	; (800361c <HAL_DMA_Abort+0x5e8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d063      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a49      	ldr	r2, [pc, #292]	; (8003620 <HAL_DMA_Abort+0x5ec>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d05e      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a47      	ldr	r2, [pc, #284]	; (8003624 <HAL_DMA_Abort+0x5f0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d059      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a46      	ldr	r2, [pc, #280]	; (8003628 <HAL_DMA_Abort+0x5f4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d054      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a44      	ldr	r2, [pc, #272]	; (800362c <HAL_DMA_Abort+0x5f8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d04f      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a43      	ldr	r2, [pc, #268]	; (8003630 <HAL_DMA_Abort+0x5fc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d04a      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a41      	ldr	r2, [pc, #260]	; (8003634 <HAL_DMA_Abort+0x600>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d045      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a40      	ldr	r2, [pc, #256]	; (8003638 <HAL_DMA_Abort+0x604>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d040      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a3e      	ldr	r2, [pc, #248]	; (800363c <HAL_DMA_Abort+0x608>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d03b      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a3d      	ldr	r2, [pc, #244]	; (8003640 <HAL_DMA_Abort+0x60c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d036      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3b      	ldr	r2, [pc, #236]	; (8003644 <HAL_DMA_Abort+0x610>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d031      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3a      	ldr	r2, [pc, #232]	; (8003648 <HAL_DMA_Abort+0x614>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d02c      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a38      	ldr	r2, [pc, #224]	; (800364c <HAL_DMA_Abort+0x618>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d027      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a37      	ldr	r2, [pc, #220]	; (8003650 <HAL_DMA_Abort+0x61c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a35      	ldr	r2, [pc, #212]	; (8003654 <HAL_DMA_Abort+0x620>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01d      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a34      	ldr	r2, [pc, #208]	; (8003658 <HAL_DMA_Abort+0x624>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a32      	ldr	r2, [pc, #200]	; (800365c <HAL_DMA_Abort+0x628>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a31      	ldr	r2, [pc, #196]	; (8003660 <HAL_DMA_Abort+0x62c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <HAL_DMA_Abort+0x630>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2e      	ldr	r2, [pc, #184]	; (8003668 <HAL_DMA_Abort+0x634>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_DMA_Abort+0x58a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	; (800366c <HAL_DMA_Abort+0x638>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_DMA_Abort+0x58e>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_DMA_Abort+0x590>
 80035c2:	2300      	movs	r3, #0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00c      	beq.n	80035f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40020010 	.word	0x40020010
 8003614:	40020028 	.word	0x40020028
 8003618:	40020040 	.word	0x40020040
 800361c:	40020058 	.word	0x40020058
 8003620:	40020070 	.word	0x40020070
 8003624:	40020088 	.word	0x40020088
 8003628:	400200a0 	.word	0x400200a0
 800362c:	400200b8 	.word	0x400200b8
 8003630:	40020410 	.word	0x40020410
 8003634:	40020428 	.word	0x40020428
 8003638:	40020440 	.word	0x40020440
 800363c:	40020458 	.word	0x40020458
 8003640:	40020470 	.word	0x40020470
 8003644:	40020488 	.word	0x40020488
 8003648:	400204a0 	.word	0x400204a0
 800364c:	400204b8 	.word	0x400204b8
 8003650:	58025408 	.word	0x58025408
 8003654:	5802541c 	.word	0x5802541c
 8003658:	58025430 	.word	0x58025430
 800365c:	58025444 	.word	0x58025444
 8003660:	58025458 	.word	0x58025458
 8003664:	5802546c 	.word	0x5802546c
 8003668:	58025480 	.word	0x58025480
 800366c:	58025494 	.word	0x58025494

08003670 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e205      	b.n	8003a8e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d004      	beq.n	8003698 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e1fa      	b.n	8003a8e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a8c      	ldr	r2, [pc, #560]	; (80038d0 <HAL_DMA_Abort_IT+0x260>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d04a      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a8b      	ldr	r2, [pc, #556]	; (80038d4 <HAL_DMA_Abort_IT+0x264>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d045      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a89      	ldr	r2, [pc, #548]	; (80038d8 <HAL_DMA_Abort_IT+0x268>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d040      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a88      	ldr	r2, [pc, #544]	; (80038dc <HAL_DMA_Abort_IT+0x26c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d03b      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a86      	ldr	r2, [pc, #536]	; (80038e0 <HAL_DMA_Abort_IT+0x270>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d036      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a85      	ldr	r2, [pc, #532]	; (80038e4 <HAL_DMA_Abort_IT+0x274>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d031      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a83      	ldr	r2, [pc, #524]	; (80038e8 <HAL_DMA_Abort_IT+0x278>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02c      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a82      	ldr	r2, [pc, #520]	; (80038ec <HAL_DMA_Abort_IT+0x27c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d027      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a80      	ldr	r2, [pc, #512]	; (80038f0 <HAL_DMA_Abort_IT+0x280>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7f      	ldr	r2, [pc, #508]	; (80038f4 <HAL_DMA_Abort_IT+0x284>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01d      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7d      	ldr	r2, [pc, #500]	; (80038f8 <HAL_DMA_Abort_IT+0x288>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7c      	ldr	r2, [pc, #496]	; (80038fc <HAL_DMA_Abort_IT+0x28c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a7a      	ldr	r2, [pc, #488]	; (8003900 <HAL_DMA_Abort_IT+0x290>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a79      	ldr	r2, [pc, #484]	; (8003904 <HAL_DMA_Abort_IT+0x294>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a77      	ldr	r2, [pc, #476]	; (8003908 <HAL_DMA_Abort_IT+0x298>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_DMA_Abort_IT+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a76      	ldr	r2, [pc, #472]	; (800390c <HAL_DMA_Abort_IT+0x29c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_DMA_Abort_IT+0xcc>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_DMA_Abort_IT+0xce>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d065      	beq.n	800380e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2204      	movs	r2, #4
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a60      	ldr	r2, [pc, #384]	; (80038d0 <HAL_DMA_Abort_IT+0x260>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d04a      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5e      	ldr	r2, [pc, #376]	; (80038d4 <HAL_DMA_Abort_IT+0x264>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d045      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5d      	ldr	r2, [pc, #372]	; (80038d8 <HAL_DMA_Abort_IT+0x268>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d040      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a5b      	ldr	r2, [pc, #364]	; (80038dc <HAL_DMA_Abort_IT+0x26c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d03b      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a5a      	ldr	r2, [pc, #360]	; (80038e0 <HAL_DMA_Abort_IT+0x270>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d036      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a58      	ldr	r2, [pc, #352]	; (80038e4 <HAL_DMA_Abort_IT+0x274>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d031      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a57      	ldr	r2, [pc, #348]	; (80038e8 <HAL_DMA_Abort_IT+0x278>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d02c      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a55      	ldr	r2, [pc, #340]	; (80038ec <HAL_DMA_Abort_IT+0x27c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d027      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a54      	ldr	r2, [pc, #336]	; (80038f0 <HAL_DMA_Abort_IT+0x280>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <HAL_DMA_Abort_IT+0x284>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01d      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a51      	ldr	r2, [pc, #324]	; (80038f8 <HAL_DMA_Abort_IT+0x288>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a4f      	ldr	r2, [pc, #316]	; (80038fc <HAL_DMA_Abort_IT+0x28c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <HAL_DMA_Abort_IT+0x290>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a4c      	ldr	r2, [pc, #304]	; (8003904 <HAL_DMA_Abort_IT+0x294>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a4b      	ldr	r2, [pc, #300]	; (8003908 <HAL_DMA_Abort_IT+0x298>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_DMA_Abort_IT+0x17a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a49      	ldr	r2, [pc, #292]	; (800390c <HAL_DMA_Abort_IT+0x29c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d108      	bne.n	80037fc <HAL_DMA_Abort_IT+0x18c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e147      	b.n	8003a8c <HAL_DMA_Abort_IT+0x41c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e13e      	b.n	8003a8c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 020e 	bic.w	r2, r2, #14
 800381c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2b      	ldr	r2, [pc, #172]	; (80038d0 <HAL_DMA_Abort_IT+0x260>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d04a      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <HAL_DMA_Abort_IT+0x264>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d045      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a28      	ldr	r2, [pc, #160]	; (80038d8 <HAL_DMA_Abort_IT+0x268>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d040      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <HAL_DMA_Abort_IT+0x26c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d03b      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a25      	ldr	r2, [pc, #148]	; (80038e0 <HAL_DMA_Abort_IT+0x270>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d036      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a23      	ldr	r2, [pc, #140]	; (80038e4 <HAL_DMA_Abort_IT+0x274>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d031      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <HAL_DMA_Abort_IT+0x278>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d02c      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a20      	ldr	r2, [pc, #128]	; (80038ec <HAL_DMA_Abort_IT+0x27c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d027      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1f      	ldr	r2, [pc, #124]	; (80038f0 <HAL_DMA_Abort_IT+0x280>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <HAL_DMA_Abort_IT+0x284>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01d      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <HAL_DMA_Abort_IT+0x288>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1a      	ldr	r2, [pc, #104]	; (80038fc <HAL_DMA_Abort_IT+0x28c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a19      	ldr	r2, [pc, #100]	; (8003900 <HAL_DMA_Abort_IT+0x290>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a17      	ldr	r2, [pc, #92]	; (8003904 <HAL_DMA_Abort_IT+0x294>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a16      	ldr	r2, [pc, #88]	; (8003908 <HAL_DMA_Abort_IT+0x298>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_DMA_Abort_IT+0x24e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <HAL_DMA_Abort_IT+0x29c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d128      	bne.n	8003910 <HAL_DMA_Abort_IT+0x2a0>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e027      	b.n	8003920 <HAL_DMA_Abort_IT+0x2b0>
 80038d0:	40020010 	.word	0x40020010
 80038d4:	40020028 	.word	0x40020028
 80038d8:	40020040 	.word	0x40020040
 80038dc:	40020058 	.word	0x40020058
 80038e0:	40020070 	.word	0x40020070
 80038e4:	40020088 	.word	0x40020088
 80038e8:	400200a0 	.word	0x400200a0
 80038ec:	400200b8 	.word	0x400200b8
 80038f0:	40020410 	.word	0x40020410
 80038f4:	40020428 	.word	0x40020428
 80038f8:	40020440 	.word	0x40020440
 80038fc:	40020458 	.word	0x40020458
 8003900:	40020470 	.word	0x40020470
 8003904:	40020488 	.word	0x40020488
 8003908:	400204a0 	.word	0x400204a0
 800390c:	400204b8 	.word	0x400204b8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5c      	ldr	r2, [pc, #368]	; (8003a98 <HAL_DMA_Abort_IT+0x428>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d072      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a5b      	ldr	r2, [pc, #364]	; (8003a9c <HAL_DMA_Abort_IT+0x42c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d06d      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a59      	ldr	r2, [pc, #356]	; (8003aa0 <HAL_DMA_Abort_IT+0x430>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d068      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <HAL_DMA_Abort_IT+0x434>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d063      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a56      	ldr	r2, [pc, #344]	; (8003aa8 <HAL_DMA_Abort_IT+0x438>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d05e      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a55      	ldr	r2, [pc, #340]	; (8003aac <HAL_DMA_Abort_IT+0x43c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d059      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a53      	ldr	r2, [pc, #332]	; (8003ab0 <HAL_DMA_Abort_IT+0x440>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d054      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a52      	ldr	r2, [pc, #328]	; (8003ab4 <HAL_DMA_Abort_IT+0x444>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d04f      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a50      	ldr	r2, [pc, #320]	; (8003ab8 <HAL_DMA_Abort_IT+0x448>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d04a      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a4f      	ldr	r2, [pc, #316]	; (8003abc <HAL_DMA_Abort_IT+0x44c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d045      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a4d      	ldr	r2, [pc, #308]	; (8003ac0 <HAL_DMA_Abort_IT+0x450>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d040      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a4c      	ldr	r2, [pc, #304]	; (8003ac4 <HAL_DMA_Abort_IT+0x454>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d03b      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a4a      	ldr	r2, [pc, #296]	; (8003ac8 <HAL_DMA_Abort_IT+0x458>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d036      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a49      	ldr	r2, [pc, #292]	; (8003acc <HAL_DMA_Abort_IT+0x45c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d031      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a47      	ldr	r2, [pc, #284]	; (8003ad0 <HAL_DMA_Abort_IT+0x460>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d02c      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a46      	ldr	r2, [pc, #280]	; (8003ad4 <HAL_DMA_Abort_IT+0x464>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d027      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a44      	ldr	r2, [pc, #272]	; (8003ad8 <HAL_DMA_Abort_IT+0x468>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d022      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a43      	ldr	r2, [pc, #268]	; (8003adc <HAL_DMA_Abort_IT+0x46c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d01d      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a41      	ldr	r2, [pc, #260]	; (8003ae0 <HAL_DMA_Abort_IT+0x470>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d018      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a40      	ldr	r2, [pc, #256]	; (8003ae4 <HAL_DMA_Abort_IT+0x474>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a3e      	ldr	r2, [pc, #248]	; (8003ae8 <HAL_DMA_Abort_IT+0x478>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00e      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a3d      	ldr	r2, [pc, #244]	; (8003aec <HAL_DMA_Abort_IT+0x47c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d009      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a3b      	ldr	r2, [pc, #236]	; (8003af0 <HAL_DMA_Abort_IT+0x480>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x3a0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a3a      	ldr	r2, [pc, #232]	; (8003af4 <HAL_DMA_Abort_IT+0x484>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_DMA_Abort_IT+0x3a4>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_DMA_Abort_IT+0x3a6>
 8003a14:	2300      	movs	r3, #0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d028      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a28:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2201      	movs	r2, #1
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a48:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a60:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a6a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40020010 	.word	0x40020010
 8003a9c:	40020028 	.word	0x40020028
 8003aa0:	40020040 	.word	0x40020040
 8003aa4:	40020058 	.word	0x40020058
 8003aa8:	40020070 	.word	0x40020070
 8003aac:	40020088 	.word	0x40020088
 8003ab0:	400200a0 	.word	0x400200a0
 8003ab4:	400200b8 	.word	0x400200b8
 8003ab8:	40020410 	.word	0x40020410
 8003abc:	40020428 	.word	0x40020428
 8003ac0:	40020440 	.word	0x40020440
 8003ac4:	40020458 	.word	0x40020458
 8003ac8:	40020470 	.word	0x40020470
 8003acc:	40020488 	.word	0x40020488
 8003ad0:	400204a0 	.word	0x400204a0
 8003ad4:	400204b8 	.word	0x400204b8
 8003ad8:	58025408 	.word	0x58025408
 8003adc:	5802541c 	.word	0x5802541c
 8003ae0:	58025430 	.word	0x58025430
 8003ae4:	58025444 	.word	0x58025444
 8003ae8:	58025458 	.word	0x58025458
 8003aec:	5802546c 	.word	0x5802546c
 8003af0:	58025480 	.word	0x58025480
 8003af4:	58025494 	.word	0x58025494

08003af8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b04:	4b67      	ldr	r3, [pc, #412]	; (8003ca4 <HAL_DMA_IRQHandler+0x1ac>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a67      	ldr	r2, [pc, #412]	; (8003ca8 <HAL_DMA_IRQHandler+0x1b0>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0a9b      	lsrs	r3, r3, #10
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a5f      	ldr	r2, [pc, #380]	; (8003cac <HAL_DMA_IRQHandler+0x1b4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04a      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a5d      	ldr	r2, [pc, #372]	; (8003cb0 <HAL_DMA_IRQHandler+0x1b8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d045      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a5c      	ldr	r2, [pc, #368]	; (8003cb4 <HAL_DMA_IRQHandler+0x1bc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d040      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a5a      	ldr	r2, [pc, #360]	; (8003cb8 <HAL_DMA_IRQHandler+0x1c0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d03b      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a59      	ldr	r2, [pc, #356]	; (8003cbc <HAL_DMA_IRQHandler+0x1c4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d036      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a57      	ldr	r2, [pc, #348]	; (8003cc0 <HAL_DMA_IRQHandler+0x1c8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d031      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a56      	ldr	r2, [pc, #344]	; (8003cc4 <HAL_DMA_IRQHandler+0x1cc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d02c      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a54      	ldr	r2, [pc, #336]	; (8003cc8 <HAL_DMA_IRQHandler+0x1d0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a53      	ldr	r2, [pc, #332]	; (8003ccc <HAL_DMA_IRQHandler+0x1d4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a51      	ldr	r2, [pc, #324]	; (8003cd0 <HAL_DMA_IRQHandler+0x1d8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a50      	ldr	r2, [pc, #320]	; (8003cd4 <HAL_DMA_IRQHandler+0x1dc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a4e      	ldr	r2, [pc, #312]	; (8003cd8 <HAL_DMA_IRQHandler+0x1e0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a4d      	ldr	r2, [pc, #308]	; (8003cdc <HAL_DMA_IRQHandler+0x1e4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	; (8003ce0 <HAL_DMA_IRQHandler+0x1e8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a4a      	ldr	r2, [pc, #296]	; (8003ce4 <HAL_DMA_IRQHandler+0x1ec>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a48      	ldr	r2, [pc, #288]	; (8003ce8 <HAL_DMA_IRQHandler+0x1f0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_DMA_IRQHandler+0xd6>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_DMA_IRQHandler+0xd8>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 842b 	beq.w	800442c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	2208      	movs	r2, #8
 8003be0:	409a      	lsls	r2, r3
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80a2 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2e      	ldr	r2, [pc, #184]	; (8003cac <HAL_DMA_IRQHandler+0x1b4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d04a      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2d      	ldr	r2, [pc, #180]	; (8003cb0 <HAL_DMA_IRQHandler+0x1b8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d045      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	; (8003cb4 <HAL_DMA_IRQHandler+0x1bc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d040      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <HAL_DMA_IRQHandler+0x1c0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d03b      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a28      	ldr	r2, [pc, #160]	; (8003cbc <HAL_DMA_IRQHandler+0x1c4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d036      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a27      	ldr	r2, [pc, #156]	; (8003cc0 <HAL_DMA_IRQHandler+0x1c8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d031      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a25      	ldr	r2, [pc, #148]	; (8003cc4 <HAL_DMA_IRQHandler+0x1cc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d02c      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a24      	ldr	r2, [pc, #144]	; (8003cc8 <HAL_DMA_IRQHandler+0x1d0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d027      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a22      	ldr	r2, [pc, #136]	; (8003ccc <HAL_DMA_IRQHandler+0x1d4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d022      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a21      	ldr	r2, [pc, #132]	; (8003cd0 <HAL_DMA_IRQHandler+0x1d8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d01d      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <HAL_DMA_IRQHandler+0x1dc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d018      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1e      	ldr	r2, [pc, #120]	; (8003cd8 <HAL_DMA_IRQHandler+0x1e0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <HAL_DMA_IRQHandler+0x1e4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <HAL_DMA_IRQHandler+0x1e8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <HAL_DMA_IRQHandler+0x1ec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <HAL_DMA_IRQHandler+0x1f0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d12f      	bne.n	8003cec <HAL_DMA_IRQHandler+0x1f4>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf14      	ite	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	e02e      	b.n	8003d00 <HAL_DMA_IRQHandler+0x208>
 8003ca2:	bf00      	nop
 8003ca4:	24000000 	.word	0x24000000
 8003ca8:	1b4e81b5 	.word	0x1b4e81b5
 8003cac:	40020010 	.word	0x40020010
 8003cb0:	40020028 	.word	0x40020028
 8003cb4:	40020040 	.word	0x40020040
 8003cb8:	40020058 	.word	0x40020058
 8003cbc:	40020070 	.word	0x40020070
 8003cc0:	40020088 	.word	0x40020088
 8003cc4:	400200a0 	.word	0x400200a0
 8003cc8:	400200b8 	.word	0x400200b8
 8003ccc:	40020410 	.word	0x40020410
 8003cd0:	40020428 	.word	0x40020428
 8003cd4:	40020440 	.word	0x40020440
 8003cd8:	40020458 	.word	0x40020458
 8003cdc:	40020470 	.word	0x40020470
 8003ce0:	40020488 	.word	0x40020488
 8003ce4:	400204a0 	.word	0x400204a0
 8003ce8:	400204b8 	.word	0x400204b8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf14      	ite	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	2300      	moveq	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0204 	bic.w	r2, r2, #4
 8003d12:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d06e      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a69      	ldr	r2, [pc, #420]	; (8003ef0 <HAL_DMA_IRQHandler+0x3f8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a67      	ldr	r2, [pc, #412]	; (8003ef4 <HAL_DMA_IRQHandler+0x3fc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a66      	ldr	r2, [pc, #408]	; (8003ef8 <HAL_DMA_IRQHandler+0x400>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a64      	ldr	r2, [pc, #400]	; (8003efc <HAL_DMA_IRQHandler+0x404>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a63      	ldr	r2, [pc, #396]	; (8003f00 <HAL_DMA_IRQHandler+0x408>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a61      	ldr	r2, [pc, #388]	; (8003f04 <HAL_DMA_IRQHandler+0x40c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a60      	ldr	r2, [pc, #384]	; (8003f08 <HAL_DMA_IRQHandler+0x410>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5e      	ldr	r2, [pc, #376]	; (8003f0c <HAL_DMA_IRQHandler+0x414>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a5d      	ldr	r2, [pc, #372]	; (8003f10 <HAL_DMA_IRQHandler+0x418>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5b      	ldr	r2, [pc, #364]	; (8003f14 <HAL_DMA_IRQHandler+0x41c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a5a      	ldr	r2, [pc, #360]	; (8003f18 <HAL_DMA_IRQHandler+0x420>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a58      	ldr	r2, [pc, #352]	; (8003f1c <HAL_DMA_IRQHandler+0x424>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a57      	ldr	r2, [pc, #348]	; (8003f20 <HAL_DMA_IRQHandler+0x428>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a55      	ldr	r2, [pc, #340]	; (8003f24 <HAL_DMA_IRQHandler+0x42c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a54      	ldr	r2, [pc, #336]	; (8003f28 <HAL_DMA_IRQHandler+0x430>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a52      	ldr	r2, [pc, #328]	; (8003f2c <HAL_DMA_IRQHandler+0x434>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10a      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x304>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e003      	b.n	8003e04 <HAL_DMA_IRQHandler+0x30c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00d      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	f043 0202 	orr.w	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 808f 	beq.w	8003f58 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <HAL_DMA_IRQHandler+0x3f8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d04a      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <HAL_DMA_IRQHandler+0x3fc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d045      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <HAL_DMA_IRQHandler+0x400>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d040      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a27      	ldr	r2, [pc, #156]	; (8003efc <HAL_DMA_IRQHandler+0x404>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d03b      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <HAL_DMA_IRQHandler+0x408>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d036      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <HAL_DMA_IRQHandler+0x40c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d031      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <HAL_DMA_IRQHandler+0x410>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d02c      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a21      	ldr	r2, [pc, #132]	; (8003f0c <HAL_DMA_IRQHandler+0x414>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d027      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <HAL_DMA_IRQHandler+0x418>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1e      	ldr	r2, [pc, #120]	; (8003f14 <HAL_DMA_IRQHandler+0x41c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01d      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_DMA_IRQHandler+0x420>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d018      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1b      	ldr	r2, [pc, #108]	; (8003f1c <HAL_DMA_IRQHandler+0x424>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <HAL_DMA_IRQHandler+0x428>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00e      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a18      	ldr	r2, [pc, #96]	; (8003f24 <HAL_DMA_IRQHandler+0x42c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <HAL_DMA_IRQHandler+0x430>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <HAL_DMA_IRQHandler+0x434>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d12a      	bne.n	8003f30 <HAL_DMA_IRQHandler+0x438>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e023      	b.n	8003f38 <HAL_DMA_IRQHandler+0x440>
 8003ef0:	40020010 	.word	0x40020010
 8003ef4:	40020028 	.word	0x40020028
 8003ef8:	40020040 	.word	0x40020040
 8003efc:	40020058 	.word	0x40020058
 8003f00:	40020070 	.word	0x40020070
 8003f04:	40020088 	.word	0x40020088
 8003f08:	400200a0 	.word	0x400200a0
 8003f0c:	400200b8 	.word	0x400200b8
 8003f10:	40020410 	.word	0x40020410
 8003f14:	40020428 	.word	0x40020428
 8003f18:	40020440 	.word	0x40020440
 8003f1c:	40020458 	.word	0x40020458
 8003f20:	40020470 	.word	0x40020470
 8003f24:	40020488 	.word	0x40020488
 8003f28:	400204a0 	.word	0x400204a0
 8003f2c:	400204b8 	.word	0x400204b8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2300      	movs	r3, #0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2204      	movs	r2, #4
 8003f46:	409a      	lsls	r2, r3
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f043 0204 	orr.w	r2, r3, #4
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2210      	movs	r2, #16
 8003f62:	409a      	lsls	r2, r3
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80a6 	beq.w	80040ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a85      	ldr	r2, [pc, #532]	; (8004188 <HAL_DMA_IRQHandler+0x690>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a83      	ldr	r2, [pc, #524]	; (800418c <HAL_DMA_IRQHandler+0x694>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a82      	ldr	r2, [pc, #520]	; (8004190 <HAL_DMA_IRQHandler+0x698>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a80      	ldr	r2, [pc, #512]	; (8004194 <HAL_DMA_IRQHandler+0x69c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7f      	ldr	r2, [pc, #508]	; (8004198 <HAL_DMA_IRQHandler+0x6a0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7d      	ldr	r2, [pc, #500]	; (800419c <HAL_DMA_IRQHandler+0x6a4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7c      	ldr	r2, [pc, #496]	; (80041a0 <HAL_DMA_IRQHandler+0x6a8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a7a      	ldr	r2, [pc, #488]	; (80041a4 <HAL_DMA_IRQHandler+0x6ac>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a79      	ldr	r2, [pc, #484]	; (80041a8 <HAL_DMA_IRQHandler+0x6b0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a77      	ldr	r2, [pc, #476]	; (80041ac <HAL_DMA_IRQHandler+0x6b4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a76      	ldr	r2, [pc, #472]	; (80041b0 <HAL_DMA_IRQHandler+0x6b8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a74      	ldr	r2, [pc, #464]	; (80041b4 <HAL_DMA_IRQHandler+0x6bc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a73      	ldr	r2, [pc, #460]	; (80041b8 <HAL_DMA_IRQHandler+0x6c0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a71      	ldr	r2, [pc, #452]	; (80041bc <HAL_DMA_IRQHandler+0x6c4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a70      	ldr	r2, [pc, #448]	; (80041c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6e      	ldr	r2, [pc, #440]	; (80041c4 <HAL_DMA_IRQHandler+0x6cc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10a      	bne.n	8004024 <HAL_DMA_IRQHandler+0x52c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	e009      	b.n	8004038 <HAL_DMA_IRQHandler+0x540>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf14      	ite	ne
 8004032:	2301      	movne	r3, #1
 8004034:	2300      	moveq	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d03e      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	2210      	movs	r2, #16
 8004046:	409a      	lsls	r2, r3
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d018      	beq.n	800408c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d108      	bne.n	800407a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d024      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
 8004078:	e01f      	b.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01b      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
 800408a:	e016      	b.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d107      	bne.n	80040aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0208 	bic.w	r2, r2, #8
 80040a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2220      	movs	r2, #32
 80040c4:	409a      	lsls	r2, r3
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8110 	beq.w	80042f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <HAL_DMA_IRQHandler+0x690>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d04a      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2b      	ldr	r2, [pc, #172]	; (800418c <HAL_DMA_IRQHandler+0x694>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d045      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a29      	ldr	r2, [pc, #164]	; (8004190 <HAL_DMA_IRQHandler+0x698>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d040      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a28      	ldr	r2, [pc, #160]	; (8004194 <HAL_DMA_IRQHandler+0x69c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d03b      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a26      	ldr	r2, [pc, #152]	; (8004198 <HAL_DMA_IRQHandler+0x6a0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d036      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a25      	ldr	r2, [pc, #148]	; (800419c <HAL_DMA_IRQHandler+0x6a4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d031      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a23      	ldr	r2, [pc, #140]	; (80041a0 <HAL_DMA_IRQHandler+0x6a8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02c      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a22      	ldr	r2, [pc, #136]	; (80041a4 <HAL_DMA_IRQHandler+0x6ac>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d027      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <HAL_DMA_IRQHandler+0x6b0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d022      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <HAL_DMA_IRQHandler+0x6b4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d01d      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <HAL_DMA_IRQHandler+0x6b8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d018      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <HAL_DMA_IRQHandler+0x6bc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1a      	ldr	r2, [pc, #104]	; (80041b8 <HAL_DMA_IRQHandler+0x6c0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00e      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a19      	ldr	r2, [pc, #100]	; (80041bc <HAL_DMA_IRQHandler+0x6c4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d009      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a17      	ldr	r2, [pc, #92]	; (80041c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <HAL_DMA_IRQHandler+0x6cc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d12b      	bne.n	80041c8 <HAL_DMA_IRQHandler+0x6d0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e02a      	b.n	80041dc <HAL_DMA_IRQHandler+0x6e4>
 8004186:	bf00      	nop
 8004188:	40020010 	.word	0x40020010
 800418c:	40020028 	.word	0x40020028
 8004190:	40020040 	.word	0x40020040
 8004194:	40020058 	.word	0x40020058
 8004198:	40020070 	.word	0x40020070
 800419c:	40020088 	.word	0x40020088
 80041a0:	400200a0 	.word	0x400200a0
 80041a4:	400200b8 	.word	0x400200b8
 80041a8:	40020410 	.word	0x40020410
 80041ac:	40020428 	.word	0x40020428
 80041b0:	40020440 	.word	0x40020440
 80041b4:	40020458 	.word	0x40020458
 80041b8:	40020470 	.word	0x40020470
 80041bc:	40020488 	.word	0x40020488
 80041c0:	400204a0 	.word	0x400204a0
 80041c4:	400204b8 	.word	0x400204b8
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8087 	beq.w	80042f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2220      	movs	r2, #32
 80041ec:	409a      	lsls	r2, r3
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d139      	bne.n	8004272 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0216 	bic.w	r2, r2, #22
 800420c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800421c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <HAL_DMA_IRQHandler+0x736>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0208 	bic.w	r2, r2, #8
 800423c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	223f      	movs	r2, #63	; 0x3f
 8004248:	409a      	lsls	r2, r3
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 834a 	beq.w	80048fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
          }
          return;
 8004270:	e344      	b.n	80048fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d108      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02c      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
 800429e:	e027      	b.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d023      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	4798      	blx	r3
 80042b0:	e01e      	b.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10f      	bne.n	80042e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0210 	bic.w	r2, r2, #16
 80042ce:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8306 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 8088 	beq.w	8004418 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2204      	movs	r2, #4
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a7a      	ldr	r2, [pc, #488]	; (8004500 <HAL_DMA_IRQHandler+0xa08>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d04a      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a79      	ldr	r2, [pc, #484]	; (8004504 <HAL_DMA_IRQHandler+0xa0c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d045      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a77      	ldr	r2, [pc, #476]	; (8004508 <HAL_DMA_IRQHandler+0xa10>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d040      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a76      	ldr	r2, [pc, #472]	; (800450c <HAL_DMA_IRQHandler+0xa14>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d03b      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a74      	ldr	r2, [pc, #464]	; (8004510 <HAL_DMA_IRQHandler+0xa18>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d036      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a73      	ldr	r2, [pc, #460]	; (8004514 <HAL_DMA_IRQHandler+0xa1c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d031      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a71      	ldr	r2, [pc, #452]	; (8004518 <HAL_DMA_IRQHandler+0xa20>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02c      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a70      	ldr	r2, [pc, #448]	; (800451c <HAL_DMA_IRQHandler+0xa24>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d027      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6e      	ldr	r2, [pc, #440]	; (8004520 <HAL_DMA_IRQHandler+0xa28>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d022      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6d      	ldr	r2, [pc, #436]	; (8004524 <HAL_DMA_IRQHandler+0xa2c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d01d      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6b      	ldr	r2, [pc, #428]	; (8004528 <HAL_DMA_IRQHandler+0xa30>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_DMA_IRQHandler+0xa34>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a68      	ldr	r2, [pc, #416]	; (8004530 <HAL_DMA_IRQHandler+0xa38>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a67      	ldr	r2, [pc, #412]	; (8004534 <HAL_DMA_IRQHandler+0xa3c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a65      	ldr	r2, [pc, #404]	; (8004538 <HAL_DMA_IRQHandler+0xa40>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a64      	ldr	r2, [pc, #400]	; (800453c <HAL_DMA_IRQHandler+0xa44>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d108      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x8ca>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e007      	b.n	80043d2 <HAL_DMA_IRQHandler+0x8da>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043da:	429a      	cmp	r2, r3
 80043dc:	d307      	bcc.n	80043ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f2      	bne.n	80043d2 <HAL_DMA_IRQHandler+0x8da>
 80043ec:	e000      	b.n	80043f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043ee:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2203      	movs	r2, #3
 800440a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800440e:	e003      	b.n	8004418 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8272 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
 800442a:	e26c      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a43      	ldr	r2, [pc, #268]	; (8004540 <HAL_DMA_IRQHandler+0xa48>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a42      	ldr	r2, [pc, #264]	; (8004544 <HAL_DMA_IRQHandler+0xa4c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d01d      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a40      	ldr	r2, [pc, #256]	; (8004548 <HAL_DMA_IRQHandler+0xa50>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3f      	ldr	r2, [pc, #252]	; (800454c <HAL_DMA_IRQHandler+0xa54>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3d      	ldr	r2, [pc, #244]	; (8004550 <HAL_DMA_IRQHandler+0xa58>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3c      	ldr	r2, [pc, #240]	; (8004554 <HAL_DMA_IRQHandler+0xa5c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <HAL_DMA_IRQHandler+0xa60>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a39      	ldr	r2, [pc, #228]	; (800455c <HAL_DMA_IRQHandler+0xa64>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <HAL_DMA_IRQHandler+0x988>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_DMA_IRQHandler+0x98a>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 823f 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2204      	movs	r2, #4
 800449a:	409a      	lsls	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80cd 	beq.w	8004640 <HAL_DMA_IRQHandler+0xb48>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80c7 	beq.w	8004640 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	2204      	movs	r2, #4
 80044bc:	409a      	lsls	r2, r3
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d049      	beq.n	8004560 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8210 	beq.w	8004900 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044e8:	e20a      	b.n	8004900 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8206 	beq.w	8004900 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	e200      	b.n	8004900 <HAL_DMA_IRQHandler+0xe08>
 80044fe:	bf00      	nop
 8004500:	40020010 	.word	0x40020010
 8004504:	40020028 	.word	0x40020028
 8004508:	40020040 	.word	0x40020040
 800450c:	40020058 	.word	0x40020058
 8004510:	40020070 	.word	0x40020070
 8004514:	40020088 	.word	0x40020088
 8004518:	400200a0 	.word	0x400200a0
 800451c:	400200b8 	.word	0x400200b8
 8004520:	40020410 	.word	0x40020410
 8004524:	40020428 	.word	0x40020428
 8004528:	40020440 	.word	0x40020440
 800452c:	40020458 	.word	0x40020458
 8004530:	40020470 	.word	0x40020470
 8004534:	40020488 	.word	0x40020488
 8004538:	400204a0 	.word	0x400204a0
 800453c:	400204b8 	.word	0x400204b8
 8004540:	58025408 	.word	0x58025408
 8004544:	5802541c 	.word	0x5802541c
 8004548:	58025430 	.word	0x58025430
 800454c:	58025444 	.word	0x58025444
 8004550:	58025458 	.word	0x58025458
 8004554:	5802546c 	.word	0x5802546c
 8004558:	58025480 	.word	0x58025480
 800455c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d160      	bne.n	800462c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a8c      	ldr	r2, [pc, #560]	; (80047a0 <HAL_DMA_IRQHandler+0xca8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d04a      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a8a      	ldr	r2, [pc, #552]	; (80047a4 <HAL_DMA_IRQHandler+0xcac>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d045      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a89      	ldr	r2, [pc, #548]	; (80047a8 <HAL_DMA_IRQHandler+0xcb0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d040      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a87      	ldr	r2, [pc, #540]	; (80047ac <HAL_DMA_IRQHandler+0xcb4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d03b      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a86      	ldr	r2, [pc, #536]	; (80047b0 <HAL_DMA_IRQHandler+0xcb8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d036      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a84      	ldr	r2, [pc, #528]	; (80047b4 <HAL_DMA_IRQHandler+0xcbc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d031      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a83      	ldr	r2, [pc, #524]	; (80047b8 <HAL_DMA_IRQHandler+0xcc0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d02c      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a81      	ldr	r2, [pc, #516]	; (80047bc <HAL_DMA_IRQHandler+0xcc4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d027      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a80      	ldr	r2, [pc, #512]	; (80047c0 <HAL_DMA_IRQHandler+0xcc8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d022      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a7e      	ldr	r2, [pc, #504]	; (80047c4 <HAL_DMA_IRQHandler+0xccc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01d      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a7d      	ldr	r2, [pc, #500]	; (80047c8 <HAL_DMA_IRQHandler+0xcd0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d018      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a7b      	ldr	r2, [pc, #492]	; (80047cc <HAL_DMA_IRQHandler+0xcd4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7a      	ldr	r2, [pc, #488]	; (80047d0 <HAL_DMA_IRQHandler+0xcd8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00e      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a78      	ldr	r2, [pc, #480]	; (80047d4 <HAL_DMA_IRQHandler+0xcdc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a77      	ldr	r2, [pc, #476]	; (80047d8 <HAL_DMA_IRQHandler+0xce0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a75      	ldr	r2, [pc, #468]	; (80047dc <HAL_DMA_IRQHandler+0xce4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d108      	bne.n	800461c <HAL_DMA_IRQHandler+0xb24>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0208 	bic.w	r2, r2, #8
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e007      	b.n	800462c <HAL_DMA_IRQHandler+0xb34>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0204 	bic.w	r2, r2, #4
 800462a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8165 	beq.w	8004900 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800463e:	e15f      	b.n	8004900 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2202      	movs	r2, #2
 800464a:	409a      	lsls	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80c5 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xce8>
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80bf 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2202      	movs	r2, #2
 800466c:	409a      	lsls	r2, r3
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d018      	beq.n	80046ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 813a 	beq.w	8004904 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004698:	e134      	b.n	8004904 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8130 	beq.w	8004904 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ac:	e12a      	b.n	8004904 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d168      	bne.n	800478a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a38      	ldr	r2, [pc, #224]	; (80047a0 <HAL_DMA_IRQHandler+0xca8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d04a      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a37      	ldr	r2, [pc, #220]	; (80047a4 <HAL_DMA_IRQHandler+0xcac>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d045      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a35      	ldr	r2, [pc, #212]	; (80047a8 <HAL_DMA_IRQHandler+0xcb0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d040      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a34      	ldr	r2, [pc, #208]	; (80047ac <HAL_DMA_IRQHandler+0xcb4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d03b      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a32      	ldr	r2, [pc, #200]	; (80047b0 <HAL_DMA_IRQHandler+0xcb8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d036      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a31      	ldr	r2, [pc, #196]	; (80047b4 <HAL_DMA_IRQHandler+0xcbc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d031      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2f      	ldr	r2, [pc, #188]	; (80047b8 <HAL_DMA_IRQHandler+0xcc0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d02c      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2e      	ldr	r2, [pc, #184]	; (80047bc <HAL_DMA_IRQHandler+0xcc4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d027      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <HAL_DMA_IRQHandler+0xcc8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <HAL_DMA_IRQHandler+0xccc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d01d      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <HAL_DMA_IRQHandler+0xcd0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d018      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a28      	ldr	r2, [pc, #160]	; (80047cc <HAL_DMA_IRQHandler+0xcd4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <HAL_DMA_IRQHandler+0xcd8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a25      	ldr	r2, [pc, #148]	; (80047d4 <HAL_DMA_IRQHandler+0xcdc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <HAL_DMA_IRQHandler+0xce0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_DMA_IRQHandler+0xc60>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a22      	ldr	r2, [pc, #136]	; (80047dc <HAL_DMA_IRQHandler+0xce4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d108      	bne.n	800476a <HAL_DMA_IRQHandler+0xc72>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0214 	bic.w	r2, r2, #20
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e007      	b.n	800477a <HAL_DMA_IRQHandler+0xc82>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 020a 	bic.w	r2, r2, #10
 8004778:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80b8 	beq.w	8004904 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800479c:	e0b2      	b.n	8004904 <HAL_DMA_IRQHandler+0xe0c>
 800479e:	bf00      	nop
 80047a0:	40020010 	.word	0x40020010
 80047a4:	40020028 	.word	0x40020028
 80047a8:	40020040 	.word	0x40020040
 80047ac:	40020058 	.word	0x40020058
 80047b0:	40020070 	.word	0x40020070
 80047b4:	40020088 	.word	0x40020088
 80047b8:	400200a0 	.word	0x400200a0
 80047bc:	400200b8 	.word	0x400200b8
 80047c0:	40020410 	.word	0x40020410
 80047c4:	40020428 	.word	0x40020428
 80047c8:	40020440 	.word	0x40020440
 80047cc:	40020458 	.word	0x40020458
 80047d0:	40020470 	.word	0x40020470
 80047d4:	40020488 	.word	0x40020488
 80047d8:	400204a0 	.word	0x400204a0
 80047dc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2208      	movs	r2, #8
 80047ea:	409a      	lsls	r2, r3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8088 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8082 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a41      	ldr	r2, [pc, #260]	; (800490c <HAL_DMA_IRQHandler+0xe14>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d04a      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a3f      	ldr	r2, [pc, #252]	; (8004910 <HAL_DMA_IRQHandler+0xe18>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d045      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3e      	ldr	r2, [pc, #248]	; (8004914 <HAL_DMA_IRQHandler+0xe1c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d040      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a3c      	ldr	r2, [pc, #240]	; (8004918 <HAL_DMA_IRQHandler+0xe20>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d03b      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3b      	ldr	r2, [pc, #236]	; (800491c <HAL_DMA_IRQHandler+0xe24>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d036      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a39      	ldr	r2, [pc, #228]	; (8004920 <HAL_DMA_IRQHandler+0xe28>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d031      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a38      	ldr	r2, [pc, #224]	; (8004924 <HAL_DMA_IRQHandler+0xe2c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d02c      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a36      	ldr	r2, [pc, #216]	; (8004928 <HAL_DMA_IRQHandler+0xe30>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d027      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a35      	ldr	r2, [pc, #212]	; (800492c <HAL_DMA_IRQHandler+0xe34>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d022      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a33      	ldr	r2, [pc, #204]	; (8004930 <HAL_DMA_IRQHandler+0xe38>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01d      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a32      	ldr	r2, [pc, #200]	; (8004934 <HAL_DMA_IRQHandler+0xe3c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d018      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a30      	ldr	r2, [pc, #192]	; (8004938 <HAL_DMA_IRQHandler+0xe40>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2f      	ldr	r2, [pc, #188]	; (800493c <HAL_DMA_IRQHandler+0xe44>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2d      	ldr	r2, [pc, #180]	; (8004940 <HAL_DMA_IRQHandler+0xe48>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2c      	ldr	r2, [pc, #176]	; (8004944 <HAL_DMA_IRQHandler+0xe4c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2a      	ldr	r2, [pc, #168]	; (8004948 <HAL_DMA_IRQHandler+0xe50>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d108      	bne.n	80048b4 <HAL_DMA_IRQHandler+0xdbc>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 021c 	bic.w	r2, r2, #28
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e007      	b.n	80048c4 <HAL_DMA_IRQHandler+0xdcc>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 020e 	bic.w	r2, r2, #14
 80048c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	2201      	movs	r2, #1
 80048ce:	409a      	lsls	r2, r3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	4798      	blx	r3
 80048fa:	e004      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048fc:	bf00      	nop
 80048fe:	e002      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004900:	bf00      	nop
 8004902:	e000      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004904:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004906:	3728      	adds	r7, #40	; 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40020010 	.word	0x40020010
 8004910:	40020028 	.word	0x40020028
 8004914:	40020040 	.word	0x40020040
 8004918:	40020058 	.word	0x40020058
 800491c:	40020070 	.word	0x40020070
 8004920:	40020088 	.word	0x40020088
 8004924:	400200a0 	.word	0x400200a0
 8004928:	400200b8 	.word	0x400200b8
 800492c:	40020410 	.word	0x40020410
 8004930:	40020428 	.word	0x40020428
 8004934:	40020440 	.word	0x40020440
 8004938:	40020458 	.word	0x40020458
 800493c:	40020470 	.word	0x40020470
 8004940:	40020488 	.word	0x40020488
 8004944:	400204a0 	.word	0x400204a0
 8004948:	400204b8 	.word	0x400204b8

0800494c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004976:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a84      	ldr	r2, [pc, #528]	; (8004b94 <DMA_SetConfig+0x230>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d072      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a82      	ldr	r2, [pc, #520]	; (8004b98 <DMA_SetConfig+0x234>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d06d      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a81      	ldr	r2, [pc, #516]	; (8004b9c <DMA_SetConfig+0x238>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d068      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a7f      	ldr	r2, [pc, #508]	; (8004ba0 <DMA_SetConfig+0x23c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d063      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a7e      	ldr	r2, [pc, #504]	; (8004ba4 <DMA_SetConfig+0x240>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d05e      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a7c      	ldr	r2, [pc, #496]	; (8004ba8 <DMA_SetConfig+0x244>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d059      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a7b      	ldr	r2, [pc, #492]	; (8004bac <DMA_SetConfig+0x248>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d054      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a79      	ldr	r2, [pc, #484]	; (8004bb0 <DMA_SetConfig+0x24c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d04f      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a78      	ldr	r2, [pc, #480]	; (8004bb4 <DMA_SetConfig+0x250>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d04a      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a76      	ldr	r2, [pc, #472]	; (8004bb8 <DMA_SetConfig+0x254>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d045      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a75      	ldr	r2, [pc, #468]	; (8004bbc <DMA_SetConfig+0x258>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d040      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a73      	ldr	r2, [pc, #460]	; (8004bc0 <DMA_SetConfig+0x25c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d03b      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a72      	ldr	r2, [pc, #456]	; (8004bc4 <DMA_SetConfig+0x260>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d036      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a70      	ldr	r2, [pc, #448]	; (8004bc8 <DMA_SetConfig+0x264>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d031      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a6f      	ldr	r2, [pc, #444]	; (8004bcc <DMA_SetConfig+0x268>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d02c      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a6d      	ldr	r2, [pc, #436]	; (8004bd0 <DMA_SetConfig+0x26c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d027      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a6c      	ldr	r2, [pc, #432]	; (8004bd4 <DMA_SetConfig+0x270>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d022      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a6a      	ldr	r2, [pc, #424]	; (8004bd8 <DMA_SetConfig+0x274>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01d      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a69      	ldr	r2, [pc, #420]	; (8004bdc <DMA_SetConfig+0x278>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d018      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a67      	ldr	r2, [pc, #412]	; (8004be0 <DMA_SetConfig+0x27c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a66      	ldr	r2, [pc, #408]	; (8004be4 <DMA_SetConfig+0x280>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00e      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a64      	ldr	r2, [pc, #400]	; (8004be8 <DMA_SetConfig+0x284>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d009      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a63      	ldr	r2, [pc, #396]	; (8004bec <DMA_SetConfig+0x288>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <DMA_SetConfig+0x10a>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a61      	ldr	r2, [pc, #388]	; (8004bf0 <DMA_SetConfig+0x28c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d101      	bne.n	8004a72 <DMA_SetConfig+0x10e>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <DMA_SetConfig+0x110>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00d      	beq.n	8004a94 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a80:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d004      	beq.n	8004a94 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a92:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a3e      	ldr	r2, [pc, #248]	; (8004b94 <DMA_SetConfig+0x230>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d04a      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a3d      	ldr	r2, [pc, #244]	; (8004b98 <DMA_SetConfig+0x234>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d045      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3b      	ldr	r2, [pc, #236]	; (8004b9c <DMA_SetConfig+0x238>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d040      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a3a      	ldr	r2, [pc, #232]	; (8004ba0 <DMA_SetConfig+0x23c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d03b      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a38      	ldr	r2, [pc, #224]	; (8004ba4 <DMA_SetConfig+0x240>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d036      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a37      	ldr	r2, [pc, #220]	; (8004ba8 <DMA_SetConfig+0x244>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d031      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a35      	ldr	r2, [pc, #212]	; (8004bac <DMA_SetConfig+0x248>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d02c      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a34      	ldr	r2, [pc, #208]	; (8004bb0 <DMA_SetConfig+0x24c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d027      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a32      	ldr	r2, [pc, #200]	; (8004bb4 <DMA_SetConfig+0x250>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d022      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a31      	ldr	r2, [pc, #196]	; (8004bb8 <DMA_SetConfig+0x254>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d01d      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2f      	ldr	r2, [pc, #188]	; (8004bbc <DMA_SetConfig+0x258>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d018      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2e      	ldr	r2, [pc, #184]	; (8004bc0 <DMA_SetConfig+0x25c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2c      	ldr	r2, [pc, #176]	; (8004bc4 <DMA_SetConfig+0x260>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00e      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2b      	ldr	r2, [pc, #172]	; (8004bc8 <DMA_SetConfig+0x264>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d009      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a29      	ldr	r2, [pc, #164]	; (8004bcc <DMA_SetConfig+0x268>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d004      	beq.n	8004b34 <DMA_SetConfig+0x1d0>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a28      	ldr	r2, [pc, #160]	; (8004bd0 <DMA_SetConfig+0x26c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d101      	bne.n	8004b38 <DMA_SetConfig+0x1d4>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <DMA_SetConfig+0x1d6>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d05a      	beq.n	8004bf4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	223f      	movs	r2, #63	; 0x3f
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b5c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d108      	bne.n	8004b80 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b7e:	e087      	b.n	8004c90 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]
}
 8004b90:	e07e      	b.n	8004c90 <DMA_SetConfig+0x32c>
 8004b92:	bf00      	nop
 8004b94:	40020010 	.word	0x40020010
 8004b98:	40020028 	.word	0x40020028
 8004b9c:	40020040 	.word	0x40020040
 8004ba0:	40020058 	.word	0x40020058
 8004ba4:	40020070 	.word	0x40020070
 8004ba8:	40020088 	.word	0x40020088
 8004bac:	400200a0 	.word	0x400200a0
 8004bb0:	400200b8 	.word	0x400200b8
 8004bb4:	40020410 	.word	0x40020410
 8004bb8:	40020428 	.word	0x40020428
 8004bbc:	40020440 	.word	0x40020440
 8004bc0:	40020458 	.word	0x40020458
 8004bc4:	40020470 	.word	0x40020470
 8004bc8:	40020488 	.word	0x40020488
 8004bcc:	400204a0 	.word	0x400204a0
 8004bd0:	400204b8 	.word	0x400204b8
 8004bd4:	58025408 	.word	0x58025408
 8004bd8:	5802541c 	.word	0x5802541c
 8004bdc:	58025430 	.word	0x58025430
 8004be0:	58025444 	.word	0x58025444
 8004be4:	58025458 	.word	0x58025458
 8004be8:	5802546c 	.word	0x5802546c
 8004bec:	58025480 	.word	0x58025480
 8004bf0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <DMA_SetConfig+0x338>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d022      	beq.n	8004c44 <DMA_SetConfig+0x2e0>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <DMA_SetConfig+0x33c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d01d      	beq.n	8004c44 <DMA_SetConfig+0x2e0>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <DMA_SetConfig+0x340>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d018      	beq.n	8004c44 <DMA_SetConfig+0x2e0>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <DMA_SetConfig+0x344>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <DMA_SetConfig+0x2e0>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a22      	ldr	r2, [pc, #136]	; (8004cac <DMA_SetConfig+0x348>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00e      	beq.n	8004c44 <DMA_SetConfig+0x2e0>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <DMA_SetConfig+0x34c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d009      	beq.n	8004c44 <DMA_SetConfig+0x2e0>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1f      	ldr	r2, [pc, #124]	; (8004cb4 <DMA_SetConfig+0x350>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d004      	beq.n	8004c44 <DMA_SetConfig+0x2e0>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <DMA_SetConfig+0x354>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d101      	bne.n	8004c48 <DMA_SetConfig+0x2e4>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <DMA_SetConfig+0x2e6>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d020      	beq.n	8004c90 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	2201      	movs	r2, #1
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b40      	cmp	r3, #64	; 0x40
 8004c6c:	d108      	bne.n	8004c80 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	60da      	str	r2, [r3, #12]
}
 8004c7e:	e007      	b.n	8004c90 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	58025408 	.word	0x58025408
 8004ca0:	5802541c 	.word	0x5802541c
 8004ca4:	58025430 	.word	0x58025430
 8004ca8:	58025444 	.word	0x58025444
 8004cac:	58025458 	.word	0x58025458
 8004cb0:	5802546c 	.word	0x5802546c
 8004cb4:	58025480 	.word	0x58025480
 8004cb8:	58025494 	.word	0x58025494

08004cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a42      	ldr	r2, [pc, #264]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x118>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d04a      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a41      	ldr	r2, [pc, #260]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d045      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a3f      	ldr	r2, [pc, #252]	; (8004ddc <DMA_CalcBaseAndBitshift+0x120>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d040      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a3e      	ldr	r2, [pc, #248]	; (8004de0 <DMA_CalcBaseAndBitshift+0x124>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d03b      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <DMA_CalcBaseAndBitshift+0x128>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d036      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3b      	ldr	r2, [pc, #236]	; (8004de8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d031      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a39      	ldr	r2, [pc, #228]	; (8004dec <DMA_CalcBaseAndBitshift+0x130>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02c      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a38      	ldr	r2, [pc, #224]	; (8004df0 <DMA_CalcBaseAndBitshift+0x134>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d027      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a36      	ldr	r2, [pc, #216]	; (8004df4 <DMA_CalcBaseAndBitshift+0x138>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d022      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a35      	ldr	r2, [pc, #212]	; (8004df8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d01d      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a33      	ldr	r2, [pc, #204]	; (8004dfc <DMA_CalcBaseAndBitshift+0x140>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d018      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a32      	ldr	r2, [pc, #200]	; (8004e00 <DMA_CalcBaseAndBitshift+0x144>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a30      	ldr	r2, [pc, #192]	; (8004e04 <DMA_CalcBaseAndBitshift+0x148>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2f      	ldr	r2, [pc, #188]	; (8004e08 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2d      	ldr	r2, [pc, #180]	; (8004e0c <DMA_CalcBaseAndBitshift+0x150>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2c      	ldr	r2, [pc, #176]	; (8004e10 <DMA_CalcBaseAndBitshift+0x154>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <DMA_CalcBaseAndBitshift+0xac>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <DMA_CalcBaseAndBitshift+0xae>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d024      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	3b10      	subs	r3, #16
 8004d76:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <DMA_CalcBaseAndBitshift+0x158>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	4a24      	ldr	r2, [pc, #144]	; (8004e18 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d88:	5cd3      	ldrb	r3, [r2, r3]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d908      	bls.n	8004da8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <DMA_CalcBaseAndBitshift+0x160>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	1d1a      	adds	r2, r3, #4
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	659a      	str	r2, [r3, #88]	; 0x58
 8004da6:	e00d      	b.n	8004dc4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <DMA_CalcBaseAndBitshift+0x160>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6593      	str	r3, [r2, #88]	; 0x58
 8004db6:	e005      	b.n	8004dc4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40020010 	.word	0x40020010
 8004dd8:	40020028 	.word	0x40020028
 8004ddc:	40020040 	.word	0x40020040
 8004de0:	40020058 	.word	0x40020058
 8004de4:	40020070 	.word	0x40020070
 8004de8:	40020088 	.word	0x40020088
 8004dec:	400200a0 	.word	0x400200a0
 8004df0:	400200b8 	.word	0x400200b8
 8004df4:	40020410 	.word	0x40020410
 8004df8:	40020428 	.word	0x40020428
 8004dfc:	40020440 	.word	0x40020440
 8004e00:	40020458 	.word	0x40020458
 8004e04:	40020470 	.word	0x40020470
 8004e08:	40020488 	.word	0x40020488
 8004e0c:	400204a0 	.word	0x400204a0
 8004e10:	400204b8 	.word	0x400204b8
 8004e14:	aaaaaaab 	.word	0xaaaaaaab
 8004e18:	0800cf14 	.word	0x0800cf14
 8004e1c:	fffffc00 	.word	0xfffffc00

08004e20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d120      	bne.n	8004e76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d858      	bhi.n	8004eee <DMA_CheckFifoParam+0xce>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <DMA_CheckFifoParam+0x24>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e67 	.word	0x08004e67
 8004e4c:	08004e55 	.word	0x08004e55
 8004e50:	08004eef 	.word	0x08004eef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d048      	beq.n	8004ef2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e64:	e045      	b.n	8004ef2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e6e:	d142      	bne.n	8004ef6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e74:	e03f      	b.n	8004ef6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7e:	d123      	bne.n	8004ec8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d838      	bhi.n	8004efa <DMA_CheckFifoParam+0xda>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <DMA_CheckFifoParam+0x70>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ea1 	.word	0x08004ea1
 8004e94:	08004ea7 	.word	0x08004ea7
 8004e98:	08004ea1 	.word	0x08004ea1
 8004e9c:	08004eb9 	.word	0x08004eb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ea4:	e030      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d025      	beq.n	8004efe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eb6:	e022      	b.n	8004efe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ec0:	d11f      	bne.n	8004f02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ec6:	e01c      	b.n	8004f02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d902      	bls.n	8004ed6 <DMA_CheckFifoParam+0xb6>
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d003      	beq.n	8004edc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ed4:	e018      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eda:	e015      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00e      	beq.n	8004f06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
    break;
 8004eec:	e00b      	b.n	8004f06 <DMA_CheckFifoParam+0xe6>
        break;
 8004eee:	bf00      	nop
 8004ef0:	e00a      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        break;
 8004ef2:	bf00      	nop
 8004ef4:	e008      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        break;
 8004ef6:	bf00      	nop
 8004ef8:	e006      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        break;
 8004efa:	bf00      	nop
 8004efc:	e004      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        break;
 8004efe:	bf00      	nop
 8004f00:	e002      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        break;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
    break;
 8004f06:	bf00      	nop
    }
  }

  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop

08004f18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a38      	ldr	r2, [pc, #224]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d022      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a36      	ldr	r2, [pc, #216]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01d      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a35      	ldr	r2, [pc, #212]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d018      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a33      	ldr	r2, [pc, #204]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a32      	ldr	r2, [pc, #200]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a30      	ldr	r2, [pc, #192]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2f      	ldr	r2, [pc, #188]	; (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2d      	ldr	r2, [pc, #180]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01a      	beq.n	8004fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	3b08      	subs	r3, #8
 8004f88:	4a28      	ldr	r2, [pc, #160]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4b26      	ldr	r3, [pc, #152]	; (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a24      	ldr	r2, [pc, #144]	; (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004fa4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	2201      	movs	r2, #1
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fb4:	e024      	b.n	8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	3b10      	subs	r3, #16
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4a1c      	ldr	r2, [pc, #112]	; (800503c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d806      	bhi.n	8004fde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d902      	bls.n	8004fde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4b18      	ldr	r3, [pc, #96]	; (8005044 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a16      	ldr	r2, [pc, #88]	; (8005048 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ff0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	58025408 	.word	0x58025408
 8005010:	5802541c 	.word	0x5802541c
 8005014:	58025430 	.word	0x58025430
 8005018:	58025444 	.word	0x58025444
 800501c:	58025458 	.word	0x58025458
 8005020:	5802546c 	.word	0x5802546c
 8005024:	58025480 	.word	0x58025480
 8005028:	58025494 	.word	0x58025494
 800502c:	cccccccd 	.word	0xcccccccd
 8005030:	16009600 	.word	0x16009600
 8005034:	58025880 	.word	0x58025880
 8005038:	aaaaaaab 	.word	0xaaaaaaab
 800503c:	400204b8 	.word	0x400204b8
 8005040:	4002040f 	.word	0x4002040f
 8005044:	10008200 	.word	0x10008200
 8005048:	40020880 	.word	0x40020880

0800504c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d04a      	beq.n	80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d847      	bhi.n	80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a25      	ldr	r2, [pc, #148]	; (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d022      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a24      	ldr	r2, [pc, #144]	; (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d01d      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a22      	ldr	r2, [pc, #136]	; (800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d018      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a21      	ldr	r2, [pc, #132]	; (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00e      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d009      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1c      	ldr	r2, [pc, #112]	; (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d101      	bne.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4b17      	ldr	r3, [pc, #92]	; (8005124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050d4:	671a      	str	r2, [r3, #112]	; 0x70
 80050d6:	e009      	b.n	80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4b14      	ldr	r3, [pc, #80]	; (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	461a      	mov	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a11      	ldr	r2, [pc, #68]	; (8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	2201      	movs	r2, #1
 80050f2:	409a      	lsls	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	58025408 	.word	0x58025408
 8005108:	5802541c 	.word	0x5802541c
 800510c:	58025430 	.word	0x58025430
 8005110:	58025444 	.word	0x58025444
 8005114:	58025458 	.word	0x58025458
 8005118:	5802546c 	.word	0x5802546c
 800511c:	58025480 	.word	0x58025480
 8005120:	58025494 	.word	0x58025494
 8005124:	1600963f 	.word	0x1600963f
 8005128:	58025940 	.word	0x58025940
 800512c:	1000823f 	.word	0x1000823f
 8005130:	40020940 	.word	0x40020940

08005134 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0c6      	b.n	80052d4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fc fb9c 	bl	800188c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2223      	movs	r2, #35	; 0x23
 8005158:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515a:	4b60      	ldr	r3, [pc, #384]	; (80052dc <HAL_ETH_Init+0x1a8>)
 800515c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005160:	4a5e      	ldr	r2, [pc, #376]	; (80052dc <HAL_ETH_Init+0x1a8>)
 8005162:	f043 0302 	orr.w	r3, r3, #2
 8005166:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800516a:	4b5c      	ldr	r3, [pc, #368]	; (80052dc <HAL_ETH_Init+0x1a8>)
 800516c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	7a1b      	ldrb	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d103      	bne.n	8005188 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005180:	2000      	movs	r0, #0
 8005182:	f7fd f859 	bl	8002238 <HAL_SYSCFG_ETHInterfaceSelect>
 8005186:	e003      	b.n	8005190 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005188:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800518c:	f7fd f854 	bl	8002238 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051a8:	f7fd f80a 	bl	80021c0 <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051ae:	e00f      	b.n	80051d0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80051b0:	f7fd f806 	bl	80021c0 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051be:	d907      	bls.n	80051d0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2204      	movs	r2, #4
 80051c4:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	22e0      	movs	r2, #224	; 0xe0
 80051ca:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e081      	b.n	80052d4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e6      	bne.n	80051b0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fac0 	bl	8005768 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80051e8:	f001 fea4 	bl	8006f34 <HAL_RCC_GetHCLKFreq>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4a3c      	ldr	r2, [pc, #240]	; (80052e0 <HAL_ETH_Init+0x1ac>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	0c9a      	lsrs	r2, r3, #18
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3a01      	subs	r2, #1
 80051fc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fa13 	bl	800562c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800521c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005220:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	22e0      	movs	r2, #224	; 0xe0
 8005238:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e04a      	b.n	80052d4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	f241 1308 	movw	r3, #4360	; 0x1108
 8005246:	4413      	add	r3, r2
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4b26      	ldr	r3, [pc, #152]	; (80052e4 <HAL_ETH_Init+0x1b0>)
 800524c:	4013      	ands	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6952      	ldr	r2, [r2, #20]
 8005252:	0052      	lsls	r2, r2, #1
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	6809      	ldr	r1, [r1, #0]
 8005258:	431a      	orrs	r2, r3
 800525a:	f241 1308 	movw	r3, #4360	; 0x1108
 800525e:	440b      	add	r3, r1
 8005260:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fad8 	bl	8005818 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fb1c 	bl	80058a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	3305      	adds	r3, #5
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	021a      	lsls	r2, r3, #8
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	4619      	mov	r1, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	3303      	adds	r3, #3
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	061a      	lsls	r2, r3, #24
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	3302      	adds	r3, #2
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	3301      	adds	r3, #1
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2210      	movs	r2, #16
 80052ca:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2210      	movs	r2, #16
 80052d0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	58024400 	.word	0x58024400
 80052e0:	431bde83 	.word	0x431bde83
 80052e4:	ffff8001 	.word	0xffff8001

080052e8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80052fa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	791b      	ldrb	r3, [r3, #4]
 8005300:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005302:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	7b1b      	ldrb	r3, [r3, #12]
 8005308:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800530a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	7b5b      	ldrb	r3, [r3, #13]
 8005310:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005312:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	7b9b      	ldrb	r3, [r3, #14]
 8005318:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800531a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	7bdb      	ldrb	r3, [r3, #15]
 8005320:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005322:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	7c12      	ldrb	r2, [r2, #16]
 8005328:	2a00      	cmp	r2, #0
 800532a:	d102      	bne.n	8005332 <ETH_SetMACConfig+0x4a>
 800532c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005330:	e000      	b.n	8005334 <ETH_SetMACConfig+0x4c>
 8005332:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005334:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	7c52      	ldrb	r2, [r2, #17]
 800533a:	2a00      	cmp	r2, #0
 800533c:	d102      	bne.n	8005344 <ETH_SetMACConfig+0x5c>
 800533e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005342:	e000      	b.n	8005346 <ETH_SetMACConfig+0x5e>
 8005344:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005346:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	7c9b      	ldrb	r3, [r3, #18]
 800534c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800534e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005354:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800535a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	7f1b      	ldrb	r3, [r3, #28]
 8005360:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005362:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	7f5b      	ldrb	r3, [r3, #29]
 8005368:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800536a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	7f92      	ldrb	r2, [r2, #30]
 8005370:	2a00      	cmp	r2, #0
 8005372:	d102      	bne.n	800537a <ETH_SetMACConfig+0x92>
 8005374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005378:	e000      	b.n	800537c <ETH_SetMACConfig+0x94>
 800537a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800537c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	7fdb      	ldrb	r3, [r3, #31]
 8005382:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005384:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	f892 2020 	ldrb.w	r2, [r2, #32]
 800538c:	2a00      	cmp	r2, #0
 800538e:	d102      	bne.n	8005396 <ETH_SetMACConfig+0xae>
 8005390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005394:	e000      	b.n	8005398 <ETH_SetMACConfig+0xb0>
 8005396:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005398:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800539e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053a6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80053a8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b56      	ldr	r3, [pc, #344]	; (8005514 <ETH_SetMACConfig+0x22c>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6812      	ldr	r2, [r2, #0]
 80053c0:	68f9      	ldr	r1, [r7, #12]
 80053c2:	430b      	orrs	r3, r1
 80053c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80053d4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80053de:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053e6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80053e8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d102      	bne.n	80053fa <ETH_SetMACConfig+0x112>
 80053f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053f8:	e000      	b.n	80053fc <ETH_SetMACConfig+0x114>
 80053fa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80053fc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	4b42      	ldr	r3, [pc, #264]	; (8005518 <ETH_SetMACConfig+0x230>)
 800540e:	4013      	ands	r3, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	430b      	orrs	r3, r1
 8005418:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005420:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	4b3a      	ldr	r3, [pc, #232]	; (800551c <ETH_SetMACConfig+0x234>)
 8005432:	4013      	ands	r3, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	430b      	orrs	r3, r1
 800543c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005444:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800544a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005452:	2a00      	cmp	r2, #0
 8005454:	d101      	bne.n	800545a <ETH_SetMACConfig+0x172>
 8005456:	2280      	movs	r2, #128	; 0x80
 8005458:	e000      	b.n	800545c <ETH_SetMACConfig+0x174>
 800545a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800545c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005462:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800546e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005472:	4013      	ands	r3, r2
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6812      	ldr	r2, [r2, #0]
 8005478:	68f9      	ldr	r1, [r7, #12]
 800547a:	430b      	orrs	r3, r1
 800547c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005484:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800548c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549a:	f023 0103 	bic.w	r1, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80054b2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	d101      	bne.n	80054d6 <ETH_SetMACConfig+0x1ee>
 80054d2:	2240      	movs	r2, #64	; 0x40
 80054d4:	e000      	b.n	80054d8 <ETH_SetMACConfig+0x1f0>
 80054d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80054d8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80054e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80054e2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80054ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80054f8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	430a      	orrs	r2, r1
 8005504:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	00048083 	.word	0x00048083
 8005518:	c0f88000 	.word	0xc0f88000
 800551c:	fffffef0 	.word	0xfffffef0

08005520 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b38      	ldr	r3, [pc, #224]	; (8005618 <ETH_SetDMAConfig+0xf8>)
 8005536:	4013      	ands	r3, r2
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	6809      	ldr	r1, [r1, #0]
 8005540:	431a      	orrs	r2, r3
 8005542:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005546:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	791b      	ldrb	r3, [r3, #4]
 800554c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005552:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	7b1b      	ldrb	r3, [r3, #12]
 8005558:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	f241 0304 	movw	r3, #4100	; 0x1004
 8005566:	4413      	add	r3, r2
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b2c      	ldr	r3, [pc, #176]	; (800561c <ETH_SetDMAConfig+0xfc>)
 800556c:	4013      	ands	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6811      	ldr	r1, [r2, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	431a      	orrs	r2, r3
 8005576:	f241 0304 	movw	r3, #4100	; 0x1004
 800557a:	440b      	add	r3, r1
 800557c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	7b5b      	ldrb	r3, [r3, #13]
 8005582:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <ETH_SetDMAConfig+0x100>)
 8005598:	4013      	ands	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6811      	ldr	r1, [r2, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80055a6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	7d1b      	ldrb	r3, [r3, #20]
 80055b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80055b2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	7f5b      	ldrb	r3, [r3, #29]
 80055b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	f241 1304 	movw	r3, #4356	; 0x1104
 80055c6:	4413      	add	r3, r2
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b16      	ldr	r3, [pc, #88]	; (8005624 <ETH_SetDMAConfig+0x104>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6811      	ldr	r1, [r2, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80055da:	440b      	add	r3, r1
 80055dc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	7f1b      	ldrb	r3, [r3, #28]
 80055e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	f241 1308 	movw	r3, #4360	; 0x1108
 80055f4:	4413      	add	r3, r2
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <ETH_SetDMAConfig+0x108>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6811      	ldr	r1, [r2, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	431a      	orrs	r2, r3
 8005604:	f241 1308 	movw	r3, #4360	; 0x1108
 8005608:	440b      	add	r3, r1
 800560a:	601a      	str	r2, [r3, #0]
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	ffff87fd 	.word	0xffff87fd
 800561c:	ffff2ffe 	.word	0xffff2ffe
 8005620:	fffec000 	.word	0xfffec000
 8005624:	ffc0efef 	.word	0xffc0efef
 8005628:	7fc0ffff 	.word	0x7fc0ffff

0800562c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b0a4      	sub	sp, #144	; 0x90
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800563a:	2300      	movs	r3, #0
 800563c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800563e:	2300      	movs	r3, #0
 8005640:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005644:	2300      	movs	r3, #0
 8005646:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005656:	2301      	movs	r3, #1
 8005658:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800565c:	2300      	movs	r3, #0
 800565e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800566c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800566e:	2300      	movs	r3, #0
 8005670:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005674:	2300      	movs	r3, #0
 8005676:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005678:	2300      	movs	r3, #0
 800567a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800567e:	2300      	movs	r3, #0
 8005680:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005684:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005688:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800568a:	2300      	movs	r3, #0
 800568c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005690:	2300      	movs	r3, #0
 8005692:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800569a:	2300      	movs	r3, #0
 800569c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80056a6:	2300      	movs	r3, #0
 80056a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80056ae:	2300      	movs	r3, #0
 80056b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80056c4:	2320      	movs	r3, #32
 80056c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80056d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80056dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056e0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80056e8:	2302      	movs	r3, #2
 80056ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80056fa:	2300      	movs	r3, #0
 80056fc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005706:	2300      	movs	r3, #0
 8005708:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fde6 	bl	80052e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800571c:	2301      	movs	r3, #1
 800571e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005720:	2301      	movs	r3, #1
 8005722:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005724:	2300      	movs	r3, #0
 8005726:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005728:	2300      	movs	r3, #0
 800572a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800572e:	2300      	movs	r3, #0
 8005730:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005732:	2300      	movs	r3, #0
 8005734:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005736:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800573a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800573c:	2300      	movs	r3, #0
 800573e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005740:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005744:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005746:	2300      	movs	r3, #0
 8005748:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800574c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005750:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff fee1 	bl	8005520 <ETH_SetDMAConfig>
}
 800575e:	bf00      	nop
 8005760:	3790      	adds	r7, #144	; 0x90
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005778:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005780:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005782:	f001 fbd7 	bl	8006f34 <HAL_RCC_GetHCLKFreq>
 8005786:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d908      	bls.n	80057a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d804      	bhi.n	80057a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	e027      	b.n	80057f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4a18      	ldr	r2, [pc, #96]	; (8005808 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d908      	bls.n	80057bc <ETH_MAC_MDIO_ClkConfig+0x54>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4a17      	ldr	r2, [pc, #92]	; (800580c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d204      	bcs.n	80057bc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	e01a      	b.n	80057f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d303      	bcc.n	80057cc <ETH_MAC_MDIO_ClkConfig+0x64>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4a12      	ldr	r2, [pc, #72]	; (8005810 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d911      	bls.n	80057f0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4a10      	ldr	r2, [pc, #64]	; (8005810 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d908      	bls.n	80057e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4a0f      	ldr	r2, [pc, #60]	; (8005814 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d804      	bhi.n	80057e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e005      	b.n	80057f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e000      	b.n	80057f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80057f0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	01312cff 	.word	0x01312cff
 8005808:	02160ebf 	.word	0x02160ebf
 800580c:	03938700 	.word	0x03938700
 8005810:	05f5e0ff 	.word	0x05f5e0ff
 8005814:	08f0d17f 	.word	0x08f0d17f

08005818 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e01d      	b.n	8005862 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68d9      	ldr	r1, [r3, #12]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4613      	mov	r3, r2
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	4413      	add	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	440b      	add	r3, r1
 8005836:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2200      	movs	r2, #0
 8005842:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2200      	movs	r2, #0
 8005848:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2200      	movs	r2, #0
 800584e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	3206      	adds	r2, #6
 8005858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d9de      	bls.n	8005826 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f241 132c 	movw	r3, #4396	; 0x112c
 8005876:	4413      	add	r3, r2
 8005878:	2203      	movs	r2, #3
 800587a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68d9      	ldr	r1, [r3, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	f241 1314 	movw	r3, #4372	; 0x1114
 8005888:	4413      	add	r3, r2
 800588a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005898:	601a      	str	r2, [r3, #0]
}
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	e024      	b.n	80058fe <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6919      	ldr	r1, [r3, #16]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4613      	mov	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	440b      	add	r3, r1
 80058c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2200      	movs	r2, #0
 80058d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2200      	movs	r2, #0
 80058d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2200      	movs	r2, #0
 80058dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2200      	movs	r2, #0
 80058e2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2200      	movs	r2, #0
 80058e8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3310      	adds	r3, #16
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d9d7      	bls.n	80058b4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	f241 1330 	movw	r3, #4400	; 0x1130
 800592a:	4413      	add	r3, r2
 800592c:	2203      	movs	r2, #3
 800592e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6919      	ldr	r1, [r3, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	f241 131c 	movw	r3, #4380	; 0x111c
 800593c:	4413      	add	r3, r2
 800593e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	f241 1328 	movw	r3, #4392	; 0x1128
 8005950:	4413      	add	r3, r2
 8005952:	6019      	str	r1, [r3, #0]
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005960:	b480      	push	{r7}
 8005962:	b089      	sub	sp, #36	; 0x24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800596e:	4b89      	ldr	r3, [pc, #548]	; (8005b94 <HAL_GPIO_Init+0x234>)
 8005970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005972:	e194      	b.n	8005c9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	2101      	movs	r1, #1
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	fa01 f303 	lsl.w	r3, r1, r3
 8005980:	4013      	ands	r3, r2
 8005982:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8186 	beq.w	8005c98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d00b      	beq.n	80059ac <HAL_GPIO_Init+0x4c>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b02      	cmp	r3, #2
 800599a:	d007      	beq.n	80059ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059a0:	2b11      	cmp	r3, #17
 80059a2:	d003      	beq.n	80059ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b12      	cmp	r3, #18
 80059aa:	d130      	bne.n	8005a0e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	2203      	movs	r2, #3
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	43db      	mvns	r3, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059e2:	2201      	movs	r2, #1
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	f003 0201 	and.w	r2, r3, #1
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	2203      	movs	r2, #3
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d003      	beq.n	8005a4e <HAL_GPIO_Init+0xee>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b12      	cmp	r3, #18
 8005a4c:	d123      	bne.n	8005a96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	08da      	lsrs	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3208      	adds	r2, #8
 8005a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	220f      	movs	r2, #15
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	08da      	lsrs	r2, r3, #3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3208      	adds	r2, #8
 8005a90:	69b9      	ldr	r1, [r7, #24]
 8005a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 0203 	and.w	r2, r3, #3
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80e0 	beq.w	8005c98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ad8:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <HAL_GPIO_Init+0x238>)
 8005ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ade:	4a2e      	ldr	r2, [pc, #184]	; (8005b98 <HAL_GPIO_Init+0x238>)
 8005ae0:	f043 0302 	orr.w	r3, r3, #2
 8005ae4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	; (8005b98 <HAL_GPIO_Init+0x238>)
 8005aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005af6:	4a29      	ldr	r2, [pc, #164]	; (8005b9c <HAL_GPIO_Init+0x23c>)
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	089b      	lsrs	r3, r3, #2
 8005afc:	3302      	adds	r3, #2
 8005afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	220f      	movs	r2, #15
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	43db      	mvns	r3, r3
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	4013      	ands	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a20      	ldr	r2, [pc, #128]	; (8005ba0 <HAL_GPIO_Init+0x240>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d052      	beq.n	8005bc8 <HAL_GPIO_Init+0x268>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <HAL_GPIO_Init+0x244>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d031      	beq.n	8005b8e <HAL_GPIO_Init+0x22e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <HAL_GPIO_Init+0x248>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d02b      	beq.n	8005b8a <HAL_GPIO_Init+0x22a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <HAL_GPIO_Init+0x24c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d025      	beq.n	8005b86 <HAL_GPIO_Init+0x226>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1c      	ldr	r2, [pc, #112]	; (8005bb0 <HAL_GPIO_Init+0x250>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01f      	beq.n	8005b82 <HAL_GPIO_Init+0x222>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <HAL_GPIO_Init+0x254>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d019      	beq.n	8005b7e <HAL_GPIO_Init+0x21e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <HAL_GPIO_Init+0x258>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_GPIO_Init+0x21a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <HAL_GPIO_Init+0x25c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00d      	beq.n	8005b76 <HAL_GPIO_Init+0x216>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <HAL_GPIO_Init+0x260>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <HAL_GPIO_Init+0x212>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a17      	ldr	r2, [pc, #92]	; (8005bc4 <HAL_GPIO_Init+0x264>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_GPIO_Init+0x20e>
 8005b6a:	2309      	movs	r3, #9
 8005b6c:	e02d      	b.n	8005bca <HAL_GPIO_Init+0x26a>
 8005b6e:	230a      	movs	r3, #10
 8005b70:	e02b      	b.n	8005bca <HAL_GPIO_Init+0x26a>
 8005b72:	2308      	movs	r3, #8
 8005b74:	e029      	b.n	8005bca <HAL_GPIO_Init+0x26a>
 8005b76:	2307      	movs	r3, #7
 8005b78:	e027      	b.n	8005bca <HAL_GPIO_Init+0x26a>
 8005b7a:	2306      	movs	r3, #6
 8005b7c:	e025      	b.n	8005bca <HAL_GPIO_Init+0x26a>
 8005b7e:	2305      	movs	r3, #5
 8005b80:	e023      	b.n	8005bca <HAL_GPIO_Init+0x26a>
 8005b82:	2304      	movs	r3, #4
 8005b84:	e021      	b.n	8005bca <HAL_GPIO_Init+0x26a>
 8005b86:	2303      	movs	r3, #3
 8005b88:	e01f      	b.n	8005bca <HAL_GPIO_Init+0x26a>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e01d      	b.n	8005bca <HAL_GPIO_Init+0x26a>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e01b      	b.n	8005bca <HAL_GPIO_Init+0x26a>
 8005b92:	bf00      	nop
 8005b94:	58000080 	.word	0x58000080
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	58000400 	.word	0x58000400
 8005ba0:	58020000 	.word	0x58020000
 8005ba4:	58020400 	.word	0x58020400
 8005ba8:	58020800 	.word	0x58020800
 8005bac:	58020c00 	.word	0x58020c00
 8005bb0:	58021000 	.word	0x58021000
 8005bb4:	58021400 	.word	0x58021400
 8005bb8:	58021800 	.word	0x58021800
 8005bbc:	58021c00 	.word	0x58021c00
 8005bc0:	58022000 	.word	0x58022000
 8005bc4:	58022400 	.word	0x58022400
 8005bc8:	2300      	movs	r3, #0
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	f002 0203 	and.w	r2, r2, #3
 8005bd0:	0092      	lsls	r2, r2, #2
 8005bd2:	4093      	lsls	r3, r2
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bda:	4938      	ldr	r1, [pc, #224]	; (8005cbc <HAL_GPIO_Init+0x35c>)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	089b      	lsrs	r3, r3, #2
 8005be0:	3302      	adds	r3, #2
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	43db      	mvns	r3, r3
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	43db      	mvns	r3, r3
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f47f ae63 	bne.w	8005974 <HAL_GPIO_Init+0x14>
  }
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	3724      	adds	r7, #36	; 0x24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	58000400 	.word	0x58000400

08005cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	807b      	strh	r3, [r7, #2]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cd0:	787b      	ldrb	r3, [r7, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cd6:	887a      	ldrh	r2, [r7, #2]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cdc:	e003      	b.n	8005ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cde:	887b      	ldrh	r3, [r7, #2]
 8005ce0:	041a      	lsls	r2, r3, #16
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	619a      	str	r2, [r3, #24]
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005cfc:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <HAL_HSEM_FastTake+0x2c>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3320      	adds	r3, #32
 8005d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d06:	4a07      	ldr	r2, [pc, #28]	; (8005d24 <HAL_HSEM_FastTake+0x30>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d101      	bne.n	8005d10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e000      	b.n	8005d12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	58026400 	.word	0x58026400
 8005d24:	80000300 	.word	0x80000300

08005d28 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005d32:	4906      	ldr	r1, [pc, #24]	; (8005d4c <HAL_HSEM_Release+0x24>)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	58026400 	.word	0x58026400

08005d50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d52:	b08f      	sub	sp, #60	; 0x3c
 8005d54:	af0a      	add	r7, sp, #40	; 0x28
 8005d56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e116      	b.n	8005f90 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7fc f87f 	bl	8001e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2203      	movs	r2, #3
 8005d86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f006 fe19 	bl	800c9d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	687e      	ldr	r6, [r7, #4]
 8005dae:	466d      	mov	r5, sp
 8005db0:	f106 0410 	add.w	r4, r6, #16
 8005db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005dc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005dc4:	1d33      	adds	r3, r6, #4
 8005dc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dc8:	6838      	ldr	r0, [r7, #0]
 8005dca:	f006 fd97 	bl	800c8fc <USB_CoreInit>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0d7      	b.n	8005f90 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f006 fe07 	bl	800c9fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dec:	2300      	movs	r3, #0
 8005dee:	73fb      	strb	r3, [r7, #15]
 8005df0:	e04a      	b.n	8005e88 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005df2:	7bfa      	ldrb	r2, [r7, #15]
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	1a9b      	subs	r3, r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	440b      	add	r3, r1
 8005e00:	333d      	adds	r3, #61	; 0x3d
 8005e02:	2201      	movs	r2, #1
 8005e04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e06:	7bfa      	ldrb	r2, [r7, #15]
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	333c      	adds	r3, #60	; 0x3c
 8005e16:	7bfa      	ldrb	r2, [r7, #15]
 8005e18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e1a:	7bfa      	ldrb	r2, [r7, #15]
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	b298      	uxth	r0, r3
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	3342      	adds	r3, #66	; 0x42
 8005e2e:	4602      	mov	r2, r0
 8005e30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e32:	7bfa      	ldrb	r2, [r7, #15]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	333f      	adds	r3, #63	; 0x3f
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e46:	7bfa      	ldrb	r2, [r7, #15]
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	1a9b      	subs	r3, r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	3344      	adds	r3, #68	; 0x44
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	3348      	adds	r3, #72	; 0x48
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e6e:	7bfa      	ldrb	r2, [r7, #15]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	3350      	adds	r3, #80	; 0x50
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	3301      	adds	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
 8005e88:	7bfa      	ldrb	r2, [r7, #15]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d3af      	bcc.n	8005df2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
 8005e96:	e044      	b.n	8005f22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e98:	7bfa      	ldrb	r2, [r7, #15]
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005eaa:	2200      	movs	r2, #0
 8005eac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005eae:	7bfa      	ldrb	r2, [r7, #15]
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	1a9b      	subs	r3, r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ec4:	7bfa      	ldrb	r2, [r7, #15]
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	1a9b      	subs	r3, r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005eda:	7bfa      	ldrb	r2, [r7, #15]
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ef0:	7bfa      	ldrb	r2, [r7, #15]
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f06:	7bfa      	ldrb	r2, [r7, #15]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	73fb      	strb	r3, [r7, #15]
 8005f22:	7bfa      	ldrb	r2, [r7, #15]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d3b5      	bcc.n	8005e98 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	687e      	ldr	r6, [r7, #4]
 8005f34:	466d      	mov	r5, sp
 8005f36:	f106 0410 	add.w	r4, r6, #16
 8005f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f46:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f4a:	1d33      	adds	r3, r6, #4
 8005f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f4e:	6838      	ldr	r0, [r7, #0]
 8005f50:	f006 fd7e 	bl	800ca50 <USB_DevInit>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e014      	b.n	8005f90 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d102      	bne.n	8005f84 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f80a 	bl	8005f98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f006 ff20 	bl	800cdce <USB_DevDisconnect>

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_PCDEx_ActivateLPM+0x44>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	10000003 	.word	0x10000003

08005fe0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005fe8:	4b29      	ldr	r3, [pc, #164]	; (8006090 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	2b06      	cmp	r3, #6
 8005ff2:	d00a      	beq.n	800600a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ff4:	4b26      	ldr	r3, [pc, #152]	; (8006090 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d001      	beq.n	8006006 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e040      	b.n	8006088 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e03e      	b.n	8006088 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800600a:	4b21      	ldr	r3, [pc, #132]	; (8006090 <HAL_PWREx_ConfigSupply+0xb0>)
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006012:	491f      	ldr	r1, [pc, #124]	; (8006090 <HAL_PWREx_ConfigSupply+0xb0>)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4313      	orrs	r3, r2
 8006018:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800601a:	f7fc f8d1 	bl	80021c0 <HAL_GetTick>
 800601e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006020:	e009      	b.n	8006036 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006022:	f7fc f8cd 	bl	80021c0 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006030:	d901      	bls.n	8006036 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e028      	b.n	8006088 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006036:	4b16      	ldr	r3, [pc, #88]	; (8006090 <HAL_PWREx_ConfigSupply+0xb0>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800603e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006042:	d1ee      	bne.n	8006022 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b1e      	cmp	r3, #30
 8006048:	d008      	beq.n	800605c <HAL_PWREx_ConfigSupply+0x7c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b2e      	cmp	r3, #46	; 0x2e
 800604e:	d005      	beq.n	800605c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b1d      	cmp	r3, #29
 8006054:	d002      	beq.n	800605c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b2d      	cmp	r3, #45	; 0x2d
 800605a:	d114      	bne.n	8006086 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800605c:	f7fc f8b0 	bl	80021c0 <HAL_GetTick>
 8006060:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006062:	e009      	b.n	8006078 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006064:	f7fc f8ac 	bl	80021c0 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006072:	d901      	bls.n	8006078 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e007      	b.n	8006088 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <HAL_PWREx_ConfigSupply+0xb0>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	d1ee      	bne.n	8006064 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	58024800 	.word	0x58024800

08006094 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4a04      	ldr	r2, [pc, #16]	; (80060b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800609e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a2:	60d3      	str	r3, [r2, #12]
}
 80060a4:	bf00      	nop
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	58024800 	.word	0x58024800

080060b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08c      	sub	sp, #48	; 0x30
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e3ff      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 8087 	beq.w	80061e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d4:	4b99      	ldr	r3, [pc, #612]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060de:	4b97      	ldr	r3, [pc, #604]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	d007      	beq.n	80060fa <HAL_RCC_OscConfig+0x46>
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	2b18      	cmp	r3, #24
 80060ee:	d110      	bne.n	8006112 <HAL_RCC_OscConfig+0x5e>
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d10b      	bne.n	8006112 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fa:	4b90      	ldr	r3, [pc, #576]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d06c      	beq.n	80061e0 <HAL_RCC_OscConfig+0x12c>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d168      	bne.n	80061e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e3d9      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611a:	d106      	bne.n	800612a <HAL_RCC_OscConfig+0x76>
 800611c:	4b87      	ldr	r3, [pc, #540]	; (800633c <HAL_RCC_OscConfig+0x288>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a86      	ldr	r2, [pc, #536]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	e02e      	b.n	8006188 <HAL_RCC_OscConfig+0xd4>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10c      	bne.n	800614c <HAL_RCC_OscConfig+0x98>
 8006132:	4b82      	ldr	r3, [pc, #520]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a81      	ldr	r2, [pc, #516]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	4b7f      	ldr	r3, [pc, #508]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a7e      	ldr	r2, [pc, #504]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	e01d      	b.n	8006188 <HAL_RCC_OscConfig+0xd4>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006154:	d10c      	bne.n	8006170 <HAL_RCC_OscConfig+0xbc>
 8006156:	4b79      	ldr	r3, [pc, #484]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a78      	ldr	r2, [pc, #480]	; (800633c <HAL_RCC_OscConfig+0x288>)
 800615c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	4b76      	ldr	r3, [pc, #472]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a75      	ldr	r2, [pc, #468]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	e00b      	b.n	8006188 <HAL_RCC_OscConfig+0xd4>
 8006170:	4b72      	ldr	r3, [pc, #456]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a71      	ldr	r2, [pc, #452]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b6f      	ldr	r3, [pc, #444]	; (800633c <HAL_RCC_OscConfig+0x288>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a6e      	ldr	r2, [pc, #440]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d013      	beq.n	80061b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006190:	f7fc f816 	bl	80021c0 <HAL_GetTick>
 8006194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006198:	f7fc f812 	bl	80021c0 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b64      	cmp	r3, #100	; 0x64
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e38d      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061aa:	4b64      	ldr	r3, [pc, #400]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0xe4>
 80061b6:	e014      	b.n	80061e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fc f802 	bl	80021c0 <HAL_GetTick>
 80061bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061c0:	f7fb fffe 	bl	80021c0 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	; 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e379      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061d2:	4b5a      	ldr	r3, [pc, #360]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0x10c>
 80061de:	e000      	b.n	80061e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 80ae 	beq.w	800634c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061f0:	4b52      	ldr	r3, [pc, #328]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061fa:	4b50      	ldr	r3, [pc, #320]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <HAL_RCC_OscConfig+0x162>
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	2b18      	cmp	r3, #24
 800620a:	d13a      	bne.n	8006282 <HAL_RCC_OscConfig+0x1ce>
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d135      	bne.n	8006282 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006216:	4b49      	ldr	r3, [pc, #292]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_RCC_OscConfig+0x17a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e34b      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622e:	f7fb fff7 	bl	8002220 <HAL_GetREVID>
 8006232:	4603      	mov	r3, r0
 8006234:	f241 0203 	movw	r2, #4099	; 0x1003
 8006238:	4293      	cmp	r3, r2
 800623a:	d817      	bhi.n	800626c <HAL_RCC_OscConfig+0x1b8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	d108      	bne.n	8006256 <HAL_RCC_OscConfig+0x1a2>
 8006244:	4b3d      	ldr	r3, [pc, #244]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800624c:	4a3b      	ldr	r2, [pc, #236]	; (800633c <HAL_RCC_OscConfig+0x288>)
 800624e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006252:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006254:	e07a      	b.n	800634c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006256:	4b39      	ldr	r3, [pc, #228]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	031b      	lsls	r3, r3, #12
 8006264:	4935      	ldr	r1, [pc, #212]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006266:	4313      	orrs	r3, r2
 8006268:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800626a:	e06f      	b.n	800634c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800626c:	4b33      	ldr	r3, [pc, #204]	; (800633c <HAL_RCC_OscConfig+0x288>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	061b      	lsls	r3, r3, #24
 800627a:	4930      	ldr	r1, [pc, #192]	; (800633c <HAL_RCC_OscConfig+0x288>)
 800627c:	4313      	orrs	r3, r2
 800627e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006280:	e064      	b.n	800634c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d045      	beq.n	8006316 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800628a:	4b2c      	ldr	r3, [pc, #176]	; (800633c <HAL_RCC_OscConfig+0x288>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f023 0219 	bic.w	r2, r3, #25
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	4929      	ldr	r1, [pc, #164]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006298:	4313      	orrs	r3, r2
 800629a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629c:	f7fb ff90 	bl	80021c0 <HAL_GetTick>
 80062a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062a4:	f7fb ff8c 	bl	80021c0 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e307      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062b6:	4b21      	ldr	r3, [pc, #132]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0f0      	beq.n	80062a4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c2:	f7fb ffad 	bl	8002220 <HAL_GetREVID>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d817      	bhi.n	8006300 <HAL_RCC_OscConfig+0x24c>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2b40      	cmp	r3, #64	; 0x40
 80062d6:	d108      	bne.n	80062ea <HAL_RCC_OscConfig+0x236>
 80062d8:	4b18      	ldr	r3, [pc, #96]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80062e0:	4a16      	ldr	r2, [pc, #88]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80062e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e6:	6053      	str	r3, [r2, #4]
 80062e8:	e030      	b.n	800634c <HAL_RCC_OscConfig+0x298>
 80062ea:	4b14      	ldr	r3, [pc, #80]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	031b      	lsls	r3, r3, #12
 80062f8:	4910      	ldr	r1, [pc, #64]	; (800633c <HAL_RCC_OscConfig+0x288>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	604b      	str	r3, [r1, #4]
 80062fe:	e025      	b.n	800634c <HAL_RCC_OscConfig+0x298>
 8006300:	4b0e      	ldr	r3, [pc, #56]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	061b      	lsls	r3, r3, #24
 800630e:	490b      	ldr	r1, [pc, #44]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006310:	4313      	orrs	r3, r2
 8006312:	604b      	str	r3, [r1, #4]
 8006314:	e01a      	b.n	800634c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006316:	4b09      	ldr	r3, [pc, #36]	; (800633c <HAL_RCC_OscConfig+0x288>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a08      	ldr	r2, [pc, #32]	; (800633c <HAL_RCC_OscConfig+0x288>)
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006322:	f7fb ff4d 	bl	80021c0 <HAL_GetTick>
 8006326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006328:	e00a      	b.n	8006340 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800632a:	f7fb ff49 	bl	80021c0 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d903      	bls.n	8006340 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e2c4      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
 800633c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006340:	4ba4      	ldr	r3, [pc, #656]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1ee      	bne.n	800632a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80a9 	beq.w	80064ac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800635a:	4b9e      	ldr	r3, [pc, #632]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006362:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006364:	4b9b      	ldr	r3, [pc, #620]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b08      	cmp	r3, #8
 800636e:	d007      	beq.n	8006380 <HAL_RCC_OscConfig+0x2cc>
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2b18      	cmp	r3, #24
 8006374:	d13a      	bne.n	80063ec <HAL_RCC_OscConfig+0x338>
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d135      	bne.n	80063ec <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006380:	4b94      	ldr	r3, [pc, #592]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_RCC_OscConfig+0x2e4>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	2b80      	cmp	r3, #128	; 0x80
 8006392:	d001      	beq.n	8006398 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e296      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006398:	f7fb ff42 	bl	8002220 <HAL_GetREVID>
 800639c:	4603      	mov	r3, r0
 800639e:	f241 0203 	movw	r2, #4099	; 0x1003
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d817      	bhi.n	80063d6 <HAL_RCC_OscConfig+0x322>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	d108      	bne.n	80063c0 <HAL_RCC_OscConfig+0x30c>
 80063ae:	4b89      	ldr	r3, [pc, #548]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063b6:	4a87      	ldr	r2, [pc, #540]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80063b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063be:	e075      	b.n	80064ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063c0:	4b84      	ldr	r3, [pc, #528]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	069b      	lsls	r3, r3, #26
 80063ce:	4981      	ldr	r1, [pc, #516]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063d4:	e06a      	b.n	80064ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063d6:	4b7f      	ldr	r3, [pc, #508]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	061b      	lsls	r3, r3, #24
 80063e4:	497b      	ldr	r1, [pc, #492]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063ea:	e05f      	b.n	80064ac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d042      	beq.n	800647a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80063f4:	4b77      	ldr	r3, [pc, #476]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a76      	ldr	r2, [pc, #472]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80063fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006400:	f7fb fede 	bl	80021c0 <HAL_GetTick>
 8006404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006408:	f7fb feda 	bl	80021c0 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e255      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800641a:	4b6e      	ldr	r3, [pc, #440]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f0      	beq.n	8006408 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006426:	f7fb fefb 	bl	8002220 <HAL_GetREVID>
 800642a:	4603      	mov	r3, r0
 800642c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006430:	4293      	cmp	r3, r2
 8006432:	d817      	bhi.n	8006464 <HAL_RCC_OscConfig+0x3b0>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	2b20      	cmp	r3, #32
 800643a:	d108      	bne.n	800644e <HAL_RCC_OscConfig+0x39a>
 800643c:	4b65      	ldr	r3, [pc, #404]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006444:	4a63      	ldr	r2, [pc, #396]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800644a:	6053      	str	r3, [r2, #4]
 800644c:	e02e      	b.n	80064ac <HAL_RCC_OscConfig+0x3f8>
 800644e:	4b61      	ldr	r3, [pc, #388]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	069b      	lsls	r3, r3, #26
 800645c:	495d      	ldr	r1, [pc, #372]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 800645e:	4313      	orrs	r3, r2
 8006460:	604b      	str	r3, [r1, #4]
 8006462:	e023      	b.n	80064ac <HAL_RCC_OscConfig+0x3f8>
 8006464:	4b5b      	ldr	r3, [pc, #364]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	061b      	lsls	r3, r3, #24
 8006472:	4958      	ldr	r1, [pc, #352]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006474:	4313      	orrs	r3, r2
 8006476:	60cb      	str	r3, [r1, #12]
 8006478:	e018      	b.n	80064ac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800647a:	4b56      	ldr	r3, [pc, #344]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a55      	ldr	r2, [pc, #340]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f7fb fe9b 	bl	80021c0 <HAL_GetTick>
 800648a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800648e:	f7fb fe97 	bl	80021c0 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e212      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064a0:	4b4c      	ldr	r3, [pc, #304]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1f0      	bne.n	800648e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d036      	beq.n	8006526 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d019      	beq.n	80064f4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064c0:	4b44      	ldr	r3, [pc, #272]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80064c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c4:	4a43      	ldr	r2, [pc, #268]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064cc:	f7fb fe78 	bl	80021c0 <HAL_GetTick>
 80064d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064d4:	f7fb fe74 	bl	80021c0 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e1ef      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064e6:	4b3b      	ldr	r3, [pc, #236]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80064e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <HAL_RCC_OscConfig+0x420>
 80064f2:	e018      	b.n	8006526 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064f4:	4b37      	ldr	r3, [pc, #220]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80064f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f8:	4a36      	ldr	r2, [pc, #216]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006500:	f7fb fe5e 	bl	80021c0 <HAL_GetTick>
 8006504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006508:	f7fb fe5a 	bl	80021c0 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e1d5      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800651a:	4b2e      	ldr	r3, [pc, #184]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 800651c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d036      	beq.n	80065a0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d019      	beq.n	800656e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800653a:	4b26      	ldr	r3, [pc, #152]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a25      	ldr	r2, [pc, #148]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006544:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006546:	f7fb fe3b 	bl	80021c0 <HAL_GetTick>
 800654a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800654e:	f7fb fe37 	bl	80021c0 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e1b2      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006560:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0f0      	beq.n	800654e <HAL_RCC_OscConfig+0x49a>
 800656c:	e018      	b.n	80065a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800656e:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a18      	ldr	r2, [pc, #96]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006578:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800657a:	f7fb fe21 	bl	80021c0 <HAL_GetTick>
 800657e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006580:	e008      	b.n	8006594 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006582:	f7fb fe1d 	bl	80021c0 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e198      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006594:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <HAL_RCC_OscConfig+0x520>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f0      	bne.n	8006582 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8085 	beq.w	80066b8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065ae:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <HAL_RCC_OscConfig+0x524>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a09      	ldr	r2, [pc, #36]	; (80065d8 <HAL_RCC_OscConfig+0x524>)
 80065b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065ba:	f7fb fe01 	bl	80021c0 <HAL_GetTick>
 80065be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065c0:	e00c      	b.n	80065dc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80065c2:	f7fb fdfd 	bl	80021c0 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b64      	cmp	r3, #100	; 0x64
 80065ce:	d905      	bls.n	80065dc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e178      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
 80065d4:	58024400 	.word	0x58024400
 80065d8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065dc:	4b96      	ldr	r3, [pc, #600]	; (8006838 <HAL_RCC_OscConfig+0x784>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0ec      	beq.n	80065c2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d106      	bne.n	80065fe <HAL_RCC_OscConfig+0x54a>
 80065f0:	4b92      	ldr	r3, [pc, #584]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80065f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f4:	4a91      	ldr	r2, [pc, #580]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80065f6:	f043 0301 	orr.w	r3, r3, #1
 80065fa:	6713      	str	r3, [r2, #112]	; 0x70
 80065fc:	e02d      	b.n	800665a <HAL_RCC_OscConfig+0x5a6>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10c      	bne.n	8006620 <HAL_RCC_OscConfig+0x56c>
 8006606:	4b8d      	ldr	r3, [pc, #564]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	4a8c      	ldr	r2, [pc, #560]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	6713      	str	r3, [r2, #112]	; 0x70
 8006612:	4b8a      	ldr	r3, [pc, #552]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	4a89      	ldr	r2, [pc, #548]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006618:	f023 0304 	bic.w	r3, r3, #4
 800661c:	6713      	str	r3, [r2, #112]	; 0x70
 800661e:	e01c      	b.n	800665a <HAL_RCC_OscConfig+0x5a6>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b05      	cmp	r3, #5
 8006626:	d10c      	bne.n	8006642 <HAL_RCC_OscConfig+0x58e>
 8006628:	4b84      	ldr	r3, [pc, #528]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	4a83      	ldr	r2, [pc, #524]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800662e:	f043 0304 	orr.w	r3, r3, #4
 8006632:	6713      	str	r3, [r2, #112]	; 0x70
 8006634:	4b81      	ldr	r3, [pc, #516]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	4a80      	ldr	r2, [pc, #512]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6713      	str	r3, [r2, #112]	; 0x70
 8006640:	e00b      	b.n	800665a <HAL_RCC_OscConfig+0x5a6>
 8006642:	4b7e      	ldr	r3, [pc, #504]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	4a7d      	ldr	r2, [pc, #500]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	6713      	str	r3, [r2, #112]	; 0x70
 800664e:	4b7b      	ldr	r3, [pc, #492]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	4a7a      	ldr	r2, [pc, #488]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006654:	f023 0304 	bic.w	r3, r3, #4
 8006658:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d015      	beq.n	800668e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006662:	f7fb fdad 	bl	80021c0 <HAL_GetTick>
 8006666:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006668:	e00a      	b.n	8006680 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800666a:	f7fb fda9 	bl	80021c0 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	f241 3288 	movw	r2, #5000	; 0x1388
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e122      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006680:	4b6e      	ldr	r3, [pc, #440]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0ee      	beq.n	800666a <HAL_RCC_OscConfig+0x5b6>
 800668c:	e014      	b.n	80066b8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668e:	f7fb fd97 	bl	80021c0 <HAL_GetTick>
 8006692:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006694:	e00a      	b.n	80066ac <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006696:	f7fb fd93 	bl	80021c0 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e10c      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066ac:	4b63      	ldr	r3, [pc, #396]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ee      	bne.n	8006696 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8101 	beq.w	80068c4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80066c2:	4b5e      	ldr	r3, [pc, #376]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ca:	2b18      	cmp	r3, #24
 80066cc:	f000 80bc 	beq.w	8006848 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	f040 8095 	bne.w	8006804 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066da:	4b58      	ldr	r3, [pc, #352]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a57      	ldr	r2, [pc, #348]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80066e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e6:	f7fb fd6b 	bl	80021c0 <HAL_GetTick>
 80066ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066ec:	e008      	b.n	8006700 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ee:	f7fb fd67 	bl	80021c0 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e0e2      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006700:	4b4e      	ldr	r3, [pc, #312]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f0      	bne.n	80066ee <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800670c:	4b4b      	ldr	r3, [pc, #300]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800670e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006710:	4b4b      	ldr	r3, [pc, #300]	; (8006840 <HAL_RCC_OscConfig+0x78c>)
 8006712:	4013      	ands	r3, r2
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800671c:	0112      	lsls	r2, r2, #4
 800671e:	430a      	orrs	r2, r1
 8006720:	4946      	ldr	r1, [pc, #280]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006722:	4313      	orrs	r3, r2
 8006724:	628b      	str	r3, [r1, #40]	; 0x28
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	3b01      	subs	r3, #1
 800672c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006734:	3b01      	subs	r3, #1
 8006736:	025b      	lsls	r3, r3, #9
 8006738:	b29b      	uxth	r3, r3
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	3b01      	subs	r3, #1
 8006742:	041b      	lsls	r3, r3, #16
 8006744:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	3b01      	subs	r3, #1
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006756:	4939      	ldr	r1, [pc, #228]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006758:	4313      	orrs	r3, r2
 800675a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800675c:	4b37      	ldr	r3, [pc, #220]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	4a36      	ldr	r2, [pc, #216]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006768:	4b34      	ldr	r3, [pc, #208]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800676a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800676c:	4b35      	ldr	r3, [pc, #212]	; (8006844 <HAL_RCC_OscConfig+0x790>)
 800676e:	4013      	ands	r3, r2
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006774:	00d2      	lsls	r2, r2, #3
 8006776:	4931      	ldr	r1, [pc, #196]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006778:	4313      	orrs	r3, r2
 800677a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800677c:	4b2f      	ldr	r3, [pc, #188]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	f023 020c 	bic.w	r2, r3, #12
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	492c      	ldr	r1, [pc, #176]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800678a:	4313      	orrs	r3, r2
 800678c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800678e:	4b2b      	ldr	r3, [pc, #172]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	f023 0202 	bic.w	r2, r3, #2
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	4928      	ldr	r1, [pc, #160]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800679c:	4313      	orrs	r3, r2
 800679e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067a0:	4b26      	ldr	r3, [pc, #152]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	4a25      	ldr	r2, [pc, #148]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ac:	4b23      	ldr	r3, [pc, #140]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	4a22      	ldr	r2, [pc, #136]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067b8:	4b20      	ldr	r3, [pc, #128]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	4a1f      	ldr	r2, [pc, #124]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80067c4:	4b1d      	ldr	r3, [pc, #116]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	4a1c      	ldr	r2, [pc, #112]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067ca:	f043 0301 	orr.w	r3, r3, #1
 80067ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d0:	4b1a      	ldr	r3, [pc, #104]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a19      	ldr	r2, [pc, #100]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067dc:	f7fb fcf0 	bl	80021c0 <HAL_GetTick>
 80067e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e4:	f7fb fcec 	bl	80021c0 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e067      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067f6:	4b11      	ldr	r3, [pc, #68]	; (800683c <HAL_RCC_OscConfig+0x788>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCC_OscConfig+0x730>
 8006802:	e05f      	b.n	80068c4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <HAL_RCC_OscConfig+0x788>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a0c      	ldr	r2, [pc, #48]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800680a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800680e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006810:	f7fb fcd6 	bl	80021c0 <HAL_GetTick>
 8006814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006818:	f7fb fcd2 	bl	80021c0 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e04d      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800682a:	4b04      	ldr	r3, [pc, #16]	; (800683c <HAL_RCC_OscConfig+0x788>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1f0      	bne.n	8006818 <HAL_RCC_OscConfig+0x764>
 8006836:	e045      	b.n	80068c4 <HAL_RCC_OscConfig+0x810>
 8006838:	58024800 	.word	0x58024800
 800683c:	58024400 	.word	0x58024400
 8006840:	fffffc0c 	.word	0xfffffc0c
 8006844:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006848:	4b21      	ldr	r3, [pc, #132]	; (80068d0 <HAL_RCC_OscConfig+0x81c>)
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800684e:	4b20      	ldr	r3, [pc, #128]	; (80068d0 <HAL_RCC_OscConfig+0x81c>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b01      	cmp	r3, #1
 800685a:	d031      	beq.n	80068c0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f003 0203 	and.w	r2, r3, #3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006866:	429a      	cmp	r2, r3
 8006868:	d12a      	bne.n	80068c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d122      	bne.n	80068c0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006886:	429a      	cmp	r2, r3
 8006888:	d11a      	bne.n	80068c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	0a5b      	lsrs	r3, r3, #9
 800688e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006898:	429a      	cmp	r2, r3
 800689a:	d111      	bne.n	80068c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d108      	bne.n	80068c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	0e1b      	lsrs	r3, r3, #24
 80068b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3730      	adds	r7, #48	; 0x30
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	58024400 	.word	0x58024400

080068d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e19c      	b.n	8006c22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068e8:	4b8a      	ldr	r3, [pc, #552]	; (8006b14 <HAL_RCC_ClockConfig+0x240>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d910      	bls.n	8006918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f6:	4b87      	ldr	r3, [pc, #540]	; (8006b14 <HAL_RCC_ClockConfig+0x240>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f023 020f 	bic.w	r2, r3, #15
 80068fe:	4985      	ldr	r1, [pc, #532]	; (8006b14 <HAL_RCC_ClockConfig+0x240>)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006906:	4b83      	ldr	r3, [pc, #524]	; (8006b14 <HAL_RCC_ClockConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d001      	beq.n	8006918 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e184      	b.n	8006c22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	d010      	beq.n	8006946 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	4b7b      	ldr	r3, [pc, #492]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006930:	429a      	cmp	r2, r3
 8006932:	d908      	bls.n	8006946 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006934:	4b78      	ldr	r3, [pc, #480]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	4975      	ldr	r1, [pc, #468]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006942:	4313      	orrs	r3, r2
 8006944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d010      	beq.n	8006974 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695a      	ldr	r2, [r3, #20]
 8006956:	4b70      	ldr	r3, [pc, #448]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800695e:	429a      	cmp	r2, r3
 8006960:	d908      	bls.n	8006974 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006962:	4b6d      	ldr	r3, [pc, #436]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	496a      	ldr	r1, [pc, #424]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006970:	4313      	orrs	r3, r2
 8006972:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b00      	cmp	r3, #0
 800697e:	d010      	beq.n	80069a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	4b64      	ldr	r3, [pc, #400]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800698c:	429a      	cmp	r2, r3
 800698e:	d908      	bls.n	80069a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006990:	4b61      	ldr	r3, [pc, #388]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	495e      	ldr	r1, [pc, #376]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d010      	beq.n	80069d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69da      	ldr	r2, [r3, #28]
 80069b2:	4b59      	ldr	r3, [pc, #356]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d908      	bls.n	80069d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80069be:	4b56      	ldr	r3, [pc, #344]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	4953      	ldr	r1, [pc, #332]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d010      	beq.n	80069fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	4b4d      	ldr	r3, [pc, #308]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d908      	bls.n	80069fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ec:	4b4a      	ldr	r3, [pc, #296]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f023 020f 	bic.w	r2, r3, #15
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	4947      	ldr	r1, [pc, #284]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d055      	beq.n	8006ab6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a0a:	4b43      	ldr	r3, [pc, #268]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	4940      	ldr	r1, [pc, #256]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d107      	bne.n	8006a34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a24:	4b3c      	ldr	r3, [pc, #240]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d121      	bne.n	8006a74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0f6      	b.n	8006c22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d107      	bne.n	8006a4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a3c:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d115      	bne.n	8006a74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0ea      	b.n	8006c22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d107      	bne.n	8006a64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a54:	4b30      	ldr	r3, [pc, #192]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e0de      	b.n	8006c22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a64:	4b2c      	ldr	r3, [pc, #176]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0d6      	b.n	8006c22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a74:	4b28      	ldr	r3, [pc, #160]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f023 0207 	bic.w	r2, r3, #7
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4925      	ldr	r1, [pc, #148]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a86:	f7fb fb9b 	bl	80021c0 <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a8c:	e00a      	b.n	8006aa4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a8e:	f7fb fb97 	bl	80021c0 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e0be      	b.n	8006c22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aa4:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d1eb      	bne.n	8006a8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d010      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d208      	bcs.n	8006ae4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ad2:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f023 020f 	bic.w	r2, r3, #15
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	490e      	ldr	r1, [pc, #56]	; (8006b18 <HAL_RCC_ClockConfig+0x244>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <HAL_RCC_ClockConfig+0x240>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d214      	bcs.n	8006b1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af2:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <HAL_RCC_ClockConfig+0x240>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f023 020f 	bic.w	r2, r3, #15
 8006afa:	4906      	ldr	r1, [pc, #24]	; (8006b14 <HAL_RCC_ClockConfig+0x240>)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b02:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <HAL_RCC_ClockConfig+0x240>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e086      	b.n	8006c22 <HAL_RCC_ClockConfig+0x34e>
 8006b14:	52002000 	.word	0x52002000
 8006b18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d010      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	4b3f      	ldr	r3, [pc, #252]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d208      	bcs.n	8006b4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b38:	4b3c      	ldr	r3, [pc, #240]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	4939      	ldr	r1, [pc, #228]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d010      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695a      	ldr	r2, [r3, #20]
 8006b5a:	4b34      	ldr	r3, [pc, #208]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d208      	bcs.n	8006b78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b66:	4b31      	ldr	r3, [pc, #196]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	492e      	ldr	r1, [pc, #184]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d010      	beq.n	8006ba6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	4b28      	ldr	r3, [pc, #160]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d208      	bcs.n	8006ba6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b94:	4b25      	ldr	r3, [pc, #148]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	4922      	ldr	r1, [pc, #136]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d010      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69da      	ldr	r2, [r3, #28]
 8006bb6:	4b1d      	ldr	r3, [pc, #116]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d208      	bcs.n	8006bd4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006bc2:	4b1a      	ldr	r3, [pc, #104]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	4917      	ldr	r1, [pc, #92]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bd4:	f000 f834 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	0a1b      	lsrs	r3, r3, #8
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	4912      	ldr	r1, [pc, #72]	; (8006c30 <HAL_RCC_ClockConfig+0x35c>)
 8006be6:	5ccb      	ldrb	r3, [r1, r3]
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <HAL_RCC_ClockConfig+0x358>)
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	4a0d      	ldr	r2, [pc, #52]	; (8006c30 <HAL_RCC_ClockConfig+0x35c>)
 8006bfc:	5cd3      	ldrb	r3, [r2, r3]
 8006bfe:	f003 031f 	and.w	r3, r3, #31
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	fa22 f303 	lsr.w	r3, r2, r3
 8006c08:	4a0a      	ldr	r2, [pc, #40]	; (8006c34 <HAL_RCC_ClockConfig+0x360>)
 8006c0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c0c:	4a0a      	ldr	r2, [pc, #40]	; (8006c38 <HAL_RCC_ClockConfig+0x364>)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006c12:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <HAL_RCC_ClockConfig+0x368>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fb fa88 	bl	800212c <HAL_InitTick>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	0800cf04 	.word	0x0800cf04
 8006c34:	24000004 	.word	0x24000004
 8006c38:	24000000 	.word	0x24000000
 8006c3c:	24017158 	.word	0x24017158

08006c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b089      	sub	sp, #36	; 0x24
 8006c44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c46:	4bb3      	ldr	r3, [pc, #716]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c4e:	2b18      	cmp	r3, #24
 8006c50:	f200 8155 	bhi.w	8006efe <HAL_RCC_GetSysClockFreq+0x2be>
 8006c54:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006cc1 	.word	0x08006cc1
 8006c60:	08006eff 	.word	0x08006eff
 8006c64:	08006eff 	.word	0x08006eff
 8006c68:	08006eff 	.word	0x08006eff
 8006c6c:	08006eff 	.word	0x08006eff
 8006c70:	08006eff 	.word	0x08006eff
 8006c74:	08006eff 	.word	0x08006eff
 8006c78:	08006eff 	.word	0x08006eff
 8006c7c:	08006ce7 	.word	0x08006ce7
 8006c80:	08006eff 	.word	0x08006eff
 8006c84:	08006eff 	.word	0x08006eff
 8006c88:	08006eff 	.word	0x08006eff
 8006c8c:	08006eff 	.word	0x08006eff
 8006c90:	08006eff 	.word	0x08006eff
 8006c94:	08006eff 	.word	0x08006eff
 8006c98:	08006eff 	.word	0x08006eff
 8006c9c:	08006ced 	.word	0x08006ced
 8006ca0:	08006eff 	.word	0x08006eff
 8006ca4:	08006eff 	.word	0x08006eff
 8006ca8:	08006eff 	.word	0x08006eff
 8006cac:	08006eff 	.word	0x08006eff
 8006cb0:	08006eff 	.word	0x08006eff
 8006cb4:	08006eff 	.word	0x08006eff
 8006cb8:	08006eff 	.word	0x08006eff
 8006cbc:	08006cf3 	.word	0x08006cf3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cc0:	4b94      	ldr	r3, [pc, #592]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d009      	beq.n	8006ce0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ccc:	4b91      	ldr	r3, [pc, #580]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	08db      	lsrs	r3, r3, #3
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	4a90      	ldr	r2, [pc, #576]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006cde:	e111      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ce0:	4b8d      	ldr	r3, [pc, #564]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ce2:	61bb      	str	r3, [r7, #24]
    break;
 8006ce4:	e10e      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006ce6:	4b8d      	ldr	r3, [pc, #564]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ce8:	61bb      	str	r3, [r7, #24]
    break;
 8006cea:	e10b      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006cec:	4b8c      	ldr	r3, [pc, #560]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006cee:	61bb      	str	r3, [r7, #24]
    break;
 8006cf0:	e108      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cf2:	4b88      	ldr	r3, [pc, #544]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006cfc:	4b85      	ldr	r3, [pc, #532]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d00:	091b      	lsrs	r3, r3, #4
 8006d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d08:	4b82      	ldr	r3, [pc, #520]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d12:	4b80      	ldr	r3, [pc, #512]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	08db      	lsrs	r3, r3, #3
 8006d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 80e1 	beq.w	8006ef8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	f000 8083 	beq.w	8006e44 <HAL_RCC_GetSysClockFreq+0x204>
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	f200 80a1 	bhi.w	8006e88 <HAL_RCC_GetSysClockFreq+0x248>
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_RCC_GetSysClockFreq+0x114>
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d056      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006d52:	e099      	b.n	8006e88 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d54:	4b6f      	ldr	r3, [pc, #444]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0320 	and.w	r3, r3, #32
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d02d      	beq.n	8006dbc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d60:	4b6c      	ldr	r3, [pc, #432]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	08db      	lsrs	r3, r3, #3
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	4a6b      	ldr	r2, [pc, #428]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d70:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d8a:	4b62      	ldr	r3, [pc, #392]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006dba:	e087      	b.n	8006ecc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006f28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dce:	4b51      	ldr	r3, [pc, #324]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006de2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dfe:	e065      	b.n	8006ecc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006f2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e12:	4b40      	ldr	r3, [pc, #256]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e42:	e043      	b.n	8006ecc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006f30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e56:	4b2f      	ldr	r3, [pc, #188]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e86:	e021      	b.n	8006ecc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006f2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9a:	4b1e      	ldr	r3, [pc, #120]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006ecc:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed0:	0a5b      	lsrs	r3, r3, #9
 8006ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ef0:	ee17 3a90 	vmov	r3, s15
 8006ef4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006ef6:	e005      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61bb      	str	r3, [r7, #24]
    break;
 8006efc:	e002      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006efe:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f00:	61bb      	str	r3, [r7, #24]
    break;
 8006f02:	bf00      	nop
  }

  return sysclockfreq;
 8006f04:	69bb      	ldr	r3, [r7, #24]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3724      	adds	r7, #36	; 0x24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	58024400 	.word	0x58024400
 8006f18:	03d09000 	.word	0x03d09000
 8006f1c:	003d0900 	.word	0x003d0900
 8006f20:	007a1200 	.word	0x007a1200
 8006f24:	46000000 	.word	0x46000000
 8006f28:	4c742400 	.word	0x4c742400
 8006f2c:	4a742400 	.word	0x4a742400
 8006f30:	4af42400 	.word	0x4af42400

08006f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006f3a:	f7ff fe81 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	0a1b      	lsrs	r3, r3, #8
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	490f      	ldr	r1, [pc, #60]	; (8006f88 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f4c:	5ccb      	ldrb	r3, [r1, r3]
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	fa22 f303 	lsr.w	r3, r2, r3
 8006f56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f62:	5cd3      	ldrb	r3, [r2, r3]
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	4a07      	ldr	r2, [pc, #28]	; (8006f8c <HAL_RCC_GetHCLKFreq+0x58>)
 8006f70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f72:	4a07      	ldr	r2, [pc, #28]	; (8006f90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f78:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <HAL_RCC_GetHCLKFreq+0x58>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	58024400 	.word	0x58024400
 8006f88:	0800cf04 	.word	0x0800cf04
 8006f8c:	24000004 	.word	0x24000004
 8006f90:	24000000 	.word	0x24000000

08006f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f98:	f7ff ffcc 	bl	8006f34 <HAL_RCC_GetHCLKFreq>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	091b      	lsrs	r3, r3, #4
 8006fa4:	f003 0307 	and.w	r3, r3, #7
 8006fa8:	4904      	ldr	r1, [pc, #16]	; (8006fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006faa:	5ccb      	ldrb	r3, [r1, r3]
 8006fac:	f003 031f 	and.w	r3, r3, #31
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	58024400 	.word	0x58024400
 8006fbc:	0800cf04 	.word	0x0800cf04

08006fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006fc4:	f7ff ffb6 	bl	8006f34 <HAL_RCC_GetHCLKFreq>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	4904      	ldr	r1, [pc, #16]	; (8006fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fd6:	5ccb      	ldrb	r3, [r1, r3]
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	58024400 	.word	0x58024400
 8006fe8:	0800cf04 	.word	0x0800cf04

08006fec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d03f      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007010:	d02a      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007012:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007016:	d824      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800701c:	d018      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800701e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007022:	d81e      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800702c:	d007      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800702e:	e018      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007030:	4bab      	ldr	r3, [pc, #684]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	4aaa      	ldr	r2, [pc, #680]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800703a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800703c:	e015      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3304      	adds	r3, #4
 8007042:	2102      	movs	r1, #2
 8007044:	4618      	mov	r0, r3
 8007046:	f001 f9cf 	bl	80083e8 <RCCEx_PLL2_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800704e:	e00c      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3324      	adds	r3, #36	; 0x24
 8007054:	2102      	movs	r1, #2
 8007056:	4618      	mov	r0, r3
 8007058:	f001 fa78 	bl	800854c <RCCEx_PLL3_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007060:	e003      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	75fb      	strb	r3, [r7, #23]
      break;
 8007066:	e000      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d109      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007070:	4b9b      	ldr	r3, [pc, #620]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007074:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800707c:	4998      	ldr	r1, [pc, #608]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800707e:	4313      	orrs	r3, r2
 8007080:	650b      	str	r3, [r1, #80]	; 0x50
 8007082:	e001      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007090:	2b00      	cmp	r3, #0
 8007092:	d03d      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007098:	2b04      	cmp	r3, #4
 800709a:	d826      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800709c:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	080070b9 	.word	0x080070b9
 80070a8:	080070c7 	.word	0x080070c7
 80070ac:	080070d9 	.word	0x080070d9
 80070b0:	080070f1 	.word	0x080070f1
 80070b4:	080070f1 	.word	0x080070f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070b8:	4b89      	ldr	r3, [pc, #548]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	4a88      	ldr	r2, [pc, #544]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070c4:	e015      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3304      	adds	r3, #4
 80070ca:	2100      	movs	r1, #0
 80070cc:	4618      	mov	r0, r3
 80070ce:	f001 f98b 	bl	80083e8 <RCCEx_PLL2_Config>
 80070d2:	4603      	mov	r3, r0
 80070d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070d6:	e00c      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3324      	adds	r3, #36	; 0x24
 80070dc:	2100      	movs	r1, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f001 fa34 	bl	800854c <RCCEx_PLL3_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070e8:	e003      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	75fb      	strb	r3, [r7, #23]
      break;
 80070ee:	e000      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80070f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070f8:	4b79      	ldr	r3, [pc, #484]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fc:	f023 0207 	bic.w	r2, r3, #7
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007104:	4976      	ldr	r1, [pc, #472]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007106:	4313      	orrs	r3, r2
 8007108:	650b      	str	r3, [r1, #80]	; 0x50
 800710a:	e001      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007118:	2b00      	cmp	r3, #0
 800711a:	d042      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007124:	d02b      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712a:	d825      	bhi.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800712c:	2bc0      	cmp	r3, #192	; 0xc0
 800712e:	d028      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007130:	2bc0      	cmp	r3, #192	; 0xc0
 8007132:	d821      	bhi.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007134:	2b80      	cmp	r3, #128	; 0x80
 8007136:	d016      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007138:	2b80      	cmp	r3, #128	; 0x80
 800713a:	d81d      	bhi.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d007      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007144:	e018      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007146:	4b66      	ldr	r3, [pc, #408]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	4a65      	ldr	r2, [pc, #404]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800714c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007150:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007152:	e017      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3304      	adds	r3, #4
 8007158:	2100      	movs	r1, #0
 800715a:	4618      	mov	r0, r3
 800715c:	f001 f944 	bl	80083e8 <RCCEx_PLL2_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007164:	e00e      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3324      	adds	r3, #36	; 0x24
 800716a:	2100      	movs	r1, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f001 f9ed 	bl	800854c <RCCEx_PLL3_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007176:	e005      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	75fb      	strb	r3, [r7, #23]
      break;
 800717c:	e002      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800717e:	bf00      	nop
 8007180:	e000      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800718a:	4b55      	ldr	r3, [pc, #340]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800718c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007196:	4952      	ldr	r1, [pc, #328]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007198:	4313      	orrs	r3, r2
 800719a:	650b      	str	r3, [r1, #80]	; 0x50
 800719c:	e001      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d049      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071b8:	d030      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80071ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071be:	d82a      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80071c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80071c4:	d02c      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80071c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80071ca:	d824      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80071cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071d0:	d018      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80071d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071d6:	d81e      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80071dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071e0:	d007      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80071e2:	e018      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e4:	4b3e      	ldr	r3, [pc, #248]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	4a3d      	ldr	r2, [pc, #244]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071f0:	e017      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3304      	adds	r3, #4
 80071f6:	2100      	movs	r1, #0
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 f8f5 	bl	80083e8 <RCCEx_PLL2_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007202:	e00e      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3324      	adds	r3, #36	; 0x24
 8007208:	2100      	movs	r1, #0
 800720a:	4618      	mov	r0, r3
 800720c:	f001 f99e 	bl	800854c <RCCEx_PLL3_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007214:	e005      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	75fb      	strb	r3, [r7, #23]
      break;
 800721a:	e002      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007222:	7dfb      	ldrb	r3, [r7, #23]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007228:	4b2d      	ldr	r3, [pc, #180]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800722a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007236:	492a      	ldr	r1, [pc, #168]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007238:	4313      	orrs	r3, r2
 800723a:	658b      	str	r3, [r1, #88]	; 0x58
 800723c:	e001      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723e:	7dfb      	ldrb	r3, [r7, #23]
 8007240:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724a:	2b00      	cmp	r3, #0
 800724c:	d04c      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007258:	d030      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800725a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800725e:	d82a      	bhi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007260:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007264:	d02c      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007266:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800726a:	d824      	bhi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800726c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007270:	d018      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007276:	d81e      	bhi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800727c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007280:	d007      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007282:	e018      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007284:	4b16      	ldr	r3, [pc, #88]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800728a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800728e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007290:	e017      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3304      	adds	r3, #4
 8007296:	2100      	movs	r1, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f001 f8a5 	bl	80083e8 <RCCEx_PLL2_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80072a2:	e00e      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3324      	adds	r3, #36	; 0x24
 80072a8:	2100      	movs	r1, #0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 f94e 	bl	800854c <RCCEx_PLL3_Config>
 80072b0:	4603      	mov	r3, r0
 80072b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072b4:	e005      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	75fb      	strb	r3, [r7, #23]
      break;
 80072ba:	e002      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80072bc:	bf00      	nop
 80072be:	e000      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80072c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10d      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072d6:	4902      	ldr	r1, [pc, #8]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	658b      	str	r3, [r1, #88]	; 0x58
 80072dc:	e004      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80072de:	bf00      	nop
 80072e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d032      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f8:	2b30      	cmp	r3, #48	; 0x30
 80072fa:	d01c      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80072fc:	2b30      	cmp	r3, #48	; 0x30
 80072fe:	d817      	bhi.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007300:	2b20      	cmp	r3, #32
 8007302:	d00c      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007304:	2b20      	cmp	r3, #32
 8007306:	d813      	bhi.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d016      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800730c:	2b10      	cmp	r3, #16
 800730e:	d10f      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007310:	4baf      	ldr	r3, [pc, #700]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	4aae      	ldr	r2, [pc, #696]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800731a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800731c:	e00e      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3304      	adds	r3, #4
 8007322:	2102      	movs	r1, #2
 8007324:	4618      	mov	r0, r3
 8007326:	f001 f85f 	bl	80083e8 <RCCEx_PLL2_Config>
 800732a:	4603      	mov	r3, r0
 800732c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800732e:	e005      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	75fb      	strb	r3, [r7, #23]
      break;
 8007334:	e002      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007336:	bf00      	nop
 8007338:	e000      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800733a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d109      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007342:	4ba3      	ldr	r3, [pc, #652]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007346:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734e:	49a0      	ldr	r1, [pc, #640]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007350:	4313      	orrs	r3, r2
 8007352:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007354:	e001      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d047      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800736a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800736e:	d030      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007374:	d82a      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007376:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800737a:	d02c      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800737c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007380:	d824      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007386:	d018      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738c:	d81e      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007396:	d007      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007398:	e018      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800739a:	4b8d      	ldr	r3, [pc, #564]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	4a8c      	ldr	r2, [pc, #560]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073a6:	e017      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 f81a 	bl	80083e8 <RCCEx_PLL2_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073b8:	e00e      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3324      	adds	r3, #36	; 0x24
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 f8c3 	bl	800854c <RCCEx_PLL3_Config>
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073ca:	e005      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	75fb      	strb	r3, [r7, #23]
      break;
 80073d0:	e002      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80073d2:	bf00      	nop
 80073d4:	e000      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80073d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d109      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80073de:	4b7c      	ldr	r3, [pc, #496]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ea:	4979      	ldr	r1, [pc, #484]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	650b      	str	r3, [r1, #80]	; 0x50
 80073f0:	e001      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d049      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007406:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800740a:	d02e      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800740c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007410:	d828      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007412:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007416:	d02a      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007418:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800741c:	d822      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800741e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007422:	d026      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007424:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007428:	d81c      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800742a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800742e:	d010      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007434:	d816      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01d      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800743a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800743e:	d111      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	2101      	movs	r1, #1
 8007446:	4618      	mov	r0, r3
 8007448:	f000 ffce 	bl	80083e8 <RCCEx_PLL2_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007450:	e012      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3324      	adds	r3, #36	; 0x24
 8007456:	2101      	movs	r1, #1
 8007458:	4618      	mov	r0, r3
 800745a:	f001 f877 	bl	800854c <RCCEx_PLL3_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007462:	e009      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
      break;
 8007468:	e006      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800746a:	bf00      	nop
 800746c:	e004      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800746e:	bf00      	nop
 8007470:	e002      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007472:	bf00      	nop
 8007474:	e000      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800747e:	4b54      	ldr	r3, [pc, #336]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007482:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800748a:	4951      	ldr	r1, [pc, #324]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800748c:	4313      	orrs	r3, r2
 800748e:	650b      	str	r3, [r1, #80]	; 0x50
 8007490:	e001      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d04b      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074ac:	d02e      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80074ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074b2:	d828      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80074b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b8:	d02a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80074ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074be:	d822      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80074c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074c4:	d026      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80074c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074ca:	d81c      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80074cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d0:	d010      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80074d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d6:	d816      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01d      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80074dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074e0:	d111      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3304      	adds	r3, #4
 80074e6:	2101      	movs	r1, #1
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 ff7d 	bl	80083e8 <RCCEx_PLL2_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80074f2:	e012      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3324      	adds	r3, #36	; 0x24
 80074f8:	2101      	movs	r1, #1
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 f826 	bl	800854c <RCCEx_PLL3_Config>
 8007500:	4603      	mov	r3, r0
 8007502:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007504:	e009      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	75fb      	strb	r3, [r7, #23]
      break;
 800750a:	e006      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800750c:	bf00      	nop
 800750e:	e004      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007510:	bf00      	nop
 8007512:	e002      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007520:	4b2b      	ldr	r3, [pc, #172]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007524:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800752e:	4928      	ldr	r1, [pc, #160]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007530:	4313      	orrs	r3, r2
 8007532:	658b      	str	r3, [r1, #88]	; 0x58
 8007534:	e001      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d02f      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800754e:	d00e      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007554:	d814      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d015      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800755a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800755e:	d10f      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007560:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	4a1a      	ldr	r2, [pc, #104]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800756a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800756c:	e00c      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3304      	adds	r3, #4
 8007572:	2101      	movs	r1, #1
 8007574:	4618      	mov	r0, r3
 8007576:	f000 ff37 	bl	80083e8 <RCCEx_PLL2_Config>
 800757a:	4603      	mov	r3, r0
 800757c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800757e:	e003      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	75fb      	strb	r3, [r7, #23]
      break;
 8007584:	e000      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800758e:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007592:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759a:	490d      	ldr	r1, [pc, #52]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800759c:	4313      	orrs	r3, r2
 800759e:	650b      	str	r3, [r1, #80]	; 0x50
 80075a0:	e001      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d033      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d81c      	bhi.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80075ba:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	080075fb 	.word	0x080075fb
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075e3 	.word	0x080075e3
 80075cc:	080075fb 	.word	0x080075fb
 80075d0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d4:	4bb8      	ldr	r3, [pc, #736]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	4ab7      	ldr	r2, [pc, #732]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80075e0:	e00c      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	2102      	movs	r1, #2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fefd 	bl	80083e8 <RCCEx_PLL2_Config>
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80075f2:	e003      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	75fb      	strb	r3, [r7, #23]
      break;
 80075f8:	e000      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80075fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007602:	4bad      	ldr	r3, [pc, #692]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007606:	f023 0203 	bic.w	r2, r3, #3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	49aa      	ldr	r1, [pc, #680]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007610:	4313      	orrs	r3, r2
 8007612:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007614:	e001      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 8086 	beq.w	8007734 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007628:	4ba4      	ldr	r3, [pc, #656]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4aa3      	ldr	r2, [pc, #652]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800762e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007632:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007634:	f7fa fdc4 	bl	80021c0 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800763a:	e009      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800763c:	f7fa fdc0 	bl	80021c0 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b64      	cmp	r3, #100	; 0x64
 8007648:	d902      	bls.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	75fb      	strb	r3, [r7, #23]
        break;
 800764e:	e005      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007650:	4b9a      	ldr	r3, [pc, #616]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0ef      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d166      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007662:	4b95      	ldr	r3, [pc, #596]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007664:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800766c:	4053      	eors	r3, r2
 800766e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007672:	2b00      	cmp	r3, #0
 8007674:	d013      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007676:	4b90      	ldr	r3, [pc, #576]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800767e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007680:	4b8d      	ldr	r3, [pc, #564]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007684:	4a8c      	ldr	r2, [pc, #560]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800768a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800768c:	4b8a      	ldr	r3, [pc, #552]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800768e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007690:	4a89      	ldr	r2, [pc, #548]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007696:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007698:	4a87      	ldr	r2, [pc, #540]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a8:	d115      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076aa:	f7fa fd89 	bl	80021c0 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076b0:	e00b      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076b2:	f7fa fd85 	bl	80021c0 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d902      	bls.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	75fb      	strb	r3, [r7, #23]
            break;
 80076c8:	e005      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076ca:	4b7b      	ldr	r3, [pc, #492]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0ed      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d126      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ea:	d10d      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80076ec:	4b72      	ldr	r3, [pc, #456]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076fa:	0919      	lsrs	r1, r3, #4
 80076fc:	4b70      	ldr	r3, [pc, #448]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80076fe:	400b      	ands	r3, r1
 8007700:	496d      	ldr	r1, [pc, #436]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007702:	4313      	orrs	r3, r2
 8007704:	610b      	str	r3, [r1, #16]
 8007706:	e005      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007708:	4b6b      	ldr	r3, [pc, #428]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	4a6a      	ldr	r2, [pc, #424]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800770e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007712:	6113      	str	r3, [r2, #16]
 8007714:	4b68      	ldr	r3, [pc, #416]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800771e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007722:	4965      	ldr	r1, [pc, #404]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007724:	4313      	orrs	r3, r2
 8007726:	670b      	str	r3, [r1, #112]	; 0x70
 8007728:	e004      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	75bb      	strb	r3, [r7, #22]
 800772e:	e001      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d07e      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007744:	2b28      	cmp	r3, #40	; 0x28
 8007746:	d867      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007748:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800774a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774e:	bf00      	nop
 8007750:	0800781f 	.word	0x0800781f
 8007754:	08007819 	.word	0x08007819
 8007758:	08007819 	.word	0x08007819
 800775c:	08007819 	.word	0x08007819
 8007760:	08007819 	.word	0x08007819
 8007764:	08007819 	.word	0x08007819
 8007768:	08007819 	.word	0x08007819
 800776c:	08007819 	.word	0x08007819
 8007770:	080077f5 	.word	0x080077f5
 8007774:	08007819 	.word	0x08007819
 8007778:	08007819 	.word	0x08007819
 800777c:	08007819 	.word	0x08007819
 8007780:	08007819 	.word	0x08007819
 8007784:	08007819 	.word	0x08007819
 8007788:	08007819 	.word	0x08007819
 800778c:	08007819 	.word	0x08007819
 8007790:	08007807 	.word	0x08007807
 8007794:	08007819 	.word	0x08007819
 8007798:	08007819 	.word	0x08007819
 800779c:	08007819 	.word	0x08007819
 80077a0:	08007819 	.word	0x08007819
 80077a4:	08007819 	.word	0x08007819
 80077a8:	08007819 	.word	0x08007819
 80077ac:	08007819 	.word	0x08007819
 80077b0:	0800781f 	.word	0x0800781f
 80077b4:	08007819 	.word	0x08007819
 80077b8:	08007819 	.word	0x08007819
 80077bc:	08007819 	.word	0x08007819
 80077c0:	08007819 	.word	0x08007819
 80077c4:	08007819 	.word	0x08007819
 80077c8:	08007819 	.word	0x08007819
 80077cc:	08007819 	.word	0x08007819
 80077d0:	0800781f 	.word	0x0800781f
 80077d4:	08007819 	.word	0x08007819
 80077d8:	08007819 	.word	0x08007819
 80077dc:	08007819 	.word	0x08007819
 80077e0:	08007819 	.word	0x08007819
 80077e4:	08007819 	.word	0x08007819
 80077e8:	08007819 	.word	0x08007819
 80077ec:	08007819 	.word	0x08007819
 80077f0:	0800781f 	.word	0x0800781f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3304      	adds	r3, #4
 80077f8:	2101      	movs	r1, #1
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fdf4 	bl	80083e8 <RCCEx_PLL2_Config>
 8007800:	4603      	mov	r3, r0
 8007802:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007804:	e00c      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3324      	adds	r3, #36	; 0x24
 800780a:	2101      	movs	r1, #1
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fe9d 	bl	800854c <RCCEx_PLL3_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007816:	e003      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
      break;
 800781c:	e000      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800781e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007820:	7dfb      	ldrb	r3, [r7, #23]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d109      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007826:	4b24      	ldr	r3, [pc, #144]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007832:	4921      	ldr	r1, [pc, #132]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007834:	4313      	orrs	r3, r2
 8007836:	654b      	str	r3, [r1, #84]	; 0x54
 8007838:	e001      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d03e      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800784e:	2b05      	cmp	r3, #5
 8007850:	d820      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007852:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	0800789b 	.word	0x0800789b
 800785c:	08007871 	.word	0x08007871
 8007860:	08007883 	.word	0x08007883
 8007864:	0800789b 	.word	0x0800789b
 8007868:	0800789b 	.word	0x0800789b
 800786c:	0800789b 	.word	0x0800789b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3304      	adds	r3, #4
 8007874:	2101      	movs	r1, #1
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fdb6 	bl	80083e8 <RCCEx_PLL2_Config>
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007880:	e00c      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3324      	adds	r3, #36	; 0x24
 8007886:	2101      	movs	r1, #1
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fe5f 	bl	800854c <RCCEx_PLL3_Config>
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007892:	e003      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	75fb      	strb	r3, [r7, #23]
      break;
 8007898:	e000      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800789a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d110      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a6:	f023 0207 	bic.w	r2, r3, #7
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ae:	4902      	ldr	r1, [pc, #8]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	654b      	str	r3, [r1, #84]	; 0x54
 80078b4:	e008      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80078b6:	bf00      	nop
 80078b8:	58024400 	.word	0x58024400
 80078bc:	58024800 	.word	0x58024800
 80078c0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d039      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078da:	2b05      	cmp	r3, #5
 80078dc:	d820      	bhi.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80078de:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007927 	.word	0x08007927
 80078e8:	080078fd 	.word	0x080078fd
 80078ec:	0800790f 	.word	0x0800790f
 80078f0:	08007927 	.word	0x08007927
 80078f4:	08007927 	.word	0x08007927
 80078f8:	08007927 	.word	0x08007927
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	2101      	movs	r1, #1
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fd70 	bl	80083e8 <RCCEx_PLL2_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800790c:	e00c      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3324      	adds	r3, #36	; 0x24
 8007912:	2101      	movs	r1, #1
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fe19 	bl	800854c <RCCEx_PLL3_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800791e:	e003      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	75fb      	strb	r3, [r7, #23]
      break;
 8007924:	e000      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10a      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800792e:	4bb7      	ldr	r3, [pc, #732]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007932:	f023 0207 	bic.w	r2, r3, #7
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793c:	49b3      	ldr	r1, [pc, #716]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800793e:	4313      	orrs	r3, r2
 8007940:	658b      	str	r3, [r1, #88]	; 0x58
 8007942:	e001      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b00      	cmp	r3, #0
 8007952:	d04b      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800795a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800795e:	d02e      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007964:	d828      	bhi.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800796a:	d02a      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800796c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007970:	d822      	bhi.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007972:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007976:	d026      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800797c:	d81c      	bhi.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800797e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007982:	d010      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007988:	d816      	bhi.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01d      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800798e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007992:	d111      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3304      	adds	r3, #4
 8007998:	2100      	movs	r1, #0
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fd24 	bl	80083e8 <RCCEx_PLL2_Config>
 80079a0:	4603      	mov	r3, r0
 80079a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80079a4:	e012      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3324      	adds	r3, #36	; 0x24
 80079aa:	2102      	movs	r1, #2
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 fdcd 	bl	800854c <RCCEx_PLL3_Config>
 80079b2:	4603      	mov	r3, r0
 80079b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80079b6:	e009      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	75fb      	strb	r3, [r7, #23]
      break;
 80079bc:	e006      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80079be:	bf00      	nop
 80079c0:	e004      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80079c2:	bf00      	nop
 80079c4:	e002      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80079c6:	bf00      	nop
 80079c8:	e000      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80079ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079d2:	4b8e      	ldr	r3, [pc, #568]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e0:	498a      	ldr	r1, [pc, #552]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	654b      	str	r3, [r1, #84]	; 0x54
 80079e6:	e001      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d04b      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a02:	d02e      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007a04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a08:	d828      	bhi.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0e:	d02a      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a14:	d822      	bhi.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a1a:	d026      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a20:	d81c      	bhi.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a26:	d010      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a2c:	d816      	bhi.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01d      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a36:	d111      	bne.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fcd2 	bl	80083e8 <RCCEx_PLL2_Config>
 8007a44:	4603      	mov	r3, r0
 8007a46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007a48:	e012      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	3324      	adds	r3, #36	; 0x24
 8007a4e:	2102      	movs	r1, #2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fd7b 	bl	800854c <RCCEx_PLL3_Config>
 8007a56:	4603      	mov	r3, r0
 8007a58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007a5a:	e009      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a60:	e006      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a62:	bf00      	nop
 8007a64:	e004      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a66:	bf00      	nop
 8007a68:	e002      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a6a:	bf00      	nop
 8007a6c:	e000      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a76:	4b65      	ldr	r3, [pc, #404]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a84:	4961      	ldr	r1, [pc, #388]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	658b      	str	r3, [r1, #88]	; 0x58
 8007a8a:	e001      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d04b      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007aa2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007aa6:	d02e      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007aa8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007aac:	d828      	bhi.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab2:	d02a      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab8:	d822      	bhi.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007aba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007abe:	d026      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007ac0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007ac4:	d81c      	bhi.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aca:	d010      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ad0:	d816      	bhi.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d01d      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ada:	d111      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fc80 	bl	80083e8 <RCCEx_PLL2_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007aec:	e012      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3324      	adds	r3, #36	; 0x24
 8007af2:	2102      	movs	r1, #2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fd29 	bl	800854c <RCCEx_PLL3_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007afe:	e009      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	75fb      	strb	r3, [r7, #23]
      break;
 8007b04:	e006      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b06:	bf00      	nop
 8007b08:	e004      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b0a:	bf00      	nop
 8007b0c:	e002      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b0e:	bf00      	nop
 8007b10:	e000      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b1a:	4b3c      	ldr	r3, [pc, #240]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b28:	4938      	ldr	r1, [pc, #224]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8007b2e:	e001      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01a      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b4a:	d10a      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3324      	adds	r3, #36	; 0x24
 8007b50:	2102      	movs	r1, #2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fcfa 	bl	800854c <RCCEx_PLL3_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b62:	4b2a      	ldr	r3, [pc, #168]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b70:	4926      	ldr	r1, [pc, #152]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0310 	and.w	r3, r3, #16
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d01a      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8c:	d10a      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3324      	adds	r3, #36	; 0x24
 8007b92:	2102      	movs	r1, #2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 fcd9 	bl	800854c <RCCEx_PLL3_Config>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ba4:	4b19      	ldr	r3, [pc, #100]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bb2:	4916      	ldr	r1, [pc, #88]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d036      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bce:	d01f      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bd4:	d817      	bhi.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bde:	d009      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007be0:	e011      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3304      	adds	r3, #4
 8007be6:	2100      	movs	r1, #0
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fbfd 	bl	80083e8 <RCCEx_PLL2_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007bf2:	e00e      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3324      	adds	r3, #36	; 0x24
 8007bf8:	2102      	movs	r1, #2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fca6 	bl	800854c <RCCEx_PLL3_Config>
 8007c00:	4603      	mov	r3, r0
 8007c02:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c04:	e005      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	75fb      	strb	r3, [r7, #23]
      break;
 8007c0a:	e002      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007c0c:	58024400 	.word	0x58024400
      break;
 8007c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c18:	4b93      	ldr	r3, [pc, #588]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c26:	4990      	ldr	r1, [pc, #576]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	658b      	str	r3, [r1, #88]	; 0x58
 8007c2c:	e001      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d033      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c48:	d01c      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007c4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c4e:	d816      	bhi.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c54:	d003      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c5a:	d007      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007c5c:	e00f      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c5e:	4b82      	ldr	r3, [pc, #520]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	4a81      	ldr	r2, [pc, #516]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c6a:	e00c      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3324      	adds	r3, #36	; 0x24
 8007c70:	2101      	movs	r1, #1
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fc6a 	bl	800854c <RCCEx_PLL3_Config>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c7c:	e003      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	75fb      	strb	r3, [r7, #23]
      break;
 8007c82:	e000      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c8c:	4b76      	ldr	r3, [pc, #472]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c9a:	4973      	ldr	r1, [pc, #460]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	654b      	str	r3, [r1, #84]	; 0x54
 8007ca0:	e001      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d029      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cbe:	d007      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007cc0:	e00f      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc2:	4b69      	ldr	r3, [pc, #420]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	4a68      	ldr	r2, [pc, #416]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007cce:	e00b      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	2102      	movs	r1, #2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fb86 	bl	80083e8 <RCCEx_PLL2_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ce0:	e002      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007cee:	4b5e      	ldr	r3, [pc, #376]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfa:	495b      	ldr	r1, [pc, #364]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d00:	e001      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
 8007d04:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3324      	adds	r3, #36	; 0x24
 8007d16:	2102      	movs	r1, #2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fc17 	bl	800854c <RCCEx_PLL3_Config>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d030      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d3c:	d017      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d42:	d811      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d48:	d013      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d4e:	d80b      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d010      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d58:	d106      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d5a:	4b43      	ldr	r3, [pc, #268]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	4a42      	ldr	r2, [pc, #264]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007d66:	e007      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6c:	e004      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d6e:	bf00      	nop
 8007d70:	e002      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d72:	bf00      	nop
 8007d74:	e000      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d7e:	4b3a      	ldr	r3, [pc, #232]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d8a:	4937      	ldr	r1, [pc, #220]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	654b      	str	r3, [r1, #84]	; 0x54
 8007d90:	e001      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d008      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007da2:	4b31      	ldr	r3, [pc, #196]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dae:	492e      	ldr	r1, [pc, #184]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d009      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007dc0:	4b29      	ldr	r3, [pc, #164]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007dce:	4926      	ldr	r1, [pc, #152]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d008      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007de0:	4b21      	ldr	r3, [pc, #132]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dec:	491e      	ldr	r1, [pc, #120]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00d      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007dfe:	4b1a      	ldr	r3, [pc, #104]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	4a19      	ldr	r2, [pc, #100]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e08:	6113      	str	r3, [r2, #16]
 8007e0a:	4b17      	ldr	r3, [pc, #92]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e0c:	691a      	ldr	r2, [r3, #16]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e14:	4914      	ldr	r1, [pc, #80]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	da08      	bge.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e22:	4b11      	ldr	r3, [pc, #68]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2e:	490e      	ldr	r1, [pc, #56]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e40:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e4e:	4906      	ldr	r1, [pc, #24]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007e54:	7dbb      	ldrb	r3, [r7, #22]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e000      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	58024400 	.word	0x58024400

08007e6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007e70:	f7ff f860 	bl	8006f34 <HAL_RCC_GetHCLKFreq>
 8007e74:	4602      	mov	r2, r0
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	091b      	lsrs	r3, r3, #4
 8007e7c:	f003 0307 	and.w	r3, r3, #7
 8007e80:	4904      	ldr	r1, [pc, #16]	; (8007e94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007e82:	5ccb      	ldrb	r3, [r1, r3]
 8007e84:	f003 031f 	and.w	r3, r3, #31
 8007e88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	58024400 	.word	0x58024400
 8007e94:	0800cf04 	.word	0x0800cf04

08007e98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b089      	sub	sp, #36	; 0x24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ea0:	4ba1      	ldr	r3, [pc, #644]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007eaa:	4b9f      	ldr	r3, [pc, #636]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	0b1b      	lsrs	r3, r3, #12
 8007eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eb4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007eb6:	4b9c      	ldr	r3, [pc, #624]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	091b      	lsrs	r3, r3, #4
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007ec2:	4b99      	ldr	r3, [pc, #612]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec6:	08db      	lsrs	r3, r3, #3
 8007ec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8111 	beq.w	8008108 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	f000 8083 	beq.w	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	f200 80a1 	bhi.w	8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d056      	beq.n	8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f02:	e099      	b.n	8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f04:	4b88      	ldr	r3, [pc, #544]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d02d      	beq.n	8007f6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f10:	4b85      	ldr	r3, [pc, #532]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	08db      	lsrs	r3, r3, #3
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	4a84      	ldr	r2, [pc, #528]	; (800812c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f20:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f3a:	4b7b      	ldr	r3, [pc, #492]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f66:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f6a:	e087      	b.n	800807c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7e:	4b6a      	ldr	r3, [pc, #424]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007faa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fae:	e065      	b.n	800807c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fc2:	4b59      	ldr	r3, [pc, #356]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ff2:	e043      	b.n	800807c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800813c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008006:	4b48      	ldr	r3, [pc, #288]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008016:	ed97 6a03 	vldr	s12, [r7, #12]
 800801a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800801e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800802a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800802e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008036:	e021      	b.n	800807c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800804a:	4b37      	ldr	r3, [pc, #220]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800805a:	ed97 6a03 	vldr	s12, [r7, #12]
 800805e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800806a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800807a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800807c:	4b2a      	ldr	r3, [pc, #168]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	0a5b      	lsrs	r3, r3, #9
 8008082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008096:	edd7 6a07 	vldr	s13, [r7, #28]
 800809a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800809e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080a2:	ee17 2a90 	vmov	r2, s15
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80080aa:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ae:	0c1b      	lsrs	r3, r3, #16
 80080b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080b4:	ee07 3a90 	vmov	s15, r3
 80080b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080d0:	ee17 2a90 	vmov	r2, s15
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80080d8:	4b13      	ldr	r3, [pc, #76]	; (8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	0e1b      	lsrs	r3, r3, #24
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080fe:	ee17 2a90 	vmov	r2, s15
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008106:	e008      	b.n	800811a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	609a      	str	r2, [r3, #8]
}
 800811a:	bf00      	nop
 800811c:	3724      	adds	r7, #36	; 0x24
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	58024400 	.word	0x58024400
 800812c:	03d09000 	.word	0x03d09000
 8008130:	46000000 	.word	0x46000000
 8008134:	4c742400 	.word	0x4c742400
 8008138:	4a742400 	.word	0x4a742400
 800813c:	4af42400 	.word	0x4af42400

08008140 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008140:	b480      	push	{r7}
 8008142:	b089      	sub	sp, #36	; 0x24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008148:	4ba1      	ldr	r3, [pc, #644]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	f003 0303 	and.w	r3, r3, #3
 8008150:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008152:	4b9f      	ldr	r3, [pc, #636]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008156:	0d1b      	lsrs	r3, r3, #20
 8008158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800815c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800815e:	4b9c      	ldr	r3, [pc, #624]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800816a:	4b99      	ldr	r3, [pc, #612]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800816c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800816e:	08db      	lsrs	r3, r3, #3
 8008170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	fb02 f303 	mul.w	r3, r2, r3
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008182:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8111 	beq.w	80083b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b02      	cmp	r3, #2
 8008192:	f000 8083 	beq.w	800829c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	2b02      	cmp	r3, #2
 800819a:	f200 80a1 	bhi.w	80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d056      	beq.n	8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80081aa:	e099      	b.n	80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081ac:	4b88      	ldr	r3, [pc, #544]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0320 	and.w	r3, r3, #32
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d02d      	beq.n	8008214 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081b8:	4b85      	ldr	r3, [pc, #532]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	08db      	lsrs	r3, r3, #3
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	4a84      	ldr	r2, [pc, #528]	; (80083d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80081c4:	fa22 f303 	lsr.w	r3, r2, r3
 80081c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	ee07 3a90 	vmov	s15, r3
 80081d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e2:	4b7b      	ldr	r3, [pc, #492]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008212:	e087      	b.n	8008324 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008226:	4b6a      	ldr	r3, [pc, #424]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008236:	ed97 6a03 	vldr	s12, [r7, #12]
 800823a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800823e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800824a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008256:	e065      	b.n	8008324 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008262:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800826a:	4b59      	ldr	r3, [pc, #356]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827a:	ed97 6a03 	vldr	s12, [r7, #12]
 800827e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800828a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800828e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800829a:	e043      	b.n	8008324 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80083e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80082aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ae:	4b48      	ldr	r3, [pc, #288]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082be:	ed97 6a03 	vldr	s12, [r7, #12]
 80082c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082de:	e021      	b.n	8008324 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f2:	4b37      	ldr	r3, [pc, #220]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008302:	ed97 6a03 	vldr	s12, [r7, #12]
 8008306:	eddf 5a34 	vldr	s11, [pc, #208]	; 80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800830a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008322:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008324:	4b2a      	ldr	r3, [pc, #168]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008328:	0a5b      	lsrs	r3, r3, #9
 800832a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800833a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800833e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800834a:	ee17 2a90 	vmov	r2, s15
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008352:	4b1f      	ldr	r3, [pc, #124]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	0c1b      	lsrs	r3, r3, #16
 8008358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835c:	ee07 3a90 	vmov	s15, r3
 8008360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008368:	ee37 7a87 	vadd.f32	s14, s15, s14
 800836c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008378:	ee17 2a90 	vmov	r2, s15
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008380:	4b13      	ldr	r3, [pc, #76]	; (80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008384:	0e1b      	lsrs	r3, r3, #24
 8008386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800839a:	edd7 6a07 	vldr	s13, [r7, #28]
 800839e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083a6:	ee17 2a90 	vmov	r2, s15
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80083ae:	e008      	b.n	80083c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	609a      	str	r2, [r3, #8]
}
 80083c2:	bf00      	nop
 80083c4:	3724      	adds	r7, #36	; 0x24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	58024400 	.word	0x58024400
 80083d4:	03d09000 	.word	0x03d09000
 80083d8:	46000000 	.word	0x46000000
 80083dc:	4c742400 	.word	0x4c742400
 80083e0:	4a742400 	.word	0x4a742400
 80083e4:	4af42400 	.word	0x4af42400

080083e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083f6:	4b53      	ldr	r3, [pc, #332]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80083f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d101      	bne.n	8008406 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e099      	b.n	800853a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008406:	4b4f      	ldr	r3, [pc, #316]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a4e      	ldr	r2, [pc, #312]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 800840c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008412:	f7f9 fed5 	bl	80021c0 <HAL_GetTick>
 8008416:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008418:	e008      	b.n	800842c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800841a:	f7f9 fed1 	bl	80021c0 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	2b02      	cmp	r3, #2
 8008426:	d901      	bls.n	800842c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e086      	b.n	800853a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800842c:	4b45      	ldr	r3, [pc, #276]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1f0      	bne.n	800841a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008438:	4b42      	ldr	r3, [pc, #264]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	031b      	lsls	r3, r3, #12
 8008446:	493f      	ldr	r1, [pc, #252]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 8008448:	4313      	orrs	r3, r2
 800844a:	628b      	str	r3, [r1, #40]	; 0x28
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	3b01      	subs	r3, #1
 8008452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	3b01      	subs	r3, #1
 800845c:	025b      	lsls	r3, r3, #9
 800845e:	b29b      	uxth	r3, r3
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	3b01      	subs	r3, #1
 8008468:	041b      	lsls	r3, r3, #16
 800846a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	3b01      	subs	r3, #1
 8008476:	061b      	lsls	r3, r3, #24
 8008478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800847c:	4931      	ldr	r1, [pc, #196]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 800847e:	4313      	orrs	r3, r2
 8008480:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008482:	4b30      	ldr	r3, [pc, #192]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 8008484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	492d      	ldr	r1, [pc, #180]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 8008490:	4313      	orrs	r3, r2
 8008492:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008494:	4b2b      	ldr	r3, [pc, #172]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	f023 0220 	bic.w	r2, r3, #32
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	4928      	ldr	r1, [pc, #160]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80084a6:	4b27      	ldr	r3, [pc, #156]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084aa:	4a26      	ldr	r2, [pc, #152]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084ac:	f023 0310 	bic.w	r3, r3, #16
 80084b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80084b2:	4b24      	ldr	r3, [pc, #144]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084b6:	4b24      	ldr	r3, [pc, #144]	; (8008548 <RCCEx_PLL2_Config+0x160>)
 80084b8:	4013      	ands	r3, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	69d2      	ldr	r2, [r2, #28]
 80084be:	00d2      	lsls	r2, r2, #3
 80084c0:	4920      	ldr	r1, [pc, #128]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80084c6:	4b1f      	ldr	r3, [pc, #124]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ca:	4a1e      	ldr	r2, [pc, #120]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084cc:	f043 0310 	orr.w	r3, r3, #16
 80084d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d106      	bne.n	80084e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80084d8:	4b1a      	ldr	r3, [pc, #104]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	4a19      	ldr	r2, [pc, #100]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084e4:	e00f      	b.n	8008506 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d106      	bne.n	80084fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80084ec:	4b15      	ldr	r3, [pc, #84]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	4a14      	ldr	r2, [pc, #80]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084f8:	e005      	b.n	8008506 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80084fa:	4b12      	ldr	r3, [pc, #72]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 80084fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fe:	4a11      	ldr	r2, [pc, #68]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 8008500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008504:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008506:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a0e      	ldr	r2, [pc, #56]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 800850c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008512:	f7f9 fe55 	bl	80021c0 <HAL_GetTick>
 8008516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008518:	e008      	b.n	800852c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800851a:	f7f9 fe51 	bl	80021c0 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d901      	bls.n	800852c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e006      	b.n	800853a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <RCCEx_PLL2_Config+0x15c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0f0      	beq.n	800851a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	58024400 	.word	0x58024400
 8008548:	ffff0007 	.word	0xffff0007

0800854c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800855a:	4b53      	ldr	r3, [pc, #332]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 800855c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d101      	bne.n	800856a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e099      	b.n	800869e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800856a:	4b4f      	ldr	r3, [pc, #316]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a4e      	ldr	r2, [pc, #312]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008576:	f7f9 fe23 	bl	80021c0 <HAL_GetTick>
 800857a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800857c:	e008      	b.n	8008590 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800857e:	f7f9 fe1f 	bl	80021c0 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d901      	bls.n	8008590 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e086      	b.n	800869e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008590:	4b45      	ldr	r3, [pc, #276]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f0      	bne.n	800857e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800859c:	4b42      	ldr	r3, [pc, #264]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	051b      	lsls	r3, r3, #20
 80085aa:	493f      	ldr	r1, [pc, #252]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	628b      	str	r3, [r1, #40]	; 0x28
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	3b01      	subs	r3, #1
 80085c0:	025b      	lsls	r3, r3, #9
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	431a      	orrs	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	3b01      	subs	r3, #1
 80085da:	061b      	lsls	r3, r3, #24
 80085dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085e0:	4931      	ldr	r1, [pc, #196]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80085e6:	4b30      	ldr	r3, [pc, #192]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 80085e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	492d      	ldr	r1, [pc, #180]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085f8:	4b2b      	ldr	r3, [pc, #172]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	4928      	ldr	r1, [pc, #160]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008606:	4313      	orrs	r3, r2
 8008608:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800860a:	4b27      	ldr	r3, [pc, #156]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	4a26      	ldr	r2, [pc, #152]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008616:	4b24      	ldr	r3, [pc, #144]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800861a:	4b24      	ldr	r3, [pc, #144]	; (80086ac <RCCEx_PLL3_Config+0x160>)
 800861c:	4013      	ands	r3, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	69d2      	ldr	r2, [r2, #28]
 8008622:	00d2      	lsls	r2, r2, #3
 8008624:	4920      	ldr	r1, [pc, #128]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008626:	4313      	orrs	r3, r2
 8008628:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800862a:	4b1f      	ldr	r3, [pc, #124]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	4a1e      	ldr	r2, [pc, #120]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d106      	bne.n	800864a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800863c:	4b1a      	ldr	r3, [pc, #104]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	4a19      	ldr	r2, [pc, #100]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008642:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008648:	e00f      	b.n	800866a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d106      	bne.n	800865e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008650:	4b15      	ldr	r3, [pc, #84]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	4a14      	ldr	r2, [pc, #80]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008656:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800865a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800865c:	e005      	b.n	800866a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800865e:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	4a11      	ldr	r2, [pc, #68]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008668:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800866a:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a0e      	ldr	r2, [pc, #56]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008676:	f7f9 fda3 	bl	80021c0 <HAL_GetTick>
 800867a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800867c:	e008      	b.n	8008690 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800867e:	f7f9 fd9f 	bl	80021c0 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b02      	cmp	r3, #2
 800868a:	d901      	bls.n	8008690 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e006      	b.n	800869e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <RCCEx_PLL3_Config+0x15c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0f0      	beq.n	800867e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800869c:	7bfb      	ldrb	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	58024400 	.word	0x58024400
 80086ac:	ffff0007 	.word	0xffff0007

080086b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d067      	beq.n	8008792 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7f9 f9a6 	bl	8001a28 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2202      	movs	r2, #2
 80086e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	22ca      	movs	r2, #202	; 0xca
 80086ea:	625a      	str	r2, [r3, #36]	; 0x24
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2253      	movs	r2, #83	; 0x53
 80086f2:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fbd1 	bl	8008e9c <RTC_EnterInitMode>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d13b      	bne.n	800877c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6899      	ldr	r1, [r3, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b23      	ldr	r3, [pc, #140]	; (800879c <HAL_RTC_Init+0xec>)
 8008710:	400b      	ands	r3, r1
 8008712:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6899      	ldr	r1, [r3, #8]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	431a      	orrs	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	0419      	lsls	r1, r3, #16
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68da      	ldr	r2, [r3, #12]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fbd9 	bl	8008efc <RTC_ExitInitMode>
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d113      	bne.n	800877c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0203 	bic.w	r2, r2, #3
 8008762:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69da      	ldr	r2, [r3, #28]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	22ff      	movs	r2, #255	; 0xff
 8008782:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d103      	bne.n	8008792 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	ff8fffbf 	.word	0xff8fffbf

080087a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80087a0:	b590      	push	{r4, r7, lr}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <HAL_RTC_SetTime+0x1a>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e089      	b.n	80088ce <HAL_RTC_SetTime+0x12e>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2202      	movs	r2, #2
 80087c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	22ca      	movs	r2, #202	; 0xca
 80087d0:	625a      	str	r2, [r3, #36]	; 0x24
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2253      	movs	r2, #83	; 0x53
 80087d8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 fb5e 	bl	8008e9c <RTC_EnterInitMode>
 80087e0:	4603      	mov	r3, r0
 80087e2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80087e4:	7cfb      	ldrb	r3, [r7, #19]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d161      	bne.n	80088ae <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d126      	bne.n	800883e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	4618      	mov	r0, r3
 800880a:	f000 fbb5 	bl	8008f78 <RTC_ByteToBcd2>
 800880e:	4603      	mov	r3, r0
 8008810:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fbae 	bl	8008f78 <RTC_ByteToBcd2>
 800881c:	4603      	mov	r3, r0
 800881e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008820:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	789b      	ldrb	r3, [r3, #2]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fba6 	bl	8008f78 <RTC_ByteToBcd2>
 800882c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800882e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	78db      	ldrb	r3, [r3, #3]
 8008836:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008838:	4313      	orrs	r3, r2
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	e018      	b.n	8008870 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008848:	2b00      	cmp	r3, #0
 800884a:	d102      	bne.n	8008852 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2200      	movs	r2, #0
 8008850:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800885e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008864:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	78db      	ldrb	r3, [r3, #3]
 800886a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800886c:	4313      	orrs	r3, r2
 800886e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	6979      	ldr	r1, [r7, #20]
 8008876:	4b18      	ldr	r3, [pc, #96]	; (80088d8 <HAL_RTC_SetTime+0x138>)
 8008878:	400b      	ands	r3, r1
 800887a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800888a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6899      	ldr	r1, [r3, #8]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	431a      	orrs	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 fb29 	bl	8008efc <RTC_ExitInitMode>
 80088aa:	4603      	mov	r3, r0
 80088ac:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	22ff      	movs	r2, #255	; 0xff
 80088b4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80088b6:	7cfb      	ldrb	r3, [r7, #19]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d103      	bne.n	80088c4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80088cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd90      	pop	{r4, r7, pc}
 80088d6:	bf00      	nop
 80088d8:	007f7f7f 	.word	0x007f7f7f

080088dc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	4b22      	ldr	r3, [pc, #136]	; (8008990 <HAL_RTC_GetTime+0xb4>)
 8008908:	4013      	ands	r3, r2
 800890a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	0c1b      	lsrs	r3, r3, #16
 8008910:	b2db      	uxtb	r3, r3
 8008912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008916:	b2da      	uxtb	r2, r3
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	0a1b      	lsrs	r3, r3, #8
 8008920:	b2db      	uxtb	r3, r3
 8008922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008926:	b2da      	uxtb	r2, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008934:	b2da      	uxtb	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	0d9b      	lsrs	r3, r3, #22
 800893e:	b2db      	uxtb	r3, r3
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	b2da      	uxtb	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d11a      	bne.n	8008986 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fb2f 	bl	8008fb8 <RTC_Bcd2ToByte>
 800895a:	4603      	mov	r3, r0
 800895c:	461a      	mov	r2, r3
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	785b      	ldrb	r3, [r3, #1]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fb26 	bl	8008fb8 <RTC_Bcd2ToByte>
 800896c:	4603      	mov	r3, r0
 800896e:	461a      	mov	r2, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	789b      	ldrb	r3, [r3, #2]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fb1d 	bl	8008fb8 <RTC_Bcd2ToByte>
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	007f7f7f 	.word	0x007f7f7f

08008994 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008994:	b590      	push	{r4, r7, lr}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d101      	bne.n	80089ae <HAL_RTC_SetDate+0x1a>
 80089aa:	2302      	movs	r3, #2
 80089ac:	e073      	b.n	8008a96 <HAL_RTC_SetDate+0x102>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2202      	movs	r2, #2
 80089ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10e      	bne.n	80089e2 <HAL_RTC_SetDate+0x4e>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	785b      	ldrb	r3, [r3, #1]
 80089c8:	f003 0310 	and.w	r3, r3, #16
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d008      	beq.n	80089e2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	785b      	ldrb	r3, [r3, #1]
 80089d4:	f023 0310 	bic.w	r3, r3, #16
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	330a      	adds	r3, #10
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d11c      	bne.n	8008a22 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	78db      	ldrb	r3, [r3, #3]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fac3 	bl	8008f78 <RTC_ByteToBcd2>
 80089f2:	4603      	mov	r3, r0
 80089f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fabc 	bl	8008f78 <RTC_ByteToBcd2>
 8008a00:	4603      	mov	r3, r0
 8008a02:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008a04:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	789b      	ldrb	r3, [r3, #2]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fab4 	bl	8008f78 <RTC_ByteToBcd2>
 8008a10:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008a12:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	e00e      	b.n	8008a40 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	78db      	ldrb	r3, [r3, #3]
 8008a26:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008a2e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008a34:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	22ca      	movs	r2, #202	; 0xca
 8008a46:	625a      	str	r2, [r3, #36]	; 0x24
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2253      	movs	r2, #83	; 0x53
 8008a4e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 fa23 	bl	8008e9c <RTC_EnterInitMode>
 8008a56:	4603      	mov	r3, r0
 8008a58:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008a5a:	7cfb      	ldrb	r3, [r7, #19]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	6979      	ldr	r1, [r7, #20]
 8008a66:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <HAL_RTC_SetDate+0x10c>)
 8008a68:	400b      	ands	r3, r1
 8008a6a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 fa45 	bl	8008efc <RTC_ExitInitMode>
 8008a72:	4603      	mov	r3, r0
 8008a74:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	22ff      	movs	r2, #255	; 0xff
 8008a7c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008a7e:	7cfb      	ldrb	r3, [r7, #19]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d103      	bne.n	8008a8c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008a94:	7cfb      	ldrb	r3, [r7, #19]


}
 8008a96:	4618      	mov	r0, r3
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd90      	pop	{r4, r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	00ffff3f 	.word	0x00ffff3f

08008aa4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <HAL_RTC_GetDate+0x98>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	0c1b      	lsrs	r3, r3, #16
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	0a1b      	lsrs	r3, r3, #8
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f003 031f 	and.w	r3, r3, #31
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	0b5b      	lsrs	r3, r3, #13
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d11a      	bne.n	8008b30 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	78db      	ldrb	r3, [r3, #3]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fa5a 	bl	8008fb8 <RTC_Bcd2ToByte>
 8008b04:	4603      	mov	r3, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fa51 	bl	8008fb8 <RTC_Bcd2ToByte>
 8008b16:	4603      	mov	r3, r0
 8008b18:	461a      	mov	r2, r3
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	789b      	ldrb	r3, [r3, #2]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 fa48 	bl	8008fb8 <RTC_Bcd2ToByte>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	00ffff3f 	.word	0x00ffff3f

08008b40 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008b40:	b590      	push	{r4, r7, lr}
 8008b42:	b089      	sub	sp, #36	; 0x24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d101      	bne.n	8008b5a <HAL_RTC_SetAlarm_IT+0x1a>
 8008b56:	2302      	movs	r3, #2
 8008b58:	e123      	b.n	8008da2 <HAL_RTC_SetAlarm_IT+0x262>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2202      	movs	r2, #2
 8008b66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d137      	bne.n	8008be0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2200      	movs	r2, #0
 8008b82:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 f9f5 	bl	8008f78 <RTC_ByteToBcd2>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 f9ee 	bl	8008f78 <RTC_ByteToBcd2>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008ba0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	789b      	ldrb	r3, [r3, #2]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f9e6 	bl	8008f78 <RTC_ByteToBcd2>
 8008bac:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008bae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	78db      	ldrb	r3, [r3, #3]
 8008bb6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008bb8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f9d8 	bl	8008f78 <RTC_ByteToBcd2>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008bcc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008bd4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	61fb      	str	r3, [r7, #28]
 8008bde:	e023      	b.n	8008c28 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d102      	bne.n	8008bf4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	785b      	ldrb	r3, [r3, #1]
 8008bfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008c00:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008c06:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	78db      	ldrb	r3, [r3, #3]
 8008c0c:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008c0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c16:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008c18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008c1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008c24:	4313      	orrs	r3, r2
 8008c26:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	22ca      	movs	r2, #202	; 0xca
 8008c3a:	625a      	str	r2, [r3, #36]	; 0x24
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2253      	movs	r2, #83	; 0x53
 8008c42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4c:	d14a      	bne.n	8008ce4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689a      	ldr	r2, [r3, #8]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c5c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008c6e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008c70:	f7f9 faa6 	bl	80021c0 <HAL_GetTick>
 8008c74:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008c76:	e015      	b.n	8008ca4 <HAL_RTC_SetAlarm_IT+0x164>
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c78:	f7f9 faa2 	bl	80021c0 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c86:	d90d      	bls.n	8008ca4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	22ff      	movs	r2, #255	; 0xff
 8008c8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2203      	movs	r2, #3
 8008c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e07e      	b.n	8008da2 <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0e2      	beq.n	8008c78 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cd0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ce0:	609a      	str	r2, [r3, #8]
 8008ce2:	e049      	b.n	8008d78 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008cf2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008d04:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008d06:	f7f9 fa5b 	bl	80021c0 <HAL_GetTick>
 8008d0a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008d0c:	e015      	b.n	8008d3a <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d0e:	f7f9 fa57 	bl	80021c0 <HAL_GetTick>
 8008d12:	4602      	mov	r2, r0
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d1c:	d90d      	bls.n	8008d3a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	22ff      	movs	r2, #255	; 0xff
 8008d24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2203      	movs	r2, #3
 8008d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e033      	b.n	8008da2 <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0e2      	beq.n	8008d0e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d66:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689a      	ldr	r2, [r3, #8]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d76:	609a      	str	r2, [r3, #8]
#if !defined(DUAL_CORE)
  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d86:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	22ff      	movs	r2, #255	; 0xff
 8008d8e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3724      	adds	r7, #36	; 0x24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd90      	pop	{r4, r7, pc}
	...

08008dac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
#if defined(DUAL_CORE)
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8008db4:	f7f9 fb64 	bl	8002480 <HAL_GetCurrentCPUID>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d104      	bne.n	8008dc8 <HAL_RTC_AlarmIRQHandler+0x1c>
  {
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008dbe:	4b22      	ldr	r3, [pc, #136]	; (8008e48 <HAL_RTC_AlarmIRQHandler+0x9c>)
 8008dc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008dc4:	609a      	str	r2, [r3, #8]
 8008dc6:	e003      	b.n	8008dd0 <HAL_RTC_AlarmIRQHandler+0x24>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
 8008dc8:	4b20      	ldr	r3, [pc, #128]	; (8008e4c <HAL_RTC_AlarmIRQHandler+0xa0>)
 8008dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008dce:	609a      	str	r2, [r3, #8]
  }
#endif /* RTC_MISR_ALRBMF */

#if defined(RTC_ISR_ALRAF)
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d012      	beq.n	8008e04 <HAL_RTC_AlarmIRQHandler+0x58>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00b      	beq.n	8008e04 <HAL_RTC_AlarmIRQHandler+0x58>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008dfc:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7f8 fcf8 	bl	80017f4 <HAL_RTC_AlarmAEventCallback>
  }
#endif /* RTC_ISR_ALRAF */

#if defined(RTC_ISR_ALRBF)
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d012      	beq.n	8008e38 <HAL_RTC_AlarmIRQHandler+0x8c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00b      	beq.n	8008e38 <HAL_RTC_AlarmIRQHandler+0x8c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008e30:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f8da 	bl	8008fec <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	58000080 	.word	0x58000080
 8008e4c:	580000c0 	.word	0x580000c0

08008e50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e66:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008e68:	f7f9 f9aa 	bl	80021c0 <HAL_GetTick>
 8008e6c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e6e:	e009      	b.n	8008e84 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e70:	f7f9 f9a6 	bl	80021c0 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e7e:	d901      	bls.n	8008e84 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e007      	b.n	8008e94 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0ee      	beq.n	8008e70 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d11d      	bne.n	8008ef2 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f04f 32ff 	mov.w	r2, #4294967295
 8008ebe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008ec0:	f7f9 f97e 	bl	80021c0 <HAL_GetTick>
 8008ec4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008ec6:	e00d      	b.n	8008ee4 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008ec8:	f7f9 f97a 	bl	80021c0 <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ed6:	d905      	bls.n	8008ee4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2203      	movs	r2, #3
 8008ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0ea      	beq.n	8008ec8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008f08:	4b1a      	ldr	r3, [pc, #104]	; (8008f74 <RTC_ExitInitMode+0x78>)
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	4a19      	ldr	r2, [pc, #100]	; (8008f74 <RTC_ExitInitMode+0x78>)
 8008f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f12:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008f14:	4b17      	ldr	r3, [pc, #92]	; (8008f74 <RTC_ExitInitMode+0x78>)
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10c      	bne.n	8008f3a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff ff95 	bl	8008e50 <HAL_RTC_WaitForSynchro>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01e      	beq.n	8008f6a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2203      	movs	r2, #3
 8008f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	73fb      	strb	r3, [r7, #15]
 8008f38:	e017      	b.n	8008f6a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f3a:	4b0e      	ldr	r3, [pc, #56]	; (8008f74 <RTC_ExitInitMode+0x78>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	4a0d      	ldr	r2, [pc, #52]	; (8008f74 <RTC_ExitInitMode+0x78>)
 8008f40:	f023 0320 	bic.w	r3, r3, #32
 8008f44:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff ff82 	bl	8008e50 <HAL_RTC_WaitForSynchro>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2203      	movs	r2, #3
 8008f56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f5e:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <RTC_ExitInitMode+0x78>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	4a04      	ldr	r2, [pc, #16]	; (8008f74 <RTC_ExitInitMode+0x78>)
 8008f64:	f043 0320 	orr.w	r3, r3, #32
 8008f68:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	58004000 	.word	0x58004000

08008f78 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008f86:	79fb      	ldrb	r3, [r7, #7]
 8008f88:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8008f8a:	e005      	b.n	8008f98 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008f92:	7afb      	ldrb	r3, [r7, #11]
 8008f94:	3b0a      	subs	r3, #10
 8008f96:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008f98:	7afb      	ldrb	r3, [r7, #11]
 8008f9a:	2b09      	cmp	r3, #9
 8008f9c:	d8f6      	bhi.n	8008f8c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	7afb      	ldrb	r3, [r7, #11]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	b2db      	uxtb	r3, r3
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	091b      	lsrs	r3, r3, #4
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	0092      	lsls	r2, r2, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	f003 030f 	and.w	r3, r3, #15
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	4413      	add	r3, r2
 8008fde:	b2db      	uxtb	r3, r3
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009008:	2300      	movs	r3, #0
 800900a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e0eb      	b.n	80091ee <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a75      	ldr	r2, [pc, #468]	; (80091f8 <HAL_SPI_Init+0x1f8>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d00f      	beq.n	8009046 <HAL_SPI_Init+0x46>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a74      	ldr	r2, [pc, #464]	; (80091fc <HAL_SPI_Init+0x1fc>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d00a      	beq.n	8009046 <HAL_SPI_Init+0x46>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a72      	ldr	r2, [pc, #456]	; (8009200 <HAL_SPI_Init+0x200>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d005      	beq.n	8009046 <HAL_SPI_Init+0x46>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	2b0f      	cmp	r3, #15
 8009040:	d901      	bls.n	8009046 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e0d3      	b.n	80091ee <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 ff62 	bl	8009f10 <SPI_GetPacketSize>
 800904c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a69      	ldr	r2, [pc, #420]	; (80091f8 <HAL_SPI_Init+0x1f8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00c      	beq.n	8009072 <HAL_SPI_Init+0x72>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a67      	ldr	r2, [pc, #412]	; (80091fc <HAL_SPI_Init+0x1fc>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d007      	beq.n	8009072 <HAL_SPI_Init+0x72>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a66      	ldr	r2, [pc, #408]	; (8009200 <HAL_SPI_Init+0x200>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d002      	beq.n	8009072 <HAL_SPI_Init+0x72>
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b08      	cmp	r3, #8
 8009070:	d811      	bhi.n	8009096 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009076:	4a60      	ldr	r2, [pc, #384]	; (80091f8 <HAL_SPI_Init+0x1f8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d009      	beq.n	8009090 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a5e      	ldr	r2, [pc, #376]	; (80091fc <HAL_SPI_Init+0x1fc>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d004      	beq.n	8009090 <HAL_SPI_Init+0x90>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a5d      	ldr	r2, [pc, #372]	; (8009200 <HAL_SPI_Init+0x200>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d104      	bne.n	800909a <HAL_SPI_Init+0x9a>
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2b10      	cmp	r3, #16
 8009094:	d901      	bls.n	800909a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e0a9      	b.n	80091ee <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7f8 fcf2 	bl	8001a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0201 	bic.w	r2, r2, #1
 80090ca:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090d4:	d119      	bne.n	800910a <HAL_SPI_Init+0x10a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090de:	d103      	bne.n	80090e8 <HAL_SPI_Init+0xe8>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d008      	beq.n	80090fa <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10c      	bne.n	800910a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090f8:	d107      	bne.n	800910a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009108:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69da      	ldr	r2, [r3, #28]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009112:	431a      	orrs	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	431a      	orrs	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800911c:	ea42 0103 	orr.w	r1, r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	431a      	orrs	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	431a      	orrs	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	431a      	orrs	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	431a      	orrs	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916a:	ea42 0103 	orr.w	r1, r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	430a      	orrs	r2, r1
 8009178:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d113      	bne.n	80091aa <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009194:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0201 	bic.w	r2, r2, #1
 80091b8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	40013000 	.word	0x40013000
 80091fc:	40003800 	.word	0x40003800
 8009200:	40003c00 	.word	0x40003c00

08009204 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	; 0x28
 8009208:	af02      	add	r7, sp, #8
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	4613      	mov	r3, r2
 8009212:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3320      	adds	r3, #32
 800921a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009226:	2b01      	cmp	r3, #1
 8009228:	d101      	bne.n	800922e <HAL_SPI_Transmit+0x2a>
 800922a:	2302      	movs	r3, #2
 800922c:	e1d7      	b.n	80095de <HAL_SPI_Transmit+0x3da>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009236:	f7f8 ffc3 	bl	80021c0 <HAL_GetTick>
 800923a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b01      	cmp	r3, #1
 8009246:	d007      	beq.n	8009258 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009248:	2302      	movs	r3, #2
 800924a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009254:	7efb      	ldrb	r3, [r7, #27]
 8009256:	e1c2      	b.n	80095de <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <HAL_SPI_Transmit+0x60>
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d107      	bne.n	8009274 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009270:	7efb      	ldrb	r3, [r7, #27]
 8009272:	e1b4      	b.n	80095de <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2203      	movs	r2, #3
 8009278:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	88fa      	ldrh	r2, [r7, #6]
 800928e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	88fa      	ldrh	r2, [r7, #6]
 8009296:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80092c4:	d107      	bne.n	80092d6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	4b96      	ldr	r3, [pc, #600]	; (8009538 <HAL_SPI_Transmit+0x334>)
 80092de:	4013      	ands	r3, r2
 80092e0:	88f9      	ldrh	r1, [r7, #6]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	430b      	orrs	r3, r1
 80092e8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f042 0201 	orr.w	r2, r2, #1
 80092f8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009302:	d107      	bne.n	8009314 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009312:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	2b0f      	cmp	r3, #15
 800931a:	d947      	bls.n	80093ac <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800931c:	e03f      	b.n	800939e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b02      	cmp	r3, #2
 800932a:	d114      	bne.n	8009356 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6812      	ldr	r2, [r2, #0]
 8009336:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800933c:	1d1a      	adds	r2, r3, #4
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009348:	b29b      	uxth	r3, r3
 800934a:	3b01      	subs	r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009354:	e023      	b.n	800939e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009356:	f7f8 ff33 	bl	80021c0 <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d803      	bhi.n	800936e <HAL_SPI_Transmit+0x16a>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936c:	d102      	bne.n	8009374 <HAL_SPI_Transmit+0x170>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d114      	bne.n	800939e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 fcfd 	bl	8009d74 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009388:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e11f      	b.n	80095de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1b9      	bne.n	800931e <HAL_SPI_Transmit+0x11a>
 80093aa:	e0f2      	b.n	8009592 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	2b07      	cmp	r3, #7
 80093b2:	f240 80e7 	bls.w	8009584 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80093b6:	e05d      	b.n	8009474 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d132      	bne.n	800942c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d918      	bls.n	8009404 <HAL_SPI_Transmit+0x200>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d014      	beq.n	8009404 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6812      	ldr	r2, [r2, #0]
 80093e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ea:	1d1a      	adds	r2, r3, #4
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	3b02      	subs	r3, #2
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009402:	e037      	b.n	8009474 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009408:	881a      	ldrh	r2, [r3, #0]
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009412:	1c9a      	adds	r2, r3, #2
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800941e:	b29b      	uxth	r3, r3
 8009420:	3b01      	subs	r3, #1
 8009422:	b29a      	uxth	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800942a:	e023      	b.n	8009474 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800942c:	f7f8 fec8 	bl	80021c0 <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d803      	bhi.n	8009444 <HAL_SPI_Transmit+0x240>
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009442:	d102      	bne.n	800944a <HAL_SPI_Transmit+0x246>
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d114      	bne.n	8009474 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 fc92 	bl	8009d74 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800945e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e0b4      	b.n	80095de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800947a:	b29b      	uxth	r3, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	d19b      	bne.n	80093b8 <HAL_SPI_Transmit+0x1b4>
 8009480:	e087      	b.n	8009592 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b02      	cmp	r3, #2
 800948e:	d155      	bne.n	800953c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009496:	b29b      	uxth	r3, r3
 8009498:	2b03      	cmp	r3, #3
 800949a:	d918      	bls.n	80094ce <HAL_SPI_Transmit+0x2ca>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a0:	2b40      	cmp	r3, #64	; 0x40
 80094a2:	d914      	bls.n	80094ce <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b4:	1d1a      	adds	r2, r3, #4
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	3b04      	subs	r3, #4
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80094cc:	e05a      	b.n	8009584 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d917      	bls.n	800950a <HAL_SPI_Transmit+0x306>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d013      	beq.n	800950a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e6:	881a      	ldrh	r2, [r3, #0]
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094f0:	1c9a      	adds	r2, r3, #2
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	3b02      	subs	r3, #2
 8009500:	b29a      	uxth	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009508:	e03c      	b.n	8009584 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3320      	adds	r3, #32
 8009514:	7812      	ldrb	r2, [r2, #0]
 8009516:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009528:	b29b      	uxth	r3, r3
 800952a:	3b01      	subs	r3, #1
 800952c:	b29a      	uxth	r2, r3
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009534:	e026      	b.n	8009584 <HAL_SPI_Transmit+0x380>
 8009536:	bf00      	nop
 8009538:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800953c:	f7f8 fe40 	bl	80021c0 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	429a      	cmp	r2, r3
 800954a:	d803      	bhi.n	8009554 <HAL_SPI_Transmit+0x350>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d102      	bne.n	800955a <HAL_SPI_Transmit+0x356>
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d114      	bne.n	8009584 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fc0a 	bl	8009d74 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800956e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e02c      	b.n	80095de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800958a:	b29b      	uxth	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	f47f af78 	bne.w	8009482 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2200      	movs	r2, #0
 800959a:	2108      	movs	r1, #8
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fc89 	bl	8009eb4 <SPI_WaitOnFlagUntilTimeout>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d007      	beq.n	80095b8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ae:	f043 0220 	orr.w	r2, r3, #32
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 fbdb 	bl	8009d74 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e000      	b.n	80095de <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80095dc:	7efb      	ldrb	r3, [r7, #27]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3720      	adds	r7, #32
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop

080095e8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009600:	2b01      	cmp	r3, #1
 8009602:	d101      	bne.n	8009608 <HAL_SPI_Transmit_DMA+0x20>
 8009604:	2302      	movs	r3, #2
 8009606:	e128      	b.n	800985a <HAL_SPI_Transmit_DMA+0x272>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b01      	cmp	r3, #1
 800961a:	d007      	beq.n	800962c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800961c:	2302      	movs	r3, #2
 800961e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009628:	7dfb      	ldrb	r3, [r7, #23]
 800962a:	e116      	b.n	800985a <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <HAL_SPI_Transmit_DMA+0x50>
 8009632:	88fb      	ldrh	r3, [r7, #6]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d107      	bne.n	8009648 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	e108      	b.n	800985a <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2203      	movs	r2, #3
 800964c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	88fa      	ldrh	r2, [r7, #6]
 8009662:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	88fa      	ldrh	r2, [r7, #6]
 800966a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009698:	d107      	bne.n	80096aa <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096a8:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	2b0f      	cmp	r3, #15
 80096b0:	d905      	bls.n	80096be <HAL_SPI_Transmit_DMA+0xd6>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096bc:	d10f      	bne.n	80096de <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80096c2:	2b07      	cmp	r3, #7
 80096c4:	d913      	bls.n	80096ee <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d0:	d00d      	beq.n	80096ee <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096d6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80096d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096dc:	d007      	beq.n	80096ee <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
 80096ec:	e0b5      	b.n	800985a <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	2b07      	cmp	r3, #7
 80096f4:	d820      	bhi.n	8009738 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009700:	d109      	bne.n	8009716 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009708:	b29b      	uxth	r3, r3
 800970a:	3301      	adds	r3, #1
 800970c:	105b      	asrs	r3, r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009720:	d11e      	bne.n	8009760 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009728:	b29b      	uxth	r3, r3
 800972a:	3303      	adds	r3, #3
 800972c:	109b      	asrs	r3, r3, #2
 800972e:	b29a      	uxth	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009736:	e013      	b.n	8009760 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	2b0f      	cmp	r3, #15
 800973e:	d80f      	bhi.n	8009760 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800974a:	d109      	bne.n	8009760 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009752:	b29b      	uxth	r3, r3
 8009754:	3301      	adds	r3, #1
 8009756:	105b      	asrs	r3, r3, #1
 8009758:	b29a      	uxth	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009764:	4a3f      	ldr	r2, [pc, #252]	; (8009864 <HAL_SPI_Transmit_DMA+0x27c>)
 8009766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800976c:	4a3e      	ldr	r2, [pc, #248]	; (8009868 <HAL_SPI_Transmit_DMA+0x280>)
 800976e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009774:	4a3d      	ldr	r2, [pc, #244]	; (800986c <HAL_SPI_Transmit_DMA+0x284>)
 8009776:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800977c:	2200      	movs	r2, #0
 800977e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689a      	ldr	r2, [r3, #8]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800978e:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009798:	4619      	mov	r1, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3320      	adds	r3, #32
 80097a0:	461a      	mov	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	f7f9 f9d9 	bl	8002b60 <HAL_DMA_Start_IT>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00f      	beq.n	80097d4 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097ba:	f043 0210 	orr.w	r2, r3, #16
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	e042      	b.n	800985a <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097de:	d108      	bne.n	80097f2 <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6859      	ldr	r1, [r3, #4]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	4b21      	ldr	r3, [pc, #132]	; (8009870 <HAL_SPI_Transmit_DMA+0x288>)
 80097ec:	400b      	ands	r3, r1
 80097ee:	6053      	str	r3, [r2, #4]
 80097f0:	e009      	b.n	8009806 <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	4b1d      	ldr	r3, [pc, #116]	; (8009870 <HAL_SPI_Transmit_DMA+0x288>)
 80097fa:	4013      	ands	r3, r2
 80097fc:	88f9      	ldrh	r1, [r7, #6]
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	6812      	ldr	r2, [r2, #0]
 8009802:	430b      	orrs	r3, r1
 8009804:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009814:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8009824:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f042 0201 	orr.w	r2, r2, #1
 8009834:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800983e:	d107      	bne.n	8009850 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800984e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	08009cdf 	.word	0x08009cdf
 8009868:	08009c99 	.word	0x08009c99
 800986c:	08009cfb 	.word	0x08009cfb
 8009870:	ffff0000 	.word	0xffff0000

08009874 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08a      	sub	sp, #40	; 0x28
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800988c:	6a3a      	ldr	r2, [r7, #32]
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	4013      	ands	r3, r2
 8009892:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800989c:	2300      	movs	r3, #0
 800989e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80098a6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3330      	adds	r3, #48	; 0x30
 80098ae:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d113      	bne.n	80098e2 <HAL_SPI_IRQHandler+0x6e>
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f003 0320 	and.w	r3, r3, #32
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10e      	bne.n	80098e2 <HAL_SPI_IRQHandler+0x6e>
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d009      	beq.n	80098e2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	4798      	blx	r3
    handled = 1UL;
 80098de:	2301      	movs	r3, #1
 80098e0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10f      	bne.n	800990c <HAL_SPI_IRQHandler+0x98>
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <HAL_SPI_IRQHandler+0x98>
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d105      	bne.n	800990c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
    handled = 1UL;
 8009908:	2301      	movs	r3, #1
 800990a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10f      	bne.n	8009936 <HAL_SPI_IRQHandler+0xc2>
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	f003 0302 	and.w	r3, r3, #2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00a      	beq.n	8009936 <HAL_SPI_IRQHandler+0xc2>
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	f003 0304 	and.w	r3, r3, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	d105      	bne.n	8009936 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
    handled = 1UL;
 8009932:	2301      	movs	r3, #1
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	f040 816f 	bne.w	8009c1c <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	f003 0308 	and.w	r3, r3, #8
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 80a0 	beq.w	8009a8a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	699a      	ldr	r2, [r3, #24]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 0208 	orr.w	r2, r2, #8
 8009958:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	699a      	ldr	r2, [r3, #24]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f042 0210 	orr.w	r2, r2, #16
 8009968:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699a      	ldr	r2, [r3, #24]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009978:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	691a      	ldr	r2, [r3, #16]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0208 	bic.w	r2, r2, #8
 8009988:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00f      	beq.n	80099b4 <HAL_SPI_IRQHandler+0x140>
 8009994:	7cfb      	ldrb	r3, [r7, #19]
 8009996:	2b04      	cmp	r3, #4
 8009998:	d004      	beq.n	80099a4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d007      	beq.n	80099b4 <HAL_SPI_IRQHandler+0x140>
 80099a4:	7cfb      	ldrb	r3, [r7, #19]
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d059      	beq.n	8009a5e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d154      	bne.n	8009a5e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d13d      	bne.n	8009a3e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80099c2:	e036      	b.n	8009a32 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	2b0f      	cmp	r3, #15
 80099ca:	d90b      	bls.n	80099e4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80099d6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099dc:	1d1a      	adds	r2, r3, #4
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	665a      	str	r2, [r3, #100]	; 0x64
 80099e2:	e01d      	b.n	8009a20 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	2b07      	cmp	r3, #7
 80099ea:	d90b      	bls.n	8009a04 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	8812      	ldrh	r2, [r2, #0]
 80099f4:	b292      	uxth	r2, r2
 80099f6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099fc:	1c9a      	adds	r2, r3, #2
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	665a      	str	r2, [r3, #100]	; 0x64
 8009a02:	e00d      	b.n	8009a20 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a10:	7812      	ldrb	r2, [r2, #0]
 8009a12:	b2d2      	uxtb	r2, r2
 8009a14:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1c2      	bne.n	80099c4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f998 	bl	8009d74 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f914 	bl	8009c84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8009a5c:	e0e3      	b.n	8009c26 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009a5e:	7cfb      	ldrb	r3, [r7, #19]
 8009a60:	2b05      	cmp	r3, #5
 8009a62:	d103      	bne.n	8009a6c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f8f9 	bl	8009c5c <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8009a6a:	e0d9      	b.n	8009c20 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009a6c:	7cfb      	ldrb	r3, [r7, #19]
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d103      	bne.n	8009a7a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f8e8 	bl	8009c48 <HAL_SPI_RxCpltCallback>
    return;
 8009a78:	e0d2      	b.n	8009c20 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009a7a:	7cfb      	ldrb	r3, [r7, #19]
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	f040 80cf 	bne.w	8009c20 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f8d6 	bl	8009c34 <HAL_SPI_TxCpltCallback>
    return;
 8009a88:	e0ca      	b.n	8009c20 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00d      	beq.n	8009ab0 <HAL_SPI_IRQHandler+0x23c>
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d008      	beq.n	8009ab0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	699a      	ldr	r2, [r3, #24]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aac:	619a      	str	r2, [r3, #24]

    return;
 8009aae:	e0ba      	b.n	8009c26 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80b5 	beq.w	8009c26 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00f      	beq.n	8009ae6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009acc:	f043 0204 	orr.w	r2, r3, #4
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	699a      	ldr	r2, [r3, #24]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ae4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00f      	beq.n	8009b10 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009af6:	f043 0201 	orr.w	r2, r3, #1
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	699a      	ldr	r2, [r3, #24]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b0e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00f      	beq.n	8009b3a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b20:	f043 0208 	orr.w	r2, r3, #8
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	699a      	ldr	r2, [r3, #24]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b38:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	f003 0320 	and.w	r3, r3, #32
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00f      	beq.n	8009b64 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699a      	ldr	r2, [r3, #24]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0220 	orr.w	r2, r2, #32
 8009b62:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d05a      	beq.n	8009c24 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f022 0201 	bic.w	r2, r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6919      	ldr	r1, [r3, #16]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	4b28      	ldr	r3, [pc, #160]	; (8009c2c <HAL_SPI_IRQHandler+0x3b8>)
 8009b8a:	400b      	ands	r3, r1
 8009b8c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b98:	d138      	bne.n	8009c0c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009ba8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d013      	beq.n	8009bda <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb6:	4a1e      	ldr	r2, [pc, #120]	; (8009c30 <HAL_SPI_IRQHandler+0x3bc>)
 8009bb8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7f9 fd56 	bl	8003670 <HAL_DMA_Abort_IT>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d007      	beq.n	8009bda <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d020      	beq.n	8009c24 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009be6:	4a12      	ldr	r2, [pc, #72]	; (8009c30 <HAL_SPI_IRQHandler+0x3bc>)
 8009be8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7f9 fd3e 	bl	8003670 <HAL_DMA_Abort_IT>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d014      	beq.n	8009c24 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009c0a:	e00b      	b.n	8009c24 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f835 	bl	8009c84 <HAL_SPI_ErrorCallback>
    return;
 8009c1a:	e003      	b.n	8009c24 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009c1c:	bf00      	nop
 8009c1e:	e002      	b.n	8009c26 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009c20:	bf00      	nop
 8009c22:	e000      	b.n	8009c26 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009c24:	bf00      	nop
  }
}
 8009c26:	3728      	adds	r7, #40	; 0x28
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	fffffc94 	.word	0xfffffc94
 8009c30:	08009d41 	.word	0x08009d41

08009c34 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b07      	cmp	r3, #7
 8009cb0:	d011      	beq.n	8009cd6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cbc:	d103      	bne.n	8009cc6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f7ff ffb8 	bl	8009c34 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009cc4:	e007      	b.n	8009cd6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	691a      	ldr	r2, [r3, #16]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f042 0208 	orr.w	r2, r2, #8
 8009cd4:	611a      	str	r2, [r3, #16]
}
 8009cd6:	bf00      	nop
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff ffbf 	bl	8009c70 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009cf2:	bf00      	nop
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d06:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7fa fe1f 	bl	800494c <HAL_DMA_GetError>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d011      	beq.n	8009d38 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f82d 	bl	8009d74 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d20:	f043 0210 	orr.w	r2, r3, #16
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f7ff ffa6 	bl	8009c84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f7ff ff8c 	bl	8009c84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d6c:	bf00      	nop
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	699a      	ldr	r2, [r3, #24]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f042 0208 	orr.w	r2, r2, #8
 8009d92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	699a      	ldr	r2, [r3, #24]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f042 0210 	orr.w	r2, r2, #16
 8009da2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 0201 	bic.w	r2, r2, #1
 8009db2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6919      	ldr	r1, [r3, #16]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	4b3c      	ldr	r3, [pc, #240]	; (8009eb0 <SPI_CloseTransfer+0x13c>)
 8009dc0:	400b      	ands	r3, r1
 8009dc2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689a      	ldr	r2, [r3, #8]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009dd2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b04      	cmp	r3, #4
 8009dde:	d014      	beq.n	8009e0a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f003 0320 	and.w	r3, r3, #32
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00f      	beq.n	8009e0a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009df0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	699a      	ldr	r2, [r3, #24]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f042 0220 	orr.w	r2, r2, #32
 8009e08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d014      	beq.n	8009e40 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00f      	beq.n	8009e40 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e26:	f043 0204 	orr.w	r2, r3, #4
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	699a      	ldr	r2, [r3, #24]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00f      	beq.n	8009e6a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e50:	f043 0201 	orr.w	r2, r3, #1
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	699a      	ldr	r2, [r3, #24]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00f      	beq.n	8009e94 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e7a:	f043 0208 	orr.w	r2, r3, #8
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	699a      	ldr	r2, [r3, #24]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009ea4:	bf00      	nop
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	fffffc90 	.word	0xfffffc90

08009eb4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ec4:	e010      	b.n	8009ee8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ec6:	f7f8 f97b 	bl	80021c0 <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	69ba      	ldr	r2, [r7, #24]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d803      	bhi.n	8009ede <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009edc:	d102      	bne.n	8009ee4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e00f      	b.n	8009f08 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	695a      	ldr	r2, [r3, #20]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	bf0c      	ite	eq
 8009ef8:	2301      	moveq	r3, #1
 8009efa:	2300      	movne	r3, #0
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	461a      	mov	r2, r3
 8009f00:	79fb      	ldrb	r3, [r7, #7]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d0df      	beq.n	8009ec6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1c:	095b      	lsrs	r3, r3, #5
 8009f1e:	3301      	adds	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	3301      	adds	r3, #1
 8009f28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	3307      	adds	r3, #7
 8009f2e:	08db      	lsrs	r3, r3, #3
 8009f30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	fb02 f303 	mul.w	r3, r2, r3
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e049      	b.n	8009fec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7f7 fe57 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2202      	movs	r2, #2
 8009f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3304      	adds	r3, #4
 8009f82:	4619      	mov	r1, r3
 8009f84:	4610      	mov	r0, r2
 8009f86:	f000 fc0b 	bl	800a7a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b01      	cmp	r3, #1
 800a006:	d001      	beq.n	800a00c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e047      	b.n	800a09c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2202      	movs	r2, #2
 800a010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a23      	ldr	r2, [pc, #140]	; (800a0a8 <HAL_TIM_Base_Start+0xb4>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d01d      	beq.n	800a05a <HAL_TIM_Base_Start+0x66>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a026:	d018      	beq.n	800a05a <HAL_TIM_Base_Start+0x66>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a1f      	ldr	r2, [pc, #124]	; (800a0ac <HAL_TIM_Base_Start+0xb8>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d013      	beq.n	800a05a <HAL_TIM_Base_Start+0x66>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a1e      	ldr	r2, [pc, #120]	; (800a0b0 <HAL_TIM_Base_Start+0xbc>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d00e      	beq.n	800a05a <HAL_TIM_Base_Start+0x66>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a1c      	ldr	r2, [pc, #112]	; (800a0b4 <HAL_TIM_Base_Start+0xc0>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d009      	beq.n	800a05a <HAL_TIM_Base_Start+0x66>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a1b      	ldr	r2, [pc, #108]	; (800a0b8 <HAL_TIM_Base_Start+0xc4>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d004      	beq.n	800a05a <HAL_TIM_Base_Start+0x66>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a19      	ldr	r2, [pc, #100]	; (800a0bc <HAL_TIM_Base_Start+0xc8>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d115      	bne.n	800a086 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689a      	ldr	r2, [r3, #8]
 800a060:	4b17      	ldr	r3, [pc, #92]	; (800a0c0 <HAL_TIM_Base_Start+0xcc>)
 800a062:	4013      	ands	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b06      	cmp	r3, #6
 800a06a:	d015      	beq.n	800a098 <HAL_TIM_Base_Start+0xa4>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a072:	d011      	beq.n	800a098 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f042 0201 	orr.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a084:	e008      	b.n	800a098 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f042 0201 	orr.w	r2, r2, #1
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	e000      	b.n	800a09a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a098:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	40010000 	.word	0x40010000
 800a0ac:	40000400 	.word	0x40000400
 800a0b0:	40000800 	.word	0x40000800
 800a0b4:	40000c00 	.word	0x40000c00
 800a0b8:	40010400 	.word	0x40010400
 800a0bc:	40001800 	.word	0x40001800
 800a0c0:	00010007 	.word	0x00010007

0800a0c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e049      	b.n	800a16a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d106      	bne.n	800a0f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f841 	bl	800a172 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3304      	adds	r3, #4
 800a100:	4619      	mov	r1, r3
 800a102:	4610      	mov	r0, r2
 800a104:	f000 fb4c 	bl	800a7a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a172:	b480      	push	{r7}
 800a174:	b083      	sub	sp, #12
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a17a:	bf00      	nop
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
	...

0800a188 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d109      	bne.n	800a1ac <HAL_TIM_PWM_Start+0x24>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	bf14      	ite	ne
 800a1a4:	2301      	movne	r3, #1
 800a1a6:	2300      	moveq	r3, #0
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	e03c      	b.n	800a226 <HAL_TIM_PWM_Start+0x9e>
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d109      	bne.n	800a1c6 <HAL_TIM_PWM_Start+0x3e>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	bf14      	ite	ne
 800a1be:	2301      	movne	r3, #1
 800a1c0:	2300      	moveq	r3, #0
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	e02f      	b.n	800a226 <HAL_TIM_PWM_Start+0x9e>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	d109      	bne.n	800a1e0 <HAL_TIM_PWM_Start+0x58>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	bf14      	ite	ne
 800a1d8:	2301      	movne	r3, #1
 800a1da:	2300      	moveq	r3, #0
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	e022      	b.n	800a226 <HAL_TIM_PWM_Start+0x9e>
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b0c      	cmp	r3, #12
 800a1e4:	d109      	bne.n	800a1fa <HAL_TIM_PWM_Start+0x72>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	bf14      	ite	ne
 800a1f2:	2301      	movne	r3, #1
 800a1f4:	2300      	moveq	r3, #0
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	e015      	b.n	800a226 <HAL_TIM_PWM_Start+0x9e>
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b10      	cmp	r3, #16
 800a1fe:	d109      	bne.n	800a214 <HAL_TIM_PWM_Start+0x8c>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b01      	cmp	r3, #1
 800a20a:	bf14      	ite	ne
 800a20c:	2301      	movne	r3, #1
 800a20e:	2300      	moveq	r3, #0
 800a210:	b2db      	uxtb	r3, r3
 800a212:	e008      	b.n	800a226 <HAL_TIM_PWM_Start+0x9e>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	bf14      	ite	ne
 800a220:	2301      	movne	r3, #1
 800a222:	2300      	moveq	r3, #0
 800a224:	b2db      	uxtb	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e09c      	b.n	800a368 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d104      	bne.n	800a23e <HAL_TIM_PWM_Start+0xb6>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a23c:	e023      	b.n	800a286 <HAL_TIM_PWM_Start+0xfe>
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b04      	cmp	r3, #4
 800a242:	d104      	bne.n	800a24e <HAL_TIM_PWM_Start+0xc6>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a24c:	e01b      	b.n	800a286 <HAL_TIM_PWM_Start+0xfe>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b08      	cmp	r3, #8
 800a252:	d104      	bne.n	800a25e <HAL_TIM_PWM_Start+0xd6>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2202      	movs	r2, #2
 800a258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a25c:	e013      	b.n	800a286 <HAL_TIM_PWM_Start+0xfe>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b0c      	cmp	r3, #12
 800a262:	d104      	bne.n	800a26e <HAL_TIM_PWM_Start+0xe6>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2202      	movs	r2, #2
 800a268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a26c:	e00b      	b.n	800a286 <HAL_TIM_PWM_Start+0xfe>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b10      	cmp	r3, #16
 800a272:	d104      	bne.n	800a27e <HAL_TIM_PWM_Start+0xf6>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2202      	movs	r2, #2
 800a278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a27c:	e003      	b.n	800a286 <HAL_TIM_PWM_Start+0xfe>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2202      	movs	r2, #2
 800a282:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2201      	movs	r2, #1
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fe8c 	bl	800afac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a35      	ldr	r2, [pc, #212]	; (800a370 <HAL_TIM_PWM_Start+0x1e8>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d013      	beq.n	800a2c6 <HAL_TIM_PWM_Start+0x13e>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a34      	ldr	r2, [pc, #208]	; (800a374 <HAL_TIM_PWM_Start+0x1ec>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d00e      	beq.n	800a2c6 <HAL_TIM_PWM_Start+0x13e>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a32      	ldr	r2, [pc, #200]	; (800a378 <HAL_TIM_PWM_Start+0x1f0>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d009      	beq.n	800a2c6 <HAL_TIM_PWM_Start+0x13e>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a31      	ldr	r2, [pc, #196]	; (800a37c <HAL_TIM_PWM_Start+0x1f4>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d004      	beq.n	800a2c6 <HAL_TIM_PWM_Start+0x13e>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a2f      	ldr	r2, [pc, #188]	; (800a380 <HAL_TIM_PWM_Start+0x1f8>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d101      	bne.n	800a2ca <HAL_TIM_PWM_Start+0x142>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e000      	b.n	800a2cc <HAL_TIM_PWM_Start+0x144>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d007      	beq.n	800a2e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a22      	ldr	r2, [pc, #136]	; (800a370 <HAL_TIM_PWM_Start+0x1e8>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d01d      	beq.n	800a326 <HAL_TIM_PWM_Start+0x19e>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2f2:	d018      	beq.n	800a326 <HAL_TIM_PWM_Start+0x19e>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a22      	ldr	r2, [pc, #136]	; (800a384 <HAL_TIM_PWM_Start+0x1fc>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d013      	beq.n	800a326 <HAL_TIM_PWM_Start+0x19e>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a21      	ldr	r2, [pc, #132]	; (800a388 <HAL_TIM_PWM_Start+0x200>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d00e      	beq.n	800a326 <HAL_TIM_PWM_Start+0x19e>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a1f      	ldr	r2, [pc, #124]	; (800a38c <HAL_TIM_PWM_Start+0x204>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d009      	beq.n	800a326 <HAL_TIM_PWM_Start+0x19e>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a17      	ldr	r2, [pc, #92]	; (800a374 <HAL_TIM_PWM_Start+0x1ec>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d004      	beq.n	800a326 <HAL_TIM_PWM_Start+0x19e>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a1b      	ldr	r2, [pc, #108]	; (800a390 <HAL_TIM_PWM_Start+0x208>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d115      	bne.n	800a352 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	689a      	ldr	r2, [r3, #8]
 800a32c:	4b19      	ldr	r3, [pc, #100]	; (800a394 <HAL_TIM_PWM_Start+0x20c>)
 800a32e:	4013      	ands	r3, r2
 800a330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b06      	cmp	r3, #6
 800a336:	d015      	beq.n	800a364 <HAL_TIM_PWM_Start+0x1dc>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a33e:	d011      	beq.n	800a364 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f042 0201 	orr.w	r2, r2, #1
 800a34e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a350:	e008      	b.n	800a364 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f042 0201 	orr.w	r2, r2, #1
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	e000      	b.n	800a366 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a364:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	40010000 	.word	0x40010000
 800a374:	40010400 	.word	0x40010400
 800a378:	40014000 	.word	0x40014000
 800a37c:	40014400 	.word	0x40014400
 800a380:	40014800 	.word	0x40014800
 800a384:	40000400 	.word	0x40000400
 800a388:	40000800 	.word	0x40000800
 800a38c:	40000c00 	.word	0x40000c00
 800a390:	40001800 	.word	0x40001800
 800a394:	00010007 	.word	0x00010007

0800a398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d101      	bne.n	800a3b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	e0fd      	b.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x216>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b14      	cmp	r3, #20
 800a3be:	f200 80f0 	bhi.w	800a5a2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a3c2:	a201      	add	r2, pc, #4	; (adr r2, 800a3c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a41d 	.word	0x0800a41d
 800a3cc:	0800a5a3 	.word	0x0800a5a3
 800a3d0:	0800a5a3 	.word	0x0800a5a3
 800a3d4:	0800a5a3 	.word	0x0800a5a3
 800a3d8:	0800a45d 	.word	0x0800a45d
 800a3dc:	0800a5a3 	.word	0x0800a5a3
 800a3e0:	0800a5a3 	.word	0x0800a5a3
 800a3e4:	0800a5a3 	.word	0x0800a5a3
 800a3e8:	0800a49f 	.word	0x0800a49f
 800a3ec:	0800a5a3 	.word	0x0800a5a3
 800a3f0:	0800a5a3 	.word	0x0800a5a3
 800a3f4:	0800a5a3 	.word	0x0800a5a3
 800a3f8:	0800a4df 	.word	0x0800a4df
 800a3fc:	0800a5a3 	.word	0x0800a5a3
 800a400:	0800a5a3 	.word	0x0800a5a3
 800a404:	0800a5a3 	.word	0x0800a5a3
 800a408:	0800a521 	.word	0x0800a521
 800a40c:	0800a5a3 	.word	0x0800a5a3
 800a410:	0800a5a3 	.word	0x0800a5a3
 800a414:	0800a5a3 	.word	0x0800a5a3
 800a418:	0800a561 	.word	0x0800a561
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fa56 	bl	800a8d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	699a      	ldr	r2, [r3, #24]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f042 0208 	orr.w	r2, r2, #8
 800a436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	699a      	ldr	r2, [r3, #24]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 0204 	bic.w	r2, r2, #4
 800a446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6999      	ldr	r1, [r3, #24]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	691a      	ldr	r2, [r3, #16]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	619a      	str	r2, [r3, #24]
      break;
 800a45a:	e0a3      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68b9      	ldr	r1, [r7, #8]
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fac6 	bl	800a9f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	699a      	ldr	r2, [r3, #24]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	699a      	ldr	r2, [r3, #24]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6999      	ldr	r1, [r3, #24]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	021a      	lsls	r2, r3, #8
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	619a      	str	r2, [r3, #24]
      break;
 800a49c:	e082      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 fb2f 	bl	800ab08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	69da      	ldr	r2, [r3, #28]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f042 0208 	orr.w	r2, r2, #8
 800a4b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69da      	ldr	r2, [r3, #28]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0204 	bic.w	r2, r2, #4
 800a4c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69d9      	ldr	r1, [r3, #28]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	61da      	str	r2, [r3, #28]
      break;
 800a4dc:	e062      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 fb95 	bl	800ac14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69da      	ldr	r2, [r3, #28]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	69da      	ldr	r2, [r3, #28]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	69d9      	ldr	r1, [r3, #28]
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	021a      	lsls	r2, r3, #8
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	61da      	str	r2, [r3, #28]
      break;
 800a51e:	e041      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fbdc 	bl	800ace4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0208 	orr.w	r2, r2, #8
 800a53a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 0204 	bic.w	r2, r2, #4
 800a54a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	691a      	ldr	r2, [r3, #16]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	430a      	orrs	r2, r1
 800a55c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a55e:	e021      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68b9      	ldr	r1, [r7, #8]
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fc1e 	bl	800ada8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a57a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a58a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	021a      	lsls	r2, r3, #8
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	430a      	orrs	r2, r1
 800a59e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a5a0:	e000      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a5a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop

0800a5b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d101      	bne.n	800a5d0 <HAL_TIM_ConfigClockSource+0x18>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	e0db      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x1d0>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4b69      	ldr	r3, [pc, #420]	; (800a790 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a63      	ldr	r2, [pc, #396]	; (800a794 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a606:	4293      	cmp	r3, r2
 800a608:	f000 80a9 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x1a6>
 800a60c:	4a61      	ldr	r2, [pc, #388]	; (800a794 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	f200 80ae 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a614:	4a60      	ldr	r2, [pc, #384]	; (800a798 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a616:	4293      	cmp	r3, r2
 800a618:	f000 80a1 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x1a6>
 800a61c:	4a5e      	ldr	r2, [pc, #376]	; (800a798 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	f200 80a6 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a624:	4a5d      	ldr	r2, [pc, #372]	; (800a79c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a626:	4293      	cmp	r3, r2
 800a628:	f000 8099 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x1a6>
 800a62c:	4a5b      	ldr	r2, [pc, #364]	; (800a79c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	f200 809e 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a634:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a638:	f000 8091 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x1a6>
 800a63c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a640:	f200 8096 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a648:	f000 8089 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x1a6>
 800a64c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a650:	f200 808e 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a658:	d03e      	beq.n	800a6d8 <HAL_TIM_ConfigClockSource+0x120>
 800a65a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65e:	f200 8087 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a666:	f000 8085 	beq.w	800a774 <HAL_TIM_ConfigClockSource+0x1bc>
 800a66a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a66e:	d87f      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a670:	2b70      	cmp	r3, #112	; 0x70
 800a672:	d01a      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0xf2>
 800a674:	2b70      	cmp	r3, #112	; 0x70
 800a676:	d87b      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a678:	2b60      	cmp	r3, #96	; 0x60
 800a67a:	d050      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x166>
 800a67c:	2b60      	cmp	r3, #96	; 0x60
 800a67e:	d877      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a680:	2b50      	cmp	r3, #80	; 0x50
 800a682:	d03c      	beq.n	800a6fe <HAL_TIM_ConfigClockSource+0x146>
 800a684:	2b50      	cmp	r3, #80	; 0x50
 800a686:	d873      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a688:	2b40      	cmp	r3, #64	; 0x40
 800a68a:	d058      	beq.n	800a73e <HAL_TIM_ConfigClockSource+0x186>
 800a68c:	2b40      	cmp	r3, #64	; 0x40
 800a68e:	d86f      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a690:	2b30      	cmp	r3, #48	; 0x30
 800a692:	d064      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x1a6>
 800a694:	2b30      	cmp	r3, #48	; 0x30
 800a696:	d86b      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a698:	2b20      	cmp	r3, #32
 800a69a:	d060      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x1a6>
 800a69c:	2b20      	cmp	r3, #32
 800a69e:	d867      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d05c      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x1a6>
 800a6a4:	2b10      	cmp	r3, #16
 800a6a6:	d05a      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a6a8:	e062      	b.n	800a770 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	6899      	ldr	r1, [r3, #8]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	f000 fc57 	bl	800af6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	609a      	str	r2, [r3, #8]
      break;
 800a6d6:	e04e      	b.n	800a776 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	6899      	ldr	r1, [r3, #8]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	685a      	ldr	r2, [r3, #4]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f000 fc40 	bl	800af6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6fa:	609a      	str	r2, [r3, #8]
      break;
 800a6fc:	e03b      	b.n	800a776 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	6859      	ldr	r1, [r3, #4]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	461a      	mov	r2, r3
 800a70c:	f000 fbb0 	bl	800ae70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2150      	movs	r1, #80	; 0x50
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fc0a 	bl	800af30 <TIM_ITRx_SetConfig>
      break;
 800a71c:	e02b      	b.n	800a776 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6818      	ldr	r0, [r3, #0]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	6859      	ldr	r1, [r3, #4]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	461a      	mov	r2, r3
 800a72c:	f000 fbcf 	bl	800aece <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2160      	movs	r1, #96	; 0x60
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fbfa 	bl	800af30 <TIM_ITRx_SetConfig>
      break;
 800a73c:	e01b      	b.n	800a776 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6818      	ldr	r0, [r3, #0]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	6859      	ldr	r1, [r3, #4]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	461a      	mov	r2, r3
 800a74c:	f000 fb90 	bl	800ae70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2140      	movs	r1, #64	; 0x40
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fbea 	bl	800af30 <TIM_ITRx_SetConfig>
      break;
 800a75c:	e00b      	b.n	800a776 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4619      	mov	r1, r3
 800a768:	4610      	mov	r0, r2
 800a76a:	f000 fbe1 	bl	800af30 <TIM_ITRx_SetConfig>
        break;
 800a76e:	e002      	b.n	800a776 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a770:	bf00      	nop
 800a772:	e000      	b.n	800a776 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a774:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2201      	movs	r2, #1
 800a77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	ffceff88 	.word	0xffceff88
 800a794:	00100040 	.word	0x00100040
 800a798:	00100030 	.word	0x00100030
 800a79c:	00100020 	.word	0x00100020

0800a7a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a40      	ldr	r2, [pc, #256]	; (800a8b4 <TIM_Base_SetConfig+0x114>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d013      	beq.n	800a7e0 <TIM_Base_SetConfig+0x40>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7be:	d00f      	beq.n	800a7e0 <TIM_Base_SetConfig+0x40>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a3d      	ldr	r2, [pc, #244]	; (800a8b8 <TIM_Base_SetConfig+0x118>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d00b      	beq.n	800a7e0 <TIM_Base_SetConfig+0x40>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a3c      	ldr	r2, [pc, #240]	; (800a8bc <TIM_Base_SetConfig+0x11c>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d007      	beq.n	800a7e0 <TIM_Base_SetConfig+0x40>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a3b      	ldr	r2, [pc, #236]	; (800a8c0 <TIM_Base_SetConfig+0x120>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d003      	beq.n	800a7e0 <TIM_Base_SetConfig+0x40>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a3a      	ldr	r2, [pc, #232]	; (800a8c4 <TIM_Base_SetConfig+0x124>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d108      	bne.n	800a7f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a2f      	ldr	r2, [pc, #188]	; (800a8b4 <TIM_Base_SetConfig+0x114>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d01f      	beq.n	800a83a <TIM_Base_SetConfig+0x9a>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a800:	d01b      	beq.n	800a83a <TIM_Base_SetConfig+0x9a>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a2c      	ldr	r2, [pc, #176]	; (800a8b8 <TIM_Base_SetConfig+0x118>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d017      	beq.n	800a83a <TIM_Base_SetConfig+0x9a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a2b      	ldr	r2, [pc, #172]	; (800a8bc <TIM_Base_SetConfig+0x11c>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d013      	beq.n	800a83a <TIM_Base_SetConfig+0x9a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a2a      	ldr	r2, [pc, #168]	; (800a8c0 <TIM_Base_SetConfig+0x120>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d00f      	beq.n	800a83a <TIM_Base_SetConfig+0x9a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a29      	ldr	r2, [pc, #164]	; (800a8c4 <TIM_Base_SetConfig+0x124>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00b      	beq.n	800a83a <TIM_Base_SetConfig+0x9a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a28      	ldr	r2, [pc, #160]	; (800a8c8 <TIM_Base_SetConfig+0x128>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d007      	beq.n	800a83a <TIM_Base_SetConfig+0x9a>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a27      	ldr	r2, [pc, #156]	; (800a8cc <TIM_Base_SetConfig+0x12c>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d003      	beq.n	800a83a <TIM_Base_SetConfig+0x9a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a26      	ldr	r2, [pc, #152]	; (800a8d0 <TIM_Base_SetConfig+0x130>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d108      	bne.n	800a84c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4313      	orrs	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	4313      	orrs	r3, r2
 800a858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	689a      	ldr	r2, [r3, #8]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a10      	ldr	r2, [pc, #64]	; (800a8b4 <TIM_Base_SetConfig+0x114>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d00f      	beq.n	800a898 <TIM_Base_SetConfig+0xf8>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a12      	ldr	r2, [pc, #72]	; (800a8c4 <TIM_Base_SetConfig+0x124>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d00b      	beq.n	800a898 <TIM_Base_SetConfig+0xf8>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a11      	ldr	r2, [pc, #68]	; (800a8c8 <TIM_Base_SetConfig+0x128>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d007      	beq.n	800a898 <TIM_Base_SetConfig+0xf8>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a10      	ldr	r2, [pc, #64]	; (800a8cc <TIM_Base_SetConfig+0x12c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d003      	beq.n	800a898 <TIM_Base_SetConfig+0xf8>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a0f      	ldr	r2, [pc, #60]	; (800a8d0 <TIM_Base_SetConfig+0x130>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d103      	bne.n	800a8a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	691a      	ldr	r2, [r3, #16]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	615a      	str	r2, [r3, #20]
}
 800a8a6:	bf00      	nop
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	40010000 	.word	0x40010000
 800a8b8:	40000400 	.word	0x40000400
 800a8bc:	40000800 	.word	0x40000800
 800a8c0:	40000c00 	.word	0x40000c00
 800a8c4:	40010400 	.word	0x40010400
 800a8c8:	40014000 	.word	0x40014000
 800a8cc:	40014400 	.word	0x40014400
 800a8d0:	40014800 	.word	0x40014800

0800a8d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	f023 0201 	bic.w	r2, r3, #1
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	4b37      	ldr	r3, [pc, #220]	; (800a9dc <TIM_OC1_SetConfig+0x108>)
 800a900:	4013      	ands	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f023 0303 	bic.w	r3, r3, #3
 800a90a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	4313      	orrs	r3, r2
 800a914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f023 0302 	bic.w	r3, r3, #2
 800a91c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	4313      	orrs	r3, r2
 800a926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a2d      	ldr	r2, [pc, #180]	; (800a9e0 <TIM_OC1_SetConfig+0x10c>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d00f      	beq.n	800a950 <TIM_OC1_SetConfig+0x7c>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a2c      	ldr	r2, [pc, #176]	; (800a9e4 <TIM_OC1_SetConfig+0x110>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d00b      	beq.n	800a950 <TIM_OC1_SetConfig+0x7c>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a2b      	ldr	r2, [pc, #172]	; (800a9e8 <TIM_OC1_SetConfig+0x114>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d007      	beq.n	800a950 <TIM_OC1_SetConfig+0x7c>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a2a      	ldr	r2, [pc, #168]	; (800a9ec <TIM_OC1_SetConfig+0x118>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d003      	beq.n	800a950 <TIM_OC1_SetConfig+0x7c>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a29      	ldr	r2, [pc, #164]	; (800a9f0 <TIM_OC1_SetConfig+0x11c>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d10c      	bne.n	800a96a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	f023 0308 	bic.w	r3, r3, #8
 800a956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	4313      	orrs	r3, r2
 800a960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f023 0304 	bic.w	r3, r3, #4
 800a968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a1c      	ldr	r2, [pc, #112]	; (800a9e0 <TIM_OC1_SetConfig+0x10c>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d00f      	beq.n	800a992 <TIM_OC1_SetConfig+0xbe>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a1b      	ldr	r2, [pc, #108]	; (800a9e4 <TIM_OC1_SetConfig+0x110>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00b      	beq.n	800a992 <TIM_OC1_SetConfig+0xbe>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a1a      	ldr	r2, [pc, #104]	; (800a9e8 <TIM_OC1_SetConfig+0x114>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d007      	beq.n	800a992 <TIM_OC1_SetConfig+0xbe>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a19      	ldr	r2, [pc, #100]	; (800a9ec <TIM_OC1_SetConfig+0x118>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d003      	beq.n	800a992 <TIM_OC1_SetConfig+0xbe>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a18      	ldr	r2, [pc, #96]	; (800a9f0 <TIM_OC1_SetConfig+0x11c>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d111      	bne.n	800a9b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	693a      	ldr	r2, [r7, #16]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	621a      	str	r2, [r3, #32]
}
 800a9d0:	bf00      	nop
 800a9d2:	371c      	adds	r7, #28
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	fffeff8f 	.word	0xfffeff8f
 800a9e0:	40010000 	.word	0x40010000
 800a9e4:	40010400 	.word	0x40010400
 800a9e8:	40014000 	.word	0x40014000
 800a9ec:	40014400 	.word	0x40014400
 800a9f0:	40014800 	.word	0x40014800

0800a9f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	f023 0210 	bic.w	r2, r3, #16
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	4b34      	ldr	r3, [pc, #208]	; (800aaf0 <TIM_OC2_SetConfig+0xfc>)
 800aa20:	4013      	ands	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	021b      	lsls	r3, r3, #8
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f023 0320 	bic.w	r3, r3, #32
 800aa3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	011b      	lsls	r3, r3, #4
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a29      	ldr	r2, [pc, #164]	; (800aaf4 <TIM_OC2_SetConfig+0x100>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d003      	beq.n	800aa5c <TIM_OC2_SetConfig+0x68>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a28      	ldr	r2, [pc, #160]	; (800aaf8 <TIM_OC2_SetConfig+0x104>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d10d      	bne.n	800aa78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	011b      	lsls	r3, r3, #4
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a1e      	ldr	r2, [pc, #120]	; (800aaf4 <TIM_OC2_SetConfig+0x100>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d00f      	beq.n	800aaa0 <TIM_OC2_SetConfig+0xac>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a1d      	ldr	r2, [pc, #116]	; (800aaf8 <TIM_OC2_SetConfig+0x104>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d00b      	beq.n	800aaa0 <TIM_OC2_SetConfig+0xac>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a1c      	ldr	r2, [pc, #112]	; (800aafc <TIM_OC2_SetConfig+0x108>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d007      	beq.n	800aaa0 <TIM_OC2_SetConfig+0xac>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a1b      	ldr	r2, [pc, #108]	; (800ab00 <TIM_OC2_SetConfig+0x10c>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d003      	beq.n	800aaa0 <TIM_OC2_SetConfig+0xac>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a1a      	ldr	r2, [pc, #104]	; (800ab04 <TIM_OC2_SetConfig+0x110>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d113      	bne.n	800aac8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	695b      	ldr	r3, [r3, #20]
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	621a      	str	r2, [r3, #32]
}
 800aae2:	bf00      	nop
 800aae4:	371c      	adds	r7, #28
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	feff8fff 	.word	0xfeff8fff
 800aaf4:	40010000 	.word	0x40010000
 800aaf8:	40010400 	.word	0x40010400
 800aafc:	40014000 	.word	0x40014000
 800ab00:	40014400 	.word	0x40014400
 800ab04:	40014800 	.word	0x40014800

0800ab08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f023 0303 	bic.w	r3, r3, #3
 800ab3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	021b      	lsls	r3, r3, #8
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a27      	ldr	r2, [pc, #156]	; (800ac00 <TIM_OC3_SetConfig+0xf8>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d003      	beq.n	800ab6e <TIM_OC3_SetConfig+0x66>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a26      	ldr	r2, [pc, #152]	; (800ac04 <TIM_OC3_SetConfig+0xfc>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d10d      	bne.n	800ab8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	021b      	lsls	r3, r3, #8
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a1c      	ldr	r2, [pc, #112]	; (800ac00 <TIM_OC3_SetConfig+0xf8>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00f      	beq.n	800abb2 <TIM_OC3_SetConfig+0xaa>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a1b      	ldr	r2, [pc, #108]	; (800ac04 <TIM_OC3_SetConfig+0xfc>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d00b      	beq.n	800abb2 <TIM_OC3_SetConfig+0xaa>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a1a      	ldr	r2, [pc, #104]	; (800ac08 <TIM_OC3_SetConfig+0x100>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d007      	beq.n	800abb2 <TIM_OC3_SetConfig+0xaa>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a19      	ldr	r2, [pc, #100]	; (800ac0c <TIM_OC3_SetConfig+0x104>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d003      	beq.n	800abb2 <TIM_OC3_SetConfig+0xaa>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a18      	ldr	r2, [pc, #96]	; (800ac10 <TIM_OC3_SetConfig+0x108>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d113      	bne.n	800abda <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	011b      	lsls	r3, r3, #4
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	011b      	lsls	r3, r3, #4
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685a      	ldr	r2, [r3, #4]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	621a      	str	r2, [r3, #32]
}
 800abf4:	bf00      	nop
 800abf6:	371c      	adds	r7, #28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	40010000 	.word	0x40010000
 800ac04:	40010400 	.word	0x40010400
 800ac08:	40014000 	.word	0x40014000
 800ac0c:	40014400 	.word	0x40014400
 800ac10:	40014800 	.word	0x40014800

0800ac14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b087      	sub	sp, #28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	021b      	lsls	r3, r3, #8
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	4313      	orrs	r3, r2
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	031b      	lsls	r3, r3, #12
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a18      	ldr	r2, [pc, #96]	; (800acd0 <TIM_OC4_SetConfig+0xbc>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d00f      	beq.n	800ac94 <TIM_OC4_SetConfig+0x80>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a17      	ldr	r2, [pc, #92]	; (800acd4 <TIM_OC4_SetConfig+0xc0>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d00b      	beq.n	800ac94 <TIM_OC4_SetConfig+0x80>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a16      	ldr	r2, [pc, #88]	; (800acd8 <TIM_OC4_SetConfig+0xc4>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d007      	beq.n	800ac94 <TIM_OC4_SetConfig+0x80>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a15      	ldr	r2, [pc, #84]	; (800acdc <TIM_OC4_SetConfig+0xc8>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d003      	beq.n	800ac94 <TIM_OC4_SetConfig+0x80>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a14      	ldr	r2, [pc, #80]	; (800ace0 <TIM_OC4_SetConfig+0xcc>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d109      	bne.n	800aca8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	019b      	lsls	r3, r3, #6
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	685a      	ldr	r2, [r3, #4]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	621a      	str	r2, [r3, #32]
}
 800acc2:	bf00      	nop
 800acc4:	371c      	adds	r7, #28
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	40010000 	.word	0x40010000
 800acd4:	40010400 	.word	0x40010400
 800acd8:	40014000 	.word	0x40014000
 800acdc:	40014400 	.word	0x40014400
 800ace0:	40014800 	.word	0x40014800

0800ace4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	041b      	lsls	r3, r3, #16
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a17      	ldr	r2, [pc, #92]	; (800ad94 <TIM_OC5_SetConfig+0xb0>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d00f      	beq.n	800ad5a <TIM_OC5_SetConfig+0x76>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a16      	ldr	r2, [pc, #88]	; (800ad98 <TIM_OC5_SetConfig+0xb4>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d00b      	beq.n	800ad5a <TIM_OC5_SetConfig+0x76>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a15      	ldr	r2, [pc, #84]	; (800ad9c <TIM_OC5_SetConfig+0xb8>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d007      	beq.n	800ad5a <TIM_OC5_SetConfig+0x76>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a14      	ldr	r2, [pc, #80]	; (800ada0 <TIM_OC5_SetConfig+0xbc>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d003      	beq.n	800ad5a <TIM_OC5_SetConfig+0x76>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a13      	ldr	r2, [pc, #76]	; (800ada4 <TIM_OC5_SetConfig+0xc0>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d109      	bne.n	800ad6e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	695b      	ldr	r3, [r3, #20]
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	697a      	ldr	r2, [r7, #20]
 800ad72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	621a      	str	r2, [r3, #32]
}
 800ad88:	bf00      	nop
 800ad8a:	371c      	adds	r7, #28
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	40010000 	.word	0x40010000
 800ad98:	40010400 	.word	0x40010400
 800ad9c:	40014000 	.word	0x40014000
 800ada0:	40014400 	.word	0x40014400
 800ada4:	40014800 	.word	0x40014800

0800ada8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800add6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	021b      	lsls	r3, r3, #8
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	051b      	lsls	r3, r3, #20
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a18      	ldr	r2, [pc, #96]	; (800ae5c <TIM_OC6_SetConfig+0xb4>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00f      	beq.n	800ae20 <TIM_OC6_SetConfig+0x78>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a17      	ldr	r2, [pc, #92]	; (800ae60 <TIM_OC6_SetConfig+0xb8>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d00b      	beq.n	800ae20 <TIM_OC6_SetConfig+0x78>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a16      	ldr	r2, [pc, #88]	; (800ae64 <TIM_OC6_SetConfig+0xbc>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d007      	beq.n	800ae20 <TIM_OC6_SetConfig+0x78>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a15      	ldr	r2, [pc, #84]	; (800ae68 <TIM_OC6_SetConfig+0xc0>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d003      	beq.n	800ae20 <TIM_OC6_SetConfig+0x78>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a14      	ldr	r2, [pc, #80]	; (800ae6c <TIM_OC6_SetConfig+0xc4>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d109      	bne.n	800ae34 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ae26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	029b      	lsls	r3, r3, #10
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	621a      	str	r2, [r3, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	40010000 	.word	0x40010000
 800ae60:	40010400 	.word	0x40010400
 800ae64:	40014000 	.word	0x40014000
 800ae68:	40014400 	.word	0x40014400
 800ae6c:	40014800 	.word	0x40014800

0800ae70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a1b      	ldr	r3, [r3, #32]
 800ae80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	f023 0201 	bic.w	r2, r3, #1
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	011b      	lsls	r3, r3, #4
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f023 030a 	bic.w	r3, r3, #10
 800aeac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	621a      	str	r2, [r3, #32]
}
 800aec2:	bf00      	nop
 800aec4:	371c      	adds	r7, #28
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aece:	b480      	push	{r7}
 800aed0:	b087      	sub	sp, #28
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	f023 0210 	bic.w	r2, r3, #16
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	031b      	lsls	r3, r3, #12
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	4313      	orrs	r3, r2
 800af02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4313      	orrs	r3, r2
 800af14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	621a      	str	r2, [r3, #32]
}
 800af22:	bf00      	nop
 800af24:	371c      	adds	r7, #28
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
	...

0800af30 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	4b09      	ldr	r3, [pc, #36]	; (800af68 <TIM_ITRx_SetConfig+0x38>)
 800af44:	4013      	ands	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	f043 0307 	orr.w	r3, r3, #7
 800af52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	609a      	str	r2, [r3, #8]
}
 800af5a:	bf00      	nop
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	ffcfff8f 	.word	0xffcfff8f

0800af6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
 800af78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	021a      	lsls	r2, r3, #8
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	431a      	orrs	r2, r3
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	4313      	orrs	r3, r2
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	4313      	orrs	r3, r2
 800af98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	609a      	str	r2, [r3, #8]
}
 800afa0:	bf00      	nop
 800afa2:	371c      	adds	r7, #28
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	f003 031f 	and.w	r3, r3, #31
 800afbe:	2201      	movs	r2, #1
 800afc0:	fa02 f303 	lsl.w	r3, r2, r3
 800afc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6a1a      	ldr	r2, [r3, #32]
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	43db      	mvns	r3, r3
 800afce:	401a      	ands	r2, r3
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6a1a      	ldr	r2, [r3, #32]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f003 031f 	and.w	r3, r3, #31
 800afde:	6879      	ldr	r1, [r7, #4]
 800afe0:	fa01 f303 	lsl.w	r3, r1, r3
 800afe4:	431a      	orrs	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	621a      	str	r2, [r3, #32]
}
 800afea:	bf00      	nop
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
	...

0800aff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d101      	bne.n	800b010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b00c:	2302      	movs	r3, #2
 800b00e:	e068      	b.n	800b0e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a2e      	ldr	r2, [pc, #184]	; (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d004      	beq.n	800b044 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a2d      	ldr	r2, [pc, #180]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d108      	bne.n	800b056 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b04a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	4313      	orrs	r3, r2
 800b054:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b05c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	4313      	orrs	r3, r2
 800b066:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a1e      	ldr	r2, [pc, #120]	; (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d01d      	beq.n	800b0b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b082:	d018      	beq.n	800b0b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a1b      	ldr	r2, [pc, #108]	; (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d013      	beq.n	800b0b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a1a      	ldr	r2, [pc, #104]	; (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d00e      	beq.n	800b0b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a18      	ldr	r2, [pc, #96]	; (800b100 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d009      	beq.n	800b0b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a13      	ldr	r2, [pc, #76]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d004      	beq.n	800b0b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a14      	ldr	r2, [pc, #80]	; (800b104 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d10c      	bne.n	800b0d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	40010000 	.word	0x40010000
 800b0f4:	40010400 	.word	0x40010400
 800b0f8:	40000400 	.word	0x40000400
 800b0fc:	40000800 	.word	0x40000800
 800b100:	40000c00 	.word	0x40000c00
 800b104:	40001800 	.word	0x40001800

0800b108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d101      	bne.n	800b124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b120:	2302      	movs	r3, #2
 800b122:	e065      	b.n	800b1f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	4313      	orrs	r3, r2
 800b138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	041b      	lsls	r3, r3, #16
 800b19a:	4313      	orrs	r3, r2
 800b19c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a16      	ldr	r2, [pc, #88]	; (800b1fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d004      	beq.n	800b1b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a14      	ldr	r2, [pc, #80]	; (800b200 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d115      	bne.n	800b1de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	051b      	lsls	r3, r3, #20
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	40010000 	.word	0x40010000
 800b200:	40010400 	.word	0x40010400

0800b204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e042      	b.n	800b29c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d106      	bne.n	800b22e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7f6 fd57 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2224      	movs	r2, #36	; 0x24
 800b232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f022 0201 	bic.w	r2, r2, #1
 800b244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fb06 	bl	800b858 <UART_SetConfig>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d101      	bne.n	800b256 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	e022      	b.n	800b29c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f001 f85a 	bl	800c318 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	689a      	ldr	r2, [r3, #8]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f042 0201 	orr.w	r2, r2, #1
 800b292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f001 f8e1 	bl	800c45c <UART_CheckIdleState>
 800b29a:	4603      	mov	r3, r0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b088      	sub	sp, #32
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b2c4:	69fa      	ldr	r2, [r7, #28]
 800b2c6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d118      	bne.n	800b306 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	f003 0320 	and.w	r3, r3, #32
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d013      	beq.n	800b306 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	f003 0320 	and.w	r3, r3, #32
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d104      	bne.n	800b2f2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d009      	beq.n	800b306 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f000 8282 	beq.w	800b800 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	4798      	blx	r3
      }
      return;
 800b304:	e27c      	b.n	800b800 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 80ef 	beq.w	800b4ec <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	4b73      	ldr	r3, [pc, #460]	; (800b4e0 <HAL_UART_IRQHandler+0x23c>)
 800b312:	4013      	ands	r3, r2
 800b314:	2b00      	cmp	r3, #0
 800b316:	d105      	bne.n	800b324 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b318:	69ba      	ldr	r2, [r7, #24]
 800b31a:	4b72      	ldr	r3, [pc, #456]	; (800b4e4 <HAL_UART_IRQHandler+0x240>)
 800b31c:	4013      	ands	r3, r2
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f000 80e4 	beq.w	800b4ec <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	f003 0301 	and.w	r3, r3, #1
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d010      	beq.n	800b350 <HAL_UART_IRQHandler+0xac>
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00b      	beq.n	800b350 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2201      	movs	r2, #1
 800b33e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b346:	f043 0201 	orr.w	r2, r3, #1
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d010      	beq.n	800b37c <HAL_UART_IRQHandler+0xd8>
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	f003 0301 	and.w	r3, r3, #1
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00b      	beq.n	800b37c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2202      	movs	r2, #2
 800b36a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b372:	f043 0204 	orr.w	r2, r3, #4
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	f003 0304 	and.w	r3, r3, #4
 800b382:	2b00      	cmp	r3, #0
 800b384:	d010      	beq.n	800b3a8 <HAL_UART_IRQHandler+0x104>
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00b      	beq.n	800b3a8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2204      	movs	r2, #4
 800b396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b39e:	f043 0202 	orr.w	r2, r3, #2
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	f003 0308 	and.w	r3, r3, #8
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d015      	beq.n	800b3de <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	f003 0320 	and.w	r3, r3, #32
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d104      	bne.n	800b3c6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b3bc:	697a      	ldr	r2, [r7, #20]
 800b3be:	4b48      	ldr	r3, [pc, #288]	; (800b4e0 <HAL_UART_IRQHandler+0x23c>)
 800b3c0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00b      	beq.n	800b3de <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2208      	movs	r2, #8
 800b3cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3d4:	f043 0208 	orr.w	r2, r3, #8
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d011      	beq.n	800b40c <HAL_UART_IRQHandler+0x168>
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00c      	beq.n	800b40c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b402:	f043 0220 	orr.w	r2, r3, #32
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 81f6 	beq.w	800b804 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	f003 0320 	and.w	r3, r3, #32
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d011      	beq.n	800b446 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	f003 0320 	and.w	r3, r3, #32
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b432:	2b00      	cmp	r3, #0
 800b434:	d007      	beq.n	800b446 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b44c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b458:	2b40      	cmp	r3, #64	; 0x40
 800b45a:	d004      	beq.n	800b466 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b462:	2b00      	cmp	r3, #0
 800b464:	d031      	beq.n	800b4ca <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f001 f8c4 	bl	800c5f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b476:	2b40      	cmp	r3, #64	; 0x40
 800b478:	d123      	bne.n	800b4c2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	689a      	ldr	r2, [r3, #8]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b488:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d013      	beq.n	800b4ba <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b496:	4a14      	ldr	r2, [pc, #80]	; (800b4e8 <HAL_UART_IRQHandler+0x244>)
 800b498:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7f8 f8e6 	bl	8003670 <HAL_DMA_Abort_IT>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d017      	beq.n	800b4da <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4b8:	e00f      	b.n	800b4da <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f9b6 	bl	800b82c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4c0:	e00b      	b.n	800b4da <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9b2 	bl	800b82c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4c8:	e007      	b.n	800b4da <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f9ae 	bl	800b82c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b4d8:	e194      	b.n	800b804 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4da:	bf00      	nop
    return;
 800b4dc:	e192      	b.n	800b804 <HAL_UART_IRQHandler+0x560>
 800b4de:	bf00      	nop
 800b4e0:	10000001 	.word	0x10000001
 800b4e4:	04000120 	.word	0x04000120
 800b4e8:	0800c659 	.word	0x0800c659

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	f040 810f 	bne.w	800b714 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	f003 0310 	and.w	r3, r3, #16
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f000 8109 	beq.w	800b714 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	f003 0310 	and.w	r3, r3, #16
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 8103 	beq.w	800b714 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2210      	movs	r2, #16
 800b514:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b520:	2b40      	cmp	r3, #64	; 0x40
 800b522:	f040 80bb 	bne.w	800b69c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a96      	ldr	r2, [pc, #600]	; (800b788 <HAL_UART_IRQHandler+0x4e4>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d059      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a94      	ldr	r2, [pc, #592]	; (800b78c <HAL_UART_IRQHandler+0x4e8>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d053      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a92      	ldr	r2, [pc, #584]	; (800b790 <HAL_UART_IRQHandler+0x4ec>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d04d      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a90      	ldr	r2, [pc, #576]	; (800b794 <HAL_UART_IRQHandler+0x4f0>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d047      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a8e      	ldr	r2, [pc, #568]	; (800b798 <HAL_UART_IRQHandler+0x4f4>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d041      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a8c      	ldr	r2, [pc, #560]	; (800b79c <HAL_UART_IRQHandler+0x4f8>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d03b      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a8a      	ldr	r2, [pc, #552]	; (800b7a0 <HAL_UART_IRQHandler+0x4fc>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d035      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a88      	ldr	r2, [pc, #544]	; (800b7a4 <HAL_UART_IRQHandler+0x500>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d02f      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a86      	ldr	r2, [pc, #536]	; (800b7a8 <HAL_UART_IRQHandler+0x504>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d029      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a84      	ldr	r2, [pc, #528]	; (800b7ac <HAL_UART_IRQHandler+0x508>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d023      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a82      	ldr	r2, [pc, #520]	; (800b7b0 <HAL_UART_IRQHandler+0x50c>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d01d      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a80      	ldr	r2, [pc, #512]	; (800b7b4 <HAL_UART_IRQHandler+0x510>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d017      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a7e      	ldr	r2, [pc, #504]	; (800b7b8 <HAL_UART_IRQHandler+0x514>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d011      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a7c      	ldr	r2, [pc, #496]	; (800b7bc <HAL_UART_IRQHandler+0x518>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d00b      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a7a      	ldr	r2, [pc, #488]	; (800b7c0 <HAL_UART_IRQHandler+0x51c>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d005      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x342>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a78      	ldr	r2, [pc, #480]	; (800b7c4 <HAL_UART_IRQHandler+0x520>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d105      	bne.n	800b5f2 <HAL_UART_IRQHandler+0x34e>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	e004      	b.n	800b5fc <HAL_UART_IRQHandler+0x358>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b5fe:	893b      	ldrh	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 8101 	beq.w	800b808 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b60c:	893a      	ldrh	r2, [r7, #8]
 800b60e:	429a      	cmp	r2, r3
 800b610:	f080 80fa 	bcs.w	800b808 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	893a      	ldrh	r2, [r7, #8]
 800b618:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b626:	d02b      	beq.n	800b680 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b636:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	689a      	ldr	r2, [r3, #8]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f022 0201 	bic.w	r2, r2, #1
 800b646:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689a      	ldr	r2, [r3, #8]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b656:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2220      	movs	r2, #32
 800b65c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f022 0210 	bic.w	r2, r2, #16
 800b674:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7f7 fcda 	bl	8003034 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	b29b      	uxth	r3, r3
 800b692:	4619      	mov	r1, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f8d3 	bl	800b840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b69a:	e0b5      	b.n	800b808 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f000 80a8 	beq.w	800b80c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b6bc:	897b      	ldrh	r3, [r7, #10]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 80a4 	beq.w	800b80c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b6d2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6899      	ldr	r1, [r3, #8]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	4b3a      	ldr	r3, [pc, #232]	; (800b7c8 <HAL_UART_IRQHandler+0x524>)
 800b6e0:	400b      	ands	r3, r1
 800b6e2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2220      	movs	r2, #32
 800b6e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f022 0210 	bic.w	r2, r2, #16
 800b706:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b708:	897b      	ldrh	r3, [r7, #10]
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f897 	bl	800b840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b712:	e07b      	b.n	800b80c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00d      	beq.n	800b73a <HAL_UART_IRQHandler+0x496>
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d008      	beq.n	800b73a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b730:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 ffc0 	bl	800c6b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b738:	e06b      	b.n	800b812 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b740:	2b00      	cmp	r3, #0
 800b742:	d012      	beq.n	800b76a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d104      	bne.n	800b758 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b754:	2b00      	cmp	r3, #0
 800b756:	d008      	beq.n	800b76a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d057      	beq.n	800b810 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	4798      	blx	r3
    }
    return;
 800b768:	e052      	b.n	800b810 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b770:	2b00      	cmp	r3, #0
 800b772:	d02b      	beq.n	800b7cc <HAL_UART_IRQHandler+0x528>
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d026      	beq.n	800b7cc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 ff80 	bl	800c684 <UART_EndTransmit_IT>
    return;
 800b784:	e045      	b.n	800b812 <HAL_UART_IRQHandler+0x56e>
 800b786:	bf00      	nop
 800b788:	40020010 	.word	0x40020010
 800b78c:	40020028 	.word	0x40020028
 800b790:	40020040 	.word	0x40020040
 800b794:	40020058 	.word	0x40020058
 800b798:	40020070 	.word	0x40020070
 800b79c:	40020088 	.word	0x40020088
 800b7a0:	400200a0 	.word	0x400200a0
 800b7a4:	400200b8 	.word	0x400200b8
 800b7a8:	40020410 	.word	0x40020410
 800b7ac:	40020428 	.word	0x40020428
 800b7b0:	40020440 	.word	0x40020440
 800b7b4:	40020458 	.word	0x40020458
 800b7b8:	40020470 	.word	0x40020470
 800b7bc:	40020488 	.word	0x40020488
 800b7c0:	400204a0 	.word	0x400204a0
 800b7c4:	400204b8 	.word	0x400204b8
 800b7c8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d008      	beq.n	800b7e8 <HAL_UART_IRQHandler+0x544>
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d003      	beq.n	800b7e8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 ff7d 	bl	800c6e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7e6:	e014      	b.n	800b812 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00f      	beq.n	800b812 <HAL_UART_IRQHandler+0x56e>
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	da0c      	bge.n	800b812 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 ff67 	bl	800c6cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7fe:	e008      	b.n	800b812 <HAL_UART_IRQHandler+0x56e>
      return;
 800b800:	bf00      	nop
 800b802:	e006      	b.n	800b812 <HAL_UART_IRQHandler+0x56e>
    return;
 800b804:	bf00      	nop
 800b806:	e004      	b.n	800b812 <HAL_UART_IRQHandler+0x56e>
      return;
 800b808:	bf00      	nop
 800b80a:	e002      	b.n	800b812 <HAL_UART_IRQHandler+0x56e>
      return;
 800b80c:	bf00      	nop
 800b80e:	e000      	b.n	800b812 <HAL_UART_IRQHandler+0x56e>
    return;
 800b810:	bf00      	nop
  }
}
 800b812:	3720      	adds	r7, #32
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b834:	bf00      	nop
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b858:	b5b0      	push	{r4, r5, r7, lr}
 800b85a:	b08e      	sub	sp, #56	; 0x38
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b860:	2300      	movs	r3, #0
 800b862:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689a      	ldr	r2, [r3, #8]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	431a      	orrs	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	431a      	orrs	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	4bbf      	ldr	r3, [pc, #764]	; (800bb84 <UART_SetConfig+0x32c>)
 800b886:	4013      	ands	r3, r2
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	6812      	ldr	r2, [r2, #0]
 800b88c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b88e:	430b      	orrs	r3, r1
 800b890:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	68da      	ldr	r2, [r3, #12]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	430a      	orrs	r2, r1
 800b8a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4ab5      	ldr	r2, [pc, #724]	; (800bb88 <UART_SetConfig+0x330>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d004      	beq.n	800b8c2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a1b      	ldr	r3, [r3, #32]
 800b8bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	689a      	ldr	r2, [r3, #8]
 800b8c8:	4bb0      	ldr	r3, [pc, #704]	; (800bb8c <UART_SetConfig+0x334>)
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	6812      	ldr	r2, [r2, #0]
 800b8d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8d2:	430b      	orrs	r3, r1
 800b8d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	f023 010f 	bic.w	r1, r3, #15
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	430a      	orrs	r2, r1
 800b8ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4aa7      	ldr	r2, [pc, #668]	; (800bb90 <UART_SetConfig+0x338>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d176      	bne.n	800b9e4 <UART_SetConfig+0x18c>
 800b8f6:	4ba7      	ldr	r3, [pc, #668]	; (800bb94 <UART_SetConfig+0x33c>)
 800b8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8fe:	2b28      	cmp	r3, #40	; 0x28
 800b900:	d86c      	bhi.n	800b9dc <UART_SetConfig+0x184>
 800b902:	a201      	add	r2, pc, #4	; (adr r2, 800b908 <UART_SetConfig+0xb0>)
 800b904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b908:	0800b9ad 	.word	0x0800b9ad
 800b90c:	0800b9dd 	.word	0x0800b9dd
 800b910:	0800b9dd 	.word	0x0800b9dd
 800b914:	0800b9dd 	.word	0x0800b9dd
 800b918:	0800b9dd 	.word	0x0800b9dd
 800b91c:	0800b9dd 	.word	0x0800b9dd
 800b920:	0800b9dd 	.word	0x0800b9dd
 800b924:	0800b9dd 	.word	0x0800b9dd
 800b928:	0800b9b5 	.word	0x0800b9b5
 800b92c:	0800b9dd 	.word	0x0800b9dd
 800b930:	0800b9dd 	.word	0x0800b9dd
 800b934:	0800b9dd 	.word	0x0800b9dd
 800b938:	0800b9dd 	.word	0x0800b9dd
 800b93c:	0800b9dd 	.word	0x0800b9dd
 800b940:	0800b9dd 	.word	0x0800b9dd
 800b944:	0800b9dd 	.word	0x0800b9dd
 800b948:	0800b9bd 	.word	0x0800b9bd
 800b94c:	0800b9dd 	.word	0x0800b9dd
 800b950:	0800b9dd 	.word	0x0800b9dd
 800b954:	0800b9dd 	.word	0x0800b9dd
 800b958:	0800b9dd 	.word	0x0800b9dd
 800b95c:	0800b9dd 	.word	0x0800b9dd
 800b960:	0800b9dd 	.word	0x0800b9dd
 800b964:	0800b9dd 	.word	0x0800b9dd
 800b968:	0800b9c5 	.word	0x0800b9c5
 800b96c:	0800b9dd 	.word	0x0800b9dd
 800b970:	0800b9dd 	.word	0x0800b9dd
 800b974:	0800b9dd 	.word	0x0800b9dd
 800b978:	0800b9dd 	.word	0x0800b9dd
 800b97c:	0800b9dd 	.word	0x0800b9dd
 800b980:	0800b9dd 	.word	0x0800b9dd
 800b984:	0800b9dd 	.word	0x0800b9dd
 800b988:	0800b9cd 	.word	0x0800b9cd
 800b98c:	0800b9dd 	.word	0x0800b9dd
 800b990:	0800b9dd 	.word	0x0800b9dd
 800b994:	0800b9dd 	.word	0x0800b9dd
 800b998:	0800b9dd 	.word	0x0800b9dd
 800b99c:	0800b9dd 	.word	0x0800b9dd
 800b9a0:	0800b9dd 	.word	0x0800b9dd
 800b9a4:	0800b9dd 	.word	0x0800b9dd
 800b9a8:	0800b9d5 	.word	0x0800b9d5
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9b2:	e222      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800b9b4:	2304      	movs	r3, #4
 800b9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ba:	e21e      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800b9bc:	2308      	movs	r3, #8
 800b9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9c2:	e21a      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800b9c4:	2310      	movs	r3, #16
 800b9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ca:	e216      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800b9cc:	2320      	movs	r3, #32
 800b9ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9d2:	e212      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800b9d4:	2340      	movs	r3, #64	; 0x40
 800b9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9da:	e20e      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800b9dc:	2380      	movs	r3, #128	; 0x80
 800b9de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9e2:	e20a      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a6b      	ldr	r2, [pc, #428]	; (800bb98 <UART_SetConfig+0x340>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d130      	bne.n	800ba50 <UART_SetConfig+0x1f8>
 800b9ee:	4b69      	ldr	r3, [pc, #420]	; (800bb94 <UART_SetConfig+0x33c>)
 800b9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f2:	f003 0307 	and.w	r3, r3, #7
 800b9f6:	2b05      	cmp	r3, #5
 800b9f8:	d826      	bhi.n	800ba48 <UART_SetConfig+0x1f0>
 800b9fa:	a201      	add	r2, pc, #4	; (adr r2, 800ba00 <UART_SetConfig+0x1a8>)
 800b9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba00:	0800ba19 	.word	0x0800ba19
 800ba04:	0800ba21 	.word	0x0800ba21
 800ba08:	0800ba29 	.word	0x0800ba29
 800ba0c:	0800ba31 	.word	0x0800ba31
 800ba10:	0800ba39 	.word	0x0800ba39
 800ba14:	0800ba41 	.word	0x0800ba41
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba1e:	e1ec      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800ba20:	2304      	movs	r3, #4
 800ba22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba26:	e1e8      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800ba28:	2308      	movs	r3, #8
 800ba2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba2e:	e1e4      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800ba30:	2310      	movs	r3, #16
 800ba32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba36:	e1e0      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800ba38:	2320      	movs	r3, #32
 800ba3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba3e:	e1dc      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800ba40:	2340      	movs	r3, #64	; 0x40
 800ba42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba46:	e1d8      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800ba48:	2380      	movs	r3, #128	; 0x80
 800ba4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba4e:	e1d4      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a51      	ldr	r2, [pc, #324]	; (800bb9c <UART_SetConfig+0x344>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d130      	bne.n	800babc <UART_SetConfig+0x264>
 800ba5a:	4b4e      	ldr	r3, [pc, #312]	; (800bb94 <UART_SetConfig+0x33c>)
 800ba5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5e:	f003 0307 	and.w	r3, r3, #7
 800ba62:	2b05      	cmp	r3, #5
 800ba64:	d826      	bhi.n	800bab4 <UART_SetConfig+0x25c>
 800ba66:	a201      	add	r2, pc, #4	; (adr r2, 800ba6c <UART_SetConfig+0x214>)
 800ba68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6c:	0800ba85 	.word	0x0800ba85
 800ba70:	0800ba8d 	.word	0x0800ba8d
 800ba74:	0800ba95 	.word	0x0800ba95
 800ba78:	0800ba9d 	.word	0x0800ba9d
 800ba7c:	0800baa5 	.word	0x0800baa5
 800ba80:	0800baad 	.word	0x0800baad
 800ba84:	2300      	movs	r3, #0
 800ba86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba8a:	e1b6      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800ba8c:	2304      	movs	r3, #4
 800ba8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba92:	e1b2      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800ba94:	2308      	movs	r3, #8
 800ba96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba9a:	e1ae      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800ba9c:	2310      	movs	r3, #16
 800ba9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa2:	e1aa      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800baa4:	2320      	movs	r3, #32
 800baa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baaa:	e1a6      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800baac:	2340      	movs	r3, #64	; 0x40
 800baae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab2:	e1a2      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bab4:	2380      	movs	r3, #128	; 0x80
 800bab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baba:	e19e      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a37      	ldr	r2, [pc, #220]	; (800bba0 <UART_SetConfig+0x348>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d130      	bne.n	800bb28 <UART_SetConfig+0x2d0>
 800bac6:	4b33      	ldr	r3, [pc, #204]	; (800bb94 <UART_SetConfig+0x33c>)
 800bac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baca:	f003 0307 	and.w	r3, r3, #7
 800bace:	2b05      	cmp	r3, #5
 800bad0:	d826      	bhi.n	800bb20 <UART_SetConfig+0x2c8>
 800bad2:	a201      	add	r2, pc, #4	; (adr r2, 800bad8 <UART_SetConfig+0x280>)
 800bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad8:	0800baf1 	.word	0x0800baf1
 800badc:	0800baf9 	.word	0x0800baf9
 800bae0:	0800bb01 	.word	0x0800bb01
 800bae4:	0800bb09 	.word	0x0800bb09
 800bae8:	0800bb11 	.word	0x0800bb11
 800baec:	0800bb19 	.word	0x0800bb19
 800baf0:	2300      	movs	r3, #0
 800baf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baf6:	e180      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800baf8:	2304      	movs	r3, #4
 800bafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bafe:	e17c      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb00:	2308      	movs	r3, #8
 800bb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb06:	e178      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb08:	2310      	movs	r3, #16
 800bb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb0e:	e174      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb10:	2320      	movs	r3, #32
 800bb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb16:	e170      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb18:	2340      	movs	r3, #64	; 0x40
 800bb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1e:	e16c      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb20:	2380      	movs	r3, #128	; 0x80
 800bb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb26:	e168      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a1d      	ldr	r2, [pc, #116]	; (800bba4 <UART_SetConfig+0x34c>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d142      	bne.n	800bbb8 <UART_SetConfig+0x360>
 800bb32:	4b18      	ldr	r3, [pc, #96]	; (800bb94 <UART_SetConfig+0x33c>)
 800bb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb36:	f003 0307 	and.w	r3, r3, #7
 800bb3a:	2b05      	cmp	r3, #5
 800bb3c:	d838      	bhi.n	800bbb0 <UART_SetConfig+0x358>
 800bb3e:	a201      	add	r2, pc, #4	; (adr r2, 800bb44 <UART_SetConfig+0x2ec>)
 800bb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb44:	0800bb5d 	.word	0x0800bb5d
 800bb48:	0800bb65 	.word	0x0800bb65
 800bb4c:	0800bb6d 	.word	0x0800bb6d
 800bb50:	0800bb75 	.word	0x0800bb75
 800bb54:	0800bb7d 	.word	0x0800bb7d
 800bb58:	0800bba9 	.word	0x0800bba9
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb62:	e14a      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb64:	2304      	movs	r3, #4
 800bb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb6a:	e146      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb6c:	2308      	movs	r3, #8
 800bb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb72:	e142      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb74:	2310      	movs	r3, #16
 800bb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb7a:	e13e      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb7c:	2320      	movs	r3, #32
 800bb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb82:	e13a      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bb84:	cfff69f3 	.word	0xcfff69f3
 800bb88:	58000c00 	.word	0x58000c00
 800bb8c:	11fff4ff 	.word	0x11fff4ff
 800bb90:	40011000 	.word	0x40011000
 800bb94:	58024400 	.word	0x58024400
 800bb98:	40004400 	.word	0x40004400
 800bb9c:	40004800 	.word	0x40004800
 800bba0:	40004c00 	.word	0x40004c00
 800bba4:	40005000 	.word	0x40005000
 800bba8:	2340      	movs	r3, #64	; 0x40
 800bbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbae:	e124      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bbb0:	2380      	movs	r3, #128	; 0x80
 800bbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbb6:	e120      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4acc      	ldr	r2, [pc, #816]	; (800bef0 <UART_SetConfig+0x698>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d176      	bne.n	800bcb0 <UART_SetConfig+0x458>
 800bbc2:	4bcc      	ldr	r3, [pc, #816]	; (800bef4 <UART_SetConfig+0x69c>)
 800bbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbca:	2b28      	cmp	r3, #40	; 0x28
 800bbcc:	d86c      	bhi.n	800bca8 <UART_SetConfig+0x450>
 800bbce:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <UART_SetConfig+0x37c>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bc79 	.word	0x0800bc79
 800bbd8:	0800bca9 	.word	0x0800bca9
 800bbdc:	0800bca9 	.word	0x0800bca9
 800bbe0:	0800bca9 	.word	0x0800bca9
 800bbe4:	0800bca9 	.word	0x0800bca9
 800bbe8:	0800bca9 	.word	0x0800bca9
 800bbec:	0800bca9 	.word	0x0800bca9
 800bbf0:	0800bca9 	.word	0x0800bca9
 800bbf4:	0800bc81 	.word	0x0800bc81
 800bbf8:	0800bca9 	.word	0x0800bca9
 800bbfc:	0800bca9 	.word	0x0800bca9
 800bc00:	0800bca9 	.word	0x0800bca9
 800bc04:	0800bca9 	.word	0x0800bca9
 800bc08:	0800bca9 	.word	0x0800bca9
 800bc0c:	0800bca9 	.word	0x0800bca9
 800bc10:	0800bca9 	.word	0x0800bca9
 800bc14:	0800bc89 	.word	0x0800bc89
 800bc18:	0800bca9 	.word	0x0800bca9
 800bc1c:	0800bca9 	.word	0x0800bca9
 800bc20:	0800bca9 	.word	0x0800bca9
 800bc24:	0800bca9 	.word	0x0800bca9
 800bc28:	0800bca9 	.word	0x0800bca9
 800bc2c:	0800bca9 	.word	0x0800bca9
 800bc30:	0800bca9 	.word	0x0800bca9
 800bc34:	0800bc91 	.word	0x0800bc91
 800bc38:	0800bca9 	.word	0x0800bca9
 800bc3c:	0800bca9 	.word	0x0800bca9
 800bc40:	0800bca9 	.word	0x0800bca9
 800bc44:	0800bca9 	.word	0x0800bca9
 800bc48:	0800bca9 	.word	0x0800bca9
 800bc4c:	0800bca9 	.word	0x0800bca9
 800bc50:	0800bca9 	.word	0x0800bca9
 800bc54:	0800bc99 	.word	0x0800bc99
 800bc58:	0800bca9 	.word	0x0800bca9
 800bc5c:	0800bca9 	.word	0x0800bca9
 800bc60:	0800bca9 	.word	0x0800bca9
 800bc64:	0800bca9 	.word	0x0800bca9
 800bc68:	0800bca9 	.word	0x0800bca9
 800bc6c:	0800bca9 	.word	0x0800bca9
 800bc70:	0800bca9 	.word	0x0800bca9
 800bc74:	0800bca1 	.word	0x0800bca1
 800bc78:	2301      	movs	r3, #1
 800bc7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc7e:	e0bc      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bc80:	2304      	movs	r3, #4
 800bc82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc86:	e0b8      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bc88:	2308      	movs	r3, #8
 800bc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc8e:	e0b4      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bc90:	2310      	movs	r3, #16
 800bc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc96:	e0b0      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bc98:	2320      	movs	r3, #32
 800bc9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9e:	e0ac      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bca0:	2340      	movs	r3, #64	; 0x40
 800bca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca6:	e0a8      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bca8:	2380      	movs	r3, #128	; 0x80
 800bcaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcae:	e0a4      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a90      	ldr	r2, [pc, #576]	; (800bef8 <UART_SetConfig+0x6a0>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d130      	bne.n	800bd1c <UART_SetConfig+0x4c4>
 800bcba:	4b8e      	ldr	r3, [pc, #568]	; (800bef4 <UART_SetConfig+0x69c>)
 800bcbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcbe:	f003 0307 	and.w	r3, r3, #7
 800bcc2:	2b05      	cmp	r3, #5
 800bcc4:	d826      	bhi.n	800bd14 <UART_SetConfig+0x4bc>
 800bcc6:	a201      	add	r2, pc, #4	; (adr r2, 800bccc <UART_SetConfig+0x474>)
 800bcc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bccc:	0800bce5 	.word	0x0800bce5
 800bcd0:	0800bced 	.word	0x0800bced
 800bcd4:	0800bcf5 	.word	0x0800bcf5
 800bcd8:	0800bcfd 	.word	0x0800bcfd
 800bcdc:	0800bd05 	.word	0x0800bd05
 800bce0:	0800bd0d 	.word	0x0800bd0d
 800bce4:	2300      	movs	r3, #0
 800bce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcea:	e086      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bcec:	2304      	movs	r3, #4
 800bcee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcf2:	e082      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bcf4:	2308      	movs	r3, #8
 800bcf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfa:	e07e      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bcfc:	2310      	movs	r3, #16
 800bcfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd02:	e07a      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd04:	2320      	movs	r3, #32
 800bd06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0a:	e076      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd0c:	2340      	movs	r3, #64	; 0x40
 800bd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd12:	e072      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd14:	2380      	movs	r3, #128	; 0x80
 800bd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd1a:	e06e      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a76      	ldr	r2, [pc, #472]	; (800befc <UART_SetConfig+0x6a4>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d130      	bne.n	800bd88 <UART_SetConfig+0x530>
 800bd26:	4b73      	ldr	r3, [pc, #460]	; (800bef4 <UART_SetConfig+0x69c>)
 800bd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd2a:	f003 0307 	and.w	r3, r3, #7
 800bd2e:	2b05      	cmp	r3, #5
 800bd30:	d826      	bhi.n	800bd80 <UART_SetConfig+0x528>
 800bd32:	a201      	add	r2, pc, #4	; (adr r2, 800bd38 <UART_SetConfig+0x4e0>)
 800bd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd38:	0800bd51 	.word	0x0800bd51
 800bd3c:	0800bd59 	.word	0x0800bd59
 800bd40:	0800bd61 	.word	0x0800bd61
 800bd44:	0800bd69 	.word	0x0800bd69
 800bd48:	0800bd71 	.word	0x0800bd71
 800bd4c:	0800bd79 	.word	0x0800bd79
 800bd50:	2300      	movs	r3, #0
 800bd52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd56:	e050      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd58:	2304      	movs	r3, #4
 800bd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd5e:	e04c      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd60:	2308      	movs	r3, #8
 800bd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd66:	e048      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd68:	2310      	movs	r3, #16
 800bd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd6e:	e044      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd70:	2320      	movs	r3, #32
 800bd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd76:	e040      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd78:	2340      	movs	r3, #64	; 0x40
 800bd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7e:	e03c      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd80:	2380      	movs	r3, #128	; 0x80
 800bd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd86:	e038      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a5c      	ldr	r2, [pc, #368]	; (800bf00 <UART_SetConfig+0x6a8>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d130      	bne.n	800bdf4 <UART_SetConfig+0x59c>
 800bd92:	4b58      	ldr	r3, [pc, #352]	; (800bef4 <UART_SetConfig+0x69c>)
 800bd94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd96:	f003 0307 	and.w	r3, r3, #7
 800bd9a:	2b05      	cmp	r3, #5
 800bd9c:	d826      	bhi.n	800bdec <UART_SetConfig+0x594>
 800bd9e:	a201      	add	r2, pc, #4	; (adr r2, 800bda4 <UART_SetConfig+0x54c>)
 800bda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda4:	0800bdbd 	.word	0x0800bdbd
 800bda8:	0800bdc5 	.word	0x0800bdc5
 800bdac:	0800bdcd 	.word	0x0800bdcd
 800bdb0:	0800bdd5 	.word	0x0800bdd5
 800bdb4:	0800bddd 	.word	0x0800bddd
 800bdb8:	0800bde5 	.word	0x0800bde5
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdc2:	e01a      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bdc4:	2304      	movs	r3, #4
 800bdc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdca:	e016      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bdcc:	2308      	movs	r3, #8
 800bdce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdd2:	e012      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bdd4:	2310      	movs	r3, #16
 800bdd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdda:	e00e      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bddc:	2320      	movs	r3, #32
 800bdde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bde2:	e00a      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bde4:	2340      	movs	r3, #64	; 0x40
 800bde6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdea:	e006      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bdec:	2380      	movs	r3, #128	; 0x80
 800bdee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdf2:	e002      	b.n	800bdfa <UART_SetConfig+0x5a2>
 800bdf4:	2380      	movs	r3, #128	; 0x80
 800bdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a40      	ldr	r2, [pc, #256]	; (800bf00 <UART_SetConfig+0x6a8>)
 800be00:	4293      	cmp	r3, r2
 800be02:	f040 80ef 	bne.w	800bfe4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800be06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be0a:	2b20      	cmp	r3, #32
 800be0c:	dc46      	bgt.n	800be9c <UART_SetConfig+0x644>
 800be0e:	2b02      	cmp	r3, #2
 800be10:	f2c0 8081 	blt.w	800bf16 <UART_SetConfig+0x6be>
 800be14:	3b02      	subs	r3, #2
 800be16:	2b1e      	cmp	r3, #30
 800be18:	d87d      	bhi.n	800bf16 <UART_SetConfig+0x6be>
 800be1a:	a201      	add	r2, pc, #4	; (adr r2, 800be20 <UART_SetConfig+0x5c8>)
 800be1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be20:	0800bea3 	.word	0x0800bea3
 800be24:	0800bf17 	.word	0x0800bf17
 800be28:	0800beab 	.word	0x0800beab
 800be2c:	0800bf17 	.word	0x0800bf17
 800be30:	0800bf17 	.word	0x0800bf17
 800be34:	0800bf17 	.word	0x0800bf17
 800be38:	0800bebb 	.word	0x0800bebb
 800be3c:	0800bf17 	.word	0x0800bf17
 800be40:	0800bf17 	.word	0x0800bf17
 800be44:	0800bf17 	.word	0x0800bf17
 800be48:	0800bf17 	.word	0x0800bf17
 800be4c:	0800bf17 	.word	0x0800bf17
 800be50:	0800bf17 	.word	0x0800bf17
 800be54:	0800bf17 	.word	0x0800bf17
 800be58:	0800becb 	.word	0x0800becb
 800be5c:	0800bf17 	.word	0x0800bf17
 800be60:	0800bf17 	.word	0x0800bf17
 800be64:	0800bf17 	.word	0x0800bf17
 800be68:	0800bf17 	.word	0x0800bf17
 800be6c:	0800bf17 	.word	0x0800bf17
 800be70:	0800bf17 	.word	0x0800bf17
 800be74:	0800bf17 	.word	0x0800bf17
 800be78:	0800bf17 	.word	0x0800bf17
 800be7c:	0800bf17 	.word	0x0800bf17
 800be80:	0800bf17 	.word	0x0800bf17
 800be84:	0800bf17 	.word	0x0800bf17
 800be88:	0800bf17 	.word	0x0800bf17
 800be8c:	0800bf17 	.word	0x0800bf17
 800be90:	0800bf17 	.word	0x0800bf17
 800be94:	0800bf17 	.word	0x0800bf17
 800be98:	0800bf09 	.word	0x0800bf09
 800be9c:	2b40      	cmp	r3, #64	; 0x40
 800be9e:	d036      	beq.n	800bf0e <UART_SetConfig+0x6b6>
 800bea0:	e039      	b.n	800bf16 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bea2:	f7fb ffe3 	bl	8007e6c <HAL_RCCEx_GetD3PCLK1Freq>
 800bea6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bea8:	e03b      	b.n	800bf22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beaa:	f107 0314 	add.w	r3, r7, #20
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fb fff2 	bl	8007e98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800beb8:	e033      	b.n	800bf22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beba:	f107 0308 	add.w	r3, r7, #8
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fc f93e 	bl	8008140 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bec8:	e02b      	b.n	800bf22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800beca:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <UART_SetConfig+0x69c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 0320 	and.w	r3, r3, #32
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d009      	beq.n	800beea <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bed6:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <UART_SetConfig+0x69c>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	08db      	lsrs	r3, r3, #3
 800bedc:	f003 0303 	and.w	r3, r3, #3
 800bee0:	4a08      	ldr	r2, [pc, #32]	; (800bf04 <UART_SetConfig+0x6ac>)
 800bee2:	fa22 f303 	lsr.w	r3, r2, r3
 800bee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bee8:	e01b      	b.n	800bf22 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800beea:	4b06      	ldr	r3, [pc, #24]	; (800bf04 <UART_SetConfig+0x6ac>)
 800beec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800beee:	e018      	b.n	800bf22 <UART_SetConfig+0x6ca>
 800bef0:	40011400 	.word	0x40011400
 800bef4:	58024400 	.word	0x58024400
 800bef8:	40007800 	.word	0x40007800
 800befc:	40007c00 	.word	0x40007c00
 800bf00:	58000c00 	.word	0x58000c00
 800bf04:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf08:	4bc4      	ldr	r3, [pc, #784]	; (800c21c <UART_SetConfig+0x9c4>)
 800bf0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf0c:	e009      	b.n	800bf22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf14:	e005      	b.n	800bf22 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800bf16:	2300      	movs	r3, #0
 800bf18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bf20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 81da 	beq.w	800c2de <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2e:	4abc      	ldr	r2, [pc, #752]	; (800c220 <UART_SetConfig+0x9c8>)
 800bf30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf34:	461a      	mov	r2, r3
 800bf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf38:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf3c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	685a      	ldr	r2, [r3, #4]
 800bf42:	4613      	mov	r3, r2
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	4413      	add	r3, r2
 800bf48:	6a3a      	ldr	r2, [r7, #32]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d305      	bcc.n	800bf5a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf54:	6a3a      	ldr	r2, [r7, #32]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d903      	bls.n	800bf62 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf60:	e1bd      	b.n	800c2de <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf64:	4618      	mov	r0, r3
 800bf66:	f04f 0100 	mov.w	r1, #0
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6e:	4aac      	ldr	r2, [pc, #688]	; (800c220 <UART_SetConfig+0x9c8>)
 800bf70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	f04f 0300 	mov.w	r3, #0
 800bf7a:	f7f4 f9ad 	bl	80002d8 <__aeabi_uldivmod>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4610      	mov	r0, r2
 800bf84:	4619      	mov	r1, r3
 800bf86:	f04f 0200 	mov.w	r2, #0
 800bf8a:	f04f 0300 	mov.w	r3, #0
 800bf8e:	020b      	lsls	r3, r1, #8
 800bf90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf94:	0202      	lsls	r2, r0, #8
 800bf96:	6879      	ldr	r1, [r7, #4]
 800bf98:	6849      	ldr	r1, [r1, #4]
 800bf9a:	0849      	lsrs	r1, r1, #1
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	f04f 0100 	mov.w	r1, #0
 800bfa2:	1814      	adds	r4, r2, r0
 800bfa4:	eb43 0501 	adc.w	r5, r3, r1
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	461a      	mov	r2, r3
 800bfae:	f04f 0300 	mov.w	r3, #0
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	f7f4 f98f 	bl	80002d8 <__aeabi_uldivmod>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfc8:	d308      	bcc.n	800bfdc <UART_SetConfig+0x784>
 800bfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfd0:	d204      	bcs.n	800bfdc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfd8:	60da      	str	r2, [r3, #12]
 800bfda:	e180      	b.n	800c2de <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bfe2:	e17c      	b.n	800c2de <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfec:	f040 80bf 	bne.w	800c16e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800bff0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bff4:	2b20      	cmp	r3, #32
 800bff6:	dc49      	bgt.n	800c08c <UART_SetConfig+0x834>
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	db7c      	blt.n	800c0f6 <UART_SetConfig+0x89e>
 800bffc:	2b20      	cmp	r3, #32
 800bffe:	d87a      	bhi.n	800c0f6 <UART_SetConfig+0x89e>
 800c000:	a201      	add	r2, pc, #4	; (adr r2, 800c008 <UART_SetConfig+0x7b0>)
 800c002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c006:	bf00      	nop
 800c008:	0800c093 	.word	0x0800c093
 800c00c:	0800c09b 	.word	0x0800c09b
 800c010:	0800c0f7 	.word	0x0800c0f7
 800c014:	0800c0f7 	.word	0x0800c0f7
 800c018:	0800c0a3 	.word	0x0800c0a3
 800c01c:	0800c0f7 	.word	0x0800c0f7
 800c020:	0800c0f7 	.word	0x0800c0f7
 800c024:	0800c0f7 	.word	0x0800c0f7
 800c028:	0800c0b3 	.word	0x0800c0b3
 800c02c:	0800c0f7 	.word	0x0800c0f7
 800c030:	0800c0f7 	.word	0x0800c0f7
 800c034:	0800c0f7 	.word	0x0800c0f7
 800c038:	0800c0f7 	.word	0x0800c0f7
 800c03c:	0800c0f7 	.word	0x0800c0f7
 800c040:	0800c0f7 	.word	0x0800c0f7
 800c044:	0800c0f7 	.word	0x0800c0f7
 800c048:	0800c0c3 	.word	0x0800c0c3
 800c04c:	0800c0f7 	.word	0x0800c0f7
 800c050:	0800c0f7 	.word	0x0800c0f7
 800c054:	0800c0f7 	.word	0x0800c0f7
 800c058:	0800c0f7 	.word	0x0800c0f7
 800c05c:	0800c0f7 	.word	0x0800c0f7
 800c060:	0800c0f7 	.word	0x0800c0f7
 800c064:	0800c0f7 	.word	0x0800c0f7
 800c068:	0800c0f7 	.word	0x0800c0f7
 800c06c:	0800c0f7 	.word	0x0800c0f7
 800c070:	0800c0f7 	.word	0x0800c0f7
 800c074:	0800c0f7 	.word	0x0800c0f7
 800c078:	0800c0f7 	.word	0x0800c0f7
 800c07c:	0800c0f7 	.word	0x0800c0f7
 800c080:	0800c0f7 	.word	0x0800c0f7
 800c084:	0800c0f7 	.word	0x0800c0f7
 800c088:	0800c0e9 	.word	0x0800c0e9
 800c08c:	2b40      	cmp	r3, #64	; 0x40
 800c08e:	d02e      	beq.n	800c0ee <UART_SetConfig+0x896>
 800c090:	e031      	b.n	800c0f6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c092:	f7fa ff7f 	bl	8006f94 <HAL_RCC_GetPCLK1Freq>
 800c096:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c098:	e033      	b.n	800c102 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c09a:	f7fa ff91 	bl	8006fc0 <HAL_RCC_GetPCLK2Freq>
 800c09e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c0a0:	e02f      	b.n	800c102 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0a2:	f107 0314 	add.w	r3, r7, #20
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fb fef6 	bl	8007e98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0b0:	e027      	b.n	800c102 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0b2:	f107 0308 	add.w	r3, r7, #8
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fc f842 	bl	8008140 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0c0:	e01f      	b.n	800c102 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0c2:	4b58      	ldr	r3, [pc, #352]	; (800c224 <UART_SetConfig+0x9cc>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0320 	and.w	r3, r3, #32
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d009      	beq.n	800c0e2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0ce:	4b55      	ldr	r3, [pc, #340]	; (800c224 <UART_SetConfig+0x9cc>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	08db      	lsrs	r3, r3, #3
 800c0d4:	f003 0303 	and.w	r3, r3, #3
 800c0d8:	4a53      	ldr	r2, [pc, #332]	; (800c228 <UART_SetConfig+0x9d0>)
 800c0da:	fa22 f303 	lsr.w	r3, r2, r3
 800c0de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0e0:	e00f      	b.n	800c102 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c0e2:	4b51      	ldr	r3, [pc, #324]	; (800c228 <UART_SetConfig+0x9d0>)
 800c0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0e6:	e00c      	b.n	800c102 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0e8:	4b4c      	ldr	r3, [pc, #304]	; (800c21c <UART_SetConfig+0x9c4>)
 800c0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0ec:	e009      	b.n	800c102 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0f4:	e005      	b.n	800c102 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 80ea 	beq.w	800c2de <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10e:	4a44      	ldr	r2, [pc, #272]	; (800c220 <UART_SetConfig+0x9c8>)
 800c110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c114:	461a      	mov	r2, r3
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	fbb3 f3f2 	udiv	r3, r3, r2
 800c11c:	005a      	lsls	r2, r3, #1
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	085b      	lsrs	r3, r3, #1
 800c124:	441a      	add	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c12e:	b29b      	uxth	r3, r3
 800c130:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	2b0f      	cmp	r3, #15
 800c136:	d916      	bls.n	800c166 <UART_SetConfig+0x90e>
 800c138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c13e:	d212      	bcs.n	800c166 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	b29b      	uxth	r3, r3
 800c144:	f023 030f 	bic.w	r3, r3, #15
 800c148:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14c:	085b      	lsrs	r3, r3, #1
 800c14e:	b29b      	uxth	r3, r3
 800c150:	f003 0307 	and.w	r3, r3, #7
 800c154:	b29a      	uxth	r2, r3
 800c156:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c158:	4313      	orrs	r3, r2
 800c15a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c162:	60da      	str	r2, [r3, #12]
 800c164:	e0bb      	b.n	800c2de <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c16c:	e0b7      	b.n	800c2de <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c16e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c172:	2b20      	cmp	r3, #32
 800c174:	dc4a      	bgt.n	800c20c <UART_SetConfig+0x9b4>
 800c176:	2b00      	cmp	r3, #0
 800c178:	f2c0 8086 	blt.w	800c288 <UART_SetConfig+0xa30>
 800c17c:	2b20      	cmp	r3, #32
 800c17e:	f200 8083 	bhi.w	800c288 <UART_SetConfig+0xa30>
 800c182:	a201      	add	r2, pc, #4	; (adr r2, 800c188 <UART_SetConfig+0x930>)
 800c184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c188:	0800c213 	.word	0x0800c213
 800c18c:	0800c22d 	.word	0x0800c22d
 800c190:	0800c289 	.word	0x0800c289
 800c194:	0800c289 	.word	0x0800c289
 800c198:	0800c235 	.word	0x0800c235
 800c19c:	0800c289 	.word	0x0800c289
 800c1a0:	0800c289 	.word	0x0800c289
 800c1a4:	0800c289 	.word	0x0800c289
 800c1a8:	0800c245 	.word	0x0800c245
 800c1ac:	0800c289 	.word	0x0800c289
 800c1b0:	0800c289 	.word	0x0800c289
 800c1b4:	0800c289 	.word	0x0800c289
 800c1b8:	0800c289 	.word	0x0800c289
 800c1bc:	0800c289 	.word	0x0800c289
 800c1c0:	0800c289 	.word	0x0800c289
 800c1c4:	0800c289 	.word	0x0800c289
 800c1c8:	0800c255 	.word	0x0800c255
 800c1cc:	0800c289 	.word	0x0800c289
 800c1d0:	0800c289 	.word	0x0800c289
 800c1d4:	0800c289 	.word	0x0800c289
 800c1d8:	0800c289 	.word	0x0800c289
 800c1dc:	0800c289 	.word	0x0800c289
 800c1e0:	0800c289 	.word	0x0800c289
 800c1e4:	0800c289 	.word	0x0800c289
 800c1e8:	0800c289 	.word	0x0800c289
 800c1ec:	0800c289 	.word	0x0800c289
 800c1f0:	0800c289 	.word	0x0800c289
 800c1f4:	0800c289 	.word	0x0800c289
 800c1f8:	0800c289 	.word	0x0800c289
 800c1fc:	0800c289 	.word	0x0800c289
 800c200:	0800c289 	.word	0x0800c289
 800c204:	0800c289 	.word	0x0800c289
 800c208:	0800c27b 	.word	0x0800c27b
 800c20c:	2b40      	cmp	r3, #64	; 0x40
 800c20e:	d037      	beq.n	800c280 <UART_SetConfig+0xa28>
 800c210:	e03a      	b.n	800c288 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c212:	f7fa febf 	bl	8006f94 <HAL_RCC_GetPCLK1Freq>
 800c216:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c218:	e03c      	b.n	800c294 <UART_SetConfig+0xa3c>
 800c21a:	bf00      	nop
 800c21c:	003d0900 	.word	0x003d0900
 800c220:	0800cf1c 	.word	0x0800cf1c
 800c224:	58024400 	.word	0x58024400
 800c228:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c22c:	f7fa fec8 	bl	8006fc0 <HAL_RCC_GetPCLK2Freq>
 800c230:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c232:	e02f      	b.n	800c294 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c234:	f107 0314 	add.w	r3, r7, #20
 800c238:	4618      	mov	r0, r3
 800c23a:	f7fb fe2d 	bl	8007e98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c242:	e027      	b.n	800c294 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c244:	f107 0308 	add.w	r3, r7, #8
 800c248:	4618      	mov	r0, r3
 800c24a:	f7fb ff79 	bl	8008140 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c252:	e01f      	b.n	800c294 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c254:	4b2c      	ldr	r3, [pc, #176]	; (800c308 <UART_SetConfig+0xab0>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f003 0320 	and.w	r3, r3, #32
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d009      	beq.n	800c274 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c260:	4b29      	ldr	r3, [pc, #164]	; (800c308 <UART_SetConfig+0xab0>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	08db      	lsrs	r3, r3, #3
 800c266:	f003 0303 	and.w	r3, r3, #3
 800c26a:	4a28      	ldr	r2, [pc, #160]	; (800c30c <UART_SetConfig+0xab4>)
 800c26c:	fa22 f303 	lsr.w	r3, r2, r3
 800c270:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c272:	e00f      	b.n	800c294 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c274:	4b25      	ldr	r3, [pc, #148]	; (800c30c <UART_SetConfig+0xab4>)
 800c276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c278:	e00c      	b.n	800c294 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c27a:	4b25      	ldr	r3, [pc, #148]	; (800c310 <UART_SetConfig+0xab8>)
 800c27c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c27e:	e009      	b.n	800c294 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c284:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c286:	e005      	b.n	800c294 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c288:	2300      	movs	r3, #0
 800c28a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c292:	bf00      	nop
    }

    if (pclk != 0U)
 800c294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c296:	2b00      	cmp	r3, #0
 800c298:	d021      	beq.n	800c2de <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29e:	4a1d      	ldr	r2, [pc, #116]	; (800c314 <UART_SetConfig+0xabc>)
 800c2a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	085b      	lsrs	r3, r3, #1
 800c2b2:	441a      	add	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	2b0f      	cmp	r3, #15
 800c2c4:	d908      	bls.n	800c2d8 <UART_SetConfig+0xa80>
 800c2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2cc:	d204      	bcs.n	800c2d8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2d4:	60da      	str	r2, [r3, #12]
 800c2d6:	e002      	b.n	800c2de <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c2fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3738      	adds	r7, #56	; 0x38
 800c302:	46bd      	mov	sp, r7
 800c304:	bdb0      	pop	{r4, r5, r7, pc}
 800c306:	bf00      	nop
 800c308:	58024400 	.word	0x58024400
 800c30c:	03d09000 	.word	0x03d09000
 800c310:	003d0900 	.word	0x003d0900
 800c314:	0800cf1c 	.word	0x0800cf1c

0800c318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00a      	beq.n	800c342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	430a      	orrs	r2, r1
 800c340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c346:	f003 0302 	and.w	r3, r3, #2
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00a      	beq.n	800c364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	430a      	orrs	r2, r1
 800c362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c368:	f003 0304 	and.w	r3, r3, #4
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00a      	beq.n	800c386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	430a      	orrs	r2, r1
 800c384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38a:	f003 0308 	and.w	r3, r3, #8
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00a      	beq.n	800c3a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	430a      	orrs	r2, r1
 800c3a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ac:	f003 0310 	and.w	r3, r3, #16
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00a      	beq.n	800c3ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	430a      	orrs	r2, r1
 800c3c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ce:	f003 0320 	and.w	r3, r3, #32
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00a      	beq.n	800c3ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	430a      	orrs	r2, r1
 800c3ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d01a      	beq.n	800c42e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	430a      	orrs	r2, r1
 800c40c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c416:	d10a      	bne.n	800c42e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	605a      	str	r2, [r3, #4]
  }
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af02      	add	r7, sp, #8
 800c462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c46c:	f7f5 fea8 	bl	80021c0 <HAL_GetTick>
 800c470:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f003 0308 	and.w	r3, r3, #8
 800c47c:	2b08      	cmp	r3, #8
 800c47e:	d10e      	bne.n	800c49e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2200      	movs	r2, #0
 800c48a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f82f 	bl	800c4f2 <UART_WaitOnFlagUntilTimeout>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	e025      	b.n	800c4ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 0304 	and.w	r3, r3, #4
 800c4a8:	2b04      	cmp	r3, #4
 800c4aa:	d10e      	bne.n	800c4ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f819 	bl	800c4f2 <UART_WaitOnFlagUntilTimeout>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d001      	beq.n	800c4ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	e00f      	b.n	800c4ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2220      	movs	r2, #32
 800c4ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2220      	movs	r2, #32
 800c4d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b084      	sub	sp, #16
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	603b      	str	r3, [r7, #0]
 800c4fe:	4613      	mov	r3, r2
 800c500:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c502:	e062      	b.n	800c5ca <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c50a:	d05e      	beq.n	800c5ca <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c50c:	f7f5 fe58 	bl	80021c0 <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	69ba      	ldr	r2, [r7, #24]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d302      	bcc.n	800c522 <UART_WaitOnFlagUntilTimeout+0x30>
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d11d      	bne.n	800c55e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c530:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689a      	ldr	r2, [r3, #8]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f022 0201 	bic.w	r2, r2, #1
 800c540:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2220      	movs	r2, #32
 800c546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2220      	movs	r2, #32
 800c54e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c55a:	2303      	movs	r3, #3
 800c55c:	e045      	b.n	800c5ea <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 0304 	and.w	r3, r3, #4
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d02e      	beq.n	800c5ca <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	69db      	ldr	r3, [r3, #28]
 800c572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c57a:	d126      	bne.n	800c5ca <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c584:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c594:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	689a      	ldr	r2, [r3, #8]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f022 0201 	bic.w	r2, r2, #1
 800c5a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2220      	movs	r2, #32
 800c5aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2220      	movs	r2, #32
 800c5b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2220      	movs	r2, #32
 800c5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e00f      	b.n	800c5ea <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	69da      	ldr	r2, [r3, #28]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	bf0c      	ite	eq
 800c5da:	2301      	moveq	r3, #1
 800c5dc:	2300      	movne	r3, #0
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	79fb      	ldrb	r3, [r7, #7]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d08d      	beq.n	800c504 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
	...

0800c5f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c60a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6899      	ldr	r1, [r3, #8]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	4b0f      	ldr	r3, [pc, #60]	; (800c654 <UART_EndRxTransfer+0x60>)
 800c618:	400b      	ands	r3, r1
 800c61a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c620:	2b01      	cmp	r3, #1
 800c622:	d107      	bne.n	800c634 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f022 0210 	bic.w	r2, r2, #16
 800c632:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2220      	movs	r2, #32
 800c638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c648:	bf00      	nop
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr
 800c654:	effffffe 	.word	0xeffffffe

0800c658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f7ff f8d8 	bl	800b82c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c67c:	bf00      	nop
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c69a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7ff f8b4 	bl	800b818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c702:	2b01      	cmp	r3, #1
 800c704:	d101      	bne.n	800c70a <HAL_UARTEx_DisableFifoMode+0x16>
 800c706:	2302      	movs	r3, #2
 800c708:	e027      	b.n	800c75a <HAL_UARTEx_DisableFifoMode+0x66>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2224      	movs	r2, #36	; 0x24
 800c716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f022 0201 	bic.w	r2, r2, #1
 800c730:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c738:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2220      	movs	r2, #32
 800c74c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3714      	adds	r7, #20
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr

0800c766 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b084      	sub	sp, #16
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c776:	2b01      	cmp	r3, #1
 800c778:	d101      	bne.n	800c77e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c77a:	2302      	movs	r3, #2
 800c77c:	e02d      	b.n	800c7da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2224      	movs	r2, #36	; 0x24
 800c78a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f022 0201 	bic.w	r2, r2, #1
 800c7a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	430a      	orrs	r2, r1
 800c7b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 f850 	bl	800c860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2220      	movs	r2, #32
 800c7cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b084      	sub	sp, #16
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d101      	bne.n	800c7fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7f6:	2302      	movs	r3, #2
 800c7f8:	e02d      	b.n	800c856 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2224      	movs	r2, #36	; 0x24
 800c806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f022 0201 	bic.w	r2, r2, #1
 800c820:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	430a      	orrs	r2, r1
 800c834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f812 	bl	800c860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2220      	movs	r2, #32
 800c848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
	...

0800c860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d108      	bne.n	800c882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c880:	e031      	b.n	800c8e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c882:	2310      	movs	r3, #16
 800c884:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c886:	2310      	movs	r3, #16
 800c888:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	0e5b      	lsrs	r3, r3, #25
 800c892:	b2db      	uxtb	r3, r3
 800c894:	f003 0307 	and.w	r3, r3, #7
 800c898:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	0f5b      	lsrs	r3, r3, #29
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 0307 	and.w	r3, r3, #7
 800c8a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8aa:	7bbb      	ldrb	r3, [r7, #14]
 800c8ac:	7b3a      	ldrb	r2, [r7, #12]
 800c8ae:	4911      	ldr	r1, [pc, #68]	; (800c8f4 <UARTEx_SetNbDataToProcess+0x94>)
 800c8b0:	5c8a      	ldrb	r2, [r1, r2]
 800c8b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8b6:	7b3a      	ldrb	r2, [r7, #12]
 800c8b8:	490f      	ldr	r1, [pc, #60]	; (800c8f8 <UARTEx_SetNbDataToProcess+0x98>)
 800c8ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	7b7a      	ldrb	r2, [r7, #13]
 800c8cc:	4909      	ldr	r1, [pc, #36]	; (800c8f4 <UARTEx_SetNbDataToProcess+0x94>)
 800c8ce:	5c8a      	ldrb	r2, [r1, r2]
 800c8d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8d4:	7b7a      	ldrb	r2, [r7, #13]
 800c8d6:	4908      	ldr	r1, [pc, #32]	; (800c8f8 <UARTEx_SetNbDataToProcess+0x98>)
 800c8d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8da:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c8e6:	bf00      	nop
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	0800cf34 	.word	0x0800cf34
 800c8f8:	0800cf3c 	.word	0x0800cf3c

0800c8fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b084      	sub	sp, #16
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	f107 001c 	add.w	r0, r7, #28
 800c90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	2b01      	cmp	r3, #1
 800c912:	d120      	bne.n	800c956 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c918:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	68da      	ldr	r2, [r3, #12]
 800c924:	4b2a      	ldr	r3, [pc, #168]	; (800c9d0 <USB_CoreInit+0xd4>)
 800c926:	4013      	ands	r3, r2
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d105      	bne.n	800c94a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 fa60 	bl	800ce10 <USB_CoreReset>
 800c950:	4603      	mov	r3, r0
 800c952:	73fb      	strb	r3, [r7, #15]
 800c954:	e01a      	b.n	800c98c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fa54 	bl	800ce10 <USB_CoreReset>
 800c968:	4603      	mov	r3, r0
 800c96a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d106      	bne.n	800c980 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	639a      	str	r2, [r3, #56]	; 0x38
 800c97e:	e005      	b.n	800c98c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d116      	bne.n	800c9c0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c996:	b29a      	uxth	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c9a0:	4b0c      	ldr	r3, [pc, #48]	; (800c9d4 <USB_CoreInit+0xd8>)
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	f043 0206 	orr.w	r2, r3, #6
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	f043 0220 	orr.w	r2, r3, #32
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9cc:	b004      	add	sp, #16
 800c9ce:	4770      	bx	lr
 800c9d0:	ffbdffbf 	.word	0xffbdffbf
 800c9d4:	03ee0000 	.word	0x03ee0000

0800c9d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	f023 0201 	bic.w	r2, r3, #1
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	370c      	adds	r7, #12
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b082      	sub	sp, #8
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
 800ca02:	460b      	mov	r3, r1
 800ca04:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca12:	78fb      	ldrb	r3, [r7, #3]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d106      	bne.n	800ca26 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	60da      	str	r2, [r3, #12]
 800ca24:	e00b      	b.n	800ca3e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca26:	78fb      	ldrb	r3, [r7, #3]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d106      	bne.n	800ca3a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	60da      	str	r2, [r3, #12]
 800ca38:	e001      	b.n	800ca3e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e003      	b.n	800ca46 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ca3e:	2032      	movs	r0, #50	; 0x32
 800ca40:	f7f5 fbca 	bl	80021d8 <HAL_Delay>

  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
	...

0800ca50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca50:	b084      	sub	sp, #16
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b086      	sub	sp, #24
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ca5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	613b      	str	r3, [r7, #16]
 800ca6e:	e009      	b.n	800ca84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	3340      	adds	r3, #64	; 0x40
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	4413      	add	r3, r2
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	3301      	adds	r3, #1
 800ca82:	613b      	str	r3, [r7, #16]
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	2b0e      	cmp	r3, #14
 800ca88:	d9f2      	bls.n	800ca70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d11c      	bne.n	800caca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca9e:	f043 0302 	orr.w	r3, r3, #2
 800caa2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	e005      	b.n	800cad6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cadc:	461a      	mov	r2, r3
 800cade:	2300      	movs	r3, #0
 800cae0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae8:	4619      	mov	r1, r3
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf0:	461a      	mov	r2, r3
 800caf2:	680b      	ldr	r3, [r1, #0]
 800caf4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d10c      	bne.n	800cb16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d104      	bne.n	800cb0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cb02:	2100      	movs	r1, #0
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 f949 	bl	800cd9c <USB_SetDevSpeed>
 800cb0a:	e008      	b.n	800cb1e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f944 	bl	800cd9c <USB_SetDevSpeed>
 800cb14:	e003      	b.n	800cb1e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb16:	2103      	movs	r1, #3
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 f93f 	bl	800cd9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb1e:	2110      	movs	r1, #16
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 f8f3 	bl	800cd0c <USB_FlushTxFifo>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d001      	beq.n	800cb30 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 f911 	bl	800cd58 <USB_FlushRxFifo>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb46:	461a      	mov	r2, r3
 800cb48:	2300      	movs	r3, #0
 800cb4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb52:	461a      	mov	r2, r3
 800cb54:	2300      	movs	r3, #0
 800cb56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb5e:	461a      	mov	r2, r3
 800cb60:	2300      	movs	r3, #0
 800cb62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb64:	2300      	movs	r3, #0
 800cb66:	613b      	str	r3, [r7, #16]
 800cb68:	e043      	b.n	800cbf2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	015a      	lsls	r2, r3, #5
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	4413      	add	r3, r2
 800cb72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb80:	d118      	bne.n	800cbb4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10a      	bne.n	800cb9e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	015a      	lsls	r2, r3, #5
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	4413      	add	r3, r2
 800cb90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb94:	461a      	mov	r2, r3
 800cb96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb9a:	6013      	str	r3, [r2, #0]
 800cb9c:	e013      	b.n	800cbc6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	015a      	lsls	r2, r3, #5
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	4413      	add	r3, r2
 800cba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbaa:	461a      	mov	r2, r3
 800cbac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	e008      	b.n	800cbc6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	015a      	lsls	r2, r3, #5
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	015a      	lsls	r2, r3, #5
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	4413      	add	r3, r2
 800cbce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	015a      	lsls	r2, r3, #5
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cbea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	613b      	str	r3, [r7, #16]
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf4:	693a      	ldr	r2, [r7, #16]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d3b7      	bcc.n	800cb6a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	613b      	str	r3, [r7, #16]
 800cbfe:	e043      	b.n	800cc88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	015a      	lsls	r2, r3, #5
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4413      	add	r3, r2
 800cc08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc16:	d118      	bne.n	800cc4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d10a      	bne.n	800cc34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	015a      	lsls	r2, r3, #5
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc30:	6013      	str	r3, [r2, #0]
 800cc32:	e013      	b.n	800cc5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	015a      	lsls	r2, r3, #5
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc40:	461a      	mov	r2, r3
 800cc42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cc46:	6013      	str	r3, [r2, #0]
 800cc48:	e008      	b.n	800cc5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	015a      	lsls	r2, r3, #5
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	4413      	add	r3, r2
 800cc52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc56:	461a      	mov	r2, r3
 800cc58:	2300      	movs	r3, #0
 800cc5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	015a      	lsls	r2, r3, #5
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	4413      	add	r3, r2
 800cc64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc68:	461a      	mov	r2, r3
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	015a      	lsls	r2, r3, #5
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	4413      	add	r3, r2
 800cc76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	3301      	adds	r3, #1
 800cc86:	613b      	str	r3, [r7, #16]
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	693a      	ldr	r2, [r7, #16]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d3b7      	bcc.n	800cc00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cca2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ccb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d105      	bne.n	800ccc4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	f043 0210 	orr.w	r2, r3, #16
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	699a      	ldr	r2, [r3, #24]
 800ccc8:	4b0e      	ldr	r3, [pc, #56]	; (800cd04 <USB_DevInit+0x2b4>)
 800ccca:	4313      	orrs	r3, r2
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ccd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d005      	beq.n	800cce2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	699b      	ldr	r3, [r3, #24]
 800ccda:	f043 0208 	orr.w	r2, r3, #8
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d105      	bne.n	800ccf4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	699a      	ldr	r2, [r3, #24]
 800ccec:	4b06      	ldr	r3, [pc, #24]	; (800cd08 <USB_DevInit+0x2b8>)
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ccf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd00:	b004      	add	sp, #16
 800cd02:	4770      	bx	lr
 800cd04:	803c3800 	.word	0x803c3800
 800cd08:	40000004 	.word	0x40000004

0800cd0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cd16:	2300      	movs	r3, #0
 800cd18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	019b      	lsls	r3, r3, #6
 800cd1e:	f043 0220 	orr.w	r2, r3, #32
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	60fb      	str	r3, [r7, #12]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4a09      	ldr	r2, [pc, #36]	; (800cd54 <USB_FlushTxFifo+0x48>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d901      	bls.n	800cd38 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cd34:	2303      	movs	r3, #3
 800cd36:	e006      	b.n	800cd46 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	691b      	ldr	r3, [r3, #16]
 800cd3c:	f003 0320 	and.w	r3, r3, #32
 800cd40:	2b20      	cmp	r3, #32
 800cd42:	d0f0      	beq.n	800cd26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	00030d40 	.word	0x00030d40

0800cd58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2210      	movs	r2, #16
 800cd68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	4a09      	ldr	r2, [pc, #36]	; (800cd98 <USB_FlushRxFifo+0x40>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d901      	bls.n	800cd7c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	e006      	b.n	800cd8a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	f003 0310 	and.w	r3, r3, #16
 800cd84:	2b10      	cmp	r3, #16
 800cd86:	d0f0      	beq.n	800cd6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop
 800cd98:	00030d40 	.word	0x00030d40

0800cd9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	78fb      	ldrb	r3, [r7, #3]
 800cdb6:	68f9      	ldr	r1, [r7, #12]
 800cdb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3714      	adds	r7, #20
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr

0800cdce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cdce:	b480      	push	{r7}
 800cdd0:	b085      	sub	sp, #20
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cde8:	f023 0303 	bic.w	r3, r3, #3
 800cdec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdfc:	f043 0302 	orr.w	r3, r3, #2
 800ce00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	4a13      	ldr	r2, [pc, #76]	; (800ce74 <USB_CoreReset+0x64>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d901      	bls.n	800ce2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e01b      	b.n	800ce66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	daf2      	bge.n	800ce1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce36:	2300      	movs	r3, #0
 800ce38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	f043 0201 	orr.w	r2, r3, #1
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	60fb      	str	r3, [r7, #12]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4a09      	ldr	r2, [pc, #36]	; (800ce74 <USB_CoreReset+0x64>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d901      	bls.n	800ce58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce54:	2303      	movs	r3, #3
 800ce56:	e006      	b.n	800ce66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d0f0      	beq.n	800ce46 <USB_CoreReset+0x36>

  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3714      	adds	r7, #20
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	00030d40 	.word	0x00030d40

0800ce78 <__libc_init_array>:
 800ce78:	b570      	push	{r4, r5, r6, lr}
 800ce7a:	4d0d      	ldr	r5, [pc, #52]	; (800ceb0 <__libc_init_array+0x38>)
 800ce7c:	4c0d      	ldr	r4, [pc, #52]	; (800ceb4 <__libc_init_array+0x3c>)
 800ce7e:	1b64      	subs	r4, r4, r5
 800ce80:	10a4      	asrs	r4, r4, #2
 800ce82:	2600      	movs	r6, #0
 800ce84:	42a6      	cmp	r6, r4
 800ce86:	d109      	bne.n	800ce9c <__libc_init_array+0x24>
 800ce88:	4d0b      	ldr	r5, [pc, #44]	; (800ceb8 <__libc_init_array+0x40>)
 800ce8a:	4c0c      	ldr	r4, [pc, #48]	; (800cebc <__libc_init_array+0x44>)
 800ce8c:	f000 f82e 	bl	800ceec <_init>
 800ce90:	1b64      	subs	r4, r4, r5
 800ce92:	10a4      	asrs	r4, r4, #2
 800ce94:	2600      	movs	r6, #0
 800ce96:	42a6      	cmp	r6, r4
 800ce98:	d105      	bne.n	800cea6 <__libc_init_array+0x2e>
 800ce9a:	bd70      	pop	{r4, r5, r6, pc}
 800ce9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cea0:	4798      	blx	r3
 800cea2:	3601      	adds	r6, #1
 800cea4:	e7ee      	b.n	800ce84 <__libc_init_array+0xc>
 800cea6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceaa:	4798      	blx	r3
 800ceac:	3601      	adds	r6, #1
 800ceae:	e7f2      	b.n	800ce96 <__libc_init_array+0x1e>
 800ceb0:	0800cf4c 	.word	0x0800cf4c
 800ceb4:	0800cf4c 	.word	0x0800cf4c
 800ceb8:	0800cf4c 	.word	0x0800cf4c
 800cebc:	0800cf50 	.word	0x0800cf50

0800cec0 <memcpy>:
 800cec0:	440a      	add	r2, r1
 800cec2:	4291      	cmp	r1, r2
 800cec4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cec8:	d100      	bne.n	800cecc <memcpy+0xc>
 800ceca:	4770      	bx	lr
 800cecc:	b510      	push	{r4, lr}
 800cece:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ced2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ced6:	4291      	cmp	r1, r2
 800ced8:	d1f9      	bne.n	800cece <memcpy+0xe>
 800ceda:	bd10      	pop	{r4, pc}

0800cedc <memset>:
 800cedc:	4402      	add	r2, r0
 800cede:	4603      	mov	r3, r0
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d100      	bne.n	800cee6 <memset+0xa>
 800cee4:	4770      	bx	lr
 800cee6:	f803 1b01 	strb.w	r1, [r3], #1
 800ceea:	e7f9      	b.n	800cee0 <memset+0x4>

0800ceec <_init>:
 800ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceee:	bf00      	nop
 800cef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef2:	bc08      	pop	{r3}
 800cef4:	469e      	mov	lr, r3
 800cef6:	4770      	bx	lr

0800cef8 <_fini>:
 800cef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefa:	bf00      	nop
 800cefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cefe:	bc08      	pop	{r3}
 800cf00:	469e      	mov	lr, r3
 800cf02:	4770      	bx	lr
