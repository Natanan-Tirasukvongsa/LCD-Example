
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d018  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800d2b0  0800d2b0  0001d2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2f0  0800d2f0  000314c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2f0  0800d2f0  0001d2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2f8  0800d2f8  000314c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2f8  0800d2f8  0001d2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2fc  0800d2fc  0001d2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00011400  24000000  0800d300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24011400  0801e700  00031400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24011460  0801e760  00031460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c854  240114c0  0801e7c0  000314c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2401dd14  0801e7c0  0003dd14  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033ca0  00000000  00000000  000314ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c1b  00000000  00000000  0006518e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b00  00000000  00000000  00069db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001988  00000000  00000000  0006b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ddbf  00000000  00000000  0006d238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022bee  00000000  00000000  000aaff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00196f13  00000000  00000000  000cdbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00264af8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007694  00000000  00000000  00264b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240114c0 	.word	0x240114c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d298 	.word	0x0800d298

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240114c4 	.word	0x240114c4
 80002d4:	0800d298 	.word	0x0800d298

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <LCD_init>:

//การสั่งขา D/C หรือ A0 เพื่อส่ง command หรือ parameter
//เปลี่ยนแปลง data command ให้เป็น high เพื่อส่ง parameter
//เปลี่ยนแปลง data command ให้เป็น low เพื่อส่ง command
//ส่งข้อมูลภาพไปในจอใช้ขา data command high
void LCD_init(LCDHandle *lcd){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	//reset LCD
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	b29b      	uxth	r3, r3
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	f005 fa85 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fcf6 	bl	8002110 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6858      	ldr	r0, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	b29b      	uxth	r3, r3
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	f005 fa79 	bl	8005c28 <HAL_GPIO_WritePin>

	//select SPI CS
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	b29b      	uxth	r3, r3
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f005 fa70 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 fce1 	bl	8002110 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6898      	ldr	r0, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f005 fa64 	bl	8005c28 <HAL_GPIO_WritePin>

	//write reset , sleep out, display on, scan order
	//write command 0x01, 0x11, 0x29, 0x36
	//4 = 4 commands
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f005 fa5b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2204      	movs	r2, #4
 800077a:	4938      	ldr	r1, [pc, #224]	; (800085c <LCD_init+0x158>)
 800077c:	f008 fcf6 	bl	800916c <HAL_SPI_Transmit>

	//write parameter of scan order
	//write parameter 0b01001000
	//&LCDSTARTUPSeq[4] 0ffset ไป 4 ตำแหน่ง
	//1 = 1 parameter
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68d8      	ldr	r0, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	b29b      	uxth	r3, r3
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f005 fa4b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	2201      	movs	r2, #1
 800079a:	4931      	ldr	r1, [pc, #196]	; (8000860 <LCD_init+0x15c>)
 800079c:	f008 fce6 	bl	800916c <HAL_SPI_Transmit>

	//write set C area
	//write command 0x2a
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f005 fa3b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	492a      	ldr	r1, [pc, #168]	; (8000864 <LCD_init+0x160>)
 80007bc:	f008 fcd6 	bl	800916c <HAL_SPI_Transmit>

	//write set C area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68d8      	ldr	r0, [r3, #12]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	f005 fa2b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2204      	movs	r2, #4
 80007da:	4923      	ldr	r1, [pc, #140]	; (8000868 <LCD_init+0x164>)
 80007dc:	f008 fcc6 	bl	800916c <HAL_SPI_Transmit>

	//write set R area
	//write command 0x2b
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68d8      	ldr	r0, [r3, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f005 fa1b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2201      	movs	r2, #1
 80007fa:	491c      	ldr	r1, [pc, #112]	; (800086c <LCD_init+0x168>)
 80007fc:	f008 fcb6 	bl	800916c <HAL_SPI_Transmit>

	//write set R area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68d8      	ldr	r0, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	b29b      	uxth	r3, r3
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	f005 fa0b 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2204      	movs	r2, #4
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <LCD_init+0x16c>)
 800081c:	f008 fca6 	bl	800916c <HAL_SPI_Transmit>

	//write to graphic memory
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68d8      	ldr	r0, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f005 f9fb 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	2201      	movs	r2, #1
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LCD_init+0x170>)
 800083c:	f008 fc96 	bl	800916c <HAL_SPI_Transmit>

	//set DC to high to read & send image data
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68d8      	ldr	r0, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	b29b      	uxth	r3, r3
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f005 f9eb 	bl	8005c28 <HAL_GPIO_WritePin>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000008 	.word	0x24000008
 8000860:	2400000c 	.word	0x2400000c
 8000864:	2400000d 	.word	0x2400000d
 8000868:	2400000e 	.word	0x2400000e
 800086c:	24000012 	.word	0x24000012
 8000870:	24000013 	.word	0x24000013
 8000874:	24000017 	.word	0x24000017

08000878 <LCD_flush>:

//ส่งข้อมูลของ frame ไปให้จอ
void LCD_flush(LCDHandle *lcd)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	//circular dma
	//Framememory มีขนาดเท่ากับหน้าจอ
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000888:	4903      	ldr	r1, [pc, #12]	; (8000898 <LCD_flush+0x20>)
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fe60 	bl	8009550 <HAL_SPI_Transmit_DMA>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	240114dc 	.word	0x240114dc

0800089c <UARTInit>:
#include "stm32h7xx_hal.h"
#include "Uart.h"


void UARTInit(UARTStucrture *uart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->RxLen);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	88db      	ldrh	r3, [r3, #6]
 80008a8:	4619      	mov	r1, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	f00c fc24 	bl	800d0f8 <calloc>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->TxLen);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	889b      	ldrh	r3, [r3, #4]
 80008bc:	4619      	mov	r1, r3
 80008be:	2001      	movs	r0, #1
 80008c0:	f00c fc1a 	bl	800d0f8 <calloc>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	81da      	strh	r2, [r3, #14]

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6919      	ldr	r1, [r3, #16]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	88db      	ldrh	r3, [r3, #6]
 80008fa:	461a      	mov	r2, r3
 80008fc:	f00a fc86 	bl	800b20c <HAL_UART_Receive_DMA>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b5b0      	push	{r4, r5, r7, lr}
 800090a:	b0a2      	sub	sp, #136	; 0x88
 800090c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800090e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000916:	bf00      	nop
 8000918:	4b7e      	ldr	r3, [pc, #504]	; (8000b14 <main+0x20c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d006      	beq.n	8000932 <main+0x2a>
 8000924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800092e:	2b00      	cmp	r3, #0
 8000930:	dcf2      	bgt.n	8000918 <main+0x10>
		;
	if (timeout < 0) {
 8000932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000936:	2b00      	cmp	r3, #0
 8000938:	da01      	bge.n	800093e <main+0x36>
		Error_Handler();
 800093a:	f000 feed 	bl	8001718 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f001 fb55 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 faa5 	bl	8000e90 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000946:	4b73      	ldr	r3, [pc, #460]	; (8000b14 <main+0x20c>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	4a71      	ldr	r2, [pc, #452]	; (8000b14 <main+0x20c>)
 800094e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000956:	4b6f      	ldr	r3, [pc, #444]	; (8000b14 <main+0x20c>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000964:	2000      	movs	r0, #0
 8000966:	f005 f979 	bl	8005c5c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 800096a:	2100      	movs	r1, #0
 800096c:	2000      	movs	r0, #0
 800096e:	f005 f98f 	bl	8005c90 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000976:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 800097a:	bf00      	nop
 800097c:	4b65      	ldr	r3, [pc, #404]	; (8000b14 <main+0x20c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d106      	bne.n	8000996 <main+0x8e>
 8000988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800098c:	1e5a      	subs	r2, r3, #1
 800098e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000992:	2b00      	cmp	r3, #0
 8000994:	dcf2      	bgt.n	800097c <main+0x74>
		;
	if (timeout < 0) {
 8000996:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800099a:	2b00      	cmp	r3, #0
 800099c:	da01      	bge.n	80009a2 <main+0x9a>
		Error_Handler();
 800099e:	f000 febb 	bl	8001718 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a2:	f000 fd8b 	bl	80014bc <MX_GPIO_Init>
  MX_ETH_Init();
 80009a6:	f000 faf9 	bl	8000f9c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009aa:	f000 fcd9 	bl	8001360 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80009ae:	f000 fd55 	bl	800145c <MX_DMA_Init>
  MX_SPI1_Init();
 80009b2:	f000 fbd1 	bl	8001158 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009b6:	f000 fd1f 	bl	80013f8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80009ba:	f000 fc25 	bl	8001208 <MX_TIM1_Init>
  MX_RTC_Init();
 80009be:	f000 fb39 	bl	8001034 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  	//�?ำหนดขา pin
	ST7735.hspi = &hspi1;
 80009c2:	4b55      	ldr	r3, [pc, #340]	; (8000b18 <main+0x210>)
 80009c4:	4a55      	ldr	r2, [pc, #340]	; (8000b1c <main+0x214>)
 80009c6:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 80009c8:	4b53      	ldr	r3, [pc, #332]	; (8000b18 <main+0x210>)
 80009ca:	4a55      	ldr	r2, [pc, #340]	; (8000b20 <main+0x218>)
 80009cc:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 80009ce:	4b52      	ldr	r3, [pc, #328]	; (8000b18 <main+0x210>)
 80009d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d4:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 80009d6:	4b50      	ldr	r3, [pc, #320]	; (8000b18 <main+0x210>)
 80009d8:	4a51      	ldr	r2, [pc, #324]	; (8000b20 <main+0x218>)
 80009da:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 80009dc:	4b4e      	ldr	r3, [pc, #312]	; (8000b18 <main+0x210>)
 80009de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009e2:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 80009e4:	4b4c      	ldr	r3, [pc, #304]	; (8000b18 <main+0x210>)
 80009e6:	4a4f      	ldr	r2, [pc, #316]	; (8000b24 <main+0x21c>)
 80009e8:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 80009ea:	4b4b      	ldr	r3, [pc, #300]	; (8000b18 <main+0x210>)
 80009ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f0:	611a      	str	r2, [r3, #16]
	//เริ่ม�?ารเขียน sequence data
	LCD_init(&ST7735);
 80009f2:	4849      	ldr	r0, [pc, #292]	; (8000b18 <main+0x210>)
 80009f4:	f7ff fe86 	bl	8000704 <LCD_init>
	//flush ข้อมูล dma
	LCD_flush(&ST7735);
 80009f8:	4847      	ldr	r0, [pc, #284]	; (8000b18 <main+0x210>)
 80009fa:	f7ff ff3d 	bl	8000878 <LCD_flush>
	//รับข้อมูลภาพด้วย uart
	UART2.huart = &huart3;
 80009fe:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <main+0x220>)
 8000a00:	4a4a      	ldr	r2, [pc, #296]	; (8000b2c <main+0x224>)
 8000a02:	601a      	str	r2, [r3, #0]
	UART2.RxLen =255;
 8000a04:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <main+0x220>)
 8000a06:	22ff      	movs	r2, #255	; 0xff
 8000a08:	80da      	strh	r2, [r3, #6]
	UART2.TxLen =255;
 8000a0a:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <main+0x220>)
 8000a0c:	22ff      	movs	r2, #255	; 0xff
 8000a0e:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 8000a10:	4845      	ldr	r0, [pc, #276]	; (8000b28 <main+0x220>)
 8000a12:	f7ff ff43 	bl	800089c <UARTInit>
	UARTResetStart(&UART2);
 8000a16:	4844      	ldr	r0, [pc, #272]	; (8000b28 <main+0x220>)
 8000a18:	f7ff ff65 	bl	80008e6 <UARTResetStart>

	//start pwm
	HAL_TIM_Base_Start(&htim1);
 8000a1c:	4844      	ldr	r0, [pc, #272]	; (8000b30 <main+0x228>)
 8000a1e:	f009 fa9d 	bl	8009f5c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a22:	2100      	movs	r1, #0
 8000a24:	4842      	ldr	r0, [pc, #264]	; (8000b30 <main+0x228>)
 8000a26:	f009 fb63 	bl	800a0f0 <HAL_TIM_PWM_Start>

	//lcd UI
	memcpy(Framememory,fan,sizeof(fan));
 8000a2a:	4a42      	ldr	r2, [pc, #264]	; (8000b34 <main+0x22c>)
 8000a2c:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <main+0x230>)
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a36:	461a      	mov	r2, r3
 8000a38:	f00c fb90 	bl	800d15c <memcpy>

	int i,j,n = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	67bb      	str	r3, [r7, #120]	; 0x78
	//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
	//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
	//add next array 384 (128*3)
	for(i = 25956; i <= 37760; i = i+384 )
 8000a40:	f246 5364 	movw	r3, #25956	; 0x6564
 8000a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000a48:	e01c      	b.n	8000a84 <main+0x17c>
	{
		//lenght*rgb = 32*3 = 96 (0-95)
		for(j=0;j<96;j++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a4e:	e00d      	b.n	8000a6c <main+0x164>
		{
			Framememory[i+j] = speed1[j+n];
 8000a50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a54:	441a      	add	r2, r3
 8000a56:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000a5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a5c:	440b      	add	r3, r1
 8000a5e:	4937      	ldr	r1, [pc, #220]	; (8000b3c <main+0x234>)
 8000a60:	5c89      	ldrb	r1, [r1, r2]
 8000a62:	4a34      	ldr	r2, [pc, #208]	; (8000b34 <main+0x22c>)
 8000a64:	54d1      	strb	r1, [r2, r3]
		for(j=0;j<96;j++)
 8000a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a68:	3301      	adds	r3, #1
 8000a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a6e:	2b5f      	cmp	r3, #95	; 0x5f
 8000a70:	ddee      	ble.n	8000a50 <main+0x148>
		}
		//offset 150
		n = n +96;
 8000a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a74:	3360      	adds	r3, #96	; 0x60
 8000a76:	67bb      	str	r3, [r7, #120]	; 0x78
	for(i = 25956; i <= 37760; i = i+384 )
 8000a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a88:	f249 3280 	movw	r2, #37760	; 0x9380
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	dddc      	ble.n	8000a4a <main+0x142>
	}

	int a,b,c = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	66fb      	str	r3, [r7, #108]	; 0x6c
	//start at pixel index 23100 (red start at index 0 so add offset 23100%3 = 0)
	//stop at pixel index 39996 (start + length*rgb*( height of pixel number - 1) = 23100+128*3*(45-1) = 39996)
	//add next array 384 (128*3)
	for(a = 23100; a <= 39996; a = a+384 )
 8000a94:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000a98:	677b      	str	r3, [r7, #116]	; 0x74
 8000a9a:	e019      	b.n	8000ad0 <main+0x1c8>
	{
		//lenght*rgb = 45*3 = 135 (0-134)
		for(b=0;b<135;b++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	673b      	str	r3, [r7, #112]	; 0x70
 8000aa0:	e00c      	b.n	8000abc <main+0x1b4>
		{
			Framememory[a+b] = fan_off[b+c];
 8000aa2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000aa6:	441a      	add	r2, r3
 8000aa8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aac:	440b      	add	r3, r1
 8000aae:	4924      	ldr	r1, [pc, #144]	; (8000b40 <main+0x238>)
 8000ab0:	5c89      	ldrb	r1, [r1, r2]
 8000ab2:	4a20      	ldr	r2, [pc, #128]	; (8000b34 <main+0x22c>)
 8000ab4:	54d1      	strb	r1, [r2, r3]
		for(b=0;b<135;b++)
 8000ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ab8:	3301      	adds	r3, #1
 8000aba:	673b      	str	r3, [r7, #112]	; 0x70
 8000abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000abe:	2b86      	cmp	r3, #134	; 0x86
 8000ac0:	ddef      	ble.n	8000aa2 <main+0x19a>
		}
		//offset 135
		c = c +135;
 8000ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ac4:	3387      	adds	r3, #135	; 0x87
 8000ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
	for(a = 23100; a <= 39996; a = a+384 )
 8000ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000aca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ace:	677b      	str	r3, [r7, #116]	; 0x74
 8000ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ad2:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	dde0      	ble.n	8000a9c <main+0x194>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		PIR[0] = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin); //save PIR current state
 8000ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ade:	4819      	ldr	r0, [pc, #100]	; (8000b44 <main+0x23c>)
 8000ae0:	f005 f88a 	bl	8005bf8 <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <main+0x240>)
 8000aea:	701a      	strb	r2, [r3, #0]

		//if (HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin) == GPIO_PIN_SET)
		if (PIR[0] == GPIO_PIN_SET && PIR[1] == GPIO_PIN_RESET )
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <main+0x240>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d170      	bne.n	8000bd6 <main+0x2ce>
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <main+0x240>)
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d16c      	bne.n	8000bd6 <main+0x2ce>
		{
			LCD_flush(&ST7735);
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <main+0x210>)
 8000afe:	f7ff febb 	bl	8000878 <LCD_flush>
			//rtc work
			//start clock
			int a,b,c = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	663b      	str	r3, [r7, #96]	; 0x60
			//start at pixel index 23100 (red start at index 0 so add offset 23100%3 = 0)
			//stop at pixel index 39996 (start + length*rgb*( height of pixel number - 1) = 23100+128*3*(45-1) = 39996)
			//add next array 384 (128*3)
			for(a = 23100; a <= 39996; a = a+384 )
 8000b06:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8000b0c:	e035      	b.n	8000b7a <main+0x272>
			{
				//lenght*rgb = 45*3 = 135 (0-134)
				for(b=0;b<135;b++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	667b      	str	r3, [r7, #100]	; 0x64
 8000b12:	e028      	b.n	8000b66 <main+0x25e>
 8000b14:	58024400 	.word	0x58024400
 8000b18:	2401d4dc 	.word	0x2401d4dc
 8000b1c:	2401db30 	.word	0x2401db30
 8000b20:	58020c00 	.word	0x58020c00
 8000b24:	58021800 	.word	0x58021800
 8000b28:	2401d4f8 	.word	0x2401d4f8
 8000b2c:	2401d5ac 	.word	0x2401d5ac
 8000b30:	2401dae4 	.word	0x2401dae4
 8000b34:	240114dc 	.word	0x240114dc
 8000b38:	24000018 	.word	0x24000018
 8000b3c:	2400ef90 	.word	0x2400ef90
 8000b40:	2400c018 	.word	0x2400c018
 8000b44:	58021000 	.word	0x58021000
 8000b48:	2401d51c 	.word	0x2401d51c
				{
					Framememory[a+b] = fan_on[b+c];
 8000b4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b50:	441a      	add	r2, r3
 8000b52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b56:	440b      	add	r3, r1
 8000b58:	49a3      	ldr	r1, [pc, #652]	; (8000de8 <main+0x4e0>)
 8000b5a:	5c89      	ldrb	r1, [r1, r2]
 8000b5c:	4aa3      	ldr	r2, [pc, #652]	; (8000dec <main+0x4e4>)
 8000b5e:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b62:	3301      	adds	r3, #1
 8000b64:	667b      	str	r3, [r7, #100]	; 0x64
 8000b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b68:	2b86      	cmp	r3, #134	; 0x86
 8000b6a:	ddef      	ble.n	8000b4c <main+0x244>
				}
				//offset 135
				c = c +135;
 8000b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b6e:	3387      	adds	r3, #135	; 0x87
 8000b70:	663b      	str	r3, [r7, #96]	; 0x60
			for(a = 23100; a <= 39996; a = a+384 )
 8000b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b74:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8000b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b7c:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000b80:	4293      	cmp	r3, r2
 8000b82:	ddc4      	ble.n	8000b0e <main+0x206>
			}


			RTC_ON = 1;
 8000b84:	4b9a      	ldr	r3, [pc, #616]	; (8000df0 <main+0x4e8>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]

			RTC_TimeTypeDef sTime = {0};
 8000b8a:	f107 0318 	add.w	r3, r7, #24
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
			sTime.Hours =0x00; //0x14 (2 pm.)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	763b      	strb	r3, [r7, #24]
			sTime.Minutes =0x00; //0x30 (half hour or 30 min)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	767b      	strb	r3, [r7, #25]
			sTime.Seconds = 0x00; // 0 second
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	76bb      	strb	r3, [r7, #26]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	2201      	movs	r2, #1
 8000bac:	4619      	mov	r1, r3
 8000bae:	4891      	ldr	r0, [pc, #580]	; (8000df4 <main+0x4ec>)
 8000bb0:	f007 fdaa 	bl	8008708 <HAL_RTC_SetTime>

			RTC_DateTypeDef sDate ={0};
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
			sDate.Date = 0x20;
 8000bb8:	2320      	movs	r3, #32
 8000bba:	75bb      	strb	r3, [r7, #22]
			sDate.Month = 0x10;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	757b      	strb	r3, [r7, #21]
			sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	753b      	strb	r3, [r7, #20]
			sDate.Year = 0x21;
 8000bc4:	2321      	movs	r3, #33	; 0x21
 8000bc6:	75fb      	strb	r3, [r7, #23]
			HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4888      	ldr	r0, [pc, #544]	; (8000df4 <main+0x4ec>)
 8000bd2:	f007 fe93 	bl	80088fc <HAL_RTC_SetDate>
//
//			//show lcd mode function
//
//
//		}
		PIR[1] = PIR[0]; // save PIR new state
 8000bd6:	4b88      	ldr	r3, [pc, #544]	; (8000df8 <main+0x4f0>)
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	4b87      	ldr	r3, [pc, #540]	; (8000df8 <main+0x4f0>)
 8000bdc:	705a      	strb	r2, [r3, #1]

		button1[0]= HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin); //save s1 current state
 8000bde:	2180      	movs	r1, #128	; 0x80
 8000be0:	4886      	ldr	r0, [pc, #536]	; (8000dfc <main+0x4f4>)
 8000be2:	f005 f809 	bl	8005bf8 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b85      	ldr	r3, [pc, #532]	; (8000e00 <main+0x4f8>)
 8000bec:	701a      	strb	r2, [r3, #0]
		button2[0]= HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin); //save s2 current state
 8000bee:	2140      	movs	r1, #64	; 0x40
 8000bf0:	4882      	ldr	r0, [pc, #520]	; (8000dfc <main+0x4f4>)
 8000bf2:	f005 f801 	bl	8005bf8 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b82      	ldr	r3, [pc, #520]	; (8000e04 <main+0x4fc>)
 8000bfc:	701a      	strb	r2, [r3, #0]
		button3[0]= HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin); //save s1 current state
 8000bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c02:	4881      	ldr	r0, [pc, #516]	; (8000e08 <main+0x500>)
 8000c04:	f004 fff8 	bl	8005bf8 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b7f      	ldr	r3, [pc, #508]	; (8000e0c <main+0x504>)
 8000c0e:	701a      	strb	r2, [r3, #0]

		if(button1[1]==GPIO_PIN_SET && button1[0]==GPIO_PIN_RESET ) // if press s1
 8000c10:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <main+0x4f8>)
 8000c12:	785b      	ldrb	r3, [r3, #1]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d12f      	bne.n	8000c78 <main+0x370>
 8000c18:	4b79      	ldr	r3, [pc, #484]	; (8000e00 <main+0x4f8>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d12b      	bne.n	8000c78 <main+0x370>
		{
			LCD_flush(&ST7735);
 8000c20:	487b      	ldr	r0, [pc, #492]	; (8000e10 <main+0x508>)
 8000c22:	f7ff fe29 	bl	8000878 <LCD_flush>
			PWM = 2500;
 8000c26:	4b7b      	ldr	r3, [pc, #492]	; (8000e14 <main+0x50c>)
 8000c28:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000c2c:	601a      	str	r2, [r3, #0]
			//fan_mode = 1;
			//show mode 1
			//memcpy(Framememory,owl,sizeof(owl));
			//show speed
			int i,j,n = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	657b      	str	r3, [r7, #84]	; 0x54
			//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
			//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
			//add next array 384 (128*3)
			for(i = 25956; i <= 37760; i = i+384 )
 8000c32:	f246 5364 	movw	r3, #25956	; 0x6564
 8000c36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c38:	e019      	b.n	8000c6e <main+0x366>
			{
				//lenght*rgb = 32*3 = 96 (0-95)
				for(j=0;j<96;j++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c3e:	e00c      	b.n	8000c5a <main+0x352>
				{
					Framememory[i+j] = speed1[j+n];
 8000c40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c44:	441a      	add	r2, r3
 8000c46:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c4a:	440b      	add	r3, r1
 8000c4c:	4972      	ldr	r1, [pc, #456]	; (8000e18 <main+0x510>)
 8000c4e:	5c89      	ldrb	r1, [r1, r2]
 8000c50:	4a66      	ldr	r2, [pc, #408]	; (8000dec <main+0x4e4>)
 8000c52:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c56:	3301      	adds	r3, #1
 8000c58:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c5c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c5e:	ddef      	ble.n	8000c40 <main+0x338>
				}
				//offset 150
				n = n +96;
 8000c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c62:	3360      	adds	r3, #96	; 0x60
 8000c64:	657b      	str	r3, [r7, #84]	; 0x54
			for(i = 25956; i <= 37760; i = i+384 )
 8000c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c68:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c70:	f249 3280 	movw	r2, #37760	; 0x9380
 8000c74:	4293      	cmp	r3, r2
 8000c76:	dde0      	ble.n	8000c3a <main+0x332>
			}
		}

		if(button2[1]==GPIO_PIN_SET && button2[0]==GPIO_PIN_RESET ) // if press s2
 8000c78:	4b62      	ldr	r3, [pc, #392]	; (8000e04 <main+0x4fc>)
 8000c7a:	785b      	ldrb	r3, [r3, #1]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d12f      	bne.n	8000ce0 <main+0x3d8>
 8000c80:	4b60      	ldr	r3, [pc, #384]	; (8000e04 <main+0x4fc>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d12b      	bne.n	8000ce0 <main+0x3d8>
		{
			LCD_flush(&ST7735);
 8000c88:	4861      	ldr	r0, [pc, #388]	; (8000e10 <main+0x508>)
 8000c8a:	f7ff fdf5 	bl	8000878 <LCD_flush>
			PWM = 5000;
 8000c8e:	4b61      	ldr	r3, [pc, #388]	; (8000e14 <main+0x50c>)
 8000c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c94:	601a      	str	r2, [r3, #0]
			//fan_mode = 2;
			//show mode 2
			//memcpy(Framememory,dog,sizeof(dog));
			//show speed
			int i,j,n = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	64bb      	str	r3, [r7, #72]	; 0x48
			//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
			//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
			//add next array 384 (128*3)
			for(i = 25956; i <= 37760; i = i+384 )
 8000c9a:	f246 5364 	movw	r3, #25956	; 0x6564
 8000c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8000ca0:	e019      	b.n	8000cd6 <main+0x3ce>
			{
				//lenght*rgb = 32*3 = 96 (0-95)
				for(j=0;j<96;j++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ca6:	e00c      	b.n	8000cc2 <main+0x3ba>
				{
					Framememory[i+j] = speed2[j+n];
 8000ca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cac:	441a      	add	r2, r3
 8000cae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb2:	440b      	add	r3, r1
 8000cb4:	4959      	ldr	r1, [pc, #356]	; (8000e1c <main+0x514>)
 8000cb6:	5c89      	ldrb	r1, [r1, r2]
 8000cb8:	4a4c      	ldr	r2, [pc, #304]	; (8000dec <main+0x4e4>)
 8000cba:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc4:	2b5f      	cmp	r3, #95	; 0x5f
 8000cc6:	ddef      	ble.n	8000ca8 <main+0x3a0>
				}
				//offset 150
				n = n +96;
 8000cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cca:	3360      	adds	r3, #96	; 0x60
 8000ccc:	64bb      	str	r3, [r7, #72]	; 0x48
			for(i = 25956; i <= 37760; i = i+384 )
 8000cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cd0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cd4:	653b      	str	r3, [r7, #80]	; 0x50
 8000cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cd8:	f249 3280 	movw	r2, #37760	; 0x9380
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	dde0      	ble.n	8000ca2 <main+0x39a>
			}
		}

		if(button3[1]==GPIO_PIN_SET && button3[0]==GPIO_PIN_RESET ) // if press s3
 8000ce0:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <main+0x504>)
 8000ce2:	785b      	ldrb	r3, [r3, #1]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d12f      	bne.n	8000d48 <main+0x440>
 8000ce8:	4b48      	ldr	r3, [pc, #288]	; (8000e0c <main+0x504>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d12b      	bne.n	8000d48 <main+0x440>
		{
			LCD_flush(&ST7735);
 8000cf0:	4847      	ldr	r0, [pc, #284]	; (8000e10 <main+0x508>)
 8000cf2:	f7ff fdc1 	bl	8000878 <LCD_flush>
			PWM = 10000;
 8000cf6:	4b47      	ldr	r3, [pc, #284]	; (8000e14 <main+0x50c>)
 8000cf8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000cfc:	601a      	str	r2, [r3, #0]
			//fan_mode = 3;
			//show mode
			//memcpy(Framememory,man,sizeof(man));
			//show speed
			int i,j,n = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
			//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
			//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
			//add next array 384 (128*3)
			for(i = 25956; i <= 37760; i = i+384 )
 8000d02:	f246 5364 	movw	r3, #25956	; 0x6564
 8000d06:	647b      	str	r3, [r7, #68]	; 0x44
 8000d08:	e019      	b.n	8000d3e <main+0x436>
			{
				//lenght*rgb = 32*3 = 96 (0-95)
				for(j=0;j<96;j++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8000d0e:	e00c      	b.n	8000d2a <main+0x422>
				{
					Framememory[i+j] = speed3[j+n];
 8000d10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d14:	441a      	add	r2, r3
 8000d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d1a:	440b      	add	r3, r1
 8000d1c:	4940      	ldr	r1, [pc, #256]	; (8000e20 <main+0x518>)
 8000d1e:	5c89      	ldrb	r1, [r1, r2]
 8000d20:	4a32      	ldr	r2, [pc, #200]	; (8000dec <main+0x4e4>)
 8000d22:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d26:	3301      	adds	r3, #1
 8000d28:	643b      	str	r3, [r7, #64]	; 0x40
 8000d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d2c:	2b5f      	cmp	r3, #95	; 0x5f
 8000d2e:	ddef      	ble.n	8000d10 <main+0x408>
				}
				//offset 150
				n = n +96;
 8000d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d32:	3360      	adds	r3, #96	; 0x60
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i = 25956; i <= 37760; i = i+384 )
 8000d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d38:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8000d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d40:	f249 3280 	movw	r2, #37760	; 0x9380
 8000d44:	4293      	cmp	r3, r2
 8000d46:	dde0      	ble.n	8000d0a <main+0x402>
			}
		}

		button1[1] = button1[0]; // save S1 new state
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <main+0x4f8>)
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <main+0x4f8>)
 8000d4e:	705a      	strb	r2, [r3, #1]
		button2[1] = button2[0]; // save S2 new state
 8000d50:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <main+0x4fc>)
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <main+0x4fc>)
 8000d56:	705a      	strb	r2, [r3, #1]
		button3[1] = button3[0]; // save S3 new state
 8000d58:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <main+0x504>)
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <main+0x504>)
 8000d5e:	705a      	strb	r2, [r3, #1]

		if (RTC_ON == 1)
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <main+0x4e8>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d17d      	bne.n	8000e64 <main+0x55c>
		{
			RTC_TimeTypeDef sTime = NowTime;
 8000d68:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <main+0x51c>)
 8000d6a:	463c      	mov	r4, r7
 8000d6c:	461d      	mov	r5, r3
 8000d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d72:	682b      	ldr	r3, [r5, #0]
 8000d74:	6023      	str	r3, [r4, #0]
			if (sTime.Seconds >= 0x60)
 8000d76:	78bb      	ldrb	r3, [r7, #2]
 8000d78:	2b5f      	cmp	r3, #95	; 0x5f
 8000d7a:	d919      	bls.n	8000db0 <main+0x4a8>
			{
				sTime.Seconds -= 0x60;
 8000d7c:	78bb      	ldrb	r3, [r7, #2]
 8000d7e:	3b60      	subs	r3, #96	; 0x60
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	70bb      	strb	r3, [r7, #2]
				sTime.Minutes++;
 8000d84:	787b      	ldrb	r3, [r7, #1]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	707b      	strb	r3, [r7, #1]
				if (sTime.Minutes >= 0x60)
 8000d8c:	787b      	ldrb	r3, [r7, #1]
 8000d8e:	2b5f      	cmp	r3, #95	; 0x5f
 8000d90:	d90e      	bls.n	8000db0 <main+0x4a8>
				{
					sTime.Minutes -= 0x60;
 8000d92:	787b      	ldrb	r3, [r7, #1]
 8000d94:	3b60      	subs	r3, #96	; 0x60
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	707b      	strb	r3, [r7, #1]
					sTime.Hours++;
 8000d9a:	783b      	ldrb	r3, [r7, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	703b      	strb	r3, [r7, #0]
					if (sTime.Hours >= 0x24)
 8000da2:	783b      	ldrb	r3, [r7, #0]
 8000da4:	2b23      	cmp	r3, #35	; 0x23
 8000da6:	d903      	bls.n	8000db0 <main+0x4a8>
					{
						sTime.Hours -= 0x24;
 8000da8:	783b      	ldrb	r3, [r7, #0]
 8000daa:	3b24      	subs	r3, #36	; 0x24
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	703b      	strb	r3, [r7, #0]
					}
				}
			}
			if (sTime.Minutes < 0x01)
 8000db0:	787b      	ldrb	r3, [r7, #1]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <main+0x4ba>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM);
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <main+0x520>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <main+0x50c>)
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc0:	e050      	b.n	8000e64 <main+0x55c>
	//			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
			}
			else
			{
				RTC_ON = 0;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <main+0x4e8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <main+0x520>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
				LCD_flush(&ST7735);
 8000dd0:	480f      	ldr	r0, [pc, #60]	; (8000e10 <main+0x508>)
 8000dd2:	f7ff fd51 	bl	8000878 <LCD_flush>
				int a,b,c = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
//				start at pixel index 23100 (red start at index 0 so add offset 23100%3 = 0)
//				stop at pixel index 39996 (start + length*rgb*( height of pixel number - 1) = 23100+128*3*(45-1) = 39996)
//				add next array 384 (128*3)
				for(a = 23100; a <= 39996; a = a+384 )
 8000dda:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8000de0:	e03b      	b.n	8000e5a <main+0x552>
				{
					//lenght*rgb = 45*3 = 135 (0-134)
					for(b=0;b<135;b++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
 8000de6:	e02e      	b.n	8000e46 <main+0x53e>
 8000de8:	2400d7d4 	.word	0x2400d7d4
 8000dec:	240114dc 	.word	0x240114dc
 8000df0:	2401d51a 	.word	0x2401d51a
 8000df4:	2401dac0 	.word	0x2401dac0
 8000df8:	2401d51c 	.word	0x2401d51c
 8000dfc:	58020400 	.word	0x58020400
 8000e00:	2401d510 	.word	0x2401d510
 8000e04:	2401d514 	.word	0x2401d514
 8000e08:	58021800 	.word	0x58021800
 8000e0c:	2401d518 	.word	0x2401d518
 8000e10:	2401d4dc 	.word	0x2401d4dc
 8000e14:	24011390 	.word	0x24011390
 8000e18:	2400ef90 	.word	0x2400ef90
 8000e1c:	2400fb90 	.word	0x2400fb90
 8000e20:	24010790 	.word	0x24010790
 8000e24:	2401dbb8 	.word	0x2401dbb8
 8000e28:	2401dae4 	.word	0x2401dae4
					{
						Framememory[a+b] = fan_off[b+c];
 8000e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e30:	441a      	add	r2, r3
 8000e32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e36:	440b      	add	r3, r1
 8000e38:	4910      	ldr	r1, [pc, #64]	; (8000e7c <main+0x574>)
 8000e3a:	5c89      	ldrb	r1, [r1, r2]
 8000e3c:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <main+0x578>)
 8000e3e:	54d1      	strb	r1, [r2, r3]
					for(b=0;b<135;b++)
 8000e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e42:	3301      	adds	r3, #1
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	2b86      	cmp	r3, #134	; 0x86
 8000e4a:	ddef      	ble.n	8000e2c <main+0x524>
					}
					//offset 135
					c = c +135;
 8000e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4e:	3387      	adds	r3, #135	; 0x87
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
				for(a = 23100; a <= 39996; a = a+384 )
 8000e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e54:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5c:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000e60:	4293      	cmp	r3, r2
 8000e62:	ddbe      	ble.n	8000de2 <main+0x4da>

			}
		}

		//read RTC
		HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8000e64:	2201      	movs	r2, #1
 8000e66:	4907      	ldr	r1, [pc, #28]	; (8000e84 <main+0x57c>)
 8000e68:	4807      	ldr	r0, [pc, #28]	; (8000e88 <main+0x580>)
 8000e6a:	f007 fceb 	bl	8008844 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4906      	ldr	r1, [pc, #24]	; (8000e8c <main+0x584>)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <main+0x580>)
 8000e74:	f007 fdca 	bl	8008a0c <HAL_RTC_GetDate>
		PIR[0] = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin); //save PIR current state
 8000e78:	e62f      	b.n	8000ada <main+0x1d2>
 8000e7a:	bf00      	nop
 8000e7c:	2400c018 	.word	0x2400c018
 8000e80:	240114dc 	.word	0x240114dc
 8000e84:	2401dbb8 	.word	0x2401dbb8
 8000e88:	2401dac0 	.word	0x2401dac0
 8000e8c:	2401dabc 	.word	0x2401dabc

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09c      	sub	sp, #112	; 0x70
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	224c      	movs	r2, #76	; 0x4c
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f00c f96a 	bl	800d178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f00c f964 	bl	800d178 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f005 f849 	bl	8005f48 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <SystemClock_Config+0x100>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	4a34      	ldr	r2, [pc, #208]	; (8000f90 <SystemClock_Config+0x100>)
 8000ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec4:	6193      	str	r3, [r2, #24]
 8000ec6:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <SystemClock_Config+0x100>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <SystemClock_Config+0x104>)
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <SystemClock_Config+0x104>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000edc:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <SystemClock_Config+0x104>)
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ee8:	bf00      	nop
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <SystemClock_Config+0x100>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ef6:	d1f8      	bne.n	8000eea <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <SystemClock_Config+0x108>)
 8000efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efc:	f023 0303 	bic.w	r3, r3, #3
 8000f00:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <SystemClock_Config+0x108>)
 8000f02:	f043 0302 	orr.w	r3, r3, #2
 8000f06:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f08:	2309      	movs	r3, #9
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f0c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f12:	2301      	movs	r3, #1
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000f22:	2319      	movs	r3, #25
 8000f24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f32:	230c      	movs	r3, #12
 8000f34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4618      	mov	r0, r3
 8000f44:	f005 f86a 	bl	800601c <HAL_RCC_OscConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f4e:	f000 fbe3 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f52:	233f      	movs	r3, #63	; 0x3f
 8000f54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f56:	2303      	movs	r3, #3
 8000f58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f66:	2340      	movs	r3, #64	; 0x40
 8000f68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f70:	2340      	movs	r3, #64	; 0x40
 8000f72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f005 fc5f 	bl	800683c <HAL_RCC_ClockConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000f84:	f000 fbc8 	bl	8001718 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3770      	adds	r7, #112	; 0x70
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58024800 	.word	0x58024800
 8000f94:	58000400 	.word	0x58000400
 8000f98:	58024400 	.word	0x58024400

08000f9c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <MX_ETH_Init+0x80>)
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <MX_ETH_Init+0x84>)
 8000fa4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_ETH_Init+0x88>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_ETH_Init+0x88>)
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_ETH_Init+0x88>)
 8000fb4:	22e1      	movs	r2, #225	; 0xe1
 8000fb6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_ETH_Init+0x88>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_ETH_Init+0x88>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_ETH_Init+0x88>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_ETH_Init+0x80>)
 8000fcc:	4a15      	ldr	r2, [pc, #84]	; (8001024 <MX_ETH_Init+0x88>)
 8000fce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_ETH_Init+0x80>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_ETH_Init+0x80>)
 8000fd8:	4a13      	ldr	r2, [pc, #76]	; (8001028 <MX_ETH_Init+0x8c>)
 8000fda:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_ETH_Init+0x80>)
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <MX_ETH_Init+0x90>)
 8000fe0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_ETH_Init+0x80>)
 8000fe4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000fe8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <MX_ETH_Init+0x80>)
 8000fec:	f004 f83e 	bl	800506c <HAL_ETH_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ff6:	f000 fb8f 	bl	8001718 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ffa:	2234      	movs	r2, #52	; 0x34
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <MX_ETH_Init+0x94>)
 8001000:	f00c f8ba 	bl	800d178 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_ETH_Init+0x94>)
 8001006:	2221      	movs	r2, #33	; 0x21
 8001008:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_ETH_Init+0x94>)
 800100c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001010:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MX_ETH_Init+0x94>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2401dbcc 	.word	0x2401dbcc
 8001020:	40028000 	.word	0x40028000
 8001024:	2401d520 	.word	0x2401d520
 8001028:	24011460 	.word	0x24011460
 800102c:	24011400 	.word	0x24011400
 8001030:	2401dc54 	.word	0x2401dc54

08001034 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	; 0x40
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800103a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2228      	movs	r2, #40	; 0x28
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f00c f88f 	bl	800d178 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800105a:	4b3c      	ldr	r3, [pc, #240]	; (800114c <MX_RTC_Init+0x118>)
 800105c:	4a3c      	ldr	r2, [pc, #240]	; (8001150 <MX_RTC_Init+0x11c>)
 800105e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001060:	4b3a      	ldr	r3, [pc, #232]	; (800114c <MX_RTC_Init+0x118>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <MX_RTC_Init+0x118>)
 8001068:	227f      	movs	r2, #127	; 0x7f
 800106a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <MX_RTC_Init+0x118>)
 800106e:	22ff      	movs	r2, #255	; 0xff
 8001070:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001072:	4b36      	ldr	r3, [pc, #216]	; (800114c <MX_RTC_Init+0x118>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001078:	4b34      	ldr	r3, [pc, #208]	; (800114c <MX_RTC_Init+0x118>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800107e:	4b33      	ldr	r3, [pc, #204]	; (800114c <MX_RTC_Init+0x118>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001084:	4b31      	ldr	r3, [pc, #196]	; (800114c <MX_RTC_Init+0x118>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800108a:	4830      	ldr	r0, [pc, #192]	; (800114c <MX_RTC_Init+0x118>)
 800108c:	f007 fac4 	bl	8008618 <HAL_RTC_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001096:	f000 fb3f 	bl	8001718 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b8:	2201      	movs	r2, #1
 80010ba:	4619      	mov	r1, r3
 80010bc:	4823      	ldr	r0, [pc, #140]	; (800114c <MX_RTC_Init+0x118>)
 80010be:	f007 fb23 	bl	8008708 <HAL_RTC_SetTime>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fb26 	bl	8001718 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80010d8:	2301      	movs	r3, #1
 80010da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e8:	2201      	movs	r2, #1
 80010ea:	4619      	mov	r1, r3
 80010ec:	4817      	ldr	r0, [pc, #92]	; (800114c <MX_RTC_Init+0x118>)
 80010ee:	f007 fc05 	bl	80088fc <HAL_RTC_SetDate>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80010f8:	f000 fb0e 	bl	8001718 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001100:	2300      	movs	r3, #0
 8001102:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001104:	2300      	movs	r3, #0
 8001106:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_RTC_Init+0x120>)
 8001116:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001120:	2301      	movs	r3, #1
 8001122:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	2201      	movs	r2, #1
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <MX_RTC_Init+0x118>)
 8001134:	f007 fcb8 	bl	8008aa8 <HAL_RTC_SetAlarm_IT>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800113e:	f000 faeb 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3740      	adds	r7, #64	; 0x40
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2401dac0 	.word	0x2401dac0
 8001150:	58004000 	.word	0x58004000
 8001154:	00808080 	.word	0x00808080

08001158 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <MX_SPI1_Init+0xa8>)
 800115e:	4a29      	ldr	r2, [pc, #164]	; (8001204 <MX_SPI1_Init+0xac>)
 8001160:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <MX_SPI1_Init+0xa8>)
 8001164:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001168:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MX_SPI1_Init+0xa8>)
 800116c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001170:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_SPI1_Init+0xa8>)
 8001174:	2207      	movs	r2, #7
 8001176:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <MX_SPI1_Init+0xa8>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_SPI1_Init+0xa8>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <MX_SPI1_Init+0xa8>)
 8001186:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800118a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_SPI1_Init+0xa8>)
 800118e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001192:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_SPI1_Init+0xa8>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_SPI1_Init+0xa8>)
 800119c:	2200      	movs	r2, #0
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_SPI1_Init+0xa8>)
 80011ee:	f007 febb 	bl	8008f68 <HAL_SPI_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80011f8:	f000 fa8e 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2401db30 	.word	0x2401db30
 8001204:	40013000 	.word	0x40013000

08001208 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09a      	sub	sp, #104	; 0x68
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001228:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	222c      	movs	r2, #44	; 0x2c
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f00b ff98 	bl	800d178 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001248:	4b43      	ldr	r3, [pc, #268]	; (8001358 <MX_TIM1_Init+0x150>)
 800124a:	4a44      	ldr	r2, [pc, #272]	; (800135c <MX_TIM1_Init+0x154>)
 800124c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800124e:	4b42      	ldr	r3, [pc, #264]	; (8001358 <MX_TIM1_Init+0x150>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b40      	ldr	r3, [pc, #256]	; (8001358 <MX_TIM1_Init+0x150>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800125a:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <MX_TIM1_Init+0x150>)
 800125c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001260:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b3d      	ldr	r3, [pc, #244]	; (8001358 <MX_TIM1_Init+0x150>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001268:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <MX_TIM1_Init+0x150>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <MX_TIM1_Init+0x150>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001274:	4838      	ldr	r0, [pc, #224]	; (8001358 <MX_TIM1_Init+0x150>)
 8001276:	f008 fe1a 	bl	8009eae <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001280:	f000 fa4a 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800128e:	4619      	mov	r1, r3
 8001290:	4831      	ldr	r0, [pc, #196]	; (8001358 <MX_TIM1_Init+0x150>)
 8001292:	f009 f945 	bl	800a520 <HAL_TIM_ConfigClockSource>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800129c:	f000 fa3c 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012a0:	482d      	ldr	r0, [pc, #180]	; (8001358 <MX_TIM1_Init+0x150>)
 80012a2:	f008 fec3 	bl	800a02c <HAL_TIM_PWM_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012ac:	f000 fa34 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012c0:	4619      	mov	r1, r3
 80012c2:	4825      	ldr	r0, [pc, #148]	; (8001358 <MX_TIM1_Init+0x150>)
 80012c4:	f009 fe4c 	bl	800af60 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012ce:	f000 fa23 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d2:	2360      	movs	r3, #96	; 0x60
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4818      	ldr	r0, [pc, #96]	; (8001358 <MX_TIM1_Init+0x150>)
 80012f8:	f009 f802 	bl	800a300 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001302:	f000 fa09 	bl	8001718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800131a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001328:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM1_Init+0x150>)
 800133c:	f009 fe98 	bl	800b070 <HAL_TIMEx_ConfigBreakDeadTime>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001346:	f000 f9e7 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800134a:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM1_Init+0x150>)
 800134c:	f000 fbf0 	bl	8001b30 <HAL_TIM_MspPostInit>

}
 8001350:	bf00      	nop
 8001352:	3768      	adds	r7, #104	; 0x68
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2401dae4 	.word	0x2401dae4
 800135c:	40010000 	.word	0x40010000

08001360 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001366:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <MX_USART3_UART_Init+0x94>)
 8001368:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 800136c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001370:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 80013aa:	f009 fedf 	bl	800b16c <HAL_UART_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013b4:	f000 f9b0 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b8:	2100      	movs	r1, #0
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 80013bc:	f00b fb14 	bl	800c9e8 <HAL_UARTEx_SetTxFifoThreshold>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013c6:	f000 f9a7 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ca:	2100      	movs	r1, #0
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 80013ce:	f00b fb49 	bl	800ca64 <HAL_UARTEx_SetRxFifoThreshold>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013d8:	f000 f99e 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 80013de:	f00b faca 	bl	800c976 <HAL_UARTEx_DisableFifoMode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013e8:	f000 f996 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2401d5ac 	.word	0x2401d5ac
 80013f4:	40004800 	.word	0x40004800

080013f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013fe:	4a16      	ldr	r2, [pc, #88]	; (8001458 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001400:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001404:	2209      	movs	r2, #9
 8001406:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800140a:	2202      	movs	r2, #2
 800140c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001416:	2202      	movs	r2, #2
 8001418:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800142e:	2201      	movs	r2, #1
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001434:	2201      	movs	r2, #1
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800143a:	2200      	movs	r2, #0
 800143c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001440:	f004 fc3a 	bl	8005cb8 <HAL_PCD_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800144a:	f000 f965 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2401d63c 	.word	0x2401d63c
 8001458:	40080000 	.word	0x40080000

0800145c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_DMA_Init+0x5c>)
 8001464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <MX_DMA_Init+0x5c>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_DMA_Init+0x5c>)
 8001474:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	200b      	movs	r0, #11
 8001486:	f000 ff62 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800148a:	200b      	movs	r0, #11
 800148c:	f000 ff79 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	200c      	movs	r0, #12
 8001496:	f000 ff5a 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800149a:	200c      	movs	r0, #12
 800149c:	f000 ff71 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	200d      	movs	r0, #13
 80014a6:	f000 ff52 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80014aa:	200d      	movs	r0, #13
 80014ac:	f000 ff69 	bl	8002382 <HAL_NVIC_EnableIRQ>

}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	58024400 	.word	0x58024400

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b6b      	ldr	r3, [pc, #428]	; (8001680 <MX_GPIO_Init+0x1c4>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	4a69      	ldr	r2, [pc, #420]	; (8001680 <MX_GPIO_Init+0x1c4>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e2:	4b67      	ldr	r3, [pc, #412]	; (8001680 <MX_GPIO_Init+0x1c4>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f0:	4b63      	ldr	r3, [pc, #396]	; (8001680 <MX_GPIO_Init+0x1c4>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	4a62      	ldr	r2, [pc, #392]	; (8001680 <MX_GPIO_Init+0x1c4>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001500:	4b5f      	ldr	r3, [pc, #380]	; (8001680 <MX_GPIO_Init+0x1c4>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b5c      	ldr	r3, [pc, #368]	; (8001680 <MX_GPIO_Init+0x1c4>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	4a5a      	ldr	r2, [pc, #360]	; (8001680 <MX_GPIO_Init+0x1c4>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151e:	4b58      	ldr	r3, [pc, #352]	; (8001680 <MX_GPIO_Init+0x1c4>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b54      	ldr	r3, [pc, #336]	; (8001680 <MX_GPIO_Init+0x1c4>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	4a53      	ldr	r2, [pc, #332]	; (8001680 <MX_GPIO_Init+0x1c4>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153c:	4b50      	ldr	r3, [pc, #320]	; (8001680 <MX_GPIO_Init+0x1c4>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	4b4d      	ldr	r3, [pc, #308]	; (8001680 <MX_GPIO_Init+0x1c4>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	4a4b      	ldr	r2, [pc, #300]	; (8001680 <MX_GPIO_Init+0x1c4>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155a:	4b49      	ldr	r3, [pc, #292]	; (8001680 <MX_GPIO_Init+0x1c4>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001568:	4b45      	ldr	r3, [pc, #276]	; (8001680 <MX_GPIO_Init+0x1c4>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	4a44      	ldr	r2, [pc, #272]	; (8001680 <MX_GPIO_Init+0x1c4>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001578:	4b41      	ldr	r3, [pc, #260]	; (8001680 <MX_GPIO_Init+0x1c4>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001586:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <MX_GPIO_Init+0x1c4>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	4a3c      	ldr	r2, [pc, #240]	; (8001680 <MX_GPIO_Init+0x1c4>)
 800158e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <MX_GPIO_Init+0x1c4>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2101      	movs	r1, #1
 80015a8:	4836      	ldr	r0, [pc, #216]	; (8001684 <MX_GPIO_Init+0x1c8>)
 80015aa:	f004 fb3d 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b4:	4834      	ldr	r0, [pc, #208]	; (8001688 <MX_GPIO_Init+0x1cc>)
 80015b6:	f004 fb37 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c0:	4831      	ldr	r0, [pc, #196]	; (8001688 <MX_GPIO_Init+0x1cc>)
 80015c2:	f004 fb31 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015cc:	482f      	ldr	r0, [pc, #188]	; (800168c <MX_GPIO_Init+0x1d0>)
 80015ce:	f004 fb2b 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4826      	ldr	r0, [pc, #152]	; (8001684 <MX_GPIO_Init+0x1c8>)
 80015ea:	f004 f955 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80015ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	4823      	ldr	r0, [pc, #140]	; (8001690 <MX_GPIO_Init+0x1d4>)
 8001604:	f004 f948 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8001608:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4819      	ldr	r0, [pc, #100]	; (8001688 <MX_GPIO_Init+0x1cc>)
 8001622:	f004 f939 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4813      	ldr	r0, [pc, #76]	; (800168c <MX_GPIO_Init+0x1d0>)
 8001640:	f004 f92a 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 8001644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <MX_GPIO_Init+0x1d0>)
 800165a:	f004 f91d 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 800165e:	23c0      	movs	r3, #192	; 0xc0
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <MX_GPIO_Init+0x1c8>)
 8001672:	f004 f911 	bl	8005898 <HAL_GPIO_Init>

}
 8001676:	bf00      	nop
 8001678:	3730      	adds	r7, #48	; 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	58024400 	.word	0x58024400
 8001684:	58020400 	.word	0x58020400
 8001688:	58020c00 	.word	0x58020c00
 800168c:	58021800 	.word	0x58021800
 8001690:	58021000 	.word	0x58021000

08001694 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	RTC_ON = 0;
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_RTC_AlarmAEventCallback+0x70>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_RTC_AlarmAEventCallback+0x74>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	635a      	str	r2, [r3, #52]	; 0x34
	LCD_flush(&ST7735);
 80016aa:	4818      	ldr	r0, [pc, #96]	; (800170c <HAL_RTC_AlarmAEventCallback+0x78>)
 80016ac:	f7ff f8e4 	bl	8000878 <LCD_flush>
	int a,b,c = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
	//start at pixel index 23100 (red start at index 0 so add offset 23100%3 = 0)
	//stop at pixel index 39996 (start + length*rgb*( height of pixel number - 1) = 23100+128*3*(45-1) = 39996)
	//add next array 384 (128*3)
	for(a = 23100; a <= 39996; a = a+384 )
 80016b4:	f645 233c 	movw	r3, #23100	; 0x5a3c
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e019      	b.n	80016f0 <HAL_RTC_AlarmAEventCallback+0x5c>
	{
		//lenght*rgb = 45*3 = 135 (0-134)
		for(b=0;b<135;b++)
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	e00c      	b.n	80016dc <HAL_RTC_AlarmAEventCallback+0x48>
		{
			Framememory[a+b] = fan_off[b+c];
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	441a      	add	r2, r3
 80016c8:	6979      	ldr	r1, [r7, #20]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	440b      	add	r3, r1
 80016ce:	4910      	ldr	r1, [pc, #64]	; (8001710 <HAL_RTC_AlarmAEventCallback+0x7c>)
 80016d0:	5c89      	ldrb	r1, [r1, r2]
 80016d2:	4a10      	ldr	r2, [pc, #64]	; (8001714 <HAL_RTC_AlarmAEventCallback+0x80>)
 80016d4:	54d1      	strb	r1, [r2, r3]
		for(b=0;b<135;b++)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	3301      	adds	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b86      	cmp	r3, #134	; 0x86
 80016e0:	ddef      	ble.n	80016c2 <HAL_RTC_AlarmAEventCallback+0x2e>
		}
		//offset 135
		c = c +135;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3387      	adds	r3, #135	; 0x87
 80016e6:	60fb      	str	r3, [r7, #12]
	for(a = 23100; a <= 39996; a = a+384 )
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f649 423c 	movw	r2, #39996	; 0x9c3c
 80016f6:	4293      	cmp	r3, r2
 80016f8:	dde0      	ble.n	80016bc <HAL_RTC_AlarmAEventCallback+0x28>
	}
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2401d51a 	.word	0x2401d51a
 8001708:	2401dae4 	.word	0x2401dae4
 800170c:	2401d4dc 	.word	0x2401d4dc
 8001710:	2400c018 	.word	0x2400c018
 8001714:	240114dc 	.word	0x240114dc

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_MspInit+0x30>)
 800172c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001730:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_MspInit+0x30>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_MspInit+0x30>)
 800173c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	58024400 	.word	0x58024400

08001758 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a59      	ldr	r2, [pc, #356]	; (80018dc <HAL_ETH_MspInit+0x184>)
 8001776:	4293      	cmp	r3, r2
 8001778:	f040 80ab 	bne.w	80018d2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800177c:	4b58      	ldr	r3, [pc, #352]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 800177e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001782:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 8001784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001788:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800178c:	4b54      	ldr	r3, [pc, #336]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 800178e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800179a:	4b51      	ldr	r3, [pc, #324]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 800179c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017a0:	4a4f      	ldr	r2, [pc, #316]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 80017a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017aa:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 80017ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80017b8:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 80017ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017be:	4a48      	ldr	r2, [pc, #288]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 80017ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	4a40      	ldr	r2, [pc, #256]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b3a      	ldr	r3, [pc, #232]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	4a39      	ldr	r2, [pc, #228]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001818:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001822:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 8001838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_ETH_MspInit+0x188>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800184e:	2332      	movs	r3, #50	; 0x32
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800185e:	230b      	movs	r3, #11
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	481e      	ldr	r0, [pc, #120]	; (80018e4 <HAL_ETH_MspInit+0x18c>)
 800186a:	f004 f815 	bl	8005898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800186e:	2386      	movs	r3, #134	; 0x86
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800187e:	230b      	movs	r3, #11
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001886:	4619      	mov	r1, r3
 8001888:	4817      	ldr	r0, [pc, #92]	; (80018e8 <HAL_ETH_MspInit+0x190>)
 800188a:	f004 f805 	bl	8005898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800188e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018a0:	230b      	movs	r3, #11
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a8:	4619      	mov	r1, r3
 80018aa:	4810      	ldr	r0, [pc, #64]	; (80018ec <HAL_ETH_MspInit+0x194>)
 80018ac:	f003 fff4 	bl	8005898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80018b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018c2:	230b      	movs	r3, #11
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <HAL_ETH_MspInit+0x198>)
 80018ce:	f003 ffe3 	bl	8005898 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3738      	adds	r7, #56	; 0x38
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40028000 	.word	0x40028000
 80018e0:	58024400 	.word	0x58024400
 80018e4:	58020800 	.word	0x58020800
 80018e8:	58020000 	.word	0x58020000
 80018ec:	58020400 	.word	0x58020400
 80018f0:	58021800 	.word	0x58021800

080018f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0b2      	sub	sp, #200	; 0xc8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	22bc      	movs	r2, #188	; 0xbc
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f00b fc37 	bl	800d178 <memset>
  if(hrtc->Instance==RTC)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_RTC_MspInit+0x68>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d11e      	bne.n	8001952 <HAL_RTC_MspInit+0x5e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001914:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001918:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800191a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4618      	mov	r0, r3
 8001928:	f005 fb14 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001932:	f7ff fef1 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_RTC_MspInit+0x6c>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <HAL_RTC_MspInit+0x6c>)
 800193c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001940:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2029      	movs	r0, #41	; 0x29
 8001948:	f000 fd01 	bl	800234e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800194c:	2029      	movs	r0, #41	; 0x29
 800194e:	f000 fd18 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	37c8      	adds	r7, #200	; 0xc8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	58004000 	.word	0x58004000
 8001960:	58024400 	.word	0x58024400

08001964 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0ba      	sub	sp, #232	; 0xe8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	22bc      	movs	r2, #188	; 0xbc
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f00b fbf7 	bl	800d178 <memset>
  if(hspi->Instance==SPI1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <HAL_SPI_MspInit+0x170>)
 8001990:	4293      	cmp	r3, r2
 8001992:	f040 809b 	bne.w	8001acc <HAL_SPI_MspInit+0x168>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800199c:	2300      	movs	r3, #0
 800199e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a0:	f107 0318 	add.w	r3, r7, #24
 80019a4:	4618      	mov	r0, r3
 80019a6:	f005 fad5 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80019b0:	f7ff feb2 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019b4:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <HAL_SPI_MspInit+0x174>)
 80019b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019ba:	4a47      	ldr	r2, [pc, #284]	; (8001ad8 <HAL_SPI_MspInit+0x174>)
 80019bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019c4:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <HAL_SPI_MspInit+0x174>)
 80019c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <HAL_SPI_MspInit+0x174>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	4a3f      	ldr	r2, [pc, #252]	; (8001ad8 <HAL_SPI_MspInit+0x174>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <HAL_SPI_MspInit+0x174>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_SPI_MspInit+0x174>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f6:	4a38      	ldr	r2, [pc, #224]	; (8001ad8 <HAL_SPI_MspInit+0x174>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a00:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <HAL_SPI_MspInit+0x174>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a26:	2305      	movs	r3, #5
 8001a28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a30:	4619      	mov	r1, r3
 8001a32:	482a      	ldr	r0, [pc, #168]	; (8001adc <HAL_SPI_MspInit+0x178>)
 8001a34:	f003 ff30 	bl	8005898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a50:	2305      	movs	r3, #5
 8001a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4820      	ldr	r0, [pc, #128]	; (8001ae0 <HAL_SPI_MspInit+0x17c>)
 8001a5e:	f003 ff1b 	bl	8005898 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001a64:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <HAL_SPI_MspInit+0x184>)
 8001a66:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001a6a:	2226      	movs	r2, #38	; 0x26
 8001a6c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001a70:	2240      	movs	r2, #64	; 0x40
 8001a72:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a80:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001aa0:	4810      	ldr	r0, [pc, #64]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001aa2:	f000 fc9d 	bl	80023e0 <HAL_DMA_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8001aac:	f7ff fe34 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001ab4:	679a      	str	r2, [r3, #120]	; 0x78
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <HAL_SPI_MspInit+0x180>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2023      	movs	r0, #35	; 0x23
 8001ac2:	f000 fc44 	bl	800234e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ac6:	2023      	movs	r0, #35	; 0x23
 8001ac8:	f000 fc5b 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001acc:	bf00      	nop
 8001ace:	37e8      	adds	r7, #232	; 0xe8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40013000 	.word	0x40013000
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	58020000 	.word	0x58020000
 8001ae0:	58020400 	.word	0x58020400
 8001ae4:	2401dc88 	.word	0x2401dc88
 8001ae8:	40020010 	.word	0x40020010

08001aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <HAL_TIM_Base_MspInit+0x3c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10e      	bne.n	8001b1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_TIM_Base_MspInit+0x40>)
 8001b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b04:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_TIM_Base_MspInit+0x40>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_TIM_Base_MspInit+0x40>)
 8001b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	58024400 	.word	0x58024400

08001b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <HAL_TIM_MspPostInit+0x6c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d11f      	bne.n	8001b92 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_TIM_MspPostInit+0x70>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b58:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_TIM_MspPostInit+0x70>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_TIM_MspPostInit+0x70>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_TIM_MspPostInit+0x74>)
 8001b8e:	f003 fe83 	bl	8005898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	58024400 	.word	0x58024400
 8001ba4:	58021000 	.word	0x58021000

08001ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0b8      	sub	sp, #224	; 0xe0
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	22bc      	movs	r2, #188	; 0xbc
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00b fad5 	bl	800d178 <memset>
  if(huart->Instance==USART3)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a57      	ldr	r2, [pc, #348]	; (8001d30 <HAL_UART_MspInit+0x188>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	f040 80a6 	bne.w	8001d26 <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 f9b3 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001bf4:	f7ff fd90 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	; (8001d34 <HAL_UART_MspInit+0x18c>)
 8001bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bfe:	4a4d      	ldr	r2, [pc, #308]	; (8001d34 <HAL_UART_MspInit+0x18c>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c08:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <HAL_UART_MspInit+0x18c>)
 8001c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c16:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <HAL_UART_MspInit+0x18c>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	4a45      	ldr	r2, [pc, #276]	; (8001d34 <HAL_UART_MspInit+0x18c>)
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_UART_MspInit+0x18c>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c4e:	2307      	movs	r3, #7
 8001c50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4837      	ldr	r0, [pc, #220]	; (8001d38 <HAL_UART_MspInit+0x190>)
 8001c5c:	f003 fe1c 	bl	8005898 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001c62:	4a37      	ldr	r2, [pc, #220]	; (8001d40 <HAL_UART_MspInit+0x198>)
 8001c64:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001c68:	222d      	movs	r2, #45	; 0x2d
 8001c6a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c7e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c80:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c92:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ca0:	4826      	ldr	r0, [pc, #152]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001ca2:	f000 fb9d 	bl	80023e0 <HAL_DMA_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001cac:	f7ff fd34 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001cb4:	67da      	str	r2, [r3, #124]	; 0x7c
 8001cb6:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <HAL_UART_MspInit+0x194>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001cbc:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001cbe:	4a22      	ldr	r2, [pc, #136]	; (8001d48 <HAL_UART_MspInit+0x1a0>)
 8001cc0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001cc4:	222e      	movs	r2, #46	; 0x2e
 8001cc6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001cca:	2240      	movs	r2, #64	; 0x40
 8001ccc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cda:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ce8:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001cfa:	4812      	ldr	r0, [pc, #72]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001cfc:	f000 fb70 	bl	80023e0 <HAL_DMA_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001d06:	f7ff fd07 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001d0e:	679a      	str	r2, [r3, #120]	; 0x78
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <HAL_UART_MspInit+0x19c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2027      	movs	r0, #39	; 0x27
 8001d1c:	f000 fb17 	bl	800234e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d20:	2027      	movs	r0, #39	; 0x27
 8001d22:	f000 fb2e 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	37e0      	adds	r7, #224	; 0xe0
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40004800 	.word	0x40004800
 8001d34:	58024400 	.word	0x58024400
 8001d38:	58020c00 	.word	0x58020c00
 8001d3c:	2401d534 	.word	0x2401d534
 8001d40:	40020028 	.word	0x40020028
 8001d44:	2401da44 	.word	0x2401da44
 8001d48:	40020040 	.word	0x40020040

08001d4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0b8      	sub	sp, #224	; 0xe0
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	22bc      	movs	r2, #188	; 0xbc
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f00b fa03 	bl	800d178 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a37      	ldr	r2, [pc, #220]	; (8001e54 <HAL_PCD_MspInit+0x108>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d166      	bne.n	8001e4a <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001d86:	2312      	movs	r3, #18
 8001d88:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001d92:	2302      	movs	r3, #2
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001d96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d9a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001d9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001da0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001da2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	4618      	mov	r0, r3
 8001db0:	f005 f8d0 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001dba:	f7ff fcad 	bl	8001718 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001dbe:	f004 f91d 	bl	8005ffc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <HAL_PCD_MspInit+0x10c>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_PCD_MspInit+0x10c>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <HAL_PCD_MspInit+0x10c>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001de0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001de4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001dfa:	230a      	movs	r3, #10
 8001dfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e04:	4619      	mov	r1, r3
 8001e06:	4815      	ldr	r0, [pc, #84]	; (8001e5c <HAL_PCD_MspInit+0x110>)
 8001e08:	f003 fd46 	bl	8005898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e24:	4619      	mov	r1, r3
 8001e26:	480d      	ldr	r0, [pc, #52]	; (8001e5c <HAL_PCD_MspInit+0x110>)
 8001e28:	f003 fd36 	bl	8005898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_PCD_MspInit+0x10c>)
 8001e2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e32:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <HAL_PCD_MspInit+0x10c>)
 8001e34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_PCD_MspInit+0x10c>)
 8001e3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	37e0      	adds	r7, #224	; 0xe0
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40080000 	.word	0x40080000
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	58020000 	.word	0x58020000

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 f910 	bl	80020d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <DMA1_Stream0_IRQHandler+0x10>)
 8001eba:	f001 fdb9 	bl	8003a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2401dc88 	.word	0x2401dc88

08001ec8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DMA1_Stream1_IRQHandler+0x10>)
 8001ece:	f001 fdaf 	bl	8003a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2401d534 	.word	0x2401d534

08001edc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <DMA1_Stream2_IRQHandler+0x10>)
 8001ee2:	f001 fda5 	bl	8003a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2401da44 	.word	0x2401da44

08001ef0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <SPI1_IRQHandler+0x10>)
 8001ef6:	f007 fc71 	bl	80097dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2401db30 	.word	0x2401db30

08001f04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <USART3_IRQHandler+0x10>)
 8001f0a:	f009 f9c5 	bl	800b298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2401d5ac 	.word	0x2401d5ac

08001f18 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <RTC_Alarm_IRQHandler+0x10>)
 8001f1e:	f006 fef9 	bl	8008d14 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2401dac0 	.word	0x2401dac0

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f00b f8d4 	bl	800d108 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	24080000 	.word	0x24080000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	2401d528 	.word	0x2401d528
 8001f94:	2401dd18 	.word	0x2401dd18

08001f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f9c:	f7fe fb18 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa0:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa2:	490d      	ldr	r1, [pc, #52]	; (8001fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb8:	4c0a      	ldr	r4, [pc, #40]	; (8001fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f00b f8a5 	bl	800d114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fca:	f7fe fc9d 	bl	8000908 <main>
  bx  lr
 8001fce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001fd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fd8:	24011400 	.word	0x24011400
  ldr r2, =_sidata
 8001fdc:	0800d300 	.word	0x0800d300
  ldr r2, =_sbss
 8001fe0:	240114c0 	.word	0x240114c0
  ldr r4, =_ebss
 8001fe4:	2401dd14 	.word	0x2401dd14

08001fe8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC3_IRQHandler>
	...

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f000 f9a0 	bl	8002338 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ff8:	f004 fdd6 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_Init+0x68>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	4913      	ldr	r1, [pc, #76]	; (8002058 <HAL_Init+0x6c>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
 8002014:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_Init+0x68>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_Init+0x6c>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_Init+0x70>)
 800202e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_Init+0x74>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002036:	2000      	movs	r0, #0
 8002038:	f000 f814 	bl	8002064 <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e002      	b.n	800204c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002046:	f7ff fb6d 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	58024400 	.word	0x58024400
 8002058:	0800d2b0 	.word	0x0800d2b0
 800205c:	24000004 	.word	0x24000004
 8002060:	24000000 	.word	0x24000000

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_InitTick+0x60>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e021      	b.n	80020bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_InitTick+0x64>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_InitTick+0x60>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002086:	fbb3 f3f1 	udiv	r3, r3, r1
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f985 	bl	800239e <HAL_SYSTICK_Config>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00e      	b.n	80020bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b0f      	cmp	r3, #15
 80020a2:	d80a      	bhi.n	80020ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a4:	2200      	movs	r2, #0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f000 f94f 	bl	800234e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b0:	4a06      	ldr	r2, [pc, #24]	; (80020cc <HAL_InitTick+0x68>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	24011398 	.word	0x24011398
 80020c8:	24000000 	.word	0x24000000
 80020cc:	24011394 	.word	0x24011394

080020d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x20>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x24>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_IncTick+0x24>)
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	24011398 	.word	0x24011398
 80020f4:	2401dd00 	.word	0x2401dd00

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	2401dd00 	.word	0x2401dd00

08002110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff ffee 	bl	80020f8 <HAL_GetTick>
 800211c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d005      	beq.n	8002136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_Delay+0x44>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002136:	bf00      	nop
 8002138:	f7ff ffde 	bl	80020f8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d8f7      	bhi.n	8002138 <HAL_Delay+0x28>
  {
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	24011398 	.word	0x24011398

08002158 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_GetREVID+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0c1b      	lsrs	r3, r3, #16
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	5c001000 	.word	0x5c001000

08002170 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002180:	4904      	ldr	r1, [pc, #16]	; (8002194 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	58000400 	.word	0x58000400

08002198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <__NVIC_SetPriorityGrouping+0x40>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b4:	4013      	ands	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x40>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00
 80021dc:	05fa0000 	.word	0x05fa0000

080021e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <__NVIC_GetPriorityGrouping+0x18>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	f003 0307 	and.w	r3, r3, #7
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220a:	2b00      	cmp	r3, #0
 800220c:	db0b      	blt.n	8002226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	4907      	ldr	r1, [pc, #28]	; (8002234 <__NVIC_EnableIRQ+0x38>)
 8002216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2001      	movs	r0, #1
 800221e:	fa00 f202 	lsl.w	r2, r0, r2
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000e100 	.word	0xe000e100

08002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002248:	2b00      	cmp	r3, #0
 800224a:	db0a      	blt.n	8002262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	490c      	ldr	r1, [pc, #48]	; (8002284 <__NVIC_SetPriority+0x4c>)
 8002252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	440b      	add	r3, r1
 800225c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002260:	e00a      	b.n	8002278 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <__NVIC_SetPriority+0x50>)
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3b04      	subs	r3, #4
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	440b      	add	r3, r1
 8002276:	761a      	strb	r2, [r3, #24]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f1c3 0307 	rsb	r3, r3, #7
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	bf28      	it	cs
 80022aa:	2304      	movcs	r3, #4
 80022ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d902      	bls.n	80022bc <NVIC_EncodePriority+0x30>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3b03      	subs	r3, #3
 80022ba:	e000      	b.n	80022be <NVIC_EncodePriority+0x32>
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	f04f 32ff 	mov.w	r2, #4294967295
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	401a      	ands	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d4:	f04f 31ff 	mov.w	r1, #4294967295
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	43d9      	mvns	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	4313      	orrs	r3, r2
         );
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3724      	adds	r7, #36	; 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002304:	d301      	bcc.n	800230a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002306:	2301      	movs	r3, #1
 8002308:	e00f      	b.n	800232a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <SysTick_Config+0x40>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002312:	210f      	movs	r1, #15
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f7ff ff8e 	bl	8002238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <SysTick_Config+0x40>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <SysTick_Config+0x40>)
 8002324:	2207      	movs	r2, #7
 8002326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	e000e010 	.word	0xe000e010

08002338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff29 	bl	8002198 <__NVIC_SetPriorityGrouping>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff40 	bl	80021e0 <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff90 	bl	800228c <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5f 	bl	8002238 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff33 	bl	80021fc <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa4 	bl	80022f4 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_GetCurrentCPUID+0x24>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	2b07      	cmp	r3, #7
 80023c8:	d101      	bne.n	80023ce <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e000      	b.n	80023d0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80023ce:	2301      	movs	r3, #1
  }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff fe86 	bl	80020f8 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e316      	b.n	8002a26 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a66      	ldr	r2, [pc, #408]	; (8002598 <HAL_DMA_Init+0x1b8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d04a      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a65      	ldr	r2, [pc, #404]	; (800259c <HAL_DMA_Init+0x1bc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d045      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a63      	ldr	r2, [pc, #396]	; (80025a0 <HAL_DMA_Init+0x1c0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d040      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a62      	ldr	r2, [pc, #392]	; (80025a4 <HAL_DMA_Init+0x1c4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d03b      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a60      	ldr	r2, [pc, #384]	; (80025a8 <HAL_DMA_Init+0x1c8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d036      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5f      	ldr	r2, [pc, #380]	; (80025ac <HAL_DMA_Init+0x1cc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d031      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5d      	ldr	r2, [pc, #372]	; (80025b0 <HAL_DMA_Init+0x1d0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02c      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a5c      	ldr	r2, [pc, #368]	; (80025b4 <HAL_DMA_Init+0x1d4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d027      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a5a      	ldr	r2, [pc, #360]	; (80025b8 <HAL_DMA_Init+0x1d8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d022      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a59      	ldr	r2, [pc, #356]	; (80025bc <HAL_DMA_Init+0x1dc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d01d      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a57      	ldr	r2, [pc, #348]	; (80025c0 <HAL_DMA_Init+0x1e0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d018      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a56      	ldr	r2, [pc, #344]	; (80025c4 <HAL_DMA_Init+0x1e4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a54      	ldr	r2, [pc, #336]	; (80025c8 <HAL_DMA_Init+0x1e8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00e      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a53      	ldr	r2, [pc, #332]	; (80025cc <HAL_DMA_Init+0x1ec>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d009      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a51      	ldr	r2, [pc, #324]	; (80025d0 <HAL_DMA_Init+0x1f0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_DMA_Init+0xb8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a50      	ldr	r2, [pc, #320]	; (80025d4 <HAL_DMA_Init+0x1f4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_DMA_Init+0xbc>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_DMA_Init+0xbe>
 800249c:	2300      	movs	r3, #0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 813b 	beq.w	800271a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a37      	ldr	r2, [pc, #220]	; (8002598 <HAL_DMA_Init+0x1b8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d04a      	beq.n	8002554 <HAL_DMA_Init+0x174>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a36      	ldr	r2, [pc, #216]	; (800259c <HAL_DMA_Init+0x1bc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d045      	beq.n	8002554 <HAL_DMA_Init+0x174>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <HAL_DMA_Init+0x1c0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d040      	beq.n	8002554 <HAL_DMA_Init+0x174>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a33      	ldr	r2, [pc, #204]	; (80025a4 <HAL_DMA_Init+0x1c4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d03b      	beq.n	8002554 <HAL_DMA_Init+0x174>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <HAL_DMA_Init+0x1c8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d036      	beq.n	8002554 <HAL_DMA_Init+0x174>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a30      	ldr	r2, [pc, #192]	; (80025ac <HAL_DMA_Init+0x1cc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d031      	beq.n	8002554 <HAL_DMA_Init+0x174>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2e      	ldr	r2, [pc, #184]	; (80025b0 <HAL_DMA_Init+0x1d0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d02c      	beq.n	8002554 <HAL_DMA_Init+0x174>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <HAL_DMA_Init+0x1d4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d027      	beq.n	8002554 <HAL_DMA_Init+0x174>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2b      	ldr	r2, [pc, #172]	; (80025b8 <HAL_DMA_Init+0x1d8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d022      	beq.n	8002554 <HAL_DMA_Init+0x174>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2a      	ldr	r2, [pc, #168]	; (80025bc <HAL_DMA_Init+0x1dc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d01d      	beq.n	8002554 <HAL_DMA_Init+0x174>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <HAL_DMA_Init+0x1e0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d018      	beq.n	8002554 <HAL_DMA_Init+0x174>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_DMA_Init+0x1e4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_DMA_Init+0x174>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a25      	ldr	r2, [pc, #148]	; (80025c8 <HAL_DMA_Init+0x1e8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00e      	beq.n	8002554 <HAL_DMA_Init+0x174>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a24      	ldr	r2, [pc, #144]	; (80025cc <HAL_DMA_Init+0x1ec>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_DMA_Init+0x174>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <HAL_DMA_Init+0x1f0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_DMA_Init+0x174>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a21      	ldr	r2, [pc, #132]	; (80025d4 <HAL_DMA_Init+0x1f4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d108      	bne.n	8002566 <HAL_DMA_Init+0x186>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e007      	b.n	8002576 <HAL_DMA_Init+0x196>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002576:	e02f      	b.n	80025d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002578:	f7ff fdbe 	bl	80020f8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b05      	cmp	r3, #5
 8002584:	d928      	bls.n	80025d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2203      	movs	r2, #3
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e246      	b.n	8002a26 <HAL_DMA_Init+0x646>
 8002598:	40020010 	.word	0x40020010
 800259c:	40020028 	.word	0x40020028
 80025a0:	40020040 	.word	0x40020040
 80025a4:	40020058 	.word	0x40020058
 80025a8:	40020070 	.word	0x40020070
 80025ac:	40020088 	.word	0x40020088
 80025b0:	400200a0 	.word	0x400200a0
 80025b4:	400200b8 	.word	0x400200b8
 80025b8:	40020410 	.word	0x40020410
 80025bc:	40020428 	.word	0x40020428
 80025c0:	40020440 	.word	0x40020440
 80025c4:	40020458 	.word	0x40020458
 80025c8:	40020470 	.word	0x40020470
 80025cc:	40020488 	.word	0x40020488
 80025d0:	400204a0 	.word	0x400204a0
 80025d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1c8      	bne.n	8002578 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4b83      	ldr	r3, [pc, #524]	; (8002800 <HAL_DMA_Init+0x420>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80025fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002616:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	2b04      	cmp	r3, #4
 800262a:	d107      	bne.n	800263c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	4313      	orrs	r3, r2
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800263c:	4b71      	ldr	r3, [pc, #452]	; (8002804 <HAL_DMA_Init+0x424>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b71      	ldr	r3, [pc, #452]	; (8002808 <HAL_DMA_Init+0x428>)
 8002642:	4013      	ands	r3, r2
 8002644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002648:	d328      	bcc.n	800269c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b28      	cmp	r3, #40	; 0x28
 8002650:	d903      	bls.n	800265a <HAL_DMA_Init+0x27a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b2e      	cmp	r3, #46	; 0x2e
 8002658:	d917      	bls.n	800268a <HAL_DMA_Init+0x2aa>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b3e      	cmp	r3, #62	; 0x3e
 8002660:	d903      	bls.n	800266a <HAL_DMA_Init+0x28a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b42      	cmp	r3, #66	; 0x42
 8002668:	d90f      	bls.n	800268a <HAL_DMA_Init+0x2aa>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b46      	cmp	r3, #70	; 0x46
 8002670:	d903      	bls.n	800267a <HAL_DMA_Init+0x29a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b48      	cmp	r3, #72	; 0x48
 8002678:	d907      	bls.n	800268a <HAL_DMA_Init+0x2aa>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b4e      	cmp	r3, #78	; 0x4e
 8002680:	d905      	bls.n	800268e <HAL_DMA_Init+0x2ae>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b52      	cmp	r3, #82	; 0x52
 8002688:	d801      	bhi.n	800268e <HAL_DMA_Init+0x2ae>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_DMA_Init+0x2b0>
 800268e:	2300      	movs	r3, #0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800269a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f023 0307 	bic.w	r3, r3, #7
 80026b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d117      	bne.n	80026f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00e      	beq.n	80026f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f002 fb3d 	bl	8004d58 <DMA_CheckFifoParam>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e197      	b.n	8002a26 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f002 fa78 	bl	8004bf4 <DMA_CalcBaseAndBitshift>
 8002704:	4603      	mov	r3, r0
 8002706:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	223f      	movs	r2, #63	; 0x3f
 8002712:	409a      	lsls	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	e0cd      	b.n	80028b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a3b      	ldr	r2, [pc, #236]	; (800280c <HAL_DMA_Init+0x42c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d022      	beq.n	800276a <HAL_DMA_Init+0x38a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a39      	ldr	r2, [pc, #228]	; (8002810 <HAL_DMA_Init+0x430>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d01d      	beq.n	800276a <HAL_DMA_Init+0x38a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a38      	ldr	r2, [pc, #224]	; (8002814 <HAL_DMA_Init+0x434>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d018      	beq.n	800276a <HAL_DMA_Init+0x38a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a36      	ldr	r2, [pc, #216]	; (8002818 <HAL_DMA_Init+0x438>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_DMA_Init+0x38a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a35      	ldr	r2, [pc, #212]	; (800281c <HAL_DMA_Init+0x43c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00e      	beq.n	800276a <HAL_DMA_Init+0x38a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a33      	ldr	r2, [pc, #204]	; (8002820 <HAL_DMA_Init+0x440>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_DMA_Init+0x38a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a32      	ldr	r2, [pc, #200]	; (8002824 <HAL_DMA_Init+0x444>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d004      	beq.n	800276a <HAL_DMA_Init+0x38a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a30      	ldr	r2, [pc, #192]	; (8002828 <HAL_DMA_Init+0x448>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_DMA_Init+0x38e>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_DMA_Init+0x390>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8097 	beq.w	80028a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a24      	ldr	r2, [pc, #144]	; (800280c <HAL_DMA_Init+0x42c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d021      	beq.n	80027c4 <HAL_DMA_Init+0x3e4>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a22      	ldr	r2, [pc, #136]	; (8002810 <HAL_DMA_Init+0x430>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01c      	beq.n	80027c4 <HAL_DMA_Init+0x3e4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a21      	ldr	r2, [pc, #132]	; (8002814 <HAL_DMA_Init+0x434>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d017      	beq.n	80027c4 <HAL_DMA_Init+0x3e4>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_DMA_Init+0x438>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d012      	beq.n	80027c4 <HAL_DMA_Init+0x3e4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1e      	ldr	r2, [pc, #120]	; (800281c <HAL_DMA_Init+0x43c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00d      	beq.n	80027c4 <HAL_DMA_Init+0x3e4>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <HAL_DMA_Init+0x440>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d008      	beq.n	80027c4 <HAL_DMA_Init+0x3e4>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <HAL_DMA_Init+0x444>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d003      	beq.n	80027c4 <HAL_DMA_Init+0x3e4>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_DMA_Init+0x448>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2202      	movs	r2, #2
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_DMA_Init+0x44c>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d020      	beq.n	8002830 <HAL_DMA_Init+0x450>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b80      	cmp	r3, #128	; 0x80
 80027f4:	d102      	bne.n	80027fc <HAL_DMA_Init+0x41c>
 80027f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027fa:	e01a      	b.n	8002832 <HAL_DMA_Init+0x452>
 80027fc:	2300      	movs	r3, #0
 80027fe:	e018      	b.n	8002832 <HAL_DMA_Init+0x452>
 8002800:	fe10803f 	.word	0xfe10803f
 8002804:	5c001000 	.word	0x5c001000
 8002808:	ffff0000 	.word	0xffff0000
 800280c:	58025408 	.word	0x58025408
 8002810:	5802541c 	.word	0x5802541c
 8002814:	58025430 	.word	0x58025430
 8002818:	58025444 	.word	0x58025444
 800281c:	58025458 	.word	0x58025458
 8002820:	5802546c 	.word	0x5802546c
 8002824:	58025480 	.word	0x58025480
 8002828:	58025494 	.word	0x58025494
 800282c:	fffe000f 	.word	0xfffe000f
 8002830:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68d2      	ldr	r2, [r2, #12]
 8002836:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002838:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002840:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002848:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002850:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002858:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002860:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b6e      	ldr	r3, [pc, #440]	; (8002a30 <HAL_DMA_Init+0x650>)
 8002878:	4413      	add	r3, r2
 800287a:	4a6e      	ldr	r2, [pc, #440]	; (8002a34 <HAL_DMA_Init+0x654>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	009a      	lsls	r2, r3, #2
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f002 f9b3 	bl	8004bf4 <DMA_CalcBaseAndBitshift>
 800288e:	4603      	mov	r3, r0
 8002890:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	2201      	movs	r2, #1
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e008      	b.n	80028b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2240      	movs	r2, #64	; 0x40
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2203      	movs	r2, #3
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0b7      	b.n	8002a26 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a5f      	ldr	r2, [pc, #380]	; (8002a38 <HAL_DMA_Init+0x658>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d072      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a5d      	ldr	r2, [pc, #372]	; (8002a3c <HAL_DMA_Init+0x65c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d06d      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a5c      	ldr	r2, [pc, #368]	; (8002a40 <HAL_DMA_Init+0x660>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d068      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a5a      	ldr	r2, [pc, #360]	; (8002a44 <HAL_DMA_Init+0x664>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d063      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a59      	ldr	r2, [pc, #356]	; (8002a48 <HAL_DMA_Init+0x668>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d05e      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a57      	ldr	r2, [pc, #348]	; (8002a4c <HAL_DMA_Init+0x66c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d059      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a56      	ldr	r2, [pc, #344]	; (8002a50 <HAL_DMA_Init+0x670>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d054      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a54      	ldr	r2, [pc, #336]	; (8002a54 <HAL_DMA_Init+0x674>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d04f      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a53      	ldr	r2, [pc, #332]	; (8002a58 <HAL_DMA_Init+0x678>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d04a      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a51      	ldr	r2, [pc, #324]	; (8002a5c <HAL_DMA_Init+0x67c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d045      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a50      	ldr	r2, [pc, #320]	; (8002a60 <HAL_DMA_Init+0x680>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d040      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a4e      	ldr	r2, [pc, #312]	; (8002a64 <HAL_DMA_Init+0x684>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d03b      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a4d      	ldr	r2, [pc, #308]	; (8002a68 <HAL_DMA_Init+0x688>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d036      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a4b      	ldr	r2, [pc, #300]	; (8002a6c <HAL_DMA_Init+0x68c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d031      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a4a      	ldr	r2, [pc, #296]	; (8002a70 <HAL_DMA_Init+0x690>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d02c      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a48      	ldr	r2, [pc, #288]	; (8002a74 <HAL_DMA_Init+0x694>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d027      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a47      	ldr	r2, [pc, #284]	; (8002a78 <HAL_DMA_Init+0x698>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d022      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a45      	ldr	r2, [pc, #276]	; (8002a7c <HAL_DMA_Init+0x69c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01d      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a44      	ldr	r2, [pc, #272]	; (8002a80 <HAL_DMA_Init+0x6a0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d018      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a42      	ldr	r2, [pc, #264]	; (8002a84 <HAL_DMA_Init+0x6a4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a41      	ldr	r2, [pc, #260]	; (8002a88 <HAL_DMA_Init+0x6a8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00e      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3f      	ldr	r2, [pc, #252]	; (8002a8c <HAL_DMA_Init+0x6ac>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a3e      	ldr	r2, [pc, #248]	; (8002a90 <HAL_DMA_Init+0x6b0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_DMA_Init+0x5c6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a3c      	ldr	r2, [pc, #240]	; (8002a94 <HAL_DMA_Init+0x6b4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_Init+0x5ca>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_DMA_Init+0x5cc>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d032      	beq.n	8002a16 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f002 fa4d 	bl	8004e50 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b80      	cmp	r3, #128	; 0x80
 80029bc:	d102      	bne.n	80029c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d010      	beq.n	8002a04 <HAL_DMA_Init+0x624>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d80c      	bhi.n	8002a04 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f002 faca 	bl	8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	e008      	b.n	8002a16 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	a7fdabf8 	.word	0xa7fdabf8
 8002a34:	cccccccd 	.word	0xcccccccd
 8002a38:	40020010 	.word	0x40020010
 8002a3c:	40020028 	.word	0x40020028
 8002a40:	40020040 	.word	0x40020040
 8002a44:	40020058 	.word	0x40020058
 8002a48:	40020070 	.word	0x40020070
 8002a4c:	40020088 	.word	0x40020088
 8002a50:	400200a0 	.word	0x400200a0
 8002a54:	400200b8 	.word	0x400200b8
 8002a58:	40020410 	.word	0x40020410
 8002a5c:	40020428 	.word	0x40020428
 8002a60:	40020440 	.word	0x40020440
 8002a64:	40020458 	.word	0x40020458
 8002a68:	40020470 	.word	0x40020470
 8002a6c:	40020488 	.word	0x40020488
 8002a70:	400204a0 	.word	0x400204a0
 8002a74:	400204b8 	.word	0x400204b8
 8002a78:	58025408 	.word	0x58025408
 8002a7c:	5802541c 	.word	0x5802541c
 8002a80:	58025430 	.word	0x58025430
 8002a84:	58025444 	.word	0x58025444
 8002a88:	58025458 	.word	0x58025458
 8002a8c:	5802546c 	.word	0x5802546c
 8002a90:	58025480 	.word	0x58025480
 8002a94:	58025494 	.word	0x58025494

08002a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e226      	b.n	8002f02 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Start_IT+0x2a>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e21f      	b.n	8002f02 <HAL_DMA_Start_IT+0x46a>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	f040 820a 	bne.w	8002eec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a68      	ldr	r2, [pc, #416]	; (8002c8c <HAL_DMA_Start_IT+0x1f4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d04a      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a66      	ldr	r2, [pc, #408]	; (8002c90 <HAL_DMA_Start_IT+0x1f8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d045      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a65      	ldr	r2, [pc, #404]	; (8002c94 <HAL_DMA_Start_IT+0x1fc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d040      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a63      	ldr	r2, [pc, #396]	; (8002c98 <HAL_DMA_Start_IT+0x200>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d03b      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a62      	ldr	r2, [pc, #392]	; (8002c9c <HAL_DMA_Start_IT+0x204>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d036      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a60      	ldr	r2, [pc, #384]	; (8002ca0 <HAL_DMA_Start_IT+0x208>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d031      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a5f      	ldr	r2, [pc, #380]	; (8002ca4 <HAL_DMA_Start_IT+0x20c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d02c      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a5d      	ldr	r2, [pc, #372]	; (8002ca8 <HAL_DMA_Start_IT+0x210>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d027      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a5c      	ldr	r2, [pc, #368]	; (8002cac <HAL_DMA_Start_IT+0x214>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d022      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a5a      	ldr	r2, [pc, #360]	; (8002cb0 <HAL_DMA_Start_IT+0x218>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01d      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a59      	ldr	r2, [pc, #356]	; (8002cb4 <HAL_DMA_Start_IT+0x21c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a57      	ldr	r2, [pc, #348]	; (8002cb8 <HAL_DMA_Start_IT+0x220>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a56      	ldr	r2, [pc, #344]	; (8002cbc <HAL_DMA_Start_IT+0x224>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a54      	ldr	r2, [pc, #336]	; (8002cc0 <HAL_DMA_Start_IT+0x228>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a53      	ldr	r2, [pc, #332]	; (8002cc4 <HAL_DMA_Start_IT+0x22c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_DMA_Start_IT+0xee>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a51      	ldr	r2, [pc, #324]	; (8002cc8 <HAL_DMA_Start_IT+0x230>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d108      	bne.n	8002b98 <HAL_DMA_Start_IT+0x100>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e007      	b.n	8002ba8 <HAL_DMA_Start_IT+0x110>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f001 fe74 	bl	800489c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a34      	ldr	r2, [pc, #208]	; (8002c8c <HAL_DMA_Start_IT+0x1f4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d04a      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a33      	ldr	r2, [pc, #204]	; (8002c90 <HAL_DMA_Start_IT+0x1f8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d045      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a31      	ldr	r2, [pc, #196]	; (8002c94 <HAL_DMA_Start_IT+0x1fc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d040      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a30      	ldr	r2, [pc, #192]	; (8002c98 <HAL_DMA_Start_IT+0x200>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d03b      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2e      	ldr	r2, [pc, #184]	; (8002c9c <HAL_DMA_Start_IT+0x204>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d036      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2d      	ldr	r2, [pc, #180]	; (8002ca0 <HAL_DMA_Start_IT+0x208>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d031      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	; (8002ca4 <HAL_DMA_Start_IT+0x20c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d02c      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <HAL_DMA_Start_IT+0x210>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d027      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a28      	ldr	r2, [pc, #160]	; (8002cac <HAL_DMA_Start_IT+0x214>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d022      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <HAL_DMA_Start_IT+0x218>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d01d      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	; (8002cb4 <HAL_DMA_Start_IT+0x21c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d018      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <HAL_DMA_Start_IT+0x220>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <HAL_DMA_Start_IT+0x224>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00e      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <HAL_DMA_Start_IT+0x228>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1f      	ldr	r2, [pc, #124]	; (8002cc4 <HAL_DMA_Start_IT+0x22c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_DMA_Start_IT+0x1bc>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_DMA_Start_IT+0x230>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d101      	bne.n	8002c58 <HAL_DMA_Start_IT+0x1c0>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_DMA_Start_IT+0x1c2>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d036      	beq.n	8002ccc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 021e 	bic.w	r2, r3, #30
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0216 	orr.w	r2, r2, #22
 8002c70:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d03e      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0208 	orr.w	r2, r2, #8
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e035      	b.n	8002cf8 <HAL_DMA_Start_IT+0x260>
 8002c8c:	40020010 	.word	0x40020010
 8002c90:	40020028 	.word	0x40020028
 8002c94:	40020040 	.word	0x40020040
 8002c98:	40020058 	.word	0x40020058
 8002c9c:	40020070 	.word	0x40020070
 8002ca0:	40020088 	.word	0x40020088
 8002ca4:	400200a0 	.word	0x400200a0
 8002ca8:	400200b8 	.word	0x400200b8
 8002cac:	40020410 	.word	0x40020410
 8002cb0:	40020428 	.word	0x40020428
 8002cb4:	40020440 	.word	0x40020440
 8002cb8:	40020458 	.word	0x40020458
 8002cbc:	40020470 	.word	0x40020470
 8002cc0:	40020488 	.word	0x40020488
 8002cc4:	400204a0 	.word	0x400204a0
 8002cc8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 020e 	bic.w	r2, r3, #14
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 020a 	orr.w	r2, r2, #10
 8002cde:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0204 	orr.w	r2, r2, #4
 8002cf6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a83      	ldr	r2, [pc, #524]	; (8002f0c <HAL_DMA_Start_IT+0x474>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d072      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a82      	ldr	r2, [pc, #520]	; (8002f10 <HAL_DMA_Start_IT+0x478>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d06d      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a80      	ldr	r2, [pc, #512]	; (8002f14 <HAL_DMA_Start_IT+0x47c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d068      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a7f      	ldr	r2, [pc, #508]	; (8002f18 <HAL_DMA_Start_IT+0x480>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d063      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a7d      	ldr	r2, [pc, #500]	; (8002f1c <HAL_DMA_Start_IT+0x484>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d05e      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7c      	ldr	r2, [pc, #496]	; (8002f20 <HAL_DMA_Start_IT+0x488>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d059      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a7a      	ldr	r2, [pc, #488]	; (8002f24 <HAL_DMA_Start_IT+0x48c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d054      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a79      	ldr	r2, [pc, #484]	; (8002f28 <HAL_DMA_Start_IT+0x490>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d04f      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a77      	ldr	r2, [pc, #476]	; (8002f2c <HAL_DMA_Start_IT+0x494>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d04a      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a76      	ldr	r2, [pc, #472]	; (8002f30 <HAL_DMA_Start_IT+0x498>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d045      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a74      	ldr	r2, [pc, #464]	; (8002f34 <HAL_DMA_Start_IT+0x49c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d040      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a73      	ldr	r2, [pc, #460]	; (8002f38 <HAL_DMA_Start_IT+0x4a0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d03b      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a71      	ldr	r2, [pc, #452]	; (8002f3c <HAL_DMA_Start_IT+0x4a4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d036      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a70      	ldr	r2, [pc, #448]	; (8002f40 <HAL_DMA_Start_IT+0x4a8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d031      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a6e      	ldr	r2, [pc, #440]	; (8002f44 <HAL_DMA_Start_IT+0x4ac>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d02c      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6d      	ldr	r2, [pc, #436]	; (8002f48 <HAL_DMA_Start_IT+0x4b0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d027      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a6b      	ldr	r2, [pc, #428]	; (8002f4c <HAL_DMA_Start_IT+0x4b4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d022      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6a      	ldr	r2, [pc, #424]	; (8002f50 <HAL_DMA_Start_IT+0x4b8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d01d      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a68      	ldr	r2, [pc, #416]	; (8002f54 <HAL_DMA_Start_IT+0x4bc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d018      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a67      	ldr	r2, [pc, #412]	; (8002f58 <HAL_DMA_Start_IT+0x4c0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d013      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a65      	ldr	r2, [pc, #404]	; (8002f5c <HAL_DMA_Start_IT+0x4c4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00e      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a64      	ldr	r2, [pc, #400]	; (8002f60 <HAL_DMA_Start_IT+0x4c8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d009      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a62      	ldr	r2, [pc, #392]	; (8002f64 <HAL_DMA_Start_IT+0x4cc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_DMA_Start_IT+0x350>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a61      	ldr	r2, [pc, #388]	; (8002f68 <HAL_DMA_Start_IT+0x4d0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_DMA_Start_IT+0x354>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_DMA_Start_IT+0x356>
 8002dec:	2300      	movs	r3, #0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01a      	beq.n	8002e28 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e26:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a37      	ldr	r2, [pc, #220]	; (8002f0c <HAL_DMA_Start_IT+0x474>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d04a      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a36      	ldr	r2, [pc, #216]	; (8002f10 <HAL_DMA_Start_IT+0x478>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d045      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <HAL_DMA_Start_IT+0x47c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d040      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <HAL_DMA_Start_IT+0x480>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d03b      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a31      	ldr	r2, [pc, #196]	; (8002f1c <HAL_DMA_Start_IT+0x484>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d036      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <HAL_DMA_Start_IT+0x488>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d031      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <HAL_DMA_Start_IT+0x48c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d02c      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <HAL_DMA_Start_IT+0x490>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d027      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2b      	ldr	r2, [pc, #172]	; (8002f2c <HAL_DMA_Start_IT+0x494>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d022      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_DMA_Start_IT+0x498>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d01d      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <HAL_DMA_Start_IT+0x49c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d018      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <HAL_DMA_Start_IT+0x4a0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d013      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <HAL_DMA_Start_IT+0x4a4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <HAL_DMA_Start_IT+0x4a8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d009      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_DMA_Start_IT+0x4ac>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x430>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <HAL_DMA_Start_IT+0x4b0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d108      	bne.n	8002eda <HAL_DMA_Start_IT+0x442>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	e012      	b.n	8002f00 <HAL_DMA_Start_IT+0x468>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e009      	b.n	8002f00 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40020010 	.word	0x40020010
 8002f10:	40020028 	.word	0x40020028
 8002f14:	40020040 	.word	0x40020040
 8002f18:	40020058 	.word	0x40020058
 8002f1c:	40020070 	.word	0x40020070
 8002f20:	40020088 	.word	0x40020088
 8002f24:	400200a0 	.word	0x400200a0
 8002f28:	400200b8 	.word	0x400200b8
 8002f2c:	40020410 	.word	0x40020410
 8002f30:	40020428 	.word	0x40020428
 8002f34:	40020440 	.word	0x40020440
 8002f38:	40020458 	.word	0x40020458
 8002f3c:	40020470 	.word	0x40020470
 8002f40:	40020488 	.word	0x40020488
 8002f44:	400204a0 	.word	0x400204a0
 8002f48:	400204b8 	.word	0x400204b8
 8002f4c:	58025408 	.word	0x58025408
 8002f50:	5802541c 	.word	0x5802541c
 8002f54:	58025430 	.word	0x58025430
 8002f58:	58025444 	.word	0x58025444
 8002f5c:	58025458 	.word	0x58025458
 8002f60:	5802546c 	.word	0x5802546c
 8002f64:	58025480 	.word	0x58025480
 8002f68:	58025494 	.word	0x58025494

08002f6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7ff f8c0 	bl	80020f8 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e2dc      	b.n	800353e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d008      	beq.n	8002fa2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e2cd      	b.n	800353e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a76      	ldr	r2, [pc, #472]	; (8003180 <HAL_DMA_Abort+0x214>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d04a      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a74      	ldr	r2, [pc, #464]	; (8003184 <HAL_DMA_Abort+0x218>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d045      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a73      	ldr	r2, [pc, #460]	; (8003188 <HAL_DMA_Abort+0x21c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d040      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a71      	ldr	r2, [pc, #452]	; (800318c <HAL_DMA_Abort+0x220>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d03b      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a70      	ldr	r2, [pc, #448]	; (8003190 <HAL_DMA_Abort+0x224>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d036      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a6e      	ldr	r2, [pc, #440]	; (8003194 <HAL_DMA_Abort+0x228>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d031      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a6d      	ldr	r2, [pc, #436]	; (8003198 <HAL_DMA_Abort+0x22c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d02c      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6b      	ldr	r2, [pc, #428]	; (800319c <HAL_DMA_Abort+0x230>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d027      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6a      	ldr	r2, [pc, #424]	; (80031a0 <HAL_DMA_Abort+0x234>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d022      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a68      	ldr	r2, [pc, #416]	; (80031a4 <HAL_DMA_Abort+0x238>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01d      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a67      	ldr	r2, [pc, #412]	; (80031a8 <HAL_DMA_Abort+0x23c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d018      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_DMA_Abort+0x240>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a64      	ldr	r2, [pc, #400]	; (80031b0 <HAL_DMA_Abort+0x244>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00e      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a62      	ldr	r2, [pc, #392]	; (80031b4 <HAL_DMA_Abort+0x248>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a61      	ldr	r2, [pc, #388]	; (80031b8 <HAL_DMA_Abort+0x24c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_DMA_Abort+0xd6>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a5f      	ldr	r2, [pc, #380]	; (80031bc <HAL_DMA_Abort+0x250>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_DMA_Abort+0xda>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_DMA_Abort+0xdc>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d013      	beq.n	8003074 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 021e 	bic.w	r2, r2, #30
 800305a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800306a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e00a      	b.n	800308a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 020e 	bic.w	r2, r2, #14
 8003082:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a3c      	ldr	r2, [pc, #240]	; (8003180 <HAL_DMA_Abort+0x214>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d072      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3a      	ldr	r2, [pc, #232]	; (8003184 <HAL_DMA_Abort+0x218>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d06d      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a39      	ldr	r2, [pc, #228]	; (8003188 <HAL_DMA_Abort+0x21c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d068      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a37      	ldr	r2, [pc, #220]	; (800318c <HAL_DMA_Abort+0x220>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d063      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a36      	ldr	r2, [pc, #216]	; (8003190 <HAL_DMA_Abort+0x224>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d05e      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a34      	ldr	r2, [pc, #208]	; (8003194 <HAL_DMA_Abort+0x228>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d059      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a33      	ldr	r2, [pc, #204]	; (8003198 <HAL_DMA_Abort+0x22c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d054      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a31      	ldr	r2, [pc, #196]	; (800319c <HAL_DMA_Abort+0x230>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d04f      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a30      	ldr	r2, [pc, #192]	; (80031a0 <HAL_DMA_Abort+0x234>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d04a      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2e      	ldr	r2, [pc, #184]	; (80031a4 <HAL_DMA_Abort+0x238>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d045      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <HAL_DMA_Abort+0x23c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d040      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2b      	ldr	r2, [pc, #172]	; (80031ac <HAL_DMA_Abort+0x240>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d03b      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <HAL_DMA_Abort+0x244>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d036      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <HAL_DMA_Abort+0x248>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d031      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <HAL_DMA_Abort+0x24c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d02c      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a25      	ldr	r2, [pc, #148]	; (80031bc <HAL_DMA_Abort+0x250>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d027      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_DMA_Abort+0x254>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d022      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <HAL_DMA_Abort+0x258>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01d      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <HAL_DMA_Abort+0x25c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d018      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_DMA_Abort+0x260>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_DMA_Abort+0x264>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00e      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_DMA_Abort+0x268>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <HAL_DMA_Abort+0x26c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_DMA_Abort+0x20e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_DMA_Abort+0x270>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d132      	bne.n	80031e0 <HAL_DMA_Abort+0x274>
 800317a:	2301      	movs	r3, #1
 800317c:	e031      	b.n	80031e2 <HAL_DMA_Abort+0x276>
 800317e:	bf00      	nop
 8003180:	40020010 	.word	0x40020010
 8003184:	40020028 	.word	0x40020028
 8003188:	40020040 	.word	0x40020040
 800318c:	40020058 	.word	0x40020058
 8003190:	40020070 	.word	0x40020070
 8003194:	40020088 	.word	0x40020088
 8003198:	400200a0 	.word	0x400200a0
 800319c:	400200b8 	.word	0x400200b8
 80031a0:	40020410 	.word	0x40020410
 80031a4:	40020428 	.word	0x40020428
 80031a8:	40020440 	.word	0x40020440
 80031ac:	40020458 	.word	0x40020458
 80031b0:	40020470 	.word	0x40020470
 80031b4:	40020488 	.word	0x40020488
 80031b8:	400204a0 	.word	0x400204a0
 80031bc:	400204b8 	.word	0x400204b8
 80031c0:	58025408 	.word	0x58025408
 80031c4:	5802541c 	.word	0x5802541c
 80031c8:	58025430 	.word	0x58025430
 80031cc:	58025444 	.word	0x58025444
 80031d0:	58025458 	.word	0x58025458
 80031d4:	5802546c 	.word	0x5802546c
 80031d8:	58025480 	.word	0x58025480
 80031dc:	58025494 	.word	0x58025494
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a6d      	ldr	r2, [pc, #436]	; (80033b0 <HAL_DMA_Abort+0x444>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d04a      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6b      	ldr	r2, [pc, #428]	; (80033b4 <HAL_DMA_Abort+0x448>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d045      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6a      	ldr	r2, [pc, #424]	; (80033b8 <HAL_DMA_Abort+0x44c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d040      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a68      	ldr	r2, [pc, #416]	; (80033bc <HAL_DMA_Abort+0x450>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d03b      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a67      	ldr	r2, [pc, #412]	; (80033c0 <HAL_DMA_Abort+0x454>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d036      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a65      	ldr	r2, [pc, #404]	; (80033c4 <HAL_DMA_Abort+0x458>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d031      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a64      	ldr	r2, [pc, #400]	; (80033c8 <HAL_DMA_Abort+0x45c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d02c      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a62      	ldr	r2, [pc, #392]	; (80033cc <HAL_DMA_Abort+0x460>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d027      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a61      	ldr	r2, [pc, #388]	; (80033d0 <HAL_DMA_Abort+0x464>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a5f      	ldr	r2, [pc, #380]	; (80033d4 <HAL_DMA_Abort+0x468>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01d      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a5e      	ldr	r2, [pc, #376]	; (80033d8 <HAL_DMA_Abort+0x46c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d018      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a5c      	ldr	r2, [pc, #368]	; (80033dc <HAL_DMA_Abort+0x470>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a5b      	ldr	r2, [pc, #364]	; (80033e0 <HAL_DMA_Abort+0x474>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a59      	ldr	r2, [pc, #356]	; (80033e4 <HAL_DMA_Abort+0x478>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <HAL_DMA_Abort+0x47c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_DMA_Abort+0x32a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a56      	ldr	r2, [pc, #344]	; (80033ec <HAL_DMA_Abort+0x480>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <HAL_DMA_Abort+0x33c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e007      	b.n	80032b8 <HAL_DMA_Abort+0x34c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032b8:	e013      	b.n	80032e2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ba:	f7fe ff1d 	bl	80020f8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b05      	cmp	r3, #5
 80032c6:	d90c      	bls.n	80032e2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2203      	movs	r2, #3
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e12d      	b.n	800353e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2f      	ldr	r2, [pc, #188]	; (80033b0 <HAL_DMA_Abort+0x444>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d04a      	beq.n	800338e <HAL_DMA_Abort+0x422>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2d      	ldr	r2, [pc, #180]	; (80033b4 <HAL_DMA_Abort+0x448>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d045      	beq.n	800338e <HAL_DMA_Abort+0x422>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2c      	ldr	r2, [pc, #176]	; (80033b8 <HAL_DMA_Abort+0x44c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d040      	beq.n	800338e <HAL_DMA_Abort+0x422>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a2a      	ldr	r2, [pc, #168]	; (80033bc <HAL_DMA_Abort+0x450>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d03b      	beq.n	800338e <HAL_DMA_Abort+0x422>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a29      	ldr	r2, [pc, #164]	; (80033c0 <HAL_DMA_Abort+0x454>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d036      	beq.n	800338e <HAL_DMA_Abort+0x422>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <HAL_DMA_Abort+0x458>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_DMA_Abort+0x422>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a26      	ldr	r2, [pc, #152]	; (80033c8 <HAL_DMA_Abort+0x45c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d02c      	beq.n	800338e <HAL_DMA_Abort+0x422>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a24      	ldr	r2, [pc, #144]	; (80033cc <HAL_DMA_Abort+0x460>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d027      	beq.n	800338e <HAL_DMA_Abort+0x422>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <HAL_DMA_Abort+0x464>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_DMA_Abort+0x422>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <HAL_DMA_Abort+0x468>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01d      	beq.n	800338e <HAL_DMA_Abort+0x422>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a20      	ldr	r2, [pc, #128]	; (80033d8 <HAL_DMA_Abort+0x46c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_DMA_Abort+0x422>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <HAL_DMA_Abort+0x470>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_DMA_Abort+0x422>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1d      	ldr	r2, [pc, #116]	; (80033e0 <HAL_DMA_Abort+0x474>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_DMA_Abort+0x422>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <HAL_DMA_Abort+0x478>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_DMA_Abort+0x422>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <HAL_DMA_Abort+0x47c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_DMA_Abort+0x422>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_DMA_Abort+0x480>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_DMA_Abort+0x426>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_DMA_Abort+0x428>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02b      	beq.n	80033f0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	223f      	movs	r2, #63	; 0x3f
 80033a8:	409a      	lsls	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	e02a      	b.n	8003406 <HAL_DMA_Abort+0x49a>
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2201      	movs	r2, #1
 8003400:	409a      	lsls	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a4f      	ldr	r2, [pc, #316]	; (8003548 <HAL_DMA_Abort+0x5dc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d072      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a4d      	ldr	r2, [pc, #308]	; (800354c <HAL_DMA_Abort+0x5e0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d06d      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a4c      	ldr	r2, [pc, #304]	; (8003550 <HAL_DMA_Abort+0x5e4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d068      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a4a      	ldr	r2, [pc, #296]	; (8003554 <HAL_DMA_Abort+0x5e8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d063      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a49      	ldr	r2, [pc, #292]	; (8003558 <HAL_DMA_Abort+0x5ec>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d05e      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a47      	ldr	r2, [pc, #284]	; (800355c <HAL_DMA_Abort+0x5f0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d059      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a46      	ldr	r2, [pc, #280]	; (8003560 <HAL_DMA_Abort+0x5f4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d054      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a44      	ldr	r2, [pc, #272]	; (8003564 <HAL_DMA_Abort+0x5f8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d04f      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a43      	ldr	r2, [pc, #268]	; (8003568 <HAL_DMA_Abort+0x5fc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d04a      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a41      	ldr	r2, [pc, #260]	; (800356c <HAL_DMA_Abort+0x600>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d045      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a40      	ldr	r2, [pc, #256]	; (8003570 <HAL_DMA_Abort+0x604>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d040      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a3e      	ldr	r2, [pc, #248]	; (8003574 <HAL_DMA_Abort+0x608>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d03b      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a3d      	ldr	r2, [pc, #244]	; (8003578 <HAL_DMA_Abort+0x60c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d036      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3b      	ldr	r2, [pc, #236]	; (800357c <HAL_DMA_Abort+0x610>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d031      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a3a      	ldr	r2, [pc, #232]	; (8003580 <HAL_DMA_Abort+0x614>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d02c      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a38      	ldr	r2, [pc, #224]	; (8003584 <HAL_DMA_Abort+0x618>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d027      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a37      	ldr	r2, [pc, #220]	; (8003588 <HAL_DMA_Abort+0x61c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d022      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a35      	ldr	r2, [pc, #212]	; (800358c <HAL_DMA_Abort+0x620>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01d      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a34      	ldr	r2, [pc, #208]	; (8003590 <HAL_DMA_Abort+0x624>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a32      	ldr	r2, [pc, #200]	; (8003594 <HAL_DMA_Abort+0x628>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a31      	ldr	r2, [pc, #196]	; (8003598 <HAL_DMA_Abort+0x62c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2f      	ldr	r2, [pc, #188]	; (800359c <HAL_DMA_Abort+0x630>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2e      	ldr	r2, [pc, #184]	; (80035a0 <HAL_DMA_Abort+0x634>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_DMA_Abort+0x58a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2c      	ldr	r2, [pc, #176]	; (80035a4 <HAL_DMA_Abort+0x638>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_DMA_Abort+0x58e>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_DMA_Abort+0x590>
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003508:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00c      	beq.n	800352c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003520:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800352a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40020010 	.word	0x40020010
 800354c:	40020028 	.word	0x40020028
 8003550:	40020040 	.word	0x40020040
 8003554:	40020058 	.word	0x40020058
 8003558:	40020070 	.word	0x40020070
 800355c:	40020088 	.word	0x40020088
 8003560:	400200a0 	.word	0x400200a0
 8003564:	400200b8 	.word	0x400200b8
 8003568:	40020410 	.word	0x40020410
 800356c:	40020428 	.word	0x40020428
 8003570:	40020440 	.word	0x40020440
 8003574:	40020458 	.word	0x40020458
 8003578:	40020470 	.word	0x40020470
 800357c:	40020488 	.word	0x40020488
 8003580:	400204a0 	.word	0x400204a0
 8003584:	400204b8 	.word	0x400204b8
 8003588:	58025408 	.word	0x58025408
 800358c:	5802541c 	.word	0x5802541c
 8003590:	58025430 	.word	0x58025430
 8003594:	58025444 	.word	0x58025444
 8003598:	58025458 	.word	0x58025458
 800359c:	5802546c 	.word	0x5802546c
 80035a0:	58025480 	.word	0x58025480
 80035a4:	58025494 	.word	0x58025494

080035a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e205      	b.n	80039c6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d004      	beq.n	80035d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e1fa      	b.n	80039c6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a8c      	ldr	r2, [pc, #560]	; (8003808 <HAL_DMA_Abort_IT+0x260>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d04a      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a8b      	ldr	r2, [pc, #556]	; (800380c <HAL_DMA_Abort_IT+0x264>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d045      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a89      	ldr	r2, [pc, #548]	; (8003810 <HAL_DMA_Abort_IT+0x268>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d040      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a88      	ldr	r2, [pc, #544]	; (8003814 <HAL_DMA_Abort_IT+0x26c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d03b      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a86      	ldr	r2, [pc, #536]	; (8003818 <HAL_DMA_Abort_IT+0x270>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d036      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a85      	ldr	r2, [pc, #532]	; (800381c <HAL_DMA_Abort_IT+0x274>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d031      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a83      	ldr	r2, [pc, #524]	; (8003820 <HAL_DMA_Abort_IT+0x278>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d02c      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a82      	ldr	r2, [pc, #520]	; (8003824 <HAL_DMA_Abort_IT+0x27c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d027      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a80      	ldr	r2, [pc, #512]	; (8003828 <HAL_DMA_Abort_IT+0x280>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d022      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7f      	ldr	r2, [pc, #508]	; (800382c <HAL_DMA_Abort_IT+0x284>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d01d      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a7d      	ldr	r2, [pc, #500]	; (8003830 <HAL_DMA_Abort_IT+0x288>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d018      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a7c      	ldr	r2, [pc, #496]	; (8003834 <HAL_DMA_Abort_IT+0x28c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a7a      	ldr	r2, [pc, #488]	; (8003838 <HAL_DMA_Abort_IT+0x290>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00e      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a79      	ldr	r2, [pc, #484]	; (800383c <HAL_DMA_Abort_IT+0x294>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d009      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a77      	ldr	r2, [pc, #476]	; (8003840 <HAL_DMA_Abort_IT+0x298>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_DMA_Abort_IT+0xc8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a76      	ldr	r2, [pc, #472]	; (8003844 <HAL_DMA_Abort_IT+0x29c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_DMA_Abort_IT+0xcc>
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <HAL_DMA_Abort_IT+0xce>
 8003674:	2300      	movs	r3, #0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d065      	beq.n	8003746 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2204      	movs	r2, #4
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a60      	ldr	r2, [pc, #384]	; (8003808 <HAL_DMA_Abort_IT+0x260>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d04a      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5e      	ldr	r2, [pc, #376]	; (800380c <HAL_DMA_Abort_IT+0x264>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d045      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a5d      	ldr	r2, [pc, #372]	; (8003810 <HAL_DMA_Abort_IT+0x268>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d040      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a5b      	ldr	r2, [pc, #364]	; (8003814 <HAL_DMA_Abort_IT+0x26c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d03b      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a5a      	ldr	r2, [pc, #360]	; (8003818 <HAL_DMA_Abort_IT+0x270>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d036      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a58      	ldr	r2, [pc, #352]	; (800381c <HAL_DMA_Abort_IT+0x274>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d031      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a57      	ldr	r2, [pc, #348]	; (8003820 <HAL_DMA_Abort_IT+0x278>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d02c      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a55      	ldr	r2, [pc, #340]	; (8003824 <HAL_DMA_Abort_IT+0x27c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d027      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a54      	ldr	r2, [pc, #336]	; (8003828 <HAL_DMA_Abort_IT+0x280>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d022      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a52      	ldr	r2, [pc, #328]	; (800382c <HAL_DMA_Abort_IT+0x284>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01d      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a51      	ldr	r2, [pc, #324]	; (8003830 <HAL_DMA_Abort_IT+0x288>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a4f      	ldr	r2, [pc, #316]	; (8003834 <HAL_DMA_Abort_IT+0x28c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4e      	ldr	r2, [pc, #312]	; (8003838 <HAL_DMA_Abort_IT+0x290>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a4c      	ldr	r2, [pc, #304]	; (800383c <HAL_DMA_Abort_IT+0x294>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a4b      	ldr	r2, [pc, #300]	; (8003840 <HAL_DMA_Abort_IT+0x298>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_DMA_Abort_IT+0x17a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a49      	ldr	r2, [pc, #292]	; (8003844 <HAL_DMA_Abort_IT+0x29c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d108      	bne.n	8003734 <HAL_DMA_Abort_IT+0x18c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e147      	b.n	80039c4 <HAL_DMA_Abort_IT+0x41c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e13e      	b.n	80039c4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 020e 	bic.w	r2, r2, #14
 8003754:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2b      	ldr	r2, [pc, #172]	; (8003808 <HAL_DMA_Abort_IT+0x260>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d04a      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a29      	ldr	r2, [pc, #164]	; (800380c <HAL_DMA_Abort_IT+0x264>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d045      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a28      	ldr	r2, [pc, #160]	; (8003810 <HAL_DMA_Abort_IT+0x268>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d040      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a26      	ldr	r2, [pc, #152]	; (8003814 <HAL_DMA_Abort_IT+0x26c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d03b      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_DMA_Abort_IT+0x270>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d036      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <HAL_DMA_Abort_IT+0x274>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d031      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_DMA_Abort_IT+0x278>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d02c      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a20      	ldr	r2, [pc, #128]	; (8003824 <HAL_DMA_Abort_IT+0x27c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d027      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1f      	ldr	r2, [pc, #124]	; (8003828 <HAL_DMA_Abort_IT+0x280>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d022      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <HAL_DMA_Abort_IT+0x284>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01d      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <HAL_DMA_Abort_IT+0x288>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d018      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1a      	ldr	r2, [pc, #104]	; (8003834 <HAL_DMA_Abort_IT+0x28c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a19      	ldr	r2, [pc, #100]	; (8003838 <HAL_DMA_Abort_IT+0x290>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00e      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a17      	ldr	r2, [pc, #92]	; (800383c <HAL_DMA_Abort_IT+0x294>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a16      	ldr	r2, [pc, #88]	; (8003840 <HAL_DMA_Abort_IT+0x298>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x24e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a14      	ldr	r2, [pc, #80]	; (8003844 <HAL_DMA_Abort_IT+0x29c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d128      	bne.n	8003848 <HAL_DMA_Abort_IT+0x2a0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e027      	b.n	8003858 <HAL_DMA_Abort_IT+0x2b0>
 8003808:	40020010 	.word	0x40020010
 800380c:	40020028 	.word	0x40020028
 8003810:	40020040 	.word	0x40020040
 8003814:	40020058 	.word	0x40020058
 8003818:	40020070 	.word	0x40020070
 800381c:	40020088 	.word	0x40020088
 8003820:	400200a0 	.word	0x400200a0
 8003824:	400200b8 	.word	0x400200b8
 8003828:	40020410 	.word	0x40020410
 800382c:	40020428 	.word	0x40020428
 8003830:	40020440 	.word	0x40020440
 8003834:	40020458 	.word	0x40020458
 8003838:	40020470 	.word	0x40020470
 800383c:	40020488 	.word	0x40020488
 8003840:	400204a0 	.word	0x400204a0
 8003844:	400204b8 	.word	0x400204b8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a5c      	ldr	r2, [pc, #368]	; (80039d0 <HAL_DMA_Abort_IT+0x428>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d072      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5b      	ldr	r2, [pc, #364]	; (80039d4 <HAL_DMA_Abort_IT+0x42c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d06d      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a59      	ldr	r2, [pc, #356]	; (80039d8 <HAL_DMA_Abort_IT+0x430>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d068      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a58      	ldr	r2, [pc, #352]	; (80039dc <HAL_DMA_Abort_IT+0x434>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d063      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a56      	ldr	r2, [pc, #344]	; (80039e0 <HAL_DMA_Abort_IT+0x438>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d05e      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a55      	ldr	r2, [pc, #340]	; (80039e4 <HAL_DMA_Abort_IT+0x43c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d059      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a53      	ldr	r2, [pc, #332]	; (80039e8 <HAL_DMA_Abort_IT+0x440>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d054      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a52      	ldr	r2, [pc, #328]	; (80039ec <HAL_DMA_Abort_IT+0x444>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d04f      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a50      	ldr	r2, [pc, #320]	; (80039f0 <HAL_DMA_Abort_IT+0x448>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d04a      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a4f      	ldr	r2, [pc, #316]	; (80039f4 <HAL_DMA_Abort_IT+0x44c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d045      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a4d      	ldr	r2, [pc, #308]	; (80039f8 <HAL_DMA_Abort_IT+0x450>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d040      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a4c      	ldr	r2, [pc, #304]	; (80039fc <HAL_DMA_Abort_IT+0x454>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d03b      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4a      	ldr	r2, [pc, #296]	; (8003a00 <HAL_DMA_Abort_IT+0x458>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d036      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a49      	ldr	r2, [pc, #292]	; (8003a04 <HAL_DMA_Abort_IT+0x45c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d031      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a47      	ldr	r2, [pc, #284]	; (8003a08 <HAL_DMA_Abort_IT+0x460>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d02c      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a46      	ldr	r2, [pc, #280]	; (8003a0c <HAL_DMA_Abort_IT+0x464>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d027      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a44      	ldr	r2, [pc, #272]	; (8003a10 <HAL_DMA_Abort_IT+0x468>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d022      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a43      	ldr	r2, [pc, #268]	; (8003a14 <HAL_DMA_Abort_IT+0x46c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d01d      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a41      	ldr	r2, [pc, #260]	; (8003a18 <HAL_DMA_Abort_IT+0x470>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d018      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a40      	ldr	r2, [pc, #256]	; (8003a1c <HAL_DMA_Abort_IT+0x474>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d013      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a3e      	ldr	r2, [pc, #248]	; (8003a20 <HAL_DMA_Abort_IT+0x478>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00e      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a3d      	ldr	r2, [pc, #244]	; (8003a24 <HAL_DMA_Abort_IT+0x47c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d009      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a3b      	ldr	r2, [pc, #236]	; (8003a28 <HAL_DMA_Abort_IT+0x480>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <HAL_DMA_Abort_IT+0x3a0>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a3a      	ldr	r2, [pc, #232]	; (8003a2c <HAL_DMA_Abort_IT+0x484>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d101      	bne.n	800394c <HAL_DMA_Abort_IT+0x3a4>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_DMA_Abort_IT+0x3a6>
 800394c:	2300      	movs	r3, #0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d028      	beq.n	80039a4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003960:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2201      	movs	r2, #1
 8003972:	409a      	lsls	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003980:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003998:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40020010 	.word	0x40020010
 80039d4:	40020028 	.word	0x40020028
 80039d8:	40020040 	.word	0x40020040
 80039dc:	40020058 	.word	0x40020058
 80039e0:	40020070 	.word	0x40020070
 80039e4:	40020088 	.word	0x40020088
 80039e8:	400200a0 	.word	0x400200a0
 80039ec:	400200b8 	.word	0x400200b8
 80039f0:	40020410 	.word	0x40020410
 80039f4:	40020428 	.word	0x40020428
 80039f8:	40020440 	.word	0x40020440
 80039fc:	40020458 	.word	0x40020458
 8003a00:	40020470 	.word	0x40020470
 8003a04:	40020488 	.word	0x40020488
 8003a08:	400204a0 	.word	0x400204a0
 8003a0c:	400204b8 	.word	0x400204b8
 8003a10:	58025408 	.word	0x58025408
 8003a14:	5802541c 	.word	0x5802541c
 8003a18:	58025430 	.word	0x58025430
 8003a1c:	58025444 	.word	0x58025444
 8003a20:	58025458 	.word	0x58025458
 8003a24:	5802546c 	.word	0x5802546c
 8003a28:	58025480 	.word	0x58025480
 8003a2c:	58025494 	.word	0x58025494

08003a30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a3c:	4b67      	ldr	r3, [pc, #412]	; (8003bdc <HAL_DMA_IRQHandler+0x1ac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a67      	ldr	r2, [pc, #412]	; (8003be0 <HAL_DMA_IRQHandler+0x1b0>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	0a9b      	lsrs	r3, r3, #10
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a5f      	ldr	r2, [pc, #380]	; (8003be4 <HAL_DMA_IRQHandler+0x1b4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d04a      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a5d      	ldr	r2, [pc, #372]	; (8003be8 <HAL_DMA_IRQHandler+0x1b8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d045      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a5c      	ldr	r2, [pc, #368]	; (8003bec <HAL_DMA_IRQHandler+0x1bc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d040      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a5a      	ldr	r2, [pc, #360]	; (8003bf0 <HAL_DMA_IRQHandler+0x1c0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d03b      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a59      	ldr	r2, [pc, #356]	; (8003bf4 <HAL_DMA_IRQHandler+0x1c4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d036      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a57      	ldr	r2, [pc, #348]	; (8003bf8 <HAL_DMA_IRQHandler+0x1c8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d031      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a56      	ldr	r2, [pc, #344]	; (8003bfc <HAL_DMA_IRQHandler+0x1cc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d02c      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a54      	ldr	r2, [pc, #336]	; (8003c00 <HAL_DMA_IRQHandler+0x1d0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d027      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a53      	ldr	r2, [pc, #332]	; (8003c04 <HAL_DMA_IRQHandler+0x1d4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d022      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a51      	ldr	r2, [pc, #324]	; (8003c08 <HAL_DMA_IRQHandler+0x1d8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01d      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a50      	ldr	r2, [pc, #320]	; (8003c0c <HAL_DMA_IRQHandler+0x1dc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d018      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a4e      	ldr	r2, [pc, #312]	; (8003c10 <HAL_DMA_IRQHandler+0x1e0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a4d      	ldr	r2, [pc, #308]	; (8003c14 <HAL_DMA_IRQHandler+0x1e4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00e      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a4b      	ldr	r2, [pc, #300]	; (8003c18 <HAL_DMA_IRQHandler+0x1e8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a4a      	ldr	r2, [pc, #296]	; (8003c1c <HAL_DMA_IRQHandler+0x1ec>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xd2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a48      	ldr	r2, [pc, #288]	; (8003c20 <HAL_DMA_IRQHandler+0x1f0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_DMA_IRQHandler+0xd6>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_DMA_IRQHandler+0xd8>
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 842b 	beq.w	8004364 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2208      	movs	r2, #8
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a2 	beq.w	8003c68 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2e      	ldr	r2, [pc, #184]	; (8003be4 <HAL_DMA_IRQHandler+0x1b4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d04a      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <HAL_DMA_IRQHandler+0x1b8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d045      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <HAL_DMA_IRQHandler+0x1bc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d040      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <HAL_DMA_IRQHandler+0x1c0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d03b      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a28      	ldr	r2, [pc, #160]	; (8003bf4 <HAL_DMA_IRQHandler+0x1c4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d036      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <HAL_DMA_IRQHandler+0x1c8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d031      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a25      	ldr	r2, [pc, #148]	; (8003bfc <HAL_DMA_IRQHandler+0x1cc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d02c      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a24      	ldr	r2, [pc, #144]	; (8003c00 <HAL_DMA_IRQHandler+0x1d0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d027      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a22      	ldr	r2, [pc, #136]	; (8003c04 <HAL_DMA_IRQHandler+0x1d4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d022      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a21      	ldr	r2, [pc, #132]	; (8003c08 <HAL_DMA_IRQHandler+0x1d8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d01d      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <HAL_DMA_IRQHandler+0x1dc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d018      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <HAL_DMA_IRQHandler+0x1e0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <HAL_DMA_IRQHandler+0x1e4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00e      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <HAL_DMA_IRQHandler+0x1e8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d009      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <HAL_DMA_IRQHandler+0x1ec>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x194>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <HAL_DMA_IRQHandler+0x1f0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d12f      	bne.n	8003c24 <HAL_DMA_IRQHandler+0x1f4>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bf14      	ite	ne
 8003bd2:	2301      	movne	r3, #1
 8003bd4:	2300      	moveq	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	e02e      	b.n	8003c38 <HAL_DMA_IRQHandler+0x208>
 8003bda:	bf00      	nop
 8003bdc:	24000000 	.word	0x24000000
 8003be0:	1b4e81b5 	.word	0x1b4e81b5
 8003be4:	40020010 	.word	0x40020010
 8003be8:	40020028 	.word	0x40020028
 8003bec:	40020040 	.word	0x40020040
 8003bf0:	40020058 	.word	0x40020058
 8003bf4:	40020070 	.word	0x40020070
 8003bf8:	40020088 	.word	0x40020088
 8003bfc:	400200a0 	.word	0x400200a0
 8003c00:	400200b8 	.word	0x400200b8
 8003c04:	40020410 	.word	0x40020410
 8003c08:	40020428 	.word	0x40020428
 8003c0c:	40020440 	.word	0x40020440
 8003c10:	40020458 	.word	0x40020458
 8003c14:	40020470 	.word	0x40020470
 8003c18:	40020488 	.word	0x40020488
 8003c1c:	400204a0 	.word	0x400204a0
 8003c20:	400204b8 	.word	0x400204b8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf14      	ite	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	2300      	moveq	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d015      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	2208      	movs	r2, #8
 8003c56:	409a      	lsls	r2, r3
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f043 0201 	orr.w	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	fa22 f303 	lsr.w	r3, r2, r3
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d06e      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a69      	ldr	r2, [pc, #420]	; (8003e28 <HAL_DMA_IRQHandler+0x3f8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d04a      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a67      	ldr	r2, [pc, #412]	; (8003e2c <HAL_DMA_IRQHandler+0x3fc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d045      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a66      	ldr	r2, [pc, #408]	; (8003e30 <HAL_DMA_IRQHandler+0x400>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d040      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a64      	ldr	r2, [pc, #400]	; (8003e34 <HAL_DMA_IRQHandler+0x404>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d03b      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a63      	ldr	r2, [pc, #396]	; (8003e38 <HAL_DMA_IRQHandler+0x408>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d036      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a61      	ldr	r2, [pc, #388]	; (8003e3c <HAL_DMA_IRQHandler+0x40c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a60      	ldr	r2, [pc, #384]	; (8003e40 <HAL_DMA_IRQHandler+0x410>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d02c      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a5e      	ldr	r2, [pc, #376]	; (8003e44 <HAL_DMA_IRQHandler+0x414>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d027      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a5d      	ldr	r2, [pc, #372]	; (8003e48 <HAL_DMA_IRQHandler+0x418>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a5b      	ldr	r2, [pc, #364]	; (8003e4c <HAL_DMA_IRQHandler+0x41c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01d      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a5a      	ldr	r2, [pc, #360]	; (8003e50 <HAL_DMA_IRQHandler+0x420>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d018      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_DMA_IRQHandler+0x424>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a57      	ldr	r2, [pc, #348]	; (8003e58 <HAL_DMA_IRQHandler+0x428>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a55      	ldr	r2, [pc, #340]	; (8003e5c <HAL_DMA_IRQHandler+0x42c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a54      	ldr	r2, [pc, #336]	; (8003e60 <HAL_DMA_IRQHandler+0x430>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2ee>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a52      	ldr	r2, [pc, #328]	; (8003e64 <HAL_DMA_IRQHandler+0x434>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d10a      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x304>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e003      	b.n	8003d3c <HAL_DMA_IRQHandler+0x30c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00d      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2201      	movs	r2, #1
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f043 0202 	orr.w	r2, r3, #2
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2204      	movs	r2, #4
 8003d66:	409a      	lsls	r2, r3
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 808f 	beq.w	8003e90 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2c      	ldr	r2, [pc, #176]	; (8003e28 <HAL_DMA_IRQHandler+0x3f8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d04a      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a2a      	ldr	r2, [pc, #168]	; (8003e2c <HAL_DMA_IRQHandler+0x3fc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d045      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a29      	ldr	r2, [pc, #164]	; (8003e30 <HAL_DMA_IRQHandler+0x400>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d040      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a27      	ldr	r2, [pc, #156]	; (8003e34 <HAL_DMA_IRQHandler+0x404>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d03b      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <HAL_DMA_IRQHandler+0x408>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d036      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a24      	ldr	r2, [pc, #144]	; (8003e3c <HAL_DMA_IRQHandler+0x40c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d031      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a23      	ldr	r2, [pc, #140]	; (8003e40 <HAL_DMA_IRQHandler+0x410>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d02c      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a21      	ldr	r2, [pc, #132]	; (8003e44 <HAL_DMA_IRQHandler+0x414>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d027      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a20      	ldr	r2, [pc, #128]	; (8003e48 <HAL_DMA_IRQHandler+0x418>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <HAL_DMA_IRQHandler+0x41c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <HAL_DMA_IRQHandler+0x420>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_DMA_IRQHandler+0x424>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <HAL_DMA_IRQHandler+0x428>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_DMA_IRQHandler+0x42c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_DMA_IRQHandler+0x430>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x3e2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <HAL_DMA_IRQHandler+0x434>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d12a      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x438>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e023      	b.n	8003e70 <HAL_DMA_IRQHandler+0x440>
 8003e28:	40020010 	.word	0x40020010
 8003e2c:	40020028 	.word	0x40020028
 8003e30:	40020040 	.word	0x40020040
 8003e34:	40020058 	.word	0x40020058
 8003e38:	40020070 	.word	0x40020070
 8003e3c:	40020088 	.word	0x40020088
 8003e40:	400200a0 	.word	0x400200a0
 8003e44:	400200b8 	.word	0x400200b8
 8003e48:	40020410 	.word	0x40020410
 8003e4c:	40020428 	.word	0x40020428
 8003e50:	40020440 	.word	0x40020440
 8003e54:	40020458 	.word	0x40020458
 8003e58:	40020470 	.word	0x40020470
 8003e5c:	40020488 	.word	0x40020488
 8003e60:	400204a0 	.word	0x400204a0
 8003e64:	400204b8 	.word	0x400204b8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00d      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	f043 0204 	orr.w	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	2210      	movs	r2, #16
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80a6 	beq.w	8003ff2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a85      	ldr	r2, [pc, #532]	; (80040c0 <HAL_DMA_IRQHandler+0x690>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d04a      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a83      	ldr	r2, [pc, #524]	; (80040c4 <HAL_DMA_IRQHandler+0x694>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d045      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a82      	ldr	r2, [pc, #520]	; (80040c8 <HAL_DMA_IRQHandler+0x698>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d040      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a80      	ldr	r2, [pc, #512]	; (80040cc <HAL_DMA_IRQHandler+0x69c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d03b      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a7f      	ldr	r2, [pc, #508]	; (80040d0 <HAL_DMA_IRQHandler+0x6a0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d036      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a7d      	ldr	r2, [pc, #500]	; (80040d4 <HAL_DMA_IRQHandler+0x6a4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d031      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7c      	ldr	r2, [pc, #496]	; (80040d8 <HAL_DMA_IRQHandler+0x6a8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d02c      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a7a      	ldr	r2, [pc, #488]	; (80040dc <HAL_DMA_IRQHandler+0x6ac>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d027      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a79      	ldr	r2, [pc, #484]	; (80040e0 <HAL_DMA_IRQHandler+0x6b0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d022      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a77      	ldr	r2, [pc, #476]	; (80040e4 <HAL_DMA_IRQHandler+0x6b4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01d      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a76      	ldr	r2, [pc, #472]	; (80040e8 <HAL_DMA_IRQHandler+0x6b8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d018      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a74      	ldr	r2, [pc, #464]	; (80040ec <HAL_DMA_IRQHandler+0x6bc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a73      	ldr	r2, [pc, #460]	; (80040f0 <HAL_DMA_IRQHandler+0x6c0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a71      	ldr	r2, [pc, #452]	; (80040f4 <HAL_DMA_IRQHandler+0x6c4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a70      	ldr	r2, [pc, #448]	; (80040f8 <HAL_DMA_IRQHandler+0x6c8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x516>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a6e      	ldr	r2, [pc, #440]	; (80040fc <HAL_DMA_IRQHandler+0x6cc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10a      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x52c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e009      	b.n	8003f70 <HAL_DMA_IRQHandler+0x540>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf14      	ite	ne
 8003f6a:	2301      	movne	r3, #1
 8003f6c:	2300      	moveq	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d03e      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d108      	bne.n	8003fb2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d024      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
 8003fb0:	e01f      	b.n	8003ff2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01b      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
 8003fc2:	e016      	b.n	8003ff2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d107      	bne.n	8003fe2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0208 	bic.w	r2, r2, #8
 8003fe0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8110 	beq.w	8004228 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <HAL_DMA_IRQHandler+0x690>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d04a      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2b      	ldr	r2, [pc, #172]	; (80040c4 <HAL_DMA_IRQHandler+0x694>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d045      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a29      	ldr	r2, [pc, #164]	; (80040c8 <HAL_DMA_IRQHandler+0x698>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d040      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a28      	ldr	r2, [pc, #160]	; (80040cc <HAL_DMA_IRQHandler+0x69c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d03b      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <HAL_DMA_IRQHandler+0x6a0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d036      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a25      	ldr	r2, [pc, #148]	; (80040d4 <HAL_DMA_IRQHandler+0x6a4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d031      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a23      	ldr	r2, [pc, #140]	; (80040d8 <HAL_DMA_IRQHandler+0x6a8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02c      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a22      	ldr	r2, [pc, #136]	; (80040dc <HAL_DMA_IRQHandler+0x6ac>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d027      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <HAL_DMA_IRQHandler+0x6b0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d022      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <HAL_DMA_IRQHandler+0x6b4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d01d      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <HAL_DMA_IRQHandler+0x6b8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d018      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <HAL_DMA_IRQHandler+0x6bc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d013      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1a      	ldr	r2, [pc, #104]	; (80040f0 <HAL_DMA_IRQHandler+0x6c0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00e      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <HAL_DMA_IRQHandler+0x6c4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d009      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a17      	ldr	r2, [pc, #92]	; (80040f8 <HAL_DMA_IRQHandler+0x6c8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x678>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a16      	ldr	r2, [pc, #88]	; (80040fc <HAL_DMA_IRQHandler+0x6cc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d12b      	bne.n	8004100 <HAL_DMA_IRQHandler+0x6d0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	e02a      	b.n	8004114 <HAL_DMA_IRQHandler+0x6e4>
 80040be:	bf00      	nop
 80040c0:	40020010 	.word	0x40020010
 80040c4:	40020028 	.word	0x40020028
 80040c8:	40020040 	.word	0x40020040
 80040cc:	40020058 	.word	0x40020058
 80040d0:	40020070 	.word	0x40020070
 80040d4:	40020088 	.word	0x40020088
 80040d8:	400200a0 	.word	0x400200a0
 80040dc:	400200b8 	.word	0x400200b8
 80040e0:	40020410 	.word	0x40020410
 80040e4:	40020428 	.word	0x40020428
 80040e8:	40020440 	.word	0x40020440
 80040ec:	40020458 	.word	0x40020458
 80040f0:	40020470 	.word	0x40020470
 80040f4:	40020488 	.word	0x40020488
 80040f8:	400204a0 	.word	0x400204a0
 80040fc:	400204b8 	.word	0x400204b8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8087 	beq.w	8004228 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2220      	movs	r2, #32
 8004124:	409a      	lsls	r2, r3
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b04      	cmp	r3, #4
 8004134:	d139      	bne.n	80041aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0216 	bic.w	r2, r2, #22
 8004144:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004154:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_DMA_IRQHandler+0x736>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0208 	bic.w	r2, r2, #8
 8004174:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	223f      	movs	r2, #63	; 0x3f
 8004180:	409a      	lsls	r2, r3
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 834a 	beq.w	8004834 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
          }
          return;
 80041a8:	e344      	b.n	8004834 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d018      	beq.n	80041ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d108      	bne.n	80041d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02c      	beq.n	8004228 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
 80041d6:	e027      	b.n	8004228 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d023      	beq.n	8004228 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	4798      	blx	r3
 80041e8:	e01e      	b.n	8004228 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10f      	bne.n	8004218 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0210 	bic.w	r2, r2, #16
 8004206:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8306 	beq.w	800483e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8088 	beq.w	8004350 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2204      	movs	r2, #4
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a7a      	ldr	r2, [pc, #488]	; (8004438 <HAL_DMA_IRQHandler+0xa08>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d04a      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a79      	ldr	r2, [pc, #484]	; (800443c <HAL_DMA_IRQHandler+0xa0c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d045      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a77      	ldr	r2, [pc, #476]	; (8004440 <HAL_DMA_IRQHandler+0xa10>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d040      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a76      	ldr	r2, [pc, #472]	; (8004444 <HAL_DMA_IRQHandler+0xa14>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d03b      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a74      	ldr	r2, [pc, #464]	; (8004448 <HAL_DMA_IRQHandler+0xa18>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d036      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a73      	ldr	r2, [pc, #460]	; (800444c <HAL_DMA_IRQHandler+0xa1c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d031      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a71      	ldr	r2, [pc, #452]	; (8004450 <HAL_DMA_IRQHandler+0xa20>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d02c      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a70      	ldr	r2, [pc, #448]	; (8004454 <HAL_DMA_IRQHandler+0xa24>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d027      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6e      	ldr	r2, [pc, #440]	; (8004458 <HAL_DMA_IRQHandler+0xa28>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d022      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6d      	ldr	r2, [pc, #436]	; (800445c <HAL_DMA_IRQHandler+0xa2c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d01d      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a6b      	ldr	r2, [pc, #428]	; (8004460 <HAL_DMA_IRQHandler+0xa30>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d018      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a6a      	ldr	r2, [pc, #424]	; (8004464 <HAL_DMA_IRQHandler+0xa34>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a68      	ldr	r2, [pc, #416]	; (8004468 <HAL_DMA_IRQHandler+0xa38>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a67      	ldr	r2, [pc, #412]	; (800446c <HAL_DMA_IRQHandler+0xa3c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a65      	ldr	r2, [pc, #404]	; (8004470 <HAL_DMA_IRQHandler+0xa40>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x8b8>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a64      	ldr	r2, [pc, #400]	; (8004474 <HAL_DMA_IRQHandler+0xa44>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d108      	bne.n	80042fa <HAL_DMA_IRQHandler+0x8ca>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e007      	b.n	800430a <HAL_DMA_IRQHandler+0x8da>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0201 	bic.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3301      	adds	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004312:	429a      	cmp	r2, r3
 8004314:	d307      	bcc.n	8004326 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f2      	bne.n	800430a <HAL_DMA_IRQHandler+0x8da>
 8004324:	e000      	b.n	8004328 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004326:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2203      	movs	r2, #3
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004346:	e003      	b.n	8004350 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8272 	beq.w	800483e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
 8004362:	e26c      	b.n	800483e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a43      	ldr	r2, [pc, #268]	; (8004478 <HAL_DMA_IRQHandler+0xa48>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d022      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x984>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a42      	ldr	r2, [pc, #264]	; (800447c <HAL_DMA_IRQHandler+0xa4c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d01d      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x984>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a40      	ldr	r2, [pc, #256]	; (8004480 <HAL_DMA_IRQHandler+0xa50>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d018      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x984>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3f      	ldr	r2, [pc, #252]	; (8004484 <HAL_DMA_IRQHandler+0xa54>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x984>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3d      	ldr	r2, [pc, #244]	; (8004488 <HAL_DMA_IRQHandler+0xa58>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00e      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x984>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a3c      	ldr	r2, [pc, #240]	; (800448c <HAL_DMA_IRQHandler+0xa5c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d009      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x984>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a3a      	ldr	r2, [pc, #232]	; (8004490 <HAL_DMA_IRQHandler+0xa60>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x984>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a39      	ldr	r2, [pc, #228]	; (8004494 <HAL_DMA_IRQHandler+0xa64>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d101      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x988>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_DMA_IRQHandler+0x98a>
 80043b8:	2300      	movs	r3, #0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 823f 	beq.w	800483e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2204      	movs	r2, #4
 80043d2:	409a      	lsls	r2, r3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80cd 	beq.w	8004578 <HAL_DMA_IRQHandler+0xb48>
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80c7 	beq.w	8004578 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	2204      	movs	r2, #4
 80043f4:	409a      	lsls	r2, r3
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d049      	beq.n	8004498 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8210 	beq.w	8004838 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004420:	e20a      	b.n	8004838 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8206 	beq.w	8004838 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004434:	e200      	b.n	8004838 <HAL_DMA_IRQHandler+0xe08>
 8004436:	bf00      	nop
 8004438:	40020010 	.word	0x40020010
 800443c:	40020028 	.word	0x40020028
 8004440:	40020040 	.word	0x40020040
 8004444:	40020058 	.word	0x40020058
 8004448:	40020070 	.word	0x40020070
 800444c:	40020088 	.word	0x40020088
 8004450:	400200a0 	.word	0x400200a0
 8004454:	400200b8 	.word	0x400200b8
 8004458:	40020410 	.word	0x40020410
 800445c:	40020428 	.word	0x40020428
 8004460:	40020440 	.word	0x40020440
 8004464:	40020458 	.word	0x40020458
 8004468:	40020470 	.word	0x40020470
 800446c:	40020488 	.word	0x40020488
 8004470:	400204a0 	.word	0x400204a0
 8004474:	400204b8 	.word	0x400204b8
 8004478:	58025408 	.word	0x58025408
 800447c:	5802541c 	.word	0x5802541c
 8004480:	58025430 	.word	0x58025430
 8004484:	58025444 	.word	0x58025444
 8004488:	58025458 	.word	0x58025458
 800448c:	5802546c 	.word	0x5802546c
 8004490:	58025480 	.word	0x58025480
 8004494:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d160      	bne.n	8004564 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a8c      	ldr	r2, [pc, #560]	; (80046d8 <HAL_DMA_IRQHandler+0xca8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d04a      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a8a      	ldr	r2, [pc, #552]	; (80046dc <HAL_DMA_IRQHandler+0xcac>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d045      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a89      	ldr	r2, [pc, #548]	; (80046e0 <HAL_DMA_IRQHandler+0xcb0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d040      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a87      	ldr	r2, [pc, #540]	; (80046e4 <HAL_DMA_IRQHandler+0xcb4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d03b      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a86      	ldr	r2, [pc, #536]	; (80046e8 <HAL_DMA_IRQHandler+0xcb8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d036      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a84      	ldr	r2, [pc, #528]	; (80046ec <HAL_DMA_IRQHandler+0xcbc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d031      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a83      	ldr	r2, [pc, #524]	; (80046f0 <HAL_DMA_IRQHandler+0xcc0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d02c      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a81      	ldr	r2, [pc, #516]	; (80046f4 <HAL_DMA_IRQHandler+0xcc4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d027      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a80      	ldr	r2, [pc, #512]	; (80046f8 <HAL_DMA_IRQHandler+0xcc8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d022      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a7e      	ldr	r2, [pc, #504]	; (80046fc <HAL_DMA_IRQHandler+0xccc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01d      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7d      	ldr	r2, [pc, #500]	; (8004700 <HAL_DMA_IRQHandler+0xcd0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d018      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a7b      	ldr	r2, [pc, #492]	; (8004704 <HAL_DMA_IRQHandler+0xcd4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a7a      	ldr	r2, [pc, #488]	; (8004708 <HAL_DMA_IRQHandler+0xcd8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a78      	ldr	r2, [pc, #480]	; (800470c <HAL_DMA_IRQHandler+0xcdc>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a77      	ldr	r2, [pc, #476]	; (8004710 <HAL_DMA_IRQHandler+0xce0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb12>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a75      	ldr	r2, [pc, #468]	; (8004714 <HAL_DMA_IRQHandler+0xce4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <HAL_DMA_IRQHandler+0xb24>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0208 	bic.w	r2, r2, #8
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e007      	b.n	8004564 <HAL_DMA_IRQHandler+0xb34>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0204 	bic.w	r2, r2, #4
 8004562:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8165 	beq.w	8004838 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004576:	e15f      	b.n	8004838 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	2202      	movs	r2, #2
 8004582:	409a      	lsls	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4013      	ands	r3, r2
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80c5 	beq.w	8004718 <HAL_DMA_IRQHandler+0xce8>
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80bf 	beq.w	8004718 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	2202      	movs	r2, #2
 80045a4:	409a      	lsls	r2, r3
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d018      	beq.n	80045e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 813a 	beq.w	800483c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d0:	e134      	b.n	800483c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8130 	beq.w	800483c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e4:	e12a      	b.n	800483c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d168      	bne.n	80046c2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a38      	ldr	r2, [pc, #224]	; (80046d8 <HAL_DMA_IRQHandler+0xca8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d04a      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a37      	ldr	r2, [pc, #220]	; (80046dc <HAL_DMA_IRQHandler+0xcac>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d045      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a35      	ldr	r2, [pc, #212]	; (80046e0 <HAL_DMA_IRQHandler+0xcb0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d040      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a34      	ldr	r2, [pc, #208]	; (80046e4 <HAL_DMA_IRQHandler+0xcb4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d03b      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a32      	ldr	r2, [pc, #200]	; (80046e8 <HAL_DMA_IRQHandler+0xcb8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d036      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a31      	ldr	r2, [pc, #196]	; (80046ec <HAL_DMA_IRQHandler+0xcbc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d031      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2f      	ldr	r2, [pc, #188]	; (80046f0 <HAL_DMA_IRQHandler+0xcc0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d02c      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2e      	ldr	r2, [pc, #184]	; (80046f4 <HAL_DMA_IRQHandler+0xcc4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d027      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2c      	ldr	r2, [pc, #176]	; (80046f8 <HAL_DMA_IRQHandler+0xcc8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d022      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2b      	ldr	r2, [pc, #172]	; (80046fc <HAL_DMA_IRQHandler+0xccc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d01d      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a29      	ldr	r2, [pc, #164]	; (8004700 <HAL_DMA_IRQHandler+0xcd0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a28      	ldr	r2, [pc, #160]	; (8004704 <HAL_DMA_IRQHandler+0xcd4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a26      	ldr	r2, [pc, #152]	; (8004708 <HAL_DMA_IRQHandler+0xcd8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a25      	ldr	r2, [pc, #148]	; (800470c <HAL_DMA_IRQHandler+0xcdc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a23      	ldr	r2, [pc, #140]	; (8004710 <HAL_DMA_IRQHandler+0xce0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_DMA_IRQHandler+0xc60>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a22      	ldr	r2, [pc, #136]	; (8004714 <HAL_DMA_IRQHandler+0xce4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d108      	bne.n	80046a2 <HAL_DMA_IRQHandler+0xc72>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0214 	bic.w	r2, r2, #20
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e007      	b.n	80046b2 <HAL_DMA_IRQHandler+0xc82>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 020a 	bic.w	r2, r2, #10
 80046b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80b8 	beq.w	800483c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046d4:	e0b2      	b.n	800483c <HAL_DMA_IRQHandler+0xe0c>
 80046d6:	bf00      	nop
 80046d8:	40020010 	.word	0x40020010
 80046dc:	40020028 	.word	0x40020028
 80046e0:	40020040 	.word	0x40020040
 80046e4:	40020058 	.word	0x40020058
 80046e8:	40020070 	.word	0x40020070
 80046ec:	40020088 	.word	0x40020088
 80046f0:	400200a0 	.word	0x400200a0
 80046f4:	400200b8 	.word	0x400200b8
 80046f8:	40020410 	.word	0x40020410
 80046fc:	40020428 	.word	0x40020428
 8004700:	40020440 	.word	0x40020440
 8004704:	40020458 	.word	0x40020458
 8004708:	40020470 	.word	0x40020470
 800470c:	40020488 	.word	0x40020488
 8004710:	400204a0 	.word	0x400204a0
 8004714:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2208      	movs	r2, #8
 8004722:	409a      	lsls	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8088 	beq.w	800483e <HAL_DMA_IRQHandler+0xe0e>
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8082 	beq.w	800483e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a41      	ldr	r2, [pc, #260]	; (8004844 <HAL_DMA_IRQHandler+0xe14>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d04a      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a3f      	ldr	r2, [pc, #252]	; (8004848 <HAL_DMA_IRQHandler+0xe18>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d045      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a3e      	ldr	r2, [pc, #248]	; (800484c <HAL_DMA_IRQHandler+0xe1c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d040      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a3c      	ldr	r2, [pc, #240]	; (8004850 <HAL_DMA_IRQHandler+0xe20>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d03b      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a3b      	ldr	r2, [pc, #236]	; (8004854 <HAL_DMA_IRQHandler+0xe24>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d036      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a39      	ldr	r2, [pc, #228]	; (8004858 <HAL_DMA_IRQHandler+0xe28>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d031      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a38      	ldr	r2, [pc, #224]	; (800485c <HAL_DMA_IRQHandler+0xe2c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d02c      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a36      	ldr	r2, [pc, #216]	; (8004860 <HAL_DMA_IRQHandler+0xe30>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d027      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a35      	ldr	r2, [pc, #212]	; (8004864 <HAL_DMA_IRQHandler+0xe34>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d022      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a33      	ldr	r2, [pc, #204]	; (8004868 <HAL_DMA_IRQHandler+0xe38>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01d      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a32      	ldr	r2, [pc, #200]	; (800486c <HAL_DMA_IRQHandler+0xe3c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d018      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a30      	ldr	r2, [pc, #192]	; (8004870 <HAL_DMA_IRQHandler+0xe40>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2f      	ldr	r2, [pc, #188]	; (8004874 <HAL_DMA_IRQHandler+0xe44>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a2d      	ldr	r2, [pc, #180]	; (8004878 <HAL_DMA_IRQHandler+0xe48>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a2c      	ldr	r2, [pc, #176]	; (800487c <HAL_DMA_IRQHandler+0xe4c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_DMA_IRQHandler+0xdaa>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2a      	ldr	r2, [pc, #168]	; (8004880 <HAL_DMA_IRQHandler+0xe50>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d108      	bne.n	80047ec <HAL_DMA_IRQHandler+0xdbc>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 021c 	bic.w	r2, r2, #28
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e007      	b.n	80047fc <HAL_DMA_IRQHandler+0xdcc>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 020e 	bic.w	r2, r2, #14
 80047fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2201      	movs	r2, #1
 8004806:	409a      	lsls	r2, r3
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
 8004832:	e004      	b.n	800483e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004834:	bf00      	nop
 8004836:	e002      	b.n	800483e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004838:	bf00      	nop
 800483a:	e000      	b.n	800483e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800483e:	3728      	adds	r7, #40	; 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40020010 	.word	0x40020010
 8004848:	40020028 	.word	0x40020028
 800484c:	40020040 	.word	0x40020040
 8004850:	40020058 	.word	0x40020058
 8004854:	40020070 	.word	0x40020070
 8004858:	40020088 	.word	0x40020088
 800485c:	400200a0 	.word	0x400200a0
 8004860:	400200b8 	.word	0x400200b8
 8004864:	40020410 	.word	0x40020410
 8004868:	40020428 	.word	0x40020428
 800486c:	40020440 	.word	0x40020440
 8004870:	40020458 	.word	0x40020458
 8004874:	40020470 	.word	0x40020470
 8004878:	40020488 	.word	0x40020488
 800487c:	400204a0 	.word	0x400204a0
 8004880:	400204b8 	.word	0x400204b8

08004884 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a84      	ldr	r2, [pc, #528]	; (8004acc <DMA_SetConfig+0x230>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d072      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a82      	ldr	r2, [pc, #520]	; (8004ad0 <DMA_SetConfig+0x234>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d06d      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a81      	ldr	r2, [pc, #516]	; (8004ad4 <DMA_SetConfig+0x238>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d068      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a7f      	ldr	r2, [pc, #508]	; (8004ad8 <DMA_SetConfig+0x23c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d063      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a7e      	ldr	r2, [pc, #504]	; (8004adc <DMA_SetConfig+0x240>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d05e      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a7c      	ldr	r2, [pc, #496]	; (8004ae0 <DMA_SetConfig+0x244>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d059      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7b      	ldr	r2, [pc, #492]	; (8004ae4 <DMA_SetConfig+0x248>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d054      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a79      	ldr	r2, [pc, #484]	; (8004ae8 <DMA_SetConfig+0x24c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d04f      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a78      	ldr	r2, [pc, #480]	; (8004aec <DMA_SetConfig+0x250>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d04a      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a76      	ldr	r2, [pc, #472]	; (8004af0 <DMA_SetConfig+0x254>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d045      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a75      	ldr	r2, [pc, #468]	; (8004af4 <DMA_SetConfig+0x258>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d040      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a73      	ldr	r2, [pc, #460]	; (8004af8 <DMA_SetConfig+0x25c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d03b      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a72      	ldr	r2, [pc, #456]	; (8004afc <DMA_SetConfig+0x260>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d036      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a70      	ldr	r2, [pc, #448]	; (8004b00 <DMA_SetConfig+0x264>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d031      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a6f      	ldr	r2, [pc, #444]	; (8004b04 <DMA_SetConfig+0x268>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d02c      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6d      	ldr	r2, [pc, #436]	; (8004b08 <DMA_SetConfig+0x26c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d027      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6c      	ldr	r2, [pc, #432]	; (8004b0c <DMA_SetConfig+0x270>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d022      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6a      	ldr	r2, [pc, #424]	; (8004b10 <DMA_SetConfig+0x274>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01d      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a69      	ldr	r2, [pc, #420]	; (8004b14 <DMA_SetConfig+0x278>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d018      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a67      	ldr	r2, [pc, #412]	; (8004b18 <DMA_SetConfig+0x27c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a66      	ldr	r2, [pc, #408]	; (8004b1c <DMA_SetConfig+0x280>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a64      	ldr	r2, [pc, #400]	; (8004b20 <DMA_SetConfig+0x284>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a63      	ldr	r2, [pc, #396]	; (8004b24 <DMA_SetConfig+0x288>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a61      	ldr	r2, [pc, #388]	; (8004b28 <DMA_SetConfig+0x28c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d101      	bne.n	80049aa <DMA_SetConfig+0x10e>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <DMA_SetConfig+0x110>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00d      	beq.n	80049cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d004      	beq.n	80049cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a3e      	ldr	r2, [pc, #248]	; (8004acc <DMA_SetConfig+0x230>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d04a      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a3d      	ldr	r2, [pc, #244]	; (8004ad0 <DMA_SetConfig+0x234>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d045      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a3b      	ldr	r2, [pc, #236]	; (8004ad4 <DMA_SetConfig+0x238>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d040      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a3a      	ldr	r2, [pc, #232]	; (8004ad8 <DMA_SetConfig+0x23c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d03b      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a38      	ldr	r2, [pc, #224]	; (8004adc <DMA_SetConfig+0x240>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d036      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a37      	ldr	r2, [pc, #220]	; (8004ae0 <DMA_SetConfig+0x244>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d031      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a35      	ldr	r2, [pc, #212]	; (8004ae4 <DMA_SetConfig+0x248>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d02c      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a34      	ldr	r2, [pc, #208]	; (8004ae8 <DMA_SetConfig+0x24c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d027      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a32      	ldr	r2, [pc, #200]	; (8004aec <DMA_SetConfig+0x250>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d022      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a31      	ldr	r2, [pc, #196]	; (8004af0 <DMA_SetConfig+0x254>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d01d      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2f      	ldr	r2, [pc, #188]	; (8004af4 <DMA_SetConfig+0x258>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d018      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2e      	ldr	r2, [pc, #184]	; (8004af8 <DMA_SetConfig+0x25c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <DMA_SetConfig+0x260>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <DMA_SetConfig+0x264>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a29      	ldr	r2, [pc, #164]	; (8004b04 <DMA_SetConfig+0x268>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <DMA_SetConfig+0x26c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <DMA_SetConfig+0x1d4>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <DMA_SetConfig+0x1d6>
 8004a70:	2300      	movs	r3, #0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d05a      	beq.n	8004b2c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	223f      	movs	r2, #63	; 0x3f
 8004a80:	409a      	lsls	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b40      	cmp	r3, #64	; 0x40
 8004aa4:	d108      	bne.n	8004ab8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ab6:	e087      	b.n	8004bc8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	60da      	str	r2, [r3, #12]
}
 8004ac8:	e07e      	b.n	8004bc8 <DMA_SetConfig+0x32c>
 8004aca:	bf00      	nop
 8004acc:	40020010 	.word	0x40020010
 8004ad0:	40020028 	.word	0x40020028
 8004ad4:	40020040 	.word	0x40020040
 8004ad8:	40020058 	.word	0x40020058
 8004adc:	40020070 	.word	0x40020070
 8004ae0:	40020088 	.word	0x40020088
 8004ae4:	400200a0 	.word	0x400200a0
 8004ae8:	400200b8 	.word	0x400200b8
 8004aec:	40020410 	.word	0x40020410
 8004af0:	40020428 	.word	0x40020428
 8004af4:	40020440 	.word	0x40020440
 8004af8:	40020458 	.word	0x40020458
 8004afc:	40020470 	.word	0x40020470
 8004b00:	40020488 	.word	0x40020488
 8004b04:	400204a0 	.word	0x400204a0
 8004b08:	400204b8 	.word	0x400204b8
 8004b0c:	58025408 	.word	0x58025408
 8004b10:	5802541c 	.word	0x5802541c
 8004b14:	58025430 	.word	0x58025430
 8004b18:	58025444 	.word	0x58025444
 8004b1c:	58025458 	.word	0x58025458
 8004b20:	5802546c 	.word	0x5802546c
 8004b24:	58025480 	.word	0x58025480
 8004b28:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a28      	ldr	r2, [pc, #160]	; (8004bd4 <DMA_SetConfig+0x338>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d022      	beq.n	8004b7c <DMA_SetConfig+0x2e0>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a27      	ldr	r2, [pc, #156]	; (8004bd8 <DMA_SetConfig+0x33c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d01d      	beq.n	8004b7c <DMA_SetConfig+0x2e0>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <DMA_SetConfig+0x340>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <DMA_SetConfig+0x2e0>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <DMA_SetConfig+0x344>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <DMA_SetConfig+0x2e0>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <DMA_SetConfig+0x348>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <DMA_SetConfig+0x2e0>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <DMA_SetConfig+0x34c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <DMA_SetConfig+0x2e0>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1f      	ldr	r2, [pc, #124]	; (8004bec <DMA_SetConfig+0x350>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <DMA_SetConfig+0x2e0>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <DMA_SetConfig+0x354>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <DMA_SetConfig+0x2e4>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <DMA_SetConfig+0x2e6>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d020      	beq.n	8004bc8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2201      	movs	r2, #1
 8004b90:	409a      	lsls	r2, r3
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d108      	bne.n	8004bb8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	60da      	str	r2, [r3, #12]
}
 8004bb6:	e007      	b.n	8004bc8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	60da      	str	r2, [r3, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	58025408 	.word	0x58025408
 8004bd8:	5802541c 	.word	0x5802541c
 8004bdc:	58025430 	.word	0x58025430
 8004be0:	58025444 	.word	0x58025444
 8004be4:	58025458 	.word	0x58025458
 8004be8:	5802546c 	.word	0x5802546c
 8004bec:	58025480 	.word	0x58025480
 8004bf0:	58025494 	.word	0x58025494

08004bf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a42      	ldr	r2, [pc, #264]	; (8004d0c <DMA_CalcBaseAndBitshift+0x118>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d04a      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a41      	ldr	r2, [pc, #260]	; (8004d10 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d045      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a3f      	ldr	r2, [pc, #252]	; (8004d14 <DMA_CalcBaseAndBitshift+0x120>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d040      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a3e      	ldr	r2, [pc, #248]	; (8004d18 <DMA_CalcBaseAndBitshift+0x124>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d03b      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a3c      	ldr	r2, [pc, #240]	; (8004d1c <DMA_CalcBaseAndBitshift+0x128>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d036      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a3b      	ldr	r2, [pc, #236]	; (8004d20 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d031      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a39      	ldr	r2, [pc, #228]	; (8004d24 <DMA_CalcBaseAndBitshift+0x130>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d02c      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a38      	ldr	r2, [pc, #224]	; (8004d28 <DMA_CalcBaseAndBitshift+0x134>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d027      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a36      	ldr	r2, [pc, #216]	; (8004d2c <DMA_CalcBaseAndBitshift+0x138>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d022      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a35      	ldr	r2, [pc, #212]	; (8004d30 <DMA_CalcBaseAndBitshift+0x13c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d01d      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a33      	ldr	r2, [pc, #204]	; (8004d34 <DMA_CalcBaseAndBitshift+0x140>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d018      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a32      	ldr	r2, [pc, #200]	; (8004d38 <DMA_CalcBaseAndBitshift+0x144>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a30      	ldr	r2, [pc, #192]	; (8004d3c <DMA_CalcBaseAndBitshift+0x148>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00e      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a2f      	ldr	r2, [pc, #188]	; (8004d40 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d009      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2d      	ldr	r2, [pc, #180]	; (8004d44 <DMA_CalcBaseAndBitshift+0x150>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <DMA_CalcBaseAndBitshift+0xa8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a2c      	ldr	r2, [pc, #176]	; (8004d48 <DMA_CalcBaseAndBitshift+0x154>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <DMA_CalcBaseAndBitshift+0xac>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <DMA_CalcBaseAndBitshift+0xae>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d024      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	3b10      	subs	r3, #16
 8004cae:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <DMA_CalcBaseAndBitshift+0x158>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	4a24      	ldr	r2, [pc, #144]	; (8004d50 <DMA_CalcBaseAndBitshift+0x15c>)
 8004cc0:	5cd3      	ldrb	r3, [r2, r3]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d908      	bls.n	8004ce0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <DMA_CalcBaseAndBitshift+0x160>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	1d1a      	adds	r2, r3, #4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	659a      	str	r2, [r3, #88]	; 0x58
 8004cde:	e00d      	b.n	8004cfc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <DMA_CalcBaseAndBitshift+0x160>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6593      	str	r3, [r2, #88]	; 0x58
 8004cee:	e005      	b.n	8004cfc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40020010 	.word	0x40020010
 8004d10:	40020028 	.word	0x40020028
 8004d14:	40020040 	.word	0x40020040
 8004d18:	40020058 	.word	0x40020058
 8004d1c:	40020070 	.word	0x40020070
 8004d20:	40020088 	.word	0x40020088
 8004d24:	400200a0 	.word	0x400200a0
 8004d28:	400200b8 	.word	0x400200b8
 8004d2c:	40020410 	.word	0x40020410
 8004d30:	40020428 	.word	0x40020428
 8004d34:	40020440 	.word	0x40020440
 8004d38:	40020458 	.word	0x40020458
 8004d3c:	40020470 	.word	0x40020470
 8004d40:	40020488 	.word	0x40020488
 8004d44:	400204a0 	.word	0x400204a0
 8004d48:	400204b8 	.word	0x400204b8
 8004d4c:	aaaaaaab 	.word	0xaaaaaaab
 8004d50:	0800d2c0 	.word	0x0800d2c0
 8004d54:	fffffc00 	.word	0xfffffc00

08004d58 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d120      	bne.n	8004dae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d858      	bhi.n	8004e26 <DMA_CheckFifoParam+0xce>
 8004d74:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <DMA_CheckFifoParam+0x24>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004d8d 	.word	0x08004d8d
 8004d80:	08004d9f 	.word	0x08004d9f
 8004d84:	08004d8d 	.word	0x08004d8d
 8004d88:	08004e27 	.word	0x08004e27
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d048      	beq.n	8004e2a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d9c:	e045      	b.n	8004e2a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004da6:	d142      	bne.n	8004e2e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dac:	e03f      	b.n	8004e2e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db6:	d123      	bne.n	8004e00 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d838      	bhi.n	8004e32 <DMA_CheckFifoParam+0xda>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <DMA_CheckFifoParam+0x70>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004dd9 	.word	0x08004dd9
 8004dcc:	08004ddf 	.word	0x08004ddf
 8004dd0:	08004dd9 	.word	0x08004dd9
 8004dd4:	08004df1 	.word	0x08004df1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
        break;
 8004ddc:	e030      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d025      	beq.n	8004e36 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dee:	e022      	b.n	8004e36 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004df8:	d11f      	bne.n	8004e3a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dfe:	e01c      	b.n	8004e3a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d902      	bls.n	8004e0e <DMA_CheckFifoParam+0xb6>
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d003      	beq.n	8004e14 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e0c:	e018      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
        break;
 8004e12:	e015      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00e      	beq.n	8004e3e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
    break;
 8004e24:	e00b      	b.n	8004e3e <DMA_CheckFifoParam+0xe6>
        break;
 8004e26:	bf00      	nop
 8004e28:	e00a      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
        break;
 8004e2a:	bf00      	nop
 8004e2c:	e008      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
        break;
 8004e2e:	bf00      	nop
 8004e30:	e006      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
        break;
 8004e32:	bf00      	nop
 8004e34:	e004      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
        break;
 8004e36:	bf00      	nop
 8004e38:	e002      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
        break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
    break;
 8004e3e:	bf00      	nop
    }
  }

  return status;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop

08004e50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a38      	ldr	r2, [pc, #224]	; (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d022      	beq.n	8004eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a36      	ldr	r2, [pc, #216]	; (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01d      	beq.n	8004eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a35      	ldr	r2, [pc, #212]	; (8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d018      	beq.n	8004eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a33      	ldr	r2, [pc, #204]	; (8004f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a32      	ldr	r2, [pc, #200]	; (8004f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a30      	ldr	r2, [pc, #192]	; (8004f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2f      	ldr	r2, [pc, #188]	; (8004f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a2d      	ldr	r2, [pc, #180]	; (8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d101      	bne.n	8004eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01a      	beq.n	8004eee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	3b08      	subs	r3, #8
 8004ec0:	4a28      	ldr	r2, [pc, #160]	; (8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	091b      	lsrs	r3, r3, #4
 8004ec8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4b26      	ldr	r3, [pc, #152]	; (8004f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004edc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 031f 	and.w	r3, r3, #31
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004eec:	e024      	b.n	8004f38 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	3b10      	subs	r3, #16
 8004ef6:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d806      	bhi.n	8004f16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d902      	bls.n	8004f16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3308      	adds	r3, #8
 8004f14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4b18      	ldr	r3, [pc, #96]	; (8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	461a      	mov	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	2201      	movs	r2, #1
 8004f32:	409a      	lsls	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f38:	bf00      	nop
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	58025408 	.word	0x58025408
 8004f48:	5802541c 	.word	0x5802541c
 8004f4c:	58025430 	.word	0x58025430
 8004f50:	58025444 	.word	0x58025444
 8004f54:	58025458 	.word	0x58025458
 8004f58:	5802546c 	.word	0x5802546c
 8004f5c:	58025480 	.word	0x58025480
 8004f60:	58025494 	.word	0x58025494
 8004f64:	cccccccd 	.word	0xcccccccd
 8004f68:	16009600 	.word	0x16009600
 8004f6c:	58025880 	.word	0x58025880
 8004f70:	aaaaaaab 	.word	0xaaaaaaab
 8004f74:	400204b8 	.word	0x400204b8
 8004f78:	4002040f 	.word	0x4002040f
 8004f7c:	10008200 	.word	0x10008200
 8004f80:	40020880 	.word	0x40020880

08004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d04a      	beq.n	8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d847      	bhi.n	8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a25      	ldr	r2, [pc, #148]	; (800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d022      	beq.n	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a24      	ldr	r2, [pc, #144]	; (8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d01d      	beq.n	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a22      	ldr	r2, [pc, #136]	; (8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d018      	beq.n	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a21      	ldr	r2, [pc, #132]	; (8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	; (800504c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00e      	beq.n	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1e      	ldr	r2, [pc, #120]	; (8005050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4b17      	ldr	r3, [pc, #92]	; (800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	461a      	mov	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800500c:	671a      	str	r2, [r3, #112]	; 0x70
 800500e:	e009      	b.n	8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4b14      	ldr	r3, [pc, #80]	; (8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	461a      	mov	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a11      	ldr	r2, [pc, #68]	; (8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005022:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3b01      	subs	r3, #1
 8005028:	2201      	movs	r2, #1
 800502a:	409a      	lsls	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	58025408 	.word	0x58025408
 8005040:	5802541c 	.word	0x5802541c
 8005044:	58025430 	.word	0x58025430
 8005048:	58025444 	.word	0x58025444
 800504c:	58025458 	.word	0x58025458
 8005050:	5802546c 	.word	0x5802546c
 8005054:	58025480 	.word	0x58025480
 8005058:	58025494 	.word	0x58025494
 800505c:	1600963f 	.word	0x1600963f
 8005060:	58025940 	.word	0x58025940
 8005064:	1000823f 	.word	0x1000823f
 8005068:	40020940 	.word	0x40020940

0800506c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e0c6      	b.n	800520c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fc fb66 	bl	8001758 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2223      	movs	r2, #35	; 0x23
 8005090:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005092:	4b60      	ldr	r3, [pc, #384]	; (8005214 <HAL_ETH_Init+0x1a8>)
 8005094:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005098:	4a5e      	ldr	r2, [pc, #376]	; (8005214 <HAL_ETH_Init+0x1a8>)
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050a2:	4b5c      	ldr	r3, [pc, #368]	; (8005214 <HAL_ETH_Init+0x1a8>)
 80050a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	7a1b      	ldrb	r3, [r3, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d103      	bne.n	80050c0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80050b8:	2000      	movs	r0, #0
 80050ba:	f7fd f859 	bl	8002170 <HAL_SYSCFG_ETHInterfaceSelect>
 80050be:	e003      	b.n	80050c8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80050c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80050c4:	f7fd f854 	bl	8002170 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050e0:	f7fd f80a 	bl	80020f8 <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80050e6:	e00f      	b.n	8005108 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80050e8:	f7fd f806 	bl	80020f8 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050f6:	d907      	bls.n	8005108 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2204      	movs	r2, #4
 80050fc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	22e0      	movs	r2, #224	; 0xe0
 8005102:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e081      	b.n	800520c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e6      	bne.n	80050e8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fac0 	bl	80056a0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005120:	f001 febc 	bl	8006e9c <HAL_RCC_GetHCLKFreq>
 8005124:	4603      	mov	r3, r0
 8005126:	4a3c      	ldr	r2, [pc, #240]	; (8005218 <HAL_ETH_Init+0x1ac>)
 8005128:	fba2 2303 	umull	r2, r3, r2, r3
 800512c:	0c9a      	lsrs	r2, r3, #18
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3a01      	subs	r2, #1
 8005134:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fa13 	bl	8005564 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005154:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005158:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	22e0      	movs	r2, #224	; 0xe0
 8005170:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e04a      	b.n	800520c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	f241 1308 	movw	r3, #4360	; 0x1108
 800517e:	4413      	add	r3, r2
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b26      	ldr	r3, [pc, #152]	; (800521c <HAL_ETH_Init+0x1b0>)
 8005184:	4013      	ands	r3, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6952      	ldr	r2, [r2, #20]
 800518a:	0052      	lsls	r2, r2, #1
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	6809      	ldr	r1, [r1, #0]
 8005190:	431a      	orrs	r2, r3
 8005192:	f241 1308 	movw	r3, #4360	; 0x1108
 8005196:	440b      	add	r3, r1
 8005198:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fad8 	bl	8005750 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fb1c 	bl	80057de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	3305      	adds	r3, #5
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	021a      	lsls	r2, r3, #8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	3304      	adds	r3, #4
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	4619      	mov	r1, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	3303      	adds	r3, #3
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	061a      	lsls	r2, r3, #24
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	3302      	adds	r3, #2
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	3301      	adds	r3, #1
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051f2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2210      	movs	r2, #16
 8005202:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2210      	movs	r2, #16
 8005208:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	58024400 	.word	0x58024400
 8005218:	431bde83 	.word	0x431bde83
 800521c:	ffff8001 	.word	0xffff8001

08005220 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005232:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	791b      	ldrb	r3, [r3, #4]
 8005238:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800523a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	7b1b      	ldrb	r3, [r3, #12]
 8005240:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005242:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	7b5b      	ldrb	r3, [r3, #13]
 8005248:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800524a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	7b9b      	ldrb	r3, [r3, #14]
 8005250:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005252:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	7bdb      	ldrb	r3, [r3, #15]
 8005258:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800525a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	7c12      	ldrb	r2, [r2, #16]
 8005260:	2a00      	cmp	r2, #0
 8005262:	d102      	bne.n	800526a <ETH_SetMACConfig+0x4a>
 8005264:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005268:	e000      	b.n	800526c <ETH_SetMACConfig+0x4c>
 800526a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800526c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	7c52      	ldrb	r2, [r2, #17]
 8005272:	2a00      	cmp	r2, #0
 8005274:	d102      	bne.n	800527c <ETH_SetMACConfig+0x5c>
 8005276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800527a:	e000      	b.n	800527e <ETH_SetMACConfig+0x5e>
 800527c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800527e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	7c9b      	ldrb	r3, [r3, #18]
 8005284:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005286:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800528c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005292:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	7f1b      	ldrb	r3, [r3, #28]
 8005298:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800529a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	7f5b      	ldrb	r3, [r3, #29]
 80052a0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80052a2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	7f92      	ldrb	r2, [r2, #30]
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	d102      	bne.n	80052b2 <ETH_SetMACConfig+0x92>
 80052ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052b0:	e000      	b.n	80052b4 <ETH_SetMACConfig+0x94>
 80052b2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80052b4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	7fdb      	ldrb	r3, [r3, #31]
 80052ba:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80052bc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80052c4:	2a00      	cmp	r2, #0
 80052c6:	d102      	bne.n	80052ce <ETH_SetMACConfig+0xae>
 80052c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052cc:	e000      	b.n	80052d0 <ETH_SetMACConfig+0xb0>
 80052ce:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80052d0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80052d6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052de:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80052e0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4b56      	ldr	r3, [pc, #344]	; (800544c <ETH_SetMACConfig+0x22c>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800530a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800530c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005314:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005316:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800531e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005320:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005328:	2a00      	cmp	r2, #0
 800532a:	d102      	bne.n	8005332 <ETH_SetMACConfig+0x112>
 800532c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005330:	e000      	b.n	8005334 <ETH_SetMACConfig+0x114>
 8005332:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005334:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4b42      	ldr	r3, [pc, #264]	; (8005450 <ETH_SetMACConfig+0x230>)
 8005346:	4013      	ands	r3, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	68f9      	ldr	r1, [r7, #12]
 800534e:	430b      	orrs	r3, r1
 8005350:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005358:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	4b3a      	ldr	r3, [pc, #232]	; (8005454 <ETH_SetMACConfig+0x234>)
 800536a:	4013      	ands	r3, r2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	430b      	orrs	r3, r1
 8005374:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800537c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005382:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800538a:	2a00      	cmp	r2, #0
 800538c:	d101      	bne.n	8005392 <ETH_SetMACConfig+0x172>
 800538e:	2280      	movs	r2, #128	; 0x80
 8005390:	e000      	b.n	8005394 <ETH_SetMACConfig+0x174>
 8005392:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005394:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80053aa:	4013      	ands	r3, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	68f9      	ldr	r1, [r7, #12]
 80053b2:	430b      	orrs	r3, r1
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80053bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80053c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d2:	f023 0103 	bic.w	r1, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	430a      	orrs	r2, r1
 80053de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80053ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005406:	2a00      	cmp	r2, #0
 8005408:	d101      	bne.n	800540e <ETH_SetMACConfig+0x1ee>
 800540a:	2240      	movs	r2, #64	; 0x40
 800540c:	e000      	b.n	8005410 <ETH_SetMACConfig+0x1f0>
 800540e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005410:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005418:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800541a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005422:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005430:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	430a      	orrs	r2, r1
 800543c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005440:	bf00      	nop
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	00048083 	.word	0x00048083
 8005450:	c0f88000 	.word	0xc0f88000
 8005454:	fffffef0 	.word	0xfffffef0

08005458 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b38      	ldr	r3, [pc, #224]	; (8005550 <ETH_SetDMAConfig+0xf8>)
 800546e:	4013      	ands	r3, r2
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	6809      	ldr	r1, [r1, #0]
 8005478:	431a      	orrs	r2, r3
 800547a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800547e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	791b      	ldrb	r3, [r3, #4]
 8005484:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800548a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	7b1b      	ldrb	r3, [r3, #12]
 8005490:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	f241 0304 	movw	r3, #4100	; 0x1004
 800549e:	4413      	add	r3, r2
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b2c      	ldr	r3, [pc, #176]	; (8005554 <ETH_SetDMAConfig+0xfc>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6811      	ldr	r1, [r2, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	f241 0304 	movw	r3, #4100	; 0x1004
 80054b2:	440b      	add	r3, r1
 80054b4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	7b5b      	ldrb	r3, [r3, #13]
 80054ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b22      	ldr	r3, [pc, #136]	; (8005558 <ETH_SetDMAConfig+0x100>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	431a      	orrs	r2, r3
 80054da:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80054de:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	7d1b      	ldrb	r3, [r3, #20]
 80054e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80054ea:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	7f5b      	ldrb	r3, [r3, #29]
 80054f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	f241 1304 	movw	r3, #4356	; 0x1104
 80054fe:	4413      	add	r3, r2
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b16      	ldr	r3, [pc, #88]	; (800555c <ETH_SetDMAConfig+0x104>)
 8005504:	4013      	ands	r3, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6811      	ldr	r1, [r2, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	431a      	orrs	r2, r3
 800550e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005512:	440b      	add	r3, r1
 8005514:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	7f1b      	ldrb	r3, [r3, #28]
 800551a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	f241 1308 	movw	r3, #4360	; 0x1108
 800552c:	4413      	add	r3, r2
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <ETH_SetDMAConfig+0x108>)
 8005532:	4013      	ands	r3, r2
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6811      	ldr	r1, [r2, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	431a      	orrs	r2, r3
 800553c:	f241 1308 	movw	r3, #4360	; 0x1108
 8005540:	440b      	add	r3, r1
 8005542:	601a      	str	r2, [r3, #0]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	ffff87fd 	.word	0xffff87fd
 8005554:	ffff2ffe 	.word	0xffff2ffe
 8005558:	fffec000 	.word	0xfffec000
 800555c:	ffc0efef 	.word	0xffc0efef
 8005560:	7fc0ffff 	.word	0x7fc0ffff

08005564 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b0a4      	sub	sp, #144	; 0x90
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005572:	2300      	movs	r3, #0
 8005574:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005576:	2300      	movs	r3, #0
 8005578:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800557c:	2300      	movs	r3, #0
 800557e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005588:	2301      	movs	r3, #1
 800558a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800558e:	2301      	movs	r3, #1
 8005590:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005594:	2300      	movs	r3, #0
 8005596:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80055a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055a4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80055bc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80055c0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80055c8:	2300      	movs	r3, #0
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80055de:	2300      	movs	r3, #0
 80055e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80055e6:	2300      	movs	r3, #0
 80055e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80055fc:	2320      	movs	r3, #32
 80055fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005602:	2301      	movs	r3, #1
 8005604:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005608:	2300      	movs	r3, #0
 800560a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800560e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005614:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005618:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800561a:	2300      	movs	r3, #0
 800561c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005620:	2302      	movs	r3, #2
 8005622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005626:	2300      	movs	r3, #0
 8005628:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800562c:	2300      	movs	r3, #0
 800562e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005632:	2300      	movs	r3, #0
 8005634:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800563e:	2300      	movs	r3, #0
 8005640:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fde6 	bl	8005220 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005654:	2301      	movs	r3, #1
 8005656:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005658:	2301      	movs	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800565c:	2300      	movs	r3, #0
 800565e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005666:	2300      	movs	r3, #0
 8005668:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800566a:	2300      	movs	r3, #0
 800566c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800566e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005672:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005674:	2300      	movs	r3, #0
 8005676:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005678:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800567c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800567e:	2300      	movs	r3, #0
 8005680:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005684:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fee1 	bl	8005458 <ETH_SetDMAConfig>
}
 8005696:	bf00      	nop
 8005698:	3790      	adds	r7, #144	; 0x90
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80056ba:	f001 fbef 	bl	8006e9c <HAL_RCC_GetHCLKFreq>
 80056be:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4a1e      	ldr	r2, [pc, #120]	; (800573c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d908      	bls.n	80056da <ETH_MAC_MDIO_ClkConfig+0x3a>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d804      	bhi.n	80056da <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e027      	b.n	800572a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a18      	ldr	r2, [pc, #96]	; (8005740 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d908      	bls.n	80056f4 <ETH_MAC_MDIO_ClkConfig+0x54>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4a17      	ldr	r2, [pc, #92]	; (8005744 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d204      	bcs.n	80056f4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	e01a      	b.n	800572a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4a13      	ldr	r2, [pc, #76]	; (8005744 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d303      	bcc.n	8005704 <ETH_MAC_MDIO_ClkConfig+0x64>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4a12      	ldr	r2, [pc, #72]	; (8005748 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d911      	bls.n	8005728 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4a10      	ldr	r2, [pc, #64]	; (8005748 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d908      	bls.n	800571e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4a0f      	ldr	r2, [pc, #60]	; (800574c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d804      	bhi.n	800571e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	e005      	b.n	800572a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	e000      	b.n	800572a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005728:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	01312cff 	.word	0x01312cff
 8005740:	02160ebf 	.word	0x02160ebf
 8005744:	03938700 	.word	0x03938700
 8005748:	05f5e0ff 	.word	0x05f5e0ff
 800574c:	08f0d17f 	.word	0x08f0d17f

08005750 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	e01d      	b.n	800579a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68d9      	ldr	r1, [r3, #12]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4613      	mov	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	440b      	add	r3, r1
 800576e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2200      	movs	r2, #0
 8005786:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	3206      	adds	r2, #6
 8005790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3301      	adds	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b03      	cmp	r3, #3
 800579e:	d9de      	bls.n	800575e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	f241 132c 	movw	r3, #4396	; 0x112c
 80057ae:	4413      	add	r3, r2
 80057b0:	2203      	movs	r2, #3
 80057b2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68d9      	ldr	r1, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	f241 1314 	movw	r3, #4372	; 0x1114
 80057c0:	4413      	add	r3, r2
 80057c2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80057d0:	601a      	str	r2, [r3, #0]
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e024      	b.n	8005836 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6919      	ldr	r1, [r3, #16]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4613      	mov	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4413      	add	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	440b      	add	r3, r1
 80057fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2200      	movs	r2, #0
 8005808:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2200      	movs	r2, #0
 8005814:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2200      	movs	r2, #0
 800581a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3310      	adds	r3, #16
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3301      	adds	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b03      	cmp	r3, #3
 800583a:	d9d7      	bls.n	80057ec <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	f241 1330 	movw	r3, #4400	; 0x1130
 8005862:	4413      	add	r3, r2
 8005864:	2203      	movs	r2, #3
 8005866:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6919      	ldr	r1, [r3, #16]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	f241 131c 	movw	r3, #4380	; 0x111c
 8005874:	4413      	add	r3, r2
 8005876:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	f241 1328 	movw	r3, #4392	; 0x1128
 8005888:	4413      	add	r3, r2
 800588a:	6019      	str	r1, [r3, #0]
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005898:	b480      	push	{r7}
 800589a:	b089      	sub	sp, #36	; 0x24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80058a6:	4b89      	ldr	r3, [pc, #548]	; (8005acc <HAL_GPIO_Init+0x234>)
 80058a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058aa:	e194      	b.n	8005bd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	2101      	movs	r1, #1
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 8186 	beq.w	8005bd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d00b      	beq.n	80058e4 <HAL_GPIO_Init+0x4c>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d007      	beq.n	80058e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058d8:	2b11      	cmp	r3, #17
 80058da:	d003      	beq.n	80058e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b12      	cmp	r3, #18
 80058e2:	d130      	bne.n	8005946 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	2203      	movs	r2, #3
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800591a:	2201      	movs	r2, #1
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4013      	ands	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	f003 0201 	and.w	r2, r3, #1
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4313      	orrs	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	2203      	movs	r2, #3
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4013      	ands	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	fa02 f303 	lsl.w	r3, r2, r3
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	4313      	orrs	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d003      	beq.n	8005986 <HAL_GPIO_Init+0xee>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b12      	cmp	r3, #18
 8005984:	d123      	bne.n	80059ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	08da      	lsrs	r2, r3, #3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3208      	adds	r2, #8
 800598e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	220f      	movs	r2, #15
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	08da      	lsrs	r2, r3, #3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3208      	adds	r2, #8
 80059c8:	69b9      	ldr	r1, [r7, #24]
 80059ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	2203      	movs	r2, #3
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f003 0203 	and.w	r2, r3, #3
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80e0 	beq.w	8005bd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a10:	4b2f      	ldr	r3, [pc, #188]	; (8005ad0 <HAL_GPIO_Init+0x238>)
 8005a12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a16:	4a2e      	ldr	r2, [pc, #184]	; (8005ad0 <HAL_GPIO_Init+0x238>)
 8005a18:	f043 0302 	orr.w	r3, r3, #2
 8005a1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a20:	4b2b      	ldr	r3, [pc, #172]	; (8005ad0 <HAL_GPIO_Init+0x238>)
 8005a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a2e:	4a29      	ldr	r2, [pc, #164]	; (8005ad4 <HAL_GPIO_Init+0x23c>)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	089b      	lsrs	r3, r3, #2
 8005a34:	3302      	adds	r3, #2
 8005a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	220f      	movs	r2, #15
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a20      	ldr	r2, [pc, #128]	; (8005ad8 <HAL_GPIO_Init+0x240>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d052      	beq.n	8005b00 <HAL_GPIO_Init+0x268>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <HAL_GPIO_Init+0x244>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d031      	beq.n	8005ac6 <HAL_GPIO_Init+0x22e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <HAL_GPIO_Init+0x248>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d02b      	beq.n	8005ac2 <HAL_GPIO_Init+0x22a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <HAL_GPIO_Init+0x24c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d025      	beq.n	8005abe <HAL_GPIO_Init+0x226>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <HAL_GPIO_Init+0x250>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01f      	beq.n	8005aba <HAL_GPIO_Init+0x222>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <HAL_GPIO_Init+0x254>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d019      	beq.n	8005ab6 <HAL_GPIO_Init+0x21e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <HAL_GPIO_Init+0x258>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_GPIO_Init+0x21a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <HAL_GPIO_Init+0x25c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00d      	beq.n	8005aae <HAL_GPIO_Init+0x216>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <HAL_GPIO_Init+0x260>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <HAL_GPIO_Init+0x212>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <HAL_GPIO_Init+0x264>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_GPIO_Init+0x20e>
 8005aa2:	2309      	movs	r3, #9
 8005aa4:	e02d      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005aa6:	230a      	movs	r3, #10
 8005aa8:	e02b      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005aaa:	2308      	movs	r3, #8
 8005aac:	e029      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005aae:	2307      	movs	r3, #7
 8005ab0:	e027      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005ab2:	2306      	movs	r3, #6
 8005ab4:	e025      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005ab6:	2305      	movs	r3, #5
 8005ab8:	e023      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005aba:	2304      	movs	r3, #4
 8005abc:	e021      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e01f      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e01d      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e01b      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005aca:	bf00      	nop
 8005acc:	58000080 	.word	0x58000080
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	58000400 	.word	0x58000400
 8005ad8:	58020000 	.word	0x58020000
 8005adc:	58020400 	.word	0x58020400
 8005ae0:	58020800 	.word	0x58020800
 8005ae4:	58020c00 	.word	0x58020c00
 8005ae8:	58021000 	.word	0x58021000
 8005aec:	58021400 	.word	0x58021400
 8005af0:	58021800 	.word	0x58021800
 8005af4:	58021c00 	.word	0x58021c00
 8005af8:	58022000 	.word	0x58022000
 8005afc:	58022400 	.word	0x58022400
 8005b00:	2300      	movs	r3, #0
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	f002 0203 	and.w	r2, r2, #3
 8005b08:	0092      	lsls	r2, r2, #2
 8005b0a:	4093      	lsls	r3, r2
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b12:	4938      	ldr	r1, [pc, #224]	; (8005bf4 <HAL_GPIO_Init+0x35c>)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	3302      	adds	r3, #2
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	43db      	mvns	r3, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4013      	ands	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	43db      	mvns	r3, r3
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	4013      	ands	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	43db      	mvns	r3, r3
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f47f ae63 	bne.w	80058ac <HAL_GPIO_Init+0x14>
  }
}
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	3724      	adds	r7, #36	; 0x24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	58000400 	.word	0x58000400

08005bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	887b      	ldrh	r3, [r7, #2]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c10:	2301      	movs	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
 8005c14:	e001      	b.n	8005c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c16:	2300      	movs	r3, #0
 8005c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
 8005c34:	4613      	mov	r3, r2
 8005c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c38:	787b      	ldrb	r3, [r7, #1]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c3e:	887a      	ldrh	r2, [r7, #2]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c44:	e003      	b.n	8005c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c46:	887b      	ldrh	r3, [r7, #2]
 8005c48:	041a      	lsls	r2, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	619a      	str	r2, [r3, #24]
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005c64:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <HAL_HSEM_FastTake+0x2c>)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3320      	adds	r3, #32
 8005c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6e:	4a07      	ldr	r2, [pc, #28]	; (8005c8c <HAL_HSEM_FastTake+0x30>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d101      	bne.n	8005c78 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e000      	b.n	8005c7a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	58026400 	.word	0x58026400
 8005c8c:	80000300 	.word	0x80000300

08005c90 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005c9a:	4906      	ldr	r1, [pc, #24]	; (8005cb4 <HAL_HSEM_Release+0x24>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	58026400 	.word	0x58026400

08005cb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cba:	b08f      	sub	sp, #60	; 0x3c
 8005cbc:	af0a      	add	r7, sp, #40	; 0x28
 8005cbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e116      	b.n	8005ef8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fc f831 	bl	8001d4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2203      	movs	r2, #3
 8005cee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f006 ffa5 	bl	800cc58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	687e      	ldr	r6, [r7, #4]
 8005d16:	466d      	mov	r5, sp
 8005d18:	f106 0410 	add.w	r4, r6, #16
 8005d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d28:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d2c:	1d33      	adds	r3, r6, #4
 8005d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d30:	6838      	ldr	r0, [r7, #0]
 8005d32:	f006 ff23 	bl	800cb7c <USB_CoreInit>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0d7      	b.n	8005ef8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f006 ff93 	bl	800cc7a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
 8005d58:	e04a      	b.n	8005df0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	333d      	adds	r3, #61	; 0x3d
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d6e:	7bfa      	ldrb	r2, [r7, #15]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	333c      	adds	r3, #60	; 0x3c
 8005d7e:	7bfa      	ldrb	r2, [r7, #15]
 8005d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d82:	7bfa      	ldrb	r2, [r7, #15]
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	b298      	uxth	r0, r3
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	3342      	adds	r3, #66	; 0x42
 8005d96:	4602      	mov	r2, r0
 8005d98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d9a:	7bfa      	ldrb	r2, [r7, #15]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	333f      	adds	r3, #63	; 0x3f
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005dae:	7bfa      	ldrb	r2, [r7, #15]
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	1a9b      	subs	r3, r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	440b      	add	r3, r1
 8005dbc:	3344      	adds	r3, #68	; 0x44
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005dc2:	7bfa      	ldrb	r2, [r7, #15]
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	3348      	adds	r3, #72	; 0x48
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005dd6:	7bfa      	ldrb	r2, [r7, #15]
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	3350      	adds	r3, #80	; 0x50
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	3301      	adds	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
 8005df0:	7bfa      	ldrb	r2, [r7, #15]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d3af      	bcc.n	8005d5a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
 8005dfe:	e044      	b.n	8005e8a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e00:	7bfa      	ldrb	r2, [r7, #15]
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	4613      	mov	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e16:	7bfa      	ldrb	r2, [r7, #15]
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005e28:	7bfa      	ldrb	r2, [r7, #15]
 8005e2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e2c:	7bfa      	ldrb	r2, [r7, #15]
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e42:	7bfa      	ldrb	r2, [r7, #15]
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e58:	7bfa      	ldrb	r2, [r7, #15]
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e6e:	7bfa      	ldrb	r2, [r7, #15]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	3301      	adds	r3, #1
 8005e88:	73fb      	strb	r3, [r7, #15]
 8005e8a:	7bfa      	ldrb	r2, [r7, #15]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d3b5      	bcc.n	8005e00 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	687e      	ldr	r6, [r7, #4]
 8005e9c:	466d      	mov	r5, sp
 8005e9e:	f106 0410 	add.w	r4, r6, #16
 8005ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005eae:	e885 0003 	stmia.w	r5, {r0, r1}
 8005eb2:	1d33      	adds	r3, r6, #4
 8005eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eb6:	6838      	ldr	r0, [r7, #0]
 8005eb8:	f006 ff0a 	bl	800ccd0 <USB_DevInit>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e014      	b.n	8005ef8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d102      	bne.n	8005eec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f80a 	bl	8005f00 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f007 f8ac 	bl	800d04e <USB_DevDisconnect>

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2e:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <HAL_PCDEx_ActivateLPM+0x44>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	10000003 	.word	0x10000003

08005f48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005f50:	4b29      	ldr	r3, [pc, #164]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	2b06      	cmp	r3, #6
 8005f5a:	d00a      	beq.n	8005f72 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f5c:	4b26      	ldr	r3, [pc, #152]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d001      	beq.n	8005f6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e040      	b.n	8005ff0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e03e      	b.n	8005ff0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f72:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005f7a:	491f      	ldr	r1, [pc, #124]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f82:	f7fc f8b9 	bl	80020f8 <HAL_GetTick>
 8005f86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f88:	e009      	b.n	8005f9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f8a:	f7fc f8b5 	bl	80020f8 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f98:	d901      	bls.n	8005f9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e028      	b.n	8005ff0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f9e:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005faa:	d1ee      	bne.n	8005f8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b1e      	cmp	r3, #30
 8005fb0:	d008      	beq.n	8005fc4 <HAL_PWREx_ConfigSupply+0x7c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb6:	d005      	beq.n	8005fc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b1d      	cmp	r3, #29
 8005fbc:	d002      	beq.n	8005fc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b2d      	cmp	r3, #45	; 0x2d
 8005fc2:	d114      	bne.n	8005fee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005fc4:	f7fc f898 	bl	80020f8 <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005fca:	e009      	b.n	8005fe0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005fcc:	f7fc f894 	bl	80020f8 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fda:	d901      	bls.n	8005fe0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e007      	b.n	8005ff0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005fe0:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fec:	d1ee      	bne.n	8005fcc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	58024800 	.word	0x58024800

08005ffc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a04      	ldr	r2, [pc, #16]	; (8006018 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800600a:	60d3      	str	r3, [r2, #12]
}
 800600c:	bf00      	nop
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	58024800 	.word	0x58024800

0800601c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	; 0x30
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e3ff      	b.n	800682e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8087 	beq.w	800614a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800603c:	4b99      	ldr	r3, [pc, #612]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006046:	4b97      	ldr	r3, [pc, #604]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	2b10      	cmp	r3, #16
 8006050:	d007      	beq.n	8006062 <HAL_RCC_OscConfig+0x46>
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	2b18      	cmp	r3, #24
 8006056:	d110      	bne.n	800607a <HAL_RCC_OscConfig+0x5e>
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d10b      	bne.n	800607a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006062:	4b90      	ldr	r3, [pc, #576]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d06c      	beq.n	8006148 <HAL_RCC_OscConfig+0x12c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d168      	bne.n	8006148 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e3d9      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006082:	d106      	bne.n	8006092 <HAL_RCC_OscConfig+0x76>
 8006084:	4b87      	ldr	r3, [pc, #540]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a86      	ldr	r2, [pc, #536]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800608a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	e02e      	b.n	80060f0 <HAL_RCC_OscConfig+0xd4>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10c      	bne.n	80060b4 <HAL_RCC_OscConfig+0x98>
 800609a:	4b82      	ldr	r3, [pc, #520]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a81      	ldr	r2, [pc, #516]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	4b7f      	ldr	r3, [pc, #508]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a7e      	ldr	r2, [pc, #504]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e01d      	b.n	80060f0 <HAL_RCC_OscConfig+0xd4>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0xbc>
 80060be:	4b79      	ldr	r3, [pc, #484]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a78      	ldr	r2, [pc, #480]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b76      	ldr	r3, [pc, #472]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a75      	ldr	r2, [pc, #468]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e00b      	b.n	80060f0 <HAL_RCC_OscConfig+0xd4>
 80060d8:	4b72      	ldr	r3, [pc, #456]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a71      	ldr	r2, [pc, #452]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b6f      	ldr	r3, [pc, #444]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a6e      	ldr	r2, [pc, #440]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80060ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fb fffe 	bl	80020f8 <HAL_GetTick>
 80060fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006100:	f7fb fffa 	bl	80020f8 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	; 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e38d      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006112:	4b64      	ldr	r3, [pc, #400]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0xe4>
 800611e:	e014      	b.n	800614a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fb ffea 	bl	80020f8 <HAL_GetTick>
 8006124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006128:	f7fb ffe6 	bl	80020f8 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b64      	cmp	r3, #100	; 0x64
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e379      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800613a:	4b5a      	ldr	r3, [pc, #360]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x10c>
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80ae 	beq.w	80062b4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006158:	4b52      	ldr	r3, [pc, #328]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006160:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006162:	4b50      	ldr	r3, [pc, #320]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <HAL_RCC_OscConfig+0x162>
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	2b18      	cmp	r3, #24
 8006172:	d13a      	bne.n	80061ea <HAL_RCC_OscConfig+0x1ce>
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d135      	bne.n	80061ea <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800617e:	4b49      	ldr	r3, [pc, #292]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <HAL_RCC_OscConfig+0x17a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e34b      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006196:	f7fb ffdf 	bl	8002158 <HAL_GetREVID>
 800619a:	4603      	mov	r3, r0
 800619c:	f241 0203 	movw	r2, #4099	; 0x1003
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d817      	bhi.n	80061d4 <HAL_RCC_OscConfig+0x1b8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d108      	bne.n	80061be <HAL_RCC_OscConfig+0x1a2>
 80061ac:	4b3d      	ldr	r3, [pc, #244]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061b4:	4a3b      	ldr	r2, [pc, #236]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061bc:	e07a      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	4b39      	ldr	r3, [pc, #228]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	031b      	lsls	r3, r3, #12
 80061cc:	4935      	ldr	r1, [pc, #212]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061d2:	e06f      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d4:	4b33      	ldr	r3, [pc, #204]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	061b      	lsls	r3, r3, #24
 80061e2:	4930      	ldr	r1, [pc, #192]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e8:	e064      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d045      	beq.n	800627e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061f2:	4b2c      	ldr	r3, [pc, #176]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f023 0219 	bic.w	r2, r3, #25
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	4929      	ldr	r1, [pc, #164]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006200:	4313      	orrs	r3, r2
 8006202:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006204:	f7fb ff78 	bl	80020f8 <HAL_GetTick>
 8006208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800620c:	f7fb ff74 	bl	80020f8 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e307      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800621e:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622a:	f7fb ff95 	bl	8002158 <HAL_GetREVID>
 800622e:	4603      	mov	r3, r0
 8006230:	f241 0203 	movw	r2, #4099	; 0x1003
 8006234:	4293      	cmp	r3, r2
 8006236:	d817      	bhi.n	8006268 <HAL_RCC_OscConfig+0x24c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d108      	bne.n	8006252 <HAL_RCC_OscConfig+0x236>
 8006240:	4b18      	ldr	r3, [pc, #96]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006248:	4a16      	ldr	r2, [pc, #88]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800624a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800624e:	6053      	str	r3, [r2, #4]
 8006250:	e030      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
 8006252:	4b14      	ldr	r3, [pc, #80]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	031b      	lsls	r3, r3, #12
 8006260:	4910      	ldr	r1, [pc, #64]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006262:	4313      	orrs	r3, r2
 8006264:	604b      	str	r3, [r1, #4]
 8006266:	e025      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
 8006268:	4b0e      	ldr	r3, [pc, #56]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	061b      	lsls	r3, r3, #24
 8006276:	490b      	ldr	r1, [pc, #44]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006278:	4313      	orrs	r3, r2
 800627a:	604b      	str	r3, [r1, #4]
 800627c:	e01a      	b.n	80062b4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a08      	ldr	r2, [pc, #32]	; (80062a4 <HAL_RCC_OscConfig+0x288>)
 8006284:	f023 0301 	bic.w	r3, r3, #1
 8006288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628a:	f7fb ff35 	bl	80020f8 <HAL_GetTick>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006290:	e00a      	b.n	80062a8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006292:	f7fb ff31 	bl	80020f8 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d903      	bls.n	80062a8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e2c4      	b.n	800682e <HAL_RCC_OscConfig+0x812>
 80062a4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062a8:	4ba4      	ldr	r3, [pc, #656]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1ee      	bne.n	8006292 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80a9 	beq.w	8006414 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062c2:	4b9e      	ldr	r3, [pc, #632]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062cc:	4b9b      	ldr	r3, [pc, #620]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d007      	beq.n	80062e8 <HAL_RCC_OscConfig+0x2cc>
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2b18      	cmp	r3, #24
 80062dc:	d13a      	bne.n	8006354 <HAL_RCC_OscConfig+0x338>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f003 0303 	and.w	r3, r3, #3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d135      	bne.n	8006354 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062e8:	4b94      	ldr	r3, [pc, #592]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_RCC_OscConfig+0x2e4>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e296      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006300:	f7fb ff2a 	bl	8002158 <HAL_GetREVID>
 8006304:	4603      	mov	r3, r0
 8006306:	f241 0203 	movw	r2, #4099	; 0x1003
 800630a:	4293      	cmp	r3, r2
 800630c:	d817      	bhi.n	800633e <HAL_RCC_OscConfig+0x322>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	2b20      	cmp	r3, #32
 8006314:	d108      	bne.n	8006328 <HAL_RCC_OscConfig+0x30c>
 8006316:	4b89      	ldr	r3, [pc, #548]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800631e:	4a87      	ldr	r2, [pc, #540]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006320:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006324:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006326:	e075      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006328:	4b84      	ldr	r3, [pc, #528]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	069b      	lsls	r3, r3, #26
 8006336:	4981      	ldr	r1, [pc, #516]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006338:	4313      	orrs	r3, r2
 800633a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800633c:	e06a      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800633e:	4b7f      	ldr	r3, [pc, #508]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	061b      	lsls	r3, r3, #24
 800634c:	497b      	ldr	r1, [pc, #492]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800634e:	4313      	orrs	r3, r2
 8006350:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006352:	e05f      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d042      	beq.n	80063e2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800635c:	4b77      	ldr	r3, [pc, #476]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a76      	ldr	r2, [pc, #472]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006368:	f7fb fec6 	bl	80020f8 <HAL_GetTick>
 800636c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006370:	f7fb fec2 	bl	80020f8 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e255      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006382:	4b6e      	ldr	r3, [pc, #440]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f0      	beq.n	8006370 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800638e:	f7fb fee3 	bl	8002158 <HAL_GetREVID>
 8006392:	4603      	mov	r3, r0
 8006394:	f241 0203 	movw	r2, #4099	; 0x1003
 8006398:	4293      	cmp	r3, r2
 800639a:	d817      	bhi.n	80063cc <HAL_RCC_OscConfig+0x3b0>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d108      	bne.n	80063b6 <HAL_RCC_OscConfig+0x39a>
 80063a4:	4b65      	ldr	r3, [pc, #404]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063ac:	4a63      	ldr	r2, [pc, #396]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063b2:	6053      	str	r3, [r2, #4]
 80063b4:	e02e      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
 80063b6:	4b61      	ldr	r3, [pc, #388]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	069b      	lsls	r3, r3, #26
 80063c4:	495d      	ldr	r1, [pc, #372]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	604b      	str	r3, [r1, #4]
 80063ca:	e023      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
 80063cc:	4b5b      	ldr	r3, [pc, #364]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	061b      	lsls	r3, r3, #24
 80063da:	4958      	ldr	r1, [pc, #352]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	60cb      	str	r3, [r1, #12]
 80063e0:	e018      	b.n	8006414 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80063e2:	4b56      	ldr	r3, [pc, #344]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a55      	ldr	r2, [pc, #340]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80063e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ee:	f7fb fe83 	bl	80020f8 <HAL_GetTick>
 80063f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80063f6:	f7fb fe7f 	bl	80020f8 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e212      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006408:	4b4c      	ldr	r3, [pc, #304]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f0      	bne.n	80063f6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d036      	beq.n	800648e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d019      	beq.n	800645c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006428:	4b44      	ldr	r3, [pc, #272]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800642a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642c:	4a43      	ldr	r2, [pc, #268]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006434:	f7fb fe60 	bl	80020f8 <HAL_GetTick>
 8006438:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800643c:	f7fb fe5c 	bl	80020f8 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e1ef      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800644e:	4b3b      	ldr	r3, [pc, #236]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f0      	beq.n	800643c <HAL_RCC_OscConfig+0x420>
 800645a:	e018      	b.n	800648e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800645c:	4b37      	ldr	r3, [pc, #220]	; (800653c <HAL_RCC_OscConfig+0x520>)
 800645e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006460:	4a36      	ldr	r2, [pc, #216]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006462:	f023 0301 	bic.w	r3, r3, #1
 8006466:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006468:	f7fb fe46 	bl	80020f8 <HAL_GetTick>
 800646c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006470:	f7fb fe42 	bl	80020f8 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e1d5      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006482:	4b2e      	ldr	r3, [pc, #184]	; (800653c <HAL_RCC_OscConfig+0x520>)
 8006484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f0      	bne.n	8006470 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d036      	beq.n	8006508 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d019      	beq.n	80064d6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064a2:	4b26      	ldr	r3, [pc, #152]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a25      	ldr	r2, [pc, #148]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064ae:	f7fb fe23 	bl	80020f8 <HAL_GetTick>
 80064b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064b6:	f7fb fe1f 	bl	80020f8 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e1b2      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064c8:	4b1c      	ldr	r3, [pc, #112]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x49a>
 80064d4:	e018      	b.n	8006508 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064d6:	4b19      	ldr	r3, [pc, #100]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a18      	ldr	r2, [pc, #96]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064e2:	f7fb fe09 	bl	80020f8 <HAL_GetTick>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064ea:	f7fb fe05 	bl	80020f8 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e198      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <HAL_RCC_OscConfig+0x520>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f0      	bne.n	80064ea <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8085 	beq.w	8006620 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006516:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <HAL_RCC_OscConfig+0x524>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a09      	ldr	r2, [pc, #36]	; (8006540 <HAL_RCC_OscConfig+0x524>)
 800651c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006520:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006522:	f7fb fde9 	bl	80020f8 <HAL_GetTick>
 8006526:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006528:	e00c      	b.n	8006544 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800652a:	f7fb fde5 	bl	80020f8 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b64      	cmp	r3, #100	; 0x64
 8006536:	d905      	bls.n	8006544 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e178      	b.n	800682e <HAL_RCC_OscConfig+0x812>
 800653c:	58024400 	.word	0x58024400
 8006540:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006544:	4b96      	ldr	r3, [pc, #600]	; (80067a0 <HAL_RCC_OscConfig+0x784>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0ec      	beq.n	800652a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d106      	bne.n	8006566 <HAL_RCC_OscConfig+0x54a>
 8006558:	4b92      	ldr	r3, [pc, #584]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	4a91      	ldr	r2, [pc, #580]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	6713      	str	r3, [r2, #112]	; 0x70
 8006564:	e02d      	b.n	80065c2 <HAL_RCC_OscConfig+0x5a6>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10c      	bne.n	8006588 <HAL_RCC_OscConfig+0x56c>
 800656e:	4b8d      	ldr	r3, [pc, #564]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	4a8c      	ldr	r2, [pc, #560]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	6713      	str	r3, [r2, #112]	; 0x70
 800657a:	4b8a      	ldr	r3, [pc, #552]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	4a89      	ldr	r2, [pc, #548]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006580:	f023 0304 	bic.w	r3, r3, #4
 8006584:	6713      	str	r3, [r2, #112]	; 0x70
 8006586:	e01c      	b.n	80065c2 <HAL_RCC_OscConfig+0x5a6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b05      	cmp	r3, #5
 800658e:	d10c      	bne.n	80065aa <HAL_RCC_OscConfig+0x58e>
 8006590:	4b84      	ldr	r3, [pc, #528]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006594:	4a83      	ldr	r2, [pc, #524]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006596:	f043 0304 	orr.w	r3, r3, #4
 800659a:	6713      	str	r3, [r2, #112]	; 0x70
 800659c:	4b81      	ldr	r3, [pc, #516]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800659e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a0:	4a80      	ldr	r2, [pc, #512]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	6713      	str	r3, [r2, #112]	; 0x70
 80065a8:	e00b      	b.n	80065c2 <HAL_RCC_OscConfig+0x5a6>
 80065aa:	4b7e      	ldr	r3, [pc, #504]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	4a7d      	ldr	r2, [pc, #500]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	6713      	str	r3, [r2, #112]	; 0x70
 80065b6:	4b7b      	ldr	r3, [pc, #492]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	4a7a      	ldr	r2, [pc, #488]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065bc:	f023 0304 	bic.w	r3, r3, #4
 80065c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d015      	beq.n	80065f6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ca:	f7fb fd95 	bl	80020f8 <HAL_GetTick>
 80065ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065d0:	e00a      	b.n	80065e8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065d2:	f7fb fd91 	bl	80020f8 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e122      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065e8:	4b6e      	ldr	r3, [pc, #440]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0ee      	beq.n	80065d2 <HAL_RCC_OscConfig+0x5b6>
 80065f4:	e014      	b.n	8006620 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f6:	f7fb fd7f 	bl	80020f8 <HAL_GetTick>
 80065fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065fc:	e00a      	b.n	8006614 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065fe:	f7fb fd7b 	bl	80020f8 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f241 3288 	movw	r2, #5000	; 0x1388
 800660c:	4293      	cmp	r3, r2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e10c      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006614:	4b63      	ldr	r3, [pc, #396]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1ee      	bne.n	80065fe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 8101 	beq.w	800682c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800662a:	4b5e      	ldr	r3, [pc, #376]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006632:	2b18      	cmp	r3, #24
 8006634:	f000 80bc 	beq.w	80067b0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	2b02      	cmp	r3, #2
 800663e:	f040 8095 	bne.w	800676c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006642:	4b58      	ldr	r3, [pc, #352]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a57      	ldr	r2, [pc, #348]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800664c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664e:	f7fb fd53 	bl	80020f8 <HAL_GetTick>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006656:	f7fb fd4f 	bl	80020f8 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e0e2      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006668:	4b4e      	ldr	r3, [pc, #312]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f0      	bne.n	8006656 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006674:	4b4b      	ldr	r3, [pc, #300]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006678:	4b4b      	ldr	r3, [pc, #300]	; (80067a8 <HAL_RCC_OscConfig+0x78c>)
 800667a:	4013      	ands	r3, r2
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006684:	0112      	lsls	r2, r2, #4
 8006686:	430a      	orrs	r2, r1
 8006688:	4946      	ldr	r1, [pc, #280]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800668a:	4313      	orrs	r3, r2
 800668c:	628b      	str	r3, [r1, #40]	; 0x28
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	3b01      	subs	r3, #1
 8006694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	3b01      	subs	r3, #1
 800669e:	025b      	lsls	r3, r3, #9
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	3b01      	subs	r3, #1
 80066aa:	041b      	lsls	r3, r3, #16
 80066ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	3b01      	subs	r3, #1
 80066b8:	061b      	lsls	r3, r3, #24
 80066ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066be:	4939      	ldr	r1, [pc, #228]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80066c4:	4b37      	ldr	r3, [pc, #220]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	4a36      	ldr	r2, [pc, #216]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066ca:	f023 0301 	bic.w	r3, r3, #1
 80066ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066d0:	4b34      	ldr	r3, [pc, #208]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d4:	4b35      	ldr	r3, [pc, #212]	; (80067ac <HAL_RCC_OscConfig+0x790>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066dc:	00d2      	lsls	r2, r2, #3
 80066de:	4931      	ldr	r1, [pc, #196]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80066e4:	4b2f      	ldr	r3, [pc, #188]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f023 020c 	bic.w	r2, r3, #12
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	492c      	ldr	r1, [pc, #176]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80066f6:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	f023 0202 	bic.w	r2, r3, #2
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	4928      	ldr	r1, [pc, #160]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006704:	4313      	orrs	r3, r2
 8006706:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006708:	4b26      	ldr	r3, [pc, #152]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	4a25      	ldr	r2, [pc, #148]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800670e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006714:	4b23      	ldr	r3, [pc, #140]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4a22      	ldr	r2, [pc, #136]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006720:	4b20      	ldr	r3, [pc, #128]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800672a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800672c:	4b1d      	ldr	r3, [pc, #116]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006732:	f043 0301 	orr.w	r3, r3, #1
 8006736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006738:	4b1a      	ldr	r3, [pc, #104]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800673e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006744:	f7fb fcd8 	bl	80020f8 <HAL_GetTick>
 8006748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800674c:	f7fb fcd4 	bl	80020f8 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e067      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800675e:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f0      	beq.n	800674c <HAL_RCC_OscConfig+0x730>
 800676a:	e05f      	b.n	800682c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676c:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0c      	ldr	r2, [pc, #48]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fb fcbe 	bl	80020f8 <HAL_GetTick>
 800677c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006780:	f7fb fcba 	bl	80020f8 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e04d      	b.n	800682e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006792:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <HAL_RCC_OscConfig+0x788>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f0      	bne.n	8006780 <HAL_RCC_OscConfig+0x764>
 800679e:	e045      	b.n	800682c <HAL_RCC_OscConfig+0x810>
 80067a0:	58024800 	.word	0x58024800
 80067a4:	58024400 	.word	0x58024400
 80067a8:	fffffc0c 	.word	0xfffffc0c
 80067ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067b0:	4b21      	ldr	r3, [pc, #132]	; (8006838 <HAL_RCC_OscConfig+0x81c>)
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067b6:	4b20      	ldr	r3, [pc, #128]	; (8006838 <HAL_RCC_OscConfig+0x81c>)
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d031      	beq.n	8006828 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f003 0203 	and.w	r2, r3, #3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d12a      	bne.n	8006828 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	091b      	lsrs	r3, r3, #4
 80067d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067de:	429a      	cmp	r2, r3
 80067e0:	d122      	bne.n	8006828 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d11a      	bne.n	8006828 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	0a5b      	lsrs	r3, r3, #9
 80067f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006800:	429a      	cmp	r2, r3
 8006802:	d111      	bne.n	8006828 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006812:	429a      	cmp	r2, r3
 8006814:	d108      	bne.n	8006828 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	0e1b      	lsrs	r3, r3, #24
 800681a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006822:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3730      	adds	r7, #48	; 0x30
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	58024400 	.word	0x58024400

0800683c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e19c      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006850:	4b8a      	ldr	r3, [pc, #552]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d910      	bls.n	8006880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685e:	4b87      	ldr	r3, [pc, #540]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 020f 	bic.w	r2, r3, #15
 8006866:	4985      	ldr	r1, [pc, #532]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b83      	ldr	r3, [pc, #524]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e184      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d010      	beq.n	80068ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	4b7b      	ldr	r3, [pc, #492]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006898:	429a      	cmp	r2, r3
 800689a:	d908      	bls.n	80068ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800689c:	4b78      	ldr	r3, [pc, #480]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	4975      	ldr	r1, [pc, #468]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d010      	beq.n	80068dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	4b70      	ldr	r3, [pc, #448]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d908      	bls.n	80068dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068ca:	4b6d      	ldr	r3, [pc, #436]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	496a      	ldr	r1, [pc, #424]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d010      	beq.n	800690a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699a      	ldr	r2, [r3, #24]
 80068ec:	4b64      	ldr	r3, [pc, #400]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d908      	bls.n	800690a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068f8:	4b61      	ldr	r3, [pc, #388]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	495e      	ldr	r1, [pc, #376]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006906:	4313      	orrs	r3, r2
 8006908:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	d010      	beq.n	8006938 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69da      	ldr	r2, [r3, #28]
 800691a:	4b59      	ldr	r3, [pc, #356]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006922:	429a      	cmp	r2, r3
 8006924:	d908      	bls.n	8006938 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006926:	4b56      	ldr	r3, [pc, #344]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	4953      	ldr	r1, [pc, #332]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006934:	4313      	orrs	r3, r2
 8006936:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d010      	beq.n	8006966 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	4b4d      	ldr	r3, [pc, #308]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	429a      	cmp	r2, r3
 8006952:	d908      	bls.n	8006966 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006954:	4b4a      	ldr	r3, [pc, #296]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f023 020f 	bic.w	r2, r3, #15
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4947      	ldr	r1, [pc, #284]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006962:	4313      	orrs	r3, r2
 8006964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d055      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006972:	4b43      	ldr	r3, [pc, #268]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	4940      	ldr	r1, [pc, #256]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006980:	4313      	orrs	r3, r2
 8006982:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d107      	bne.n	800699c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800698c:	4b3c      	ldr	r3, [pc, #240]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d121      	bne.n	80069dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0f6      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d107      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069a4:	4b36      	ldr	r3, [pc, #216]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d115      	bne.n	80069dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0ea      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d107      	bne.n	80069cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069bc:	4b30      	ldr	r3, [pc, #192]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d109      	bne.n	80069dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0de      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069cc:	4b2c      	ldr	r3, [pc, #176]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0d6      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069dc:	4b28      	ldr	r3, [pc, #160]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f023 0207 	bic.w	r2, r3, #7
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4925      	ldr	r1, [pc, #148]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ee:	f7fb fb83 	bl	80020f8 <HAL_GetTick>
 80069f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f4:	e00a      	b.n	8006a0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069f6:	f7fb fb7f 	bl	80020f8 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e0be      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a0c:	4b1c      	ldr	r3, [pc, #112]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d1eb      	bne.n	80069f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d010      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	4b14      	ldr	r3, [pc, #80]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d208      	bcs.n	8006a4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a3a:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f023 020f 	bic.w	r2, r3, #15
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	490e      	ldr	r1, [pc, #56]	; (8006a80 <HAL_RCC_ClockConfig+0x244>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d214      	bcs.n	8006a84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5a:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f023 020f 	bic.w	r2, r3, #15
 8006a62:	4906      	ldr	r1, [pc, #24]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a6a:	4b04      	ldr	r3, [pc, #16]	; (8006a7c <HAL_RCC_ClockConfig+0x240>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d005      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e086      	b.n	8006b8a <HAL_RCC_ClockConfig+0x34e>
 8006a7c:	52002000 	.word	0x52002000
 8006a80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d010      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	4b3f      	ldr	r3, [pc, #252]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d208      	bcs.n	8006ab2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006aa0:	4b3c      	ldr	r3, [pc, #240]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	4939      	ldr	r1, [pc, #228]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d010      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695a      	ldr	r2, [r3, #20]
 8006ac2:	4b34      	ldr	r3, [pc, #208]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d208      	bcs.n	8006ae0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ace:	4b31      	ldr	r3, [pc, #196]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	492e      	ldr	r1, [pc, #184]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d010      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d208      	bcs.n	8006b0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006afc:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	4922      	ldr	r1, [pc, #136]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d010      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69da      	ldr	r2, [r3, #28]
 8006b1e:	4b1d      	ldr	r3, [pc, #116]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d208      	bcs.n	8006b3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b2a:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	4917      	ldr	r1, [pc, #92]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b3c:	f000 f834 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8006b40:	4602      	mov	r2, r0
 8006b42:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	0a1b      	lsrs	r3, r3, #8
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	4912      	ldr	r1, [pc, #72]	; (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b4e:	5ccb      	ldrb	r3, [r1, r3]
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
 8006b58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <HAL_RCC_ClockConfig+0x358>)
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	4a0d      	ldr	r2, [pc, #52]	; (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b64:	5cd3      	ldrb	r3, [r2, r3]
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b70:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <HAL_RCC_ClockConfig+0x360>)
 8006b72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b74:	4a0a      	ldr	r2, [pc, #40]	; (8006ba0 <HAL_RCC_ClockConfig+0x364>)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <HAL_RCC_ClockConfig+0x368>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fb fa70 	bl	8002064 <HAL_InitTick>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	58024400 	.word	0x58024400
 8006b98:	0800d2b0 	.word	0x0800d2b0
 8006b9c:	24000004 	.word	0x24000004
 8006ba0:	24000000 	.word	0x24000000
 8006ba4:	24011394 	.word	0x24011394

08006ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b089      	sub	sp, #36	; 0x24
 8006bac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bae:	4bb3      	ldr	r3, [pc, #716]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bb6:	2b18      	cmp	r3, #24
 8006bb8:	f200 8155 	bhi.w	8006e66 <HAL_RCC_GetSysClockFreq+0x2be>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006c29 	.word	0x08006c29
 8006bc8:	08006e67 	.word	0x08006e67
 8006bcc:	08006e67 	.word	0x08006e67
 8006bd0:	08006e67 	.word	0x08006e67
 8006bd4:	08006e67 	.word	0x08006e67
 8006bd8:	08006e67 	.word	0x08006e67
 8006bdc:	08006e67 	.word	0x08006e67
 8006be0:	08006e67 	.word	0x08006e67
 8006be4:	08006c4f 	.word	0x08006c4f
 8006be8:	08006e67 	.word	0x08006e67
 8006bec:	08006e67 	.word	0x08006e67
 8006bf0:	08006e67 	.word	0x08006e67
 8006bf4:	08006e67 	.word	0x08006e67
 8006bf8:	08006e67 	.word	0x08006e67
 8006bfc:	08006e67 	.word	0x08006e67
 8006c00:	08006e67 	.word	0x08006e67
 8006c04:	08006c55 	.word	0x08006c55
 8006c08:	08006e67 	.word	0x08006e67
 8006c0c:	08006e67 	.word	0x08006e67
 8006c10:	08006e67 	.word	0x08006e67
 8006c14:	08006e67 	.word	0x08006e67
 8006c18:	08006e67 	.word	0x08006e67
 8006c1c:	08006e67 	.word	0x08006e67
 8006c20:	08006e67 	.word	0x08006e67
 8006c24:	08006c5b 	.word	0x08006c5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c28:	4b94      	ldr	r3, [pc, #592]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d009      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c34:	4b91      	ldr	r3, [pc, #580]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	08db      	lsrs	r3, r3, #3
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	4a90      	ldr	r2, [pc, #576]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c40:	fa22 f303 	lsr.w	r3, r2, r3
 8006c44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c46:	e111      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c48:	4b8d      	ldr	r3, [pc, #564]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c4a:	61bb      	str	r3, [r7, #24]
    break;
 8006c4c:	e10e      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c4e:	4b8d      	ldr	r3, [pc, #564]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c50:	61bb      	str	r3, [r7, #24]
    break;
 8006c52:	e10b      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c54:	4b8c      	ldr	r3, [pc, #560]	; (8006e88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c56:	61bb      	str	r3, [r7, #24]
    break;
 8006c58:	e108      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c5a:	4b88      	ldr	r3, [pc, #544]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006c64:	4b85      	ldr	r3, [pc, #532]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	091b      	lsrs	r3, r3, #4
 8006c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c70:	4b82      	ldr	r3, [pc, #520]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006c7a:	4b80      	ldr	r3, [pc, #512]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7e:	08db      	lsrs	r3, r3, #3
 8006c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	fb02 f303 	mul.w	r3, r2, r3
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80e1 	beq.w	8006e60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	f000 8083 	beq.w	8006dac <HAL_RCC_GetSysClockFreq+0x204>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	f200 80a1 	bhi.w	8006df0 <HAL_RCC_GetSysClockFreq+0x248>
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_RCC_GetSysClockFreq+0x114>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d056      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006cba:	e099      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cbc:	4b6f      	ldr	r3, [pc, #444]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02d      	beq.n	8006d24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cc8:	4b6c      	ldr	r3, [pc, #432]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	08db      	lsrs	r3, r3, #3
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	4a6b      	ldr	r2, [pc, #428]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b62      	ldr	r3, [pc, #392]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006d22:	e087      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006e90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d36:	4b51      	ldr	r3, [pc, #324]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d66:	e065      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006e94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7a:	4b40      	ldr	r3, [pc, #256]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006daa:	e043      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006e98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dbe:	4b2f      	ldr	r3, [pc, #188]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dee:	e021      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006e94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e02:	4b1e      	ldr	r3, [pc, #120]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e32:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006e34:	4b11      	ldr	r3, [pc, #68]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	0a5b      	lsrs	r3, r3, #9
 8006e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e3e:	3301      	adds	r3, #1
 8006e40:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e58:	ee17 3a90 	vmov	r3, s15
 8006e5c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e5e:	e005      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	61bb      	str	r3, [r7, #24]
    break;
 8006e64:	e002      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006e66:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e68:	61bb      	str	r3, [r7, #24]
    break;
 8006e6a:	bf00      	nop
  }

  return sysclockfreq;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3724      	adds	r7, #36	; 0x24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	58024400 	.word	0x58024400
 8006e80:	03d09000 	.word	0x03d09000
 8006e84:	003d0900 	.word	0x003d0900
 8006e88:	007a1200 	.word	0x007a1200
 8006e8c:	46000000 	.word	0x46000000
 8006e90:	4c742400 	.word	0x4c742400
 8006e94:	4a742400 	.word	0x4a742400
 8006e98:	4af42400 	.word	0x4af42400

08006e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ea2:	f7ff fe81 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	4b10      	ldr	r3, [pc, #64]	; (8006eec <HAL_RCC_GetHCLKFreq+0x50>)
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	0a1b      	lsrs	r3, r3, #8
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	490f      	ldr	r1, [pc, #60]	; (8006ef0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006eb4:	5ccb      	ldrb	r3, [r1, r3]
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <HAL_RCC_GetHCLKFreq+0x50>)
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006eca:	5cd3      	ldrb	r3, [r2, r3]
 8006ecc:	f003 031f 	and.w	r3, r3, #31
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed6:	4a07      	ldr	r2, [pc, #28]	; (8006ef4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ed8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006eda:	4a07      	ldr	r2, [pc, #28]	; (8006ef8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ee0:	4b04      	ldr	r3, [pc, #16]	; (8006ef4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	58024400 	.word	0x58024400
 8006ef0:	0800d2b0 	.word	0x0800d2b0
 8006ef4:	24000004 	.word	0x24000004
 8006ef8:	24000000 	.word	0x24000000

08006efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f00:	f7ff ffcc 	bl	8006e9c <HAL_RCC_GetHCLKFreq>
 8006f04:	4602      	mov	r2, r0
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	4904      	ldr	r1, [pc, #16]	; (8006f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f12:	5ccb      	ldrb	r3, [r1, r3]
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	58024400 	.word	0x58024400
 8006f24:	0800d2b0 	.word	0x0800d2b0

08006f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006f2c:	f7ff ffb6 	bl	8006e9c <HAL_RCC_GetHCLKFreq>
 8006f30:	4602      	mov	r2, r0
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	0a1b      	lsrs	r3, r3, #8
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	4904      	ldr	r1, [pc, #16]	; (8006f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f3e:	5ccb      	ldrb	r3, [r1, r3]
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	0800d2b0 	.word	0x0800d2b0

08006f54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f60:	2300      	movs	r3, #0
 8006f62:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d03f      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f78:	d02a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f7e:	d824      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f84:	d018      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f8a:	d81e      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f94:	d007      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f96:	e018      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f98:	4bab      	ldr	r3, [pc, #684]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	4aaa      	ldr	r2, [pc, #680]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fa4:	e015      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	2102      	movs	r1, #2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 f9cf 	bl	8008350 <RCCEx_PLL2_Config>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fb6:	e00c      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3324      	adds	r3, #36	; 0x24
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fa78 	bl	80084b4 <RCCEx_PLL3_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fc8:	e003      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006fce:	e000      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006fd8:	4b9b      	ldr	r3, [pc, #620]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe4:	4998      	ldr	r1, [pc, #608]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	650b      	str	r3, [r1, #80]	; 0x50
 8006fea:	e001      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d03d      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	2b04      	cmp	r3, #4
 8007002:	d826      	bhi.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	08007021 	.word	0x08007021
 8007010:	0800702f 	.word	0x0800702f
 8007014:	08007041 	.word	0x08007041
 8007018:	08007059 	.word	0x08007059
 800701c:	08007059 	.word	0x08007059
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007020:	4b89      	ldr	r3, [pc, #548]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	4a88      	ldr	r2, [pc, #544]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800702c:	e015      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	3304      	adds	r3, #4
 8007032:	2100      	movs	r1, #0
 8007034:	4618      	mov	r0, r3
 8007036:	f001 f98b 	bl	8008350 <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800703e:	e00c      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3324      	adds	r3, #36	; 0x24
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f001 fa34 	bl	80084b4 <RCCEx_PLL3_Config>
 800704c:	4603      	mov	r3, r0
 800704e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007050:	e003      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
      break;
 8007056:	e000      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007060:	4b79      	ldr	r3, [pc, #484]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007064:	f023 0207 	bic.w	r2, r3, #7
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706c:	4976      	ldr	r1, [pc, #472]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800706e:	4313      	orrs	r3, r2
 8007070:	650b      	str	r3, [r1, #80]	; 0x50
 8007072:	e001      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007080:	2b00      	cmp	r3, #0
 8007082:	d042      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708c:	d02b      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800708e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007092:	d825      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007094:	2bc0      	cmp	r3, #192	; 0xc0
 8007096:	d028      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007098:	2bc0      	cmp	r3, #192	; 0xc0
 800709a:	d821      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800709c:	2b80      	cmp	r3, #128	; 0x80
 800709e:	d016      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80070a0:	2b80      	cmp	r3, #128	; 0x80
 80070a2:	d81d      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80070a8:	2b40      	cmp	r3, #64	; 0x40
 80070aa:	d007      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80070ac:	e018      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ae:	4b66      	ldr	r3, [pc, #408]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	4a65      	ldr	r2, [pc, #404]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070ba:	e017      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3304      	adds	r3, #4
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 f944 	bl	8008350 <RCCEx_PLL2_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070cc:	e00e      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3324      	adds	r3, #36	; 0x24
 80070d2:	2100      	movs	r1, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 f9ed 	bl	80084b4 <RCCEx_PLL3_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070de:	e005      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
      break;
 80070e4:	e002      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80070ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80070f2:	4b55      	ldr	r3, [pc, #340]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fe:	4952      	ldr	r1, [pc, #328]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007100:	4313      	orrs	r3, r2
 8007102:	650b      	str	r3, [r1, #80]	; 0x50
 8007104:	e001      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007106:	7dfb      	ldrb	r3, [r7, #23]
 8007108:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007112:	2b00      	cmp	r3, #0
 8007114:	d049      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800711c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007120:	d030      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007122:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007126:	d82a      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007128:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800712c:	d02c      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800712e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007132:	d824      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007138:	d018      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800713a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800713e:	d81e      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007148:	d007      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800714a:	e018      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800714c:	4b3e      	ldr	r3, [pc, #248]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	4a3d      	ldr	r2, [pc, #244]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007158:	e017      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3304      	adds	r3, #4
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f001 f8f5 	bl	8008350 <RCCEx_PLL2_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800716a:	e00e      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3324      	adds	r3, #36	; 0x24
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f001 f99e 	bl	80084b4 <RCCEx_PLL3_Config>
 8007178:	4603      	mov	r3, r0
 800717a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800717c:	e005      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]
      break;
 8007182:	e002      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007184:	bf00      	nop
 8007186:	e000      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007190:	4b2d      	ldr	r3, [pc, #180]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007194:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800719e:	492a      	ldr	r1, [pc, #168]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	658b      	str	r3, [r1, #88]	; 0x58
 80071a4:	e001      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d04c      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071c0:	d030      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80071c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071c6:	d82a      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071cc:	d02c      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80071ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071d2:	d824      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071d8:	d018      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80071da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071de:	d81e      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80071e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071e8:	d007      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80071ea:	e018      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ec:	4b16      	ldr	r3, [pc, #88]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	4a15      	ldr	r2, [pc, #84]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071f8:	e017      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3304      	adds	r3, #4
 80071fe:	2100      	movs	r1, #0
 8007200:	4618      	mov	r0, r3
 8007202:	f001 f8a5 	bl	8008350 <RCCEx_PLL2_Config>
 8007206:	4603      	mov	r3, r0
 8007208:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800720a:	e00e      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3324      	adds	r3, #36	; 0x24
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f001 f94e 	bl	80084b4 <RCCEx_PLL3_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800721c:	e005      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	75fb      	strb	r3, [r7, #23]
      break;
 8007222:	e002      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10d      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007234:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800723e:	4902      	ldr	r1, [pc, #8]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007240:	4313      	orrs	r3, r2
 8007242:	658b      	str	r3, [r1, #88]	; 0x58
 8007244:	e004      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007246:	bf00      	nop
 8007248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d032      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007260:	2b30      	cmp	r3, #48	; 0x30
 8007262:	d01c      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007264:	2b30      	cmp	r3, #48	; 0x30
 8007266:	d817      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007268:	2b20      	cmp	r3, #32
 800726a:	d00c      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800726c:	2b20      	cmp	r3, #32
 800726e:	d813      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007270:	2b00      	cmp	r3, #0
 8007272:	d016      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007274:	2b10      	cmp	r3, #16
 8007276:	d10f      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007278:	4baf      	ldr	r3, [pc, #700]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	4aae      	ldr	r2, [pc, #696]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800727e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007282:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007284:	e00e      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3304      	adds	r3, #4
 800728a:	2102      	movs	r1, #2
 800728c:	4618      	mov	r0, r3
 800728e:	f001 f85f 	bl	8008350 <RCCEx_PLL2_Config>
 8007292:	4603      	mov	r3, r0
 8007294:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007296:	e005      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	75fb      	strb	r3, [r7, #23]
      break;
 800729c:	e002      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800729e:	bf00      	nop
 80072a0:	e000      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80072a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d109      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072aa:	4ba3      	ldr	r3, [pc, #652]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b6:	49a0      	ldr	r1, [pc, #640]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072bc:	e001      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d047      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d6:	d030      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80072d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072dc:	d82a      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80072de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072e2:	d02c      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80072e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072e8:	d824      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80072ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ee:	d018      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80072f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f4:	d81e      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fe:	d007      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007300:	e018      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007302:	4b8d      	ldr	r3, [pc, #564]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	4a8c      	ldr	r2, [pc, #560]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800730c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800730e:	e017      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3304      	adds	r3, #4
 8007314:	2100      	movs	r1, #0
 8007316:	4618      	mov	r0, r3
 8007318:	f001 f81a 	bl	8008350 <RCCEx_PLL2_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007320:	e00e      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3324      	adds	r3, #36	; 0x24
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f001 f8c3 	bl	80084b4 <RCCEx_PLL3_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007332:	e005      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	75fb      	strb	r3, [r7, #23]
      break;
 8007338:	e002      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800733a:	bf00      	nop
 800733c:	e000      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800733e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007346:	4b7c      	ldr	r3, [pc, #496]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007352:	4979      	ldr	r1, [pc, #484]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007354:	4313      	orrs	r3, r2
 8007356:	650b      	str	r3, [r1, #80]	; 0x50
 8007358:	e001      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d049      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800736e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007372:	d02e      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007378:	d828      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800737a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800737e:	d02a      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007384:	d822      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007386:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800738a:	d026      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x486>
 800738c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007390:	d81c      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007396:	d010      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800739c:	d816      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01d      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80073a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a6:	d111      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	2101      	movs	r1, #1
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 ffce 	bl	8008350 <RCCEx_PLL2_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073b8:	e012      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3324      	adds	r3, #36	; 0x24
 80073be:	2101      	movs	r1, #1
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 f877 	bl	80084b4 <RCCEx_PLL3_Config>
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073ca:	e009      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	75fb      	strb	r3, [r7, #23]
      break;
 80073d0:	e006      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80073d2:	bf00      	nop
 80073d4:	e004      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80073d6:	bf00      	nop
 80073d8:	e002      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80073da:	bf00      	nop
 80073dc:	e000      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80073de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073e6:	4b54      	ldr	r3, [pc, #336]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f2:	4951      	ldr	r1, [pc, #324]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	650b      	str	r3, [r1, #80]	; 0x50
 80073f8:	e001      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d04b      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007414:	d02e      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800741a:	d828      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800741c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007420:	d02a      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007426:	d822      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007428:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800742c:	d026      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800742e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007432:	d81c      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007438:	d010      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800743a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800743e:	d816      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01d      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007448:	d111      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3304      	adds	r3, #4
 800744e:	2101      	movs	r1, #1
 8007450:	4618      	mov	r0, r3
 8007452:	f000 ff7d 	bl	8008350 <RCCEx_PLL2_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800745a:	e012      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3324      	adds	r3, #36	; 0x24
 8007460:	2101      	movs	r1, #1
 8007462:	4618      	mov	r0, r3
 8007464:	f001 f826 	bl	80084b4 <RCCEx_PLL3_Config>
 8007468:	4603      	mov	r3, r0
 800746a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800746c:	e009      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]
      break;
 8007472:	e006      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007474:	bf00      	nop
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007478:	bf00      	nop
 800747a:	e002      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800747c:	bf00      	nop
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007488:	4b2b      	ldr	r3, [pc, #172]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800748a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007496:	4928      	ldr	r1, [pc, #160]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007498:	4313      	orrs	r3, r2
 800749a:	658b      	str	r3, [r1, #88]	; 0x58
 800749c:	e001      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d02f      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b6:	d00e      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80074b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074bc:	d814      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d015      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80074c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074c6:	d10f      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c8:	4b1b      	ldr	r3, [pc, #108]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a1a      	ldr	r2, [pc, #104]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80074d4:	e00c      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	2101      	movs	r1, #1
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 ff37 	bl	8008350 <RCCEx_PLL2_Config>
 80074e2:	4603      	mov	r3, r0
 80074e4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80074e6:	e003      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	75fb      	strb	r3, [r7, #23]
      break;
 80074ec:	e000      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80074ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007502:	490d      	ldr	r1, [pc, #52]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007504:	4313      	orrs	r3, r2
 8007506:	650b      	str	r3, [r1, #80]	; 0x50
 8007508:	e001      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d033      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	2b03      	cmp	r3, #3
 8007520:	d81c      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	08007563 	.word	0x08007563
 800752c:	0800753d 	.word	0x0800753d
 8007530:	0800754b 	.word	0x0800754b
 8007534:	08007563 	.word	0x08007563
 8007538:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753c:	4bb8      	ldr	r3, [pc, #736]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	4ab7      	ldr	r2, [pc, #732]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007548:	e00c      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	2102      	movs	r1, #2
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fefd 	bl	8008350 <RCCEx_PLL2_Config>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800755a:	e003      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
      break;
 8007560:	e000      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d109      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800756a:	4bad      	ldr	r3, [pc, #692]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800756c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756e:	f023 0203 	bic.w	r2, r3, #3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007576:	49aa      	ldr	r1, [pc, #680]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007578:	4313      	orrs	r3, r2
 800757a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800757c:	e001      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 8086 	beq.w	800769c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007590:	4ba4      	ldr	r3, [pc, #656]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4aa3      	ldr	r2, [pc, #652]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800759a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800759c:	f7fa fdac 	bl	80020f8 <HAL_GetTick>
 80075a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075a2:	e009      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a4:	f7fa fda8 	bl	80020f8 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b64      	cmp	r3, #100	; 0x64
 80075b0:	d902      	bls.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	75fb      	strb	r3, [r7, #23]
        break;
 80075b6:	e005      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075b8:	4b9a      	ldr	r3, [pc, #616]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0ef      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d166      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075ca:	4b95      	ldr	r3, [pc, #596]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075d4:	4053      	eors	r3, r2
 80075d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d013      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075de:	4b90      	ldr	r3, [pc, #576]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075e8:	4b8d      	ldr	r3, [pc, #564]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ec:	4a8c      	ldr	r2, [pc, #560]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075f4:	4b8a      	ldr	r3, [pc, #552]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f8:	4a89      	ldr	r2, [pc, #548]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007600:	4a87      	ldr	r2, [pc, #540]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800760c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007610:	d115      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007612:	f7fa fd71 	bl	80020f8 <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007618:	e00b      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800761a:	f7fa fd6d 	bl	80020f8 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	f241 3288 	movw	r2, #5000	; 0x1388
 8007628:	4293      	cmp	r3, r2
 800762a:	d902      	bls.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	75fb      	strb	r3, [r7, #23]
            break;
 8007630:	e005      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007632:	4b7b      	ldr	r3, [pc, #492]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0ed      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d126      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800764a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800764e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007652:	d10d      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007654:	4b72      	ldr	r3, [pc, #456]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007662:	0919      	lsrs	r1, r3, #4
 8007664:	4b70      	ldr	r3, [pc, #448]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007666:	400b      	ands	r3, r1
 8007668:	496d      	ldr	r1, [pc, #436]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800766a:	4313      	orrs	r3, r2
 800766c:	610b      	str	r3, [r1, #16]
 800766e:	e005      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007670:	4b6b      	ldr	r3, [pc, #428]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	4a6a      	ldr	r2, [pc, #424]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007676:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800767a:	6113      	str	r3, [r2, #16]
 800767c:	4b68      	ldr	r3, [pc, #416]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800767e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800768a:	4965      	ldr	r1, [pc, #404]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800768c:	4313      	orrs	r3, r2
 800768e:	670b      	str	r3, [r1, #112]	; 0x70
 8007690:	e004      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	75bb      	strb	r3, [r7, #22]
 8007696:	e001      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d07e      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ac:	2b28      	cmp	r3, #40	; 0x28
 80076ae:	d867      	bhi.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80076b0:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	08007787 	.word	0x08007787
 80076bc:	08007781 	.word	0x08007781
 80076c0:	08007781 	.word	0x08007781
 80076c4:	08007781 	.word	0x08007781
 80076c8:	08007781 	.word	0x08007781
 80076cc:	08007781 	.word	0x08007781
 80076d0:	08007781 	.word	0x08007781
 80076d4:	08007781 	.word	0x08007781
 80076d8:	0800775d 	.word	0x0800775d
 80076dc:	08007781 	.word	0x08007781
 80076e0:	08007781 	.word	0x08007781
 80076e4:	08007781 	.word	0x08007781
 80076e8:	08007781 	.word	0x08007781
 80076ec:	08007781 	.word	0x08007781
 80076f0:	08007781 	.word	0x08007781
 80076f4:	08007781 	.word	0x08007781
 80076f8:	0800776f 	.word	0x0800776f
 80076fc:	08007781 	.word	0x08007781
 8007700:	08007781 	.word	0x08007781
 8007704:	08007781 	.word	0x08007781
 8007708:	08007781 	.word	0x08007781
 800770c:	08007781 	.word	0x08007781
 8007710:	08007781 	.word	0x08007781
 8007714:	08007781 	.word	0x08007781
 8007718:	08007787 	.word	0x08007787
 800771c:	08007781 	.word	0x08007781
 8007720:	08007781 	.word	0x08007781
 8007724:	08007781 	.word	0x08007781
 8007728:	08007781 	.word	0x08007781
 800772c:	08007781 	.word	0x08007781
 8007730:	08007781 	.word	0x08007781
 8007734:	08007781 	.word	0x08007781
 8007738:	08007787 	.word	0x08007787
 800773c:	08007781 	.word	0x08007781
 8007740:	08007781 	.word	0x08007781
 8007744:	08007781 	.word	0x08007781
 8007748:	08007781 	.word	0x08007781
 800774c:	08007781 	.word	0x08007781
 8007750:	08007781 	.word	0x08007781
 8007754:	08007781 	.word	0x08007781
 8007758:	08007787 	.word	0x08007787
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3304      	adds	r3, #4
 8007760:	2101      	movs	r1, #1
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fdf4 	bl	8008350 <RCCEx_PLL2_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800776c:	e00c      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3324      	adds	r3, #36	; 0x24
 8007772:	2101      	movs	r1, #1
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fe9d 	bl	80084b4 <RCCEx_PLL3_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800777e:	e003      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	75fb      	strb	r3, [r7, #23]
      break;
 8007784:	e000      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800778e:	4b24      	ldr	r3, [pc, #144]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007792:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800779a:	4921      	ldr	r1, [pc, #132]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800779c:	4313      	orrs	r3, r2
 800779e:	654b      	str	r3, [r1, #84]	; 0x54
 80077a0:	e001      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d03e      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b6:	2b05      	cmp	r3, #5
 80077b8:	d820      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	08007803 	.word	0x08007803
 80077c4:	080077d9 	.word	0x080077d9
 80077c8:	080077eb 	.word	0x080077eb
 80077cc:	08007803 	.word	0x08007803
 80077d0:	08007803 	.word	0x08007803
 80077d4:	08007803 	.word	0x08007803
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3304      	adds	r3, #4
 80077dc:	2101      	movs	r1, #1
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fdb6 	bl	8008350 <RCCEx_PLL2_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077e8:	e00c      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3324      	adds	r3, #36	; 0x24
 80077ee:	2101      	movs	r1, #1
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fe5f 	bl	80084b4 <RCCEx_PLL3_Config>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077fa:	e003      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007800:	e000      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d110      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800780a:	4b05      	ldr	r3, [pc, #20]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800780c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780e:	f023 0207 	bic.w	r2, r3, #7
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007816:	4902      	ldr	r1, [pc, #8]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007818:	4313      	orrs	r3, r2
 800781a:	654b      	str	r3, [r1, #84]	; 0x54
 800781c:	e008      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800781e:	bf00      	nop
 8007820:	58024400 	.word	0x58024400
 8007824:	58024800 	.word	0x58024800
 8007828:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d039      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007842:	2b05      	cmp	r3, #5
 8007844:	d820      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	0800788f 	.word	0x0800788f
 8007850:	08007865 	.word	0x08007865
 8007854:	08007877 	.word	0x08007877
 8007858:	0800788f 	.word	0x0800788f
 800785c:	0800788f 	.word	0x0800788f
 8007860:	0800788f 	.word	0x0800788f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3304      	adds	r3, #4
 8007868:	2101      	movs	r1, #1
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fd70 	bl	8008350 <RCCEx_PLL2_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007874:	e00c      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3324      	adds	r3, #36	; 0x24
 800787a:	2101      	movs	r1, #1
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fe19 	bl	80084b4 <RCCEx_PLL3_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007886:	e003      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
      break;
 800788c:	e000      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800788e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10a      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007896:	4bb7      	ldr	r3, [pc, #732]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789a:	f023 0207 	bic.w	r2, r3, #7
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a4:	49b3      	ldr	r1, [pc, #716]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	658b      	str	r3, [r1, #88]	; 0x58
 80078aa:	e001      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0320 	and.w	r3, r3, #32
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d04b      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c6:	d02e      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80078c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078cc:	d828      	bhi.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d2:	d02a      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d8:	d822      	bhi.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078de:	d026      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80078e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078e4:	d81c      	bhi.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ea:	d010      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80078ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f0:	d816      	bhi.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d01d      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80078f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078fa:	d111      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	2100      	movs	r1, #0
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fd24 	bl	8008350 <RCCEx_PLL2_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800790c:	e012      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3324      	adds	r3, #36	; 0x24
 8007912:	2102      	movs	r1, #2
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fdcd 	bl	80084b4 <RCCEx_PLL3_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800791e:	e009      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	75fb      	strb	r3, [r7, #23]
      break;
 8007924:	e006      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007926:	bf00      	nop
 8007928:	e004      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800792a:	bf00      	nop
 800792c:	e002      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800792e:	bf00      	nop
 8007930:	e000      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800793a:	4b8e      	ldr	r3, [pc, #568]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800793c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007948:	498a      	ldr	r1, [pc, #552]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800794a:	4313      	orrs	r3, r2
 800794c:	654b      	str	r3, [r1, #84]	; 0x54
 800794e:	e001      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d04b      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007966:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800796a:	d02e      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800796c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007970:	d828      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007976:	d02a      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800797c:	d822      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800797e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007982:	d026      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007988:	d81c      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800798a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800798e:	d010      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007994:	d816      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01d      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800799a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800799e:	d111      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3304      	adds	r3, #4
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fcd2 	bl	8008350 <RCCEx_PLL2_Config>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079b0:	e012      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	3324      	adds	r3, #36	; 0x24
 80079b6:	2102      	movs	r1, #2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fd7b 	bl	80084b4 <RCCEx_PLL3_Config>
 80079be:	4603      	mov	r3, r0
 80079c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079c2:	e009      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	75fb      	strb	r3, [r7, #23]
      break;
 80079c8:	e006      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079ca:	bf00      	nop
 80079cc:	e004      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079ce:	bf00      	nop
 80079d0:	e002      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079d2:	bf00      	nop
 80079d4:	e000      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10a      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079de:	4b65      	ldr	r3, [pc, #404]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079ec:	4961      	ldr	r1, [pc, #388]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	658b      	str	r3, [r1, #88]	; 0x58
 80079f2:	e001      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d04b      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a0e:	d02e      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007a10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a14:	d828      	bhi.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1a:	d02a      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a20:	d822      	bhi.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a26:	d026      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007a28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a2c:	d81c      	bhi.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a32:	d010      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a38:	d816      	bhi.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d01d      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a42:	d111      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3304      	adds	r3, #4
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fc80 	bl	8008350 <RCCEx_PLL2_Config>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a54:	e012      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3324      	adds	r3, #36	; 0x24
 8007a5a:	2102      	movs	r1, #2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fd29 	bl	80084b4 <RCCEx_PLL3_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a66:	e009      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6c:	e006      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a6e:	bf00      	nop
 8007a70:	e004      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a72:	bf00      	nop
 8007a74:	e002      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a76:	bf00      	nop
 8007a78:	e000      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a82:	4b3c      	ldr	r3, [pc, #240]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a90:	4938      	ldr	r1, [pc, #224]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	658b      	str	r3, [r1, #88]	; 0x58
 8007a96:	e001      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01a      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab2:	d10a      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3324      	adds	r3, #36	; 0x24
 8007ab8:	2102      	movs	r1, #2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fcfa 	bl	80084b4 <RCCEx_PLL3_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007aca:	4b2a      	ldr	r3, [pc, #168]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ace:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad8:	4926      	ldr	r1, [pc, #152]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0310 	and.w	r3, r3, #16
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d01a      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af4:	d10a      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3324      	adds	r3, #36	; 0x24
 8007afa:	2102      	movs	r1, #2
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fcd9 	bl	80084b4 <RCCEx_PLL3_Config>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b0c:	4b19      	ldr	r3, [pc, #100]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b1a:	4916      	ldr	r1, [pc, #88]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d036      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b36:	d01f      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b3c:	d817      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b46:	d009      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007b48:	e011      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	2100      	movs	r1, #0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fbfd 	bl	8008350 <RCCEx_PLL2_Config>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b5a:	e00e      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	2102      	movs	r1, #2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fca6 	bl	80084b4 <RCCEx_PLL3_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b6c:	e005      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	75fb      	strb	r3, [r7, #23]
      break;
 8007b72:	e002      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007b74:	58024400 	.word	0x58024400
      break;
 8007b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b80:	4b93      	ldr	r3, [pc, #588]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b8e:	4990      	ldr	r1, [pc, #576]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	658b      	str	r3, [r1, #88]	; 0x58
 8007b94:	e001      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d033      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bb0:	d01c      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007bb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bb6:	d816      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bbc:	d003      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bc2:	d007      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007bc4:	e00f      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc6:	4b82      	ldr	r3, [pc, #520]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	4a81      	ldr	r2, [pc, #516]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007bd2:	e00c      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3324      	adds	r3, #36	; 0x24
 8007bd8:	2101      	movs	r1, #1
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fc6a 	bl	80084b4 <RCCEx_PLL3_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007be4:	e003      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bea:	e000      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10a      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bf4:	4b76      	ldr	r3, [pc, #472]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c02:	4973      	ldr	r1, [pc, #460]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	654b      	str	r3, [r1, #84]	; 0x54
 8007c08:	e001      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d029      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c26:	d007      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007c28:	e00f      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c2a:	4b69      	ldr	r3, [pc, #420]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	4a68      	ldr	r2, [pc, #416]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c36:	e00b      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	2102      	movs	r1, #2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fb86 	bl	8008350 <RCCEx_PLL2_Config>
 8007c44:	4603      	mov	r3, r0
 8007c46:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c48:	e002      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c56:	4b5e      	ldr	r3, [pc, #376]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c62:	495b      	ldr	r1, [pc, #364]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c68:	e001      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3324      	adds	r3, #36	; 0x24
 8007c7e:	2102      	movs	r1, #2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fc17 	bl	80084b4 <RCCEx_PLL3_Config>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d030      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ca4:	d017      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007caa:	d811      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb0:	d013      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb6:	d80b      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d010      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc0:	d106      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc2:	4b43      	ldr	r3, [pc, #268]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	4a42      	ldr	r2, [pc, #264]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007cce:	e007      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd4:	e004      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007cd6:	bf00      	nop
 8007cd8:	e002      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007cda:	bf00      	nop
 8007cdc:	e000      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ce6:	4b3a      	ldr	r3, [pc, #232]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf2:	4937      	ldr	r1, [pc, #220]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	654b      	str	r3, [r1, #84]	; 0x54
 8007cf8:	e001      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d008      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d0a:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	492e      	ldr	r1, [pc, #184]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d009      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007d28:	4b29      	ldr	r3, [pc, #164]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d36:	4926      	ldr	r1, [pc, #152]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d008      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d48:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d54:	491e      	ldr	r1, [pc, #120]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00d      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d66:	4b1a      	ldr	r3, [pc, #104]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	4a19      	ldr	r2, [pc, #100]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d70:	6113      	str	r3, [r2, #16]
 8007d72:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007d7c:	4914      	ldr	r1, [pc, #80]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	da08      	bge.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d8a:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d96:	490e      	ldr	r1, [pc, #56]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d009      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007da8:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db6:	4906      	ldr	r1, [pc, #24]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007dbc:	7dbb      	ldrb	r3, [r7, #22]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e000      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	58024400 	.word	0x58024400

08007dd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007dd8:	f7ff f860 	bl	8006e9c <HAL_RCC_GetHCLKFreq>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	091b      	lsrs	r3, r3, #4
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	4904      	ldr	r1, [pc, #16]	; (8007dfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007dea:	5ccb      	ldrb	r3, [r1, r3]
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	0800d2b0 	.word	0x0800d2b0

08007e00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b089      	sub	sp, #36	; 0x24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e08:	4ba1      	ldr	r3, [pc, #644]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007e12:	4b9f      	ldr	r3, [pc, #636]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e16:	0b1b      	lsrs	r3, r3, #12
 8007e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007e1e:	4b9c      	ldr	r3, [pc, #624]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	091b      	lsrs	r3, r3, #4
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007e2a:	4b99      	ldr	r3, [pc, #612]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2e:	08db      	lsrs	r3, r3, #3
 8007e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8111 	beq.w	8008070 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	f000 8083 	beq.w	8007f5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	f200 80a1 	bhi.w	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d056      	beq.n	8007f18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e6a:	e099      	b.n	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e6c:	4b88      	ldr	r3, [pc, #544]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d02d      	beq.n	8007ed4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e78:	4b85      	ldr	r3, [pc, #532]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	08db      	lsrs	r3, r3, #3
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	4a84      	ldr	r2, [pc, #528]	; (8008094 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e84:	fa22 f303 	lsr.w	r3, r2, r3
 8007e88:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	ee07 3a90 	vmov	s15, r3
 8007e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea2:	4b7b      	ldr	r3, [pc, #492]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ece:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ed2:	e087      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ede:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800809c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee6:	4b6a      	ldr	r3, [pc, #424]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007efa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f16:	e065      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2a:	4b59      	ldr	r3, [pc, #356]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f5a:	e043      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80080a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6e:	4b48      	ldr	r3, [pc, #288]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f9e:	e021      	b.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007faa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb2:	4b37      	ldr	r3, [pc, #220]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fe2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007fe4:	4b2a      	ldr	r3, [pc, #168]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	0a5b      	lsrs	r3, r3, #9
 8007fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ffe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800800a:	ee17 2a90 	vmov	r2, s15
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008012:	4b1f      	ldr	r3, [pc, #124]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	0c1b      	lsrs	r3, r3, #16
 8008018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800802c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008038:	ee17 2a90 	vmov	r2, s15
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008040:	4b13      	ldr	r3, [pc, #76]	; (8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008044:	0e1b      	lsrs	r3, r3, #24
 8008046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800805a:	edd7 6a07 	vldr	s13, [r7, #28]
 800805e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008066:	ee17 2a90 	vmov	r2, s15
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800806e:	e008      	b.n	8008082 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	609a      	str	r2, [r3, #8]
}
 8008082:	bf00      	nop
 8008084:	3724      	adds	r7, #36	; 0x24
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	58024400 	.word	0x58024400
 8008094:	03d09000 	.word	0x03d09000
 8008098:	46000000 	.word	0x46000000
 800809c:	4c742400 	.word	0x4c742400
 80080a0:	4a742400 	.word	0x4a742400
 80080a4:	4af42400 	.word	0x4af42400

080080a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b089      	sub	sp, #36	; 0x24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080b0:	4ba1      	ldr	r3, [pc, #644]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80080ba:	4b9f      	ldr	r3, [pc, #636]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	0d1b      	lsrs	r3, r3, #20
 80080c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80080c6:	4b9c      	ldr	r3, [pc, #624]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ca:	0a1b      	lsrs	r3, r3, #8
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80080d2:	4b99      	ldr	r3, [pc, #612]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d6:	08db      	lsrs	r3, r3, #3
 80080d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	fb02 f303 	mul.w	r3, r2, r3
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 8111 	beq.w	8008318 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	f000 8083 	beq.w	8008204 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b02      	cmp	r3, #2
 8008102:	f200 80a1 	bhi.w	8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d056      	beq.n	80081c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008112:	e099      	b.n	8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008114:	4b88      	ldr	r3, [pc, #544]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	d02d      	beq.n	800817c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008120:	4b85      	ldr	r3, [pc, #532]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	08db      	lsrs	r3, r3, #3
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	4a84      	ldr	r2, [pc, #528]	; (800833c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800812c:	fa22 f303 	lsr.w	r3, r2, r3
 8008130:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	ee07 3a90 	vmov	s15, r3
 8008138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814a:	4b7b      	ldr	r3, [pc, #492]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815a:	ed97 6a03 	vldr	s12, [r7, #12]
 800815e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008176:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800817a:	e087      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008186:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008344 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800818a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818e:	4b6a      	ldr	r3, [pc, #424]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819e:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081be:	e065      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d2:	4b59      	ldr	r3, [pc, #356]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008202:	e043      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800834c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008216:	4b48      	ldr	r3, [pc, #288]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008226:	ed97 6a03 	vldr	s12, [r7, #12]
 800822a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800822e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800823a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800823e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008246:	e021      	b.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825a:	4b37      	ldr	r3, [pc, #220]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826a:	ed97 6a03 	vldr	s12, [r7, #12]
 800826e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800827e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008286:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800828a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800828c:	4b2a      	ldr	r3, [pc, #168]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	0a5b      	lsrs	r3, r3, #9
 8008292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082b2:	ee17 2a90 	vmov	r2, s15
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80082ba:	4b1f      	ldr	r3, [pc, #124]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c4:	ee07 3a90 	vmov	s15, r3
 80082c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80082d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082e0:	ee17 2a90 	vmov	r2, s15
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80082e8:	4b13      	ldr	r3, [pc, #76]	; (8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	0e1b      	lsrs	r3, r3, #24
 80082ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008302:	edd7 6a07 	vldr	s13, [r7, #28]
 8008306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800830a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800830e:	ee17 2a90 	vmov	r2, s15
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008316:	e008      	b.n	800832a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	609a      	str	r2, [r3, #8]
}
 800832a:	bf00      	nop
 800832c:	3724      	adds	r7, #36	; 0x24
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	58024400 	.word	0x58024400
 800833c:	03d09000 	.word	0x03d09000
 8008340:	46000000 	.word	0x46000000
 8008344:	4c742400 	.word	0x4c742400
 8008348:	4a742400 	.word	0x4a742400
 800834c:	4af42400 	.word	0x4af42400

08008350 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800835e:	4b53      	ldr	r3, [pc, #332]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b03      	cmp	r3, #3
 8008368:	d101      	bne.n	800836e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e099      	b.n	80084a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800836e:	4b4f      	ldr	r3, [pc, #316]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a4e      	ldr	r2, [pc, #312]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008374:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800837a:	f7f9 febd 	bl	80020f8 <HAL_GetTick>
 800837e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008380:	e008      	b.n	8008394 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008382:	f7f9 feb9 	bl	80020f8 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b02      	cmp	r3, #2
 800838e:	d901      	bls.n	8008394 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e086      	b.n	80084a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008394:	4b45      	ldr	r3, [pc, #276]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1f0      	bne.n	8008382 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80083a0:	4b42      	ldr	r3, [pc, #264]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	031b      	lsls	r3, r3, #12
 80083ae:	493f      	ldr	r1, [pc, #252]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	628b      	str	r3, [r1, #40]	; 0x28
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	025b      	lsls	r3, r3, #9
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	431a      	orrs	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	041b      	lsls	r3, r3, #16
 80083d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	3b01      	subs	r3, #1
 80083de:	061b      	lsls	r3, r3, #24
 80083e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083e4:	4931      	ldr	r1, [pc, #196]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80083ea:	4b30      	ldr	r3, [pc, #192]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	492d      	ldr	r1, [pc, #180]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083fc:	4b2b      	ldr	r3, [pc, #172]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	f023 0220 	bic.w	r2, r3, #32
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	4928      	ldr	r1, [pc, #160]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 800840a:	4313      	orrs	r3, r2
 800840c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800840e:	4b27      	ldr	r3, [pc, #156]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008412:	4a26      	ldr	r2, [pc, #152]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008414:	f023 0310 	bic.w	r3, r3, #16
 8008418:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800841a:	4b24      	ldr	r3, [pc, #144]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 800841c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800841e:	4b24      	ldr	r3, [pc, #144]	; (80084b0 <RCCEx_PLL2_Config+0x160>)
 8008420:	4013      	ands	r3, r2
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	69d2      	ldr	r2, [r2, #28]
 8008426:	00d2      	lsls	r2, r2, #3
 8008428:	4920      	ldr	r1, [pc, #128]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 800842a:	4313      	orrs	r3, r2
 800842c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800842e:	4b1f      	ldr	r3, [pc, #124]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008432:	4a1e      	ldr	r2, [pc, #120]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008434:	f043 0310 	orr.w	r3, r3, #16
 8008438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d106      	bne.n	800844e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008440:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	4a19      	ldr	r2, [pc, #100]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800844a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800844c:	e00f      	b.n	800846e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d106      	bne.n	8008462 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008454:	4b15      	ldr	r3, [pc, #84]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	4a14      	ldr	r2, [pc, #80]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 800845a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800845e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008460:	e005      	b.n	800846e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008462:	4b12      	ldr	r3, [pc, #72]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	4a11      	ldr	r2, [pc, #68]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800846c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800846e:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a0e      	ldr	r2, [pc, #56]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800847a:	f7f9 fe3d 	bl	80020f8 <HAL_GetTick>
 800847e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008480:	e008      	b.n	8008494 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008482:	f7f9 fe39 	bl	80020f8 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b02      	cmp	r3, #2
 800848e:	d901      	bls.n	8008494 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e006      	b.n	80084a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <RCCEx_PLL2_Config+0x15c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d0f0      	beq.n	8008482 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	58024400 	.word	0x58024400
 80084b0:	ffff0007 	.word	0xffff0007

080084b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084c2:	4b53      	ldr	r3, [pc, #332]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80084c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c6:	f003 0303 	and.w	r3, r3, #3
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d101      	bne.n	80084d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e099      	b.n	8008606 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80084d2:	4b4f      	ldr	r3, [pc, #316]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a4e      	ldr	r2, [pc, #312]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80084d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084de:	f7f9 fe0b 	bl	80020f8 <HAL_GetTick>
 80084e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084e4:	e008      	b.n	80084f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80084e6:	f7f9 fe07 	bl	80020f8 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d901      	bls.n	80084f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e086      	b.n	8008606 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084f8:	4b45      	ldr	r3, [pc, #276]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1f0      	bne.n	80084e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008504:	4b42      	ldr	r3, [pc, #264]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	051b      	lsls	r3, r3, #20
 8008512:	493f      	ldr	r1, [pc, #252]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008514:	4313      	orrs	r3, r2
 8008516:	628b      	str	r3, [r1, #40]	; 0x28
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	3b01      	subs	r3, #1
 800851e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	3b01      	subs	r3, #1
 8008528:	025b      	lsls	r3, r3, #9
 800852a:	b29b      	uxth	r3, r3
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	3b01      	subs	r3, #1
 8008534:	041b      	lsls	r3, r3, #16
 8008536:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	3b01      	subs	r3, #1
 8008542:	061b      	lsls	r3, r3, #24
 8008544:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008548:	4931      	ldr	r1, [pc, #196]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 800854a:	4313      	orrs	r3, r2
 800854c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800854e:	4b30      	ldr	r3, [pc, #192]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	492d      	ldr	r1, [pc, #180]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 800855c:	4313      	orrs	r3, r2
 800855e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008560:	4b2b      	ldr	r3, [pc, #172]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	4928      	ldr	r1, [pc, #160]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 800856e:	4313      	orrs	r3, r2
 8008570:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008572:	4b27      	ldr	r3, [pc, #156]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	4a26      	ldr	r2, [pc, #152]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800857c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800857e:	4b24      	ldr	r3, [pc, #144]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008582:	4b24      	ldr	r3, [pc, #144]	; (8008614 <RCCEx_PLL3_Config+0x160>)
 8008584:	4013      	ands	r3, r2
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	69d2      	ldr	r2, [r2, #28]
 800858a:	00d2      	lsls	r2, r2, #3
 800858c:	4920      	ldr	r1, [pc, #128]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 800858e:	4313      	orrs	r3, r2
 8008590:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008592:	4b1f      	ldr	r3, [pc, #124]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 8008598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800859c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d106      	bne.n	80085b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80085a4:	4b1a      	ldr	r3, [pc, #104]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	4a19      	ldr	r2, [pc, #100]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085b0:	e00f      	b.n	80085d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d106      	bne.n	80085c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80085b8:	4b15      	ldr	r3, [pc, #84]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	4a14      	ldr	r2, [pc, #80]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085c4:	e005      	b.n	80085d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80085c6:	4b12      	ldr	r3, [pc, #72]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ca:	4a11      	ldr	r2, [pc, #68]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80085d2:	4b0f      	ldr	r3, [pc, #60]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a0e      	ldr	r2, [pc, #56]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085de:	f7f9 fd8b 	bl	80020f8 <HAL_GetTick>
 80085e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085e4:	e008      	b.n	80085f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085e6:	f7f9 fd87 	bl	80020f8 <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d901      	bls.n	80085f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e006      	b.n	8008606 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <RCCEx_PLL3_Config+0x15c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0f0      	beq.n	80085e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	58024400 	.word	0x58024400
 8008614:	ffff0007 	.word	0xffff0007

08008618 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d067      	beq.n	80086fa <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7f9 f958 	bl	80018f4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	22ca      	movs	r2, #202	; 0xca
 8008652:	625a      	str	r2, [r3, #36]	; 0x24
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2253      	movs	r2, #83	; 0x53
 800865a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fbd1 	bl	8008e04 <RTC_EnterInitMode>
 8008662:	4603      	mov	r3, r0
 8008664:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d13b      	bne.n	80086e4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6899      	ldr	r1, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	4b23      	ldr	r3, [pc, #140]	; (8008704 <HAL_RTC_Init+0xec>)
 8008678:	400b      	ands	r3, r1
 800867a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6899      	ldr	r1, [r3, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	0419      	lsls	r1, r3, #16
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fbd9 	bl	8008e64 <RTC_ExitInitMode>
 80086b2:	4603      	mov	r3, r0
 80086b4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d113      	bne.n	80086e4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0203 	bic.w	r2, r2, #3
 80086ca:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	69da      	ldr	r2, [r3, #28]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	430a      	orrs	r2, r1
 80086e2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	22ff      	movs	r2, #255	; 0xff
 80086ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d103      	bne.n	80086fa <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	ff8fffbf 	.word	0xff8fffbf

08008708 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008708:	b590      	push	{r4, r7, lr}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <HAL_RTC_SetTime+0x1a>
 800871e:	2302      	movs	r3, #2
 8008720:	e089      	b.n	8008836 <HAL_RTC_SetTime+0x12e>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2202      	movs	r2, #2
 800872e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	22ca      	movs	r2, #202	; 0xca
 8008738:	625a      	str	r2, [r3, #36]	; 0x24
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2253      	movs	r2, #83	; 0x53
 8008740:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 fb5e 	bl	8008e04 <RTC_EnterInitMode>
 8008748:	4603      	mov	r3, r0
 800874a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800874c:	7cfb      	ldrb	r3, [r7, #19]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d161      	bne.n	8008816 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d126      	bne.n	80087a6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	d102      	bne.n	800876c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2200      	movs	r2, #0
 800876a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 fbb5 	bl	8008ee0 <RTC_ByteToBcd2>
 8008776:	4603      	mov	r3, r0
 8008778:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	785b      	ldrb	r3, [r3, #1]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fbae 	bl	8008ee0 <RTC_ByteToBcd2>
 8008784:	4603      	mov	r3, r0
 8008786:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008788:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	789b      	ldrb	r3, [r3, #2]
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fba6 	bl	8008ee0 <RTC_ByteToBcd2>
 8008794:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008796:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	78db      	ldrb	r3, [r3, #3]
 800879e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087a0:	4313      	orrs	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	e018      	b.n	80087d8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087c6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087cc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	78db      	ldrb	r3, [r3, #3]
 80087d2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087d4:	4313      	orrs	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	6979      	ldr	r1, [r7, #20]
 80087de:	4b18      	ldr	r3, [pc, #96]	; (8008840 <HAL_RTC_SetTime+0x138>)
 80087e0:	400b      	ands	r3, r1
 80087e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80087f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6899      	ldr	r1, [r3, #8]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	431a      	orrs	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 fb29 	bl	8008e64 <RTC_ExitInitMode>
 8008812:	4603      	mov	r3, r0
 8008814:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	22ff      	movs	r2, #255	; 0xff
 800881c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800881e:	7cfb      	ldrb	r3, [r7, #19]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d103      	bne.n	800882c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008834:	7cfb      	ldrb	r3, [r7, #19]
}
 8008836:	4618      	mov	r0, r3
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	bd90      	pop	{r4, r7, pc}
 800883e:	bf00      	nop
 8008840:	007f7f7f 	.word	0x007f7f7f

08008844 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b22      	ldr	r3, [pc, #136]	; (80088f8 <HAL_RTC_GetTime+0xb4>)
 8008870:	4013      	ands	r3, r2
 8008872:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	0c1b      	lsrs	r3, r3, #16
 8008878:	b2db      	uxtb	r3, r3
 800887a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800887e:	b2da      	uxtb	r2, r3
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	0a1b      	lsrs	r3, r3, #8
 8008888:	b2db      	uxtb	r3, r3
 800888a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888e:	b2da      	uxtb	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800889c:	b2da      	uxtb	r2, r3
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	0d9b      	lsrs	r3, r3, #22
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d11a      	bne.n	80088ee <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fb2f 	bl	8008f20 <RTC_Bcd2ToByte>
 80088c2:	4603      	mov	r3, r0
 80088c4:	461a      	mov	r2, r3
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fb26 	bl	8008f20 <RTC_Bcd2ToByte>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	789b      	ldrb	r3, [r3, #2]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fb1d 	bl	8008f20 <RTC_Bcd2ToByte>
 80088e6:	4603      	mov	r3, r0
 80088e8:	461a      	mov	r2, r3
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3718      	adds	r7, #24
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	007f7f7f 	.word	0x007f7f7f

080088fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80088fc:	b590      	push	{r4, r7, lr}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_RTC_SetDate+0x1a>
 8008912:	2302      	movs	r3, #2
 8008914:	e073      	b.n	80089fe <HAL_RTC_SetDate+0x102>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2202      	movs	r2, #2
 8008922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10e      	bne.n	800894a <HAL_RTC_SetDate+0x4e>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	785b      	ldrb	r3, [r3, #1]
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	2b00      	cmp	r3, #0
 8008936:	d008      	beq.n	800894a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	f023 0310 	bic.w	r3, r3, #16
 8008940:	b2db      	uxtb	r3, r3
 8008942:	330a      	adds	r3, #10
 8008944:	b2da      	uxtb	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d11c      	bne.n	800898a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	78db      	ldrb	r3, [r3, #3]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fac3 	bl	8008ee0 <RTC_ByteToBcd2>
 800895a:	4603      	mov	r3, r0
 800895c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fabc 	bl	8008ee0 <RTC_ByteToBcd2>
 8008968:	4603      	mov	r3, r0
 800896a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800896c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	789b      	ldrb	r3, [r3, #2]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fab4 	bl	8008ee0 <RTC_ByteToBcd2>
 8008978:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800897a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008984:	4313      	orrs	r3, r2
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e00e      	b.n	80089a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	78db      	ldrb	r3, [r3, #3]
 800898e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008996:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800899c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80089a4:	4313      	orrs	r3, r2
 80089a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	22ca      	movs	r2, #202	; 0xca
 80089ae:	625a      	str	r2, [r3, #36]	; 0x24
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2253      	movs	r2, #83	; 0x53
 80089b6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fa23 	bl	8008e04 <RTC_EnterInitMode>
 80089be:	4603      	mov	r3, r0
 80089c0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80089c2:	7cfb      	ldrb	r3, [r7, #19]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	6979      	ldr	r1, [r7, #20]
 80089ce:	4b0e      	ldr	r3, [pc, #56]	; (8008a08 <HAL_RTC_SetDate+0x10c>)
 80089d0:	400b      	ands	r3, r1
 80089d2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 fa45 	bl	8008e64 <RTC_ExitInitMode>
 80089da:	4603      	mov	r3, r0
 80089dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	22ff      	movs	r2, #255	; 0xff
 80089e4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80089e6:	7cfb      	ldrb	r3, [r7, #19]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d103      	bne.n	80089f4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80089fc:	7cfb      	ldrb	r3, [r7, #19]


}
 80089fe:	4618      	mov	r0, r3
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd90      	pop	{r4, r7, pc}
 8008a06:	bf00      	nop
 8008a08:	00ffff3f 	.word	0x00ffff3f

08008a0c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	4b21      	ldr	r3, [pc, #132]	; (8008aa4 <HAL_RTC_GetDate+0x98>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	0a1b      	lsrs	r3, r3, #8
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	0b5b      	lsrs	r3, r3, #13
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d11a      	bne.n	8008a98 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	78db      	ldrb	r3, [r3, #3]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fa5a 	bl	8008f20 <RTC_Bcd2ToByte>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461a      	mov	r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	785b      	ldrb	r3, [r3, #1]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fa51 	bl	8008f20 <RTC_Bcd2ToByte>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	461a      	mov	r2, r3
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	789b      	ldrb	r3, [r3, #2]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fa48 	bl	8008f20 <RTC_Bcd2ToByte>
 8008a90:	4603      	mov	r3, r0
 8008a92:	461a      	mov	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	00ffff3f 	.word	0x00ffff3f

08008aa8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008aa8:	b590      	push	{r4, r7, lr}
 8008aaa:	b089      	sub	sp, #36	; 0x24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <HAL_RTC_SetAlarm_IT+0x1a>
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e123      	b.n	8008d0a <HAL_RTC_SetAlarm_IT+0x262>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2202      	movs	r2, #2
 8008ace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d137      	bne.n	8008b48 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f9f5 	bl	8008ee0 <RTC_ByteToBcd2>
 8008af6:	4603      	mov	r3, r0
 8008af8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f9ee 	bl	8008ee0 <RTC_ByteToBcd2>
 8008b04:	4603      	mov	r3, r0
 8008b06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b08:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	789b      	ldrb	r3, [r3, #2]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f9e6 	bl	8008ee0 <RTC_ByteToBcd2>
 8008b14:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b16:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	78db      	ldrb	r3, [r3, #3]
 8008b1e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008b20:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f9d8 	bl	8008ee0 <RTC_ByteToBcd2>
 8008b30:	4603      	mov	r3, r0
 8008b32:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008b34:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008b3c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b42:	4313      	orrs	r3, r2
 8008b44:	61fb      	str	r3, [r7, #28]
 8008b46:	e023      	b.n	8008b90 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d102      	bne.n	8008b5c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	785b      	ldrb	r3, [r3, #1]
 8008b66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008b68:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008b6e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	78db      	ldrb	r3, [r3, #3]
 8008b74:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008b76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b7e:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008b80:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008b86:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	22ca      	movs	r2, #202	; 0xca
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2253      	movs	r2, #83	; 0x53
 8008baa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb4:	d14a      	bne.n	8008c4c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bc4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008bd6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008bd8:	f7f9 fa8e 	bl	80020f8 <HAL_GetTick>
 8008bdc:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008bde:	e015      	b.n	8008c0c <HAL_RTC_SetAlarm_IT+0x164>
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008be0:	f7f9 fa8a 	bl	80020f8 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bee:	d90d      	bls.n	8008c0c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	22ff      	movs	r2, #255	; 0xff
 8008bf6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e07e      	b.n	8008d0a <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0e2      	beq.n	8008be0 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c38:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c48:	609a      	str	r2, [r3, #8]
 8008c4a:	e049      	b.n	8008ce0 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c5a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008c6c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008c6e:	f7f9 fa43 	bl	80020f8 <HAL_GetTick>
 8008c72:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008c74:	e015      	b.n	8008ca2 <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c76:	f7f9 fa3f 	bl	80020f8 <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c84:	d90d      	bls.n	8008ca2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	22ff      	movs	r2, #255	; 0xff
 8008c8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2203      	movs	r2, #3
 8008c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e033      	b.n	8008d0a <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0e2      	beq.n	8008c76 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cce:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cde:	609a      	str	r2, [r3, #8]
#if !defined(DUAL_CORE)
  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cee:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	22ff      	movs	r2, #255	; 0xff
 8008cf6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3724      	adds	r7, #36	; 0x24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd90      	pop	{r4, r7, pc}
	...

08008d14 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
#if defined(DUAL_CORE)
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8008d1c:	f7f9 fb4c 	bl	80023b8 <HAL_GetCurrentCPUID>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d104      	bne.n	8008d30 <HAL_RTC_AlarmIRQHandler+0x1c>
  {
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008d26:	4b22      	ldr	r3, [pc, #136]	; (8008db0 <HAL_RTC_AlarmIRQHandler+0x9c>)
 8008d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d2c:	609a      	str	r2, [r3, #8]
 8008d2e:	e003      	b.n	8008d38 <HAL_RTC_AlarmIRQHandler+0x24>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
 8008d30:	4b20      	ldr	r3, [pc, #128]	; (8008db4 <HAL_RTC_AlarmIRQHandler+0xa0>)
 8008d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d36:	609a      	str	r2, [r3, #8]
  }
#endif /* RTC_MISR_ALRBMF */

#if defined(RTC_ISR_ALRAF)
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d012      	beq.n	8008d6c <HAL_RTC_AlarmIRQHandler+0x58>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <HAL_RTC_AlarmIRQHandler+0x58>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008d64:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7f8 fc94 	bl	8001694 <HAL_RTC_AlarmAEventCallback>
  }
#endif /* RTC_ISR_ALRAF */

#if defined(RTC_ISR_ALRBF)
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d012      	beq.n	8008da0 <HAL_RTC_AlarmIRQHandler+0x8c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00b      	beq.n	8008da0 <HAL_RTC_AlarmIRQHandler+0x8c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008d98:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f8da 	bl	8008f54 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	58000080 	.word	0x58000080
 8008db4:	580000c0 	.word	0x580000c0

08008db8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008dce:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008dd0:	f7f9 f992 	bl	80020f8 <HAL_GetTick>
 8008dd4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008dd6:	e009      	b.n	8008dec <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008dd8:	f7f9 f98e 	bl	80020f8 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008de6:	d901      	bls.n	8008dec <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e007      	b.n	8008dfc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0ee      	beq.n	8008dd8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d11d      	bne.n	8008e5a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f04f 32ff 	mov.w	r2, #4294967295
 8008e26:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008e28:	f7f9 f966 	bl	80020f8 <HAL_GetTick>
 8008e2c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008e2e:	e00d      	b.n	8008e4c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008e30:	f7f9 f962 	bl	80020f8 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e3e:	d905      	bls.n	8008e4c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2203      	movs	r2, #3
 8008e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0ea      	beq.n	8008e30 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008e70:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <RTC_ExitInitMode+0x78>)
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	4a19      	ldr	r2, [pc, #100]	; (8008edc <RTC_ExitInitMode+0x78>)
 8008e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e7a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008e7c:	4b17      	ldr	r3, [pc, #92]	; (8008edc <RTC_ExitInitMode+0x78>)
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f003 0320 	and.w	r3, r3, #32
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10c      	bne.n	8008ea2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff ff95 	bl	8008db8 <HAL_RTC_WaitForSynchro>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d01e      	beq.n	8008ed2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2203      	movs	r2, #3
 8008e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	73fb      	strb	r3, [r7, #15]
 8008ea0:	e017      	b.n	8008ed2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ea2:	4b0e      	ldr	r3, [pc, #56]	; (8008edc <RTC_ExitInitMode+0x78>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	4a0d      	ldr	r2, [pc, #52]	; (8008edc <RTC_ExitInitMode+0x78>)
 8008ea8:	f023 0320 	bic.w	r3, r3, #32
 8008eac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff ff82 	bl	8008db8 <HAL_RTC_WaitForSynchro>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d005      	beq.n	8008ec6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ec6:	4b05      	ldr	r3, [pc, #20]	; (8008edc <RTC_ExitInitMode+0x78>)
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	4a04      	ldr	r2, [pc, #16]	; (8008edc <RTC_ExitInitMode+0x78>)
 8008ecc:	f043 0320 	orr.w	r3, r3, #32
 8008ed0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	58004000 	.word	0x58004000

08008ee0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8008ef2:	e005      	b.n	8008f00 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008efa:	7afb      	ldrb	r3, [r7, #11]
 8008efc:	3b0a      	subs	r3, #10
 8008efe:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008f00:	7afb      	ldrb	r3, [r7, #11]
 8008f02:	2b09      	cmp	r3, #9
 8008f04:	d8f6      	bhi.n	8008ef4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	7afb      	ldrb	r3, [r7, #11]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	b2db      	uxtb	r3, r3
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	091b      	lsrs	r3, r3, #4
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	461a      	mov	r2, r3
 8008f32:	0092      	lsls	r2, r2, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
 8008f44:	4413      	add	r3, r2
 8008f46:	b2db      	uxtb	r3, r3
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e0eb      	b.n	8009156 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a75      	ldr	r2, [pc, #468]	; (8009160 <HAL_SPI_Init+0x1f8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d00f      	beq.n	8008fae <HAL_SPI_Init+0x46>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a74      	ldr	r2, [pc, #464]	; (8009164 <HAL_SPI_Init+0x1fc>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00a      	beq.n	8008fae <HAL_SPI_Init+0x46>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a72      	ldr	r2, [pc, #456]	; (8009168 <HAL_SPI_Init+0x200>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d005      	beq.n	8008fae <HAL_SPI_Init+0x46>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	2b0f      	cmp	r3, #15
 8008fa8:	d901      	bls.n	8008fae <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e0d3      	b.n	8009156 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 ff62 	bl	8009e78 <SPI_GetPacketSize>
 8008fb4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a69      	ldr	r2, [pc, #420]	; (8009160 <HAL_SPI_Init+0x1f8>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d00c      	beq.n	8008fda <HAL_SPI_Init+0x72>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a67      	ldr	r2, [pc, #412]	; (8009164 <HAL_SPI_Init+0x1fc>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d007      	beq.n	8008fda <HAL_SPI_Init+0x72>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a66      	ldr	r2, [pc, #408]	; (8009168 <HAL_SPI_Init+0x200>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d002      	beq.n	8008fda <HAL_SPI_Init+0x72>
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	d811      	bhi.n	8008ffe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008fde:	4a60      	ldr	r2, [pc, #384]	; (8009160 <HAL_SPI_Init+0x1f8>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d009      	beq.n	8008ff8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a5e      	ldr	r2, [pc, #376]	; (8009164 <HAL_SPI_Init+0x1fc>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d004      	beq.n	8008ff8 <HAL_SPI_Init+0x90>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a5d      	ldr	r2, [pc, #372]	; (8009168 <HAL_SPI_Init+0x200>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d104      	bne.n	8009002 <HAL_SPI_Init+0x9a>
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b10      	cmp	r3, #16
 8008ffc:	d901      	bls.n	8009002 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e0a9      	b.n	8009156 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7f8 fca4 	bl	8001964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0201 	bic.w	r2, r2, #1
 8009032:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800903c:	d119      	bne.n	8009072 <HAL_SPI_Init+0x10a>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009046:	d103      	bne.n	8009050 <HAL_SPI_Init+0xe8>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	d008      	beq.n	8009062 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10c      	bne.n	8009072 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009060:	d107      	bne.n	8009072 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009070:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69da      	ldr	r2, [r3, #28]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	431a      	orrs	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009084:	ea42 0103 	orr.w	r1, r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	430a      	orrs	r2, r1
 8009092:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	431a      	orrs	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c6:	431a      	orrs	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	431a      	orrs	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d2:	ea42 0103 	orr.w	r1, r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d113      	bne.n	8009112 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009110:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0201 	bic.w	r2, r2, #1
 8009120:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	40013000 	.word	0x40013000
 8009164:	40003800 	.word	0x40003800
 8009168:	40003c00 	.word	0x40003c00

0800916c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08a      	sub	sp, #40	; 0x28
 8009170:	af02      	add	r7, sp, #8
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	4613      	mov	r3, r2
 800917a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3320      	adds	r3, #32
 8009182:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800918e:	2b01      	cmp	r3, #1
 8009190:	d101      	bne.n	8009196 <HAL_SPI_Transmit+0x2a>
 8009192:	2302      	movs	r3, #2
 8009194:	e1d7      	b.n	8009546 <HAL_SPI_Transmit+0x3da>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800919e:	f7f8 ffab 	bl	80020f8 <HAL_GetTick>
 80091a2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d007      	beq.n	80091c0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80091b0:	2302      	movs	r3, #2
 80091b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80091bc:	7efb      	ldrb	r3, [r7, #27]
 80091be:	e1c2      	b.n	8009546 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <HAL_SPI_Transmit+0x60>
 80091c6:	88fb      	ldrh	r3, [r7, #6]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d107      	bne.n	80091dc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80091d8:	7efb      	ldrb	r3, [r7, #27]
 80091da:	e1b4      	b.n	8009546 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2203      	movs	r2, #3
 80091e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	88fa      	ldrh	r2, [r7, #6]
 80091f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	88fa      	ldrh	r2, [r7, #6]
 80091fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800922c:	d107      	bne.n	800923e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800923c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	4b96      	ldr	r3, [pc, #600]	; (80094a0 <HAL_SPI_Transmit+0x334>)
 8009246:	4013      	ands	r3, r2
 8009248:	88f9      	ldrh	r1, [r7, #6]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	430b      	orrs	r3, r1
 8009250:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 0201 	orr.w	r2, r2, #1
 8009260:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800926a:	d107      	bne.n	800927c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	2b0f      	cmp	r3, #15
 8009282:	d947      	bls.n	8009314 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009284:	e03f      	b.n	8009306 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b02      	cmp	r3, #2
 8009292:	d114      	bne.n	80092be <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6812      	ldr	r2, [r2, #0]
 800929e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092a4:	1d1a      	adds	r2, r3, #4
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80092bc:	e023      	b.n	8009306 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092be:	f7f8 ff1b 	bl	80020f8 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d803      	bhi.n	80092d6 <HAL_SPI_Transmit+0x16a>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d4:	d102      	bne.n	80092dc <HAL_SPI_Transmit+0x170>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d114      	bne.n	8009306 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 fcfd 	bl	8009cdc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e11f      	b.n	8009546 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800930c:	b29b      	uxth	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1b9      	bne.n	8009286 <HAL_SPI_Transmit+0x11a>
 8009312:	e0f2      	b.n	80094fa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	2b07      	cmp	r3, #7
 800931a:	f240 80e7 	bls.w	80094ec <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800931e:	e05d      	b.n	80093dc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b02      	cmp	r3, #2
 800932c:	d132      	bne.n	8009394 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009334:	b29b      	uxth	r3, r3
 8009336:	2b01      	cmp	r3, #1
 8009338:	d918      	bls.n	800936c <HAL_SPI_Transmit+0x200>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d014      	beq.n	800936c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6812      	ldr	r2, [r2, #0]
 800934c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009352:	1d1a      	adds	r2, r3, #4
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800935e:	b29b      	uxth	r3, r3
 8009360:	3b02      	subs	r3, #2
 8009362:	b29a      	uxth	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800936a:	e037      	b.n	80093dc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009370:	881a      	ldrh	r2, [r3, #0]
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800937a:	1c9a      	adds	r2, r3, #2
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009386:	b29b      	uxth	r3, r3
 8009388:	3b01      	subs	r3, #1
 800938a:	b29a      	uxth	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009392:	e023      	b.n	80093dc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009394:	f7f8 feb0 	bl	80020f8 <HAL_GetTick>
 8009398:	4602      	mov	r2, r0
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d803      	bhi.n	80093ac <HAL_SPI_Transmit+0x240>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093aa:	d102      	bne.n	80093b2 <HAL_SPI_Transmit+0x246>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d114      	bne.n	80093dc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f000 fc92 	bl	8009cdc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e0b4      	b.n	8009546 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d19b      	bne.n	8009320 <HAL_SPI_Transmit+0x1b4>
 80093e8:	e087      	b.n	80094fa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	f003 0302 	and.w	r3, r3, #2
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d155      	bne.n	80094a4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093fe:	b29b      	uxth	r3, r3
 8009400:	2b03      	cmp	r3, #3
 8009402:	d918      	bls.n	8009436 <HAL_SPI_Transmit+0x2ca>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009408:	2b40      	cmp	r3, #64	; 0x40
 800940a:	d914      	bls.n	8009436 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800941c:	1d1a      	adds	r2, r3, #4
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b04      	subs	r3, #4
 800942c:	b29a      	uxth	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009434:	e05a      	b.n	80094ec <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800943c:	b29b      	uxth	r3, r3
 800943e:	2b01      	cmp	r3, #1
 8009440:	d917      	bls.n	8009472 <HAL_SPI_Transmit+0x306>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009446:	2b00      	cmp	r3, #0
 8009448:	d013      	beq.n	8009472 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800944e:	881a      	ldrh	r2, [r3, #0]
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009458:	1c9a      	adds	r2, r3, #2
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009464:	b29b      	uxth	r3, r3
 8009466:	3b02      	subs	r3, #2
 8009468:	b29a      	uxth	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009470:	e03c      	b.n	80094ec <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3320      	adds	r3, #32
 800947c:	7812      	ldrb	r2, [r2, #0]
 800947e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009484:	1c5a      	adds	r2, r3, #1
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009490:	b29b      	uxth	r3, r3
 8009492:	3b01      	subs	r3, #1
 8009494:	b29a      	uxth	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800949c:	e026      	b.n	80094ec <HAL_SPI_Transmit+0x380>
 800949e:	bf00      	nop
 80094a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094a4:	f7f8 fe28 	bl	80020f8 <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d803      	bhi.n	80094bc <HAL_SPI_Transmit+0x350>
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ba:	d102      	bne.n	80094c2 <HAL_SPI_Transmit+0x356>
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d114      	bne.n	80094ec <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fc0a 	bl	8009cdc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e02c      	b.n	8009546 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f47f af78 	bne.w	80093ea <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2200      	movs	r2, #0
 8009502:	2108      	movs	r1, #8
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fc89 	bl	8009e1c <SPI_WaitOnFlagUntilTimeout>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d007      	beq.n	8009520 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009516:	f043 0220 	orr.w	r2, r3, #32
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 fbdb 	bl	8009cdc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e000      	b.n	8009546 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009544:	7efb      	ldrb	r3, [r7, #27]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3720      	adds	r7, #32
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop

08009550 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <HAL_SPI_Transmit_DMA+0x20>
 800956c:	2302      	movs	r3, #2
 800956e:	e128      	b.n	80097c2 <HAL_SPI_Transmit_DMA+0x272>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b01      	cmp	r3, #1
 8009582:	d007      	beq.n	8009594 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8009584:	2302      	movs	r3, #2
 8009586:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	e116      	b.n	80097c2 <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <HAL_SPI_Transmit_DMA+0x50>
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d107      	bne.n	80095b0 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	e108      	b.n	80097c2 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2203      	movs	r2, #3
 80095b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	88fa      	ldrh	r2, [r7, #6]
 80095ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	88fa      	ldrh	r2, [r7, #6]
 80095d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009600:	d107      	bne.n	8009612 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009610:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	2b0f      	cmp	r3, #15
 8009618:	d905      	bls.n	8009626 <HAL_SPI_Transmit_DMA+0xd6>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009624:	d10f      	bne.n	8009646 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800962a:	2b07      	cmp	r3, #7
 800962c:	d913      	bls.n	8009656 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009638:	d00d      	beq.n	8009656 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800963e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009644:	d007      	beq.n	8009656 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	e0b5      	b.n	80097c2 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	2b07      	cmp	r3, #7
 800965c:	d820      	bhi.n	80096a0 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009668:	d109      	bne.n	800967e <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009670:	b29b      	uxth	r3, r3
 8009672:	3301      	adds	r3, #1
 8009674:	105b      	asrs	r3, r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009688:	d11e      	bne.n	80096c8 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009690:	b29b      	uxth	r3, r3
 8009692:	3303      	adds	r3, #3
 8009694:	109b      	asrs	r3, r3, #2
 8009696:	b29a      	uxth	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800969e:	e013      	b.n	80096c8 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	2b0f      	cmp	r3, #15
 80096a6:	d80f      	bhi.n	80096c8 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096b2:	d109      	bne.n	80096c8 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	3301      	adds	r3, #1
 80096be:	105b      	asrs	r3, r3, #1
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096cc:	4a3f      	ldr	r2, [pc, #252]	; (80097cc <HAL_SPI_Transmit_DMA+0x27c>)
 80096ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096d4:	4a3e      	ldr	r2, [pc, #248]	; (80097d0 <HAL_SPI_Transmit_DMA+0x280>)
 80096d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096dc:	4a3d      	ldr	r2, [pc, #244]	; (80097d4 <HAL_SPI_Transmit_DMA+0x284>)
 80096de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096e4:	2200      	movs	r2, #0
 80096e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689a      	ldr	r2, [r3, #8]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096f6:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009700:	4619      	mov	r1, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3320      	adds	r3, #32
 8009708:	461a      	mov	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009710:	b29b      	uxth	r3, r3
 8009712:	f7f9 f9c1 	bl	8002a98 <HAL_DMA_Start_IT>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00f      	beq.n	800973c <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009722:	f043 0210 	orr.w	r2, r3, #16
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 8009738:	7dfb      	ldrb	r3, [r7, #23]
 800973a:	e042      	b.n	80097c2 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009746:	d108      	bne.n	800975a <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6859      	ldr	r1, [r3, #4]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	4b21      	ldr	r3, [pc, #132]	; (80097d8 <HAL_SPI_Transmit_DMA+0x288>)
 8009754:	400b      	ands	r3, r1
 8009756:	6053      	str	r3, [r2, #4]
 8009758:	e009      	b.n	800976e <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	4b1d      	ldr	r3, [pc, #116]	; (80097d8 <HAL_SPI_Transmit_DMA+0x288>)
 8009762:	4013      	ands	r3, r2
 8009764:	88f9      	ldrh	r1, [r7, #6]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	430b      	orrs	r3, r1
 800976c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	689a      	ldr	r2, [r3, #8]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800977c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	691a      	ldr	r2, [r3, #16]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800978c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f042 0201 	orr.w	r2, r2, #1
 800979c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097a6:	d107      	bne.n	80097b8 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097b6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	08009c47 	.word	0x08009c47
 80097d0:	08009c01 	.word	0x08009c01
 80097d4:	08009c63 	.word	0x08009c63
 80097d8:	ffff0000 	.word	0xffff0000

080097dc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08a      	sub	sp, #40	; 0x28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80097f4:	6a3a      	ldr	r2, [r7, #32]
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4013      	ands	r3, r2
 80097fa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009804:	2300      	movs	r3, #0
 8009806:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800980e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3330      	adds	r3, #48	; 0x30
 8009816:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800981e:	2b00      	cmp	r3, #0
 8009820:	d113      	bne.n	800984a <HAL_SPI_IRQHandler+0x6e>
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	f003 0320 	and.w	r3, r3, #32
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10e      	bne.n	800984a <HAL_SPI_IRQHandler+0x6e>
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	f003 0304 	and.w	r3, r3, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	d009      	beq.n	800984a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	4798      	blx	r3
    handled = 1UL;
 8009846:	2301      	movs	r3, #1
 8009848:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10f      	bne.n	8009874 <HAL_SPI_IRQHandler+0x98>
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00a      	beq.n	8009874 <HAL_SPI_IRQHandler+0x98>
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	f003 0304 	and.w	r3, r3, #4
 8009864:	2b00      	cmp	r3, #0
 8009866:	d105      	bne.n	8009874 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
    handled = 1UL;
 8009870:	2301      	movs	r3, #1
 8009872:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10f      	bne.n	800989e <HAL_SPI_IRQHandler+0xc2>
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00a      	beq.n	800989e <HAL_SPI_IRQHandler+0xc2>
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	f003 0304 	and.w	r3, r3, #4
 800988e:	2b00      	cmp	r3, #0
 8009890:	d105      	bne.n	800989e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
    handled = 1UL;
 800989a:	2301      	movs	r3, #1
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f040 816f 	bne.w	8009b84 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	f003 0308 	and.w	r3, r3, #8
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 80a0 	beq.w	80099f2 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	699a      	ldr	r2, [r3, #24]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f042 0208 	orr.w	r2, r2, #8
 80098c0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	699a      	ldr	r2, [r3, #24]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f042 0210 	orr.w	r2, r2, #16
 80098d0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	699a      	ldr	r2, [r3, #24]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	691a      	ldr	r2, [r3, #16]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f022 0208 	bic.w	r2, r2, #8
 80098f0:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00f      	beq.n	800991c <HAL_SPI_IRQHandler+0x140>
 80098fc:	7cfb      	ldrb	r3, [r7, #19]
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d004      	beq.n	800990c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d007      	beq.n	800991c <HAL_SPI_IRQHandler+0x140>
 800990c:	7cfb      	ldrb	r3, [r7, #19]
 800990e:	2b03      	cmp	r3, #3
 8009910:	d059      	beq.n	80099c6 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d154      	bne.n	80099c6 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d13d      	bne.n	80099a6 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800992a:	e036      	b.n	800999a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	2b0f      	cmp	r3, #15
 8009932:	d90b      	bls.n	800994c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800993c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800993e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009944:	1d1a      	adds	r2, r3, #4
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	665a      	str	r2, [r3, #100]	; 0x64
 800994a:	e01d      	b.n	8009988 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	2b07      	cmp	r3, #7
 8009952:	d90b      	bls.n	800996c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	8812      	ldrh	r2, [r2, #0]
 800995c:	b292      	uxth	r2, r2
 800995e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009964:	1c9a      	adds	r2, r3, #2
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	665a      	str	r2, [r3, #100]	; 0x64
 800996a:	e00d      	b.n	8009988 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009978:	7812      	ldrb	r2, [r2, #0]
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800998e:	b29b      	uxth	r3, r3
 8009990:	3b01      	subs	r3, #1
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1c2      	bne.n	800992c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f998 	bl	8009cdc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f914 	bl	8009bec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80099c4:	e0e3      	b.n	8009b8e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80099c6:	7cfb      	ldrb	r3, [r7, #19]
 80099c8:	2b05      	cmp	r3, #5
 80099ca:	d103      	bne.n	80099d4 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f8f9 	bl	8009bc4 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 80099d2:	e0d9      	b.n	8009b88 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80099d4:	7cfb      	ldrb	r3, [r7, #19]
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d103      	bne.n	80099e2 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f8e8 	bl	8009bb0 <HAL_SPI_RxCpltCallback>
    return;
 80099e0:	e0d2      	b.n	8009b88 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80099e2:	7cfb      	ldrb	r3, [r7, #19]
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	f040 80cf 	bne.w	8009b88 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f8d6 	bl	8009b9c <HAL_SPI_TxCpltCallback>
    return;
 80099f0:	e0ca      	b.n	8009b88 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00d      	beq.n	8009a18 <HAL_SPI_IRQHandler+0x23c>
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	f003 0308 	and.w	r3, r3, #8
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d008      	beq.n	8009a18 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	699a      	ldr	r2, [r3, #24]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a14:	619a      	str	r2, [r3, #24]

    return;
 8009a16:	e0ba      	b.n	8009b8e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 80b5 	beq.w	8009b8e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00f      	beq.n	8009a4e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a34:	f043 0204 	orr.w	r2, r3, #4
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	699a      	ldr	r2, [r3, #24]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a4c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00f      	beq.n	8009a78 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a5e:	f043 0201 	orr.w	r2, r3, #1
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	699a      	ldr	r2, [r3, #24]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a76:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00f      	beq.n	8009aa2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a88:	f043 0208 	orr.w	r2, r3, #8
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	699a      	ldr	r2, [r3, #24]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009aa0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00f      	beq.n	8009acc <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ab2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	699a      	ldr	r2, [r3, #24]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f042 0220 	orr.w	r2, r2, #32
 8009aca:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d05a      	beq.n	8009b8c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f022 0201 	bic.w	r2, r2, #1
 8009ae4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6919      	ldr	r1, [r3, #16]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	4b28      	ldr	r3, [pc, #160]	; (8009b94 <HAL_SPI_IRQHandler+0x3b8>)
 8009af2:	400b      	ands	r3, r1
 8009af4:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009afc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b00:	d138      	bne.n	8009b74 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009b10:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d013      	beq.n	8009b42 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b1e:	4a1e      	ldr	r2, [pc, #120]	; (8009b98 <HAL_SPI_IRQHandler+0x3bc>)
 8009b20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7f9 fd3e 	bl	80035a8 <HAL_DMA_Abort_IT>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d007      	beq.n	8009b42 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d020      	beq.n	8009b8c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b4e:	4a12      	ldr	r2, [pc, #72]	; (8009b98 <HAL_SPI_IRQHandler+0x3bc>)
 8009b50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7f9 fd26 	bl	80035a8 <HAL_DMA_Abort_IT>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d014      	beq.n	8009b8c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009b72:	e00b      	b.n	8009b8c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f835 	bl	8009bec <HAL_SPI_ErrorCallback>
    return;
 8009b82:	e003      	b.n	8009b8c <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009b84:	bf00      	nop
 8009b86:	e002      	b.n	8009b8e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009b88:	bf00      	nop
 8009b8a:	e000      	b.n	8009b8e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009b8c:	bf00      	nop
  }
}
 8009b8e:	3728      	adds	r7, #40	; 0x28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	fffffc94 	.word	0xfffffc94
 8009b98:	08009ca9 	.word	0x08009ca9

08009b9c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b07      	cmp	r3, #7
 8009c18:	d011      	beq.n	8009c3e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c24:	d103      	bne.n	8009c2e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f7ff ffb8 	bl	8009b9c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009c2c:	e007      	b.n	8009c3e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f042 0208 	orr.w	r2, r2, #8
 8009c3c:	611a      	str	r2, [r3, #16]
}
 8009c3e:	bf00      	nop
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b084      	sub	sp, #16
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c52:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f7ff ffbf 	bl	8009bd8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c5a:	bf00      	nop
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7fa fe07 	bl	8004884 <HAL_DMA_GetError>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d011      	beq.n	8009ca0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 f82d 	bl	8009cdc <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c88:	f043 0210 	orr.w	r2, r3, #16
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f7ff ffa6 	bl	8009bec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009ca0:	bf00      	nop
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f7ff ff8c 	bl	8009bec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009cd4:	bf00      	nop
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f042 0208 	orr.w	r2, r2, #8
 8009cfa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	699a      	ldr	r2, [r3, #24]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f042 0210 	orr.w	r2, r2, #16
 8009d0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f022 0201 	bic.w	r2, r2, #1
 8009d1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6919      	ldr	r1, [r3, #16]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	4b3c      	ldr	r3, [pc, #240]	; (8009e18 <SPI_CloseTransfer+0x13c>)
 8009d28:	400b      	ands	r3, r1
 8009d2a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689a      	ldr	r2, [r3, #8]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009d3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d014      	beq.n	8009d72 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f003 0320 	and.w	r3, r3, #32
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00f      	beq.n	8009d72 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	699a      	ldr	r2, [r3, #24]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f042 0220 	orr.w	r2, r2, #32
 8009d70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d014      	beq.n	8009da8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00f      	beq.n	8009da8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d8e:	f043 0204 	orr.w	r2, r3, #4
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	699a      	ldr	r2, [r3, #24]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009da6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00f      	beq.n	8009dd2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009db8:	f043 0201 	orr.w	r2, r3, #1
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	699a      	ldr	r2, [r3, #24]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00f      	beq.n	8009dfc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009de2:	f043 0208 	orr.w	r2, r3, #8
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699a      	ldr	r2, [r3, #24]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dfa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009e0c:	bf00      	nop
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	fffffc90 	.word	0xfffffc90

08009e1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	603b      	str	r3, [r7, #0]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e2c:	e010      	b.n	8009e50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e2e:	f7f8 f963 	bl	80020f8 <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	69ba      	ldr	r2, [r7, #24]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d803      	bhi.n	8009e46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e44:	d102      	bne.n	8009e4c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e00f      	b.n	8009e70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	695a      	ldr	r2, [r3, #20]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	4013      	ands	r3, r2
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	bf0c      	ite	eq
 8009e60:	2301      	moveq	r3, #1
 8009e62:	2300      	movne	r3, #0
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	461a      	mov	r2, r3
 8009e68:	79fb      	ldrb	r3, [r7, #7]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d0df      	beq.n	8009e2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e84:	095b      	lsrs	r3, r3, #5
 8009e86:	3301      	adds	r3, #1
 8009e88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	3307      	adds	r3, #7
 8009e96:	08db      	lsrs	r3, r3, #3
 8009e98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b082      	sub	sp, #8
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e049      	b.n	8009f54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d106      	bne.n	8009eda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f7f7 fe09 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f000 fc0b 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d001      	beq.n	8009f74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e047      	b.n	800a004 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a23      	ldr	r2, [pc, #140]	; (800a010 <HAL_TIM_Base_Start+0xb4>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d01d      	beq.n	8009fc2 <HAL_TIM_Base_Start+0x66>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f8e:	d018      	beq.n	8009fc2 <HAL_TIM_Base_Start+0x66>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a1f      	ldr	r2, [pc, #124]	; (800a014 <HAL_TIM_Base_Start+0xb8>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d013      	beq.n	8009fc2 <HAL_TIM_Base_Start+0x66>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a1e      	ldr	r2, [pc, #120]	; (800a018 <HAL_TIM_Base_Start+0xbc>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d00e      	beq.n	8009fc2 <HAL_TIM_Base_Start+0x66>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a1c      	ldr	r2, [pc, #112]	; (800a01c <HAL_TIM_Base_Start+0xc0>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d009      	beq.n	8009fc2 <HAL_TIM_Base_Start+0x66>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a1b      	ldr	r2, [pc, #108]	; (800a020 <HAL_TIM_Base_Start+0xc4>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d004      	beq.n	8009fc2 <HAL_TIM_Base_Start+0x66>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a19      	ldr	r2, [pc, #100]	; (800a024 <HAL_TIM_Base_Start+0xc8>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d115      	bne.n	8009fee <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	4b17      	ldr	r3, [pc, #92]	; (800a028 <HAL_TIM_Base_Start+0xcc>)
 8009fca:	4013      	ands	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b06      	cmp	r3, #6
 8009fd2:	d015      	beq.n	800a000 <HAL_TIM_Base_Start+0xa4>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fda:	d011      	beq.n	800a000 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f042 0201 	orr.w	r2, r2, #1
 8009fea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fec:	e008      	b.n	800a000 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0201 	orr.w	r2, r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	e000      	b.n	800a002 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a000:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	40010000 	.word	0x40010000
 800a014:	40000400 	.word	0x40000400
 800a018:	40000800 	.word	0x40000800
 800a01c:	40000c00 	.word	0x40000c00
 800a020:	40010400 	.word	0x40010400
 800a024:	40001800 	.word	0x40001800
 800a028:	00010007 	.word	0x00010007

0800a02c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e049      	b.n	800a0d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b00      	cmp	r3, #0
 800a048:	d106      	bne.n	800a058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f841 	bl	800a0da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2202      	movs	r2, #2
 800a05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3304      	adds	r3, #4
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f000 fb4c 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0e2:	bf00      	nop
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
	...

0800a0f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d109      	bne.n	800a114 <HAL_TIM_PWM_Start+0x24>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b01      	cmp	r3, #1
 800a10a:	bf14      	ite	ne
 800a10c:	2301      	movne	r3, #1
 800a10e:	2300      	moveq	r3, #0
 800a110:	b2db      	uxtb	r3, r3
 800a112:	e03c      	b.n	800a18e <HAL_TIM_PWM_Start+0x9e>
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2b04      	cmp	r3, #4
 800a118:	d109      	bne.n	800a12e <HAL_TIM_PWM_Start+0x3e>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b01      	cmp	r3, #1
 800a124:	bf14      	ite	ne
 800a126:	2301      	movne	r3, #1
 800a128:	2300      	moveq	r3, #0
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	e02f      	b.n	800a18e <HAL_TIM_PWM_Start+0x9e>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b08      	cmp	r3, #8
 800a132:	d109      	bne.n	800a148 <HAL_TIM_PWM_Start+0x58>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	bf14      	ite	ne
 800a140:	2301      	movne	r3, #1
 800a142:	2300      	moveq	r3, #0
 800a144:	b2db      	uxtb	r3, r3
 800a146:	e022      	b.n	800a18e <HAL_TIM_PWM_Start+0x9e>
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b0c      	cmp	r3, #12
 800a14c:	d109      	bne.n	800a162 <HAL_TIM_PWM_Start+0x72>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b01      	cmp	r3, #1
 800a158:	bf14      	ite	ne
 800a15a:	2301      	movne	r3, #1
 800a15c:	2300      	moveq	r3, #0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	e015      	b.n	800a18e <HAL_TIM_PWM_Start+0x9e>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b10      	cmp	r3, #16
 800a166:	d109      	bne.n	800a17c <HAL_TIM_PWM_Start+0x8c>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b01      	cmp	r3, #1
 800a172:	bf14      	ite	ne
 800a174:	2301      	movne	r3, #1
 800a176:	2300      	moveq	r3, #0
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	e008      	b.n	800a18e <HAL_TIM_PWM_Start+0x9e>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	bf14      	ite	ne
 800a188:	2301      	movne	r3, #1
 800a18a:	2300      	moveq	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e09c      	b.n	800a2d0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d104      	bne.n	800a1a6 <HAL_TIM_PWM_Start+0xb6>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1a4:	e023      	b.n	800a1ee <HAL_TIM_PWM_Start+0xfe>
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d104      	bne.n	800a1b6 <HAL_TIM_PWM_Start+0xc6>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1b4:	e01b      	b.n	800a1ee <HAL_TIM_PWM_Start+0xfe>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b08      	cmp	r3, #8
 800a1ba:	d104      	bne.n	800a1c6 <HAL_TIM_PWM_Start+0xd6>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1c4:	e013      	b.n	800a1ee <HAL_TIM_PWM_Start+0xfe>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b0c      	cmp	r3, #12
 800a1ca:	d104      	bne.n	800a1d6 <HAL_TIM_PWM_Start+0xe6>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1d4:	e00b      	b.n	800a1ee <HAL_TIM_PWM_Start+0xfe>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b10      	cmp	r3, #16
 800a1da:	d104      	bne.n	800a1e6 <HAL_TIM_PWM_Start+0xf6>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1e4:	e003      	b.n	800a1ee <HAL_TIM_PWM_Start+0xfe>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fe8c 	bl	800af14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a35      	ldr	r2, [pc, #212]	; (800a2d8 <HAL_TIM_PWM_Start+0x1e8>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d013      	beq.n	800a22e <HAL_TIM_PWM_Start+0x13e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a34      	ldr	r2, [pc, #208]	; (800a2dc <HAL_TIM_PWM_Start+0x1ec>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00e      	beq.n	800a22e <HAL_TIM_PWM_Start+0x13e>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a32      	ldr	r2, [pc, #200]	; (800a2e0 <HAL_TIM_PWM_Start+0x1f0>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d009      	beq.n	800a22e <HAL_TIM_PWM_Start+0x13e>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a31      	ldr	r2, [pc, #196]	; (800a2e4 <HAL_TIM_PWM_Start+0x1f4>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d004      	beq.n	800a22e <HAL_TIM_PWM_Start+0x13e>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a2f      	ldr	r2, [pc, #188]	; (800a2e8 <HAL_TIM_PWM_Start+0x1f8>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d101      	bne.n	800a232 <HAL_TIM_PWM_Start+0x142>
 800a22e:	2301      	movs	r3, #1
 800a230:	e000      	b.n	800a234 <HAL_TIM_PWM_Start+0x144>
 800a232:	2300      	movs	r3, #0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d007      	beq.n	800a248 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a246:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a22      	ldr	r2, [pc, #136]	; (800a2d8 <HAL_TIM_PWM_Start+0x1e8>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d01d      	beq.n	800a28e <HAL_TIM_PWM_Start+0x19e>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25a:	d018      	beq.n	800a28e <HAL_TIM_PWM_Start+0x19e>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a22      	ldr	r2, [pc, #136]	; (800a2ec <HAL_TIM_PWM_Start+0x1fc>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d013      	beq.n	800a28e <HAL_TIM_PWM_Start+0x19e>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a21      	ldr	r2, [pc, #132]	; (800a2f0 <HAL_TIM_PWM_Start+0x200>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d00e      	beq.n	800a28e <HAL_TIM_PWM_Start+0x19e>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a1f      	ldr	r2, [pc, #124]	; (800a2f4 <HAL_TIM_PWM_Start+0x204>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d009      	beq.n	800a28e <HAL_TIM_PWM_Start+0x19e>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a17      	ldr	r2, [pc, #92]	; (800a2dc <HAL_TIM_PWM_Start+0x1ec>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d004      	beq.n	800a28e <HAL_TIM_PWM_Start+0x19e>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1b      	ldr	r2, [pc, #108]	; (800a2f8 <HAL_TIM_PWM_Start+0x208>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d115      	bne.n	800a2ba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	689a      	ldr	r2, [r3, #8]
 800a294:	4b19      	ldr	r3, [pc, #100]	; (800a2fc <HAL_TIM_PWM_Start+0x20c>)
 800a296:	4013      	ands	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2b06      	cmp	r3, #6
 800a29e:	d015      	beq.n	800a2cc <HAL_TIM_PWM_Start+0x1dc>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a6:	d011      	beq.n	800a2cc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f042 0201 	orr.w	r2, r2, #1
 800a2b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2b8:	e008      	b.n	800a2cc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f042 0201 	orr.w	r2, r2, #1
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	e000      	b.n	800a2ce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	40010000 	.word	0x40010000
 800a2dc:	40010400 	.word	0x40010400
 800a2e0:	40014000 	.word	0x40014000
 800a2e4:	40014400 	.word	0x40014400
 800a2e8:	40014800 	.word	0x40014800
 800a2ec:	40000400 	.word	0x40000400
 800a2f0:	40000800 	.word	0x40000800
 800a2f4:	40000c00 	.word	0x40000c00
 800a2f8:	40001800 	.word	0x40001800
 800a2fc:	00010007 	.word	0x00010007

0800a300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a312:	2b01      	cmp	r3, #1
 800a314:	d101      	bne.n	800a31a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a316:	2302      	movs	r3, #2
 800a318:	e0fd      	b.n	800a516 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b14      	cmp	r3, #20
 800a326:	f200 80f0 	bhi.w	800a50a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a32a:	a201      	add	r2, pc, #4	; (adr r2, 800a330 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a330:	0800a385 	.word	0x0800a385
 800a334:	0800a50b 	.word	0x0800a50b
 800a338:	0800a50b 	.word	0x0800a50b
 800a33c:	0800a50b 	.word	0x0800a50b
 800a340:	0800a3c5 	.word	0x0800a3c5
 800a344:	0800a50b 	.word	0x0800a50b
 800a348:	0800a50b 	.word	0x0800a50b
 800a34c:	0800a50b 	.word	0x0800a50b
 800a350:	0800a407 	.word	0x0800a407
 800a354:	0800a50b 	.word	0x0800a50b
 800a358:	0800a50b 	.word	0x0800a50b
 800a35c:	0800a50b 	.word	0x0800a50b
 800a360:	0800a447 	.word	0x0800a447
 800a364:	0800a50b 	.word	0x0800a50b
 800a368:	0800a50b 	.word	0x0800a50b
 800a36c:	0800a50b 	.word	0x0800a50b
 800a370:	0800a489 	.word	0x0800a489
 800a374:	0800a50b 	.word	0x0800a50b
 800a378:	0800a50b 	.word	0x0800a50b
 800a37c:	0800a50b 	.word	0x0800a50b
 800a380:	0800a4c9 	.word	0x0800a4c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68b9      	ldr	r1, [r7, #8]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 fa56 	bl	800a83c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	699a      	ldr	r2, [r3, #24]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f042 0208 	orr.w	r2, r2, #8
 800a39e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f022 0204 	bic.w	r2, r2, #4
 800a3ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6999      	ldr	r1, [r3, #24]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	619a      	str	r2, [r3, #24]
      break;
 800a3c2:	e0a3      	b.n	800a50c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68b9      	ldr	r1, [r7, #8]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fac6 	bl	800a95c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	699a      	ldr	r2, [r3, #24]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	699a      	ldr	r2, [r3, #24]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6999      	ldr	r1, [r3, #24]
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	021a      	lsls	r2, r3, #8
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	430a      	orrs	r2, r1
 800a402:	619a      	str	r2, [r3, #24]
      break;
 800a404:	e082      	b.n	800a50c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68b9      	ldr	r1, [r7, #8]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 fb2f 	bl	800aa70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69da      	ldr	r2, [r3, #28]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f042 0208 	orr.w	r2, r2, #8
 800a420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	69da      	ldr	r2, [r3, #28]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 0204 	bic.w	r2, r2, #4
 800a430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	69d9      	ldr	r1, [r3, #28]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	691a      	ldr	r2, [r3, #16]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	61da      	str	r2, [r3, #28]
      break;
 800a444:	e062      	b.n	800a50c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68b9      	ldr	r1, [r7, #8]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fb95 	bl	800ab7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	69da      	ldr	r2, [r3, #28]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	69da      	ldr	r2, [r3, #28]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	69d9      	ldr	r1, [r3, #28]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	021a      	lsls	r2, r3, #8
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	61da      	str	r2, [r3, #28]
      break;
 800a486:	e041      	b.n	800a50c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68b9      	ldr	r1, [r7, #8]
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 fbdc 	bl	800ac4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f042 0208 	orr.w	r2, r2, #8
 800a4a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f022 0204 	bic.w	r2, r2, #4
 800a4b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	691a      	ldr	r2, [r3, #16]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	430a      	orrs	r2, r1
 800a4c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4c6:	e021      	b.n	800a50c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68b9      	ldr	r1, [r7, #8]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 fc1e 	bl	800ad10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	021a      	lsls	r2, r3, #8
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	430a      	orrs	r2, r1
 800a506:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a508:	e000      	b.n	800a50c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a50a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop

0800a520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a530:	2b01      	cmp	r3, #1
 800a532:	d101      	bne.n	800a538 <HAL_TIM_ConfigClockSource+0x18>
 800a534:	2302      	movs	r3, #2
 800a536:	e0db      	b.n	800a6f0 <HAL_TIM_ConfigClockSource+0x1d0>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4b69      	ldr	r3, [pc, #420]	; (800a6f8 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a554:	4013      	ands	r3, r2
 800a556:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a55e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a63      	ldr	r2, [pc, #396]	; (800a6fc <HAL_TIM_ConfigClockSource+0x1dc>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	f000 80a9 	beq.w	800a6c6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a574:	4a61      	ldr	r2, [pc, #388]	; (800a6fc <HAL_TIM_ConfigClockSource+0x1dc>)
 800a576:	4293      	cmp	r3, r2
 800a578:	f200 80ae 	bhi.w	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a57c:	4a60      	ldr	r2, [pc, #384]	; (800a700 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	f000 80a1 	beq.w	800a6c6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a584:	4a5e      	ldr	r2, [pc, #376]	; (800a700 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a586:	4293      	cmp	r3, r2
 800a588:	f200 80a6 	bhi.w	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a58c:	4a5d      	ldr	r2, [pc, #372]	; (800a704 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	f000 8099 	beq.w	800a6c6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a594:	4a5b      	ldr	r2, [pc, #364]	; (800a704 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a596:	4293      	cmp	r3, r2
 800a598:	f200 809e 	bhi.w	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a59c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5a0:	f000 8091 	beq.w	800a6c6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a5a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5a8:	f200 8096 	bhi.w	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5b0:	f000 8089 	beq.w	800a6c6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a5b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5b8:	f200 808e 	bhi.w	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5c0:	d03e      	beq.n	800a640 <HAL_TIM_ConfigClockSource+0x120>
 800a5c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5c6:	f200 8087 	bhi.w	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ce:	f000 8085 	beq.w	800a6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d6:	d87f      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5d8:	2b70      	cmp	r3, #112	; 0x70
 800a5da:	d01a      	beq.n	800a612 <HAL_TIM_ConfigClockSource+0xf2>
 800a5dc:	2b70      	cmp	r3, #112	; 0x70
 800a5de:	d87b      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5e0:	2b60      	cmp	r3, #96	; 0x60
 800a5e2:	d050      	beq.n	800a686 <HAL_TIM_ConfigClockSource+0x166>
 800a5e4:	2b60      	cmp	r3, #96	; 0x60
 800a5e6:	d877      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5e8:	2b50      	cmp	r3, #80	; 0x50
 800a5ea:	d03c      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x146>
 800a5ec:	2b50      	cmp	r3, #80	; 0x50
 800a5ee:	d873      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5f0:	2b40      	cmp	r3, #64	; 0x40
 800a5f2:	d058      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x186>
 800a5f4:	2b40      	cmp	r3, #64	; 0x40
 800a5f6:	d86f      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5f8:	2b30      	cmp	r3, #48	; 0x30
 800a5fa:	d064      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a5fc:	2b30      	cmp	r3, #48	; 0x30
 800a5fe:	d86b      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a600:	2b20      	cmp	r3, #32
 800a602:	d060      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a604:	2b20      	cmp	r3, #32
 800a606:	d867      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d05c      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a60c:	2b10      	cmp	r3, #16
 800a60e:	d05a      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a610:	e062      	b.n	800a6d8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6818      	ldr	r0, [r3, #0]
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	6899      	ldr	r1, [r3, #8]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	f000 fc57 	bl	800aed4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a634:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	609a      	str	r2, [r3, #8]
      break;
 800a63e:	e04e      	b.n	800a6de <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6818      	ldr	r0, [r3, #0]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	6899      	ldr	r1, [r3, #8]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f000 fc40 	bl	800aed4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a662:	609a      	str	r2, [r3, #8]
      break;
 800a664:	e03b      	b.n	800a6de <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6818      	ldr	r0, [r3, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	6859      	ldr	r1, [r3, #4]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	461a      	mov	r2, r3
 800a674:	f000 fbb0 	bl	800add8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2150      	movs	r1, #80	; 0x50
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 fc0a 	bl	800ae98 <TIM_ITRx_SetConfig>
      break;
 800a684:	e02b      	b.n	800a6de <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	6859      	ldr	r1, [r3, #4]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	461a      	mov	r2, r3
 800a694:	f000 fbcf 	bl	800ae36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2160      	movs	r1, #96	; 0x60
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fbfa 	bl	800ae98 <TIM_ITRx_SetConfig>
      break;
 800a6a4:	e01b      	b.n	800a6de <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	6859      	ldr	r1, [r3, #4]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	f000 fb90 	bl	800add8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2140      	movs	r1, #64	; 0x40
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fbea 	bl	800ae98 <TIM_ITRx_SetConfig>
      break;
 800a6c4:	e00b      	b.n	800a6de <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f000 fbe1 	bl	800ae98 <TIM_ITRx_SetConfig>
        break;
 800a6d6:	e002      	b.n	800a6de <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a6d8:	bf00      	nop
 800a6da:	e000      	b.n	800a6de <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a6dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	ffceff88 	.word	0xffceff88
 800a6fc:	00100040 	.word	0x00100040
 800a700:	00100030 	.word	0x00100030
 800a704:	00100020 	.word	0x00100020

0800a708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a40      	ldr	r2, [pc, #256]	; (800a81c <TIM_Base_SetConfig+0x114>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d013      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a726:	d00f      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a3d      	ldr	r2, [pc, #244]	; (800a820 <TIM_Base_SetConfig+0x118>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d00b      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a3c      	ldr	r2, [pc, #240]	; (800a824 <TIM_Base_SetConfig+0x11c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d007      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a3b      	ldr	r2, [pc, #236]	; (800a828 <TIM_Base_SetConfig+0x120>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d003      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a3a      	ldr	r2, [pc, #232]	; (800a82c <TIM_Base_SetConfig+0x124>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d108      	bne.n	800a75a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a74e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a2f      	ldr	r2, [pc, #188]	; (800a81c <TIM_Base_SetConfig+0x114>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d01f      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a768:	d01b      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a2c      	ldr	r2, [pc, #176]	; (800a820 <TIM_Base_SetConfig+0x118>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d017      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a2b      	ldr	r2, [pc, #172]	; (800a824 <TIM_Base_SetConfig+0x11c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d013      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a2a      	ldr	r2, [pc, #168]	; (800a828 <TIM_Base_SetConfig+0x120>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d00f      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a29      	ldr	r2, [pc, #164]	; (800a82c <TIM_Base_SetConfig+0x124>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d00b      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a28      	ldr	r2, [pc, #160]	; (800a830 <TIM_Base_SetConfig+0x128>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d007      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a27      	ldr	r2, [pc, #156]	; (800a834 <TIM_Base_SetConfig+0x12c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d003      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a26      	ldr	r2, [pc, #152]	; (800a838 <TIM_Base_SetConfig+0x130>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d108      	bne.n	800a7b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a10      	ldr	r2, [pc, #64]	; (800a81c <TIM_Base_SetConfig+0x114>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d00f      	beq.n	800a800 <TIM_Base_SetConfig+0xf8>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a12      	ldr	r2, [pc, #72]	; (800a82c <TIM_Base_SetConfig+0x124>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d00b      	beq.n	800a800 <TIM_Base_SetConfig+0xf8>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a11      	ldr	r2, [pc, #68]	; (800a830 <TIM_Base_SetConfig+0x128>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d007      	beq.n	800a800 <TIM_Base_SetConfig+0xf8>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a10      	ldr	r2, [pc, #64]	; (800a834 <TIM_Base_SetConfig+0x12c>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d003      	beq.n	800a800 <TIM_Base_SetConfig+0xf8>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a0f      	ldr	r2, [pc, #60]	; (800a838 <TIM_Base_SetConfig+0x130>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d103      	bne.n	800a808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	691a      	ldr	r2, [r3, #16]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	615a      	str	r2, [r3, #20]
}
 800a80e:	bf00      	nop
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	40010000 	.word	0x40010000
 800a820:	40000400 	.word	0x40000400
 800a824:	40000800 	.word	0x40000800
 800a828:	40000c00 	.word	0x40000c00
 800a82c:	40010400 	.word	0x40010400
 800a830:	40014000 	.word	0x40014000
 800a834:	40014400 	.word	0x40014400
 800a838:	40014800 	.word	0x40014800

0800a83c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	f023 0201 	bic.w	r2, r3, #1
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a1b      	ldr	r3, [r3, #32]
 800a856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	4b37      	ldr	r3, [pc, #220]	; (800a944 <TIM_OC1_SetConfig+0x108>)
 800a868:	4013      	ands	r3, r2
 800a86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f023 0303 	bic.w	r3, r3, #3
 800a872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f023 0302 	bic.w	r3, r3, #2
 800a884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a2d      	ldr	r2, [pc, #180]	; (800a948 <TIM_OC1_SetConfig+0x10c>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d00f      	beq.n	800a8b8 <TIM_OC1_SetConfig+0x7c>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a2c      	ldr	r2, [pc, #176]	; (800a94c <TIM_OC1_SetConfig+0x110>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d00b      	beq.n	800a8b8 <TIM_OC1_SetConfig+0x7c>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a2b      	ldr	r2, [pc, #172]	; (800a950 <TIM_OC1_SetConfig+0x114>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d007      	beq.n	800a8b8 <TIM_OC1_SetConfig+0x7c>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a2a      	ldr	r2, [pc, #168]	; (800a954 <TIM_OC1_SetConfig+0x118>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d003      	beq.n	800a8b8 <TIM_OC1_SetConfig+0x7c>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a29      	ldr	r2, [pc, #164]	; (800a958 <TIM_OC1_SetConfig+0x11c>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d10c      	bne.n	800a8d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	f023 0308 	bic.w	r3, r3, #8
 800a8be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f023 0304 	bic.w	r3, r3, #4
 800a8d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a1c      	ldr	r2, [pc, #112]	; (800a948 <TIM_OC1_SetConfig+0x10c>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00f      	beq.n	800a8fa <TIM_OC1_SetConfig+0xbe>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a1b      	ldr	r2, [pc, #108]	; (800a94c <TIM_OC1_SetConfig+0x110>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d00b      	beq.n	800a8fa <TIM_OC1_SetConfig+0xbe>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a1a      	ldr	r2, [pc, #104]	; (800a950 <TIM_OC1_SetConfig+0x114>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d007      	beq.n	800a8fa <TIM_OC1_SetConfig+0xbe>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a19      	ldr	r2, [pc, #100]	; (800a954 <TIM_OC1_SetConfig+0x118>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d003      	beq.n	800a8fa <TIM_OC1_SetConfig+0xbe>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a18      	ldr	r2, [pc, #96]	; (800a958 <TIM_OC1_SetConfig+0x11c>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d111      	bne.n	800a91e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	695b      	ldr	r3, [r3, #20]
 800a90e:	693a      	ldr	r2, [r7, #16]
 800a910:	4313      	orrs	r3, r2
 800a912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	621a      	str	r2, [r3, #32]
}
 800a938:	bf00      	nop
 800a93a:	371c      	adds	r7, #28
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	fffeff8f 	.word	0xfffeff8f
 800a948:	40010000 	.word	0x40010000
 800a94c:	40010400 	.word	0x40010400
 800a950:	40014000 	.word	0x40014000
 800a954:	40014400 	.word	0x40014400
 800a958:	40014800 	.word	0x40014800

0800a95c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	f023 0210 	bic.w	r2, r3, #16
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4b34      	ldr	r3, [pc, #208]	; (800aa58 <TIM_OC2_SetConfig+0xfc>)
 800a988:	4013      	ands	r3, r2
 800a98a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	021b      	lsls	r3, r3, #8
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	f023 0320 	bic.w	r3, r3, #32
 800a9a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	011b      	lsls	r3, r3, #4
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a29      	ldr	r2, [pc, #164]	; (800aa5c <TIM_OC2_SetConfig+0x100>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d003      	beq.n	800a9c4 <TIM_OC2_SetConfig+0x68>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a28      	ldr	r2, [pc, #160]	; (800aa60 <TIM_OC2_SetConfig+0x104>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d10d      	bne.n	800a9e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	011b      	lsls	r3, r3, #4
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a1e      	ldr	r2, [pc, #120]	; (800aa5c <TIM_OC2_SetConfig+0x100>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d00f      	beq.n	800aa08 <TIM_OC2_SetConfig+0xac>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a1d      	ldr	r2, [pc, #116]	; (800aa60 <TIM_OC2_SetConfig+0x104>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d00b      	beq.n	800aa08 <TIM_OC2_SetConfig+0xac>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a1c      	ldr	r2, [pc, #112]	; (800aa64 <TIM_OC2_SetConfig+0x108>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d007      	beq.n	800aa08 <TIM_OC2_SetConfig+0xac>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a1b      	ldr	r2, [pc, #108]	; (800aa68 <TIM_OC2_SetConfig+0x10c>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d003      	beq.n	800aa08 <TIM_OC2_SetConfig+0xac>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a1a      	ldr	r2, [pc, #104]	; (800aa6c <TIM_OC2_SetConfig+0x110>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d113      	bne.n	800aa30 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	685a      	ldr	r2, [r3, #4]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	621a      	str	r2, [r3, #32]
}
 800aa4a:	bf00      	nop
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	feff8fff 	.word	0xfeff8fff
 800aa5c:	40010000 	.word	0x40010000
 800aa60:	40010400 	.word	0x40010400
 800aa64:	40014000 	.word	0x40014000
 800aa68:	40014400 	.word	0x40014400
 800aa6c:	40014800 	.word	0x40014800

0800aa70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	69db      	ldr	r3, [r3, #28]
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f023 0303 	bic.w	r3, r3, #3
 800aaa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	021b      	lsls	r3, r3, #8
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a27      	ldr	r2, [pc, #156]	; (800ab68 <TIM_OC3_SetConfig+0xf8>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d003      	beq.n	800aad6 <TIM_OC3_SetConfig+0x66>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a26      	ldr	r2, [pc, #152]	; (800ab6c <TIM_OC3_SetConfig+0xfc>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d10d      	bne.n	800aaf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aadc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	021b      	lsls	r3, r3, #8
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a1c      	ldr	r2, [pc, #112]	; (800ab68 <TIM_OC3_SetConfig+0xf8>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d00f      	beq.n	800ab1a <TIM_OC3_SetConfig+0xaa>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a1b      	ldr	r2, [pc, #108]	; (800ab6c <TIM_OC3_SetConfig+0xfc>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d00b      	beq.n	800ab1a <TIM_OC3_SetConfig+0xaa>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a1a      	ldr	r2, [pc, #104]	; (800ab70 <TIM_OC3_SetConfig+0x100>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d007      	beq.n	800ab1a <TIM_OC3_SetConfig+0xaa>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a19      	ldr	r2, [pc, #100]	; (800ab74 <TIM_OC3_SetConfig+0x104>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d003      	beq.n	800ab1a <TIM_OC3_SetConfig+0xaa>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a18      	ldr	r2, [pc, #96]	; (800ab78 <TIM_OC3_SetConfig+0x108>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d113      	bne.n	800ab42 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	011b      	lsls	r3, r3, #4
 800ab30:	693a      	ldr	r2, [r7, #16]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	011b      	lsls	r3, r3, #4
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	621a      	str	r2, [r3, #32]
}
 800ab5c:	bf00      	nop
 800ab5e:	371c      	adds	r7, #28
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	40010000 	.word	0x40010000
 800ab6c:	40010400 	.word	0x40010400
 800ab70:	40014000 	.word	0x40014000
 800ab74:	40014400 	.word	0x40014400
 800ab78:	40014800 	.word	0x40014800

0800ab7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	021b      	lsls	r3, r3, #8
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	031b      	lsls	r3, r3, #12
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a18      	ldr	r2, [pc, #96]	; (800ac38 <TIM_OC4_SetConfig+0xbc>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d00f      	beq.n	800abfc <TIM_OC4_SetConfig+0x80>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a17      	ldr	r2, [pc, #92]	; (800ac3c <TIM_OC4_SetConfig+0xc0>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d00b      	beq.n	800abfc <TIM_OC4_SetConfig+0x80>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a16      	ldr	r2, [pc, #88]	; (800ac40 <TIM_OC4_SetConfig+0xc4>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d007      	beq.n	800abfc <TIM_OC4_SetConfig+0x80>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a15      	ldr	r2, [pc, #84]	; (800ac44 <TIM_OC4_SetConfig+0xc8>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d003      	beq.n	800abfc <TIM_OC4_SetConfig+0x80>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a14      	ldr	r2, [pc, #80]	; (800ac48 <TIM_OC4_SetConfig+0xcc>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d109      	bne.n	800ac10 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	695b      	ldr	r3, [r3, #20]
 800ac08:	019b      	lsls	r3, r3, #6
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	685a      	ldr	r2, [r3, #4]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	621a      	str	r2, [r3, #32]
}
 800ac2a:	bf00      	nop
 800ac2c:	371c      	adds	r7, #28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	40010000 	.word	0x40010000
 800ac3c:	40010400 	.word	0x40010400
 800ac40:	40014000 	.word	0x40014000
 800ac44:	40014400 	.word	0x40014400
 800ac48:	40014800 	.word	0x40014800

0800ac4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ac8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	041b      	lsls	r3, r3, #16
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a17      	ldr	r2, [pc, #92]	; (800acfc <TIM_OC5_SetConfig+0xb0>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d00f      	beq.n	800acc2 <TIM_OC5_SetConfig+0x76>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a16      	ldr	r2, [pc, #88]	; (800ad00 <TIM_OC5_SetConfig+0xb4>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d00b      	beq.n	800acc2 <TIM_OC5_SetConfig+0x76>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a15      	ldr	r2, [pc, #84]	; (800ad04 <TIM_OC5_SetConfig+0xb8>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d007      	beq.n	800acc2 <TIM_OC5_SetConfig+0x76>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a14      	ldr	r2, [pc, #80]	; (800ad08 <TIM_OC5_SetConfig+0xbc>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d003      	beq.n	800acc2 <TIM_OC5_SetConfig+0x76>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a13      	ldr	r2, [pc, #76]	; (800ad0c <TIM_OC5_SetConfig+0xc0>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d109      	bne.n	800acd6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	021b      	lsls	r3, r3, #8
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	621a      	str	r2, [r3, #32]
}
 800acf0:	bf00      	nop
 800acf2:	371c      	adds	r7, #28
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	40010000 	.word	0x40010000
 800ad00:	40010400 	.word	0x40010400
 800ad04:	40014000 	.word	0x40014000
 800ad08:	40014400 	.word	0x40014400
 800ad0c:	40014800 	.word	0x40014800

0800ad10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	021b      	lsls	r3, r3, #8
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	051b      	lsls	r3, r3, #20
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a18      	ldr	r2, [pc, #96]	; (800adc4 <TIM_OC6_SetConfig+0xb4>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d00f      	beq.n	800ad88 <TIM_OC6_SetConfig+0x78>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a17      	ldr	r2, [pc, #92]	; (800adc8 <TIM_OC6_SetConfig+0xb8>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d00b      	beq.n	800ad88 <TIM_OC6_SetConfig+0x78>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a16      	ldr	r2, [pc, #88]	; (800adcc <TIM_OC6_SetConfig+0xbc>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d007      	beq.n	800ad88 <TIM_OC6_SetConfig+0x78>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a15      	ldr	r2, [pc, #84]	; (800add0 <TIM_OC6_SetConfig+0xc0>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d003      	beq.n	800ad88 <TIM_OC6_SetConfig+0x78>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a14      	ldr	r2, [pc, #80]	; (800add4 <TIM_OC6_SetConfig+0xc4>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d109      	bne.n	800ad9c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	029b      	lsls	r3, r3, #10
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	621a      	str	r2, [r3, #32]
}
 800adb6:	bf00      	nop
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	40010000 	.word	0x40010000
 800adc8:	40010400 	.word	0x40010400
 800adcc:	40014000 	.word	0x40014000
 800add0:	40014400 	.word	0x40014400
 800add4:	40014800 	.word	0x40014800

0800add8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800add8:	b480      	push	{r7}
 800adda:	b087      	sub	sp, #28
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	f023 0201 	bic.w	r2, r3, #1
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	011b      	lsls	r3, r3, #4
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f023 030a 	bic.w	r3, r3, #10
 800ae14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	621a      	str	r2, [r3, #32]
}
 800ae2a:	bf00      	nop
 800ae2c:	371c      	adds	r7, #28
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b087      	sub	sp, #28
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	f023 0210 	bic.w	r2, r3, #16
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	031b      	lsls	r3, r3, #12
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	011b      	lsls	r3, r3, #4
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	621a      	str	r2, [r3, #32]
}
 800ae8a:	bf00      	nop
 800ae8c:	371c      	adds	r7, #28
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
	...

0800ae98 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	4b09      	ldr	r3, [pc, #36]	; (800aed0 <TIM_ITRx_SetConfig+0x38>)
 800aeac:	4013      	ands	r3, r2
 800aeae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	f043 0307 	orr.w	r3, r3, #7
 800aeba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	609a      	str	r2, [r3, #8]
}
 800aec2:	bf00      	nop
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	ffcfff8f 	.word	0xffcfff8f

0800aed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b087      	sub	sp, #28
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
 800aee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aeee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	021a      	lsls	r2, r3, #8
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	431a      	orrs	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	4313      	orrs	r3, r2
 800af00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	609a      	str	r2, [r3, #8]
}
 800af08:	bf00      	nop
 800af0a:	371c      	adds	r7, #28
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af14:	b480      	push	{r7}
 800af16:	b087      	sub	sp, #28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f003 031f 	and.w	r3, r3, #31
 800af26:	2201      	movs	r2, #1
 800af28:	fa02 f303 	lsl.w	r3, r2, r3
 800af2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6a1a      	ldr	r2, [r3, #32]
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	43db      	mvns	r3, r3
 800af36:	401a      	ands	r2, r3
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6a1a      	ldr	r2, [r3, #32]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	f003 031f 	and.w	r3, r3, #31
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	fa01 f303 	lsl.w	r3, r1, r3
 800af4c:	431a      	orrs	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	621a      	str	r2, [r3, #32]
}
 800af52:	bf00      	nop
 800af54:	371c      	adds	r7, #28
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
	...

0800af60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af70:	2b01      	cmp	r3, #1
 800af72:	d101      	bne.n	800af78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af74:	2302      	movs	r3, #2
 800af76:	e068      	b.n	800b04a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2202      	movs	r2, #2
 800af84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a2e      	ldr	r2, [pc, #184]	; (800b058 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d004      	beq.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a2d      	ldr	r2, [pc, #180]	; (800b05c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d108      	bne.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	4313      	orrs	r3, r2
 800afce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a1e      	ldr	r2, [pc, #120]	; (800b058 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d01d      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afea:	d018      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a1b      	ldr	r2, [pc, #108]	; (800b060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d013      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a1a      	ldr	r2, [pc, #104]	; (800b064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d00e      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a18      	ldr	r2, [pc, #96]	; (800b068 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d009      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a13      	ldr	r2, [pc, #76]	; (800b05c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d004      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a14      	ldr	r2, [pc, #80]	; (800b06c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d10c      	bne.n	800b038 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	40010000 	.word	0x40010000
 800b05c:	40010400 	.word	0x40010400
 800b060:	40000400 	.word	0x40000400
 800b064:	40000800 	.word	0x40000800
 800b068:	40000c00 	.word	0x40000c00
 800b06c:	40001800 	.word	0x40001800

0800b070 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b07a:	2300      	movs	r3, #0
 800b07c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b084:	2b01      	cmp	r3, #1
 800b086:	d101      	bne.n	800b08c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b088:	2302      	movs	r3, #2
 800b08a:	e065      	b.n	800b158 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	041b      	lsls	r3, r3, #16
 800b102:	4313      	orrs	r3, r2
 800b104:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a16      	ldr	r2, [pc, #88]	; (800b164 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d004      	beq.n	800b11a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a14      	ldr	r2, [pc, #80]	; (800b168 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d115      	bne.n	800b146 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	051b      	lsls	r3, r3, #20
 800b126:	4313      	orrs	r3, r2
 800b128:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	4313      	orrs	r3, r2
 800b136:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	40010000 	.word	0x40010000
 800b168:	40010400 	.word	0x40010400

0800b16c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e042      	b.n	800b204 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b184:	2b00      	cmp	r3, #0
 800b186:	d106      	bne.n	800b196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7f6 fd09 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2224      	movs	r2, #36	; 0x24
 800b19a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f022 0201 	bic.w	r2, r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fb60 	bl	800b874 <UART_SetConfig>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d101      	bne.n	800b1be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e022      	b.n	800b204 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f001 f8b4 	bl	800c334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	685a      	ldr	r2, [r3, #4]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f042 0201 	orr.w	r2, r2, #1
 800b1fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 f93b 	bl	800c478 <UART_CheckIdleState>
 800b202:	4603      	mov	r3, r0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	4613      	mov	r3, r2
 800b218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b220:	2b20      	cmp	r3, #32
 800b222:	d131      	bne.n	800b288 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <HAL_UART_Receive_DMA+0x24>
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e02a      	b.n	800b28a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d101      	bne.n	800b242 <HAL_UART_Receive_DMA+0x36>
 800b23e:	2302      	movs	r3, #2
 800b240:	e023      	b.n	800b28a <HAL_UART_Receive_DMA+0x7e>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2201      	movs	r2, #1
 800b246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a0f      	ldr	r2, [pc, #60]	; (800b294 <HAL_UART_Receive_DMA+0x88>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d00e      	beq.n	800b278 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d007      	beq.n	800b278 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b276:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b278:	88fb      	ldrh	r3, [r7, #6]
 800b27a:	461a      	mov	r2, r3
 800b27c:	68b9      	ldr	r1, [r7, #8]
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f001 f9c6 	bl	800c610 <UART_Start_Receive_DMA>
 800b284:	4603      	mov	r3, r0
 800b286:	e000      	b.n	800b28a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b288:	2302      	movs	r3, #2
  }
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	58000c00 	.word	0x58000c00

0800b298 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b2b8:	69fa      	ldr	r2, [r7, #28]
 800b2ba:	f640 030f 	movw	r3, #2063	; 0x80f
 800b2be:	4013      	ands	r3, r2
 800b2c0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d118      	bne.n	800b2fa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	f003 0320 	and.w	r3, r3, #32
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d013      	beq.n	800b2fa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	f003 0320 	and.w	r3, r3, #32
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d104      	bne.n	800b2e6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d009      	beq.n	800b2fa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 8282 	beq.w	800b7f4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	4798      	blx	r3
      }
      return;
 800b2f8:	e27c      	b.n	800b7f4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 80ef 	beq.w	800b4e0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b302:	697a      	ldr	r2, [r7, #20]
 800b304:	4b73      	ldr	r3, [pc, #460]	; (800b4d4 <HAL_UART_IRQHandler+0x23c>)
 800b306:	4013      	ands	r3, r2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d105      	bne.n	800b318 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	4b72      	ldr	r3, [pc, #456]	; (800b4d8 <HAL_UART_IRQHandler+0x240>)
 800b310:	4013      	ands	r3, r2
 800b312:	2b00      	cmp	r3, #0
 800b314:	f000 80e4 	beq.w	800b4e0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d010      	beq.n	800b344 <HAL_UART_IRQHandler+0xac>
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00b      	beq.n	800b344 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2201      	movs	r2, #1
 800b332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b33a:	f043 0201 	orr.w	r2, r3, #1
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	f003 0302 	and.w	r3, r3, #2
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d010      	beq.n	800b370 <HAL_UART_IRQHandler+0xd8>
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f003 0301 	and.w	r3, r3, #1
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00b      	beq.n	800b370 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2202      	movs	r2, #2
 800b35e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b366:	f043 0204 	orr.w	r2, r3, #4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	f003 0304 	and.w	r3, r3, #4
 800b376:	2b00      	cmp	r3, #0
 800b378:	d010      	beq.n	800b39c <HAL_UART_IRQHandler+0x104>
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00b      	beq.n	800b39c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2204      	movs	r2, #4
 800b38a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b392:	f043 0202 	orr.w	r2, r3, #2
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	f003 0308 	and.w	r3, r3, #8
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d015      	beq.n	800b3d2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	f003 0320 	and.w	r3, r3, #32
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d104      	bne.n	800b3ba <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	4b48      	ldr	r3, [pc, #288]	; (800b4d4 <HAL_UART_IRQHandler+0x23c>)
 800b3b4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00b      	beq.n	800b3d2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2208      	movs	r2, #8
 800b3c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3c8:	f043 0208 	orr.w	r2, r3, #8
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d011      	beq.n	800b400 <HAL_UART_IRQHandler+0x168>
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00c      	beq.n	800b400 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3f6:	f043 0220 	orr.w	r2, r3, #32
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b406:	2b00      	cmp	r3, #0
 800b408:	f000 81f6 	beq.w	800b7f8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	f003 0320 	and.w	r3, r3, #32
 800b412:	2b00      	cmp	r3, #0
 800b414:	d011      	beq.n	800b43a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	f003 0320 	and.w	r3, r3, #32
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d104      	bne.n	800b42a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b426:	2b00      	cmp	r3, #0
 800b428:	d007      	beq.n	800b43a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b440:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44c:	2b40      	cmp	r3, #64	; 0x40
 800b44e:	d004      	beq.n	800b45a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b456:	2b00      	cmp	r3, #0
 800b458:	d031      	beq.n	800b4be <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f001 f964 	bl	800c728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46a:	2b40      	cmp	r3, #64	; 0x40
 800b46c:	d123      	bne.n	800b4b6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	689a      	ldr	r2, [r3, #8]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b47c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b482:	2b00      	cmp	r3, #0
 800b484:	d013      	beq.n	800b4ae <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b48a:	4a14      	ldr	r2, [pc, #80]	; (800b4dc <HAL_UART_IRQHandler+0x244>)
 800b48c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b492:	4618      	mov	r0, r3
 800b494:	f7f8 f888 	bl	80035a8 <HAL_DMA_Abort_IT>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d017      	beq.n	800b4ce <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ac:	e00f      	b.n	800b4ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f9ca 	bl	800b848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4b4:	e00b      	b.n	800b4ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f9c6 	bl	800b848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4bc:	e007      	b.n	800b4ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f9c2 	bl	800b848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b4cc:	e194      	b.n	800b7f8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ce:	bf00      	nop
    return;
 800b4d0:	e192      	b.n	800b7f8 <HAL_UART_IRQHandler+0x560>
 800b4d2:	bf00      	nop
 800b4d4:	10000001 	.word	0x10000001
 800b4d8:	04000120 	.word	0x04000120
 800b4dc:	0800c8db 	.word	0x0800c8db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	f040 810f 	bne.w	800b708 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	f003 0310 	and.w	r3, r3, #16
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 8109 	beq.w	800b708 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	f003 0310 	and.w	r3, r3, #16
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f000 8103 	beq.w	800b708 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2210      	movs	r2, #16
 800b508:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b514:	2b40      	cmp	r3, #64	; 0x40
 800b516:	f040 80bb 	bne.w	800b690 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a96      	ldr	r2, [pc, #600]	; (800b77c <HAL_UART_IRQHandler+0x4e4>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d059      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a94      	ldr	r2, [pc, #592]	; (800b780 <HAL_UART_IRQHandler+0x4e8>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d053      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a92      	ldr	r2, [pc, #584]	; (800b784 <HAL_UART_IRQHandler+0x4ec>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d04d      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a90      	ldr	r2, [pc, #576]	; (800b788 <HAL_UART_IRQHandler+0x4f0>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d047      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a8e      	ldr	r2, [pc, #568]	; (800b78c <HAL_UART_IRQHandler+0x4f4>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d041      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a8c      	ldr	r2, [pc, #560]	; (800b790 <HAL_UART_IRQHandler+0x4f8>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d03b      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a8a      	ldr	r2, [pc, #552]	; (800b794 <HAL_UART_IRQHandler+0x4fc>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d035      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a88      	ldr	r2, [pc, #544]	; (800b798 <HAL_UART_IRQHandler+0x500>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d02f      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a86      	ldr	r2, [pc, #536]	; (800b79c <HAL_UART_IRQHandler+0x504>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d029      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a84      	ldr	r2, [pc, #528]	; (800b7a0 <HAL_UART_IRQHandler+0x508>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d023      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a82      	ldr	r2, [pc, #520]	; (800b7a4 <HAL_UART_IRQHandler+0x50c>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d01d      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a80      	ldr	r2, [pc, #512]	; (800b7a8 <HAL_UART_IRQHandler+0x510>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d017      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a7e      	ldr	r2, [pc, #504]	; (800b7ac <HAL_UART_IRQHandler+0x514>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d011      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a7c      	ldr	r2, [pc, #496]	; (800b7b0 <HAL_UART_IRQHandler+0x518>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d00b      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a7a      	ldr	r2, [pc, #488]	; (800b7b4 <HAL_UART_IRQHandler+0x51c>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d005      	beq.n	800b5da <HAL_UART_IRQHandler+0x342>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a78      	ldr	r2, [pc, #480]	; (800b7b8 <HAL_UART_IRQHandler+0x520>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d105      	bne.n	800b5e6 <HAL_UART_IRQHandler+0x34e>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	e004      	b.n	800b5f0 <HAL_UART_IRQHandler+0x358>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b5f2:	893b      	ldrh	r3, [r7, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 8101 	beq.w	800b7fc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b600:	893a      	ldrh	r2, [r7, #8]
 800b602:	429a      	cmp	r2, r3
 800b604:	f080 80fa 	bcs.w	800b7fc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	893a      	ldrh	r2, [r7, #8]
 800b60c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b61a:	d02b      	beq.n	800b674 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b62a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689a      	ldr	r2, [r3, #8]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f022 0201 	bic.w	r2, r2, #1
 800b63a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689a      	ldr	r2, [r3, #8]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b64a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2220      	movs	r2, #32
 800b650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0210 	bic.w	r2, r2, #16
 800b668:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b66e:	4618      	mov	r0, r3
 800b670:	f7f7 fc7c 	bl	8002f6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b680:	b29b      	uxth	r3, r3
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	b29b      	uxth	r3, r3
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f8e7 	bl	800b85c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b68e:	e0b5      	b.n	800b7fc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 80a8 	beq.w	800b800 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b6b0:	897b      	ldrh	r3, [r7, #10]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 80a4 	beq.w	800b800 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b6c6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6899      	ldr	r1, [r3, #8]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	4b3a      	ldr	r3, [pc, #232]	; (800b7bc <HAL_UART_IRQHandler+0x524>)
 800b6d4:	400b      	ands	r3, r1
 800b6d6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2220      	movs	r2, #32
 800b6dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f022 0210 	bic.w	r2, r2, #16
 800b6fa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6fc:	897b      	ldrh	r3, [r7, #10]
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f8ab 	bl	800b85c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b706:	e07b      	b.n	800b800 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00d      	beq.n	800b72e <HAL_UART_IRQHandler+0x496>
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d008      	beq.n	800b72e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b724:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f001 f907 	bl	800c93a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b72c:	e06b      	b.n	800b806 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b734:	2b00      	cmp	r3, #0
 800b736:	d012      	beq.n	800b75e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d104      	bne.n	800b74c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d008      	beq.n	800b75e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b750:	2b00      	cmp	r3, #0
 800b752:	d057      	beq.n	800b804 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	4798      	blx	r3
    }
    return;
 800b75c:	e052      	b.n	800b804 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b764:	2b00      	cmp	r3, #0
 800b766:	d02b      	beq.n	800b7c0 <HAL_UART_IRQHandler+0x528>
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d026      	beq.n	800b7c0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f001 f8c7 	bl	800c906 <UART_EndTransmit_IT>
    return;
 800b778:	e045      	b.n	800b806 <HAL_UART_IRQHandler+0x56e>
 800b77a:	bf00      	nop
 800b77c:	40020010 	.word	0x40020010
 800b780:	40020028 	.word	0x40020028
 800b784:	40020040 	.word	0x40020040
 800b788:	40020058 	.word	0x40020058
 800b78c:	40020070 	.word	0x40020070
 800b790:	40020088 	.word	0x40020088
 800b794:	400200a0 	.word	0x400200a0
 800b798:	400200b8 	.word	0x400200b8
 800b79c:	40020410 	.word	0x40020410
 800b7a0:	40020428 	.word	0x40020428
 800b7a4:	40020440 	.word	0x40020440
 800b7a8:	40020458 	.word	0x40020458
 800b7ac:	40020470 	.word	0x40020470
 800b7b0:	40020488 	.word	0x40020488
 800b7b4:	400204a0 	.word	0x400204a0
 800b7b8:	400204b8 	.word	0x400204b8
 800b7bc:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d008      	beq.n	800b7dc <HAL_UART_IRQHandler+0x544>
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f001 f8c4 	bl	800c962 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7da:	e014      	b.n	800b806 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00f      	beq.n	800b806 <HAL_UART_IRQHandler+0x56e>
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	da0c      	bge.n	800b806 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f001 f8ae 	bl	800c94e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7f2:	e008      	b.n	800b806 <HAL_UART_IRQHandler+0x56e>
      return;
 800b7f4:	bf00      	nop
 800b7f6:	e006      	b.n	800b806 <HAL_UART_IRQHandler+0x56e>
    return;
 800b7f8:	bf00      	nop
 800b7fa:	e004      	b.n	800b806 <HAL_UART_IRQHandler+0x56e>
      return;
 800b7fc:	bf00      	nop
 800b7fe:	e002      	b.n	800b806 <HAL_UART_IRQHandler+0x56e>
      return;
 800b800:	bf00      	nop
 800b802:	e000      	b.n	800b806 <HAL_UART_IRQHandler+0x56e>
    return;
 800b804:	bf00      	nop
  }
}
 800b806:	3720      	adds	r7, #32
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	460b      	mov	r3, r1
 800b866:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b868:	bf00      	nop
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b874:	b5b0      	push	{r4, r5, r7, lr}
 800b876:	b08e      	sub	sp, #56	; 0x38
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	689a      	ldr	r2, [r3, #8]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	431a      	orrs	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	431a      	orrs	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	69db      	ldr	r3, [r3, #28]
 800b896:	4313      	orrs	r3, r2
 800b898:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	4bbf      	ldr	r3, [pc, #764]	; (800bba0 <UART_SetConfig+0x32c>)
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	6812      	ldr	r2, [r2, #0]
 800b8a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8aa:	430b      	orrs	r3, r1
 800b8ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	68da      	ldr	r2, [r3, #12]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	430a      	orrs	r2, r1
 800b8c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4ab5      	ldr	r2, [pc, #724]	; (800bba4 <UART_SetConfig+0x330>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d004      	beq.n	800b8de <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	689a      	ldr	r2, [r3, #8]
 800b8e4:	4bb0      	ldr	r3, [pc, #704]	; (800bba8 <UART_SetConfig+0x334>)
 800b8e6:	4013      	ands	r3, r2
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	6812      	ldr	r2, [r2, #0]
 800b8ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f8:	f023 010f 	bic.w	r1, r3, #15
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4aa7      	ldr	r2, [pc, #668]	; (800bbac <UART_SetConfig+0x338>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d176      	bne.n	800ba00 <UART_SetConfig+0x18c>
 800b912:	4ba7      	ldr	r3, [pc, #668]	; (800bbb0 <UART_SetConfig+0x33c>)
 800b914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b91a:	2b28      	cmp	r3, #40	; 0x28
 800b91c:	d86c      	bhi.n	800b9f8 <UART_SetConfig+0x184>
 800b91e:	a201      	add	r2, pc, #4	; (adr r2, 800b924 <UART_SetConfig+0xb0>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b9c9 	.word	0x0800b9c9
 800b928:	0800b9f9 	.word	0x0800b9f9
 800b92c:	0800b9f9 	.word	0x0800b9f9
 800b930:	0800b9f9 	.word	0x0800b9f9
 800b934:	0800b9f9 	.word	0x0800b9f9
 800b938:	0800b9f9 	.word	0x0800b9f9
 800b93c:	0800b9f9 	.word	0x0800b9f9
 800b940:	0800b9f9 	.word	0x0800b9f9
 800b944:	0800b9d1 	.word	0x0800b9d1
 800b948:	0800b9f9 	.word	0x0800b9f9
 800b94c:	0800b9f9 	.word	0x0800b9f9
 800b950:	0800b9f9 	.word	0x0800b9f9
 800b954:	0800b9f9 	.word	0x0800b9f9
 800b958:	0800b9f9 	.word	0x0800b9f9
 800b95c:	0800b9f9 	.word	0x0800b9f9
 800b960:	0800b9f9 	.word	0x0800b9f9
 800b964:	0800b9d9 	.word	0x0800b9d9
 800b968:	0800b9f9 	.word	0x0800b9f9
 800b96c:	0800b9f9 	.word	0x0800b9f9
 800b970:	0800b9f9 	.word	0x0800b9f9
 800b974:	0800b9f9 	.word	0x0800b9f9
 800b978:	0800b9f9 	.word	0x0800b9f9
 800b97c:	0800b9f9 	.word	0x0800b9f9
 800b980:	0800b9f9 	.word	0x0800b9f9
 800b984:	0800b9e1 	.word	0x0800b9e1
 800b988:	0800b9f9 	.word	0x0800b9f9
 800b98c:	0800b9f9 	.word	0x0800b9f9
 800b990:	0800b9f9 	.word	0x0800b9f9
 800b994:	0800b9f9 	.word	0x0800b9f9
 800b998:	0800b9f9 	.word	0x0800b9f9
 800b99c:	0800b9f9 	.word	0x0800b9f9
 800b9a0:	0800b9f9 	.word	0x0800b9f9
 800b9a4:	0800b9e9 	.word	0x0800b9e9
 800b9a8:	0800b9f9 	.word	0x0800b9f9
 800b9ac:	0800b9f9 	.word	0x0800b9f9
 800b9b0:	0800b9f9 	.word	0x0800b9f9
 800b9b4:	0800b9f9 	.word	0x0800b9f9
 800b9b8:	0800b9f9 	.word	0x0800b9f9
 800b9bc:	0800b9f9 	.word	0x0800b9f9
 800b9c0:	0800b9f9 	.word	0x0800b9f9
 800b9c4:	0800b9f1 	.word	0x0800b9f1
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ce:	e222      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9d0:	2304      	movs	r3, #4
 800b9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9d6:	e21e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9d8:	2308      	movs	r3, #8
 800b9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9de:	e21a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9e0:	2310      	movs	r3, #16
 800b9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9e6:	e216      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9e8:	2320      	movs	r3, #32
 800b9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ee:	e212      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9f0:	2340      	movs	r3, #64	; 0x40
 800b9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9f6:	e20e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9f8:	2380      	movs	r3, #128	; 0x80
 800b9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9fe:	e20a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a6b      	ldr	r2, [pc, #428]	; (800bbb4 <UART_SetConfig+0x340>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d130      	bne.n	800ba6c <UART_SetConfig+0x1f8>
 800ba0a:	4b69      	ldr	r3, [pc, #420]	; (800bbb0 <UART_SetConfig+0x33c>)
 800ba0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0e:	f003 0307 	and.w	r3, r3, #7
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	d826      	bhi.n	800ba64 <UART_SetConfig+0x1f0>
 800ba16:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <UART_SetConfig+0x1a8>)
 800ba18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1c:	0800ba35 	.word	0x0800ba35
 800ba20:	0800ba3d 	.word	0x0800ba3d
 800ba24:	0800ba45 	.word	0x0800ba45
 800ba28:	0800ba4d 	.word	0x0800ba4d
 800ba2c:	0800ba55 	.word	0x0800ba55
 800ba30:	0800ba5d 	.word	0x0800ba5d
 800ba34:	2300      	movs	r3, #0
 800ba36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba3a:	e1ec      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba3c:	2304      	movs	r3, #4
 800ba3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba42:	e1e8      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba44:	2308      	movs	r3, #8
 800ba46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba4a:	e1e4      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba4c:	2310      	movs	r3, #16
 800ba4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba52:	e1e0      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba54:	2320      	movs	r3, #32
 800ba56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba5a:	e1dc      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba5c:	2340      	movs	r3, #64	; 0x40
 800ba5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba62:	e1d8      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba64:	2380      	movs	r3, #128	; 0x80
 800ba66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba6a:	e1d4      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a51      	ldr	r2, [pc, #324]	; (800bbb8 <UART_SetConfig+0x344>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d130      	bne.n	800bad8 <UART_SetConfig+0x264>
 800ba76:	4b4e      	ldr	r3, [pc, #312]	; (800bbb0 <UART_SetConfig+0x33c>)
 800ba78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba7a:	f003 0307 	and.w	r3, r3, #7
 800ba7e:	2b05      	cmp	r3, #5
 800ba80:	d826      	bhi.n	800bad0 <UART_SetConfig+0x25c>
 800ba82:	a201      	add	r2, pc, #4	; (adr r2, 800ba88 <UART_SetConfig+0x214>)
 800ba84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba88:	0800baa1 	.word	0x0800baa1
 800ba8c:	0800baa9 	.word	0x0800baa9
 800ba90:	0800bab1 	.word	0x0800bab1
 800ba94:	0800bab9 	.word	0x0800bab9
 800ba98:	0800bac1 	.word	0x0800bac1
 800ba9c:	0800bac9 	.word	0x0800bac9
 800baa0:	2300      	movs	r3, #0
 800baa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa6:	e1b6      	b.n	800be16 <UART_SetConfig+0x5a2>
 800baa8:	2304      	movs	r3, #4
 800baaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baae:	e1b2      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bab0:	2308      	movs	r3, #8
 800bab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab6:	e1ae      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bab8:	2310      	movs	r3, #16
 800baba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800babe:	e1aa      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bac0:	2320      	movs	r3, #32
 800bac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bac6:	e1a6      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bac8:	2340      	movs	r3, #64	; 0x40
 800baca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bace:	e1a2      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bad0:	2380      	movs	r3, #128	; 0x80
 800bad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bad6:	e19e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a37      	ldr	r2, [pc, #220]	; (800bbbc <UART_SetConfig+0x348>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d130      	bne.n	800bb44 <UART_SetConfig+0x2d0>
 800bae2:	4b33      	ldr	r3, [pc, #204]	; (800bbb0 <UART_SetConfig+0x33c>)
 800bae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae6:	f003 0307 	and.w	r3, r3, #7
 800baea:	2b05      	cmp	r3, #5
 800baec:	d826      	bhi.n	800bb3c <UART_SetConfig+0x2c8>
 800baee:	a201      	add	r2, pc, #4	; (adr r2, 800baf4 <UART_SetConfig+0x280>)
 800baf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf4:	0800bb0d 	.word	0x0800bb0d
 800baf8:	0800bb15 	.word	0x0800bb15
 800bafc:	0800bb1d 	.word	0x0800bb1d
 800bb00:	0800bb25 	.word	0x0800bb25
 800bb04:	0800bb2d 	.word	0x0800bb2d
 800bb08:	0800bb35 	.word	0x0800bb35
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb12:	e180      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb14:	2304      	movs	r3, #4
 800bb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1a:	e17c      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb1c:	2308      	movs	r3, #8
 800bb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb22:	e178      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb24:	2310      	movs	r3, #16
 800bb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb2a:	e174      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb2c:	2320      	movs	r3, #32
 800bb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb32:	e170      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb34:	2340      	movs	r3, #64	; 0x40
 800bb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb3a:	e16c      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb3c:	2380      	movs	r3, #128	; 0x80
 800bb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb42:	e168      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a1d      	ldr	r2, [pc, #116]	; (800bbc0 <UART_SetConfig+0x34c>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d142      	bne.n	800bbd4 <UART_SetConfig+0x360>
 800bb4e:	4b18      	ldr	r3, [pc, #96]	; (800bbb0 <UART_SetConfig+0x33c>)
 800bb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb52:	f003 0307 	and.w	r3, r3, #7
 800bb56:	2b05      	cmp	r3, #5
 800bb58:	d838      	bhi.n	800bbcc <UART_SetConfig+0x358>
 800bb5a:	a201      	add	r2, pc, #4	; (adr r2, 800bb60 <UART_SetConfig+0x2ec>)
 800bb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb60:	0800bb79 	.word	0x0800bb79
 800bb64:	0800bb81 	.word	0x0800bb81
 800bb68:	0800bb89 	.word	0x0800bb89
 800bb6c:	0800bb91 	.word	0x0800bb91
 800bb70:	0800bb99 	.word	0x0800bb99
 800bb74:	0800bbc5 	.word	0x0800bbc5
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb7e:	e14a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb80:	2304      	movs	r3, #4
 800bb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb86:	e146      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb88:	2308      	movs	r3, #8
 800bb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb8e:	e142      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb90:	2310      	movs	r3, #16
 800bb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb96:	e13e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb98:	2320      	movs	r3, #32
 800bb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb9e:	e13a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bba0:	cfff69f3 	.word	0xcfff69f3
 800bba4:	58000c00 	.word	0x58000c00
 800bba8:	11fff4ff 	.word	0x11fff4ff
 800bbac:	40011000 	.word	0x40011000
 800bbb0:	58024400 	.word	0x58024400
 800bbb4:	40004400 	.word	0x40004400
 800bbb8:	40004800 	.word	0x40004800
 800bbbc:	40004c00 	.word	0x40004c00
 800bbc0:	40005000 	.word	0x40005000
 800bbc4:	2340      	movs	r3, #64	; 0x40
 800bbc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbca:	e124      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bbcc:	2380      	movs	r3, #128	; 0x80
 800bbce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbd2:	e120      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4acc      	ldr	r2, [pc, #816]	; (800bf0c <UART_SetConfig+0x698>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d176      	bne.n	800bccc <UART_SetConfig+0x458>
 800bbde:	4bcc      	ldr	r3, [pc, #816]	; (800bf10 <UART_SetConfig+0x69c>)
 800bbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbe6:	2b28      	cmp	r3, #40	; 0x28
 800bbe8:	d86c      	bhi.n	800bcc4 <UART_SetConfig+0x450>
 800bbea:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <UART_SetConfig+0x37c>)
 800bbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf0:	0800bc95 	.word	0x0800bc95
 800bbf4:	0800bcc5 	.word	0x0800bcc5
 800bbf8:	0800bcc5 	.word	0x0800bcc5
 800bbfc:	0800bcc5 	.word	0x0800bcc5
 800bc00:	0800bcc5 	.word	0x0800bcc5
 800bc04:	0800bcc5 	.word	0x0800bcc5
 800bc08:	0800bcc5 	.word	0x0800bcc5
 800bc0c:	0800bcc5 	.word	0x0800bcc5
 800bc10:	0800bc9d 	.word	0x0800bc9d
 800bc14:	0800bcc5 	.word	0x0800bcc5
 800bc18:	0800bcc5 	.word	0x0800bcc5
 800bc1c:	0800bcc5 	.word	0x0800bcc5
 800bc20:	0800bcc5 	.word	0x0800bcc5
 800bc24:	0800bcc5 	.word	0x0800bcc5
 800bc28:	0800bcc5 	.word	0x0800bcc5
 800bc2c:	0800bcc5 	.word	0x0800bcc5
 800bc30:	0800bca5 	.word	0x0800bca5
 800bc34:	0800bcc5 	.word	0x0800bcc5
 800bc38:	0800bcc5 	.word	0x0800bcc5
 800bc3c:	0800bcc5 	.word	0x0800bcc5
 800bc40:	0800bcc5 	.word	0x0800bcc5
 800bc44:	0800bcc5 	.word	0x0800bcc5
 800bc48:	0800bcc5 	.word	0x0800bcc5
 800bc4c:	0800bcc5 	.word	0x0800bcc5
 800bc50:	0800bcad 	.word	0x0800bcad
 800bc54:	0800bcc5 	.word	0x0800bcc5
 800bc58:	0800bcc5 	.word	0x0800bcc5
 800bc5c:	0800bcc5 	.word	0x0800bcc5
 800bc60:	0800bcc5 	.word	0x0800bcc5
 800bc64:	0800bcc5 	.word	0x0800bcc5
 800bc68:	0800bcc5 	.word	0x0800bcc5
 800bc6c:	0800bcc5 	.word	0x0800bcc5
 800bc70:	0800bcb5 	.word	0x0800bcb5
 800bc74:	0800bcc5 	.word	0x0800bcc5
 800bc78:	0800bcc5 	.word	0x0800bcc5
 800bc7c:	0800bcc5 	.word	0x0800bcc5
 800bc80:	0800bcc5 	.word	0x0800bcc5
 800bc84:	0800bcc5 	.word	0x0800bcc5
 800bc88:	0800bcc5 	.word	0x0800bcc5
 800bc8c:	0800bcc5 	.word	0x0800bcc5
 800bc90:	0800bcbd 	.word	0x0800bcbd
 800bc94:	2301      	movs	r3, #1
 800bc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9a:	e0bc      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bc9c:	2304      	movs	r3, #4
 800bc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca2:	e0b8      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bca4:	2308      	movs	r3, #8
 800bca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcaa:	e0b4      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bcac:	2310      	movs	r3, #16
 800bcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb2:	e0b0      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bcb4:	2320      	movs	r3, #32
 800bcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcba:	e0ac      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bcbc:	2340      	movs	r3, #64	; 0x40
 800bcbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcc2:	e0a8      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bcc4:	2380      	movs	r3, #128	; 0x80
 800bcc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcca:	e0a4      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a90      	ldr	r2, [pc, #576]	; (800bf14 <UART_SetConfig+0x6a0>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d130      	bne.n	800bd38 <UART_SetConfig+0x4c4>
 800bcd6:	4b8e      	ldr	r3, [pc, #568]	; (800bf10 <UART_SetConfig+0x69c>)
 800bcd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcda:	f003 0307 	and.w	r3, r3, #7
 800bcde:	2b05      	cmp	r3, #5
 800bce0:	d826      	bhi.n	800bd30 <UART_SetConfig+0x4bc>
 800bce2:	a201      	add	r2, pc, #4	; (adr r2, 800bce8 <UART_SetConfig+0x474>)
 800bce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce8:	0800bd01 	.word	0x0800bd01
 800bcec:	0800bd09 	.word	0x0800bd09
 800bcf0:	0800bd11 	.word	0x0800bd11
 800bcf4:	0800bd19 	.word	0x0800bd19
 800bcf8:	0800bd21 	.word	0x0800bd21
 800bcfc:	0800bd29 	.word	0x0800bd29
 800bd00:	2300      	movs	r3, #0
 800bd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd06:	e086      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd08:	2304      	movs	r3, #4
 800bd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0e:	e082      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd10:	2308      	movs	r3, #8
 800bd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd16:	e07e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd18:	2310      	movs	r3, #16
 800bd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd1e:	e07a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd20:	2320      	movs	r3, #32
 800bd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd26:	e076      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd28:	2340      	movs	r3, #64	; 0x40
 800bd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd2e:	e072      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd30:	2380      	movs	r3, #128	; 0x80
 800bd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd36:	e06e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a76      	ldr	r2, [pc, #472]	; (800bf18 <UART_SetConfig+0x6a4>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d130      	bne.n	800bda4 <UART_SetConfig+0x530>
 800bd42:	4b73      	ldr	r3, [pc, #460]	; (800bf10 <UART_SetConfig+0x69c>)
 800bd44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd46:	f003 0307 	and.w	r3, r3, #7
 800bd4a:	2b05      	cmp	r3, #5
 800bd4c:	d826      	bhi.n	800bd9c <UART_SetConfig+0x528>
 800bd4e:	a201      	add	r2, pc, #4	; (adr r2, 800bd54 <UART_SetConfig+0x4e0>)
 800bd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd54:	0800bd6d 	.word	0x0800bd6d
 800bd58:	0800bd75 	.word	0x0800bd75
 800bd5c:	0800bd7d 	.word	0x0800bd7d
 800bd60:	0800bd85 	.word	0x0800bd85
 800bd64:	0800bd8d 	.word	0x0800bd8d
 800bd68:	0800bd95 	.word	0x0800bd95
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd72:	e050      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd74:	2304      	movs	r3, #4
 800bd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7a:	e04c      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd7c:	2308      	movs	r3, #8
 800bd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd82:	e048      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd84:	2310      	movs	r3, #16
 800bd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd8a:	e044      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd8c:	2320      	movs	r3, #32
 800bd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd92:	e040      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd94:	2340      	movs	r3, #64	; 0x40
 800bd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd9a:	e03c      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd9c:	2380      	movs	r3, #128	; 0x80
 800bd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bda2:	e038      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a5c      	ldr	r2, [pc, #368]	; (800bf1c <UART_SetConfig+0x6a8>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d130      	bne.n	800be10 <UART_SetConfig+0x59c>
 800bdae:	4b58      	ldr	r3, [pc, #352]	; (800bf10 <UART_SetConfig+0x69c>)
 800bdb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb2:	f003 0307 	and.w	r3, r3, #7
 800bdb6:	2b05      	cmp	r3, #5
 800bdb8:	d826      	bhi.n	800be08 <UART_SetConfig+0x594>
 800bdba:	a201      	add	r2, pc, #4	; (adr r2, 800bdc0 <UART_SetConfig+0x54c>)
 800bdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc0:	0800bdd9 	.word	0x0800bdd9
 800bdc4:	0800bde1 	.word	0x0800bde1
 800bdc8:	0800bde9 	.word	0x0800bde9
 800bdcc:	0800bdf1 	.word	0x0800bdf1
 800bdd0:	0800bdf9 	.word	0x0800bdf9
 800bdd4:	0800be01 	.word	0x0800be01
 800bdd8:	2302      	movs	r3, #2
 800bdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdde:	e01a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bde0:	2304      	movs	r3, #4
 800bde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bde6:	e016      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bde8:	2308      	movs	r3, #8
 800bdea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdee:	e012      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bdf0:	2310      	movs	r3, #16
 800bdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdf6:	e00e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bdf8:	2320      	movs	r3, #32
 800bdfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdfe:	e00a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800be00:	2340      	movs	r3, #64	; 0x40
 800be02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be06:	e006      	b.n	800be16 <UART_SetConfig+0x5a2>
 800be08:	2380      	movs	r3, #128	; 0x80
 800be0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be0e:	e002      	b.n	800be16 <UART_SetConfig+0x5a2>
 800be10:	2380      	movs	r3, #128	; 0x80
 800be12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a40      	ldr	r2, [pc, #256]	; (800bf1c <UART_SetConfig+0x6a8>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	f040 80ef 	bne.w	800c000 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800be22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be26:	2b20      	cmp	r3, #32
 800be28:	dc46      	bgt.n	800beb8 <UART_SetConfig+0x644>
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	f2c0 8081 	blt.w	800bf32 <UART_SetConfig+0x6be>
 800be30:	3b02      	subs	r3, #2
 800be32:	2b1e      	cmp	r3, #30
 800be34:	d87d      	bhi.n	800bf32 <UART_SetConfig+0x6be>
 800be36:	a201      	add	r2, pc, #4	; (adr r2, 800be3c <UART_SetConfig+0x5c8>)
 800be38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3c:	0800bebf 	.word	0x0800bebf
 800be40:	0800bf33 	.word	0x0800bf33
 800be44:	0800bec7 	.word	0x0800bec7
 800be48:	0800bf33 	.word	0x0800bf33
 800be4c:	0800bf33 	.word	0x0800bf33
 800be50:	0800bf33 	.word	0x0800bf33
 800be54:	0800bed7 	.word	0x0800bed7
 800be58:	0800bf33 	.word	0x0800bf33
 800be5c:	0800bf33 	.word	0x0800bf33
 800be60:	0800bf33 	.word	0x0800bf33
 800be64:	0800bf33 	.word	0x0800bf33
 800be68:	0800bf33 	.word	0x0800bf33
 800be6c:	0800bf33 	.word	0x0800bf33
 800be70:	0800bf33 	.word	0x0800bf33
 800be74:	0800bee7 	.word	0x0800bee7
 800be78:	0800bf33 	.word	0x0800bf33
 800be7c:	0800bf33 	.word	0x0800bf33
 800be80:	0800bf33 	.word	0x0800bf33
 800be84:	0800bf33 	.word	0x0800bf33
 800be88:	0800bf33 	.word	0x0800bf33
 800be8c:	0800bf33 	.word	0x0800bf33
 800be90:	0800bf33 	.word	0x0800bf33
 800be94:	0800bf33 	.word	0x0800bf33
 800be98:	0800bf33 	.word	0x0800bf33
 800be9c:	0800bf33 	.word	0x0800bf33
 800bea0:	0800bf33 	.word	0x0800bf33
 800bea4:	0800bf33 	.word	0x0800bf33
 800bea8:	0800bf33 	.word	0x0800bf33
 800beac:	0800bf33 	.word	0x0800bf33
 800beb0:	0800bf33 	.word	0x0800bf33
 800beb4:	0800bf25 	.word	0x0800bf25
 800beb8:	2b40      	cmp	r3, #64	; 0x40
 800beba:	d036      	beq.n	800bf2a <UART_SetConfig+0x6b6>
 800bebc:	e039      	b.n	800bf32 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bebe:	f7fb ff89 	bl	8007dd4 <HAL_RCCEx_GetD3PCLK1Freq>
 800bec2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bec4:	e03b      	b.n	800bf3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bec6:	f107 0314 	add.w	r3, r7, #20
 800beca:	4618      	mov	r0, r3
 800becc:	f7fb ff98 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bed4:	e033      	b.n	800bf3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bed6:	f107 0308 	add.w	r3, r7, #8
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fc f8e4 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bee4:	e02b      	b.n	800bf3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bee6:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <UART_SetConfig+0x69c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 0320 	and.w	r3, r3, #32
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d009      	beq.n	800bf06 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bef2:	4b07      	ldr	r3, [pc, #28]	; (800bf10 <UART_SetConfig+0x69c>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	08db      	lsrs	r3, r3, #3
 800bef8:	f003 0303 	and.w	r3, r3, #3
 800befc:	4a08      	ldr	r2, [pc, #32]	; (800bf20 <UART_SetConfig+0x6ac>)
 800befe:	fa22 f303 	lsr.w	r3, r2, r3
 800bf02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf04:	e01b      	b.n	800bf3e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800bf06:	4b06      	ldr	r3, [pc, #24]	; (800bf20 <UART_SetConfig+0x6ac>)
 800bf08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf0a:	e018      	b.n	800bf3e <UART_SetConfig+0x6ca>
 800bf0c:	40011400 	.word	0x40011400
 800bf10:	58024400 	.word	0x58024400
 800bf14:	40007800 	.word	0x40007800
 800bf18:	40007c00 	.word	0x40007c00
 800bf1c:	58000c00 	.word	0x58000c00
 800bf20:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf24:	4bc4      	ldr	r3, [pc, #784]	; (800c238 <UART_SetConfig+0x9c4>)
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf28:	e009      	b.n	800bf3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf30:	e005      	b.n	800bf3e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800bf32:	2300      	movs	r3, #0
 800bf34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bf3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 81da 	beq.w	800c2fa <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4a:	4abc      	ldr	r2, [pc, #752]	; (800c23c <UART_SetConfig+0x9c8>)
 800bf4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf50:	461a      	mov	r2, r3
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf58:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685a      	ldr	r2, [r3, #4]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	4413      	add	r3, r2
 800bf64:	6a3a      	ldr	r2, [r7, #32]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d305      	bcc.n	800bf76 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf70:	6a3a      	ldr	r2, [r7, #32]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d903      	bls.n	800bf7e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf7c:	e1bd      	b.n	800c2fa <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	4618      	mov	r0, r3
 800bf82:	f04f 0100 	mov.w	r1, #0
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8a:	4aac      	ldr	r2, [pc, #688]	; (800c23c <UART_SetConfig+0x9c8>)
 800bf8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	f04f 0300 	mov.w	r3, #0
 800bf96:	f7f4 f99f 	bl	80002d8 <__aeabi_uldivmod>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	f04f 0200 	mov.w	r2, #0
 800bfa6:	f04f 0300 	mov.w	r3, #0
 800bfaa:	020b      	lsls	r3, r1, #8
 800bfac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bfb0:	0202      	lsls	r2, r0, #8
 800bfb2:	6879      	ldr	r1, [r7, #4]
 800bfb4:	6849      	ldr	r1, [r1, #4]
 800bfb6:	0849      	lsrs	r1, r1, #1
 800bfb8:	4608      	mov	r0, r1
 800bfba:	f04f 0100 	mov.w	r1, #0
 800bfbe:	1814      	adds	r4, r2, r0
 800bfc0:	eb43 0501 	adc.w	r5, r3, r1
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	f04f 0300 	mov.w	r3, #0
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 f981 	bl	80002d8 <__aeabi_uldivmod>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4613      	mov	r3, r2
 800bfdc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfe4:	d308      	bcc.n	800bff8 <UART_SetConfig+0x784>
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfec:	d204      	bcs.n	800bff8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bff4:	60da      	str	r2, [r3, #12]
 800bff6:	e180      	b.n	800c2fa <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bffe:	e17c      	b.n	800c2fa <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	69db      	ldr	r3, [r3, #28]
 800c004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c008:	f040 80bf 	bne.w	800c18a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c00c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c010:	2b20      	cmp	r3, #32
 800c012:	dc49      	bgt.n	800c0a8 <UART_SetConfig+0x834>
 800c014:	2b00      	cmp	r3, #0
 800c016:	db7c      	blt.n	800c112 <UART_SetConfig+0x89e>
 800c018:	2b20      	cmp	r3, #32
 800c01a:	d87a      	bhi.n	800c112 <UART_SetConfig+0x89e>
 800c01c:	a201      	add	r2, pc, #4	; (adr r2, 800c024 <UART_SetConfig+0x7b0>)
 800c01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c022:	bf00      	nop
 800c024:	0800c0af 	.word	0x0800c0af
 800c028:	0800c0b7 	.word	0x0800c0b7
 800c02c:	0800c113 	.word	0x0800c113
 800c030:	0800c113 	.word	0x0800c113
 800c034:	0800c0bf 	.word	0x0800c0bf
 800c038:	0800c113 	.word	0x0800c113
 800c03c:	0800c113 	.word	0x0800c113
 800c040:	0800c113 	.word	0x0800c113
 800c044:	0800c0cf 	.word	0x0800c0cf
 800c048:	0800c113 	.word	0x0800c113
 800c04c:	0800c113 	.word	0x0800c113
 800c050:	0800c113 	.word	0x0800c113
 800c054:	0800c113 	.word	0x0800c113
 800c058:	0800c113 	.word	0x0800c113
 800c05c:	0800c113 	.word	0x0800c113
 800c060:	0800c113 	.word	0x0800c113
 800c064:	0800c0df 	.word	0x0800c0df
 800c068:	0800c113 	.word	0x0800c113
 800c06c:	0800c113 	.word	0x0800c113
 800c070:	0800c113 	.word	0x0800c113
 800c074:	0800c113 	.word	0x0800c113
 800c078:	0800c113 	.word	0x0800c113
 800c07c:	0800c113 	.word	0x0800c113
 800c080:	0800c113 	.word	0x0800c113
 800c084:	0800c113 	.word	0x0800c113
 800c088:	0800c113 	.word	0x0800c113
 800c08c:	0800c113 	.word	0x0800c113
 800c090:	0800c113 	.word	0x0800c113
 800c094:	0800c113 	.word	0x0800c113
 800c098:	0800c113 	.word	0x0800c113
 800c09c:	0800c113 	.word	0x0800c113
 800c0a0:	0800c113 	.word	0x0800c113
 800c0a4:	0800c105 	.word	0x0800c105
 800c0a8:	2b40      	cmp	r3, #64	; 0x40
 800c0aa:	d02e      	beq.n	800c10a <UART_SetConfig+0x896>
 800c0ac:	e031      	b.n	800c112 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0ae:	f7fa ff25 	bl	8006efc <HAL_RCC_GetPCLK1Freq>
 800c0b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c0b4:	e033      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0b6:	f7fa ff37 	bl	8006f28 <HAL_RCC_GetPCLK2Freq>
 800c0ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c0bc:	e02f      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0be:	f107 0314 	add.w	r3, r7, #20
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fb fe9c 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0cc:	e027      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0ce:	f107 0308 	add.w	r3, r7, #8
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fb ffe8 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0dc:	e01f      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0de:	4b58      	ldr	r3, [pc, #352]	; (800c240 <UART_SetConfig+0x9cc>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 0320 	and.w	r3, r3, #32
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d009      	beq.n	800c0fe <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0ea:	4b55      	ldr	r3, [pc, #340]	; (800c240 <UART_SetConfig+0x9cc>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	08db      	lsrs	r3, r3, #3
 800c0f0:	f003 0303 	and.w	r3, r3, #3
 800c0f4:	4a53      	ldr	r2, [pc, #332]	; (800c244 <UART_SetConfig+0x9d0>)
 800c0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0fc:	e00f      	b.n	800c11e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c0fe:	4b51      	ldr	r3, [pc, #324]	; (800c244 <UART_SetConfig+0x9d0>)
 800c100:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c102:	e00c      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c104:	4b4c      	ldr	r3, [pc, #304]	; (800c238 <UART_SetConfig+0x9c4>)
 800c106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c108:	e009      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c10a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c10e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c110:	e005      	b.n	800c11e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c112:	2300      	movs	r3, #0
 800c114:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c11c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 80ea 	beq.w	800c2fa <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12a:	4a44      	ldr	r2, [pc, #272]	; (800c23c <UART_SetConfig+0x9c8>)
 800c12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c130:	461a      	mov	r2, r3
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c134:	fbb3 f3f2 	udiv	r3, r3, r2
 800c138:	005a      	lsls	r2, r3, #1
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	085b      	lsrs	r3, r3, #1
 800c140:	441a      	add	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	fbb2 f3f3 	udiv	r3, r2, r3
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c150:	2b0f      	cmp	r3, #15
 800c152:	d916      	bls.n	800c182 <UART_SetConfig+0x90e>
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c15a:	d212      	bcs.n	800c182 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15e:	b29b      	uxth	r3, r3
 800c160:	f023 030f 	bic.w	r3, r3, #15
 800c164:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	085b      	lsrs	r3, r3, #1
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	f003 0307 	and.w	r3, r3, #7
 800c170:	b29a      	uxth	r2, r3
 800c172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c174:	4313      	orrs	r3, r2
 800c176:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c17e:	60da      	str	r2, [r3, #12]
 800c180:	e0bb      	b.n	800c2fa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c188:	e0b7      	b.n	800c2fa <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c18a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c18e:	2b20      	cmp	r3, #32
 800c190:	dc4a      	bgt.n	800c228 <UART_SetConfig+0x9b4>
 800c192:	2b00      	cmp	r3, #0
 800c194:	f2c0 8086 	blt.w	800c2a4 <UART_SetConfig+0xa30>
 800c198:	2b20      	cmp	r3, #32
 800c19a:	f200 8083 	bhi.w	800c2a4 <UART_SetConfig+0xa30>
 800c19e:	a201      	add	r2, pc, #4	; (adr r2, 800c1a4 <UART_SetConfig+0x930>)
 800c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a4:	0800c22f 	.word	0x0800c22f
 800c1a8:	0800c249 	.word	0x0800c249
 800c1ac:	0800c2a5 	.word	0x0800c2a5
 800c1b0:	0800c2a5 	.word	0x0800c2a5
 800c1b4:	0800c251 	.word	0x0800c251
 800c1b8:	0800c2a5 	.word	0x0800c2a5
 800c1bc:	0800c2a5 	.word	0x0800c2a5
 800c1c0:	0800c2a5 	.word	0x0800c2a5
 800c1c4:	0800c261 	.word	0x0800c261
 800c1c8:	0800c2a5 	.word	0x0800c2a5
 800c1cc:	0800c2a5 	.word	0x0800c2a5
 800c1d0:	0800c2a5 	.word	0x0800c2a5
 800c1d4:	0800c2a5 	.word	0x0800c2a5
 800c1d8:	0800c2a5 	.word	0x0800c2a5
 800c1dc:	0800c2a5 	.word	0x0800c2a5
 800c1e0:	0800c2a5 	.word	0x0800c2a5
 800c1e4:	0800c271 	.word	0x0800c271
 800c1e8:	0800c2a5 	.word	0x0800c2a5
 800c1ec:	0800c2a5 	.word	0x0800c2a5
 800c1f0:	0800c2a5 	.word	0x0800c2a5
 800c1f4:	0800c2a5 	.word	0x0800c2a5
 800c1f8:	0800c2a5 	.word	0x0800c2a5
 800c1fc:	0800c2a5 	.word	0x0800c2a5
 800c200:	0800c2a5 	.word	0x0800c2a5
 800c204:	0800c2a5 	.word	0x0800c2a5
 800c208:	0800c2a5 	.word	0x0800c2a5
 800c20c:	0800c2a5 	.word	0x0800c2a5
 800c210:	0800c2a5 	.word	0x0800c2a5
 800c214:	0800c2a5 	.word	0x0800c2a5
 800c218:	0800c2a5 	.word	0x0800c2a5
 800c21c:	0800c2a5 	.word	0x0800c2a5
 800c220:	0800c2a5 	.word	0x0800c2a5
 800c224:	0800c297 	.word	0x0800c297
 800c228:	2b40      	cmp	r3, #64	; 0x40
 800c22a:	d037      	beq.n	800c29c <UART_SetConfig+0xa28>
 800c22c:	e03a      	b.n	800c2a4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c22e:	f7fa fe65 	bl	8006efc <HAL_RCC_GetPCLK1Freq>
 800c232:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c234:	e03c      	b.n	800c2b0 <UART_SetConfig+0xa3c>
 800c236:	bf00      	nop
 800c238:	003d0900 	.word	0x003d0900
 800c23c:	0800d2c8 	.word	0x0800d2c8
 800c240:	58024400 	.word	0x58024400
 800c244:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c248:	f7fa fe6e 	bl	8006f28 <HAL_RCC_GetPCLK2Freq>
 800c24c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c24e:	e02f      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c250:	f107 0314 	add.w	r3, r7, #20
 800c254:	4618      	mov	r0, r3
 800c256:	f7fb fdd3 	bl	8007e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c25e:	e027      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c260:	f107 0308 	add.w	r3, r7, #8
 800c264:	4618      	mov	r0, r3
 800c266:	f7fb ff1f 	bl	80080a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c26e:	e01f      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c270:	4b2c      	ldr	r3, [pc, #176]	; (800c324 <UART_SetConfig+0xab0>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 0320 	and.w	r3, r3, #32
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d009      	beq.n	800c290 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c27c:	4b29      	ldr	r3, [pc, #164]	; (800c324 <UART_SetConfig+0xab0>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	08db      	lsrs	r3, r3, #3
 800c282:	f003 0303 	and.w	r3, r3, #3
 800c286:	4a28      	ldr	r2, [pc, #160]	; (800c328 <UART_SetConfig+0xab4>)
 800c288:	fa22 f303 	lsr.w	r3, r2, r3
 800c28c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c28e:	e00f      	b.n	800c2b0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c290:	4b25      	ldr	r3, [pc, #148]	; (800c328 <UART_SetConfig+0xab4>)
 800c292:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c294:	e00c      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c296:	4b25      	ldr	r3, [pc, #148]	; (800c32c <UART_SetConfig+0xab8>)
 800c298:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c29a:	e009      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c29c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c2a2:	e005      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c2ae:	bf00      	nop
    }

    if (pclk != 0U)
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d021      	beq.n	800c2fa <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ba:	4a1d      	ldr	r2, [pc, #116]	; (800c330 <UART_SetConfig+0xabc>)
 800c2bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	085b      	lsrs	r3, r3, #1
 800c2ce:	441a      	add	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	2b0f      	cmp	r3, #15
 800c2e0:	d908      	bls.n	800c2f4 <UART_SetConfig+0xa80>
 800c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2e8:	d204      	bcs.n	800c2f4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2f0:	60da      	str	r2, [r3, #12]
 800c2f2:	e002      	b.n	800c2fa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c316:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3738      	adds	r7, #56	; 0x38
 800c31e:	46bd      	mov	sp, r7
 800c320:	bdb0      	pop	{r4, r5, r7, pc}
 800c322:	bf00      	nop
 800c324:	58024400 	.word	0x58024400
 800c328:	03d09000 	.word	0x03d09000
 800c32c:	003d0900 	.word	0x003d0900
 800c330:	0800d2c8 	.word	0x0800d2c8

0800c334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00a      	beq.n	800c35e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	430a      	orrs	r2, r1
 800c35c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c362:	f003 0302 	and.w	r3, r3, #2
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00a      	beq.n	800c380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	430a      	orrs	r2, r1
 800c37e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c384:	f003 0304 	and.w	r3, r3, #4
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00a      	beq.n	800c3a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	430a      	orrs	r2, r1
 800c3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a6:	f003 0308 	and.w	r3, r3, #8
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00a      	beq.n	800c3c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	430a      	orrs	r2, r1
 800c3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c8:	f003 0310 	and.w	r3, r3, #16
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00a      	beq.n	800c3e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	430a      	orrs	r2, r1
 800c3e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ea:	f003 0320 	and.w	r3, r3, #32
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00a      	beq.n	800c408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	430a      	orrs	r2, r1
 800c406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c410:	2b00      	cmp	r3, #0
 800c412:	d01a      	beq.n	800c44a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	430a      	orrs	r2, r1
 800c428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c42e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c432:	d10a      	bne.n	800c44a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	430a      	orrs	r2, r1
 800c448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00a      	beq.n	800c46c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	430a      	orrs	r2, r1
 800c46a:	605a      	str	r2, [r3, #4]
  }
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c488:	f7f5 fe36 	bl	80020f8 <HAL_GetTick>
 800c48c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0308 	and.w	r3, r3, #8
 800c498:	2b08      	cmp	r3, #8
 800c49a:	d10e      	bne.n	800c4ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c49c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f82f 	bl	800c50e <UART_WaitOnFlagUntilTimeout>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e025      	b.n	800c506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f003 0304 	and.w	r3, r3, #4
 800c4c4:	2b04      	cmp	r3, #4
 800c4c6:	d10e      	bne.n	800c4e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f819 	bl	800c50e <UART_WaitOnFlagUntilTimeout>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e00f      	b.n	800c506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2220      	movs	r2, #32
 800c4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b084      	sub	sp, #16
 800c512:	af00      	add	r7, sp, #0
 800c514:	60f8      	str	r0, [r7, #12]
 800c516:	60b9      	str	r1, [r7, #8]
 800c518:	603b      	str	r3, [r7, #0]
 800c51a:	4613      	mov	r3, r2
 800c51c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c51e:	e062      	b.n	800c5e6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c526:	d05e      	beq.n	800c5e6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c528:	f7f5 fde6 	bl	80020f8 <HAL_GetTick>
 800c52c:	4602      	mov	r2, r0
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	69ba      	ldr	r2, [r7, #24]
 800c534:	429a      	cmp	r2, r3
 800c536:	d302      	bcc.n	800c53e <UART_WaitOnFlagUntilTimeout+0x30>
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d11d      	bne.n	800c57a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c54c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	689a      	ldr	r2, [r3, #8]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f022 0201 	bic.w	r2, r2, #1
 800c55c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2220      	movs	r2, #32
 800c562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2220      	movs	r2, #32
 800c56a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c576:	2303      	movs	r3, #3
 800c578:	e045      	b.n	800c606 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 0304 	and.w	r3, r3, #4
 800c584:	2b00      	cmp	r3, #0
 800c586:	d02e      	beq.n	800c5e6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c596:	d126      	bne.n	800c5e6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c5b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	689a      	ldr	r2, [r3, #8]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f022 0201 	bic.w	r2, r2, #1
 800c5c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2220      	movs	r2, #32
 800c5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2220      	movs	r2, #32
 800c5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2220      	movs	r2, #32
 800c5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	e00f      	b.n	800c606 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	69da      	ldr	r2, [r3, #28]
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	bf0c      	ite	eq
 800c5f6:	2301      	moveq	r3, #1
 800c5f8:	2300      	movne	r3, #0
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	79fb      	ldrb	r3, [r7, #7]
 800c600:	429a      	cmp	r2, r3
 800c602:	d08d      	beq.n	800c520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
	...

0800c610 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	4613      	mov	r3, r2
 800c61c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	88fa      	ldrh	r2, [r7, #6]
 800c628:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2222      	movs	r2, #34	; 0x22
 800c638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c640:	2b00      	cmp	r3, #0
 800c642:	d02c      	beq.n	800c69e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c648:	4a25      	ldr	r2, [pc, #148]	; (800c6e0 <UART_Start_Receive_DMA+0xd0>)
 800c64a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c650:	4a24      	ldr	r2, [pc, #144]	; (800c6e4 <UART_Start_Receive_DMA+0xd4>)
 800c652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c658:	4a23      	ldr	r2, [pc, #140]	; (800c6e8 <UART_Start_Receive_DMA+0xd8>)
 800c65a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c660:	2200      	movs	r2, #0
 800c662:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	3324      	adds	r3, #36	; 0x24
 800c66e:	4619      	mov	r1, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c674:	461a      	mov	r2, r3
 800c676:	88fb      	ldrh	r3, [r7, #6]
 800c678:	f7f6 fa0e 	bl	8002a98 <HAL_DMA_Start_IT>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00d      	beq.n	800c69e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2210      	movs	r2, #16
 800c686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2220      	movs	r2, #32
 800c696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	e01c      	b.n	800c6d8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c6b4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	689a      	ldr	r2, [r3, #8]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f042 0201 	orr.w	r2, r2, #1
 800c6c4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6d4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	0800c78d 	.word	0x0800c78d
 800c6e4:	0800c823 	.word	0x0800c823
 800c6e8:	0800c85b 	.word	0x0800c85b

0800c6ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c702:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	689a      	ldr	r2, [r3, #8]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c712:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2220      	movs	r2, #32
 800c718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c73e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6899      	ldr	r1, [r3, #8]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <UART_EndRxTransfer+0x60>)
 800c74c:	400b      	ands	r3, r1
 800c74e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c754:	2b01      	cmp	r3, #1
 800c756:	d107      	bne.n	800c768 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f022 0210 	bic.w	r2, r2, #16
 800c766:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2220      	movs	r2, #32
 800c76c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr
 800c788:	effffffe 	.word	0xeffffffe

0800c78c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c798:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7a2:	d02b      	beq.n	800c7fc <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7ba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	689a      	ldr	r2, [r3, #8]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f022 0201 	bic.w	r2, r2, #1
 800c7ca:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	689a      	ldr	r2, [r3, #8]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7da:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2220      	movs	r2, #32
 800c7e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d107      	bne.n	800c7fc <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f022 0210 	bic.w	r2, r2, #16
 800c7fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c800:	2b01      	cmp	r3, #1
 800c802:	d107      	bne.n	800c814 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c80a:	4619      	mov	r1, r3
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f7ff f825 	bl	800b85c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c812:	e002      	b.n	800c81a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f7ff f803 	bl	800b820 <HAL_UART_RxCpltCallback>
}
 800c81a:	bf00      	nop
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c834:	2b01      	cmp	r3, #1
 800c836:	d109      	bne.n	800c84c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c83e:	085b      	lsrs	r3, r3, #1
 800c840:	b29b      	uxth	r3, r3
 800c842:	4619      	mov	r1, r3
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f7ff f809 	bl	800b85c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c84a:	e002      	b.n	800c852 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f7fe fff1 	bl	800b834 <HAL_UART_RxHalfCpltCallback>
}
 800c852:	bf00      	nop
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b086      	sub	sp, #24
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c866:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c86e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c876:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c882:	2b80      	cmp	r3, #128	; 0x80
 800c884:	d109      	bne.n	800c89a <UART_DMAError+0x40>
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	2b21      	cmp	r3, #33	; 0x21
 800c88a:	d106      	bne.n	800c89a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c894:	6978      	ldr	r0, [r7, #20]
 800c896:	f7ff ff29 	bl	800c6ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a4:	2b40      	cmp	r3, #64	; 0x40
 800c8a6:	d109      	bne.n	800c8bc <UART_DMAError+0x62>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2b22      	cmp	r3, #34	; 0x22
 800c8ac:	d106      	bne.n	800c8bc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c8b6:	6978      	ldr	r0, [r7, #20]
 800c8b8:	f7ff ff36 	bl	800c728 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8c2:	f043 0210 	orr.w	r2, r3, #16
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8cc:	6978      	ldr	r0, [r7, #20]
 800c8ce:	f7fe ffbb 	bl	800b848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8d2:	bf00      	nop
 800c8d4:	3718      	adds	r7, #24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f7fe ffa5 	bl	800b848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8fe:	bf00      	nop
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b082      	sub	sp, #8
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c91c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2220      	movs	r2, #32
 800c922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f7fe ff6d 	bl	800b80c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c932:	bf00      	nop
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b083      	sub	sp, #12
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c942:	bf00      	nop
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c94e:	b480      	push	{r7}
 800c950:	b083      	sub	sp, #12
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c956:	bf00      	nop
 800c958:	370c      	adds	r7, #12
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c962:	b480      	push	{r7}
 800c964:	b083      	sub	sp, #12
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c96a:	bf00      	nop
 800c96c:	370c      	adds	r7, #12
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c976:	b480      	push	{r7}
 800c978:	b085      	sub	sp, #20
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c984:	2b01      	cmp	r3, #1
 800c986:	d101      	bne.n	800c98c <HAL_UARTEx_DisableFifoMode+0x16>
 800c988:	2302      	movs	r3, #2
 800c98a:	e027      	b.n	800c9dc <HAL_UARTEx_DisableFifoMode+0x66>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2224      	movs	r2, #36	; 0x24
 800c998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f022 0201 	bic.w	r2, r2, #1
 800c9b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c9ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d101      	bne.n	800ca00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c9fc:	2302      	movs	r3, #2
 800c9fe:	e02d      	b.n	800ca5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2224      	movs	r2, #36	; 0x24
 800ca0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f022 0201 	bic.w	r2, r2, #1
 800ca26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	430a      	orrs	r2, r1
 800ca3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f84f 	bl	800cae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2220      	movs	r2, #32
 800ca4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d101      	bne.n	800ca7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca78:	2302      	movs	r3, #2
 800ca7a:	e02d      	b.n	800cad8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2224      	movs	r2, #36	; 0x24
 800ca88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f022 0201 	bic.w	r2, r2, #1
 800caa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	683a      	ldr	r2, [r7, #0]
 800cab4:	430a      	orrs	r2, r1
 800cab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 f811 	bl	800cae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2220      	movs	r2, #32
 800caca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caec:	2b00      	cmp	r3, #0
 800caee:	d108      	bne.n	800cb02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb00:	e031      	b.n	800cb66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb02:	2310      	movs	r3, #16
 800cb04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb06:	2310      	movs	r3, #16
 800cb08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	0e5b      	lsrs	r3, r3, #25
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	f003 0307 	and.w	r3, r3, #7
 800cb18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	0f5b      	lsrs	r3, r3, #29
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	f003 0307 	and.w	r3, r3, #7
 800cb28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb2a:	7bbb      	ldrb	r3, [r7, #14]
 800cb2c:	7b3a      	ldrb	r2, [r7, #12]
 800cb2e:	4911      	ldr	r1, [pc, #68]	; (800cb74 <UARTEx_SetNbDataToProcess+0x94>)
 800cb30:	5c8a      	ldrb	r2, [r1, r2]
 800cb32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb36:	7b3a      	ldrb	r2, [r7, #12]
 800cb38:	490f      	ldr	r1, [pc, #60]	; (800cb78 <UARTEx_SetNbDataToProcess+0x98>)
 800cb3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
 800cb4a:	7b7a      	ldrb	r2, [r7, #13]
 800cb4c:	4909      	ldr	r1, [pc, #36]	; (800cb74 <UARTEx_SetNbDataToProcess+0x94>)
 800cb4e:	5c8a      	ldrb	r2, [r1, r2]
 800cb50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb54:	7b7a      	ldrb	r2, [r7, #13]
 800cb56:	4908      	ldr	r1, [pc, #32]	; (800cb78 <UARTEx_SetNbDataToProcess+0x98>)
 800cb58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cb66:	bf00      	nop
 800cb68:	3714      	adds	r7, #20
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	0800d2e0 	.word	0x0800d2e0
 800cb78:	0800d2e8 	.word	0x0800d2e8

0800cb7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb7c:	b084      	sub	sp, #16
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	f107 001c 	add.w	r0, r7, #28
 800cb8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d120      	bne.n	800cbd6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	68da      	ldr	r2, [r3, #12]
 800cba4:	4b2a      	ldr	r3, [pc, #168]	; (800cc50 <USB_CoreInit+0xd4>)
 800cba6:	4013      	ands	r3, r2
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d105      	bne.n	800cbca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 fa60 	bl	800d090 <USB_CoreReset>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73fb      	strb	r3, [r7, #15]
 800cbd4:	e01a      	b.n	800cc0c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fa54 	bl	800d090 <USB_CoreReset>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cbec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d106      	bne.n	800cc00 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	639a      	str	r2, [r3, #56]	; 0x38
 800cbfe:	e005      	b.n	800cc0c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d116      	bne.n	800cc40 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc16:	b29a      	uxth	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc20:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <USB_CoreInit+0xd8>)
 800cc22:	4313      	orrs	r3, r2
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	f043 0206 	orr.w	r2, r3, #6
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	f043 0220 	orr.w	r2, r3, #32
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc4c:	b004      	add	sp, #16
 800cc4e:	4770      	bx	lr
 800cc50:	ffbdffbf 	.word	0xffbdffbf
 800cc54:	03ee0000 	.word	0x03ee0000

0800cc58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	f023 0201 	bic.w	r2, r3, #1
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	370c      	adds	r7, #12
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b082      	sub	sp, #8
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	460b      	mov	r3, r1
 800cc84:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cc92:	78fb      	ldrb	r3, [r7, #3]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d106      	bne.n	800cca6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	60da      	str	r2, [r3, #12]
 800cca4:	e00b      	b.n	800ccbe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cca6:	78fb      	ldrb	r3, [r7, #3]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d106      	bne.n	800ccba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	60da      	str	r2, [r3, #12]
 800ccb8:	e001      	b.n	800ccbe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e003      	b.n	800ccc6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ccbe:	2032      	movs	r0, #50	; 0x32
 800ccc0:	f7f5 fa26 	bl	8002110 <HAL_Delay>

  return HAL_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
	...

0800ccd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ccd0:	b084      	sub	sp, #16
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b086      	sub	sp, #24
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ccde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ccea:	2300      	movs	r3, #0
 800ccec:	613b      	str	r3, [r7, #16]
 800ccee:	e009      	b.n	800cd04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	3340      	adds	r3, #64	; 0x40
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	4413      	add	r3, r2
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	3301      	adds	r3, #1
 800cd02:	613b      	str	r3, [r7, #16]
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	2b0e      	cmp	r3, #14
 800cd08:	d9f2      	bls.n	800ccf0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cd0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d11c      	bne.n	800cd4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd1e:	f043 0302 	orr.w	r3, r3, #2
 800cd22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	601a      	str	r2, [r3, #0]
 800cd48:	e005      	b.n	800cd56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	2300      	movs	r3, #0
 800cd60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd68:	4619      	mov	r1, r3
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd70:	461a      	mov	r2, r3
 800cd72:	680b      	ldr	r3, [r1, #0]
 800cd74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d10c      	bne.n	800cd96 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d104      	bne.n	800cd8c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cd82:	2100      	movs	r1, #0
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 f949 	bl	800d01c <USB_SetDevSpeed>
 800cd8a:	e008      	b.n	800cd9e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cd8c:	2101      	movs	r1, #1
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f944 	bl	800d01c <USB_SetDevSpeed>
 800cd94:	e003      	b.n	800cd9e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cd96:	2103      	movs	r1, #3
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 f93f 	bl	800d01c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cd9e:	2110      	movs	r1, #16
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 f8f3 	bl	800cf8c <USB_FlushTxFifo>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 f911 	bl	800cfd8 <USB_FlushRxFifo>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d001      	beq.n	800cdc0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	2300      	movs	r3, #0
 800cdca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdde:	461a      	mov	r2, r3
 800cde0:	2300      	movs	r3, #0
 800cde2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cde4:	2300      	movs	r3, #0
 800cde6:	613b      	str	r3, [r7, #16]
 800cde8:	e043      	b.n	800ce72 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	015a      	lsls	r2, r3, #5
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce00:	d118      	bne.n	800ce34 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10a      	bne.n	800ce1e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	015a      	lsls	r2, r3, #5
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4413      	add	r3, r2
 800ce10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce14:	461a      	mov	r2, r3
 800ce16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce1a:	6013      	str	r3, [r2, #0]
 800ce1c:	e013      	b.n	800ce46 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	015a      	lsls	r2, r3, #5
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	4413      	add	r3, r2
 800ce26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce30:	6013      	str	r3, [r2, #0]
 800ce32:	e008      	b.n	800ce46 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	015a      	lsls	r2, r3, #5
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce40:	461a      	mov	r2, r3
 800ce42:	2300      	movs	r3, #0
 800ce44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	015a      	lsls	r2, r3, #5
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce52:	461a      	mov	r2, r3
 800ce54:	2300      	movs	r3, #0
 800ce56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	015a      	lsls	r2, r3, #5
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4413      	add	r3, r2
 800ce60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce64:	461a      	mov	r2, r3
 800ce66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	613b      	str	r3, [r7, #16]
 800ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d3b7      	bcc.n	800cdea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	613b      	str	r3, [r7, #16]
 800ce7e:	e043      	b.n	800cf08 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	015a      	lsls	r2, r3, #5
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	4413      	add	r3, r2
 800ce88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce96:	d118      	bne.n	800ceca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10a      	bne.n	800ceb4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	015a      	lsls	r2, r3, #5
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	4413      	add	r3, r2
 800cea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceaa:	461a      	mov	r2, r3
 800ceac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ceb0:	6013      	str	r3, [r2, #0]
 800ceb2:	e013      	b.n	800cedc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	015a      	lsls	r2, r3, #5
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	4413      	add	r3, r2
 800cebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec0:	461a      	mov	r2, r3
 800cec2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	e008      	b.n	800cedc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	015a      	lsls	r2, r3, #5
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	4413      	add	r3, r2
 800ced2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced6:	461a      	mov	r2, r3
 800ced8:	2300      	movs	r3, #0
 800ceda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	015a      	lsls	r2, r3, #5
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	4413      	add	r3, r2
 800cee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee8:	461a      	mov	r2, r3
 800ceea:	2300      	movs	r3, #0
 800ceec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	015a      	lsls	r2, r3, #5
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	4413      	add	r3, r2
 800cef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cefa:	461a      	mov	r2, r3
 800cefc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	3301      	adds	r3, #1
 800cf06:	613b      	str	r3, [r7, #16]
 800cf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0a:	693a      	ldr	r2, [r7, #16]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d3b7      	bcc.n	800ce80 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cf30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d105      	bne.n	800cf44 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	699b      	ldr	r3, [r3, #24]
 800cf3c:	f043 0210 	orr.w	r2, r3, #16
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	699a      	ldr	r2, [r3, #24]
 800cf48:	4b0e      	ldr	r3, [pc, #56]	; (800cf84 <USB_DevInit+0x2b4>)
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d005      	beq.n	800cf62 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	f043 0208 	orr.w	r2, r3, #8
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cf62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d105      	bne.n	800cf74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	699a      	ldr	r2, [r3, #24]
 800cf6c:	4b06      	ldr	r3, [pc, #24]	; (800cf88 <USB_DevInit+0x2b8>)
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cf74:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf80:	b004      	add	sp, #16
 800cf82:	4770      	bx	lr
 800cf84:	803c3800 	.word	0x803c3800
 800cf88:	40000004 	.word	0x40000004

0800cf8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cf96:	2300      	movs	r3, #0
 800cf98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	019b      	lsls	r3, r3, #6
 800cf9e:	f043 0220 	orr.w	r2, r3, #32
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	60fb      	str	r3, [r7, #12]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	4a09      	ldr	r2, [pc, #36]	; (800cfd4 <USB_FlushTxFifo+0x48>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d901      	bls.n	800cfb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	e006      	b.n	800cfc6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	f003 0320 	and.w	r3, r3, #32
 800cfc0:	2b20      	cmp	r3, #32
 800cfc2:	d0f0      	beq.n	800cfa6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	00030d40 	.word	0x00030d40

0800cfd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2210      	movs	r2, #16
 800cfe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	3301      	adds	r3, #1
 800cfee:	60fb      	str	r3, [r7, #12]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	4a09      	ldr	r2, [pc, #36]	; (800d018 <USB_FlushRxFifo+0x40>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d901      	bls.n	800cffc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cff8:	2303      	movs	r3, #3
 800cffa:	e006      	b.n	800d00a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	f003 0310 	and.w	r3, r3, #16
 800d004:	2b10      	cmp	r3, #16
 800d006:	d0f0      	beq.n	800cfea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3714      	adds	r7, #20
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	00030d40 	.word	0x00030d40

0800d01c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	460b      	mov	r3, r1
 800d026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	78fb      	ldrb	r3, [r7, #3]
 800d036:	68f9      	ldr	r1, [r7, #12]
 800d038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d03c:	4313      	orrs	r3, r2
 800d03e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d04e:	b480      	push	{r7}
 800d050:	b085      	sub	sp, #20
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d068:	f023 0303 	bic.w	r3, r3, #3
 800d06c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	68fa      	ldr	r2, [r7, #12]
 800d078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d07c:	f043 0302 	orr.w	r3, r3, #2
 800d080:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3714      	adds	r7, #20
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d098:	2300      	movs	r3, #0
 800d09a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	60fb      	str	r3, [r7, #12]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	4a13      	ldr	r2, [pc, #76]	; (800d0f4 <USB_CoreReset+0x64>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d901      	bls.n	800d0ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0aa:	2303      	movs	r3, #3
 800d0ac:	e01b      	b.n	800d0e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	daf2      	bge.n	800d09c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	f043 0201 	orr.w	r2, r3, #1
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	4a09      	ldr	r2, [pc, #36]	; (800d0f4 <USB_CoreReset+0x64>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d901      	bls.n	800d0d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e006      	b.n	800d0e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	f003 0301 	and.w	r3, r3, #1
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d0f0      	beq.n	800d0c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3714      	adds	r7, #20
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	00030d40 	.word	0x00030d40

0800d0f8 <calloc>:
 800d0f8:	4b02      	ldr	r3, [pc, #8]	; (800d104 <calloc+0xc>)
 800d0fa:	460a      	mov	r2, r1
 800d0fc:	4601      	mov	r1, r0
 800d0fe:	6818      	ldr	r0, [r3, #0]
 800d100:	f000 b842 	b.w	800d188 <_calloc_r>
 800d104:	2401139c 	.word	0x2401139c

0800d108 <__errno>:
 800d108:	4b01      	ldr	r3, [pc, #4]	; (800d110 <__errno+0x8>)
 800d10a:	6818      	ldr	r0, [r3, #0]
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	2401139c 	.word	0x2401139c

0800d114 <__libc_init_array>:
 800d114:	b570      	push	{r4, r5, r6, lr}
 800d116:	4d0d      	ldr	r5, [pc, #52]	; (800d14c <__libc_init_array+0x38>)
 800d118:	4c0d      	ldr	r4, [pc, #52]	; (800d150 <__libc_init_array+0x3c>)
 800d11a:	1b64      	subs	r4, r4, r5
 800d11c:	10a4      	asrs	r4, r4, #2
 800d11e:	2600      	movs	r6, #0
 800d120:	42a6      	cmp	r6, r4
 800d122:	d109      	bne.n	800d138 <__libc_init_array+0x24>
 800d124:	4d0b      	ldr	r5, [pc, #44]	; (800d154 <__libc_init_array+0x40>)
 800d126:	4c0c      	ldr	r4, [pc, #48]	; (800d158 <__libc_init_array+0x44>)
 800d128:	f000 f8b6 	bl	800d298 <_init>
 800d12c:	1b64      	subs	r4, r4, r5
 800d12e:	10a4      	asrs	r4, r4, #2
 800d130:	2600      	movs	r6, #0
 800d132:	42a6      	cmp	r6, r4
 800d134:	d105      	bne.n	800d142 <__libc_init_array+0x2e>
 800d136:	bd70      	pop	{r4, r5, r6, pc}
 800d138:	f855 3b04 	ldr.w	r3, [r5], #4
 800d13c:	4798      	blx	r3
 800d13e:	3601      	adds	r6, #1
 800d140:	e7ee      	b.n	800d120 <__libc_init_array+0xc>
 800d142:	f855 3b04 	ldr.w	r3, [r5], #4
 800d146:	4798      	blx	r3
 800d148:	3601      	adds	r6, #1
 800d14a:	e7f2      	b.n	800d132 <__libc_init_array+0x1e>
 800d14c:	0800d2f8 	.word	0x0800d2f8
 800d150:	0800d2f8 	.word	0x0800d2f8
 800d154:	0800d2f8 	.word	0x0800d2f8
 800d158:	0800d2fc 	.word	0x0800d2fc

0800d15c <memcpy>:
 800d15c:	440a      	add	r2, r1
 800d15e:	4291      	cmp	r1, r2
 800d160:	f100 33ff 	add.w	r3, r0, #4294967295
 800d164:	d100      	bne.n	800d168 <memcpy+0xc>
 800d166:	4770      	bx	lr
 800d168:	b510      	push	{r4, lr}
 800d16a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d16e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d172:	4291      	cmp	r1, r2
 800d174:	d1f9      	bne.n	800d16a <memcpy+0xe>
 800d176:	bd10      	pop	{r4, pc}

0800d178 <memset>:
 800d178:	4402      	add	r2, r0
 800d17a:	4603      	mov	r3, r0
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d100      	bne.n	800d182 <memset+0xa>
 800d180:	4770      	bx	lr
 800d182:	f803 1b01 	strb.w	r1, [r3], #1
 800d186:	e7f9      	b.n	800d17c <memset+0x4>

0800d188 <_calloc_r>:
 800d188:	b513      	push	{r0, r1, r4, lr}
 800d18a:	434a      	muls	r2, r1
 800d18c:	4611      	mov	r1, r2
 800d18e:	9201      	str	r2, [sp, #4]
 800d190:	f000 f80a 	bl	800d1a8 <_malloc_r>
 800d194:	4604      	mov	r4, r0
 800d196:	b118      	cbz	r0, 800d1a0 <_calloc_r+0x18>
 800d198:	9a01      	ldr	r2, [sp, #4]
 800d19a:	2100      	movs	r1, #0
 800d19c:	f7ff ffec 	bl	800d178 <memset>
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	b002      	add	sp, #8
 800d1a4:	bd10      	pop	{r4, pc}
	...

0800d1a8 <_malloc_r>:
 800d1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1aa:	1ccd      	adds	r5, r1, #3
 800d1ac:	f025 0503 	bic.w	r5, r5, #3
 800d1b0:	3508      	adds	r5, #8
 800d1b2:	2d0c      	cmp	r5, #12
 800d1b4:	bf38      	it	cc
 800d1b6:	250c      	movcc	r5, #12
 800d1b8:	2d00      	cmp	r5, #0
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	db01      	blt.n	800d1c2 <_malloc_r+0x1a>
 800d1be:	42a9      	cmp	r1, r5
 800d1c0:	d903      	bls.n	800d1ca <_malloc_r+0x22>
 800d1c2:	230c      	movs	r3, #12
 800d1c4:	6033      	str	r3, [r6, #0]
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1ca:	f000 f857 	bl	800d27c <__malloc_lock>
 800d1ce:	4921      	ldr	r1, [pc, #132]	; (800d254 <_malloc_r+0xac>)
 800d1d0:	680a      	ldr	r2, [r1, #0]
 800d1d2:	4614      	mov	r4, r2
 800d1d4:	b99c      	cbnz	r4, 800d1fe <_malloc_r+0x56>
 800d1d6:	4f20      	ldr	r7, [pc, #128]	; (800d258 <_malloc_r+0xb0>)
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	b923      	cbnz	r3, 800d1e6 <_malloc_r+0x3e>
 800d1dc:	4621      	mov	r1, r4
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f000 f83c 	bl	800d25c <_sbrk_r>
 800d1e4:	6038      	str	r0, [r7, #0]
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f000 f837 	bl	800d25c <_sbrk_r>
 800d1ee:	1c43      	adds	r3, r0, #1
 800d1f0:	d123      	bne.n	800d23a <_malloc_r+0x92>
 800d1f2:	230c      	movs	r3, #12
 800d1f4:	6033      	str	r3, [r6, #0]
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f000 f846 	bl	800d288 <__malloc_unlock>
 800d1fc:	e7e3      	b.n	800d1c6 <_malloc_r+0x1e>
 800d1fe:	6823      	ldr	r3, [r4, #0]
 800d200:	1b5b      	subs	r3, r3, r5
 800d202:	d417      	bmi.n	800d234 <_malloc_r+0x8c>
 800d204:	2b0b      	cmp	r3, #11
 800d206:	d903      	bls.n	800d210 <_malloc_r+0x68>
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	441c      	add	r4, r3
 800d20c:	6025      	str	r5, [r4, #0]
 800d20e:	e004      	b.n	800d21a <_malloc_r+0x72>
 800d210:	6863      	ldr	r3, [r4, #4]
 800d212:	42a2      	cmp	r2, r4
 800d214:	bf0c      	ite	eq
 800d216:	600b      	streq	r3, [r1, #0]
 800d218:	6053      	strne	r3, [r2, #4]
 800d21a:	4630      	mov	r0, r6
 800d21c:	f000 f834 	bl	800d288 <__malloc_unlock>
 800d220:	f104 000b 	add.w	r0, r4, #11
 800d224:	1d23      	adds	r3, r4, #4
 800d226:	f020 0007 	bic.w	r0, r0, #7
 800d22a:	1ac2      	subs	r2, r0, r3
 800d22c:	d0cc      	beq.n	800d1c8 <_malloc_r+0x20>
 800d22e:	1a1b      	subs	r3, r3, r0
 800d230:	50a3      	str	r3, [r4, r2]
 800d232:	e7c9      	b.n	800d1c8 <_malloc_r+0x20>
 800d234:	4622      	mov	r2, r4
 800d236:	6864      	ldr	r4, [r4, #4]
 800d238:	e7cc      	b.n	800d1d4 <_malloc_r+0x2c>
 800d23a:	1cc4      	adds	r4, r0, #3
 800d23c:	f024 0403 	bic.w	r4, r4, #3
 800d240:	42a0      	cmp	r0, r4
 800d242:	d0e3      	beq.n	800d20c <_malloc_r+0x64>
 800d244:	1a21      	subs	r1, r4, r0
 800d246:	4630      	mov	r0, r6
 800d248:	f000 f808 	bl	800d25c <_sbrk_r>
 800d24c:	3001      	adds	r0, #1
 800d24e:	d1dd      	bne.n	800d20c <_malloc_r+0x64>
 800d250:	e7cf      	b.n	800d1f2 <_malloc_r+0x4a>
 800d252:	bf00      	nop
 800d254:	2401d52c 	.word	0x2401d52c
 800d258:	2401d530 	.word	0x2401d530

0800d25c <_sbrk_r>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	4d06      	ldr	r5, [pc, #24]	; (800d278 <_sbrk_r+0x1c>)
 800d260:	2300      	movs	r3, #0
 800d262:	4604      	mov	r4, r0
 800d264:	4608      	mov	r0, r1
 800d266:	602b      	str	r3, [r5, #0]
 800d268:	f7f4 fe60 	bl	8001f2c <_sbrk>
 800d26c:	1c43      	adds	r3, r0, #1
 800d26e:	d102      	bne.n	800d276 <_sbrk_r+0x1a>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	b103      	cbz	r3, 800d276 <_sbrk_r+0x1a>
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	2401dd04 	.word	0x2401dd04

0800d27c <__malloc_lock>:
 800d27c:	4801      	ldr	r0, [pc, #4]	; (800d284 <__malloc_lock+0x8>)
 800d27e:	f000 b809 	b.w	800d294 <__retarget_lock_acquire_recursive>
 800d282:	bf00      	nop
 800d284:	2401dd0c 	.word	0x2401dd0c

0800d288 <__malloc_unlock>:
 800d288:	4801      	ldr	r0, [pc, #4]	; (800d290 <__malloc_unlock+0x8>)
 800d28a:	f000 b804 	b.w	800d296 <__retarget_lock_release_recursive>
 800d28e:	bf00      	nop
 800d290:	2401dd0c 	.word	0x2401dd0c

0800d294 <__retarget_lock_acquire_recursive>:
 800d294:	4770      	bx	lr

0800d296 <__retarget_lock_release_recursive>:
 800d296:	4770      	bx	lr

0800d298 <_init>:
 800d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29a:	bf00      	nop
 800d29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29e:	bc08      	pop	{r3}
 800d2a0:	469e      	mov	lr, r3
 800d2a2:	4770      	bx	lr

0800d2a4 <_fini>:
 800d2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a6:	bf00      	nop
 800d2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2aa:	bc08      	pop	{r3}
 800d2ac:	469e      	mov	lr, r3
 800d2ae:	4770      	bx	lr
