
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfb4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800d24c  0800d24c  0001d24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d28c  0800d28c  000314c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d28c  0800d28c  0001d28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d294  0800d294  000314c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d294  0800d294  0001d294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d298  0800d298  0001d298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00011400  24000000  0800d29c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24011400  0801e69c  00031400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24011460  0801e6fc  00031460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c854  240114c0  0801e75c  000314c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2401dd14  0801e75c  0003dd14  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033c48  00000000  00000000  000314ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c0a  00000000  00000000  00065136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001af8  00000000  00000000  00069d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001980  00000000  00000000  0006b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ddbf  00000000  00000000  0006d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022b8e  00000000  00000000  000aaf77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00196f13  00000000  00000000  000cdb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00264a18  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007670  00000000  00000000  00264a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240114c0 	.word	0x240114c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d234 	.word	0x0800d234

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240114c4 	.word	0x240114c4
 80002d4:	0800d234 	.word	0x0800d234

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <LCD_init>:

//การสั่งขา D/C หรือ A0 เพื่อส่ง command หรือ parameter
//เปลี่ยนแปลง data command ให้เป็น high เพื่อส่ง parameter
//เปลี่ยนแปลง data command ให้เป็น low เพื่อส่ง command
//ส่งข้อมูลภาพไปในจอใช้ขา data command high
void LCD_init(LCDHandle *lcd){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	//reset LCD
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	b29b      	uxth	r3, r3
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	f005 fa49 	bl	8005bb0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fcba 	bl	8002098 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6858      	ldr	r0, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	b29b      	uxth	r3, r3
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	f005 fa3d 	bl	8005bb0 <HAL_GPIO_WritePin>

	//select SPI CS
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	b29b      	uxth	r3, r3
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f005 fa34 	bl	8005bb0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 fca5 	bl	8002098 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6898      	ldr	r0, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f005 fa28 	bl	8005bb0 <HAL_GPIO_WritePin>

	//write reset , sleep out, display on, scan order
	//write command 0x01, 0x11, 0x29, 0x36
	//4 = 4 commands
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f005 fa1f 	bl	8005bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2204      	movs	r2, #4
 800077a:	4938      	ldr	r1, [pc, #224]	; (800085c <LCD_init+0x158>)
 800077c:	f008 fcc4 	bl	8009108 <HAL_SPI_Transmit>

	//write parameter of scan order
	//write parameter 0b01001000
	//&LCDSTARTUPSeq[4] 0ffset ไป 4 ตำแหน่ง
	//1 = 1 parameter
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68d8      	ldr	r0, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	b29b      	uxth	r3, r3
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f005 fa0f 	bl	8005bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	2201      	movs	r2, #1
 800079a:	4931      	ldr	r1, [pc, #196]	; (8000860 <LCD_init+0x15c>)
 800079c:	f008 fcb4 	bl	8009108 <HAL_SPI_Transmit>

	//write set C area
	//write command 0x2a
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f005 f9ff 	bl	8005bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	492a      	ldr	r1, [pc, #168]	; (8000864 <LCD_init+0x160>)
 80007bc:	f008 fca4 	bl	8009108 <HAL_SPI_Transmit>

	//write set C area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68d8      	ldr	r0, [r3, #12]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	f005 f9ef 	bl	8005bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2204      	movs	r2, #4
 80007da:	4923      	ldr	r1, [pc, #140]	; (8000868 <LCD_init+0x164>)
 80007dc:	f008 fc94 	bl	8009108 <HAL_SPI_Transmit>

	//write set R area
	//write command 0x2b
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68d8      	ldr	r0, [r3, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f005 f9df 	bl	8005bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2201      	movs	r2, #1
 80007fa:	491c      	ldr	r1, [pc, #112]	; (800086c <LCD_init+0x168>)
 80007fc:	f008 fc84 	bl	8009108 <HAL_SPI_Transmit>

	//write set R area parameter
	//write parameter 0x00,0x00,0x00,127
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68d8      	ldr	r0, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	b29b      	uxth	r3, r3
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	f005 f9cf 	bl	8005bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2204      	movs	r2, #4
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <LCD_init+0x16c>)
 800081c:	f008 fc74 	bl	8009108 <HAL_SPI_Transmit>

	//write to graphic memory
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68d8      	ldr	r0, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f005 f9bf 	bl	8005bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	2201      	movs	r2, #1
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LCD_init+0x170>)
 800083c:	f008 fc64 	bl	8009108 <HAL_SPI_Transmit>

	//set DC to high to read & send image data
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68d8      	ldr	r0, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	b29b      	uxth	r3, r3
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f005 f9af 	bl	8005bb0 <HAL_GPIO_WritePin>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000008 	.word	0x24000008
 8000860:	2400000c 	.word	0x2400000c
 8000864:	2400000d 	.word	0x2400000d
 8000868:	2400000e 	.word	0x2400000e
 800086c:	24000012 	.word	0x24000012
 8000870:	24000013 	.word	0x24000013
 8000874:	24000017 	.word	0x24000017

08000878 <LCD_flush>:

//ส่งข้อมูลของ frame ไปให้จอ
void LCD_flush(LCDHandle *lcd)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	//circular dma
	//Framememory มีขนาดเท่ากับหน้าจอ
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000888:	4903      	ldr	r1, [pc, #12]	; (8000898 <LCD_flush+0x20>)
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fe2e 	bl	80094ec <HAL_SPI_Transmit_DMA>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	240114dc 	.word	0x240114dc

0800089c <UARTInit>:
#include "stm32h7xx_hal.h"
#include "Uart.h"


void UARTInit(UARTStucrture *uart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->RxLen);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	88db      	ldrh	r3, [r3, #6]
 80008a8:	4619      	mov	r1, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	f00c fbf2 	bl	800d094 <calloc>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->TxLen);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	889b      	ldrh	r3, [r3, #4]
 80008bc:	4619      	mov	r1, r3
 80008be:	2001      	movs	r0, #1
 80008c0:	f00c fbe8 	bl	800d094 <calloc>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	81da      	strh	r2, [r3, #14]

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6919      	ldr	r1, [r3, #16]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	88db      	ldrh	r3, [r3, #6]
 80008fa:	461a      	mov	r2, r3
 80008fc:	f00a fc54 	bl	800b1a8 <HAL_UART_Receive_DMA>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b5b0      	push	{r4, r5, r7, lr}
 800090a:	b0a2      	sub	sp, #136	; 0x88
 800090c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800090e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000916:	bf00      	nop
 8000918:	4b80      	ldr	r3, [pc, #512]	; (8000b1c <main+0x214>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d006      	beq.n	8000932 <main+0x2a>
 8000924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800092e:	2b00      	cmp	r3, #0
 8000930:	dcf2      	bgt.n	8000918 <main+0x10>
		;
	if (timeout < 0) {
 8000932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000936:	2b00      	cmp	r3, #0
 8000938:	da01      	bge.n	800093e <main+0x36>
		Error_Handler();
 800093a:	f000 feb1 	bl	80016a0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f001 fb19 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 faab 	bl	8000e9c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000946:	4b75      	ldr	r3, [pc, #468]	; (8000b1c <main+0x214>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	4a73      	ldr	r2, [pc, #460]	; (8000b1c <main+0x214>)
 800094e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000956:	4b71      	ldr	r3, [pc, #452]	; (8000b1c <main+0x214>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000964:	2000      	movs	r0, #0
 8000966:	f005 f93d 	bl	8005be4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 800096a:	2100      	movs	r1, #0
 800096c:	2000      	movs	r0, #0
 800096e:	f005 f953 	bl	8005c18 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000976:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 800097a:	bf00      	nop
 800097c:	4b67      	ldr	r3, [pc, #412]	; (8000b1c <main+0x214>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d106      	bne.n	8000996 <main+0x8e>
 8000988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800098c:	1e5a      	subs	r2, r3, #1
 800098e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000992:	2b00      	cmp	r3, #0
 8000994:	dcf2      	bgt.n	800097c <main+0x74>
		;
	if (timeout < 0) {
 8000996:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800099a:	2b00      	cmp	r3, #0
 800099c:	da01      	bge.n	80009a2 <main+0x9a>
		Error_Handler();
 800099e:	f000 fe7f 	bl	80016a0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a2:	f000 fd91 	bl	80014c8 <MX_GPIO_Init>
  MX_ETH_Init();
 80009a6:	f000 faff 	bl	8000fa8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009aa:	f000 fcdf 	bl	800136c <MX_USART3_UART_Init>
  MX_DMA_Init();
 80009ae:	f000 fd5b 	bl	8001468 <MX_DMA_Init>
  MX_SPI1_Init();
 80009b2:	f000 fbd7 	bl	8001164 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009b6:	f000 fd25 	bl	8001404 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80009ba:	f000 fc2b 	bl	8001214 <MX_TIM1_Init>
  MX_RTC_Init();
 80009be:	f000 fb3f 	bl	8001040 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  	//�?ำหนดขา pin
	ST7735.hspi = &hspi1;
 80009c2:	4b57      	ldr	r3, [pc, #348]	; (8000b20 <main+0x218>)
 80009c4:	4a57      	ldr	r2, [pc, #348]	; (8000b24 <main+0x21c>)
 80009c6:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 80009c8:	4b55      	ldr	r3, [pc, #340]	; (8000b20 <main+0x218>)
 80009ca:	4a57      	ldr	r2, [pc, #348]	; (8000b28 <main+0x220>)
 80009cc:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 80009ce:	4b54      	ldr	r3, [pc, #336]	; (8000b20 <main+0x218>)
 80009d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d4:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 80009d6:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <main+0x218>)
 80009d8:	4a53      	ldr	r2, [pc, #332]	; (8000b28 <main+0x220>)
 80009da:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 80009dc:	4b50      	ldr	r3, [pc, #320]	; (8000b20 <main+0x218>)
 80009de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009e2:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 80009e4:	4b4e      	ldr	r3, [pc, #312]	; (8000b20 <main+0x218>)
 80009e6:	4a51      	ldr	r2, [pc, #324]	; (8000b2c <main+0x224>)
 80009e8:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 80009ea:	4b4d      	ldr	r3, [pc, #308]	; (8000b20 <main+0x218>)
 80009ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f0:	611a      	str	r2, [r3, #16]
	//เริ่ม�?ารเขียน sequence data
	LCD_init(&ST7735);
 80009f2:	484b      	ldr	r0, [pc, #300]	; (8000b20 <main+0x218>)
 80009f4:	f7ff fe86 	bl	8000704 <LCD_init>
	//flush ข้อมูล dma
	LCD_flush(&ST7735);
 80009f8:	4849      	ldr	r0, [pc, #292]	; (8000b20 <main+0x218>)
 80009fa:	f7ff ff3d 	bl	8000878 <LCD_flush>
	//รับข้อมูลภาพด้วย uart
	UART2.huart = &huart3;
 80009fe:	4b4c      	ldr	r3, [pc, #304]	; (8000b30 <main+0x228>)
 8000a00:	4a4c      	ldr	r2, [pc, #304]	; (8000b34 <main+0x22c>)
 8000a02:	601a      	str	r2, [r3, #0]
	UART2.RxLen =255;
 8000a04:	4b4a      	ldr	r3, [pc, #296]	; (8000b30 <main+0x228>)
 8000a06:	22ff      	movs	r2, #255	; 0xff
 8000a08:	80da      	strh	r2, [r3, #6]
	UART2.TxLen =255;
 8000a0a:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <main+0x228>)
 8000a0c:	22ff      	movs	r2, #255	; 0xff
 8000a0e:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 8000a10:	4847      	ldr	r0, [pc, #284]	; (8000b30 <main+0x228>)
 8000a12:	f7ff ff43 	bl	800089c <UARTInit>
	UARTResetStart(&UART2);
 8000a16:	4846      	ldr	r0, [pc, #280]	; (8000b30 <main+0x228>)
 8000a18:	f7ff ff65 	bl	80008e6 <UARTResetStart>

	//start pwm
	HAL_TIM_Base_Start(&htim1);
 8000a1c:	4846      	ldr	r0, [pc, #280]	; (8000b38 <main+0x230>)
 8000a1e:	f009 fa6b 	bl	8009ef8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a22:	2100      	movs	r1, #0
 8000a24:	4844      	ldr	r0, [pc, #272]	; (8000b38 <main+0x230>)
 8000a26:	f009 fb31 	bl	800a08c <HAL_TIM_PWM_Start>

	//lcd UI
	memcpy(Framememory,fan,sizeof(fan));
 8000a2a:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <main+0x234>)
 8000a2c:	4b44      	ldr	r3, [pc, #272]	; (8000b40 <main+0x238>)
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a36:	461a      	mov	r2, r3
 8000a38:	f00c fb5e 	bl	800d0f8 <memcpy>

	int i,j,n = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	67bb      	str	r3, [r7, #120]	; 0x78
	//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
	//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
	//add next array 384 (128*3)
	for(i = 25956; i <= 37760; i = i+384 )
 8000a40:	f246 5364 	movw	r3, #25956	; 0x6564
 8000a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000a48:	e01c      	b.n	8000a84 <main+0x17c>
	{
		//lenght*rgb = 32*3 = 96 (0-95)
		for(j=0;j<96;j++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a4e:	e00d      	b.n	8000a6c <main+0x164>
		{
			Framememory[i+j] = speed1[j+n];
 8000a50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a54:	441a      	add	r2, r3
 8000a56:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000a5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a5c:	440b      	add	r3, r1
 8000a5e:	4939      	ldr	r1, [pc, #228]	; (8000b44 <main+0x23c>)
 8000a60:	5c89      	ldrb	r1, [r1, r2]
 8000a62:	4a36      	ldr	r2, [pc, #216]	; (8000b3c <main+0x234>)
 8000a64:	54d1      	strb	r1, [r2, r3]
		for(j=0;j<96;j++)
 8000a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a68:	3301      	adds	r3, #1
 8000a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a6e:	2b5f      	cmp	r3, #95	; 0x5f
 8000a70:	ddee      	ble.n	8000a50 <main+0x148>
		}
		//offset 150
		n = n +96;
 8000a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a74:	3360      	adds	r3, #96	; 0x60
 8000a76:	67bb      	str	r3, [r7, #120]	; 0x78
	for(i = 25956; i <= 37760; i = i+384 )
 8000a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a88:	f249 3280 	movw	r2, #37760	; 0x9380
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	dddc      	ble.n	8000a4a <main+0x142>
	}

	int a,b,c = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	66fb      	str	r3, [r7, #108]	; 0x6c
	//start at pixel index 23100 (red start at index 0 so add offset 23100%3 = 0)
	//stop at pixel index 39996 (start + length*rgb*( height of pixel number - 1) = 23100+128*3*(45-1) = 39996)
	//add next array 384 (128*3)
	for(a = 23100; a <= 39996; a = a+384 )
 8000a94:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000a98:	677b      	str	r3, [r7, #116]	; 0x74
 8000a9a:	e019      	b.n	8000ad0 <main+0x1c8>
	{
		//lenght*rgb = 45*3 = 135 (0-134)
		for(b=0;b<135;b++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	673b      	str	r3, [r7, #112]	; 0x70
 8000aa0:	e00c      	b.n	8000abc <main+0x1b4>
		{
			Framememory[a+b] = fan_off[b+c];
 8000aa2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000aa6:	441a      	add	r2, r3
 8000aa8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aac:	440b      	add	r3, r1
 8000aae:	4926      	ldr	r1, [pc, #152]	; (8000b48 <main+0x240>)
 8000ab0:	5c89      	ldrb	r1, [r1, r2]
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <main+0x234>)
 8000ab4:	54d1      	strb	r1, [r2, r3]
		for(b=0;b<135;b++)
 8000ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ab8:	3301      	adds	r3, #1
 8000aba:	673b      	str	r3, [r7, #112]	; 0x70
 8000abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000abe:	2b86      	cmp	r3, #134	; 0x86
 8000ac0:	ddef      	ble.n	8000aa2 <main+0x19a>
		}
		//offset 135
		c = c +135;
 8000ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ac4:	3387      	adds	r3, #135	; 0x87
 8000ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
	for(a = 23100; a <= 39996; a = a+384 )
 8000ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000aca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ace:	677b      	str	r3, [r7, #116]	; 0x74
 8000ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ad2:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	dde0      	ble.n	8000a9c <main+0x194>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		PIR[0] = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin); //save PIR current state
 8000ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ade:	481b      	ldr	r0, [pc, #108]	; (8000b4c <main+0x244>)
 8000ae0:	f005 f84e 	bl	8005b80 <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <main+0x248>)
 8000aea:	701a      	strb	r2, [r3, #0]

		//if (HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin) == GPIO_PIN_SET)
		if (PIR[0] == GPIO_PIN_SET && PIR[1] == GPIO_PIN_RESET && RTC_ON == 0)
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <main+0x248>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d176      	bne.n	8000be2 <main+0x2da>
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <main+0x248>)
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d172      	bne.n	8000be2 <main+0x2da>
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <main+0x24c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d16e      	bne.n	8000be2 <main+0x2da>
		{
			LCD_flush(&ST7735);
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <main+0x218>)
 8000b06:	f7ff feb7 	bl	8000878 <LCD_flush>
			//rtc work
			//start clock
			int a,b,c = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	663b      	str	r3, [r7, #96]	; 0x60
			//start at pixel index 23100 (red start at index 0 so add offset 23100%3 = 0)
			//stop at pixel index 39996 (start + length*rgb*( height of pixel number - 1) = 23100+128*3*(45-1) = 39996)
			//add next array 384 (128*3)
			for(a = 23100; a <= 39996; a = a+384 )
 8000b0e:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8000b14:	e037      	b.n	8000b86 <main+0x27e>
			{
				//lenght*rgb = 45*3 = 135 (0-134)
				for(b=0;b<135;b++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	667b      	str	r3, [r7, #100]	; 0x64
 8000b1a:	e02a      	b.n	8000b72 <main+0x26a>
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	2401d4dc 	.word	0x2401d4dc
 8000b24:	2401db30 	.word	0x2401db30
 8000b28:	58020c00 	.word	0x58020c00
 8000b2c:	58021800 	.word	0x58021800
 8000b30:	2401d4f8 	.word	0x2401d4f8
 8000b34:	2401d5ac 	.word	0x2401d5ac
 8000b38:	2401dae4 	.word	0x2401dae4
 8000b3c:	240114dc 	.word	0x240114dc
 8000b40:	24000018 	.word	0x24000018
 8000b44:	2400ef90 	.word	0x2400ef90
 8000b48:	2400c018 	.word	0x2400c018
 8000b4c:	58021000 	.word	0x58021000
 8000b50:	2401d51c 	.word	0x2401d51c
 8000b54:	2401d51a 	.word	0x2401d51a
				{
					Framememory[a+b] = fan_on[b+c];
 8000b58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b5c:	441a      	add	r2, r3
 8000b5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b62:	440b      	add	r3, r1
 8000b64:	49a3      	ldr	r1, [pc, #652]	; (8000df4 <main+0x4ec>)
 8000b66:	5c89      	ldrb	r1, [r1, r2]
 8000b68:	4aa3      	ldr	r2, [pc, #652]	; (8000df8 <main+0x4f0>)
 8000b6a:	54d1      	strb	r1, [r2, r3]
				for(b=0;b<135;b++)
 8000b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b6e:	3301      	adds	r3, #1
 8000b70:	667b      	str	r3, [r7, #100]	; 0x64
 8000b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b74:	2b86      	cmp	r3, #134	; 0x86
 8000b76:	ddef      	ble.n	8000b58 <main+0x250>
				}
				//offset 135
				c = c +135;
 8000b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b7a:	3387      	adds	r3, #135	; 0x87
 8000b7c:	663b      	str	r3, [r7, #96]	; 0x60
			for(a = 23100; a <= 39996; a = a+384 )
 8000b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b80:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b84:	66bb      	str	r3, [r7, #104]	; 0x68
 8000b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b88:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	ddc2      	ble.n	8000b16 <main+0x20e>
			}


			RTC_ON = 1;
 8000b90:	4b9a      	ldr	r3, [pc, #616]	; (8000dfc <main+0x4f4>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]

			RTC_TimeTypeDef sTime = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
			sTime.Hours =0x00; //0x14 (2 pm.)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	763b      	strb	r3, [r7, #24]
			sTime.Minutes =0x00; //0x30 (half hour or 30 min)
 8000baa:	2300      	movs	r3, #0
 8000bac:	767b      	strb	r3, [r7, #25]
			sTime.Seconds = 0x00; // 0 second
 8000bae:	2300      	movs	r3, #0
 8000bb0:	76bb      	strb	r3, [r7, #26]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000bb2:	f107 0318 	add.w	r3, r7, #24
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4891      	ldr	r0, [pc, #580]	; (8000e00 <main+0x4f8>)
 8000bbc:	f007 fd68 	bl	8008690 <HAL_RTC_SetTime>

			RTC_DateTypeDef sDate ={0};
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
			sDate.Date = 0x20;
 8000bc4:	2320      	movs	r3, #32
 8000bc6:	75bb      	strb	r3, [r7, #22]
			sDate.Month = 0x10;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	757b      	strb	r3, [r7, #21]
			sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	753b      	strb	r3, [r7, #20]
			sDate.Year = 0x21;
 8000bd0:	2321      	movs	r3, #33	; 0x21
 8000bd2:	75fb      	strb	r3, [r7, #23]
			HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4888      	ldr	r0, [pc, #544]	; (8000e00 <main+0x4f8>)
 8000bde:	f007 fe51 	bl	8008884 <HAL_RTC_SetDate>
//
//			//show lcd mode function
//
//
//		}
		PIR[1] = PIR[0]; // save PIR new state
 8000be2:	4b88      	ldr	r3, [pc, #544]	; (8000e04 <main+0x4fc>)
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	4b87      	ldr	r3, [pc, #540]	; (8000e04 <main+0x4fc>)
 8000be8:	705a      	strb	r2, [r3, #1]

		button1[0]= HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin); //save s1 current state
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	4886      	ldr	r0, [pc, #536]	; (8000e08 <main+0x500>)
 8000bee:	f004 ffc7 	bl	8005b80 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b85      	ldr	r3, [pc, #532]	; (8000e0c <main+0x504>)
 8000bf8:	701a      	strb	r2, [r3, #0]
		button2[0]= HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin); //save s2 current state
 8000bfa:	2140      	movs	r1, #64	; 0x40
 8000bfc:	4882      	ldr	r0, [pc, #520]	; (8000e08 <main+0x500>)
 8000bfe:	f004 ffbf 	bl	8005b80 <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b82      	ldr	r3, [pc, #520]	; (8000e10 <main+0x508>)
 8000c08:	701a      	strb	r2, [r3, #0]
		button3[0]= HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin); //save s1 current state
 8000c0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0e:	4881      	ldr	r0, [pc, #516]	; (8000e14 <main+0x50c>)
 8000c10:	f004 ffb6 	bl	8005b80 <HAL_GPIO_ReadPin>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b7f      	ldr	r3, [pc, #508]	; (8000e18 <main+0x510>)
 8000c1a:	701a      	strb	r2, [r3, #0]

		if(button1[1]==GPIO_PIN_SET && button1[0]==GPIO_PIN_RESET ) // if press s1
 8000c1c:	4b7b      	ldr	r3, [pc, #492]	; (8000e0c <main+0x504>)
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d12f      	bne.n	8000c84 <main+0x37c>
 8000c24:	4b79      	ldr	r3, [pc, #484]	; (8000e0c <main+0x504>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d12b      	bne.n	8000c84 <main+0x37c>
		{
			LCD_flush(&ST7735);
 8000c2c:	487b      	ldr	r0, [pc, #492]	; (8000e1c <main+0x514>)
 8000c2e:	f7ff fe23 	bl	8000878 <LCD_flush>
			PWM = 2500;
 8000c32:	4b7b      	ldr	r3, [pc, #492]	; (8000e20 <main+0x518>)
 8000c34:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000c38:	601a      	str	r2, [r3, #0]
			//fan_mode = 1;
			//show mode 1
			//memcpy(Framememory,owl,sizeof(owl));
			//show speed
			int i,j,n = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	657b      	str	r3, [r7, #84]	; 0x54
			//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
			//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
			//add next array 384 (128*3)
			for(i = 25956; i <= 37760; i = i+384 )
 8000c3e:	f246 5364 	movw	r3, #25956	; 0x6564
 8000c42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c44:	e019      	b.n	8000c7a <main+0x372>
			{
				//lenght*rgb = 32*3 = 96 (0-95)
				for(j=0;j<96;j++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c4a:	e00c      	b.n	8000c66 <main+0x35e>
				{
					Framememory[i+j] = speed1[j+n];
 8000c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c50:	441a      	add	r2, r3
 8000c52:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c56:	440b      	add	r3, r1
 8000c58:	4972      	ldr	r1, [pc, #456]	; (8000e24 <main+0x51c>)
 8000c5a:	5c89      	ldrb	r1, [r1, r2]
 8000c5c:	4a66      	ldr	r2, [pc, #408]	; (8000df8 <main+0x4f0>)
 8000c5e:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c62:	3301      	adds	r3, #1
 8000c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c68:	2b5f      	cmp	r3, #95	; 0x5f
 8000c6a:	ddef      	ble.n	8000c4c <main+0x344>
				}
				//offset 150
				n = n +96;
 8000c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c6e:	3360      	adds	r3, #96	; 0x60
 8000c70:	657b      	str	r3, [r7, #84]	; 0x54
			for(i = 25956; i <= 37760; i = i+384 )
 8000c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c74:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c7c:	f249 3280 	movw	r2, #37760	; 0x9380
 8000c80:	4293      	cmp	r3, r2
 8000c82:	dde0      	ble.n	8000c46 <main+0x33e>
			}
		}

		if(button2[1]==GPIO_PIN_SET && button2[0]==GPIO_PIN_RESET ) // if press s2
 8000c84:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <main+0x508>)
 8000c86:	785b      	ldrb	r3, [r3, #1]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d12f      	bne.n	8000cec <main+0x3e4>
 8000c8c:	4b60      	ldr	r3, [pc, #384]	; (8000e10 <main+0x508>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d12b      	bne.n	8000cec <main+0x3e4>
		{
			LCD_flush(&ST7735);
 8000c94:	4861      	ldr	r0, [pc, #388]	; (8000e1c <main+0x514>)
 8000c96:	f7ff fdef 	bl	8000878 <LCD_flush>
			PWM = 5000;
 8000c9a:	4b61      	ldr	r3, [pc, #388]	; (8000e20 <main+0x518>)
 8000c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca0:	601a      	str	r2, [r3, #0]
			//fan_mode = 2;
			//show mode 2
			//memcpy(Framememory,dog,sizeof(dog));
			//show speed
			int i,j,n = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	64bb      	str	r3, [r7, #72]	; 0x48
			//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
			//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
			//add next array 384 (128*3)
			for(i = 25956; i <= 37760; i = i+384 )
 8000ca6:	f246 5364 	movw	r3, #25956	; 0x6564
 8000caa:	653b      	str	r3, [r7, #80]	; 0x50
 8000cac:	e019      	b.n	8000ce2 <main+0x3da>
			{
				//lenght*rgb = 32*3 = 96 (0-95)
				for(j=0;j<96;j++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cb2:	e00c      	b.n	8000cce <main+0x3c6>
				{
					Framememory[i+j] = speed2[j+n];
 8000cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb8:	441a      	add	r2, r3
 8000cba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cbe:	440b      	add	r3, r1
 8000cc0:	4959      	ldr	r1, [pc, #356]	; (8000e28 <main+0x520>)
 8000cc2:	5c89      	ldrb	r1, [r1, r2]
 8000cc4:	4a4c      	ldr	r2, [pc, #304]	; (8000df8 <main+0x4f0>)
 8000cc6:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cca:	3301      	adds	r3, #1
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cd0:	2b5f      	cmp	r3, #95	; 0x5f
 8000cd2:	ddef      	ble.n	8000cb4 <main+0x3ac>
				}
				//offset 150
				n = n +96;
 8000cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd6:	3360      	adds	r3, #96	; 0x60
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
			for(i = 25956; i <= 37760; i = i+384 )
 8000cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cdc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8000ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ce4:	f249 3280 	movw	r2, #37760	; 0x9380
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	dde0      	ble.n	8000cae <main+0x3a6>
			}
		}

		if(button3[1]==GPIO_PIN_SET && button3[0]==GPIO_PIN_RESET ) // if press s3
 8000cec:	4b4a      	ldr	r3, [pc, #296]	; (8000e18 <main+0x510>)
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d12f      	bne.n	8000d54 <main+0x44c>
 8000cf4:	4b48      	ldr	r3, [pc, #288]	; (8000e18 <main+0x510>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d12b      	bne.n	8000d54 <main+0x44c>
		{
			LCD_flush(&ST7735);
 8000cfc:	4847      	ldr	r0, [pc, #284]	; (8000e1c <main+0x514>)
 8000cfe:	f7ff fdbb 	bl	8000878 <LCD_flush>
			PWM = 10000;
 8000d02:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <main+0x518>)
 8000d04:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d08:	601a      	str	r2, [r3, #0]
			//fan_mode = 3;
			//show mode
			//memcpy(Framememory,man,sizeof(man));
			//show speed
			int i,j,n = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			//start at pixel index 25956 (red start at index 0 so add offset 25956%3 = 0)
			//stop at pixel index 37760 (start + length*rgb*( height of pixel number - 1) = 25856+128*3*(32-1) = 37760)
			//add next array 384 (128*3)
			for(i = 25956; i <= 37760; i = i+384 )
 8000d0e:	f246 5364 	movw	r3, #25956	; 0x6564
 8000d12:	647b      	str	r3, [r7, #68]	; 0x44
 8000d14:	e019      	b.n	8000d4a <main+0x442>
			{
				//lenght*rgb = 32*3 = 96 (0-95)
				for(j=0;j<96;j++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	643b      	str	r3, [r7, #64]	; 0x40
 8000d1a:	e00c      	b.n	8000d36 <main+0x42e>
				{
					Framememory[i+j] = speed3[j+n];
 8000d1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d20:	441a      	add	r2, r3
 8000d22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d26:	440b      	add	r3, r1
 8000d28:	4940      	ldr	r1, [pc, #256]	; (8000e2c <main+0x524>)
 8000d2a:	5c89      	ldrb	r1, [r1, r2]
 8000d2c:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <main+0x4f0>)
 8000d2e:	54d1      	strb	r1, [r2, r3]
				for(j=0;j<96;j++)
 8000d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d32:	3301      	adds	r3, #1
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
 8000d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d38:	2b5f      	cmp	r3, #95	; 0x5f
 8000d3a:	ddef      	ble.n	8000d1c <main+0x414>
				}
				//offset 150
				n = n +96;
 8000d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d3e:	3360      	adds	r3, #96	; 0x60
 8000d40:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i = 25956; i <= 37760; i = i+384 )
 8000d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d44:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d48:	647b      	str	r3, [r7, #68]	; 0x44
 8000d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d4c:	f249 3280 	movw	r2, #37760	; 0x9380
 8000d50:	4293      	cmp	r3, r2
 8000d52:	dde0      	ble.n	8000d16 <main+0x40e>
			}
		}

		button1[1] = button1[0]; // save S1 new state
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <main+0x504>)
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <main+0x504>)
 8000d5a:	705a      	strb	r2, [r3, #1]
		button2[1] = button2[0]; // save S2 new state
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <main+0x508>)
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <main+0x508>)
 8000d62:	705a      	strb	r2, [r3, #1]
		button3[1] = button3[0]; // save S3 new state
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <main+0x510>)
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <main+0x510>)
 8000d6a:	705a      	strb	r2, [r3, #1]

		if (RTC_ON == 1)
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <main+0x4f4>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d17d      	bne.n	8000e70 <main+0x568>
		{
			RTC_TimeTypeDef sTime = NowTime;
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <main+0x528>)
 8000d76:	463c      	mov	r4, r7
 8000d78:	461d      	mov	r5, r3
 8000d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7e:	682b      	ldr	r3, [r5, #0]
 8000d80:	6023      	str	r3, [r4, #0]
			if (sTime.Seconds >= 0x60)
 8000d82:	78bb      	ldrb	r3, [r7, #2]
 8000d84:	2b5f      	cmp	r3, #95	; 0x5f
 8000d86:	d919      	bls.n	8000dbc <main+0x4b4>
			{
				sTime.Seconds -= 0x60;
 8000d88:	78bb      	ldrb	r3, [r7, #2]
 8000d8a:	3b60      	subs	r3, #96	; 0x60
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	70bb      	strb	r3, [r7, #2]
				sTime.Minutes++;
 8000d90:	787b      	ldrb	r3, [r7, #1]
 8000d92:	3301      	adds	r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	707b      	strb	r3, [r7, #1]
				if (sTime.Minutes >= 0x60)
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b5f      	cmp	r3, #95	; 0x5f
 8000d9c:	d90e      	bls.n	8000dbc <main+0x4b4>
				{
					sTime.Minutes -= 0x60;
 8000d9e:	787b      	ldrb	r3, [r7, #1]
 8000da0:	3b60      	subs	r3, #96	; 0x60
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	707b      	strb	r3, [r7, #1]
					sTime.Hours++;
 8000da6:	783b      	ldrb	r3, [r7, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	703b      	strb	r3, [r7, #0]
					if (sTime.Hours >= 0x24)
 8000dae:	783b      	ldrb	r3, [r7, #0]
 8000db0:	2b23      	cmp	r3, #35	; 0x23
 8000db2:	d903      	bls.n	8000dbc <main+0x4b4>
					{
						sTime.Hours -= 0x24;
 8000db4:	783b      	ldrb	r3, [r7, #0]
 8000db6:	3b24      	subs	r3, #36	; 0x24
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	703b      	strb	r3, [r7, #0]
					}
				}
			}

			if (sTime.Minutes < 0x01)
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <main+0x4c6>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM);
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <main+0x52c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <main+0x518>)
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
 8000dcc:	e050      	b.n	8000e70 <main+0x568>
	//			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
			}
			else
			{
				RTC_ON = 0;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <main+0x4f4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <main+0x52c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
				LCD_flush(&ST7735);
 8000ddc:	480f      	ldr	r0, [pc, #60]	; (8000e1c <main+0x514>)
 8000dde:	f7ff fd4b 	bl	8000878 <LCD_flush>
				int a,b,c = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
				//start at pixel index 23100 (red start at index 0 so add offset 23100%3 = 0)
				//stop at pixel index 39996 (start + length*rgb*( height of pixel number - 1) = 23100+128*3*(45-1) = 39996)
				//add next array 384 (128*3)
				for(a = 23100; a <= 39996; a = a+384 )
 8000de6:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8000dec:	e03b      	b.n	8000e66 <main+0x55e>
				{
					//lenght*rgb = 45*3 = 135 (0-134)
					for(b=0;b<135;b++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
 8000df2:	e02e      	b.n	8000e52 <main+0x54a>
 8000df4:	2400d7d4 	.word	0x2400d7d4
 8000df8:	240114dc 	.word	0x240114dc
 8000dfc:	2401d51a 	.word	0x2401d51a
 8000e00:	2401dac0 	.word	0x2401dac0
 8000e04:	2401d51c 	.word	0x2401d51c
 8000e08:	58020400 	.word	0x58020400
 8000e0c:	2401d510 	.word	0x2401d510
 8000e10:	2401d514 	.word	0x2401d514
 8000e14:	58021800 	.word	0x58021800
 8000e18:	2401d518 	.word	0x2401d518
 8000e1c:	2401d4dc 	.word	0x2401d4dc
 8000e20:	24011390 	.word	0x24011390
 8000e24:	2400ef90 	.word	0x2400ef90
 8000e28:	2400fb90 	.word	0x2400fb90
 8000e2c:	24010790 	.word	0x24010790
 8000e30:	2401dbb8 	.word	0x2401dbb8
 8000e34:	2401dae4 	.word	0x2401dae4
					{
						Framememory[a+b] = fan_off[b+c];
 8000e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3c:	441a      	add	r2, r3
 8000e3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e42:	440b      	add	r3, r1
 8000e44:	4910      	ldr	r1, [pc, #64]	; (8000e88 <main+0x580>)
 8000e46:	5c89      	ldrb	r1, [r1, r2]
 8000e48:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <main+0x584>)
 8000e4a:	54d1      	strb	r1, [r2, r3]
					for(b=0;b<135;b++)
 8000e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4e:	3301      	adds	r3, #1
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
 8000e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e54:	2b86      	cmp	r3, #134	; 0x86
 8000e56:	ddef      	ble.n	8000e38 <main+0x530>
					}
					//offset 135
					c = c +135;
 8000e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5a:	3387      	adds	r3, #135	; 0x87
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
				for(a = 23100; a <= 39996; a = a+384 )
 8000e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e60:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e68:	f649 423c 	movw	r2, #39996	; 0x9c3c
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	ddbe      	ble.n	8000dee <main+0x4e6>
		//simulate task
//		HAL_Delay(100);
//		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

		//read RTC
		HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8000e70:	2201      	movs	r2, #1
 8000e72:	4907      	ldr	r1, [pc, #28]	; (8000e90 <main+0x588>)
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <main+0x58c>)
 8000e76:	f007 fca9 	bl	80087cc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4906      	ldr	r1, [pc, #24]	; (8000e98 <main+0x590>)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <main+0x58c>)
 8000e80:	f007 fd88 	bl	8008994 <HAL_RTC_GetDate>
		PIR[0] = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin); //save PIR current state
 8000e84:	e629      	b.n	8000ada <main+0x1d2>
 8000e86:	bf00      	nop
 8000e88:	2400c018 	.word	0x2400c018
 8000e8c:	240114dc 	.word	0x240114dc
 8000e90:	2401dbb8 	.word	0x2401dbb8
 8000e94:	2401dac0 	.word	0x2401dac0
 8000e98:	2401dabc 	.word	0x2401dabc

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09c      	sub	sp, #112	; 0x70
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	224c      	movs	r2, #76	; 0x4c
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f00c f932 	bl	800d114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f00c f92c 	bl	800d114 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	f005 f807 	bl	8005ed0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b35      	ldr	r3, [pc, #212]	; (8000f9c <SystemClock_Config+0x100>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	4a34      	ldr	r2, [pc, #208]	; (8000f9c <SystemClock_Config+0x100>)
 8000ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ed0:	6193      	str	r3, [r2, #24]
 8000ed2:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <SystemClock_Config+0x100>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <SystemClock_Config+0x104>)
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <SystemClock_Config+0x104>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <SystemClock_Config+0x104>)
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ef4:	bf00      	nop
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <SystemClock_Config+0x100>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f02:	d1f8      	bne.n	8000ef6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <SystemClock_Config+0x108>)
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	f023 0303 	bic.w	r3, r3, #3
 8000f0c:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <SystemClock_Config+0x108>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f14:	2309      	movs	r3, #9
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	2302      	movs	r3, #2
 8000f24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f26:	2302      	movs	r3, #2
 8000f28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000f2e:	2319      	movs	r3, #25
 8000f30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000f36:	2306      	movs	r3, #6
 8000f38:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f005 f828 	bl	8005fa4 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f5a:	f000 fba1 	bl	80016a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	233f      	movs	r3, #63	; 0x3f
 8000f60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2303      	movs	r3, #3
 8000f64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f6e:	2340      	movs	r3, #64	; 0x40
 8000f70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f72:	2340      	movs	r3, #64	; 0x40
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f7c:	2340      	movs	r3, #64	; 0x40
 8000f7e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f005 fc1d 	bl	80067c4 <HAL_RCC_ClockConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000f90:	f000 fb86 	bl	80016a0 <Error_Handler>
  }
}
 8000f94:	bf00      	nop
 8000f96:	3770      	adds	r7, #112	; 0x70
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	58024800 	.word	0x58024800
 8000fa0:	58000400 	.word	0x58000400
 8000fa4:	58024400 	.word	0x58024400

08000fa8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_ETH_Init+0x80>)
 8000fae:	4a1f      	ldr	r2, [pc, #124]	; (800102c <MX_ETH_Init+0x84>)
 8000fb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_ETH_Init+0x88>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_ETH_Init+0x88>)
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_ETH_Init+0x88>)
 8000fc0:	22e1      	movs	r2, #225	; 0xe1
 8000fc2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_ETH_Init+0x88>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_ETH_Init+0x88>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_ETH_Init+0x88>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_ETH_Init+0x80>)
 8000fd8:	4a15      	ldr	r2, [pc, #84]	; (8001030 <MX_ETH_Init+0x88>)
 8000fda:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_ETH_Init+0x80>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_ETH_Init+0x80>)
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <MX_ETH_Init+0x8c>)
 8000fe6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_ETH_Init+0x80>)
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <MX_ETH_Init+0x90>)
 8000fec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_ETH_Init+0x80>)
 8000ff0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ff4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ff6:	480c      	ldr	r0, [pc, #48]	; (8001028 <MX_ETH_Init+0x80>)
 8000ff8:	f003 fffc 	bl	8004ff4 <HAL_ETH_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001002:	f000 fb4d 	bl	80016a0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001006:	2234      	movs	r2, #52	; 0x34
 8001008:	2100      	movs	r1, #0
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_ETH_Init+0x94>)
 800100c:	f00c f882 	bl	800d114 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MX_ETH_Init+0x94>)
 8001012:	2221      	movs	r2, #33	; 0x21
 8001014:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_ETH_Init+0x94>)
 8001018:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800101c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <MX_ETH_Init+0x94>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2401dbcc 	.word	0x2401dbcc
 800102c:	40028000 	.word	0x40028000
 8001030:	2401d520 	.word	0x2401d520
 8001034:	24011460 	.word	0x24011460
 8001038:	24011400 	.word	0x24011400
 800103c:	2401dc54 	.word	0x2401dc54

08001040 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b090      	sub	sp, #64	; 0x40
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2228      	movs	r2, #40	; 0x28
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00c f857 	bl	800d114 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <MX_RTC_Init+0x118>)
 8001068:	4a3c      	ldr	r2, [pc, #240]	; (800115c <MX_RTC_Init+0x11c>)
 800106a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800106c:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <MX_RTC_Init+0x118>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001072:	4b39      	ldr	r3, [pc, #228]	; (8001158 <MX_RTC_Init+0x118>)
 8001074:	227f      	movs	r2, #127	; 0x7f
 8001076:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <MX_RTC_Init+0x118>)
 800107a:	22ff      	movs	r2, #255	; 0xff
 800107c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <MX_RTC_Init+0x118>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001084:	4b34      	ldr	r3, [pc, #208]	; (8001158 <MX_RTC_Init+0x118>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800108a:	4b33      	ldr	r3, [pc, #204]	; (8001158 <MX_RTC_Init+0x118>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001090:	4b31      	ldr	r3, [pc, #196]	; (8001158 <MX_RTC_Init+0x118>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001096:	4830      	ldr	r0, [pc, #192]	; (8001158 <MX_RTC_Init+0x118>)
 8001098:	f007 fa82 	bl	80085a0 <HAL_RTC_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80010a2:	f000 fafd 	bl	80016a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c4:	2201      	movs	r2, #1
 80010c6:	4619      	mov	r1, r3
 80010c8:	4823      	ldr	r0, [pc, #140]	; (8001158 <MX_RTC_Init+0x118>)
 80010ca:	f007 fae1 	bl	8008690 <HAL_RTC_SetTime>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80010d4:	f000 fae4 	bl	80016a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010d8:	2301      	movs	r3, #1
 80010da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80010de:	2301      	movs	r3, #1
 80010e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f4:	2201      	movs	r2, #1
 80010f6:	4619      	mov	r1, r3
 80010f8:	4817      	ldr	r0, [pc, #92]	; (8001158 <MX_RTC_Init+0x118>)
 80010fa:	f007 fbc3 	bl	8008884 <HAL_RTC_SetDate>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001104:	f000 facc 	bl	80016a0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001108:	2300      	movs	r3, #0
 800110a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800110c:	2300      	movs	r3, #0
 800110e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001110:	2300      	movs	r3, #0
 8001112:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_RTC_Init+0x120>)
 8001122:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800112c:	2301      	movs	r3, #1
 800112e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	2201      	movs	r2, #1
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_RTC_Init+0x118>)
 8001140:	f007 fc76 	bl	8008a30 <HAL_RTC_SetAlarm_IT>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800114a:	f000 faa9 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3740      	adds	r7, #64	; 0x40
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2401dac0 	.word	0x2401dac0
 800115c:	58004000 	.word	0x58004000
 8001160:	00808080 	.word	0x00808080

08001164 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <MX_SPI1_Init+0xa8>)
 800116a:	4a29      	ldr	r2, [pc, #164]	; (8001210 <MX_SPI1_Init+0xac>)
 800116c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800116e:	4b27      	ldr	r3, [pc, #156]	; (800120c <MX_SPI1_Init+0xa8>)
 8001170:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001174:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <MX_SPI1_Init+0xa8>)
 8001178:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800117c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <MX_SPI1_Init+0xa8>)
 8001180:	2207      	movs	r2, #7
 8001182:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_SPI1_Init+0xa8>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <MX_SPI1_Init+0xa8>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_SPI1_Init+0xa8>)
 8001192:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001196:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_SPI1_Init+0xa8>)
 800119a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800119e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_SPI1_Init+0xa8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_SPI1_Init+0xa8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_SPI1_Init+0xa8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_SPI1_Init+0xa8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_SPI1_Init+0xa8>)
 80011ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_SPI1_Init+0xa8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_SPI1_Init+0xa8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_SPI1_Init+0xa8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_SPI1_Init+0xa8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_SPI1_Init+0xa8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_SPI1_Init+0xa8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_SPI1_Init+0xa8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_SPI1_Init+0xa8>)
 80011ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_SPI1_Init+0xa8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_SPI1_Init+0xa8>)
 80011fa:	f007 fe83 	bl	8008f04 <HAL_SPI_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001204:	f000 fa4c 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2401db30 	.word	0x2401db30
 8001210:	40013000 	.word	0x40013000

08001214 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b09a      	sub	sp, #104	; 0x68
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001234:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]
 8001246:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	222c      	movs	r2, #44	; 0x2c
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f00b ff60 	bl	800d114 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001254:	4b43      	ldr	r3, [pc, #268]	; (8001364 <MX_TIM1_Init+0x150>)
 8001256:	4a44      	ldr	r2, [pc, #272]	; (8001368 <MX_TIM1_Init+0x154>)
 8001258:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800125a:	4b42      	ldr	r3, [pc, #264]	; (8001364 <MX_TIM1_Init+0x150>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b40      	ldr	r3, [pc, #256]	; (8001364 <MX_TIM1_Init+0x150>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <MX_TIM1_Init+0x150>)
 8001268:	f242 7210 	movw	r2, #10000	; 0x2710
 800126c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <MX_TIM1_Init+0x150>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001274:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <MX_TIM1_Init+0x150>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <MX_TIM1_Init+0x150>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001280:	4838      	ldr	r0, [pc, #224]	; (8001364 <MX_TIM1_Init+0x150>)
 8001282:	f008 fde2 	bl	8009e4a <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800128c:	f000 fa08 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001294:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001296:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800129a:	4619      	mov	r1, r3
 800129c:	4831      	ldr	r0, [pc, #196]	; (8001364 <MX_TIM1_Init+0x150>)
 800129e:	f009 f90d 	bl	800a4bc <HAL_TIM_ConfigClockSource>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012a8:	f000 f9fa 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ac:	482d      	ldr	r0, [pc, #180]	; (8001364 <MX_TIM1_Init+0x150>)
 80012ae:	f008 fe8b 	bl	8009fc8 <HAL_TIM_PWM_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012b8:	f000 f9f2 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012cc:	4619      	mov	r1, r3
 80012ce:	4825      	ldr	r0, [pc, #148]	; (8001364 <MX_TIM1_Init+0x150>)
 80012d0:	f009 fe14 	bl	800aefc <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012da:	f000 f9e1 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2360      	movs	r3, #96	; 0x60
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	4818      	ldr	r0, [pc, #96]	; (8001364 <MX_TIM1_Init+0x150>)
 8001304:	f008 ffca 	bl	800a29c <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800130e:	f000 f9c7 	bl	80016a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <MX_TIM1_Init+0x150>)
 8001348:	f009 fe60 	bl	800b00c <HAL_TIMEx_ConfigBreakDeadTime>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001352:	f000 f9a5 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001356:	4803      	ldr	r0, [pc, #12]	; (8001364 <MX_TIM1_Init+0x150>)
 8001358:	f000 fbae 	bl	8001ab8 <HAL_TIM_MspPostInit>

}
 800135c:	bf00      	nop
 800135e:	3768      	adds	r7, #104	; 0x68
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2401dae4 	.word	0x2401dae4
 8001368:	40010000 	.word	0x40010000

0800136c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001372:	4a23      	ldr	r2, [pc, #140]	; (8001400 <MX_USART3_UART_Init+0x94>)
 8001374:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001378:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800137c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_USART3_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_USART3_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013b6:	f009 fea7 	bl	800b108 <HAL_UART_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013c0:	f000 f96e 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c4:	2100      	movs	r1, #0
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013c8:	f00b fadc 	bl	800c984 <HAL_UARTEx_SetTxFifoThreshold>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013d2:	f000 f965 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013da:	f00b fb11 	bl	800ca00 <HAL_UARTEx_SetRxFifoThreshold>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013e4:	f000 f95c 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013ea:	f00b fa92 	bl	800c912 <HAL_UARTEx_DisableFifoMode>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013f4:	f000 f954 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2401d5ac 	.word	0x2401d5ac
 8001400:	40004800 	.word	0x40004800

08001404 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800140c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001410:	2209      	movs	r2, #9
 8001412:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001416:	2202      	movs	r2, #2
 8001418:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001422:	2202      	movs	r2, #2
 8001424:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800143a:	2201      	movs	r2, #1
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001440:	2201      	movs	r2, #1
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001446:	2200      	movs	r2, #0
 8001448:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800144c:	f004 fbf8 	bl	8005c40 <HAL_PCD_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001456:	f000 f923 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2401d63c 	.word	0x2401d63c
 8001464:	40080000 	.word	0x40080000

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_DMA_Init+0x5c>)
 8001470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <MX_DMA_Init+0x5c>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_DMA_Init+0x5c>)
 8001480:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	200b      	movs	r0, #11
 8001492:	f000 ff20 	bl	80022d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001496:	200b      	movs	r0, #11
 8001498:	f000 ff37 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	200c      	movs	r0, #12
 80014a2:	f000 ff18 	bl	80022d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014a6:	200c      	movs	r0, #12
 80014a8:	f000 ff2f 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	200d      	movs	r0, #13
 80014b2:	f000 ff10 	bl	80022d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80014b6:	200d      	movs	r0, #13
 80014b8:	f000 ff27 	bl	800230a <HAL_NVIC_EnableIRQ>

}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	58024400 	.word	0x58024400

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	4b6b      	ldr	r3, [pc, #428]	; (800168c <MX_GPIO_Init+0x1c4>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e4:	4a69      	ldr	r2, [pc, #420]	; (800168c <MX_GPIO_Init+0x1c4>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ee:	4b67      	ldr	r3, [pc, #412]	; (800168c <MX_GPIO_Init+0x1c4>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fc:	4b63      	ldr	r3, [pc, #396]	; (800168c <MX_GPIO_Init+0x1c4>)
 80014fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001502:	4a62      	ldr	r2, [pc, #392]	; (800168c <MX_GPIO_Init+0x1c4>)
 8001504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150c:	4b5f      	ldr	r3, [pc, #380]	; (800168c <MX_GPIO_Init+0x1c4>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <MX_GPIO_Init+0x1c4>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	4a5a      	ldr	r2, [pc, #360]	; (800168c <MX_GPIO_Init+0x1c4>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152a:	4b58      	ldr	r3, [pc, #352]	; (800168c <MX_GPIO_Init+0x1c4>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	4b54      	ldr	r3, [pc, #336]	; (800168c <MX_GPIO_Init+0x1c4>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	4a53      	ldr	r2, [pc, #332]	; (800168c <MX_GPIO_Init+0x1c4>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <MX_GPIO_Init+0x1c4>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001556:	4b4d      	ldr	r3, [pc, #308]	; (800168c <MX_GPIO_Init+0x1c4>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	4a4b      	ldr	r2, [pc, #300]	; (800168c <MX_GPIO_Init+0x1c4>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001566:	4b49      	ldr	r3, [pc, #292]	; (800168c <MX_GPIO_Init+0x1c4>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	4b45      	ldr	r3, [pc, #276]	; (800168c <MX_GPIO_Init+0x1c4>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	4a44      	ldr	r2, [pc, #272]	; (800168c <MX_GPIO_Init+0x1c4>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001584:	4b41      	ldr	r3, [pc, #260]	; (800168c <MX_GPIO_Init+0x1c4>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <MX_GPIO_Init+0x1c4>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4a3c      	ldr	r2, [pc, #240]	; (800168c <MX_GPIO_Init+0x1c4>)
 800159a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <MX_GPIO_Init+0x1c4>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2101      	movs	r1, #1
 80015b4:	4836      	ldr	r0, [pc, #216]	; (8001690 <MX_GPIO_Init+0x1c8>)
 80015b6:	f004 fafb 	bl	8005bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015c0:	4834      	ldr	r0, [pc, #208]	; (8001694 <MX_GPIO_Init+0x1cc>)
 80015c2:	f004 faf5 	bl	8005bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015cc:	4831      	ldr	r0, [pc, #196]	; (8001694 <MX_GPIO_Init+0x1cc>)
 80015ce:	f004 faef 	bl	8005bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d8:	482f      	ldr	r0, [pc, #188]	; (8001698 <MX_GPIO_Init+0x1d0>)
 80015da:	f004 fae9 	bl	8005bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80015de:	2301      	movs	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4826      	ldr	r0, [pc, #152]	; (8001690 <MX_GPIO_Init+0x1c8>)
 80015f6:	f004 f913 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80015fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	4619      	mov	r1, r3
 800160e:	4823      	ldr	r0, [pc, #140]	; (800169c <MX_GPIO_Init+0x1d4>)
 8001610:	f004 f906 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8001614:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	4819      	ldr	r0, [pc, #100]	; (8001694 <MX_GPIO_Init+0x1cc>)
 800162e:	f004 f8f7 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4813      	ldr	r0, [pc, #76]	; (8001698 <MX_GPIO_Init+0x1d0>)
 800164c:	f004 f8e8 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 8001650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <MX_GPIO_Init+0x1d0>)
 8001666:	f004 f8db 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_GPIO_Init+0x1c8>)
 800167e:	f004 f8cf 	bl	8005820 <HAL_GPIO_Init>

}
 8001682:	bf00      	nop
 8001684:	3730      	adds	r7, #48	; 0x30
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	58024400 	.word	0x58024400
 8001690:	58020400 	.word	0x58020400
 8001694:	58020c00 	.word	0x58020c00
 8001698:	58021800 	.word	0x58021800
 800169c:	58021000 	.word	0x58021000

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>
	...

080016ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_MspInit+0x30>)
 80016b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_MspInit+0x30>)
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_MspInit+0x30>)
 80016c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	58024400 	.word	0x58024400

080016e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	; 0x38
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a59      	ldr	r2, [pc, #356]	; (8001864 <HAL_ETH_MspInit+0x184>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	f040 80ab 	bne.w	800185a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001704:	4b58      	ldr	r3, [pc, #352]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001706:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800170a:	4a57      	ldr	r2, [pc, #348]	; (8001868 <HAL_ETH_MspInit+0x188>)
 800170c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001710:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001714:	4b54      	ldr	r3, [pc, #336]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800171a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800171e:	623b      	str	r3, [r7, #32]
 8001720:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001724:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001728:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <HAL_ETH_MspInit+0x188>)
 800172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001732:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001734:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001740:	4b49      	ldr	r3, [pc, #292]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001742:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001746:	4a48      	ldr	r2, [pc, #288]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001750:	4b45      	ldr	r3, [pc, #276]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001752:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	4b42      	ldr	r3, [pc, #264]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	4a40      	ldr	r2, [pc, #256]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176e:	4b3e      	ldr	r3, [pc, #248]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b3a      	ldr	r3, [pc, #232]	; (8001868 <HAL_ETH_MspInit+0x188>)
 800177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001782:	4a39      	ldr	r2, [pc, #228]	; (8001868 <HAL_ETH_MspInit+0x188>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <HAL_ETH_MspInit+0x188>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <HAL_ETH_MspInit+0x188>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a0:	4a31      	ldr	r2, [pc, #196]	; (8001868 <HAL_ETH_MspInit+0x188>)
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017aa:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <HAL_ETH_MspInit+0x188>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b8:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_ETH_MspInit+0x188>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017be:	4a2a      	ldr	r2, [pc, #168]	; (8001868 <HAL_ETH_MspInit+0x188>)
 80017c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_ETH_MspInit+0x188>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80017d6:	2332      	movs	r3, #50	; 0x32
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017e6:	230b      	movs	r3, #11
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	481e      	ldr	r0, [pc, #120]	; (800186c <HAL_ETH_MspInit+0x18c>)
 80017f2:	f004 f815 	bl	8005820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80017f6:	2386      	movs	r3, #134	; 0x86
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001806:	230b      	movs	r3, #11
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	4619      	mov	r1, r3
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <HAL_ETH_MspInit+0x190>)
 8001812:	f004 f805 	bl	8005820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001828:	230b      	movs	r3, #11
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001830:	4619      	mov	r1, r3
 8001832:	4810      	ldr	r0, [pc, #64]	; (8001874 <HAL_ETH_MspInit+0x194>)
 8001834:	f003 fff4 	bl	8005820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001838:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800184a:	230b      	movs	r3, #11
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	4808      	ldr	r0, [pc, #32]	; (8001878 <HAL_ETH_MspInit+0x198>)
 8001856:	f003 ffe3 	bl	8005820 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3738      	adds	r7, #56	; 0x38
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40028000 	.word	0x40028000
 8001868:	58024400 	.word	0x58024400
 800186c:	58020800 	.word	0x58020800
 8001870:	58020000 	.word	0x58020000
 8001874:	58020400 	.word	0x58020400
 8001878:	58021800 	.word	0x58021800

0800187c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0b2      	sub	sp, #200	; 0xc8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	22bc      	movs	r2, #188	; 0xbc
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f00b fc41 	bl	800d114 <memset>
  if(hrtc->Instance==RTC)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <HAL_RTC_MspInit+0x68>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d11e      	bne.n	80018da <HAL_RTC_MspInit+0x5e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800189c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4618      	mov	r0, r3
 80018b0:	f005 fb14 	bl	8006edc <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80018ba:	f7ff fef1 	bl	80016a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RTC_MspInit+0x6c>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_RTC_MspInit+0x6c>)
 80018c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2029      	movs	r0, #41	; 0x29
 80018d0:	f000 fd01 	bl	80022d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018d4:	2029      	movs	r0, #41	; 0x29
 80018d6:	f000 fd18 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	37c8      	adds	r7, #200	; 0xc8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	58004000 	.word	0x58004000
 80018e8:	58024400 	.word	0x58024400

080018ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0ba      	sub	sp, #232	; 0xe8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	22bc      	movs	r2, #188	; 0xbc
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f00b fc01 	bl	800d114 <memset>
  if(hspi->Instance==SPI1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_SPI_MspInit+0x170>)
 8001918:	4293      	cmp	r3, r2
 800191a:	f040 809b 	bne.w	8001a54 <HAL_SPI_MspInit+0x168>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001924:	2300      	movs	r3, #0
 8001926:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001928:	f107 0318 	add.w	r3, r7, #24
 800192c:	4618      	mov	r0, r3
 800192e:	f005 fad5 	bl	8006edc <HAL_RCCEx_PeriphCLKConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001938:	f7ff feb2 	bl	80016a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800193c:	4b48      	ldr	r3, [pc, #288]	; (8001a60 <HAL_SPI_MspInit+0x174>)
 800193e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001942:	4a47      	ldr	r2, [pc, #284]	; (8001a60 <HAL_SPI_MspInit+0x174>)
 8001944:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001948:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800194c:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <HAL_SPI_MspInit+0x174>)
 800194e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_SPI_MspInit+0x174>)
 800195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001960:	4a3f      	ldr	r2, [pc, #252]	; (8001a60 <HAL_SPI_MspInit+0x174>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_SPI_MspInit+0x174>)
 800196c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_SPI_MspInit+0x174>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197e:	4a38      	ldr	r2, [pc, #224]	; (8001a60 <HAL_SPI_MspInit+0x174>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <HAL_SPI_MspInit+0x174>)
 800198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001996:	2320      	movs	r3, #32
 8001998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ae:	2305      	movs	r3, #5
 80019b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019b8:	4619      	mov	r1, r3
 80019ba:	482a      	ldr	r0, [pc, #168]	; (8001a64 <HAL_SPI_MspInit+0x178>)
 80019bc:	f003 ff30 	bl	8005820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019c0:	2320      	movs	r3, #32
 80019c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d8:	2305      	movs	r3, #5
 80019da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4820      	ldr	r0, [pc, #128]	; (8001a68 <HAL_SPI_MspInit+0x17c>)
 80019e6:	f003 ff1b 	bl	8005820 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 80019ec:	4a20      	ldr	r2, [pc, #128]	; (8001a70 <HAL_SPI_MspInit+0x184>)
 80019ee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 80019f2:	2226      	movs	r2, #38	; 0x26
 80019f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 8001a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a08:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a28:	4810      	ldr	r0, [pc, #64]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 8001a2a:	f000 fc9d 	bl	8002368 <HAL_DMA_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8001a34:	f7ff fe34 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 8001a3c:	679a      	str	r2, [r3, #120]	; 0x78
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_SPI_MspInit+0x180>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	2023      	movs	r0, #35	; 0x23
 8001a4a:	f000 fc44 	bl	80022d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a4e:	2023      	movs	r0, #35	; 0x23
 8001a50:	f000 fc5b 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	37e8      	adds	r7, #232	; 0xe8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40013000 	.word	0x40013000
 8001a60:	58024400 	.word	0x58024400
 8001a64:	58020000 	.word	0x58020000
 8001a68:	58020400 	.word	0x58020400
 8001a6c:	2401dc88 	.word	0x2401dc88
 8001a70:	40020010 	.word	0x40020010

08001a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10e      	bne.n	8001aa4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a8c:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	58024400 	.word	0x58024400

08001ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <HAL_TIM_MspPostInit+0x6c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d11f      	bne.n	8001b1a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_TIM_MspPostInit+0x70>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae0:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <HAL_TIM_MspPostInit+0x70>)
 8001ae2:	f043 0310 	orr.w	r3, r3, #16
 8001ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_TIM_MspPostInit+0x70>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001afc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <HAL_TIM_MspPostInit+0x74>)
 8001b16:	f003 fe83 	bl	8005820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40010000 	.word	0x40010000
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	58021000 	.word	0x58021000

08001b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b0b8      	sub	sp, #224	; 0xe0
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	22bc      	movs	r2, #188	; 0xbc
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00b fadf 	bl	800d114 <memset>
  if(huart->Instance==USART3)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a57      	ldr	r2, [pc, #348]	; (8001cb8 <HAL_UART_MspInit+0x188>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	f040 80a6 	bne.w	8001cae <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b62:	2302      	movs	r3, #2
 8001b64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4618      	mov	r0, r3
 8001b72:	f005 f9b3 	bl	8006edc <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001b7c:	f7ff fd90 	bl	80016a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b80:	4b4e      	ldr	r3, [pc, #312]	; (8001cbc <HAL_UART_MspInit+0x18c>)
 8001b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b86:	4a4d      	ldr	r2, [pc, #308]	; (8001cbc <HAL_UART_MspInit+0x18c>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b90:	4b4a      	ldr	r3, [pc, #296]	; (8001cbc <HAL_UART_MspInit+0x18c>)
 8001b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9e:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <HAL_UART_MspInit+0x18c>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	4a45      	ldr	r2, [pc, #276]	; (8001cbc <HAL_UART_MspInit+0x18c>)
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bae:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <HAL_UART_MspInit+0x18c>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001bbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001be0:	4619      	mov	r1, r3
 8001be2:	4837      	ldr	r0, [pc, #220]	; (8001cc0 <HAL_UART_MspInit+0x190>)
 8001be4:	f003 fe1c 	bl	8005820 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001bea:	4a37      	ldr	r2, [pc, #220]	; (8001cc8 <HAL_UART_MspInit+0x198>)
 8001bec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001bee:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001bf0:	222d      	movs	r2, #45	; 0x2d
 8001bf2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c06:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c28:	4826      	ldr	r0, [pc, #152]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001c2a:	f000 fb9d 	bl	8002368 <HAL_DMA_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001c34:	f7ff fd34 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001c3c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c3e:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_UART_MspInit+0x194>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c46:	4a22      	ldr	r2, [pc, #136]	; (8001cd0 <HAL_UART_MspInit+0x1a0>)
 8001c48:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c4c:	222e      	movs	r2, #46	; 0x2e
 8001c4e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c62:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001c82:	4812      	ldr	r0, [pc, #72]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c84:	f000 fb70 	bl	8002368 <HAL_DMA_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001c8e:	f7ff fd07 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c96:	679a      	str	r2, [r3, #120]	; 0x78
 8001c98:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <HAL_UART_MspInit+0x19c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2027      	movs	r0, #39	; 0x27
 8001ca4:	f000 fb17 	bl	80022d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ca8:	2027      	movs	r0, #39	; 0x27
 8001caa:	f000 fb2e 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	37e0      	adds	r7, #224	; 0xe0
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40004800 	.word	0x40004800
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020c00 	.word	0x58020c00
 8001cc4:	2401d534 	.word	0x2401d534
 8001cc8:	40020028 	.word	0x40020028
 8001ccc:	2401da44 	.word	0x2401da44
 8001cd0:	40020040 	.word	0x40020040

08001cd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0b8      	sub	sp, #224	; 0xe0
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	22bc      	movs	r2, #188	; 0xbc
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f00b fa0d 	bl	800d114 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a37      	ldr	r2, [pc, #220]	; (8001ddc <HAL_PCD_MspInit+0x108>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d166      	bne.n	8001dd2 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001d0e:	2312      	movs	r3, #18
 8001d10:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001d16:	2303      	movs	r3, #3
 8001d18:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001d1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001d24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d28:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001d2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	4618      	mov	r0, r3
 8001d38:	f005 f8d0 	bl	8006edc <HAL_RCCEx_PeriphCLKConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001d42:	f7ff fcad 	bl	80016a0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001d46:	f004 f91d 	bl	8005f84 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_PCD_MspInit+0x10c>)
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d50:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <HAL_PCD_MspInit+0x10c>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <HAL_PCD_MspInit+0x10c>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001d68:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001d6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001d82:	230a      	movs	r3, #10
 8001d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4815      	ldr	r0, [pc, #84]	; (8001de4 <HAL_PCD_MspInit+0x110>)
 8001d90:	f003 fd46 	bl	8005820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dac:	4619      	mov	r1, r3
 8001dae:	480d      	ldr	r0, [pc, #52]	; (8001de4 <HAL_PCD_MspInit+0x110>)
 8001db0:	f003 fd36 	bl	8005820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_PCD_MspInit+0x10c>)
 8001db6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_PCD_MspInit+0x10c>)
 8001dbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_PCD_MspInit+0x10c>)
 8001dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	37e0      	adds	r7, #224	; 0xe0
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40080000 	.word	0x40080000
 8001de0:	58024400 	.word	0x58024400
 8001de4:	58020000 	.word	0x58020000

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <NMI_Handler+0x4>

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e34:	f000 f910 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <DMA1_Stream0_IRQHandler+0x10>)
 8001e42:	f001 fdb9 	bl	80039b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2401dc88 	.word	0x2401dc88

08001e50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <DMA1_Stream1_IRQHandler+0x10>)
 8001e56:	f001 fdaf 	bl	80039b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2401d534 	.word	0x2401d534

08001e64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <DMA1_Stream2_IRQHandler+0x10>)
 8001e6a:	f001 fda5 	bl	80039b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2401da44 	.word	0x2401da44

08001e78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <SPI1_IRQHandler+0x10>)
 8001e7e:	f007 fc7b 	bl	8009778 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2401db30 	.word	0x2401db30

08001e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <USART3_IRQHandler+0x10>)
 8001e92:	f009 f9cf 	bl	800b234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2401d5ac 	.word	0x2401d5ac

08001ea0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <RTC_Alarm_IRQHandler+0x10>)
 8001ea6:	f006 fef9 	bl	8008c9c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2401dac0 	.word	0x2401dac0

08001eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <_sbrk+0x5c>)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <_sbrk+0x60>)
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <_sbrk+0x64>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <_sbrk+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d207      	bcs.n	8001ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee4:	f00b f8de 	bl	800d0a4 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	220c      	movs	r2, #12
 8001eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e009      	b.n	8001f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <_sbrk+0x64>)
 8001f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	24080000 	.word	0x24080000
 8001f14:	00000400 	.word	0x00000400
 8001f18:	2401d528 	.word	0x2401d528
 8001f1c:	2401dd18 	.word	0x2401dd18

08001f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f24:	f7fe fb54 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f2a:	490d      	ldr	r1, [pc, #52]	; (8001f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f40:	4c0a      	ldr	r4, [pc, #40]	; (8001f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f00b f8af 	bl	800d0b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f52:	f7fe fcd9 	bl	8000908 <main>
  bx  lr
 8001f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f60:	24011400 	.word	0x24011400
  ldr r2, =_sidata
 8001f64:	0800d29c 	.word	0x0800d29c
  ldr r2, =_sbss
 8001f68:	240114c0 	.word	0x240114c0
  ldr r4, =_ebss
 8001f6c:	2401dd14 	.word	0x2401dd14

08001f70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC3_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	f000 f9a0 	bl	80022c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f80:	f004 fdd6 	bl	8006b30 <HAL_RCC_GetSysClockFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_Init+0x68>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	4913      	ldr	r1, [pc, #76]	; (8001fe0 <HAL_Init+0x6c>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_Init+0x68>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <HAL_Init+0x6c>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <HAL_Init+0x70>)
 8001fb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fb8:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <HAL_Init+0x74>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f814 	bl	8001fec <HAL_InitTick>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e002      	b.n	8001fd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fce:	f7ff fb6d 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	0800d24c 	.word	0x0800d24c
 8001fe4:	24000004 	.word	0x24000004
 8001fe8:	24000000 	.word	0x24000000

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_InitTick+0x60>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e021      	b.n	8002044 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_InitTick+0x64>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_InitTick+0x60>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f985 	bl	8002326 <HAL_SYSTICK_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00e      	b.n	8002044 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b0f      	cmp	r3, #15
 800202a:	d80a      	bhi.n	8002042 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202c:	2200      	movs	r2, #0
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f000 f94f 	bl	80022d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002038:	4a06      	ldr	r2, [pc, #24]	; (8002054 <HAL_InitTick+0x68>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	24011398 	.word	0x24011398
 8002050:	24000000 	.word	0x24000000
 8002054:	24011394 	.word	0x24011394

08002058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_IncTick+0x20>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x24>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_IncTick+0x24>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	24011398 	.word	0x24011398
 800207c:	2401dd00 	.word	0x2401dd00

08002080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_GetTick+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	2401dd00 	.word	0x2401dd00

08002098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff ffee 	bl	8002080 <HAL_GetTick>
 80020a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d005      	beq.n	80020be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_Delay+0x44>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020be:	bf00      	nop
 80020c0:	f7ff ffde 	bl	8002080 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d8f7      	bhi.n	80020c0 <HAL_Delay+0x28>
  {
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	24011398 	.word	0x24011398

080020e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_GetREVID+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0c1b      	lsrs	r3, r3, #16
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	5c001000 	.word	0x5c001000

080020f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002108:	4904      	ldr	r1, [pc, #16]	; (800211c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	58000400 	.word	0x58000400

08002120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <__NVIC_SetPriorityGrouping+0x40>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800213c:	4013      	ands	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 800214a:	4313      	orrs	r3, r2
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	; (8002160 <__NVIC_SetPriorityGrouping+0x40>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00
 8002164:	05fa0000 	.word	0x05fa0000

08002168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <__NVIC_GetPriorityGrouping+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0307 	and.w	r3, r3, #7
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db0b      	blt.n	80021ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	4907      	ldr	r1, [pc, #28]	; (80021bc <__NVIC_EnableIRQ+0x38>)
 800219e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100

080021c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db0a      	blt.n	80021ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	490c      	ldr	r1, [pc, #48]	; (800220c <__NVIC_SetPriority+0x4c>)
 80021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e8:	e00a      	b.n	8002200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4908      	ldr	r1, [pc, #32]	; (8002210 <__NVIC_SetPriority+0x50>)
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3b04      	subs	r3, #4
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	440b      	add	r3, r1
 80021fe:	761a      	strb	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f1c3 0307 	rsb	r3, r3, #7
 800222e:	2b04      	cmp	r3, #4
 8002230:	bf28      	it	cs
 8002232:	2304      	movcs	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3304      	adds	r3, #4
 800223a:	2b06      	cmp	r3, #6
 800223c:	d902      	bls.n	8002244 <NVIC_EncodePriority+0x30>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3b03      	subs	r3, #3
 8002242:	e000      	b.n	8002246 <NVIC_EncodePriority+0x32>
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	401a      	ands	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	43d9      	mvns	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	4313      	orrs	r3, r2
         );
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800228c:	d301      	bcc.n	8002292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228e:	2301      	movs	r3, #1
 8002290:	e00f      	b.n	80022b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <SysTick_Config+0x40>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229a:	210f      	movs	r1, #15
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f7ff ff8e 	bl	80021c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <SysTick_Config+0x40>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SysTick_Config+0x40>)
 80022ac:	2207      	movs	r2, #7
 80022ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	e000e010 	.word	0xe000e010

080022c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff29 	bl	8002120 <__NVIC_SetPriorityGrouping>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff40 	bl	8002168 <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff90 	bl	8002214 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5f 	bl	80021c0 <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff33 	bl	8002184 <__NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffa4 	bl	800227c <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_GetCurrentCPUID+0x24>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	2b07      	cmp	r3, #7
 8002350:	d101      	bne.n	8002356 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002352:	2303      	movs	r3, #3
 8002354:	e000      	b.n	8002358 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002356:	2301      	movs	r3, #1
  }
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff fe86 	bl	8002080 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e316      	b.n	80029ae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a66      	ldr	r2, [pc, #408]	; (8002520 <HAL_DMA_Init+0x1b8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d04a      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a65      	ldr	r2, [pc, #404]	; (8002524 <HAL_DMA_Init+0x1bc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d045      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a63      	ldr	r2, [pc, #396]	; (8002528 <HAL_DMA_Init+0x1c0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d040      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a62      	ldr	r2, [pc, #392]	; (800252c <HAL_DMA_Init+0x1c4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d03b      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a60      	ldr	r2, [pc, #384]	; (8002530 <HAL_DMA_Init+0x1c8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d036      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a5f      	ldr	r2, [pc, #380]	; (8002534 <HAL_DMA_Init+0x1cc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d031      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <HAL_DMA_Init+0x1d0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02c      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a5c      	ldr	r2, [pc, #368]	; (800253c <HAL_DMA_Init+0x1d4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d027      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a5a      	ldr	r2, [pc, #360]	; (8002540 <HAL_DMA_Init+0x1d8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d022      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a59      	ldr	r2, [pc, #356]	; (8002544 <HAL_DMA_Init+0x1dc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d01d      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a57      	ldr	r2, [pc, #348]	; (8002548 <HAL_DMA_Init+0x1e0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d018      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a56      	ldr	r2, [pc, #344]	; (800254c <HAL_DMA_Init+0x1e4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d013      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_DMA_Init+0x1e8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00e      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a53      	ldr	r2, [pc, #332]	; (8002554 <HAL_DMA_Init+0x1ec>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d009      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a51      	ldr	r2, [pc, #324]	; (8002558 <HAL_DMA_Init+0x1f0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d004      	beq.n	8002420 <HAL_DMA_Init+0xb8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a50      	ldr	r2, [pc, #320]	; (800255c <HAL_DMA_Init+0x1f4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d101      	bne.n	8002424 <HAL_DMA_Init+0xbc>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_DMA_Init+0xbe>
 8002424:	2300      	movs	r3, #0
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 813b 	beq.w	80026a2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a37      	ldr	r2, [pc, #220]	; (8002520 <HAL_DMA_Init+0x1b8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d04a      	beq.n	80024dc <HAL_DMA_Init+0x174>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a36      	ldr	r2, [pc, #216]	; (8002524 <HAL_DMA_Init+0x1bc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d045      	beq.n	80024dc <HAL_DMA_Init+0x174>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a34      	ldr	r2, [pc, #208]	; (8002528 <HAL_DMA_Init+0x1c0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d040      	beq.n	80024dc <HAL_DMA_Init+0x174>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a33      	ldr	r2, [pc, #204]	; (800252c <HAL_DMA_Init+0x1c4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d03b      	beq.n	80024dc <HAL_DMA_Init+0x174>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a31      	ldr	r2, [pc, #196]	; (8002530 <HAL_DMA_Init+0x1c8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d036      	beq.n	80024dc <HAL_DMA_Init+0x174>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a30      	ldr	r2, [pc, #192]	; (8002534 <HAL_DMA_Init+0x1cc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d031      	beq.n	80024dc <HAL_DMA_Init+0x174>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2e      	ldr	r2, [pc, #184]	; (8002538 <HAL_DMA_Init+0x1d0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d02c      	beq.n	80024dc <HAL_DMA_Init+0x174>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a2d      	ldr	r2, [pc, #180]	; (800253c <HAL_DMA_Init+0x1d4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d027      	beq.n	80024dc <HAL_DMA_Init+0x174>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a2b      	ldr	r2, [pc, #172]	; (8002540 <HAL_DMA_Init+0x1d8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d022      	beq.n	80024dc <HAL_DMA_Init+0x174>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2a      	ldr	r2, [pc, #168]	; (8002544 <HAL_DMA_Init+0x1dc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d01d      	beq.n	80024dc <HAL_DMA_Init+0x174>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_DMA_Init+0x1e0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d018      	beq.n	80024dc <HAL_DMA_Init+0x174>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a27      	ldr	r2, [pc, #156]	; (800254c <HAL_DMA_Init+0x1e4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_DMA_Init+0x174>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a25      	ldr	r2, [pc, #148]	; (8002550 <HAL_DMA_Init+0x1e8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00e      	beq.n	80024dc <HAL_DMA_Init+0x174>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a24      	ldr	r2, [pc, #144]	; (8002554 <HAL_DMA_Init+0x1ec>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d009      	beq.n	80024dc <HAL_DMA_Init+0x174>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a22      	ldr	r2, [pc, #136]	; (8002558 <HAL_DMA_Init+0x1f0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d004      	beq.n	80024dc <HAL_DMA_Init+0x174>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a21      	ldr	r2, [pc, #132]	; (800255c <HAL_DMA_Init+0x1f4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d108      	bne.n	80024ee <HAL_DMA_Init+0x186>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e007      	b.n	80024fe <HAL_DMA_Init+0x196>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024fe:	e02f      	b.n	8002560 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002500:	f7ff fdbe 	bl	8002080 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b05      	cmp	r3, #5
 800250c:	d928      	bls.n	8002560 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2203      	movs	r2, #3
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e246      	b.n	80029ae <HAL_DMA_Init+0x646>
 8002520:	40020010 	.word	0x40020010
 8002524:	40020028 	.word	0x40020028
 8002528:	40020040 	.word	0x40020040
 800252c:	40020058 	.word	0x40020058
 8002530:	40020070 	.word	0x40020070
 8002534:	40020088 	.word	0x40020088
 8002538:	400200a0 	.word	0x400200a0
 800253c:	400200b8 	.word	0x400200b8
 8002540:	40020410 	.word	0x40020410
 8002544:	40020428 	.word	0x40020428
 8002548:	40020440 	.word	0x40020440
 800254c:	40020458 	.word	0x40020458
 8002550:	40020470 	.word	0x40020470
 8002554:	40020488 	.word	0x40020488
 8002558:	400204a0 	.word	0x400204a0
 800255c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1c8      	bne.n	8002500 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4b83      	ldr	r3, [pc, #524]	; (8002788 <HAL_DMA_Init+0x420>)
 800257a:	4013      	ands	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002586:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002592:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d107      	bne.n	80025c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	4313      	orrs	r3, r2
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80025c4:	4b71      	ldr	r3, [pc, #452]	; (800278c <HAL_DMA_Init+0x424>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b71      	ldr	r3, [pc, #452]	; (8002790 <HAL_DMA_Init+0x428>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025d0:	d328      	bcc.n	8002624 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b28      	cmp	r3, #40	; 0x28
 80025d8:	d903      	bls.n	80025e2 <HAL_DMA_Init+0x27a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b2e      	cmp	r3, #46	; 0x2e
 80025e0:	d917      	bls.n	8002612 <HAL_DMA_Init+0x2aa>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b3e      	cmp	r3, #62	; 0x3e
 80025e8:	d903      	bls.n	80025f2 <HAL_DMA_Init+0x28a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b42      	cmp	r3, #66	; 0x42
 80025f0:	d90f      	bls.n	8002612 <HAL_DMA_Init+0x2aa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b46      	cmp	r3, #70	; 0x46
 80025f8:	d903      	bls.n	8002602 <HAL_DMA_Init+0x29a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b48      	cmp	r3, #72	; 0x48
 8002600:	d907      	bls.n	8002612 <HAL_DMA_Init+0x2aa>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b4e      	cmp	r3, #78	; 0x4e
 8002608:	d905      	bls.n	8002616 <HAL_DMA_Init+0x2ae>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b52      	cmp	r3, #82	; 0x52
 8002610:	d801      	bhi.n	8002616 <HAL_DMA_Init+0x2ae>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_DMA_Init+0x2b0>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002622:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f023 0307 	bic.w	r3, r3, #7
 800263a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	2b04      	cmp	r3, #4
 800264c:	d117      	bne.n	800267e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00e      	beq.n	800267e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f002 fb3d 	bl	8004ce0 <DMA_CheckFifoParam>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2240      	movs	r2, #64	; 0x40
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e197      	b.n	80029ae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f002 fa78 	bl	8004b7c <DMA_CalcBaseAndBitshift>
 800268c:	4603      	mov	r3, r0
 800268e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	223f      	movs	r2, #63	; 0x3f
 800269a:	409a      	lsls	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	e0cd      	b.n	800283e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a3b      	ldr	r2, [pc, #236]	; (8002794 <HAL_DMA_Init+0x42c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d022      	beq.n	80026f2 <HAL_DMA_Init+0x38a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a39      	ldr	r2, [pc, #228]	; (8002798 <HAL_DMA_Init+0x430>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01d      	beq.n	80026f2 <HAL_DMA_Init+0x38a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a38      	ldr	r2, [pc, #224]	; (800279c <HAL_DMA_Init+0x434>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d018      	beq.n	80026f2 <HAL_DMA_Init+0x38a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <HAL_DMA_Init+0x438>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_DMA_Init+0x38a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a35      	ldr	r2, [pc, #212]	; (80027a4 <HAL_DMA_Init+0x43c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00e      	beq.n	80026f2 <HAL_DMA_Init+0x38a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a33      	ldr	r2, [pc, #204]	; (80027a8 <HAL_DMA_Init+0x440>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d009      	beq.n	80026f2 <HAL_DMA_Init+0x38a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a32      	ldr	r2, [pc, #200]	; (80027ac <HAL_DMA_Init+0x444>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d004      	beq.n	80026f2 <HAL_DMA_Init+0x38a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a30      	ldr	r2, [pc, #192]	; (80027b0 <HAL_DMA_Init+0x448>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_DMA_Init+0x38e>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_DMA_Init+0x390>
 80026f6:	2300      	movs	r3, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8097 	beq.w	800282c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a24      	ldr	r2, [pc, #144]	; (8002794 <HAL_DMA_Init+0x42c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d021      	beq.n	800274c <HAL_DMA_Init+0x3e4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a22      	ldr	r2, [pc, #136]	; (8002798 <HAL_DMA_Init+0x430>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01c      	beq.n	800274c <HAL_DMA_Init+0x3e4>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_DMA_Init+0x434>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d017      	beq.n	800274c <HAL_DMA_Init+0x3e4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_DMA_Init+0x438>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d012      	beq.n	800274c <HAL_DMA_Init+0x3e4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <HAL_DMA_Init+0x43c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00d      	beq.n	800274c <HAL_DMA_Init+0x3e4>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <HAL_DMA_Init+0x440>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d008      	beq.n	800274c <HAL_DMA_Init+0x3e4>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <HAL_DMA_Init+0x444>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d003      	beq.n	800274c <HAL_DMA_Init+0x3e4>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_DMA_Init+0x448>)
 800274a:	4293      	cmp	r3, r2
 800274c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_DMA_Init+0x44c>)
 800276a:	4013      	ands	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d020      	beq.n	80027b8 <HAL_DMA_Init+0x450>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b80      	cmp	r3, #128	; 0x80
 800277c:	d102      	bne.n	8002784 <HAL_DMA_Init+0x41c>
 800277e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002782:	e01a      	b.n	80027ba <HAL_DMA_Init+0x452>
 8002784:	2300      	movs	r3, #0
 8002786:	e018      	b.n	80027ba <HAL_DMA_Init+0x452>
 8002788:	fe10803f 	.word	0xfe10803f
 800278c:	5c001000 	.word	0x5c001000
 8002790:	ffff0000 	.word	0xffff0000
 8002794:	58025408 	.word	0x58025408
 8002798:	5802541c 	.word	0x5802541c
 800279c:	58025430 	.word	0x58025430
 80027a0:	58025444 	.word	0x58025444
 80027a4:	58025458 	.word	0x58025458
 80027a8:	5802546c 	.word	0x5802546c
 80027ac:	58025480 	.word	0x58025480
 80027b0:	58025494 	.word	0x58025494
 80027b4:	fffe000f 	.word	0xfffe000f
 80027b8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027e8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b6e      	ldr	r3, [pc, #440]	; (80029b8 <HAL_DMA_Init+0x650>)
 8002800:	4413      	add	r3, r2
 8002802:	4a6e      	ldr	r2, [pc, #440]	; (80029bc <HAL_DMA_Init+0x654>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	009a      	lsls	r2, r3, #2
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f002 f9b3 	bl	8004b7c <DMA_CalcBaseAndBitshift>
 8002816:	4603      	mov	r3, r0
 8002818:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2201      	movs	r2, #1
 8002824:	409a      	lsls	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	e008      	b.n	800283e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2240      	movs	r2, #64	; 0x40
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0b7      	b.n	80029ae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a5f      	ldr	r2, [pc, #380]	; (80029c0 <HAL_DMA_Init+0x658>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d072      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a5d      	ldr	r2, [pc, #372]	; (80029c4 <HAL_DMA_Init+0x65c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d06d      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a5c      	ldr	r2, [pc, #368]	; (80029c8 <HAL_DMA_Init+0x660>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d068      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a5a      	ldr	r2, [pc, #360]	; (80029cc <HAL_DMA_Init+0x664>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d063      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a59      	ldr	r2, [pc, #356]	; (80029d0 <HAL_DMA_Init+0x668>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d05e      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a57      	ldr	r2, [pc, #348]	; (80029d4 <HAL_DMA_Init+0x66c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d059      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a56      	ldr	r2, [pc, #344]	; (80029d8 <HAL_DMA_Init+0x670>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d054      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a54      	ldr	r2, [pc, #336]	; (80029dc <HAL_DMA_Init+0x674>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04f      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a53      	ldr	r2, [pc, #332]	; (80029e0 <HAL_DMA_Init+0x678>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d04a      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a51      	ldr	r2, [pc, #324]	; (80029e4 <HAL_DMA_Init+0x67c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d045      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <HAL_DMA_Init+0x680>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d040      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a4e      	ldr	r2, [pc, #312]	; (80029ec <HAL_DMA_Init+0x684>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d03b      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a4d      	ldr	r2, [pc, #308]	; (80029f0 <HAL_DMA_Init+0x688>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d036      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a4b      	ldr	r2, [pc, #300]	; (80029f4 <HAL_DMA_Init+0x68c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d031      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a4a      	ldr	r2, [pc, #296]	; (80029f8 <HAL_DMA_Init+0x690>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d02c      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a48      	ldr	r2, [pc, #288]	; (80029fc <HAL_DMA_Init+0x694>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d027      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a47      	ldr	r2, [pc, #284]	; (8002a00 <HAL_DMA_Init+0x698>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a45      	ldr	r2, [pc, #276]	; (8002a04 <HAL_DMA_Init+0x69c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a44      	ldr	r2, [pc, #272]	; (8002a08 <HAL_DMA_Init+0x6a0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d018      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a42      	ldr	r2, [pc, #264]	; (8002a0c <HAL_DMA_Init+0x6a4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a41      	ldr	r2, [pc, #260]	; (8002a10 <HAL_DMA_Init+0x6a8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3f      	ldr	r2, [pc, #252]	; (8002a14 <HAL_DMA_Init+0x6ac>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3e      	ldr	r2, [pc, #248]	; (8002a18 <HAL_DMA_Init+0x6b0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_DMA_Init+0x5c6>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a3c      	ldr	r2, [pc, #240]	; (8002a1c <HAL_DMA_Init+0x6b4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_DMA_Init+0x5ca>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_DMA_Init+0x5cc>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d032      	beq.n	800299e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f002 fa4d 	bl	8004dd8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d102      	bne.n	800294c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002960:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d010      	beq.n	800298c <HAL_DMA_Init+0x624>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b08      	cmp	r3, #8
 8002970:	d80c      	bhi.n	800298c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f002 faca 	bl	8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	e008      	b.n	800299e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	a7fdabf8 	.word	0xa7fdabf8
 80029bc:	cccccccd 	.word	0xcccccccd
 80029c0:	40020010 	.word	0x40020010
 80029c4:	40020028 	.word	0x40020028
 80029c8:	40020040 	.word	0x40020040
 80029cc:	40020058 	.word	0x40020058
 80029d0:	40020070 	.word	0x40020070
 80029d4:	40020088 	.word	0x40020088
 80029d8:	400200a0 	.word	0x400200a0
 80029dc:	400200b8 	.word	0x400200b8
 80029e0:	40020410 	.word	0x40020410
 80029e4:	40020428 	.word	0x40020428
 80029e8:	40020440 	.word	0x40020440
 80029ec:	40020458 	.word	0x40020458
 80029f0:	40020470 	.word	0x40020470
 80029f4:	40020488 	.word	0x40020488
 80029f8:	400204a0 	.word	0x400204a0
 80029fc:	400204b8 	.word	0x400204b8
 8002a00:	58025408 	.word	0x58025408
 8002a04:	5802541c 	.word	0x5802541c
 8002a08:	58025430 	.word	0x58025430
 8002a0c:	58025444 	.word	0x58025444
 8002a10:	58025458 	.word	0x58025458
 8002a14:	5802546c 	.word	0x5802546c
 8002a18:	58025480 	.word	0x58025480
 8002a1c:	58025494 	.word	0x58025494

08002a20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e226      	b.n	8002e8a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_DMA_Start_IT+0x2a>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e21f      	b.n	8002e8a <HAL_DMA_Start_IT+0x46a>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	f040 820a 	bne.w	8002e74 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a68      	ldr	r2, [pc, #416]	; (8002c14 <HAL_DMA_Start_IT+0x1f4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d04a      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a66      	ldr	r2, [pc, #408]	; (8002c18 <HAL_DMA_Start_IT+0x1f8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d045      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_DMA_Start_IT+0x1fc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d040      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a63      	ldr	r2, [pc, #396]	; (8002c20 <HAL_DMA_Start_IT+0x200>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d03b      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a62      	ldr	r2, [pc, #392]	; (8002c24 <HAL_DMA_Start_IT+0x204>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d036      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a60      	ldr	r2, [pc, #384]	; (8002c28 <HAL_DMA_Start_IT+0x208>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d031      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a5f      	ldr	r2, [pc, #380]	; (8002c2c <HAL_DMA_Start_IT+0x20c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d02c      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5d      	ldr	r2, [pc, #372]	; (8002c30 <HAL_DMA_Start_IT+0x210>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d027      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a5c      	ldr	r2, [pc, #368]	; (8002c34 <HAL_DMA_Start_IT+0x214>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a5a      	ldr	r2, [pc, #360]	; (8002c38 <HAL_DMA_Start_IT+0x218>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01d      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a59      	ldr	r2, [pc, #356]	; (8002c3c <HAL_DMA_Start_IT+0x21c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d018      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a57      	ldr	r2, [pc, #348]	; (8002c40 <HAL_DMA_Start_IT+0x220>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a56      	ldr	r2, [pc, #344]	; (8002c44 <HAL_DMA_Start_IT+0x224>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00e      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a54      	ldr	r2, [pc, #336]	; (8002c48 <HAL_DMA_Start_IT+0x228>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a53      	ldr	r2, [pc, #332]	; (8002c4c <HAL_DMA_Start_IT+0x22c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_DMA_Start_IT+0xee>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a51      	ldr	r2, [pc, #324]	; (8002c50 <HAL_DMA_Start_IT+0x230>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <HAL_DMA_Start_IT+0x100>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e007      	b.n	8002b30 <HAL_DMA_Start_IT+0x110>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f001 fe74 	bl	8004824 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a34      	ldr	r2, [pc, #208]	; (8002c14 <HAL_DMA_Start_IT+0x1f4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d04a      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a33      	ldr	r2, [pc, #204]	; (8002c18 <HAL_DMA_Start_IT+0x1f8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d045      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a31      	ldr	r2, [pc, #196]	; (8002c1c <HAL_DMA_Start_IT+0x1fc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d040      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a30      	ldr	r2, [pc, #192]	; (8002c20 <HAL_DMA_Start_IT+0x200>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d03b      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2e      	ldr	r2, [pc, #184]	; (8002c24 <HAL_DMA_Start_IT+0x204>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d036      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2d      	ldr	r2, [pc, #180]	; (8002c28 <HAL_DMA_Start_IT+0x208>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d031      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2b      	ldr	r2, [pc, #172]	; (8002c2c <HAL_DMA_Start_IT+0x20c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d02c      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2a      	ldr	r2, [pc, #168]	; (8002c30 <HAL_DMA_Start_IT+0x210>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d027      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <HAL_DMA_Start_IT+0x214>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a27      	ldr	r2, [pc, #156]	; (8002c38 <HAL_DMA_Start_IT+0x218>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d01d      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <HAL_DMA_Start_IT+0x21c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <HAL_DMA_Start_IT+0x220>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <HAL_DMA_Start_IT+0x224>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <HAL_DMA_Start_IT+0x228>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <HAL_DMA_Start_IT+0x22c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_DMA_Start_IT+0x1bc>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <HAL_DMA_Start_IT+0x230>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_DMA_Start_IT+0x1c0>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_DMA_Start_IT+0x1c2>
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d036      	beq.n	8002c54 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 021e 	bic.w	r2, r3, #30
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0216 	orr.w	r2, r2, #22
 8002bf8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d03e      	beq.n	8002c80 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0208 	orr.w	r2, r2, #8
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e035      	b.n	8002c80 <HAL_DMA_Start_IT+0x260>
 8002c14:	40020010 	.word	0x40020010
 8002c18:	40020028 	.word	0x40020028
 8002c1c:	40020040 	.word	0x40020040
 8002c20:	40020058 	.word	0x40020058
 8002c24:	40020070 	.word	0x40020070
 8002c28:	40020088 	.word	0x40020088
 8002c2c:	400200a0 	.word	0x400200a0
 8002c30:	400200b8 	.word	0x400200b8
 8002c34:	40020410 	.word	0x40020410
 8002c38:	40020428 	.word	0x40020428
 8002c3c:	40020440 	.word	0x40020440
 8002c40:	40020458 	.word	0x40020458
 8002c44:	40020470 	.word	0x40020470
 8002c48:	40020488 	.word	0x40020488
 8002c4c:	400204a0 	.word	0x400204a0
 8002c50:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 020e 	bic.w	r2, r3, #14
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 020a 	orr.w	r2, r2, #10
 8002c66:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0204 	orr.w	r2, r2, #4
 8002c7e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a83      	ldr	r2, [pc, #524]	; (8002e94 <HAL_DMA_Start_IT+0x474>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d072      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a82      	ldr	r2, [pc, #520]	; (8002e98 <HAL_DMA_Start_IT+0x478>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d06d      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a80      	ldr	r2, [pc, #512]	; (8002e9c <HAL_DMA_Start_IT+0x47c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d068      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7f      	ldr	r2, [pc, #508]	; (8002ea0 <HAL_DMA_Start_IT+0x480>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d063      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a7d      	ldr	r2, [pc, #500]	; (8002ea4 <HAL_DMA_Start_IT+0x484>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d05e      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7c      	ldr	r2, [pc, #496]	; (8002ea8 <HAL_DMA_Start_IT+0x488>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d059      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a7a      	ldr	r2, [pc, #488]	; (8002eac <HAL_DMA_Start_IT+0x48c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d054      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a79      	ldr	r2, [pc, #484]	; (8002eb0 <HAL_DMA_Start_IT+0x490>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d04f      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <HAL_DMA_Start_IT+0x494>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d04a      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a76      	ldr	r2, [pc, #472]	; (8002eb8 <HAL_DMA_Start_IT+0x498>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d045      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a74      	ldr	r2, [pc, #464]	; (8002ebc <HAL_DMA_Start_IT+0x49c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d040      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a73      	ldr	r2, [pc, #460]	; (8002ec0 <HAL_DMA_Start_IT+0x4a0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d03b      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a71      	ldr	r2, [pc, #452]	; (8002ec4 <HAL_DMA_Start_IT+0x4a4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d036      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a70      	ldr	r2, [pc, #448]	; (8002ec8 <HAL_DMA_Start_IT+0x4a8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d031      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a6e      	ldr	r2, [pc, #440]	; (8002ecc <HAL_DMA_Start_IT+0x4ac>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d02c      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6d      	ldr	r2, [pc, #436]	; (8002ed0 <HAL_DMA_Start_IT+0x4b0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d027      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a6b      	ldr	r2, [pc, #428]	; (8002ed4 <HAL_DMA_Start_IT+0x4b4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d022      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6a      	ldr	r2, [pc, #424]	; (8002ed8 <HAL_DMA_Start_IT+0x4b8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d01d      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a68      	ldr	r2, [pc, #416]	; (8002edc <HAL_DMA_Start_IT+0x4bc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d018      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a67      	ldr	r2, [pc, #412]	; (8002ee0 <HAL_DMA_Start_IT+0x4c0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a65      	ldr	r2, [pc, #404]	; (8002ee4 <HAL_DMA_Start_IT+0x4c4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00e      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a64      	ldr	r2, [pc, #400]	; (8002ee8 <HAL_DMA_Start_IT+0x4c8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a62      	ldr	r2, [pc, #392]	; (8002eec <HAL_DMA_Start_IT+0x4cc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d004      	beq.n	8002d70 <HAL_DMA_Start_IT+0x350>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a61      	ldr	r2, [pc, #388]	; (8002ef0 <HAL_DMA_Start_IT+0x4d0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_DMA_Start_IT+0x354>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_DMA_Start_IT+0x356>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01a      	beq.n	8002db0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d96:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a37      	ldr	r2, [pc, #220]	; (8002e94 <HAL_DMA_Start_IT+0x474>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d04a      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a36      	ldr	r2, [pc, #216]	; (8002e98 <HAL_DMA_Start_IT+0x478>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d045      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <HAL_DMA_Start_IT+0x47c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d040      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a33      	ldr	r2, [pc, #204]	; (8002ea0 <HAL_DMA_Start_IT+0x480>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d03b      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a31      	ldr	r2, [pc, #196]	; (8002ea4 <HAL_DMA_Start_IT+0x484>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d036      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a30      	ldr	r2, [pc, #192]	; (8002ea8 <HAL_DMA_Start_IT+0x488>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d031      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <HAL_DMA_Start_IT+0x48c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d02c      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	; (8002eb0 <HAL_DMA_Start_IT+0x490>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d027      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <HAL_DMA_Start_IT+0x494>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d022      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2a      	ldr	r2, [pc, #168]	; (8002eb8 <HAL_DMA_Start_IT+0x498>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d01d      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_DMA_Start_IT+0x49c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d018      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <HAL_DMA_Start_IT+0x4a0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a25      	ldr	r2, [pc, #148]	; (8002ec4 <HAL_DMA_Start_IT+0x4a4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00e      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <HAL_DMA_Start_IT+0x4a8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d009      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_DMA_Start_IT+0x4ac>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_DMA_Start_IT+0x430>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <HAL_DMA_Start_IT+0x4b0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d108      	bne.n	8002e62 <HAL_DMA_Start_IT+0x442>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e012      	b.n	8002e88 <HAL_DMA_Start_IT+0x468>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e009      	b.n	8002e88 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40020010 	.word	0x40020010
 8002e98:	40020028 	.word	0x40020028
 8002e9c:	40020040 	.word	0x40020040
 8002ea0:	40020058 	.word	0x40020058
 8002ea4:	40020070 	.word	0x40020070
 8002ea8:	40020088 	.word	0x40020088
 8002eac:	400200a0 	.word	0x400200a0
 8002eb0:	400200b8 	.word	0x400200b8
 8002eb4:	40020410 	.word	0x40020410
 8002eb8:	40020428 	.word	0x40020428
 8002ebc:	40020440 	.word	0x40020440
 8002ec0:	40020458 	.word	0x40020458
 8002ec4:	40020470 	.word	0x40020470
 8002ec8:	40020488 	.word	0x40020488
 8002ecc:	400204a0 	.word	0x400204a0
 8002ed0:	400204b8 	.word	0x400204b8
 8002ed4:	58025408 	.word	0x58025408
 8002ed8:	5802541c 	.word	0x5802541c
 8002edc:	58025430 	.word	0x58025430
 8002ee0:	58025444 	.word	0x58025444
 8002ee4:	58025458 	.word	0x58025458
 8002ee8:	5802546c 	.word	0x5802546c
 8002eec:	58025480 	.word	0x58025480
 8002ef0:	58025494 	.word	0x58025494

08002ef4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff f8c0 	bl	8002080 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e2dc      	b.n	80034c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d008      	beq.n	8002f2a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e2cd      	b.n	80034c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a76      	ldr	r2, [pc, #472]	; (8003108 <HAL_DMA_Abort+0x214>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d04a      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a74      	ldr	r2, [pc, #464]	; (800310c <HAL_DMA_Abort+0x218>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d045      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a73      	ldr	r2, [pc, #460]	; (8003110 <HAL_DMA_Abort+0x21c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d040      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a71      	ldr	r2, [pc, #452]	; (8003114 <HAL_DMA_Abort+0x220>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d03b      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a70      	ldr	r2, [pc, #448]	; (8003118 <HAL_DMA_Abort+0x224>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d036      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6e      	ldr	r2, [pc, #440]	; (800311c <HAL_DMA_Abort+0x228>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d031      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6d      	ldr	r2, [pc, #436]	; (8003120 <HAL_DMA_Abort+0x22c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d02c      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6b      	ldr	r2, [pc, #428]	; (8003124 <HAL_DMA_Abort+0x230>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d027      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6a      	ldr	r2, [pc, #424]	; (8003128 <HAL_DMA_Abort+0x234>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d022      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a68      	ldr	r2, [pc, #416]	; (800312c <HAL_DMA_Abort+0x238>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01d      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a67      	ldr	r2, [pc, #412]	; (8003130 <HAL_DMA_Abort+0x23c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d018      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a65      	ldr	r2, [pc, #404]	; (8003134 <HAL_DMA_Abort+0x240>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a64      	ldr	r2, [pc, #400]	; (8003138 <HAL_DMA_Abort+0x244>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00e      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a62      	ldr	r2, [pc, #392]	; (800313c <HAL_DMA_Abort+0x248>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a61      	ldr	r2, [pc, #388]	; (8003140 <HAL_DMA_Abort+0x24c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_DMA_Abort+0xd6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a5f      	ldr	r2, [pc, #380]	; (8003144 <HAL_DMA_Abort+0x250>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <HAL_DMA_Abort+0xda>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_DMA_Abort+0xdc>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 021e 	bic.w	r2, r2, #30
 8002fe2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ff2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	e00a      	b.n	8003012 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 020e 	bic.w	r2, r2, #14
 800300a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a3c      	ldr	r2, [pc, #240]	; (8003108 <HAL_DMA_Abort+0x214>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d072      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3a      	ldr	r2, [pc, #232]	; (800310c <HAL_DMA_Abort+0x218>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d06d      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a39      	ldr	r2, [pc, #228]	; (8003110 <HAL_DMA_Abort+0x21c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d068      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a37      	ldr	r2, [pc, #220]	; (8003114 <HAL_DMA_Abort+0x220>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d063      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a36      	ldr	r2, [pc, #216]	; (8003118 <HAL_DMA_Abort+0x224>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d05e      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a34      	ldr	r2, [pc, #208]	; (800311c <HAL_DMA_Abort+0x228>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d059      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a33      	ldr	r2, [pc, #204]	; (8003120 <HAL_DMA_Abort+0x22c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d054      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a31      	ldr	r2, [pc, #196]	; (8003124 <HAL_DMA_Abort+0x230>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d04f      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a30      	ldr	r2, [pc, #192]	; (8003128 <HAL_DMA_Abort+0x234>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d04a      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2e      	ldr	r2, [pc, #184]	; (800312c <HAL_DMA_Abort+0x238>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d045      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2d      	ldr	r2, [pc, #180]	; (8003130 <HAL_DMA_Abort+0x23c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d040      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <HAL_DMA_Abort+0x240>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d03b      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2a      	ldr	r2, [pc, #168]	; (8003138 <HAL_DMA_Abort+0x244>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d036      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a28      	ldr	r2, [pc, #160]	; (800313c <HAL_DMA_Abort+0x248>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d031      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a27      	ldr	r2, [pc, #156]	; (8003140 <HAL_DMA_Abort+0x24c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d02c      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a25      	ldr	r2, [pc, #148]	; (8003144 <HAL_DMA_Abort+0x250>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d027      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a24      	ldr	r2, [pc, #144]	; (8003148 <HAL_DMA_Abort+0x254>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d022      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a22      	ldr	r2, [pc, #136]	; (800314c <HAL_DMA_Abort+0x258>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01d      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a21      	ldr	r2, [pc, #132]	; (8003150 <HAL_DMA_Abort+0x25c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d018      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_DMA_Abort+0x260>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <HAL_DMA_Abort+0x264>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00e      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_DMA_Abort+0x268>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d009      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_DMA_Abort+0x26c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d004      	beq.n	8003102 <HAL_DMA_Abort+0x20e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_DMA_Abort+0x270>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d132      	bne.n	8003168 <HAL_DMA_Abort+0x274>
 8003102:	2301      	movs	r3, #1
 8003104:	e031      	b.n	800316a <HAL_DMA_Abort+0x276>
 8003106:	bf00      	nop
 8003108:	40020010 	.word	0x40020010
 800310c:	40020028 	.word	0x40020028
 8003110:	40020040 	.word	0x40020040
 8003114:	40020058 	.word	0x40020058
 8003118:	40020070 	.word	0x40020070
 800311c:	40020088 	.word	0x40020088
 8003120:	400200a0 	.word	0x400200a0
 8003124:	400200b8 	.word	0x400200b8
 8003128:	40020410 	.word	0x40020410
 800312c:	40020428 	.word	0x40020428
 8003130:	40020440 	.word	0x40020440
 8003134:	40020458 	.word	0x40020458
 8003138:	40020470 	.word	0x40020470
 800313c:	40020488 	.word	0x40020488
 8003140:	400204a0 	.word	0x400204a0
 8003144:	400204b8 	.word	0x400204b8
 8003148:	58025408 	.word	0x58025408
 800314c:	5802541c 	.word	0x5802541c
 8003150:	58025430 	.word	0x58025430
 8003154:	58025444 	.word	0x58025444
 8003158:	58025458 	.word	0x58025458
 800315c:	5802546c 	.word	0x5802546c
 8003160:	58025480 	.word	0x58025480
 8003164:	58025494 	.word	0x58025494
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800317c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a6d      	ldr	r2, [pc, #436]	; (8003338 <HAL_DMA_Abort+0x444>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d04a      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6b      	ldr	r2, [pc, #428]	; (800333c <HAL_DMA_Abort+0x448>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d045      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6a      	ldr	r2, [pc, #424]	; (8003340 <HAL_DMA_Abort+0x44c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d040      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a68      	ldr	r2, [pc, #416]	; (8003344 <HAL_DMA_Abort+0x450>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d03b      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a67      	ldr	r2, [pc, #412]	; (8003348 <HAL_DMA_Abort+0x454>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d036      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a65      	ldr	r2, [pc, #404]	; (800334c <HAL_DMA_Abort+0x458>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d031      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a64      	ldr	r2, [pc, #400]	; (8003350 <HAL_DMA_Abort+0x45c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d02c      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a62      	ldr	r2, [pc, #392]	; (8003354 <HAL_DMA_Abort+0x460>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d027      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a61      	ldr	r2, [pc, #388]	; (8003358 <HAL_DMA_Abort+0x464>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5f      	ldr	r2, [pc, #380]	; (800335c <HAL_DMA_Abort+0x468>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01d      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a5e      	ldr	r2, [pc, #376]	; (8003360 <HAL_DMA_Abort+0x46c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d018      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a5c      	ldr	r2, [pc, #368]	; (8003364 <HAL_DMA_Abort+0x470>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a5b      	ldr	r2, [pc, #364]	; (8003368 <HAL_DMA_Abort+0x474>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a59      	ldr	r2, [pc, #356]	; (800336c <HAL_DMA_Abort+0x478>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a58      	ldr	r2, [pc, #352]	; (8003370 <HAL_DMA_Abort+0x47c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_DMA_Abort+0x32a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a56      	ldr	r2, [pc, #344]	; (8003374 <HAL_DMA_Abort+0x480>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d108      	bne.n	8003230 <HAL_DMA_Abort+0x33c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e007      	b.n	8003240 <HAL_DMA_Abort+0x34c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003240:	e013      	b.n	800326a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003242:	f7fe ff1d 	bl	8002080 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b05      	cmp	r3, #5
 800324e:	d90c      	bls.n	800326a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2203      	movs	r2, #3
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e12d      	b.n	80034c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1e5      	bne.n	8003242 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <HAL_DMA_Abort+0x444>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d04a      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a2d      	ldr	r2, [pc, #180]	; (800333c <HAL_DMA_Abort+0x448>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d045      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2c      	ldr	r2, [pc, #176]	; (8003340 <HAL_DMA_Abort+0x44c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d040      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <HAL_DMA_Abort+0x450>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d03b      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a29      	ldr	r2, [pc, #164]	; (8003348 <HAL_DMA_Abort+0x454>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d036      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a27      	ldr	r2, [pc, #156]	; (800334c <HAL_DMA_Abort+0x458>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d031      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a26      	ldr	r2, [pc, #152]	; (8003350 <HAL_DMA_Abort+0x45c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d02c      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a24      	ldr	r2, [pc, #144]	; (8003354 <HAL_DMA_Abort+0x460>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d027      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a23      	ldr	r2, [pc, #140]	; (8003358 <HAL_DMA_Abort+0x464>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d022      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a21      	ldr	r2, [pc, #132]	; (800335c <HAL_DMA_Abort+0x468>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01d      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a20      	ldr	r2, [pc, #128]	; (8003360 <HAL_DMA_Abort+0x46c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d018      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <HAL_DMA_Abort+0x470>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <HAL_DMA_Abort+0x474>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00e      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1b      	ldr	r2, [pc, #108]	; (800336c <HAL_DMA_Abort+0x478>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <HAL_DMA_Abort+0x47c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_DMA_Abort+0x422>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_DMA_Abort+0x480>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d101      	bne.n	800331a <HAL_DMA_Abort+0x426>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_DMA_Abort+0x428>
 800331a:	2300      	movs	r3, #0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d02b      	beq.n	8003378 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	223f      	movs	r2, #63	; 0x3f
 8003330:	409a      	lsls	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	e02a      	b.n	800338e <HAL_DMA_Abort+0x49a>
 8003338:	40020010 	.word	0x40020010
 800333c:	40020028 	.word	0x40020028
 8003340:	40020040 	.word	0x40020040
 8003344:	40020058 	.word	0x40020058
 8003348:	40020070 	.word	0x40020070
 800334c:	40020088 	.word	0x40020088
 8003350:	400200a0 	.word	0x400200a0
 8003354:	400200b8 	.word	0x400200b8
 8003358:	40020410 	.word	0x40020410
 800335c:	40020428 	.word	0x40020428
 8003360:	40020440 	.word	0x40020440
 8003364:	40020458 	.word	0x40020458
 8003368:	40020470 	.word	0x40020470
 800336c:	40020488 	.word	0x40020488
 8003370:	400204a0 	.word	0x400204a0
 8003374:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2201      	movs	r2, #1
 8003388:	409a      	lsls	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4f      	ldr	r2, [pc, #316]	; (80034d0 <HAL_DMA_Abort+0x5dc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d072      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a4d      	ldr	r2, [pc, #308]	; (80034d4 <HAL_DMA_Abort+0x5e0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d06d      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a4c      	ldr	r2, [pc, #304]	; (80034d8 <HAL_DMA_Abort+0x5e4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d068      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a4a      	ldr	r2, [pc, #296]	; (80034dc <HAL_DMA_Abort+0x5e8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d063      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a49      	ldr	r2, [pc, #292]	; (80034e0 <HAL_DMA_Abort+0x5ec>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d05e      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a47      	ldr	r2, [pc, #284]	; (80034e4 <HAL_DMA_Abort+0x5f0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d059      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a46      	ldr	r2, [pc, #280]	; (80034e8 <HAL_DMA_Abort+0x5f4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d054      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a44      	ldr	r2, [pc, #272]	; (80034ec <HAL_DMA_Abort+0x5f8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d04f      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a43      	ldr	r2, [pc, #268]	; (80034f0 <HAL_DMA_Abort+0x5fc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d04a      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a41      	ldr	r2, [pc, #260]	; (80034f4 <HAL_DMA_Abort+0x600>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d045      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a40      	ldr	r2, [pc, #256]	; (80034f8 <HAL_DMA_Abort+0x604>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d040      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a3e      	ldr	r2, [pc, #248]	; (80034fc <HAL_DMA_Abort+0x608>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d03b      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a3d      	ldr	r2, [pc, #244]	; (8003500 <HAL_DMA_Abort+0x60c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d036      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a3b      	ldr	r2, [pc, #236]	; (8003504 <HAL_DMA_Abort+0x610>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d031      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_DMA_Abort+0x614>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d02c      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a38      	ldr	r2, [pc, #224]	; (800350c <HAL_DMA_Abort+0x618>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d027      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a37      	ldr	r2, [pc, #220]	; (8003510 <HAL_DMA_Abort+0x61c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d022      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a35      	ldr	r2, [pc, #212]	; (8003514 <HAL_DMA_Abort+0x620>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01d      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a34      	ldr	r2, [pc, #208]	; (8003518 <HAL_DMA_Abort+0x624>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d018      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a32      	ldr	r2, [pc, #200]	; (800351c <HAL_DMA_Abort+0x628>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_DMA_Abort+0x62c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <HAL_DMA_Abort+0x630>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2e      	ldr	r2, [pc, #184]	; (8003528 <HAL_DMA_Abort+0x634>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_DMA_Abort+0x58a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2c      	ldr	r2, [pc, #176]	; (800352c <HAL_DMA_Abort+0x638>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_DMA_Abort+0x58e>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_DMA_Abort+0x590>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d015      	beq.n	80034b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003490:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00c      	beq.n	80034b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40020010 	.word	0x40020010
 80034d4:	40020028 	.word	0x40020028
 80034d8:	40020040 	.word	0x40020040
 80034dc:	40020058 	.word	0x40020058
 80034e0:	40020070 	.word	0x40020070
 80034e4:	40020088 	.word	0x40020088
 80034e8:	400200a0 	.word	0x400200a0
 80034ec:	400200b8 	.word	0x400200b8
 80034f0:	40020410 	.word	0x40020410
 80034f4:	40020428 	.word	0x40020428
 80034f8:	40020440 	.word	0x40020440
 80034fc:	40020458 	.word	0x40020458
 8003500:	40020470 	.word	0x40020470
 8003504:	40020488 	.word	0x40020488
 8003508:	400204a0 	.word	0x400204a0
 800350c:	400204b8 	.word	0x400204b8
 8003510:	58025408 	.word	0x58025408
 8003514:	5802541c 	.word	0x5802541c
 8003518:	58025430 	.word	0x58025430
 800351c:	58025444 	.word	0x58025444
 8003520:	58025458 	.word	0x58025458
 8003524:	5802546c 	.word	0x5802546c
 8003528:	58025480 	.word	0x58025480
 800352c:	58025494 	.word	0x58025494

08003530 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e205      	b.n	800394e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d004      	beq.n	8003558 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2280      	movs	r2, #128	; 0x80
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e1fa      	b.n	800394e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a8c      	ldr	r2, [pc, #560]	; (8003790 <HAL_DMA_Abort_IT+0x260>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d04a      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a8b      	ldr	r2, [pc, #556]	; (8003794 <HAL_DMA_Abort_IT+0x264>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d045      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a89      	ldr	r2, [pc, #548]	; (8003798 <HAL_DMA_Abort_IT+0x268>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d040      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a88      	ldr	r2, [pc, #544]	; (800379c <HAL_DMA_Abort_IT+0x26c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d03b      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a86      	ldr	r2, [pc, #536]	; (80037a0 <HAL_DMA_Abort_IT+0x270>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d036      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a85      	ldr	r2, [pc, #532]	; (80037a4 <HAL_DMA_Abort_IT+0x274>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d031      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a83      	ldr	r2, [pc, #524]	; (80037a8 <HAL_DMA_Abort_IT+0x278>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02c      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a82      	ldr	r2, [pc, #520]	; (80037ac <HAL_DMA_Abort_IT+0x27c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d027      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a80      	ldr	r2, [pc, #512]	; (80037b0 <HAL_DMA_Abort_IT+0x280>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d022      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a7f      	ldr	r2, [pc, #508]	; (80037b4 <HAL_DMA_Abort_IT+0x284>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d01d      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a7d      	ldr	r2, [pc, #500]	; (80037b8 <HAL_DMA_Abort_IT+0x288>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d018      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a7c      	ldr	r2, [pc, #496]	; (80037bc <HAL_DMA_Abort_IT+0x28c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d013      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a7a      	ldr	r2, [pc, #488]	; (80037c0 <HAL_DMA_Abort_IT+0x290>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00e      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a79      	ldr	r2, [pc, #484]	; (80037c4 <HAL_DMA_Abort_IT+0x294>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a77      	ldr	r2, [pc, #476]	; (80037c8 <HAL_DMA_Abort_IT+0x298>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_DMA_Abort_IT+0xc8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a76      	ldr	r2, [pc, #472]	; (80037cc <HAL_DMA_Abort_IT+0x29c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_DMA_Abort_IT+0xcc>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <HAL_DMA_Abort_IT+0xce>
 80035fc:	2300      	movs	r3, #0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d065      	beq.n	80036ce <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2204      	movs	r2, #4
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a60      	ldr	r2, [pc, #384]	; (8003790 <HAL_DMA_Abort_IT+0x260>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d04a      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5e      	ldr	r2, [pc, #376]	; (8003794 <HAL_DMA_Abort_IT+0x264>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d045      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a5d      	ldr	r2, [pc, #372]	; (8003798 <HAL_DMA_Abort_IT+0x268>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d040      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a5b      	ldr	r2, [pc, #364]	; (800379c <HAL_DMA_Abort_IT+0x26c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d03b      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a5a      	ldr	r2, [pc, #360]	; (80037a0 <HAL_DMA_Abort_IT+0x270>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d036      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_DMA_Abort_IT+0x274>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d031      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_DMA_Abort_IT+0x278>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d02c      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a55      	ldr	r2, [pc, #340]	; (80037ac <HAL_DMA_Abort_IT+0x27c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d027      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a54      	ldr	r2, [pc, #336]	; (80037b0 <HAL_DMA_Abort_IT+0x280>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d022      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a52      	ldr	r2, [pc, #328]	; (80037b4 <HAL_DMA_Abort_IT+0x284>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01d      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a51      	ldr	r2, [pc, #324]	; (80037b8 <HAL_DMA_Abort_IT+0x288>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d018      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a4f      	ldr	r2, [pc, #316]	; (80037bc <HAL_DMA_Abort_IT+0x28c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a4e      	ldr	r2, [pc, #312]	; (80037c0 <HAL_DMA_Abort_IT+0x290>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a4c      	ldr	r2, [pc, #304]	; (80037c4 <HAL_DMA_Abort_IT+0x294>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d009      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a4b      	ldr	r2, [pc, #300]	; (80037c8 <HAL_DMA_Abort_IT+0x298>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_DMA_Abort_IT+0x17a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a49      	ldr	r2, [pc, #292]	; (80037cc <HAL_DMA_Abort_IT+0x29c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d108      	bne.n	80036bc <HAL_DMA_Abort_IT+0x18c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e147      	b.n	800394c <HAL_DMA_Abort_IT+0x41c>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e13e      	b.n	800394c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 020e 	bic.w	r2, r2, #14
 80036dc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2b      	ldr	r2, [pc, #172]	; (8003790 <HAL_DMA_Abort_IT+0x260>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d04a      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a29      	ldr	r2, [pc, #164]	; (8003794 <HAL_DMA_Abort_IT+0x264>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d045      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a28      	ldr	r2, [pc, #160]	; (8003798 <HAL_DMA_Abort_IT+0x268>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d040      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a26      	ldr	r2, [pc, #152]	; (800379c <HAL_DMA_Abort_IT+0x26c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d03b      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <HAL_DMA_Abort_IT+0x270>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d036      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <HAL_DMA_Abort_IT+0x274>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d031      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <HAL_DMA_Abort_IT+0x278>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d02c      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a20      	ldr	r2, [pc, #128]	; (80037ac <HAL_DMA_Abort_IT+0x27c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d027      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1f      	ldr	r2, [pc, #124]	; (80037b0 <HAL_DMA_Abort_IT+0x280>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <HAL_DMA_Abort_IT+0x284>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01d      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_DMA_Abort_IT+0x288>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <HAL_DMA_Abort_IT+0x28c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_DMA_Abort_IT+0x290>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_DMA_Abort_IT+0x294>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_DMA_Abort_IT+0x298>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_DMA_Abort_IT+0x24e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <HAL_DMA_Abort_IT+0x29c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d128      	bne.n	80037d0 <HAL_DMA_Abort_IT+0x2a0>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e027      	b.n	80037e0 <HAL_DMA_Abort_IT+0x2b0>
 8003790:	40020010 	.word	0x40020010
 8003794:	40020028 	.word	0x40020028
 8003798:	40020040 	.word	0x40020040
 800379c:	40020058 	.word	0x40020058
 80037a0:	40020070 	.word	0x40020070
 80037a4:	40020088 	.word	0x40020088
 80037a8:	400200a0 	.word	0x400200a0
 80037ac:	400200b8 	.word	0x400200b8
 80037b0:	40020410 	.word	0x40020410
 80037b4:	40020428 	.word	0x40020428
 80037b8:	40020440 	.word	0x40020440
 80037bc:	40020458 	.word	0x40020458
 80037c0:	40020470 	.word	0x40020470
 80037c4:	40020488 	.word	0x40020488
 80037c8:	400204a0 	.word	0x400204a0
 80037cc:	400204b8 	.word	0x400204b8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a5c      	ldr	r2, [pc, #368]	; (8003958 <HAL_DMA_Abort_IT+0x428>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d072      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5b      	ldr	r2, [pc, #364]	; (800395c <HAL_DMA_Abort_IT+0x42c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d06d      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a59      	ldr	r2, [pc, #356]	; (8003960 <HAL_DMA_Abort_IT+0x430>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d068      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a58      	ldr	r2, [pc, #352]	; (8003964 <HAL_DMA_Abort_IT+0x434>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d063      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a56      	ldr	r2, [pc, #344]	; (8003968 <HAL_DMA_Abort_IT+0x438>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d05e      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a55      	ldr	r2, [pc, #340]	; (800396c <HAL_DMA_Abort_IT+0x43c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d059      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a53      	ldr	r2, [pc, #332]	; (8003970 <HAL_DMA_Abort_IT+0x440>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d054      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a52      	ldr	r2, [pc, #328]	; (8003974 <HAL_DMA_Abort_IT+0x444>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d04f      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a50      	ldr	r2, [pc, #320]	; (8003978 <HAL_DMA_Abort_IT+0x448>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d04a      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a4f      	ldr	r2, [pc, #316]	; (800397c <HAL_DMA_Abort_IT+0x44c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d045      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a4d      	ldr	r2, [pc, #308]	; (8003980 <HAL_DMA_Abort_IT+0x450>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d040      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a4c      	ldr	r2, [pc, #304]	; (8003984 <HAL_DMA_Abort_IT+0x454>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d03b      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a4a      	ldr	r2, [pc, #296]	; (8003988 <HAL_DMA_Abort_IT+0x458>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d036      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a49      	ldr	r2, [pc, #292]	; (800398c <HAL_DMA_Abort_IT+0x45c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d031      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a47      	ldr	r2, [pc, #284]	; (8003990 <HAL_DMA_Abort_IT+0x460>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d02c      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a46      	ldr	r2, [pc, #280]	; (8003994 <HAL_DMA_Abort_IT+0x464>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d027      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a44      	ldr	r2, [pc, #272]	; (8003998 <HAL_DMA_Abort_IT+0x468>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d022      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a43      	ldr	r2, [pc, #268]	; (800399c <HAL_DMA_Abort_IT+0x46c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d01d      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a41      	ldr	r2, [pc, #260]	; (80039a0 <HAL_DMA_Abort_IT+0x470>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d018      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a40      	ldr	r2, [pc, #256]	; (80039a4 <HAL_DMA_Abort_IT+0x474>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a3e      	ldr	r2, [pc, #248]	; (80039a8 <HAL_DMA_Abort_IT+0x478>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a3d      	ldr	r2, [pc, #244]	; (80039ac <HAL_DMA_Abort_IT+0x47c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a3b      	ldr	r2, [pc, #236]	; (80039b0 <HAL_DMA_Abort_IT+0x480>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3a0>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a3a      	ldr	r2, [pc, #232]	; (80039b4 <HAL_DMA_Abort_IT+0x484>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_DMA_Abort_IT+0x3a4>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_DMA_Abort_IT+0x3a6>
 80038d4:	2300      	movs	r3, #0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d028      	beq.n	800392c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2201      	movs	r2, #1
 80038fa:	409a      	lsls	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003908:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003920:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800392a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40020010 	.word	0x40020010
 800395c:	40020028 	.word	0x40020028
 8003960:	40020040 	.word	0x40020040
 8003964:	40020058 	.word	0x40020058
 8003968:	40020070 	.word	0x40020070
 800396c:	40020088 	.word	0x40020088
 8003970:	400200a0 	.word	0x400200a0
 8003974:	400200b8 	.word	0x400200b8
 8003978:	40020410 	.word	0x40020410
 800397c:	40020428 	.word	0x40020428
 8003980:	40020440 	.word	0x40020440
 8003984:	40020458 	.word	0x40020458
 8003988:	40020470 	.word	0x40020470
 800398c:	40020488 	.word	0x40020488
 8003990:	400204a0 	.word	0x400204a0
 8003994:	400204b8 	.word	0x400204b8
 8003998:	58025408 	.word	0x58025408
 800399c:	5802541c 	.word	0x5802541c
 80039a0:	58025430 	.word	0x58025430
 80039a4:	58025444 	.word	0x58025444
 80039a8:	58025458 	.word	0x58025458
 80039ac:	5802546c 	.word	0x5802546c
 80039b0:	58025480 	.word	0x58025480
 80039b4:	58025494 	.word	0x58025494

080039b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039c4:	4b67      	ldr	r3, [pc, #412]	; (8003b64 <HAL_DMA_IRQHandler+0x1ac>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a67      	ldr	r2, [pc, #412]	; (8003b68 <HAL_DMA_IRQHandler+0x1b0>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0a9b      	lsrs	r3, r3, #10
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a5f      	ldr	r2, [pc, #380]	; (8003b6c <HAL_DMA_IRQHandler+0x1b4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d04a      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a5d      	ldr	r2, [pc, #372]	; (8003b70 <HAL_DMA_IRQHandler+0x1b8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d045      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a5c      	ldr	r2, [pc, #368]	; (8003b74 <HAL_DMA_IRQHandler+0x1bc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d040      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5a      	ldr	r2, [pc, #360]	; (8003b78 <HAL_DMA_IRQHandler+0x1c0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d03b      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a59      	ldr	r2, [pc, #356]	; (8003b7c <HAL_DMA_IRQHandler+0x1c4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d036      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a57      	ldr	r2, [pc, #348]	; (8003b80 <HAL_DMA_IRQHandler+0x1c8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d031      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a56      	ldr	r2, [pc, #344]	; (8003b84 <HAL_DMA_IRQHandler+0x1cc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d02c      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a54      	ldr	r2, [pc, #336]	; (8003b88 <HAL_DMA_IRQHandler+0x1d0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d027      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a53      	ldr	r2, [pc, #332]	; (8003b8c <HAL_DMA_IRQHandler+0x1d4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d022      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a51      	ldr	r2, [pc, #324]	; (8003b90 <HAL_DMA_IRQHandler+0x1d8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01d      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a50      	ldr	r2, [pc, #320]	; (8003b94 <HAL_DMA_IRQHandler+0x1dc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a4e      	ldr	r2, [pc, #312]	; (8003b98 <HAL_DMA_IRQHandler+0x1e0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a4d      	ldr	r2, [pc, #308]	; (8003b9c <HAL_DMA_IRQHandler+0x1e4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4b      	ldr	r2, [pc, #300]	; (8003ba0 <HAL_DMA_IRQHandler+0x1e8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ba4 <HAL_DMA_IRQHandler+0x1ec>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xd2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a48      	ldr	r2, [pc, #288]	; (8003ba8 <HAL_DMA_IRQHandler+0x1f0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_DMA_IRQHandler+0xd6>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_DMA_IRQHandler+0xd8>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 842b 	beq.w	80042ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80a2 	beq.w	8003bf0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a2e      	ldr	r2, [pc, #184]	; (8003b6c <HAL_DMA_IRQHandler+0x1b4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d04a      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2d      	ldr	r2, [pc, #180]	; (8003b70 <HAL_DMA_IRQHandler+0x1b8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d045      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2b      	ldr	r2, [pc, #172]	; (8003b74 <HAL_DMA_IRQHandler+0x1bc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d040      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2a      	ldr	r2, [pc, #168]	; (8003b78 <HAL_DMA_IRQHandler+0x1c0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d03b      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <HAL_DMA_IRQHandler+0x1c4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d036      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a27      	ldr	r2, [pc, #156]	; (8003b80 <HAL_DMA_IRQHandler+0x1c8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d031      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a25      	ldr	r2, [pc, #148]	; (8003b84 <HAL_DMA_IRQHandler+0x1cc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d02c      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a24      	ldr	r2, [pc, #144]	; (8003b88 <HAL_DMA_IRQHandler+0x1d0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d027      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a22      	ldr	r2, [pc, #136]	; (8003b8c <HAL_DMA_IRQHandler+0x1d4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d022      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <HAL_DMA_IRQHandler+0x1d8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d01d      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <HAL_DMA_IRQHandler+0x1dc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d018      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <HAL_DMA_IRQHandler+0x1e0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <HAL_DMA_IRQHandler+0x1e4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_DMA_IRQHandler+0x1e8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <HAL_DMA_IRQHandler+0x1ec>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x194>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <HAL_DMA_IRQHandler+0x1f0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d12f      	bne.n	8003bac <HAL_DMA_IRQHandler+0x1f4>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bf14      	ite	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2300      	moveq	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	e02e      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x208>
 8003b62:	bf00      	nop
 8003b64:	24000000 	.word	0x24000000
 8003b68:	1b4e81b5 	.word	0x1b4e81b5
 8003b6c:	40020010 	.word	0x40020010
 8003b70:	40020028 	.word	0x40020028
 8003b74:	40020040 	.word	0x40020040
 8003b78:	40020058 	.word	0x40020058
 8003b7c:	40020070 	.word	0x40020070
 8003b80:	40020088 	.word	0x40020088
 8003b84:	400200a0 	.word	0x400200a0
 8003b88:	400200b8 	.word	0x400200b8
 8003b8c:	40020410 	.word	0x40020410
 8003b90:	40020428 	.word	0x40020428
 8003b94:	40020440 	.word	0x40020440
 8003b98:	40020458 	.word	0x40020458
 8003b9c:	40020470 	.word	0x40020470
 8003ba0:	40020488 	.word	0x40020488
 8003ba4:	400204a0 	.word	0x400204a0
 8003ba8:	400204b8 	.word	0x400204b8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf14      	ite	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	2300      	moveq	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d015      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0204 	bic.w	r2, r2, #4
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2208      	movs	r2, #8
 8003bde:	409a      	lsls	r2, r3
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f043 0201 	orr.w	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d06e      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a69      	ldr	r2, [pc, #420]	; (8003db0 <HAL_DMA_IRQHandler+0x3f8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d04a      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a67      	ldr	r2, [pc, #412]	; (8003db4 <HAL_DMA_IRQHandler+0x3fc>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d045      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a66      	ldr	r2, [pc, #408]	; (8003db8 <HAL_DMA_IRQHandler+0x400>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d040      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a64      	ldr	r2, [pc, #400]	; (8003dbc <HAL_DMA_IRQHandler+0x404>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d03b      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a63      	ldr	r2, [pc, #396]	; (8003dc0 <HAL_DMA_IRQHandler+0x408>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d036      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a61      	ldr	r2, [pc, #388]	; (8003dc4 <HAL_DMA_IRQHandler+0x40c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d031      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a60      	ldr	r2, [pc, #384]	; (8003dc8 <HAL_DMA_IRQHandler+0x410>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d02c      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a5e      	ldr	r2, [pc, #376]	; (8003dcc <HAL_DMA_IRQHandler+0x414>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d027      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a5d      	ldr	r2, [pc, #372]	; (8003dd0 <HAL_DMA_IRQHandler+0x418>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d022      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a5b      	ldr	r2, [pc, #364]	; (8003dd4 <HAL_DMA_IRQHandler+0x41c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01d      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5a      	ldr	r2, [pc, #360]	; (8003dd8 <HAL_DMA_IRQHandler+0x420>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d018      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a58      	ldr	r2, [pc, #352]	; (8003ddc <HAL_DMA_IRQHandler+0x424>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a57      	ldr	r2, [pc, #348]	; (8003de0 <HAL_DMA_IRQHandler+0x428>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00e      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a55      	ldr	r2, [pc, #340]	; (8003de4 <HAL_DMA_IRQHandler+0x42c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a54      	ldr	r2, [pc, #336]	; (8003de8 <HAL_DMA_IRQHandler+0x430>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2ee>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a52      	ldr	r2, [pc, #328]	; (8003dec <HAL_DMA_IRQHandler+0x434>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10a      	bne.n	8003cbc <HAL_DMA_IRQHandler+0x304>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf14      	ite	ne
 8003cb4:	2301      	movne	r3, #1
 8003cb6:	2300      	moveq	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e003      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x30c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	f043 0202 	orr.w	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2204      	movs	r2, #4
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 808f 	beq.w	8003e18 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2c      	ldr	r2, [pc, #176]	; (8003db0 <HAL_DMA_IRQHandler+0x3f8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04a      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <HAL_DMA_IRQHandler+0x3fc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d045      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <HAL_DMA_IRQHandler+0x400>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d040      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <HAL_DMA_IRQHandler+0x404>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d03b      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a26      	ldr	r2, [pc, #152]	; (8003dc0 <HAL_DMA_IRQHandler+0x408>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d036      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a24      	ldr	r2, [pc, #144]	; (8003dc4 <HAL_DMA_IRQHandler+0x40c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d031      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a23      	ldr	r2, [pc, #140]	; (8003dc8 <HAL_DMA_IRQHandler+0x410>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d02c      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a21      	ldr	r2, [pc, #132]	; (8003dcc <HAL_DMA_IRQHandler+0x414>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d027      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <HAL_DMA_IRQHandler+0x418>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <HAL_DMA_IRQHandler+0x41c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01d      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <HAL_DMA_IRQHandler+0x420>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d018      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <HAL_DMA_IRQHandler+0x424>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <HAL_DMA_IRQHandler+0x428>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <HAL_DMA_IRQHandler+0x42c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <HAL_DMA_IRQHandler+0x430>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x3e2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a15      	ldr	r2, [pc, #84]	; (8003dec <HAL_DMA_IRQHandler+0x434>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d12a      	bne.n	8003df0 <HAL_DMA_IRQHandler+0x438>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e023      	b.n	8003df8 <HAL_DMA_IRQHandler+0x440>
 8003db0:	40020010 	.word	0x40020010
 8003db4:	40020028 	.word	0x40020028
 8003db8:	40020040 	.word	0x40020040
 8003dbc:	40020058 	.word	0x40020058
 8003dc0:	40020070 	.word	0x40020070
 8003dc4:	40020088 	.word	0x40020088
 8003dc8:	400200a0 	.word	0x400200a0
 8003dcc:	400200b8 	.word	0x400200b8
 8003dd0:	40020410 	.word	0x40020410
 8003dd4:	40020428 	.word	0x40020428
 8003dd8:	40020440 	.word	0x40020440
 8003ddc:	40020458 	.word	0x40020458
 8003de0:	40020470 	.word	0x40020470
 8003de4:	40020488 	.word	0x40020488
 8003de8:	400204a0 	.word	0x400204a0
 8003dec:	400204b8 	.word	0x400204b8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2204      	movs	r2, #4
 8003e06:	409a      	lsls	r2, r3
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	f043 0204 	orr.w	r2, r3, #4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	2210      	movs	r2, #16
 8003e22:	409a      	lsls	r2, r3
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80a6 	beq.w	8003f7a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a85      	ldr	r2, [pc, #532]	; (8004048 <HAL_DMA_IRQHandler+0x690>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d04a      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a83      	ldr	r2, [pc, #524]	; (800404c <HAL_DMA_IRQHandler+0x694>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d045      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a82      	ldr	r2, [pc, #520]	; (8004050 <HAL_DMA_IRQHandler+0x698>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d040      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a80      	ldr	r2, [pc, #512]	; (8004054 <HAL_DMA_IRQHandler+0x69c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d03b      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7f      	ldr	r2, [pc, #508]	; (8004058 <HAL_DMA_IRQHandler+0x6a0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d036      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a7d      	ldr	r2, [pc, #500]	; (800405c <HAL_DMA_IRQHandler+0x6a4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d031      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7c      	ldr	r2, [pc, #496]	; (8004060 <HAL_DMA_IRQHandler+0x6a8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d02c      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7a      	ldr	r2, [pc, #488]	; (8004064 <HAL_DMA_IRQHandler+0x6ac>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d027      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a79      	ldr	r2, [pc, #484]	; (8004068 <HAL_DMA_IRQHandler+0x6b0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d022      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a77      	ldr	r2, [pc, #476]	; (800406c <HAL_DMA_IRQHandler+0x6b4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01d      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a76      	ldr	r2, [pc, #472]	; (8004070 <HAL_DMA_IRQHandler+0x6b8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d018      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a74      	ldr	r2, [pc, #464]	; (8004074 <HAL_DMA_IRQHandler+0x6bc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a73      	ldr	r2, [pc, #460]	; (8004078 <HAL_DMA_IRQHandler+0x6c0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a71      	ldr	r2, [pc, #452]	; (800407c <HAL_DMA_IRQHandler+0x6c4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a70      	ldr	r2, [pc, #448]	; (8004080 <HAL_DMA_IRQHandler+0x6c8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_DMA_IRQHandler+0x516>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6e      	ldr	r2, [pc, #440]	; (8004084 <HAL_DMA_IRQHandler+0x6cc>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0x52c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	2300      	moveq	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e009      	b.n	8003ef8 <HAL_DMA_IRQHandler+0x540>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bf14      	ite	ne
 8003ef2:	2301      	movne	r3, #1
 8003ef4:	2300      	moveq	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d03e      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2210      	movs	r2, #16
 8003f06:	409a      	lsls	r2, r3
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d018      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d108      	bne.n	8003f3a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d024      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	4798      	blx	r3
 8003f38:	e01f      	b.n	8003f7a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01b      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
 8003f4a:	e016      	b.n	8003f7a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d107      	bne.n	8003f6a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0208 	bic.w	r2, r2, #8
 8003f68:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2220      	movs	r2, #32
 8003f84:	409a      	lsls	r2, r3
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8110 	beq.w	80041b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2c      	ldr	r2, [pc, #176]	; (8004048 <HAL_DMA_IRQHandler+0x690>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d04a      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2b      	ldr	r2, [pc, #172]	; (800404c <HAL_DMA_IRQHandler+0x694>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d045      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a29      	ldr	r2, [pc, #164]	; (8004050 <HAL_DMA_IRQHandler+0x698>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d040      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a28      	ldr	r2, [pc, #160]	; (8004054 <HAL_DMA_IRQHandler+0x69c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d03b      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a26      	ldr	r2, [pc, #152]	; (8004058 <HAL_DMA_IRQHandler+0x6a0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d036      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a25      	ldr	r2, [pc, #148]	; (800405c <HAL_DMA_IRQHandler+0x6a4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d031      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a23      	ldr	r2, [pc, #140]	; (8004060 <HAL_DMA_IRQHandler+0x6a8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d02c      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a22      	ldr	r2, [pc, #136]	; (8004064 <HAL_DMA_IRQHandler+0x6ac>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d027      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a20      	ldr	r2, [pc, #128]	; (8004068 <HAL_DMA_IRQHandler+0x6b0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d022      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1f      	ldr	r2, [pc, #124]	; (800406c <HAL_DMA_IRQHandler+0x6b4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d01d      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <HAL_DMA_IRQHandler+0x6b8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_DMA_IRQHandler+0x6bc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1a      	ldr	r2, [pc, #104]	; (8004078 <HAL_DMA_IRQHandler+0x6c0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_DMA_IRQHandler+0x6c4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a17      	ldr	r2, [pc, #92]	; (8004080 <HAL_DMA_IRQHandler+0x6c8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_DMA_IRQHandler+0x678>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a16      	ldr	r2, [pc, #88]	; (8004084 <HAL_DMA_IRQHandler+0x6cc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d12b      	bne.n	8004088 <HAL_DMA_IRQHandler+0x6d0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e02a      	b.n	800409c <HAL_DMA_IRQHandler+0x6e4>
 8004046:	bf00      	nop
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8087 	beq.w	80041b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2220      	movs	r2, #32
 80040ac:	409a      	lsls	r2, r3
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d139      	bne.n	8004132 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0216 	bic.w	r2, r2, #22
 80040cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <HAL_DMA_IRQHandler+0x736>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0208 	bic.w	r2, r2, #8
 80040fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	223f      	movs	r2, #63	; 0x3f
 8004108:	409a      	lsls	r2, r3
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 834a 	beq.w	80047bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	4798      	blx	r3
          }
          return;
 8004130:	e344      	b.n	80047bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d018      	beq.n	8004172 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d108      	bne.n	8004160 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02c      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4798      	blx	r3
 800415e:	e027      	b.n	80041b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d023      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	4798      	blx	r3
 8004170:	e01e      	b.n	80041b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10f      	bne.n	80041a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0210 	bic.w	r2, r2, #16
 800418e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8306 	beq.w	80047c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8088 	beq.w	80042d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2204      	movs	r2, #4
 80041cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a7a      	ldr	r2, [pc, #488]	; (80043c0 <HAL_DMA_IRQHandler+0xa08>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d04a      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a79      	ldr	r2, [pc, #484]	; (80043c4 <HAL_DMA_IRQHandler+0xa0c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d045      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a77      	ldr	r2, [pc, #476]	; (80043c8 <HAL_DMA_IRQHandler+0xa10>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d040      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a76      	ldr	r2, [pc, #472]	; (80043cc <HAL_DMA_IRQHandler+0xa14>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d03b      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a74      	ldr	r2, [pc, #464]	; (80043d0 <HAL_DMA_IRQHandler+0xa18>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d036      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a73      	ldr	r2, [pc, #460]	; (80043d4 <HAL_DMA_IRQHandler+0xa1c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d031      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a71      	ldr	r2, [pc, #452]	; (80043d8 <HAL_DMA_IRQHandler+0xa20>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02c      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a70      	ldr	r2, [pc, #448]	; (80043dc <HAL_DMA_IRQHandler+0xa24>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d027      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a6e      	ldr	r2, [pc, #440]	; (80043e0 <HAL_DMA_IRQHandler+0xa28>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d022      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a6d      	ldr	r2, [pc, #436]	; (80043e4 <HAL_DMA_IRQHandler+0xa2c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d01d      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6b      	ldr	r2, [pc, #428]	; (80043e8 <HAL_DMA_IRQHandler+0xa30>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d018      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6a      	ldr	r2, [pc, #424]	; (80043ec <HAL_DMA_IRQHandler+0xa34>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a68      	ldr	r2, [pc, #416]	; (80043f0 <HAL_DMA_IRQHandler+0xa38>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a67      	ldr	r2, [pc, #412]	; (80043f4 <HAL_DMA_IRQHandler+0xa3c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a65      	ldr	r2, [pc, #404]	; (80043f8 <HAL_DMA_IRQHandler+0xa40>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_DMA_IRQHandler+0x8b8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a64      	ldr	r2, [pc, #400]	; (80043fc <HAL_DMA_IRQHandler+0xa44>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <HAL_DMA_IRQHandler+0x8ca>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e007      	b.n	8004292 <HAL_DMA_IRQHandler+0x8da>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3301      	adds	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429a:	429a      	cmp	r2, r3
 800429c:	d307      	bcc.n	80042ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f2      	bne.n	8004292 <HAL_DMA_IRQHandler+0x8da>
 80042ac:	e000      	b.n	80042b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80042ae:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80042ce:	e003      	b.n	80042d8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8272 	beq.w	80047c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
 80042ea:	e26c      	b.n	80047c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a43      	ldr	r2, [pc, #268]	; (8004400 <HAL_DMA_IRQHandler+0xa48>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d022      	beq.n	800433c <HAL_DMA_IRQHandler+0x984>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a42      	ldr	r2, [pc, #264]	; (8004404 <HAL_DMA_IRQHandler+0xa4c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d01d      	beq.n	800433c <HAL_DMA_IRQHandler+0x984>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a40      	ldr	r2, [pc, #256]	; (8004408 <HAL_DMA_IRQHandler+0xa50>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d018      	beq.n	800433c <HAL_DMA_IRQHandler+0x984>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3f      	ldr	r2, [pc, #252]	; (800440c <HAL_DMA_IRQHandler+0xa54>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d013      	beq.n	800433c <HAL_DMA_IRQHandler+0x984>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a3d      	ldr	r2, [pc, #244]	; (8004410 <HAL_DMA_IRQHandler+0xa58>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_DMA_IRQHandler+0x984>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a3c      	ldr	r2, [pc, #240]	; (8004414 <HAL_DMA_IRQHandler+0xa5c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d009      	beq.n	800433c <HAL_DMA_IRQHandler+0x984>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a3a      	ldr	r2, [pc, #232]	; (8004418 <HAL_DMA_IRQHandler+0xa60>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_DMA_IRQHandler+0x984>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a39      	ldr	r2, [pc, #228]	; (800441c <HAL_DMA_IRQHandler+0xa64>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <HAL_DMA_IRQHandler+0x988>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <HAL_DMA_IRQHandler+0x98a>
 8004340:	2300      	movs	r3, #0
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 823f 	beq.w	80047c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	2204      	movs	r2, #4
 800435a:	409a      	lsls	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80cd 	beq.w	8004500 <HAL_DMA_IRQHandler+0xb48>
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80c7 	beq.w	8004500 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	2204      	movs	r2, #4
 800437c:	409a      	lsls	r2, r3
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d049      	beq.n	8004420 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 8210 	beq.w	80047c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a8:	e20a      	b.n	80047c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8206 	beq.w	80047c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043bc:	e200      	b.n	80047c0 <HAL_DMA_IRQHandler+0xe08>
 80043be:	bf00      	nop
 80043c0:	40020010 	.word	0x40020010
 80043c4:	40020028 	.word	0x40020028
 80043c8:	40020040 	.word	0x40020040
 80043cc:	40020058 	.word	0x40020058
 80043d0:	40020070 	.word	0x40020070
 80043d4:	40020088 	.word	0x40020088
 80043d8:	400200a0 	.word	0x400200a0
 80043dc:	400200b8 	.word	0x400200b8
 80043e0:	40020410 	.word	0x40020410
 80043e4:	40020428 	.word	0x40020428
 80043e8:	40020440 	.word	0x40020440
 80043ec:	40020458 	.word	0x40020458
 80043f0:	40020470 	.word	0x40020470
 80043f4:	40020488 	.word	0x40020488
 80043f8:	400204a0 	.word	0x400204a0
 80043fc:	400204b8 	.word	0x400204b8
 8004400:	58025408 	.word	0x58025408
 8004404:	5802541c 	.word	0x5802541c
 8004408:	58025430 	.word	0x58025430
 800440c:	58025444 	.word	0x58025444
 8004410:	58025458 	.word	0x58025458
 8004414:	5802546c 	.word	0x5802546c
 8004418:	58025480 	.word	0x58025480
 800441c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d160      	bne.n	80044ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a8c      	ldr	r2, [pc, #560]	; (8004660 <HAL_DMA_IRQHandler+0xca8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d04a      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a8a      	ldr	r2, [pc, #552]	; (8004664 <HAL_DMA_IRQHandler+0xcac>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d045      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a89      	ldr	r2, [pc, #548]	; (8004668 <HAL_DMA_IRQHandler+0xcb0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d040      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a87      	ldr	r2, [pc, #540]	; (800466c <HAL_DMA_IRQHandler+0xcb4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d03b      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a86      	ldr	r2, [pc, #536]	; (8004670 <HAL_DMA_IRQHandler+0xcb8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d036      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a84      	ldr	r2, [pc, #528]	; (8004674 <HAL_DMA_IRQHandler+0xcbc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d031      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a83      	ldr	r2, [pc, #524]	; (8004678 <HAL_DMA_IRQHandler+0xcc0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d02c      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a81      	ldr	r2, [pc, #516]	; (800467c <HAL_DMA_IRQHandler+0xcc4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d027      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a80      	ldr	r2, [pc, #512]	; (8004680 <HAL_DMA_IRQHandler+0xcc8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d022      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <HAL_DMA_IRQHandler+0xccc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01d      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a7d      	ldr	r2, [pc, #500]	; (8004688 <HAL_DMA_IRQHandler+0xcd0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d018      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a7b      	ldr	r2, [pc, #492]	; (800468c <HAL_DMA_IRQHandler+0xcd4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a7a      	ldr	r2, [pc, #488]	; (8004690 <HAL_DMA_IRQHandler+0xcd8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00e      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a78      	ldr	r2, [pc, #480]	; (8004694 <HAL_DMA_IRQHandler+0xcdc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a77      	ldr	r2, [pc, #476]	; (8004698 <HAL_DMA_IRQHandler+0xce0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_DMA_IRQHandler+0xb12>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a75      	ldr	r2, [pc, #468]	; (800469c <HAL_DMA_IRQHandler+0xce4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d108      	bne.n	80044dc <HAL_DMA_IRQHandler+0xb24>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0208 	bic.w	r2, r2, #8
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e007      	b.n	80044ec <HAL_DMA_IRQHandler+0xb34>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0204 	bic.w	r2, r2, #4
 80044ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8165 	beq.w	80047c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fe:	e15f      	b.n	80047c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2202      	movs	r2, #2
 800450a:	409a      	lsls	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80c5 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xce8>
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80bf 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	2202      	movs	r2, #2
 800452c:	409a      	lsls	r2, r3
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d018      	beq.n	800456e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 813a 	beq.w	80047c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004558:	e134      	b.n	80047c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8130 	beq.w	80047c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800456c:	e12a      	b.n	80047c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d168      	bne.n	800464a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a38      	ldr	r2, [pc, #224]	; (8004660 <HAL_DMA_IRQHandler+0xca8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d04a      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a37      	ldr	r2, [pc, #220]	; (8004664 <HAL_DMA_IRQHandler+0xcac>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d045      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a35      	ldr	r2, [pc, #212]	; (8004668 <HAL_DMA_IRQHandler+0xcb0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d040      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a34      	ldr	r2, [pc, #208]	; (800466c <HAL_DMA_IRQHandler+0xcb4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d03b      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a32      	ldr	r2, [pc, #200]	; (8004670 <HAL_DMA_IRQHandler+0xcb8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d036      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a31      	ldr	r2, [pc, #196]	; (8004674 <HAL_DMA_IRQHandler+0xcbc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d031      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a2f      	ldr	r2, [pc, #188]	; (8004678 <HAL_DMA_IRQHandler+0xcc0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d02c      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2e      	ldr	r2, [pc, #184]	; (800467c <HAL_DMA_IRQHandler+0xcc4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d027      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2c      	ldr	r2, [pc, #176]	; (8004680 <HAL_DMA_IRQHandler+0xcc8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d022      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2b      	ldr	r2, [pc, #172]	; (8004684 <HAL_DMA_IRQHandler+0xccc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d01d      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a29      	ldr	r2, [pc, #164]	; (8004688 <HAL_DMA_IRQHandler+0xcd0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d018      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a28      	ldr	r2, [pc, #160]	; (800468c <HAL_DMA_IRQHandler+0xcd4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d013      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a26      	ldr	r2, [pc, #152]	; (8004690 <HAL_DMA_IRQHandler+0xcd8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00e      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a25      	ldr	r2, [pc, #148]	; (8004694 <HAL_DMA_IRQHandler+0xcdc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d009      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a23      	ldr	r2, [pc, #140]	; (8004698 <HAL_DMA_IRQHandler+0xce0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d004      	beq.n	8004618 <HAL_DMA_IRQHandler+0xc60>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a22      	ldr	r2, [pc, #136]	; (800469c <HAL_DMA_IRQHandler+0xce4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d108      	bne.n	800462a <HAL_DMA_IRQHandler+0xc72>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0214 	bic.w	r2, r2, #20
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e007      	b.n	800463a <HAL_DMA_IRQHandler+0xc82>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 020a 	bic.w	r2, r2, #10
 8004638:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80b8 	beq.w	80047c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800465c:	e0b2      	b.n	80047c4 <HAL_DMA_IRQHandler+0xe0c>
 800465e:	bf00      	nop
 8004660:	40020010 	.word	0x40020010
 8004664:	40020028 	.word	0x40020028
 8004668:	40020040 	.word	0x40020040
 800466c:	40020058 	.word	0x40020058
 8004670:	40020070 	.word	0x40020070
 8004674:	40020088 	.word	0x40020088
 8004678:	400200a0 	.word	0x400200a0
 800467c:	400200b8 	.word	0x400200b8
 8004680:	40020410 	.word	0x40020410
 8004684:	40020428 	.word	0x40020428
 8004688:	40020440 	.word	0x40020440
 800468c:	40020458 	.word	0x40020458
 8004690:	40020470 	.word	0x40020470
 8004694:	40020488 	.word	0x40020488
 8004698:	400204a0 	.word	0x400204a0
 800469c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	2208      	movs	r2, #8
 80046aa:	409a      	lsls	r2, r3
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8088 	beq.w	80047c6 <HAL_DMA_IRQHandler+0xe0e>
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8082 	beq.w	80047c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a41      	ldr	r2, [pc, #260]	; (80047cc <HAL_DMA_IRQHandler+0xe14>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d04a      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <HAL_DMA_IRQHandler+0xe18>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d045      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3e      	ldr	r2, [pc, #248]	; (80047d4 <HAL_DMA_IRQHandler+0xe1c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d040      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a3c      	ldr	r2, [pc, #240]	; (80047d8 <HAL_DMA_IRQHandler+0xe20>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d03b      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a3b      	ldr	r2, [pc, #236]	; (80047dc <HAL_DMA_IRQHandler+0xe24>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d036      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a39      	ldr	r2, [pc, #228]	; (80047e0 <HAL_DMA_IRQHandler+0xe28>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d031      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a38      	ldr	r2, [pc, #224]	; (80047e4 <HAL_DMA_IRQHandler+0xe2c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d02c      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a36      	ldr	r2, [pc, #216]	; (80047e8 <HAL_DMA_IRQHandler+0xe30>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d027      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a35      	ldr	r2, [pc, #212]	; (80047ec <HAL_DMA_IRQHandler+0xe34>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a33      	ldr	r2, [pc, #204]	; (80047f0 <HAL_DMA_IRQHandler+0xe38>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01d      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a32      	ldr	r2, [pc, #200]	; (80047f4 <HAL_DMA_IRQHandler+0xe3c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a30      	ldr	r2, [pc, #192]	; (80047f8 <HAL_DMA_IRQHandler+0xe40>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <HAL_DMA_IRQHandler+0xe44>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2d      	ldr	r2, [pc, #180]	; (8004800 <HAL_DMA_IRQHandler+0xe48>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2c      	ldr	r2, [pc, #176]	; (8004804 <HAL_DMA_IRQHandler+0xe4c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_DMA_IRQHandler+0xdaa>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2a      	ldr	r2, [pc, #168]	; (8004808 <HAL_DMA_IRQHandler+0xe50>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d108      	bne.n	8004774 <HAL_DMA_IRQHandler+0xdbc>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 021c 	bic.w	r2, r2, #28
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e007      	b.n	8004784 <HAL_DMA_IRQHandler+0xdcc>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 020e 	bic.w	r2, r2, #14
 8004782:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	2201      	movs	r2, #1
 800478e:	409a      	lsls	r2, r3
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	4798      	blx	r3
 80047ba:	e004      	b.n	80047c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80047bc:	bf00      	nop
 80047be:	e002      	b.n	80047c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c0:	bf00      	nop
 80047c2:	e000      	b.n	80047c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40020010 	.word	0x40020010
 80047d0:	40020028 	.word	0x40020028
 80047d4:	40020040 	.word	0x40020040
 80047d8:	40020058 	.word	0x40020058
 80047dc:	40020070 	.word	0x40020070
 80047e0:	40020088 	.word	0x40020088
 80047e4:	400200a0 	.word	0x400200a0
 80047e8:	400200b8 	.word	0x400200b8
 80047ec:	40020410 	.word	0x40020410
 80047f0:	40020428 	.word	0x40020428
 80047f4:	40020440 	.word	0x40020440
 80047f8:	40020458 	.word	0x40020458
 80047fc:	40020470 	.word	0x40020470
 8004800:	40020488 	.word	0x40020488
 8004804:	400204a0 	.word	0x400204a0
 8004808:	400204b8 	.word	0x400204b8

0800480c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a84      	ldr	r2, [pc, #528]	; (8004a54 <DMA_SetConfig+0x230>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d072      	beq.n	800492e <DMA_SetConfig+0x10a>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a82      	ldr	r2, [pc, #520]	; (8004a58 <DMA_SetConfig+0x234>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d06d      	beq.n	800492e <DMA_SetConfig+0x10a>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a81      	ldr	r2, [pc, #516]	; (8004a5c <DMA_SetConfig+0x238>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d068      	beq.n	800492e <DMA_SetConfig+0x10a>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a7f      	ldr	r2, [pc, #508]	; (8004a60 <DMA_SetConfig+0x23c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d063      	beq.n	800492e <DMA_SetConfig+0x10a>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7e      	ldr	r2, [pc, #504]	; (8004a64 <DMA_SetConfig+0x240>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d05e      	beq.n	800492e <DMA_SetConfig+0x10a>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a7c      	ldr	r2, [pc, #496]	; (8004a68 <DMA_SetConfig+0x244>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d059      	beq.n	800492e <DMA_SetConfig+0x10a>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7b      	ldr	r2, [pc, #492]	; (8004a6c <DMA_SetConfig+0x248>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d054      	beq.n	800492e <DMA_SetConfig+0x10a>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a79      	ldr	r2, [pc, #484]	; (8004a70 <DMA_SetConfig+0x24c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d04f      	beq.n	800492e <DMA_SetConfig+0x10a>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a78      	ldr	r2, [pc, #480]	; (8004a74 <DMA_SetConfig+0x250>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d04a      	beq.n	800492e <DMA_SetConfig+0x10a>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a76      	ldr	r2, [pc, #472]	; (8004a78 <DMA_SetConfig+0x254>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d045      	beq.n	800492e <DMA_SetConfig+0x10a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a75      	ldr	r2, [pc, #468]	; (8004a7c <DMA_SetConfig+0x258>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d040      	beq.n	800492e <DMA_SetConfig+0x10a>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a73      	ldr	r2, [pc, #460]	; (8004a80 <DMA_SetConfig+0x25c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d03b      	beq.n	800492e <DMA_SetConfig+0x10a>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a72      	ldr	r2, [pc, #456]	; (8004a84 <DMA_SetConfig+0x260>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d036      	beq.n	800492e <DMA_SetConfig+0x10a>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a70      	ldr	r2, [pc, #448]	; (8004a88 <DMA_SetConfig+0x264>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d031      	beq.n	800492e <DMA_SetConfig+0x10a>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6f      	ldr	r2, [pc, #444]	; (8004a8c <DMA_SetConfig+0x268>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d02c      	beq.n	800492e <DMA_SetConfig+0x10a>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a6d      	ldr	r2, [pc, #436]	; (8004a90 <DMA_SetConfig+0x26c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d027      	beq.n	800492e <DMA_SetConfig+0x10a>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a6c      	ldr	r2, [pc, #432]	; (8004a94 <DMA_SetConfig+0x270>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <DMA_SetConfig+0x10a>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a6a      	ldr	r2, [pc, #424]	; (8004a98 <DMA_SetConfig+0x274>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01d      	beq.n	800492e <DMA_SetConfig+0x10a>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a69      	ldr	r2, [pc, #420]	; (8004a9c <DMA_SetConfig+0x278>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <DMA_SetConfig+0x10a>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a67      	ldr	r2, [pc, #412]	; (8004aa0 <DMA_SetConfig+0x27c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <DMA_SetConfig+0x10a>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a66      	ldr	r2, [pc, #408]	; (8004aa4 <DMA_SetConfig+0x280>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <DMA_SetConfig+0x10a>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a64      	ldr	r2, [pc, #400]	; (8004aa8 <DMA_SetConfig+0x284>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <DMA_SetConfig+0x10a>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a63      	ldr	r2, [pc, #396]	; (8004aac <DMA_SetConfig+0x288>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <DMA_SetConfig+0x10a>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a61      	ldr	r2, [pc, #388]	; (8004ab0 <DMA_SetConfig+0x28c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d101      	bne.n	8004932 <DMA_SetConfig+0x10e>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <DMA_SetConfig+0x110>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004940:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004952:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3e      	ldr	r2, [pc, #248]	; (8004a54 <DMA_SetConfig+0x230>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d04a      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a3d      	ldr	r2, [pc, #244]	; (8004a58 <DMA_SetConfig+0x234>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d045      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a3b      	ldr	r2, [pc, #236]	; (8004a5c <DMA_SetConfig+0x238>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d040      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3a      	ldr	r2, [pc, #232]	; (8004a60 <DMA_SetConfig+0x23c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d03b      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a38      	ldr	r2, [pc, #224]	; (8004a64 <DMA_SetConfig+0x240>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d036      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a37      	ldr	r2, [pc, #220]	; (8004a68 <DMA_SetConfig+0x244>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d031      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a35      	ldr	r2, [pc, #212]	; (8004a6c <DMA_SetConfig+0x248>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d02c      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a34      	ldr	r2, [pc, #208]	; (8004a70 <DMA_SetConfig+0x24c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d027      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a32      	ldr	r2, [pc, #200]	; (8004a74 <DMA_SetConfig+0x250>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d022      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a31      	ldr	r2, [pc, #196]	; (8004a78 <DMA_SetConfig+0x254>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d01d      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <DMA_SetConfig+0x258>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d018      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2e      	ldr	r2, [pc, #184]	; (8004a80 <DMA_SetConfig+0x25c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d013      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a2c      	ldr	r2, [pc, #176]	; (8004a84 <DMA_SetConfig+0x260>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00e      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a2b      	ldr	r2, [pc, #172]	; (8004a88 <DMA_SetConfig+0x264>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d009      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a29      	ldr	r2, [pc, #164]	; (8004a8c <DMA_SetConfig+0x268>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <DMA_SetConfig+0x1d0>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <DMA_SetConfig+0x26c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d101      	bne.n	80049f8 <DMA_SetConfig+0x1d4>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <DMA_SetConfig+0x1d6>
 80049f8:	2300      	movs	r3, #0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d05a      	beq.n	8004ab4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	223f      	movs	r2, #63	; 0x3f
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d108      	bne.n	8004a40 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a3e:	e087      	b.n	8004b50 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]
}
 8004a50:	e07e      	b.n	8004b50 <DMA_SetConfig+0x32c>
 8004a52:	bf00      	nop
 8004a54:	40020010 	.word	0x40020010
 8004a58:	40020028 	.word	0x40020028
 8004a5c:	40020040 	.word	0x40020040
 8004a60:	40020058 	.word	0x40020058
 8004a64:	40020070 	.word	0x40020070
 8004a68:	40020088 	.word	0x40020088
 8004a6c:	400200a0 	.word	0x400200a0
 8004a70:	400200b8 	.word	0x400200b8
 8004a74:	40020410 	.word	0x40020410
 8004a78:	40020428 	.word	0x40020428
 8004a7c:	40020440 	.word	0x40020440
 8004a80:	40020458 	.word	0x40020458
 8004a84:	40020470 	.word	0x40020470
 8004a88:	40020488 	.word	0x40020488
 8004a8c:	400204a0 	.word	0x400204a0
 8004a90:	400204b8 	.word	0x400204b8
 8004a94:	58025408 	.word	0x58025408
 8004a98:	5802541c 	.word	0x5802541c
 8004a9c:	58025430 	.word	0x58025430
 8004aa0:	58025444 	.word	0x58025444
 8004aa4:	58025458 	.word	0x58025458
 8004aa8:	5802546c 	.word	0x5802546c
 8004aac:	58025480 	.word	0x58025480
 8004ab0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a28      	ldr	r2, [pc, #160]	; (8004b5c <DMA_SetConfig+0x338>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d022      	beq.n	8004b04 <DMA_SetConfig+0x2e0>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a27      	ldr	r2, [pc, #156]	; (8004b60 <DMA_SetConfig+0x33c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d01d      	beq.n	8004b04 <DMA_SetConfig+0x2e0>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a25      	ldr	r2, [pc, #148]	; (8004b64 <DMA_SetConfig+0x340>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <DMA_SetConfig+0x2e0>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <DMA_SetConfig+0x344>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <DMA_SetConfig+0x2e0>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <DMA_SetConfig+0x348>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <DMA_SetConfig+0x2e0>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <DMA_SetConfig+0x34c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <DMA_SetConfig+0x2e0>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <DMA_SetConfig+0x350>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <DMA_SetConfig+0x2e0>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <DMA_SetConfig+0x354>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d101      	bne.n	8004b08 <DMA_SetConfig+0x2e4>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <DMA_SetConfig+0x2e6>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d020      	beq.n	8004b50 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2201      	movs	r2, #1
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d108      	bne.n	8004b40 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	60da      	str	r2, [r3, #12]
}
 8004b3e:	e007      	b.n	8004b50 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]
}
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	58025408 	.word	0x58025408
 8004b60:	5802541c 	.word	0x5802541c
 8004b64:	58025430 	.word	0x58025430
 8004b68:	58025444 	.word	0x58025444
 8004b6c:	58025458 	.word	0x58025458
 8004b70:	5802546c 	.word	0x5802546c
 8004b74:	58025480 	.word	0x58025480
 8004b78:	58025494 	.word	0x58025494

08004b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a42      	ldr	r2, [pc, #264]	; (8004c94 <DMA_CalcBaseAndBitshift+0x118>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d04a      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a41      	ldr	r2, [pc, #260]	; (8004c98 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d045      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3f      	ldr	r2, [pc, #252]	; (8004c9c <DMA_CalcBaseAndBitshift+0x120>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d040      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a3e      	ldr	r2, [pc, #248]	; (8004ca0 <DMA_CalcBaseAndBitshift+0x124>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d03b      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3c      	ldr	r2, [pc, #240]	; (8004ca4 <DMA_CalcBaseAndBitshift+0x128>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d036      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a3b      	ldr	r2, [pc, #236]	; (8004ca8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d031      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a39      	ldr	r2, [pc, #228]	; (8004cac <DMA_CalcBaseAndBitshift+0x130>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d02c      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a38      	ldr	r2, [pc, #224]	; (8004cb0 <DMA_CalcBaseAndBitshift+0x134>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d027      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a36      	ldr	r2, [pc, #216]	; (8004cb4 <DMA_CalcBaseAndBitshift+0x138>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d022      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a35      	ldr	r2, [pc, #212]	; (8004cb8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d01d      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a33      	ldr	r2, [pc, #204]	; (8004cbc <DMA_CalcBaseAndBitshift+0x140>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d018      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a32      	ldr	r2, [pc, #200]	; (8004cc0 <DMA_CalcBaseAndBitshift+0x144>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d013      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a30      	ldr	r2, [pc, #192]	; (8004cc4 <DMA_CalcBaseAndBitshift+0x148>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00e      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2f      	ldr	r2, [pc, #188]	; (8004cc8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d009      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2d      	ldr	r2, [pc, #180]	; (8004ccc <DMA_CalcBaseAndBitshift+0x150>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <DMA_CalcBaseAndBitshift+0xa8>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2c      	ldr	r2, [pc, #176]	; (8004cd0 <DMA_CalcBaseAndBitshift+0x154>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <DMA_CalcBaseAndBitshift+0xac>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <DMA_CalcBaseAndBitshift+0xae>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d024      	beq.n	8004c78 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	3b10      	subs	r3, #16
 8004c36:	4a27      	ldr	r2, [pc, #156]	; (8004cd4 <DMA_CalcBaseAndBitshift+0x158>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	4a24      	ldr	r2, [pc, #144]	; (8004cd8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004c48:	5cd3      	ldrb	r3, [r2, r3]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d908      	bls.n	8004c68 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <DMA_CalcBaseAndBitshift+0x160>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	1d1a      	adds	r2, r3, #4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	659a      	str	r2, [r3, #88]	; 0x58
 8004c66:	e00d      	b.n	8004c84 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <DMA_CalcBaseAndBitshift+0x160>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6593      	str	r3, [r2, #88]	; 0x58
 8004c76:	e005      	b.n	8004c84 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40020010 	.word	0x40020010
 8004c98:	40020028 	.word	0x40020028
 8004c9c:	40020040 	.word	0x40020040
 8004ca0:	40020058 	.word	0x40020058
 8004ca4:	40020070 	.word	0x40020070
 8004ca8:	40020088 	.word	0x40020088
 8004cac:	400200a0 	.word	0x400200a0
 8004cb0:	400200b8 	.word	0x400200b8
 8004cb4:	40020410 	.word	0x40020410
 8004cb8:	40020428 	.word	0x40020428
 8004cbc:	40020440 	.word	0x40020440
 8004cc0:	40020458 	.word	0x40020458
 8004cc4:	40020470 	.word	0x40020470
 8004cc8:	40020488 	.word	0x40020488
 8004ccc:	400204a0 	.word	0x400204a0
 8004cd0:	400204b8 	.word	0x400204b8
 8004cd4:	aaaaaaab 	.word	0xaaaaaaab
 8004cd8:	0800d25c 	.word	0x0800d25c
 8004cdc:	fffffc00 	.word	0xfffffc00

08004ce0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d120      	bne.n	8004d36 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d858      	bhi.n	8004dae <DMA_CheckFifoParam+0xce>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <DMA_CheckFifoParam+0x24>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d27 	.word	0x08004d27
 8004d0c:	08004d15 	.word	0x08004d15
 8004d10:	08004daf 	.word	0x08004daf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d048      	beq.n	8004db2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d24:	e045      	b.n	8004db2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d2e:	d142      	bne.n	8004db6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d34:	e03f      	b.n	8004db6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3e:	d123      	bne.n	8004d88 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d838      	bhi.n	8004dba <DMA_CheckFifoParam+0xda>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <DMA_CheckFifoParam+0x70>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d61 	.word	0x08004d61
 8004d54:	08004d67 	.word	0x08004d67
 8004d58:	08004d61 	.word	0x08004d61
 8004d5c:	08004d79 	.word	0x08004d79
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
        break;
 8004d64:	e030      	b.n	8004dc8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d025      	beq.n	8004dbe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d76:	e022      	b.n	8004dbe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d80:	d11f      	bne.n	8004dc2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d86:	e01c      	b.n	8004dc2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d902      	bls.n	8004d96 <DMA_CheckFifoParam+0xb6>
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d003      	beq.n	8004d9c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d94:	e018      	b.n	8004dc8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
        break;
 8004d9a:	e015      	b.n	8004dc8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00e      	beq.n	8004dc6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
    break;
 8004dac:	e00b      	b.n	8004dc6 <DMA_CheckFifoParam+0xe6>
        break;
 8004dae:	bf00      	nop
 8004db0:	e00a      	b.n	8004dc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004db2:	bf00      	nop
 8004db4:	e008      	b.n	8004dc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004db6:	bf00      	nop
 8004db8:	e006      	b.n	8004dc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004dba:	bf00      	nop
 8004dbc:	e004      	b.n	8004dc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004dbe:	bf00      	nop
 8004dc0:	e002      	b.n	8004dc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004dc2:	bf00      	nop
 8004dc4:	e000      	b.n	8004dc8 <DMA_CheckFifoParam+0xe8>
    break;
 8004dc6:	bf00      	nop
    }
  }

  return status;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop

08004dd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a38      	ldr	r2, [pc, #224]	; (8004ecc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a36      	ldr	r2, [pc, #216]	; (8004ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01d      	beq.n	8004e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a35      	ldr	r2, [pc, #212]	; (8004ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a33      	ldr	r2, [pc, #204]	; (8004ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a32      	ldr	r2, [pc, #200]	; (8004edc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a30      	ldr	r2, [pc, #192]	; (8004ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a2f      	ldr	r2, [pc, #188]	; (8004ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2d      	ldr	r2, [pc, #180]	; (8004ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01a      	beq.n	8004e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	3b08      	subs	r3, #8
 8004e48:	4a28      	ldr	r2, [pc, #160]	; (8004eec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a24      	ldr	r2, [pc, #144]	; (8004ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e74:	e024      	b.n	8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	3b10      	subs	r3, #16
 8004e7e:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d806      	bhi.n	8004e9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d902      	bls.n	8004e9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004eb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2201      	movs	r2, #1
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	58025408 	.word	0x58025408
 8004ed0:	5802541c 	.word	0x5802541c
 8004ed4:	58025430 	.word	0x58025430
 8004ed8:	58025444 	.word	0x58025444
 8004edc:	58025458 	.word	0x58025458
 8004ee0:	5802546c 	.word	0x5802546c
 8004ee4:	58025480 	.word	0x58025480
 8004ee8:	58025494 	.word	0x58025494
 8004eec:	cccccccd 	.word	0xcccccccd
 8004ef0:	16009600 	.word	0x16009600
 8004ef4:	58025880 	.word	0x58025880
 8004ef8:	aaaaaaab 	.word	0xaaaaaaab
 8004efc:	400204b8 	.word	0x400204b8
 8004f00:	4002040f 	.word	0x4002040f
 8004f04:	10008200 	.word	0x10008200
 8004f08:	40020880 	.word	0x40020880

08004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04a      	beq.n	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d847      	bhi.n	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a25      	ldr	r2, [pc, #148]	; (8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d022      	beq.n	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a24      	ldr	r2, [pc, #144]	; (8004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d01d      	beq.n	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a22      	ldr	r2, [pc, #136]	; (8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d018      	beq.n	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a21      	ldr	r2, [pc, #132]	; (8004fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4b17      	ldr	r3, [pc, #92]	; (8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a15      	ldr	r2, [pc, #84]	; (8004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f94:	671a      	str	r2, [r3, #112]	; 0x70
 8004f96:	e009      	b.n	8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4b14      	ldr	r3, [pc, #80]	; (8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a11      	ldr	r2, [pc, #68]	; (8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004faa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	58025408 	.word	0x58025408
 8004fc8:	5802541c 	.word	0x5802541c
 8004fcc:	58025430 	.word	0x58025430
 8004fd0:	58025444 	.word	0x58025444
 8004fd4:	58025458 	.word	0x58025458
 8004fd8:	5802546c 	.word	0x5802546c
 8004fdc:	58025480 	.word	0x58025480
 8004fe0:	58025494 	.word	0x58025494
 8004fe4:	1600963f 	.word	0x1600963f
 8004fe8:	58025940 	.word	0x58025940
 8004fec:	1000823f 	.word	0x1000823f
 8004ff0:	40020940 	.word	0x40020940

08004ff4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0c6      	b.n	8005194 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc fb66 	bl	80016e0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2223      	movs	r2, #35	; 0x23
 8005018:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800501a:	4b60      	ldr	r3, [pc, #384]	; (800519c <HAL_ETH_Init+0x1a8>)
 800501c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005020:	4a5e      	ldr	r2, [pc, #376]	; (800519c <HAL_ETH_Init+0x1a8>)
 8005022:	f043 0302 	orr.w	r3, r3, #2
 8005026:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800502a:	4b5c      	ldr	r3, [pc, #368]	; (800519c <HAL_ETH_Init+0x1a8>)
 800502c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	7a1b      	ldrb	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005040:	2000      	movs	r0, #0
 8005042:	f7fd f859 	bl	80020f8 <HAL_SYSCFG_ETHInterfaceSelect>
 8005046:	e003      	b.n	8005050 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005048:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800504c:	f7fd f854 	bl	80020f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005068:	f7fd f80a 	bl	8002080 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800506e:	e00f      	b.n	8005090 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005070:	f7fd f806 	bl	8002080 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800507e:	d907      	bls.n	8005090 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2204      	movs	r2, #4
 8005084:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	22e0      	movs	r2, #224	; 0xe0
 800508a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e081      	b.n	8005194 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e6      	bne.n	8005070 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fac0 	bl	8005628 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80050a8:	f001 febc 	bl	8006e24 <HAL_RCC_GetHCLKFreq>
 80050ac:	4603      	mov	r3, r0
 80050ae:	4a3c      	ldr	r2, [pc, #240]	; (80051a0 <HAL_ETH_Init+0x1ac>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	0c9a      	lsrs	r2, r3, #18
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3a01      	subs	r2, #1
 80050bc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fa13 	bl	80054ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80050dc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050e0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	22e0      	movs	r2, #224	; 0xe0
 80050f8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e04a      	b.n	8005194 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	f241 1308 	movw	r3, #4360	; 0x1108
 8005106:	4413      	add	r3, r2
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <HAL_ETH_Init+0x1b0>)
 800510c:	4013      	ands	r3, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6952      	ldr	r2, [r2, #20]
 8005112:	0052      	lsls	r2, r2, #1
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	6809      	ldr	r1, [r1, #0]
 8005118:	431a      	orrs	r2, r3
 800511a:	f241 1308 	movw	r3, #4360	; 0x1108
 800511e:	440b      	add	r3, r1
 8005120:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fad8 	bl	80056d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fb1c 	bl	8005766 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	3305      	adds	r3, #5
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	021a      	lsls	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	3304      	adds	r3, #4
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	4619      	mov	r1, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	3303      	adds	r3, #3
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	061a      	lsls	r2, r3, #24
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	3302      	adds	r3, #2
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	041b      	lsls	r3, r3, #16
 8005160:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	3301      	adds	r3, #1
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800516c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800517a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800517c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2210      	movs	r2, #16
 800518a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2210      	movs	r2, #16
 8005190:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	58024400 	.word	0x58024400
 80051a0:	431bde83 	.word	0x431bde83
 80051a4:	ffff8001 	.word	0xffff8001

080051a8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80051ba:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	791b      	ldrb	r3, [r3, #4]
 80051c0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80051c2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	7b1b      	ldrb	r3, [r3, #12]
 80051c8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80051ca:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	7b5b      	ldrb	r3, [r3, #13]
 80051d0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051d2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	7b9b      	ldrb	r3, [r3, #14]
 80051d8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80051da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	7bdb      	ldrb	r3, [r3, #15]
 80051e0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051e2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	7c12      	ldrb	r2, [r2, #16]
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	d102      	bne.n	80051f2 <ETH_SetMACConfig+0x4a>
 80051ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80051f0:	e000      	b.n	80051f4 <ETH_SetMACConfig+0x4c>
 80051f2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051f4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	7c52      	ldrb	r2, [r2, #17]
 80051fa:	2a00      	cmp	r2, #0
 80051fc:	d102      	bne.n	8005204 <ETH_SetMACConfig+0x5c>
 80051fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005202:	e000      	b.n	8005206 <ETH_SetMACConfig+0x5e>
 8005204:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005206:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	7c9b      	ldrb	r3, [r3, #18]
 800520c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800520e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005214:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800521a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	7f1b      	ldrb	r3, [r3, #28]
 8005220:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005222:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	7f5b      	ldrb	r3, [r3, #29]
 8005228:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800522a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	7f92      	ldrb	r2, [r2, #30]
 8005230:	2a00      	cmp	r2, #0
 8005232:	d102      	bne.n	800523a <ETH_SetMACConfig+0x92>
 8005234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005238:	e000      	b.n	800523c <ETH_SetMACConfig+0x94>
 800523a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800523c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	7fdb      	ldrb	r3, [r3, #31]
 8005242:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005244:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	f892 2020 	ldrb.w	r2, [r2, #32]
 800524c:	2a00      	cmp	r2, #0
 800524e:	d102      	bne.n	8005256 <ETH_SetMACConfig+0xae>
 8005250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005254:	e000      	b.n	8005258 <ETH_SetMACConfig+0xb0>
 8005256:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005258:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800525e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005266:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005268:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b56      	ldr	r3, [pc, #344]	; (80053d4 <ETH_SetMACConfig+0x22c>)
 800527a:	4013      	ands	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	430b      	orrs	r3, r1
 8005284:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005292:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005294:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800529c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800529e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052a6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80052a8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	d102      	bne.n	80052ba <ETH_SetMACConfig+0x112>
 80052b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052b8:	e000      	b.n	80052bc <ETH_SetMACConfig+0x114>
 80052ba:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80052bc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b42      	ldr	r3, [pc, #264]	; (80053d8 <ETH_SetMACConfig+0x230>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	68f9      	ldr	r1, [r7, #12]
 80052d6:	430b      	orrs	r3, r1
 80052d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	4b3a      	ldr	r3, [pc, #232]	; (80053dc <ETH_SetMACConfig+0x234>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	430b      	orrs	r3, r1
 80052fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005304:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800530a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005312:	2a00      	cmp	r2, #0
 8005314:	d101      	bne.n	800531a <ETH_SetMACConfig+0x172>
 8005316:	2280      	movs	r2, #128	; 0x80
 8005318:	e000      	b.n	800531c <ETH_SetMACConfig+0x174>
 800531a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800531c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005322:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800532e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005332:	4013      	ands	r3, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	68f9      	ldr	r1, [r7, #12]
 800533a:	430b      	orrs	r3, r1
 800533c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005344:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800534c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535a:	f023 0103 	bic.w	r1, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	430a      	orrs	r2, r1
 8005366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005372:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800538e:	2a00      	cmp	r2, #0
 8005390:	d101      	bne.n	8005396 <ETH_SetMACConfig+0x1ee>
 8005392:	2240      	movs	r2, #64	; 0x40
 8005394:	e000      	b.n	8005398 <ETH_SetMACConfig+0x1f0>
 8005396:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005398:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80053a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053a2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80053aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80053b8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	00048083 	.word	0x00048083
 80053d8:	c0f88000 	.word	0xc0f88000
 80053dc:	fffffef0 	.word	0xfffffef0

080053e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4b38      	ldr	r3, [pc, #224]	; (80054d8 <ETH_SetDMAConfig+0xf8>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	6809      	ldr	r1, [r1, #0]
 8005400:	431a      	orrs	r2, r3
 8005402:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005406:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	791b      	ldrb	r3, [r3, #4]
 800540c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005412:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	7b1b      	ldrb	r3, [r3, #12]
 8005418:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	f241 0304 	movw	r3, #4100	; 0x1004
 8005426:	4413      	add	r3, r2
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b2c      	ldr	r3, [pc, #176]	; (80054dc <ETH_SetDMAConfig+0xfc>)
 800542c:	4013      	ands	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6811      	ldr	r1, [r2, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	431a      	orrs	r2, r3
 8005436:	f241 0304 	movw	r3, #4100	; 0x1004
 800543a:	440b      	add	r3, r1
 800543c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	7b5b      	ldrb	r3, [r3, #13]
 8005442:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b22      	ldr	r3, [pc, #136]	; (80054e0 <ETH_SetDMAConfig+0x100>)
 8005458:	4013      	ands	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6811      	ldr	r1, [r2, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	431a      	orrs	r2, r3
 8005462:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005466:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	7d1b      	ldrb	r3, [r3, #20]
 8005470:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005472:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	7f5b      	ldrb	r3, [r3, #29]
 8005478:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	f241 1304 	movw	r3, #4356	; 0x1104
 8005486:	4413      	add	r3, r2
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b16      	ldr	r3, [pc, #88]	; (80054e4 <ETH_SetDMAConfig+0x104>)
 800548c:	4013      	ands	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6811      	ldr	r1, [r2, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	431a      	orrs	r2, r3
 8005496:	f241 1304 	movw	r3, #4356	; 0x1104
 800549a:	440b      	add	r3, r1
 800549c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	7f1b      	ldrb	r3, [r3, #28]
 80054a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	f241 1308 	movw	r3, #4360	; 0x1108
 80054b4:	4413      	add	r3, r2
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <ETH_SetDMAConfig+0x108>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6811      	ldr	r1, [r2, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	f241 1308 	movw	r3, #4360	; 0x1108
 80054c8:	440b      	add	r3, r1
 80054ca:	601a      	str	r2, [r3, #0]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	ffff87fd 	.word	0xffff87fd
 80054dc:	ffff2ffe 	.word	0xffff2ffe
 80054e0:	fffec000 	.word	0xfffec000
 80054e4:	ffc0efef 	.word	0xffc0efef
 80054e8:	7fc0ffff 	.word	0x7fc0ffff

080054ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b0a4      	sub	sp, #144	; 0x90
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054fa:	2300      	movs	r3, #0
 80054fc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005504:	2300      	movs	r3, #0
 8005506:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800552c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800552e:	2300      	movs	r3, #0
 8005530:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005534:	2300      	movs	r3, #0
 8005536:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005538:	2300      	movs	r3, #0
 800553a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800553e:	2300      	movs	r3, #0
 8005540:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005544:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005548:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800554a:	2300      	movs	r3, #0
 800554c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005550:	2300      	movs	r3, #0
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005566:	2300      	movs	r3, #0
 8005568:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800556a:	2300      	movs	r3, #0
 800556c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800556e:	2300      	movs	r3, #0
 8005570:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005572:	2300      	movs	r3, #0
 8005574:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005584:	2320      	movs	r3, #32
 8005586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005590:	2300      	movs	r3, #0
 8005592:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005596:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800559c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055a0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80055a8:	2302      	movs	r3, #2
 80055aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80055c6:	2300      	movs	r3, #0
 80055c8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80055d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff fde6 	bl	80051a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80055dc:	2301      	movs	r3, #1
 80055de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80055e0:	2301      	movs	r3, #1
 80055e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005600:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005604:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005606:	2300      	movs	r3, #0
 8005608:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800560c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff fee1 	bl	80053e0 <ETH_SetDMAConfig>
}
 800561e:	bf00      	nop
 8005620:	3790      	adds	r7, #144	; 0x90
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005638:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005640:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005642:	f001 fbef 	bl	8006e24 <HAL_RCC_GetHCLKFreq>
 8005646:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4a1e      	ldr	r2, [pc, #120]	; (80056c4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d908      	bls.n	8005662 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a1d      	ldr	r2, [pc, #116]	; (80056c8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d804      	bhi.n	8005662 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e027      	b.n	80056b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d908      	bls.n	800567c <ETH_MAC_MDIO_ClkConfig+0x54>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	4a17      	ldr	r2, [pc, #92]	; (80056cc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d204      	bcs.n	800567c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	e01a      	b.n	80056b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4a13      	ldr	r2, [pc, #76]	; (80056cc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d303      	bcc.n	800568c <ETH_MAC_MDIO_ClkConfig+0x64>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4a12      	ldr	r2, [pc, #72]	; (80056d0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d911      	bls.n	80056b0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4a10      	ldr	r2, [pc, #64]	; (80056d0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d908      	bls.n	80056a6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4a0f      	ldr	r2, [pc, #60]	; (80056d4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d804      	bhi.n	80056a6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e005      	b.n	80056b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e000      	b.n	80056b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80056b0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	01312cff 	.word	0x01312cff
 80056c8:	02160ebf 	.word	0x02160ebf
 80056cc:	03938700 	.word	0x03938700
 80056d0:	05f5e0ff 	.word	0x05f5e0ff
 80056d4:	08f0d17f 	.word	0x08f0d17f

080056d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e01d      	b.n	8005722 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68d9      	ldr	r1, [r3, #12]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4613      	mov	r3, r2
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	4413      	add	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	440b      	add	r3, r1
 80056f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2200      	movs	r2, #0
 8005702:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2200      	movs	r2, #0
 800570e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	3206      	adds	r2, #6
 8005718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b03      	cmp	r3, #3
 8005726:	d9de      	bls.n	80056e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	f241 132c 	movw	r3, #4396	; 0x112c
 8005736:	4413      	add	r3, r2
 8005738:	2203      	movs	r2, #3
 800573a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68d9      	ldr	r1, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	f241 1314 	movw	r3, #4372	; 0x1114
 8005748:	4413      	add	r3, r2
 800574a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005758:	601a      	str	r2, [r3, #0]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	e024      	b.n	80057be <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6919      	ldr	r1, [r3, #16]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4613      	mov	r3, r2
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	4413      	add	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	440b      	add	r3, r1
 8005784:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2200      	movs	r2, #0
 8005790:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2200      	movs	r2, #0
 8005796:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2200      	movs	r2, #0
 800579c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2200      	movs	r2, #0
 80057a2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2200      	movs	r2, #0
 80057a8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3310      	adds	r3, #16
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d9d7      	bls.n	8005774 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	f241 1330 	movw	r3, #4400	; 0x1130
 80057ea:	4413      	add	r3, r2
 80057ec:	2203      	movs	r2, #3
 80057ee:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6919      	ldr	r1, [r3, #16]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80057fc:	4413      	add	r3, r2
 80057fe:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	f241 1328 	movw	r3, #4392	; 0x1128
 8005810:	4413      	add	r3, r2
 8005812:	6019      	str	r1, [r3, #0]
}
 8005814:	bf00      	nop
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005820:	b480      	push	{r7}
 8005822:	b089      	sub	sp, #36	; 0x24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800582e:	4b89      	ldr	r3, [pc, #548]	; (8005a54 <HAL_GPIO_Init+0x234>)
 8005830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005832:	e194      	b.n	8005b5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	2101      	movs	r1, #1
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	4013      	ands	r3, r2
 8005842:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8186 	beq.w	8005b58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d00b      	beq.n	800586c <HAL_GPIO_Init+0x4c>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d007      	beq.n	800586c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005860:	2b11      	cmp	r3, #17
 8005862:	d003      	beq.n	800586c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b12      	cmp	r3, #18
 800586a:	d130      	bne.n	80058ce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	2203      	movs	r2, #3
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4313      	orrs	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058a2:	2201      	movs	r2, #1
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43db      	mvns	r3, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4013      	ands	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	091b      	lsrs	r3, r3, #4
 80058b8:	f003 0201 	and.w	r2, r3, #1
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	2203      	movs	r2, #3
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	43db      	mvns	r3, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4013      	ands	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d003      	beq.n	800590e <HAL_GPIO_Init+0xee>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b12      	cmp	r3, #18
 800590c:	d123      	bne.n	8005956 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	08da      	lsrs	r2, r3, #3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3208      	adds	r2, #8
 8005916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	220f      	movs	r2, #15
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	43db      	mvns	r3, r3
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	4013      	ands	r3, r2
 8005930:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4313      	orrs	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	08da      	lsrs	r2, r3, #3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3208      	adds	r2, #8
 8005950:	69b9      	ldr	r1, [r7, #24]
 8005952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	2203      	movs	r2, #3
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 0203 	and.w	r2, r3, #3
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4313      	orrs	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80e0 	beq.w	8005b58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005998:	4b2f      	ldr	r3, [pc, #188]	; (8005a58 <HAL_GPIO_Init+0x238>)
 800599a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800599e:	4a2e      	ldr	r2, [pc, #184]	; (8005a58 <HAL_GPIO_Init+0x238>)
 80059a0:	f043 0302 	orr.w	r3, r3, #2
 80059a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80059a8:	4b2b      	ldr	r3, [pc, #172]	; (8005a58 <HAL_GPIO_Init+0x238>)
 80059aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059b6:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <HAL_GPIO_Init+0x23c>)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	3302      	adds	r3, #2
 80059be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	220f      	movs	r2, #15
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a20      	ldr	r2, [pc, #128]	; (8005a60 <HAL_GPIO_Init+0x240>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d052      	beq.n	8005a88 <HAL_GPIO_Init+0x268>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <HAL_GPIO_Init+0x244>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d031      	beq.n	8005a4e <HAL_GPIO_Init+0x22e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a1e      	ldr	r2, [pc, #120]	; (8005a68 <HAL_GPIO_Init+0x248>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02b      	beq.n	8005a4a <HAL_GPIO_Init+0x22a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <HAL_GPIO_Init+0x24c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d025      	beq.n	8005a46 <HAL_GPIO_Init+0x226>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <HAL_GPIO_Init+0x250>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01f      	beq.n	8005a42 <HAL_GPIO_Init+0x222>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <HAL_GPIO_Init+0x254>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d019      	beq.n	8005a3e <HAL_GPIO_Init+0x21e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	; (8005a78 <HAL_GPIO_Init+0x258>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_GPIO_Init+0x21a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <HAL_GPIO_Init+0x25c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00d      	beq.n	8005a36 <HAL_GPIO_Init+0x216>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a18      	ldr	r2, [pc, #96]	; (8005a80 <HAL_GPIO_Init+0x260>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <HAL_GPIO_Init+0x212>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <HAL_GPIO_Init+0x264>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d101      	bne.n	8005a2e <HAL_GPIO_Init+0x20e>
 8005a2a:	2309      	movs	r3, #9
 8005a2c:	e02d      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a2e:	230a      	movs	r3, #10
 8005a30:	e02b      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a32:	2308      	movs	r3, #8
 8005a34:	e029      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a36:	2307      	movs	r3, #7
 8005a38:	e027      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a3a:	2306      	movs	r3, #6
 8005a3c:	e025      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a3e:	2305      	movs	r3, #5
 8005a40:	e023      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a42:	2304      	movs	r3, #4
 8005a44:	e021      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a46:	2303      	movs	r3, #3
 8005a48:	e01f      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e01d      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e01b      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a52:	bf00      	nop
 8005a54:	58000080 	.word	0x58000080
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	58000400 	.word	0x58000400
 8005a60:	58020000 	.word	0x58020000
 8005a64:	58020400 	.word	0x58020400
 8005a68:	58020800 	.word	0x58020800
 8005a6c:	58020c00 	.word	0x58020c00
 8005a70:	58021000 	.word	0x58021000
 8005a74:	58021400 	.word	0x58021400
 8005a78:	58021800 	.word	0x58021800
 8005a7c:	58021c00 	.word	0x58021c00
 8005a80:	58022000 	.word	0x58022000
 8005a84:	58022400 	.word	0x58022400
 8005a88:	2300      	movs	r3, #0
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	f002 0203 	and.w	r2, r2, #3
 8005a90:	0092      	lsls	r2, r2, #2
 8005a92:	4093      	lsls	r3, r2
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a9a:	4938      	ldr	r1, [pc, #224]	; (8005b7c <HAL_GPIO_Init+0x35c>)
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	089b      	lsrs	r3, r3, #2
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	43db      	mvns	r3, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f47f ae63 	bne.w	8005834 <HAL_GPIO_Init+0x14>
  }
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	3724      	adds	r7, #36	; 0x24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	58000400 	.word	0x58000400

08005b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
 8005b9c:	e001      	b.n	8005ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	807b      	strh	r3, [r7, #2]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bc0:	787b      	ldrb	r3, [r7, #1]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bc6:	887a      	ldrh	r2, [r7, #2]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005bcc:	e003      	b.n	8005bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005bce:	887b      	ldrh	r3, [r7, #2]
 8005bd0:	041a      	lsls	r2, r3, #16
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	619a      	str	r2, [r3, #24]
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <HAL_HSEM_FastTake+0x2c>)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3320      	adds	r3, #32
 8005bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf6:	4a07      	ldr	r2, [pc, #28]	; (8005c14 <HAL_HSEM_FastTake+0x30>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d101      	bne.n	8005c00 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e000      	b.n	8005c02 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	58026400 	.word	0x58026400
 8005c14:	80000300 	.word	0x80000300

08005c18 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005c22:	4906      	ldr	r1, [pc, #24]	; (8005c3c <HAL_HSEM_Release+0x24>)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	58026400 	.word	0x58026400

08005c40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c42:	b08f      	sub	sp, #60	; 0x3c
 8005c44:	af0a      	add	r7, sp, #40	; 0x28
 8005c46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e116      	b.n	8005e80 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fc f831 	bl	8001cd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2203      	movs	r2, #3
 8005c76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f006 ffaf 	bl	800cbf4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	687e      	ldr	r6, [r7, #4]
 8005c9e:	466d      	mov	r5, sp
 8005ca0:	f106 0410 	add.w	r4, r6, #16
 8005ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cb4:	1d33      	adds	r3, r6, #4
 8005cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cb8:	6838      	ldr	r0, [r7, #0]
 8005cba:	f006 ff2d 	bl	800cb18 <USB_CoreInit>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0d7      	b.n	8005e80 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f006 ff9d 	bl	800cc16 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73fb      	strb	r3, [r7, #15]
 8005ce0:	e04a      	b.n	8005d78 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ce2:	7bfa      	ldrb	r2, [r7, #15]
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	333d      	adds	r3, #61	; 0x3d
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cf6:	7bfa      	ldrb	r2, [r7, #15]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	333c      	adds	r3, #60	; 0x3c
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d0a:	7bfa      	ldrb	r2, [r7, #15]
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	b298      	uxth	r0, r3
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	4613      	mov	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	3342      	adds	r3, #66	; 0x42
 8005d1e:	4602      	mov	r2, r0
 8005d20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d22:	7bfa      	ldrb	r2, [r7, #15]
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	4613      	mov	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	440b      	add	r3, r1
 8005d30:	333f      	adds	r3, #63	; 0x3f
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d36:	7bfa      	ldrb	r2, [r7, #15]
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	3344      	adds	r3, #68	; 0x44
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d4a:	7bfa      	ldrb	r2, [r7, #15]
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	3348      	adds	r3, #72	; 0x48
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d5e:	7bfa      	ldrb	r2, [r7, #15]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3350      	adds	r3, #80	; 0x50
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	3301      	adds	r3, #1
 8005d76:	73fb      	strb	r3, [r7, #15]
 8005d78:	7bfa      	ldrb	r2, [r7, #15]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d3af      	bcc.n	8005ce2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
 8005d86:	e044      	b.n	8005e12 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d88:	7bfa      	ldrb	r2, [r7, #15]
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	440b      	add	r3, r1
 8005d96:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d9e:	7bfa      	ldrb	r2, [r7, #15]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005db0:	7bfa      	ldrb	r2, [r7, #15]
 8005db2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005db4:	7bfa      	ldrb	r2, [r7, #15]
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005dca:	7bfa      	ldrb	r2, [r7, #15]
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005de0:	7bfa      	ldrb	r2, [r7, #15]
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005df6:	7bfa      	ldrb	r2, [r7, #15]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
 8005e12:	7bfa      	ldrb	r2, [r7, #15]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d3b5      	bcc.n	8005d88 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	687e      	ldr	r6, [r7, #4]
 8005e24:	466d      	mov	r5, sp
 8005e26:	f106 0410 	add.w	r4, r6, #16
 8005e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e36:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e3a:	1d33      	adds	r3, r6, #4
 8005e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e3e:	6838      	ldr	r0, [r7, #0]
 8005e40:	f006 ff14 	bl	800cc6c <USB_DevInit>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e014      	b.n	8005e80 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d102      	bne.n	8005e74 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f80a 	bl	8005e88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f007 f8b6 	bl	800cfea <USB_DevDisconnect>

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <HAL_PCDEx_ActivateLPM+0x44>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	10000003 	.word	0x10000003

08005ed0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005ed8:	4b29      	ldr	r3, [pc, #164]	; (8005f80 <HAL_PWREx_ConfigSupply+0xb0>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	2b06      	cmp	r3, #6
 8005ee2:	d00a      	beq.n	8005efa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ee4:	4b26      	ldr	r3, [pc, #152]	; (8005f80 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d001      	beq.n	8005ef6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e040      	b.n	8005f78 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e03e      	b.n	8005f78 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005efa:	4b21      	ldr	r3, [pc, #132]	; (8005f80 <HAL_PWREx_ConfigSupply+0xb0>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005f02:	491f      	ldr	r1, [pc, #124]	; (8005f80 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f0a:	f7fc f8b9 	bl	8002080 <HAL_GetTick>
 8005f0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f10:	e009      	b.n	8005f26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f12:	f7fc f8b5 	bl	8002080 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f20:	d901      	bls.n	8005f26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e028      	b.n	8005f78 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f26:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f32:	d1ee      	bne.n	8005f12 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b1e      	cmp	r3, #30
 8005f38:	d008      	beq.n	8005f4c <HAL_PWREx_ConfigSupply+0x7c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f3e:	d005      	beq.n	8005f4c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b1d      	cmp	r3, #29
 8005f44:	d002      	beq.n	8005f4c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b2d      	cmp	r3, #45	; 0x2d
 8005f4a:	d114      	bne.n	8005f76 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005f4c:	f7fc f898 	bl	8002080 <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005f52:	e009      	b.n	8005f68 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f54:	f7fc f894 	bl	8002080 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f62:	d901      	bls.n	8005f68 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e007      	b.n	8005f78 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005f68:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f74:	d1ee      	bne.n	8005f54 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	58024800 	.word	0x58024800

08005f84 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f92:	60d3      	str	r3, [r2, #12]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	58024800 	.word	0x58024800

08005fa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	; 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e3ff      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8087 	beq.w	80060d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc4:	4b99      	ldr	r3, [pc, #612]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fce:	4b97      	ldr	r3, [pc, #604]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	2b10      	cmp	r3, #16
 8005fd8:	d007      	beq.n	8005fea <HAL_RCC_OscConfig+0x46>
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	2b18      	cmp	r3, #24
 8005fde:	d110      	bne.n	8006002 <HAL_RCC_OscConfig+0x5e>
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d10b      	bne.n	8006002 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fea:	4b90      	ldr	r3, [pc, #576]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d06c      	beq.n	80060d0 <HAL_RCC_OscConfig+0x12c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d168      	bne.n	80060d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e3d9      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600a:	d106      	bne.n	800601a <HAL_RCC_OscConfig+0x76>
 800600c:	4b87      	ldr	r3, [pc, #540]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a86      	ldr	r2, [pc, #536]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	e02e      	b.n	8006078 <HAL_RCC_OscConfig+0xd4>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10c      	bne.n	800603c <HAL_RCC_OscConfig+0x98>
 8006022:	4b82      	ldr	r3, [pc, #520]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a81      	ldr	r2, [pc, #516]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	4b7f      	ldr	r3, [pc, #508]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a7e      	ldr	r2, [pc, #504]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	e01d      	b.n	8006078 <HAL_RCC_OscConfig+0xd4>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006044:	d10c      	bne.n	8006060 <HAL_RCC_OscConfig+0xbc>
 8006046:	4b79      	ldr	r3, [pc, #484]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a78      	ldr	r2, [pc, #480]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800604c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	4b76      	ldr	r3, [pc, #472]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a75      	ldr	r2, [pc, #468]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	e00b      	b.n	8006078 <HAL_RCC_OscConfig+0xd4>
 8006060:	4b72      	ldr	r3, [pc, #456]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a71      	ldr	r2, [pc, #452]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	4b6f      	ldr	r3, [pc, #444]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a6e      	ldr	r2, [pc, #440]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d013      	beq.n	80060a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7fb fffe 	bl	8002080 <HAL_GetTick>
 8006084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006088:	f7fb fffa 	bl	8002080 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b64      	cmp	r3, #100	; 0x64
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e38d      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800609a:	4b64      	ldr	r3, [pc, #400]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f0      	beq.n	8006088 <HAL_RCC_OscConfig+0xe4>
 80060a6:	e014      	b.n	80060d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fb ffea 	bl	8002080 <HAL_GetTick>
 80060ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b0:	f7fb ffe6 	bl	8002080 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b64      	cmp	r3, #100	; 0x64
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e379      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060c2:	4b5a      	ldr	r3, [pc, #360]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x10c>
 80060ce:	e000      	b.n	80060d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80ae 	beq.w	800623c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e0:	4b52      	ldr	r3, [pc, #328]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060ea:	4b50      	ldr	r3, [pc, #320]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <HAL_RCC_OscConfig+0x162>
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	2b18      	cmp	r3, #24
 80060fa:	d13a      	bne.n	8006172 <HAL_RCC_OscConfig+0x1ce>
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d135      	bne.n	8006172 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006106:	4b49      	ldr	r3, [pc, #292]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <HAL_RCC_OscConfig+0x17a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e34b      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611e:	f7fb ffdf 	bl	80020e0 <HAL_GetREVID>
 8006122:	4603      	mov	r3, r0
 8006124:	f241 0203 	movw	r2, #4099	; 0x1003
 8006128:	4293      	cmp	r3, r2
 800612a:	d817      	bhi.n	800615c <HAL_RCC_OscConfig+0x1b8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d108      	bne.n	8006146 <HAL_RCC_OscConfig+0x1a2>
 8006134:	4b3d      	ldr	r3, [pc, #244]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800613c:	4a3b      	ldr	r2, [pc, #236]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800613e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006142:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006144:	e07a      	b.n	800623c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006146:	4b39      	ldr	r3, [pc, #228]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	031b      	lsls	r3, r3, #12
 8006154:	4935      	ldr	r1, [pc, #212]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006156:	4313      	orrs	r3, r2
 8006158:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800615a:	e06f      	b.n	800623c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800615c:	4b33      	ldr	r3, [pc, #204]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	061b      	lsls	r3, r3, #24
 800616a:	4930      	ldr	r1, [pc, #192]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800616c:	4313      	orrs	r3, r2
 800616e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006170:	e064      	b.n	800623c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d045      	beq.n	8006206 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800617a:	4b2c      	ldr	r3, [pc, #176]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f023 0219 	bic.w	r2, r3, #25
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	4929      	ldr	r1, [pc, #164]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618c:	f7fb ff78 	bl	8002080 <HAL_GetTick>
 8006190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006194:	f7fb ff74 	bl	8002080 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e307      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061a6:	4b21      	ldr	r3, [pc, #132]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f0      	beq.n	8006194 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b2:	f7fb ff95 	bl	80020e0 <HAL_GetREVID>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80061bc:	4293      	cmp	r3, r2
 80061be:	d817      	bhi.n	80061f0 <HAL_RCC_OscConfig+0x24c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b40      	cmp	r3, #64	; 0x40
 80061c6:	d108      	bne.n	80061da <HAL_RCC_OscConfig+0x236>
 80061c8:	4b18      	ldr	r3, [pc, #96]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061d0:	4a16      	ldr	r2, [pc, #88]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80061d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061d6:	6053      	str	r3, [r2, #4]
 80061d8:	e030      	b.n	800623c <HAL_RCC_OscConfig+0x298>
 80061da:	4b14      	ldr	r3, [pc, #80]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	031b      	lsls	r3, r3, #12
 80061e8:	4910      	ldr	r1, [pc, #64]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	604b      	str	r3, [r1, #4]
 80061ee:	e025      	b.n	800623c <HAL_RCC_OscConfig+0x298>
 80061f0:	4b0e      	ldr	r3, [pc, #56]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	061b      	lsls	r3, r3, #24
 80061fe:	490b      	ldr	r1, [pc, #44]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006200:	4313      	orrs	r3, r2
 8006202:	604b      	str	r3, [r1, #4]
 8006204:	e01a      	b.n	800623c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006206:	4b09      	ldr	r3, [pc, #36]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a08      	ldr	r2, [pc, #32]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006212:	f7fb ff35 	bl	8002080 <HAL_GetTick>
 8006216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006218:	e00a      	b.n	8006230 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800621a:	f7fb ff31 	bl	8002080 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d903      	bls.n	8006230 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e2c4      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
 800622c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006230:	4ba4      	ldr	r3, [pc, #656]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1ee      	bne.n	800621a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80a9 	beq.w	800639c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800624a:	4b9e      	ldr	r3, [pc, #632]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006252:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006254:	4b9b      	ldr	r3, [pc, #620]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2b08      	cmp	r3, #8
 800625e:	d007      	beq.n	8006270 <HAL_RCC_OscConfig+0x2cc>
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b18      	cmp	r3, #24
 8006264:	d13a      	bne.n	80062dc <HAL_RCC_OscConfig+0x338>
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	2b01      	cmp	r3, #1
 800626e:	d135      	bne.n	80062dc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006270:	4b94      	ldr	r3, [pc, #592]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_RCC_OscConfig+0x2e4>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	2b80      	cmp	r3, #128	; 0x80
 8006282:	d001      	beq.n	8006288 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e296      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006288:	f7fb ff2a 	bl	80020e0 <HAL_GetREVID>
 800628c:	4603      	mov	r3, r0
 800628e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006292:	4293      	cmp	r3, r2
 8006294:	d817      	bhi.n	80062c6 <HAL_RCC_OscConfig+0x322>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	2b20      	cmp	r3, #32
 800629c:	d108      	bne.n	80062b0 <HAL_RCC_OscConfig+0x30c>
 800629e:	4b89      	ldr	r3, [pc, #548]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80062a6:	4a87      	ldr	r2, [pc, #540]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80062a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062ae:	e075      	b.n	800639c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062b0:	4b84      	ldr	r3, [pc, #528]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	069b      	lsls	r3, r3, #26
 80062be:	4981      	ldr	r1, [pc, #516]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062c4:	e06a      	b.n	800639c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062c6:	4b7f      	ldr	r3, [pc, #508]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	061b      	lsls	r3, r3, #24
 80062d4:	497b      	ldr	r1, [pc, #492]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062da:	e05f      	b.n	800639c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d042      	beq.n	800636a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062e4:	4b77      	ldr	r3, [pc, #476]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a76      	ldr	r2, [pc, #472]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80062ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7fb fec6 	bl	8002080 <HAL_GetTick>
 80062f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80062f8:	f7fb fec2 	bl	8002080 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e255      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800630a:	4b6e      	ldr	r3, [pc, #440]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f0      	beq.n	80062f8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006316:	f7fb fee3 	bl	80020e0 <HAL_GetREVID>
 800631a:	4603      	mov	r3, r0
 800631c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006320:	4293      	cmp	r3, r2
 8006322:	d817      	bhi.n	8006354 <HAL_RCC_OscConfig+0x3b0>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	2b20      	cmp	r3, #32
 800632a:	d108      	bne.n	800633e <HAL_RCC_OscConfig+0x39a>
 800632c:	4b65      	ldr	r3, [pc, #404]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006334:	4a63      	ldr	r2, [pc, #396]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006336:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800633a:	6053      	str	r3, [r2, #4]
 800633c:	e02e      	b.n	800639c <HAL_RCC_OscConfig+0x3f8>
 800633e:	4b61      	ldr	r3, [pc, #388]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	069b      	lsls	r3, r3, #26
 800634c:	495d      	ldr	r1, [pc, #372]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 800634e:	4313      	orrs	r3, r2
 8006350:	604b      	str	r3, [r1, #4]
 8006352:	e023      	b.n	800639c <HAL_RCC_OscConfig+0x3f8>
 8006354:	4b5b      	ldr	r3, [pc, #364]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	061b      	lsls	r3, r3, #24
 8006362:	4958      	ldr	r1, [pc, #352]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006364:	4313      	orrs	r3, r2
 8006366:	60cb      	str	r3, [r1, #12]
 8006368:	e018      	b.n	800639c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800636a:	4b56      	ldr	r3, [pc, #344]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a55      	ldr	r2, [pc, #340]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006376:	f7fb fe83 	bl	8002080 <HAL_GetTick>
 800637a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800637e:	f7fb fe7f 	bl	8002080 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e212      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006390:	4b4c      	ldr	r3, [pc, #304]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f0      	bne.n	800637e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d036      	beq.n	8006416 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d019      	beq.n	80063e4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b0:	4b44      	ldr	r3, [pc, #272]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80063b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b4:	4a43      	ldr	r2, [pc, #268]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063bc:	f7fb fe60 	bl	8002080 <HAL_GetTick>
 80063c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063c4:	f7fb fe5c 	bl	8002080 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e1ef      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063d6:	4b3b      	ldr	r3, [pc, #236]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80063d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x420>
 80063e2:	e018      	b.n	8006416 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e4:	4b37      	ldr	r3, [pc, #220]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80063e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e8:	4a36      	ldr	r2, [pc, #216]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7fb fe46 	bl	8002080 <HAL_GetTick>
 80063f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f8:	f7fb fe42 	bl	8002080 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e1d5      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800640a:	4b2e      	ldr	r3, [pc, #184]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 800640c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d036      	beq.n	8006490 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d019      	beq.n	800645e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800642a:	4b26      	ldr	r3, [pc, #152]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a25      	ldr	r2, [pc, #148]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006430:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006434:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006436:	f7fb fe23 	bl	8002080 <HAL_GetTick>
 800643a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800643e:	f7fb fe1f 	bl	8002080 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e1b2      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006450:	4b1c      	ldr	r3, [pc, #112]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x49a>
 800645c:	e018      	b.n	8006490 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800645e:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a18      	ldr	r2, [pc, #96]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006468:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800646a:	f7fb fe09 	bl	8002080 <HAL_GetTick>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006472:	f7fb fe05 	bl	8002080 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e198      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <HAL_RCC_OscConfig+0x520>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1f0      	bne.n	8006472 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8085 	beq.w	80065a8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <HAL_RCC_OscConfig+0x524>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <HAL_RCC_OscConfig+0x524>)
 80064a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064aa:	f7fb fde9 	bl	8002080 <HAL_GetTick>
 80064ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064b0:	e00c      	b.n	80064cc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064b2:	f7fb fde5 	bl	8002080 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b64      	cmp	r3, #100	; 0x64
 80064be:	d905      	bls.n	80064cc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e178      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
 80064c4:	58024400 	.word	0x58024400
 80064c8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064cc:	4b96      	ldr	r3, [pc, #600]	; (8006728 <HAL_RCC_OscConfig+0x784>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0ec      	beq.n	80064b2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d106      	bne.n	80064ee <HAL_RCC_OscConfig+0x54a>
 80064e0:	4b92      	ldr	r3, [pc, #584]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80064e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e4:	4a91      	ldr	r2, [pc, #580]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	6713      	str	r3, [r2, #112]	; 0x70
 80064ec:	e02d      	b.n	800654a <HAL_RCC_OscConfig+0x5a6>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10c      	bne.n	8006510 <HAL_RCC_OscConfig+0x56c>
 80064f6:	4b8d      	ldr	r3, [pc, #564]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fa:	4a8c      	ldr	r2, [pc, #560]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80064fc:	f023 0301 	bic.w	r3, r3, #1
 8006500:	6713      	str	r3, [r2, #112]	; 0x70
 8006502:	4b8a      	ldr	r3, [pc, #552]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006506:	4a89      	ldr	r2, [pc, #548]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006508:	f023 0304 	bic.w	r3, r3, #4
 800650c:	6713      	str	r3, [r2, #112]	; 0x70
 800650e:	e01c      	b.n	800654a <HAL_RCC_OscConfig+0x5a6>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b05      	cmp	r3, #5
 8006516:	d10c      	bne.n	8006532 <HAL_RCC_OscConfig+0x58e>
 8006518:	4b84      	ldr	r3, [pc, #528]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	4a83      	ldr	r2, [pc, #524]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	6713      	str	r3, [r2, #112]	; 0x70
 8006524:	4b81      	ldr	r3, [pc, #516]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006528:	4a80      	ldr	r2, [pc, #512]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	6713      	str	r3, [r2, #112]	; 0x70
 8006530:	e00b      	b.n	800654a <HAL_RCC_OscConfig+0x5a6>
 8006532:	4b7e      	ldr	r3, [pc, #504]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006536:	4a7d      	ldr	r2, [pc, #500]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	6713      	str	r3, [r2, #112]	; 0x70
 800653e:	4b7b      	ldr	r3, [pc, #492]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	4a7a      	ldr	r2, [pc, #488]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006544:	f023 0304 	bic.w	r3, r3, #4
 8006548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d015      	beq.n	800657e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006552:	f7fb fd95 	bl	8002080 <HAL_GetTick>
 8006556:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006558:	e00a      	b.n	8006570 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800655a:	f7fb fd91 	bl	8002080 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	f241 3288 	movw	r2, #5000	; 0x1388
 8006568:	4293      	cmp	r3, r2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e122      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006570:	4b6e      	ldr	r3, [pc, #440]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0ee      	beq.n	800655a <HAL_RCC_OscConfig+0x5b6>
 800657c:	e014      	b.n	80065a8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657e:	f7fb fd7f 	bl	8002080 <HAL_GetTick>
 8006582:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006584:	e00a      	b.n	800659c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006586:	f7fb fd7b 	bl	8002080 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	f241 3288 	movw	r2, #5000	; 0x1388
 8006594:	4293      	cmp	r3, r2
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e10c      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800659c:	4b63      	ldr	r3, [pc, #396]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800659e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1ee      	bne.n	8006586 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8101 	beq.w	80067b4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065b2:	4b5e      	ldr	r3, [pc, #376]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ba:	2b18      	cmp	r3, #24
 80065bc:	f000 80bc 	beq.w	8006738 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	f040 8095 	bne.w	80066f4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ca:	4b58      	ldr	r3, [pc, #352]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a57      	ldr	r2, [pc, #348]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80065d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d6:	f7fb fd53 	bl	8002080 <HAL_GetTick>
 80065da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065dc:	e008      	b.n	80065f0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065de:	f7fb fd4f 	bl	8002080 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e0e2      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065f0:	4b4e      	ldr	r3, [pc, #312]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f0      	bne.n	80065de <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065fc:	4b4b      	ldr	r3, [pc, #300]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80065fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006600:	4b4b      	ldr	r3, [pc, #300]	; (8006730 <HAL_RCC_OscConfig+0x78c>)
 8006602:	4013      	ands	r3, r2
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800660c:	0112      	lsls	r2, r2, #4
 800660e:	430a      	orrs	r2, r1
 8006610:	4946      	ldr	r1, [pc, #280]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006612:	4313      	orrs	r3, r2
 8006614:	628b      	str	r3, [r1, #40]	; 0x28
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	3b01      	subs	r3, #1
 800661c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006624:	3b01      	subs	r3, #1
 8006626:	025b      	lsls	r3, r3, #9
 8006628:	b29b      	uxth	r3, r3
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	3b01      	subs	r3, #1
 8006632:	041b      	lsls	r3, r3, #16
 8006634:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663e:	3b01      	subs	r3, #1
 8006640:	061b      	lsls	r3, r3, #24
 8006642:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006646:	4939      	ldr	r1, [pc, #228]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006648:	4313      	orrs	r3, r2
 800664a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800664c:	4b37      	ldr	r3, [pc, #220]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	4a36      	ldr	r2, [pc, #216]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006652:	f023 0301 	bic.w	r3, r3, #1
 8006656:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006658:	4b34      	ldr	r3, [pc, #208]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800665a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800665c:	4b35      	ldr	r3, [pc, #212]	; (8006734 <HAL_RCC_OscConfig+0x790>)
 800665e:	4013      	ands	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006664:	00d2      	lsls	r2, r2, #3
 8006666:	4931      	ldr	r1, [pc, #196]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006668:	4313      	orrs	r3, r2
 800666a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800666c:	4b2f      	ldr	r3, [pc, #188]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	f023 020c 	bic.w	r2, r3, #12
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	492c      	ldr	r1, [pc, #176]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800667a:	4313      	orrs	r3, r2
 800667c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800667e:	4b2b      	ldr	r3, [pc, #172]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	f023 0202 	bic.w	r2, r3, #2
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	4928      	ldr	r1, [pc, #160]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800668c:	4313      	orrs	r3, r2
 800668e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006690:	4b26      	ldr	r3, [pc, #152]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	4a25      	ldr	r2, [pc, #148]	; (800672c <HAL_RCC_OscConfig+0x788>)
 8006696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800669c:	4b23      	ldr	r3, [pc, #140]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	4a22      	ldr	r2, [pc, #136]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80066a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80066a8:	4b20      	ldr	r3, [pc, #128]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	4a1f      	ldr	r2, [pc, #124]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80066ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80066b4:	4b1d      	ldr	r3, [pc, #116]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	4a1c      	ldr	r2, [pc, #112]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c0:	4b1a      	ldr	r3, [pc, #104]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a19      	ldr	r2, [pc, #100]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80066c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fb fcd8 	bl	8002080 <HAL_GetTick>
 80066d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d4:	f7fb fcd4 	bl	8002080 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e067      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066e6:	4b11      	ldr	r3, [pc, #68]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0x730>
 80066f2:	e05f      	b.n	80067b4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f4:	4b0d      	ldr	r3, [pc, #52]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a0c      	ldr	r2, [pc, #48]	; (800672c <HAL_RCC_OscConfig+0x788>)
 80066fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fb fcbe 	bl	8002080 <HAL_GetTick>
 8006704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006708:	f7fb fcba 	bl	8002080 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e04d      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800671a:	4b04      	ldr	r3, [pc, #16]	; (800672c <HAL_RCC_OscConfig+0x788>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f0      	bne.n	8006708 <HAL_RCC_OscConfig+0x764>
 8006726:	e045      	b.n	80067b4 <HAL_RCC_OscConfig+0x810>
 8006728:	58024800 	.word	0x58024800
 800672c:	58024400 	.word	0x58024400
 8006730:	fffffc0c 	.word	0xfffffc0c
 8006734:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006738:	4b21      	ldr	r3, [pc, #132]	; (80067c0 <HAL_RCC_OscConfig+0x81c>)
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800673e:	4b20      	ldr	r3, [pc, #128]	; (80067c0 <HAL_RCC_OscConfig+0x81c>)
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	2b01      	cmp	r3, #1
 800674a:	d031      	beq.n	80067b0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f003 0203 	and.w	r2, r3, #3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006756:	429a      	cmp	r2, r3
 8006758:	d12a      	bne.n	80067b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	091b      	lsrs	r3, r3, #4
 800675e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006766:	429a      	cmp	r2, r3
 8006768:	d122      	bne.n	80067b0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006776:	429a      	cmp	r2, r3
 8006778:	d11a      	bne.n	80067b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	0a5b      	lsrs	r3, r3, #9
 800677e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006786:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006788:	429a      	cmp	r2, r3
 800678a:	d111      	bne.n	80067b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	0c1b      	lsrs	r3, r3, #16
 8006790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006798:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800679a:	429a      	cmp	r2, r3
 800679c:	d108      	bne.n	80067b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	0e1b      	lsrs	r3, r3, #24
 80067a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d001      	beq.n	80067b4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3730      	adds	r7, #48	; 0x30
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	58024400 	.word	0x58024400

080067c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e19c      	b.n	8006b12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067d8:	4b8a      	ldr	r3, [pc, #552]	; (8006a04 <HAL_RCC_ClockConfig+0x240>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d910      	bls.n	8006808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e6:	4b87      	ldr	r3, [pc, #540]	; (8006a04 <HAL_RCC_ClockConfig+0x240>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f023 020f 	bic.w	r2, r3, #15
 80067ee:	4985      	ldr	r1, [pc, #532]	; (8006a04 <HAL_RCC_ClockConfig+0x240>)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f6:	4b83      	ldr	r3, [pc, #524]	; (8006a04 <HAL_RCC_ClockConfig+0x240>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d001      	beq.n	8006808 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e184      	b.n	8006b12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d010      	beq.n	8006836 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	4b7b      	ldr	r3, [pc, #492]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006820:	429a      	cmp	r2, r3
 8006822:	d908      	bls.n	8006836 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006824:	4b78      	ldr	r3, [pc, #480]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	4975      	ldr	r1, [pc, #468]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006832:	4313      	orrs	r3, r2
 8006834:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d010      	beq.n	8006864 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695a      	ldr	r2, [r3, #20]
 8006846:	4b70      	ldr	r3, [pc, #448]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800684e:	429a      	cmp	r2, r3
 8006850:	d908      	bls.n	8006864 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006852:	4b6d      	ldr	r3, [pc, #436]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	496a      	ldr	r1, [pc, #424]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006860:	4313      	orrs	r3, r2
 8006862:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	d010      	beq.n	8006892 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	4b64      	ldr	r3, [pc, #400]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800687c:	429a      	cmp	r2, r3
 800687e:	d908      	bls.n	8006892 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006880:	4b61      	ldr	r3, [pc, #388]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	495e      	ldr	r1, [pc, #376]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 800688e:	4313      	orrs	r3, r2
 8006890:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d010      	beq.n	80068c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69da      	ldr	r2, [r3, #28]
 80068a2:	4b59      	ldr	r3, [pc, #356]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d908      	bls.n	80068c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068ae:	4b56      	ldr	r3, [pc, #344]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	4953      	ldr	r1, [pc, #332]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d010      	beq.n	80068ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	4b4d      	ldr	r3, [pc, #308]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	429a      	cmp	r2, r3
 80068da:	d908      	bls.n	80068ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068dc:	4b4a      	ldr	r3, [pc, #296]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	f023 020f 	bic.w	r2, r3, #15
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	4947      	ldr	r1, [pc, #284]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d055      	beq.n	80069a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80068fa:	4b43      	ldr	r3, [pc, #268]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	4940      	ldr	r1, [pc, #256]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006908:	4313      	orrs	r3, r2
 800690a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d107      	bne.n	8006924 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006914:	4b3c      	ldr	r3, [pc, #240]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d121      	bne.n	8006964 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0f6      	b.n	8006b12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d107      	bne.n	800693c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800692c:	4b36      	ldr	r3, [pc, #216]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d115      	bne.n	8006964 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e0ea      	b.n	8006b12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d107      	bne.n	8006954 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006944:	4b30      	ldr	r3, [pc, #192]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694c:	2b00      	cmp	r3, #0
 800694e:	d109      	bne.n	8006964 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e0de      	b.n	8006b12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006954:	4b2c      	ldr	r3, [pc, #176]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0d6      	b.n	8006b12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006964:	4b28      	ldr	r3, [pc, #160]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f023 0207 	bic.w	r2, r3, #7
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4925      	ldr	r1, [pc, #148]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006972:	4313      	orrs	r3, r2
 8006974:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006976:	f7fb fb83 	bl	8002080 <HAL_GetTick>
 800697a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800697c:	e00a      	b.n	8006994 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800697e:	f7fb fb7f 	bl	8002080 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	f241 3288 	movw	r2, #5000	; 0x1388
 800698c:	4293      	cmp	r3, r2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e0be      	b.n	8006b12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006994:	4b1c      	ldr	r3, [pc, #112]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d1eb      	bne.n	800697e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d010      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	429a      	cmp	r2, r3
 80069c0:	d208      	bcs.n	80069d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069c2:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f023 020f 	bic.w	r2, r3, #15
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	490e      	ldr	r1, [pc, #56]	; (8006a08 <HAL_RCC_ClockConfig+0x244>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069d4:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <HAL_RCC_ClockConfig+0x240>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d214      	bcs.n	8006a0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e2:	4b08      	ldr	r3, [pc, #32]	; (8006a04 <HAL_RCC_ClockConfig+0x240>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 020f 	bic.w	r2, r3, #15
 80069ea:	4906      	ldr	r1, [pc, #24]	; (8006a04 <HAL_RCC_ClockConfig+0x240>)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f2:	4b04      	ldr	r3, [pc, #16]	; (8006a04 <HAL_RCC_ClockConfig+0x240>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d005      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e086      	b.n	8006b12 <HAL_RCC_ClockConfig+0x34e>
 8006a04:	52002000 	.word	0x52002000
 8006a08:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d010      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	4b3f      	ldr	r3, [pc, #252]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d208      	bcs.n	8006a3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a28:	4b3c      	ldr	r3, [pc, #240]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	4939      	ldr	r1, [pc, #228]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d010      	beq.n	8006a68 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695a      	ldr	r2, [r3, #20]
 8006a4a:	4b34      	ldr	r3, [pc, #208]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d208      	bcs.n	8006a68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a56:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	492e      	ldr	r1, [pc, #184]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d010      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699a      	ldr	r2, [r3, #24]
 8006a78:	4b28      	ldr	r3, [pc, #160]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d208      	bcs.n	8006a96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	4922      	ldr	r1, [pc, #136]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d010      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69da      	ldr	r2, [r3, #28]
 8006aa6:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d208      	bcs.n	8006ac4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006ab2:	4b1a      	ldr	r3, [pc, #104]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	4917      	ldr	r1, [pc, #92]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ac4:	f000 f834 	bl	8006b30 <HAL_RCC_GetSysClockFreq>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	0a1b      	lsrs	r3, r3, #8
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	4912      	ldr	r1, [pc, #72]	; (8006b20 <HAL_RCC_ClockConfig+0x35c>)
 8006ad6:	5ccb      	ldrb	r3, [r1, r3]
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <HAL_RCC_ClockConfig+0x358>)
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	4a0d      	ldr	r2, [pc, #52]	; (8006b20 <HAL_RCC_ClockConfig+0x35c>)
 8006aec:	5cd3      	ldrb	r3, [r2, r3]
 8006aee:	f003 031f 	and.w	r3, r3, #31
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
 8006af8:	4a0a      	ldr	r2, [pc, #40]	; (8006b24 <HAL_RCC_ClockConfig+0x360>)
 8006afa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006afc:	4a0a      	ldr	r2, [pc, #40]	; (8006b28 <HAL_RCC_ClockConfig+0x364>)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006b02:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <HAL_RCC_ClockConfig+0x368>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fb fa70 	bl	8001fec <HAL_InitTick>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	58024400 	.word	0x58024400
 8006b20:	0800d24c 	.word	0x0800d24c
 8006b24:	24000004 	.word	0x24000004
 8006b28:	24000000 	.word	0x24000000
 8006b2c:	24011394 	.word	0x24011394

08006b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b089      	sub	sp, #36	; 0x24
 8006b34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b36:	4bb3      	ldr	r3, [pc, #716]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b3e:	2b18      	cmp	r3, #24
 8006b40:	f200 8155 	bhi.w	8006dee <HAL_RCC_GetSysClockFreq+0x2be>
 8006b44:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4a:	bf00      	nop
 8006b4c:	08006bb1 	.word	0x08006bb1
 8006b50:	08006def 	.word	0x08006def
 8006b54:	08006def 	.word	0x08006def
 8006b58:	08006def 	.word	0x08006def
 8006b5c:	08006def 	.word	0x08006def
 8006b60:	08006def 	.word	0x08006def
 8006b64:	08006def 	.word	0x08006def
 8006b68:	08006def 	.word	0x08006def
 8006b6c:	08006bd7 	.word	0x08006bd7
 8006b70:	08006def 	.word	0x08006def
 8006b74:	08006def 	.word	0x08006def
 8006b78:	08006def 	.word	0x08006def
 8006b7c:	08006def 	.word	0x08006def
 8006b80:	08006def 	.word	0x08006def
 8006b84:	08006def 	.word	0x08006def
 8006b88:	08006def 	.word	0x08006def
 8006b8c:	08006bdd 	.word	0x08006bdd
 8006b90:	08006def 	.word	0x08006def
 8006b94:	08006def 	.word	0x08006def
 8006b98:	08006def 	.word	0x08006def
 8006b9c:	08006def 	.word	0x08006def
 8006ba0:	08006def 	.word	0x08006def
 8006ba4:	08006def 	.word	0x08006def
 8006ba8:	08006def 	.word	0x08006def
 8006bac:	08006be3 	.word	0x08006be3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bb0:	4b94      	ldr	r3, [pc, #592]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bbc:	4b91      	ldr	r3, [pc, #580]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	08db      	lsrs	r3, r3, #3
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	4a90      	ldr	r2, [pc, #576]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006bce:	e111      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bd0:	4b8d      	ldr	r3, [pc, #564]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bd2:	61bb      	str	r3, [r7, #24]
    break;
 8006bd4:	e10e      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006bd6:	4b8d      	ldr	r3, [pc, #564]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006bd8:	61bb      	str	r3, [r7, #24]
    break;
 8006bda:	e10b      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006bdc:	4b8c      	ldr	r3, [pc, #560]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006bde:	61bb      	str	r3, [r7, #24]
    break;
 8006be0:	e108      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006be2:	4b88      	ldr	r3, [pc, #544]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006bec:	4b85      	ldr	r3, [pc, #532]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	091b      	lsrs	r3, r3, #4
 8006bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bf6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006bf8:	4b82      	ldr	r3, [pc, #520]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006c02:	4b80      	ldr	r3, [pc, #512]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c06:	08db      	lsrs	r3, r3, #3
 8006c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	fb02 f303 	mul.w	r3, r2, r3
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 80e1 	beq.w	8006de8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	f000 8083 	beq.w	8006d34 <HAL_RCC_GetSysClockFreq+0x204>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	f200 80a1 	bhi.w	8006d78 <HAL_RCC_GetSysClockFreq+0x248>
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_RCC_GetSysClockFreq+0x114>
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d056      	beq.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c42:	e099      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c44:	4b6f      	ldr	r3, [pc, #444]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0320 	and.w	r3, r3, #32
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d02d      	beq.n	8006cac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c50:	4b6c      	ldr	r3, [pc, #432]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	08db      	lsrs	r3, r3, #3
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	4a6b      	ldr	r2, [pc, #428]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c60:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	ee07 3a90 	vmov	s15, r3
 8006c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c7a:	4b62      	ldr	r3, [pc, #392]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006caa:	e087      	b.n	8006dbc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006e18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cbe:	4b51      	ldr	r3, [pc, #324]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cd2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cee:	e065      	b.n	8006dbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006e1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d02:	4b40      	ldr	r3, [pc, #256]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d32:	e043      	b.n	8006dbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006e20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d46:	4b2f      	ldr	r3, [pc, #188]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d76:	e021      	b.n	8006dbc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006e1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d8a:	4b1e      	ldr	r3, [pc, #120]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006dbc:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	0a5b      	lsrs	r3, r3, #9
 8006dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	ee07 3a90 	vmov	s15, r3
 8006dd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de0:	ee17 3a90 	vmov	r3, s15
 8006de4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006de6:	e005      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	61bb      	str	r3, [r7, #24]
    break;
 8006dec:	e002      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006df0:	61bb      	str	r3, [r7, #24]
    break;
 8006df2:	bf00      	nop
  }

  return sysclockfreq;
 8006df4:	69bb      	ldr	r3, [r7, #24]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3724      	adds	r7, #36	; 0x24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	58024400 	.word	0x58024400
 8006e08:	03d09000 	.word	0x03d09000
 8006e0c:	003d0900 	.word	0x003d0900
 8006e10:	007a1200 	.word	0x007a1200
 8006e14:	46000000 	.word	0x46000000
 8006e18:	4c742400 	.word	0x4c742400
 8006e1c:	4a742400 	.word	0x4a742400
 8006e20:	4af42400 	.word	0x4af42400

08006e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e2a:	f7ff fe81 	bl	8006b30 <HAL_RCC_GetSysClockFreq>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	0a1b      	lsrs	r3, r3, #8
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	490f      	ldr	r1, [pc, #60]	; (8006e78 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e3c:	5ccb      	ldrb	r3, [r1, r3]
 8006e3e:	f003 031f 	and.w	r3, r3, #31
 8006e42:	fa22 f303 	lsr.w	r3, r2, r3
 8006e46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	4a09      	ldr	r2, [pc, #36]	; (8006e78 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e52:	5cd3      	ldrb	r3, [r2, r3]
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5e:	4a07      	ldr	r2, [pc, #28]	; (8006e7c <HAL_RCC_GetHCLKFreq+0x58>)
 8006e60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e62:	4a07      	ldr	r2, [pc, #28]	; (8006e80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e68:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <HAL_RCC_GetHCLKFreq+0x58>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	58024400 	.word	0x58024400
 8006e78:	0800d24c 	.word	0x0800d24c
 8006e7c:	24000004 	.word	0x24000004
 8006e80:	24000000 	.word	0x24000000

08006e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e88:	f7ff ffcc 	bl	8006e24 <HAL_RCC_GetHCLKFreq>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	091b      	lsrs	r3, r3, #4
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	4904      	ldr	r1, [pc, #16]	; (8006eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	58024400 	.word	0x58024400
 8006eac:	0800d24c 	.word	0x0800d24c

08006eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006eb4:	f7ff ffb6 	bl	8006e24 <HAL_RCC_GetHCLKFreq>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	f003 0307 	and.w	r3, r3, #7
 8006ec4:	4904      	ldr	r1, [pc, #16]	; (8006ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ec6:	5ccb      	ldrb	r3, [r1, r3]
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	0800d24c 	.word	0x0800d24c

08006edc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ee8:	2300      	movs	r3, #0
 8006eea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d03f      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006efc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f00:	d02a      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f06:	d824      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f0c:	d018      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f12:	d81e      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1c:	d007      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f1e:	e018      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f20:	4bab      	ldr	r3, [pc, #684]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	4aaa      	ldr	r2, [pc, #680]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f2c:	e015      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3304      	adds	r3, #4
 8006f32:	2102      	movs	r1, #2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f9cf 	bl	80082d8 <RCCEx_PLL2_Config>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f3e:	e00c      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3324      	adds	r3, #36	; 0x24
 8006f44:	2102      	movs	r1, #2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f001 fa78 	bl	800843c <RCCEx_PLL3_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f50:	e003      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	75fb      	strb	r3, [r7, #23]
      break;
 8006f56:	e000      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d109      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f60:	4b9b      	ldr	r3, [pc, #620]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f6c:	4998      	ldr	r1, [pc, #608]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	650b      	str	r3, [r1, #80]	; 0x50
 8006f72:	e001      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d03d      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d826      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006f8c:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fa9 	.word	0x08006fa9
 8006f98:	08006fb7 	.word	0x08006fb7
 8006f9c:	08006fc9 	.word	0x08006fc9
 8006fa0:	08006fe1 	.word	0x08006fe1
 8006fa4:	08006fe1 	.word	0x08006fe1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fa8:	4b89      	ldr	r3, [pc, #548]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	4a88      	ldr	r2, [pc, #544]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fb4:	e015      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f001 f98b 	bl	80082d8 <RCCEx_PLL2_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc6:	e00c      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3324      	adds	r3, #36	; 0x24
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 fa34 	bl	800843c <RCCEx_PLL3_Config>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fd8:	e003      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8006fde:	e000      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fe8:	4b79      	ldr	r3, [pc, #484]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fec:	f023 0207 	bic.w	r2, r3, #7
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff4:	4976      	ldr	r1, [pc, #472]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	650b      	str	r3, [r1, #80]	; 0x50
 8006ffa:	e001      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007008:	2b00      	cmp	r3, #0
 800700a:	d042      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007014:	d02b      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701a:	d825      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800701c:	2bc0      	cmp	r3, #192	; 0xc0
 800701e:	d028      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007020:	2bc0      	cmp	r3, #192	; 0xc0
 8007022:	d821      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d016      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007028:	2b80      	cmp	r3, #128	; 0x80
 800702a:	d81d      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007030:	2b40      	cmp	r3, #64	; 0x40
 8007032:	d007      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007034:	e018      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007036:	4b66      	ldr	r3, [pc, #408]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	4a65      	ldr	r2, [pc, #404]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800703c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007040:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007042:	e017      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f001 f944 	bl	80082d8 <RCCEx_PLL2_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007054:	e00e      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3324      	adds	r3, #36	; 0x24
 800705a:	2100      	movs	r1, #0
 800705c:	4618      	mov	r0, r3
 800705e:	f001 f9ed 	bl	800843c <RCCEx_PLL3_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007066:	e005      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]
      break;
 800706c:	e002      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800706e:	bf00      	nop
 8007070:	e000      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800707a:	4b55      	ldr	r3, [pc, #340]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800707c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007086:	4952      	ldr	r1, [pc, #328]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007088:	4313      	orrs	r3, r2
 800708a:	650b      	str	r3, [r1, #80]	; 0x50
 800708c:	e001      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800709a:	2b00      	cmp	r3, #0
 800709c:	d049      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070a8:	d030      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80070aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ae:	d82a      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070b4:	d02c      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80070b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070ba:	d824      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070c0:	d018      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80070c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070c6:	d81e      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80070cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070d0:	d007      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80070d2:	e018      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d4:	4b3e      	ldr	r3, [pc, #248]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	4a3d      	ldr	r2, [pc, #244]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070e0:	e017      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3304      	adds	r3, #4
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 f8f5 	bl	80082d8 <RCCEx_PLL2_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070f2:	e00e      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3324      	adds	r3, #36	; 0x24
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 f99e 	bl	800843c <RCCEx_PLL3_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007104:	e005      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	75fb      	strb	r3, [r7, #23]
      break;
 800710a:	e002      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007118:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800711a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007126:	492a      	ldr	r1, [pc, #168]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007128:	4313      	orrs	r3, r2
 800712a:	658b      	str	r3, [r1, #88]	; 0x58
 800712c:	e001      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800713a:	2b00      	cmp	r3, #0
 800713c:	d04c      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007148:	d030      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800714a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800714e:	d82a      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007154:	d02c      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007156:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800715a:	d824      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800715c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007160:	d018      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007166:	d81e      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800716c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007170:	d007      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007172:	e018      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007174:	4b16      	ldr	r3, [pc, #88]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800717a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800717e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007180:	e017      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3304      	adds	r3, #4
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f001 f8a5 	bl	80082d8 <RCCEx_PLL2_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007192:	e00e      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3324      	adds	r3, #36	; 0x24
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f001 f94e 	bl	800843c <RCCEx_PLL3_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071a4:	e005      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]
      break;
 80071aa:	e002      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80071ac:	bf00      	nop
 80071ae:	e000      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80071b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10d      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071b8:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071c6:	4902      	ldr	r1, [pc, #8]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	658b      	str	r3, [r1, #88]	; 0x58
 80071cc:	e004      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80071ce:	bf00      	nop
 80071d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d032      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e8:	2b30      	cmp	r3, #48	; 0x30
 80071ea:	d01c      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80071ec:	2b30      	cmp	r3, #48	; 0x30
 80071ee:	d817      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80071f0:	2b20      	cmp	r3, #32
 80071f2:	d00c      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x332>
 80071f4:	2b20      	cmp	r3, #32
 80071f6:	d813      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d016      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d10f      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007200:	4baf      	ldr	r3, [pc, #700]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	4aae      	ldr	r2, [pc, #696]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800720a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800720c:	e00e      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3304      	adds	r3, #4
 8007212:	2102      	movs	r1, #2
 8007214:	4618      	mov	r0, r3
 8007216:	f001 f85f 	bl	80082d8 <RCCEx_PLL2_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800721e:	e005      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	75fb      	strb	r3, [r7, #23]
      break;
 8007224:	e002      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007226:	bf00      	nop
 8007228:	e000      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800722a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007232:	4ba3      	ldr	r3, [pc, #652]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723e:	49a0      	ldr	r1, [pc, #640]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007240:	4313      	orrs	r3, r2
 8007242:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007244:	e001      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d047      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800725a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800725e:	d030      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007264:	d82a      	bhi.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007266:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800726a:	d02c      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800726c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007270:	d824      	bhi.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007276:	d018      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800727c:	d81e      	bhi.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007286:	d007      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007288:	e018      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800728a:	4b8d      	ldr	r3, [pc, #564]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728e:	4a8c      	ldr	r2, [pc, #560]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007294:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007296:	e017      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3304      	adds	r3, #4
 800729c:	2100      	movs	r1, #0
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 f81a 	bl	80082d8 <RCCEx_PLL2_Config>
 80072a4:	4603      	mov	r3, r0
 80072a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072a8:	e00e      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3324      	adds	r3, #36	; 0x24
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 f8c3 	bl	800843c <RCCEx_PLL3_Config>
 80072b6:	4603      	mov	r3, r0
 80072b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072ba:	e005      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	75fb      	strb	r3, [r7, #23]
      break;
 80072c0:	e002      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80072c2:	bf00      	nop
 80072c4:	e000      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80072c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d109      	bne.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072ce:	4b7c      	ldr	r3, [pc, #496]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072da:	4979      	ldr	r1, [pc, #484]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	650b      	str	r3, [r1, #80]	; 0x50
 80072e0:	e001      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d049      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072fa:	d02e      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80072fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007300:	d828      	bhi.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007302:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007306:	d02a      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007308:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800730c:	d822      	bhi.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800730e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007312:	d026      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007314:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007318:	d81c      	bhi.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800731a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731e:	d010      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007324:	d816      	bhi.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01d      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800732a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732e:	d111      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	2101      	movs	r1, #1
 8007336:	4618      	mov	r0, r3
 8007338:	f000 ffce 	bl	80082d8 <RCCEx_PLL2_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007340:	e012      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3324      	adds	r3, #36	; 0x24
 8007346:	2101      	movs	r1, #1
 8007348:	4618      	mov	r0, r3
 800734a:	f001 f877 	bl	800843c <RCCEx_PLL3_Config>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007352:	e009      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	75fb      	strb	r3, [r7, #23]
      break;
 8007358:	e006      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800735a:	bf00      	nop
 800735c:	e004      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800735e:	bf00      	nop
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007362:	bf00      	nop
 8007364:	e000      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800736e:	4b54      	ldr	r3, [pc, #336]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007372:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800737a:	4951      	ldr	r1, [pc, #324]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800737c:	4313      	orrs	r3, r2
 800737e:	650b      	str	r3, [r1, #80]	; 0x50
 8007380:	e001      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d04b      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800739c:	d02e      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x520>
 800739e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073a2:	d828      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a8:	d02a      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80073aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ae:	d822      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073b4:	d026      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80073b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073ba:	d81c      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c0:	d010      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80073c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c6:	d816      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01d      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80073cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d0:	d111      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3304      	adds	r3, #4
 80073d6:	2101      	movs	r1, #1
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 ff7d 	bl	80082d8 <RCCEx_PLL2_Config>
 80073de:	4603      	mov	r3, r0
 80073e0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073e2:	e012      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3324      	adds	r3, #36	; 0x24
 80073e8:	2101      	movs	r1, #1
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 f826 	bl	800843c <RCCEx_PLL3_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073f4:	e009      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	75fb      	strb	r3, [r7, #23]
      break;
 80073fa:	e006      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80073fc:	bf00      	nop
 80073fe:	e004      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007400:	bf00      	nop
 8007402:	e002      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007404:	bf00      	nop
 8007406:	e000      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007410:	4b2b      	ldr	r3, [pc, #172]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800741e:	4928      	ldr	r1, [pc, #160]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007420:	4313      	orrs	r3, r2
 8007422:	658b      	str	r3, [r1, #88]	; 0x58
 8007424:	e001      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d02f      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800743a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800743e:	d00e      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007444:	d814      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d015      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800744a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800744e:	d10f      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007450:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	4a1a      	ldr	r2, [pc, #104]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800745a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800745c:	e00c      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3304      	adds	r3, #4
 8007462:	2101      	movs	r1, #1
 8007464:	4618      	mov	r0, r3
 8007466:	f000 ff37 	bl	80082d8 <RCCEx_PLL2_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800746e:	e003      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	75fb      	strb	r3, [r7, #23]
      break;
 8007474:	e000      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800747e:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007482:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800748a:	490d      	ldr	r1, [pc, #52]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800748c:	4313      	orrs	r3, r2
 800748e:	650b      	str	r3, [r1, #80]	; 0x50
 8007490:	e001      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d033      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d81c      	bhi.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074eb 	.word	0x080074eb
 80074b4:	080074c5 	.word	0x080074c5
 80074b8:	080074d3 	.word	0x080074d3
 80074bc:	080074eb 	.word	0x080074eb
 80074c0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c4:	4bb8      	ldr	r3, [pc, #736]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	4ab7      	ldr	r2, [pc, #732]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074d0:	e00c      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3304      	adds	r3, #4
 80074d6:	2102      	movs	r1, #2
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 fefd 	bl	80082d8 <RCCEx_PLL2_Config>
 80074de:	4603      	mov	r3, r0
 80074e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074e2:	e003      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]
      break;
 80074e8:	e000      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80074ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d109      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074f2:	4bad      	ldr	r3, [pc, #692]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f6:	f023 0203 	bic.w	r2, r3, #3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fe:	49aa      	ldr	r1, [pc, #680]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007500:	4313      	orrs	r3, r2
 8007502:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007504:	e001      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 8086 	beq.w	8007624 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007518:	4ba4      	ldr	r3, [pc, #656]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4aa3      	ldr	r2, [pc, #652]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800751e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007524:	f7fa fdac 	bl	8002080 <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800752a:	e009      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800752c:	f7fa fda8 	bl	8002080 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b64      	cmp	r3, #100	; 0x64
 8007538:	d902      	bls.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	75fb      	strb	r3, [r7, #23]
        break;
 800753e:	e005      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007540:	4b9a      	ldr	r3, [pc, #616]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007548:	2b00      	cmp	r3, #0
 800754a:	d0ef      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d166      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007552:	4b95      	ldr	r3, [pc, #596]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007554:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800755c:	4053      	eors	r3, r2
 800755e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007562:	2b00      	cmp	r3, #0
 8007564:	d013      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007566:	4b90      	ldr	r3, [pc, #576]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007570:	4b8d      	ldr	r3, [pc, #564]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007574:	4a8c      	ldr	r2, [pc, #560]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800757a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800757c:	4b8a      	ldr	r3, [pc, #552]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007580:	4a89      	ldr	r2, [pc, #548]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007586:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007588:	4a87      	ldr	r2, [pc, #540]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007598:	d115      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759a:	f7fa fd71 	bl	8002080 <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075a0:	e00b      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a2:	f7fa fd6d 	bl	8002080 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d902      	bls.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	75fb      	strb	r3, [r7, #23]
            break;
 80075b8:	e005      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075ba:	4b7b      	ldr	r3, [pc, #492]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0ed      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d126      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075da:	d10d      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80075dc:	4b72      	ldr	r3, [pc, #456]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075ea:	0919      	lsrs	r1, r3, #4
 80075ec:	4b70      	ldr	r3, [pc, #448]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80075ee:	400b      	ands	r3, r1
 80075f0:	496d      	ldr	r1, [pc, #436]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	610b      	str	r3, [r1, #16]
 80075f6:	e005      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80075f8:	4b6b      	ldr	r3, [pc, #428]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	4a6a      	ldr	r2, [pc, #424]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007602:	6113      	str	r3, [r2, #16]
 8007604:	4b68      	ldr	r3, [pc, #416]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007606:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800760e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007612:	4965      	ldr	r1, [pc, #404]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007614:	4313      	orrs	r3, r2
 8007616:	670b      	str	r3, [r1, #112]	; 0x70
 8007618:	e004      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	75bb      	strb	r3, [r7, #22]
 800761e:	e001      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	d07e      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007634:	2b28      	cmp	r3, #40	; 0x28
 8007636:	d867      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	0800770f 	.word	0x0800770f
 8007644:	08007709 	.word	0x08007709
 8007648:	08007709 	.word	0x08007709
 800764c:	08007709 	.word	0x08007709
 8007650:	08007709 	.word	0x08007709
 8007654:	08007709 	.word	0x08007709
 8007658:	08007709 	.word	0x08007709
 800765c:	08007709 	.word	0x08007709
 8007660:	080076e5 	.word	0x080076e5
 8007664:	08007709 	.word	0x08007709
 8007668:	08007709 	.word	0x08007709
 800766c:	08007709 	.word	0x08007709
 8007670:	08007709 	.word	0x08007709
 8007674:	08007709 	.word	0x08007709
 8007678:	08007709 	.word	0x08007709
 800767c:	08007709 	.word	0x08007709
 8007680:	080076f7 	.word	0x080076f7
 8007684:	08007709 	.word	0x08007709
 8007688:	08007709 	.word	0x08007709
 800768c:	08007709 	.word	0x08007709
 8007690:	08007709 	.word	0x08007709
 8007694:	08007709 	.word	0x08007709
 8007698:	08007709 	.word	0x08007709
 800769c:	08007709 	.word	0x08007709
 80076a0:	0800770f 	.word	0x0800770f
 80076a4:	08007709 	.word	0x08007709
 80076a8:	08007709 	.word	0x08007709
 80076ac:	08007709 	.word	0x08007709
 80076b0:	08007709 	.word	0x08007709
 80076b4:	08007709 	.word	0x08007709
 80076b8:	08007709 	.word	0x08007709
 80076bc:	08007709 	.word	0x08007709
 80076c0:	0800770f 	.word	0x0800770f
 80076c4:	08007709 	.word	0x08007709
 80076c8:	08007709 	.word	0x08007709
 80076cc:	08007709 	.word	0x08007709
 80076d0:	08007709 	.word	0x08007709
 80076d4:	08007709 	.word	0x08007709
 80076d8:	08007709 	.word	0x08007709
 80076dc:	08007709 	.word	0x08007709
 80076e0:	0800770f 	.word	0x0800770f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	2101      	movs	r1, #1
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fdf4 	bl	80082d8 <RCCEx_PLL2_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076f4:	e00c      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	2101      	movs	r1, #1
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fe9d 	bl	800843c <RCCEx_PLL3_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007706:	e003      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
      break;
 800770c:	e000      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800770e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007716:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007722:	4921      	ldr	r1, [pc, #132]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007724:	4313      	orrs	r3, r2
 8007726:	654b      	str	r3, [r1, #84]	; 0x54
 8007728:	e001      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d03e      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773e:	2b05      	cmp	r3, #5
 8007740:	d820      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007742:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	0800778b 	.word	0x0800778b
 800774c:	08007761 	.word	0x08007761
 8007750:	08007773 	.word	0x08007773
 8007754:	0800778b 	.word	0x0800778b
 8007758:	0800778b 	.word	0x0800778b
 800775c:	0800778b 	.word	0x0800778b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3304      	adds	r3, #4
 8007764:	2101      	movs	r1, #1
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fdb6 	bl	80082d8 <RCCEx_PLL2_Config>
 800776c:	4603      	mov	r3, r0
 800776e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007770:	e00c      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3324      	adds	r3, #36	; 0x24
 8007776:	2101      	movs	r1, #1
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fe5f 	bl	800843c <RCCEx_PLL3_Config>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007782:	e003      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	75fb      	strb	r3, [r7, #23]
      break;
 8007788:	e000      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800778a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d110      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007792:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007796:	f023 0207 	bic.w	r2, r3, #7
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779e:	4902      	ldr	r1, [pc, #8]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	654b      	str	r3, [r1, #84]	; 0x54
 80077a4:	e008      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80077a6:	bf00      	nop
 80077a8:	58024400 	.word	0x58024400
 80077ac:	58024800 	.word	0x58024800
 80077b0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d039      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d820      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80077ce:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	08007817 	.word	0x08007817
 80077d8:	080077ed 	.word	0x080077ed
 80077dc:	080077ff 	.word	0x080077ff
 80077e0:	08007817 	.word	0x08007817
 80077e4:	08007817 	.word	0x08007817
 80077e8:	08007817 	.word	0x08007817
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3304      	adds	r3, #4
 80077f0:	2101      	movs	r1, #1
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fd70 	bl	80082d8 <RCCEx_PLL2_Config>
 80077f8:	4603      	mov	r3, r0
 80077fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077fc:	e00c      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3324      	adds	r3, #36	; 0x24
 8007802:	2101      	movs	r1, #1
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fe19 	bl	800843c <RCCEx_PLL3_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800780e:	e003      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
      break;
 8007814:	e000      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10a      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800781e:	4bb7      	ldr	r3, [pc, #732]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007822:	f023 0207 	bic.w	r2, r3, #7
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782c:	49b3      	ldr	r1, [pc, #716]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800782e:	4313      	orrs	r3, r2
 8007830:	658b      	str	r3, [r1, #88]	; 0x58
 8007832:	e001      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b00      	cmp	r3, #0
 8007842:	d04b      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800784a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800784e:	d02e      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007854:	d828      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785a:	d02a      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800785c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007860:	d822      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007862:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007866:	d026      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800786c:	d81c      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800786e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007872:	d010      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007878:	d816      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d01d      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800787e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007882:	d111      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3304      	adds	r3, #4
 8007888:	2100      	movs	r1, #0
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fd24 	bl	80082d8 <RCCEx_PLL2_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007894:	e012      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3324      	adds	r3, #36	; 0x24
 800789a:	2102      	movs	r1, #2
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fdcd 	bl	800843c <RCCEx_PLL3_Config>
 80078a2:	4603      	mov	r3, r0
 80078a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078a6:	e009      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	75fb      	strb	r3, [r7, #23]
      break;
 80078ac:	e006      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078ae:	bf00      	nop
 80078b0:	e004      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078b2:	bf00      	nop
 80078b4:	e002      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078b6:	bf00      	nop
 80078b8:	e000      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80078ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10a      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078c2:	4b8e      	ldr	r3, [pc, #568]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d0:	498a      	ldr	r1, [pc, #552]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	654b      	str	r3, [r1, #84]	; 0x54
 80078d6:	e001      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d04b      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078f2:	d02e      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80078f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078f8:	d828      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80078fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fe:	d02a      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007904:	d822      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007906:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800790a:	d026      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800790c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007910:	d81c      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007916:	d010      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800791c:	d816      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01d      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007926:	d111      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3304      	adds	r3, #4
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fcd2 	bl	80082d8 <RCCEx_PLL2_Config>
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007938:	e012      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3324      	adds	r3, #36	; 0x24
 800793e:	2102      	movs	r1, #2
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fd7b 	bl	800843c <RCCEx_PLL3_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800794a:	e009      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
      break;
 8007950:	e006      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007952:	bf00      	nop
 8007954:	e004      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007956:	bf00      	nop
 8007958:	e002      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800795a:	bf00      	nop
 800795c:	e000      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800795e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10a      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007966:	4b65      	ldr	r3, [pc, #404]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007974:	4961      	ldr	r1, [pc, #388]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007976:	4313      	orrs	r3, r2
 8007978:	658b      	str	r3, [r1, #88]	; 0x58
 800797a:	e001      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007988:	2b00      	cmp	r3, #0
 800798a:	d04b      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007992:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007996:	d02e      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007998:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800799c:	d828      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800799e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a2:	d02a      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80079a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a8:	d822      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079ae:	d026      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80079b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079b4:	d81c      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079ba:	d010      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80079bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079c0:	d816      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01d      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80079c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ca:	d111      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3304      	adds	r3, #4
 80079d0:	2100      	movs	r1, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fc80 	bl	80082d8 <RCCEx_PLL2_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079dc:	e012      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3324      	adds	r3, #36	; 0x24
 80079e2:	2102      	movs	r1, #2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 fd29 	bl	800843c <RCCEx_PLL3_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079ee:	e009      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	75fb      	strb	r3, [r7, #23]
      break;
 80079f4:	e006      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079f6:	bf00      	nop
 80079f8:	e004      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079fa:	bf00      	nop
 80079fc:	e002      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80079fe:	bf00      	nop
 8007a00:	e000      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a0a:	4b3c      	ldr	r3, [pc, #240]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a18:	4938      	ldr	r1, [pc, #224]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8007a1e:	e001      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01a      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3a:	d10a      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3324      	adds	r3, #36	; 0x24
 8007a40:	2102      	movs	r1, #2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fcfa 	bl	800843c <RCCEx_PLL3_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a52:	4b2a      	ldr	r3, [pc, #168]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a60:	4926      	ldr	r1, [pc, #152]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0310 	and.w	r3, r3, #16
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01a      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7c:	d10a      	bne.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3324      	adds	r3, #36	; 0x24
 8007a82:	2102      	movs	r1, #2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fcd9 	bl	800843c <RCCEx_PLL3_Config>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a94:	4b19      	ldr	r3, [pc, #100]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aa2:	4916      	ldr	r1, [pc, #88]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d036      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007abe:	d01f      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ac4:	d817      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ace:	d009      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007ad0:	e011      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 fbfd 	bl	80082d8 <RCCEx_PLL2_Config>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ae2:	e00e      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3324      	adds	r3, #36	; 0x24
 8007ae8:	2102      	movs	r1, #2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fca6 	bl	800843c <RCCEx_PLL3_Config>
 8007af0:	4603      	mov	r3, r0
 8007af2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007af4:	e005      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]
      break;
 8007afa:	e002      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007afc:	58024400 	.word	0x58024400
      break;
 8007b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b08:	4b93      	ldr	r3, [pc, #588]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b16:	4990      	ldr	r1, [pc, #576]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	658b      	str	r3, [r1, #88]	; 0x58
 8007b1c:	e001      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d033      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b38:	d01c      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007b3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b3e:	d816      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b44:	d003      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b4a:	d007      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007b4c:	e00f      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4e:	4b82      	ldr	r3, [pc, #520]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	4a81      	ldr	r2, [pc, #516]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b5a:	e00c      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	2101      	movs	r1, #1
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fc6a 	bl	800843c <RCCEx_PLL3_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b6c:	e003      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	75fb      	strb	r3, [r7, #23]
      break;
 8007b72:	e000      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b7c:	4b76      	ldr	r3, [pc, #472]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8a:	4973      	ldr	r1, [pc, #460]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	654b      	str	r3, [r1, #84]	; 0x54
 8007b90:	e001      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d029      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bae:	d007      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007bb0:	e00f      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb2:	4b69      	ldr	r3, [pc, #420]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	4a68      	ldr	r2, [pc, #416]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bbe:	e00b      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	2102      	movs	r1, #2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fb86 	bl	80082d8 <RCCEx_PLL2_Config>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bd0:	e002      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bde:	4b5e      	ldr	r3, [pc, #376]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bea:	495b      	ldr	r1, [pc, #364]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007bf0:	e001      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00a      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3324      	adds	r3, #36	; 0x24
 8007c06:	2102      	movs	r1, #2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fc17 	bl	800843c <RCCEx_PLL3_Config>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d030      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c2c:	d017      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c32:	d811      	bhi.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c38:	d013      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3e:	d80b      	bhi.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d010      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c48:	d106      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c4a:	4b43      	ldr	r3, [pc, #268]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4e:	4a42      	ldr	r2, [pc, #264]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c56:	e007      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c5c:	e004      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c5e:	bf00      	nop
 8007c60:	e002      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c62:	bf00      	nop
 8007c64:	e000      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d109      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c6e:	4b3a      	ldr	r3, [pc, #232]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c7a:	4937      	ldr	r1, [pc, #220]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	654b      	str	r3, [r1, #84]	; 0x54
 8007c80:	e001      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d008      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c92:	4b31      	ldr	r3, [pc, #196]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9e:	492e      	ldr	r1, [pc, #184]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d009      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007cb0:	4b29      	ldr	r3, [pc, #164]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007cbe:	4926      	ldr	r1, [pc, #152]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d008      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cd0:	4b21      	ldr	r3, [pc, #132]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cdc:	491e      	ldr	r1, [pc, #120]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00d      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cee:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	4a19      	ldr	r2, [pc, #100]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cf8:	6113      	str	r3, [r2, #16]
 8007cfa:	4b17      	ldr	r3, [pc, #92]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007d04:	4914      	ldr	r1, [pc, #80]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	da08      	bge.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d1e:	490e      	ldr	r1, [pc, #56]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d009      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d30:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3e:	4906      	ldr	r1, [pc, #24]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007d44:	7dbb      	ldrb	r3, [r7, #22]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e000      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	58024400 	.word	0x58024400

08007d5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d60:	f7ff f860 	bl	8006e24 <HAL_RCC_GetHCLKFreq>
 8007d64:	4602      	mov	r2, r0
 8007d66:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	091b      	lsrs	r3, r3, #4
 8007d6c:	f003 0307 	and.w	r3, r3, #7
 8007d70:	4904      	ldr	r1, [pc, #16]	; (8007d84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d72:	5ccb      	ldrb	r3, [r1, r3]
 8007d74:	f003 031f 	and.w	r3, r3, #31
 8007d78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	58024400 	.word	0x58024400
 8007d84:	0800d24c 	.word	0x0800d24c

08007d88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b089      	sub	sp, #36	; 0x24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d90:	4ba1      	ldr	r3, [pc, #644]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	f003 0303 	and.w	r3, r3, #3
 8007d98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d9a:	4b9f      	ldr	r3, [pc, #636]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	0b1b      	lsrs	r3, r3, #12
 8007da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007da4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007da6:	4b9c      	ldr	r3, [pc, #624]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	091b      	lsrs	r3, r3, #4
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007db2:	4b99      	ldr	r3, [pc, #612]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db6:	08db      	lsrs	r3, r3, #3
 8007db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	fb02 f303 	mul.w	r3, r2, r3
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8111 	beq.w	8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	f000 8083 	beq.w	8007ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	f200 80a1 	bhi.w	8007f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d056      	beq.n	8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007df2:	e099      	b.n	8007f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007df4:	4b88      	ldr	r3, [pc, #544]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d02d      	beq.n	8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e00:	4b85      	ldr	r3, [pc, #532]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	08db      	lsrs	r3, r3, #3
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	4a84      	ldr	r2, [pc, #528]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e10:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	ee07 3a90 	vmov	s15, r3
 8007e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e2a:	4b7b      	ldr	r3, [pc, #492]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e5a:	e087      	b.n	8007f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6e:	4b6a      	ldr	r3, [pc, #424]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e76:	ee07 3a90 	vmov	s15, r3
 8007e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e9e:	e065      	b.n	8007f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eaa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eb2:	4b59      	ldr	r3, [pc, #356]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ec6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ee2:	e043      	b.n	8007f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800802c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ef6:	4b48      	ldr	r3, [pc, #288]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007efe:	ee07 3a90 	vmov	s15, r3
 8007f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f26:	e021      	b.n	8007f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f3a:	4b37      	ldr	r3, [pc, #220]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f6c:	4b2a      	ldr	r3, [pc, #168]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	0a5b      	lsrs	r3, r3, #9
 8007f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f92:	ee17 2a90 	vmov	r2, s15
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f9a:	4b1f      	ldr	r3, [pc, #124]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	0c1b      	lsrs	r3, r3, #16
 8007fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa4:	ee07 3a90 	vmov	s15, r3
 8007fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc0:	ee17 2a90 	vmov	r2, s15
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007fc8:	4b13      	ldr	r3, [pc, #76]	; (8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fcc:	0e1b      	lsrs	r3, r3, #24
 8007fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fe2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fee:	ee17 2a90 	vmov	r2, s15
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ff6:	e008      	b.n	800800a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	609a      	str	r2, [r3, #8]
}
 800800a:	bf00      	nop
 800800c:	3724      	adds	r7, #36	; 0x24
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	58024400 	.word	0x58024400
 800801c:	03d09000 	.word	0x03d09000
 8008020:	46000000 	.word	0x46000000
 8008024:	4c742400 	.word	0x4c742400
 8008028:	4a742400 	.word	0x4a742400
 800802c:	4af42400 	.word	0x4af42400

08008030 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008030:	b480      	push	{r7}
 8008032:	b089      	sub	sp, #36	; 0x24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008038:	4ba1      	ldr	r3, [pc, #644]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800803a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803c:	f003 0303 	and.w	r3, r3, #3
 8008040:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008042:	4b9f      	ldr	r3, [pc, #636]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008046:	0d1b      	lsrs	r3, r3, #20
 8008048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800804c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800804e:	4b9c      	ldr	r3, [pc, #624]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008052:	0a1b      	lsrs	r3, r3, #8
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800805a:	4b99      	ldr	r3, [pc, #612]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800805c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805e:	08db      	lsrs	r3, r3, #3
 8008060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	fb02 f303 	mul.w	r3, r2, r3
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008072:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 8111 	beq.w	80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b02      	cmp	r3, #2
 8008082:	f000 8083 	beq.w	800818c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	2b02      	cmp	r3, #2
 800808a:	f200 80a1 	bhi.w	80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d056      	beq.n	8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800809a:	e099      	b.n	80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800809c:	4b88      	ldr	r3, [pc, #544]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d02d      	beq.n	8008104 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080a8:	4b85      	ldr	r3, [pc, #532]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	08db      	lsrs	r3, r3, #3
 80080ae:	f003 0303 	and.w	r3, r3, #3
 80080b2:	4a84      	ldr	r2, [pc, #528]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080b4:	fa22 f303 	lsr.w	r3, r2, r3
 80080b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	ee07 3a90 	vmov	s15, r3
 80080c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	ee07 3a90 	vmov	s15, r3
 80080ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080d2:	4b7b      	ldr	r3, [pc, #492]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008102:	e087      	b.n	8008214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	ee07 3a90 	vmov	s15, r3
 800810a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008116:	4b6a      	ldr	r3, [pc, #424]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008126:	ed97 6a03 	vldr	s12, [r7, #12]
 800812a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800812e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800813a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008146:	e065      	b.n	8008214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008152:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815a:	4b59      	ldr	r3, [pc, #356]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008162:	ee07 3a90 	vmov	s15, r3
 8008166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800816a:	ed97 6a03 	vldr	s12, [r7, #12]
 800816e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800817a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800818a:	e043      	b.n	8008214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	ee07 3a90 	vmov	s15, r3
 8008192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008196:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800819a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819e:	4b48      	ldr	r3, [pc, #288]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a6:	ee07 3a90 	vmov	s15, r3
 80081aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80081b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081ce:	e021      	b.n	8008214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e2:	4b37      	ldr	r3, [pc, #220]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008212:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008214:	4b2a      	ldr	r3, [pc, #168]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	0a5b      	lsrs	r3, r3, #9
 800821a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800822a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800822e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800823a:	ee17 2a90 	vmov	r2, s15
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008242:	4b1f      	ldr	r3, [pc, #124]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	0c1b      	lsrs	r3, r3, #16
 8008248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824c:	ee07 3a90 	vmov	s15, r3
 8008250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800825c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008268:	ee17 2a90 	vmov	r2, s15
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008270:	4b13      	ldr	r3, [pc, #76]	; (80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	0e1b      	lsrs	r3, r3, #24
 8008276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008282:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800828a:	edd7 6a07 	vldr	s13, [r7, #28]
 800828e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008296:	ee17 2a90 	vmov	r2, s15
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800829e:	e008      	b.n	80082b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	609a      	str	r2, [r3, #8]
}
 80082b2:	bf00      	nop
 80082b4:	3724      	adds	r7, #36	; 0x24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	58024400 	.word	0x58024400
 80082c4:	03d09000 	.word	0x03d09000
 80082c8:	46000000 	.word	0x46000000
 80082cc:	4c742400 	.word	0x4c742400
 80082d0:	4a742400 	.word	0x4a742400
 80082d4:	4af42400 	.word	0x4af42400

080082d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082e6:	4b53      	ldr	r3, [pc, #332]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d101      	bne.n	80082f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e099      	b.n	800842a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082f6:	4b4f      	ldr	r3, [pc, #316]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a4e      	ldr	r2, [pc, #312]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80082fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008302:	f7f9 febd 	bl	8002080 <HAL_GetTick>
 8008306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008308:	e008      	b.n	800831c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800830a:	f7f9 feb9 	bl	8002080 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d901      	bls.n	800831c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e086      	b.n	800842a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800831c:	4b45      	ldr	r3, [pc, #276]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1f0      	bne.n	800830a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008328:	4b42      	ldr	r3, [pc, #264]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	031b      	lsls	r3, r3, #12
 8008336:	493f      	ldr	r1, [pc, #252]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 8008338:	4313      	orrs	r3, r2
 800833a:	628b      	str	r3, [r1, #40]	; 0x28
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	3b01      	subs	r3, #1
 8008342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	3b01      	subs	r3, #1
 800834c:	025b      	lsls	r3, r3, #9
 800834e:	b29b      	uxth	r3, r3
 8008350:	431a      	orrs	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	3b01      	subs	r3, #1
 8008358:	041b      	lsls	r3, r3, #16
 800835a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	3b01      	subs	r3, #1
 8008366:	061b      	lsls	r3, r3, #24
 8008368:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800836c:	4931      	ldr	r1, [pc, #196]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 800836e:	4313      	orrs	r3, r2
 8008370:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008372:	4b30      	ldr	r3, [pc, #192]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 8008374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008376:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	492d      	ldr	r1, [pc, #180]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 8008380:	4313      	orrs	r3, r2
 8008382:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008384:	4b2b      	ldr	r3, [pc, #172]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	f023 0220 	bic.w	r2, r3, #32
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	4928      	ldr	r1, [pc, #160]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 8008392:	4313      	orrs	r3, r2
 8008394:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008396:	4b27      	ldr	r3, [pc, #156]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 8008398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839a:	4a26      	ldr	r2, [pc, #152]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 800839c:	f023 0310 	bic.w	r3, r3, #16
 80083a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083a2:	4b24      	ldr	r3, [pc, #144]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083a6:	4b24      	ldr	r3, [pc, #144]	; (8008438 <RCCEx_PLL2_Config+0x160>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	69d2      	ldr	r2, [r2, #28]
 80083ae:	00d2      	lsls	r2, r2, #3
 80083b0:	4920      	ldr	r1, [pc, #128]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083b6:	4b1f      	ldr	r3, [pc, #124]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	4a1e      	ldr	r2, [pc, #120]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083bc:	f043 0310 	orr.w	r3, r3, #16
 80083c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d106      	bne.n	80083d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083c8:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	4a19      	ldr	r2, [pc, #100]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083d4:	e00f      	b.n	80083f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d106      	bne.n	80083ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083dc:	4b15      	ldr	r3, [pc, #84]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	4a14      	ldr	r2, [pc, #80]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083e8:	e005      	b.n	80083f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083ea:	4b12      	ldr	r3, [pc, #72]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	4a11      	ldr	r2, [pc, #68]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083f6:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a0e      	ldr	r2, [pc, #56]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 80083fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008402:	f7f9 fe3d 	bl	8002080 <HAL_GetTick>
 8008406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008408:	e008      	b.n	800841c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800840a:	f7f9 fe39 	bl	8002080 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d901      	bls.n	800841c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e006      	b.n	800842a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800841c:	4b05      	ldr	r3, [pc, #20]	; (8008434 <RCCEx_PLL2_Config+0x15c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0f0      	beq.n	800840a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008428:	7bfb      	ldrb	r3, [r7, #15]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	58024400 	.word	0x58024400
 8008438:	ffff0007 	.word	0xffff0007

0800843c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800844a:	4b53      	ldr	r3, [pc, #332]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 800844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d101      	bne.n	800845a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e099      	b.n	800858e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800845a:	4b4f      	ldr	r3, [pc, #316]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a4e      	ldr	r2, [pc, #312]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008466:	f7f9 fe0b 	bl	8002080 <HAL_GetTick>
 800846a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800846c:	e008      	b.n	8008480 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800846e:	f7f9 fe07 	bl	8002080 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	d901      	bls.n	8008480 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e086      	b.n	800858e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008480:	4b45      	ldr	r3, [pc, #276]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1f0      	bne.n	800846e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800848c:	4b42      	ldr	r3, [pc, #264]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	051b      	lsls	r3, r3, #20
 800849a:	493f      	ldr	r1, [pc, #252]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 800849c:	4313      	orrs	r3, r2
 800849e:	628b      	str	r3, [r1, #40]	; 0x28
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	025b      	lsls	r3, r3, #9
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	431a      	orrs	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	041b      	lsls	r3, r3, #16
 80084be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084c2:	431a      	orrs	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	061b      	lsls	r3, r3, #24
 80084cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084d0:	4931      	ldr	r1, [pc, #196]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084d6:	4b30      	ldr	r3, [pc, #192]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	492d      	ldr	r1, [pc, #180]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084e8:	4b2b      	ldr	r3, [pc, #172]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	4928      	ldr	r1, [pc, #160]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084fa:	4b27      	ldr	r3, [pc, #156]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 80084fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fe:	4a26      	ldr	r2, [pc, #152]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008504:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008506:	4b24      	ldr	r3, [pc, #144]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800850a:	4b24      	ldr	r3, [pc, #144]	; (800859c <RCCEx_PLL3_Config+0x160>)
 800850c:	4013      	ands	r3, r2
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	69d2      	ldr	r2, [r2, #28]
 8008512:	00d2      	lsls	r2, r2, #3
 8008514:	4920      	ldr	r1, [pc, #128]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008516:	4313      	orrs	r3, r2
 8008518:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800851a:	4b1f      	ldr	r3, [pc, #124]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	4a1e      	ldr	r2, [pc, #120]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800852c:	4b1a      	ldr	r3, [pc, #104]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 800852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008530:	4a19      	ldr	r2, [pc, #100]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008532:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008536:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008538:	e00f      	b.n	800855a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d106      	bne.n	800854e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008540:	4b15      	ldr	r3, [pc, #84]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	4a14      	ldr	r2, [pc, #80]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008546:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800854a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800854c:	e005      	b.n	800855a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800854e:	4b12      	ldr	r3, [pc, #72]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008552:	4a11      	ldr	r2, [pc, #68]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008558:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800855a:	4b0f      	ldr	r3, [pc, #60]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a0e      	ldr	r2, [pc, #56]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008566:	f7f9 fd8b 	bl	8002080 <HAL_GetTick>
 800856a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800856c:	e008      	b.n	8008580 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800856e:	f7f9 fd87 	bl	8002080 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e006      	b.n	800858e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008580:	4b05      	ldr	r3, [pc, #20]	; (8008598 <RCCEx_PLL3_Config+0x15c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0f0      	beq.n	800856e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800858c:	7bfb      	ldrb	r3, [r7, #15]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	58024400 	.word	0x58024400
 800859c:	ffff0007 	.word	0xffff0007

080085a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d067      	beq.n	8008682 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d106      	bne.n	80085cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7f9 f958 	bl	800187c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	22ca      	movs	r2, #202	; 0xca
 80085da:	625a      	str	r2, [r3, #36]	; 0x24
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2253      	movs	r2, #83	; 0x53
 80085e2:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fbdb 	bl	8008da0 <RTC_EnterInitMode>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d13b      	bne.n	800866c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6899      	ldr	r1, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4b23      	ldr	r3, [pc, #140]	; (800868c <HAL_RTC_Init+0xec>)
 8008600:	400b      	ands	r3, r1
 8008602:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6899      	ldr	r1, [r3, #8]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	431a      	orrs	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	431a      	orrs	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	0419      	lsls	r1, r3, #16
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fbe3 	bl	8008e00 <RTC_ExitInitMode>
 800863a:	4603      	mov	r3, r0
 800863c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d113      	bne.n	800866c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0203 	bic.w	r2, r2, #3
 8008652:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	69da      	ldr	r2, [r3, #28]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	431a      	orrs	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	22ff      	movs	r2, #255	; 0xff
 8008672:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d103      	bne.n	8008682 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	ff8fffbf 	.word	0xff8fffbf

08008690 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <HAL_RTC_SetTime+0x1a>
 80086a6:	2302      	movs	r3, #2
 80086a8:	e089      	b.n	80087be <HAL_RTC_SetTime+0x12e>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2202      	movs	r2, #2
 80086b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	22ca      	movs	r2, #202	; 0xca
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2253      	movs	r2, #83	; 0x53
 80086c8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 fb68 	bl	8008da0 <RTC_EnterInitMode>
 80086d0:	4603      	mov	r3, r0
 80086d2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80086d4:	7cfb      	ldrb	r3, [r7, #19]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d161      	bne.n	800879e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d126      	bne.n	800872e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2200      	movs	r2, #0
 80086f2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fbbf 	bl	8008e7c <RTC_ByteToBcd2>
 80086fe:	4603      	mov	r3, r0
 8008700:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fbb8 	bl	8008e7c <RTC_ByteToBcd2>
 800870c:	4603      	mov	r3, r0
 800870e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008710:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	789b      	ldrb	r3, [r3, #2]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fbb0 	bl	8008e7c <RTC_ByteToBcd2>
 800871c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800871e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	78db      	ldrb	r3, [r3, #3]
 8008726:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	e018      	b.n	8008760 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2200      	movs	r2, #0
 8008740:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800874e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008754:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	78db      	ldrb	r3, [r3, #3]
 800875a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800875c:	4313      	orrs	r3, r2
 800875e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	6979      	ldr	r1, [r7, #20]
 8008766:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <HAL_RTC_SetTime+0x138>)
 8008768:	400b      	ands	r3, r1
 800876a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800877a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6899      	ldr	r1, [r3, #8]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	431a      	orrs	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	430a      	orrs	r2, r1
 8008792:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 fb33 	bl	8008e00 <RTC_ExitInitMode>
 800879a:	4603      	mov	r3, r0
 800879c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	22ff      	movs	r2, #255	; 0xff
 80087a4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80087a6:	7cfb      	ldrb	r3, [r7, #19]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80087bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd90      	pop	{r4, r7, pc}
 80087c6:	bf00      	nop
 80087c8:	007f7f7f 	.word	0x007f7f7f

080087cc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	4b22      	ldr	r3, [pc, #136]	; (8008880 <HAL_RTC_GetTime+0xb4>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	b2db      	uxtb	r3, r3
 8008802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008806:	b2da      	uxtb	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	0a1b      	lsrs	r3, r3, #8
 8008810:	b2db      	uxtb	r3, r3
 8008812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008816:	b2da      	uxtb	r2, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008824:	b2da      	uxtb	r2, r3
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	0d9b      	lsrs	r3, r3, #22
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	b2da      	uxtb	r2, r3
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d11a      	bne.n	8008876 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 fb39 	bl	8008ebc <RTC_Bcd2ToByte>
 800884a:	4603      	mov	r3, r0
 800884c:	461a      	mov	r2, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fb30 	bl	8008ebc <RTC_Bcd2ToByte>
 800885c:	4603      	mov	r3, r0
 800885e:	461a      	mov	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	789b      	ldrb	r3, [r3, #2]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 fb27 	bl	8008ebc <RTC_Bcd2ToByte>
 800886e:	4603      	mov	r3, r0
 8008870:	461a      	mov	r2, r3
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	007f7f7f 	.word	0x007f7f7f

08008884 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008884:	b590      	push	{r4, r7, lr}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <HAL_RTC_SetDate+0x1a>
 800889a:	2302      	movs	r3, #2
 800889c:	e073      	b.n	8008986 <HAL_RTC_SetDate+0x102>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2202      	movs	r2, #2
 80088aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10e      	bne.n	80088d2 <HAL_RTC_SetDate+0x4e>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	785b      	ldrb	r3, [r3, #1]
 80088b8:	f003 0310 	and.w	r3, r3, #16
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d008      	beq.n	80088d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	785b      	ldrb	r3, [r3, #1]
 80088c4:	f023 0310 	bic.w	r3, r3, #16
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	330a      	adds	r3, #10
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d11c      	bne.n	8008912 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	78db      	ldrb	r3, [r3, #3]
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 facd 	bl	8008e7c <RTC_ByteToBcd2>
 80088e2:	4603      	mov	r3, r0
 80088e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fac6 	bl	8008e7c <RTC_ByteToBcd2>
 80088f0:	4603      	mov	r3, r0
 80088f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	789b      	ldrb	r3, [r3, #2]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fabe 	bl	8008e7c <RTC_ByteToBcd2>
 8008900:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008902:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800890c:	4313      	orrs	r3, r2
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e00e      	b.n	8008930 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	78db      	ldrb	r3, [r3, #3]
 8008916:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800891e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008924:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	22ca      	movs	r2, #202	; 0xca
 8008936:	625a      	str	r2, [r3, #36]	; 0x24
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2253      	movs	r2, #83	; 0x53
 800893e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 fa2d 	bl	8008da0 <RTC_EnterInitMode>
 8008946:	4603      	mov	r3, r0
 8008948:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800894a:	7cfb      	ldrb	r3, [r7, #19]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	6979      	ldr	r1, [r7, #20]
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <HAL_RTC_SetDate+0x10c>)
 8008958:	400b      	ands	r3, r1
 800895a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 fa4f 	bl	8008e00 <RTC_ExitInitMode>
 8008962:	4603      	mov	r3, r0
 8008964:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	22ff      	movs	r2, #255	; 0xff
 800896c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800896e:	7cfb      	ldrb	r3, [r7, #19]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d103      	bne.n	800897c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008984:	7cfb      	ldrb	r3, [r7, #19]


}
 8008986:	4618      	mov	r0, r3
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	bd90      	pop	{r4, r7, pc}
 800898e:	bf00      	nop
 8008990:	00ffff3f 	.word	0x00ffff3f

08008994 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	4b21      	ldr	r3, [pc, #132]	; (8008a2c <HAL_RTC_GetDate+0x98>)
 80089a8:	4013      	ands	r3, r2
 80089aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	0a1b      	lsrs	r3, r3, #8
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	0b5b      	lsrs	r3, r3, #13
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d11a      	bne.n	8008a20 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	78db      	ldrb	r3, [r3, #3]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fa64 	bl	8008ebc <RTC_Bcd2ToByte>
 80089f4:	4603      	mov	r3, r0
 80089f6:	461a      	mov	r2, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	785b      	ldrb	r3, [r3, #1]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 fa5b 	bl	8008ebc <RTC_Bcd2ToByte>
 8008a06:	4603      	mov	r3, r0
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	789b      	ldrb	r3, [r3, #2]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fa52 	bl	8008ebc <RTC_Bcd2ToByte>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	00ffff3f 	.word	0x00ffff3f

08008a30 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008a30:	b590      	push	{r4, r7, lr}
 8008a32:	b089      	sub	sp, #36	; 0x24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d101      	bne.n	8008a4a <HAL_RTC_SetAlarm_IT+0x1a>
 8008a46:	2302      	movs	r3, #2
 8008a48:	e123      	b.n	8008c92 <HAL_RTC_SetAlarm_IT+0x262>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2202      	movs	r2, #2
 8008a56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d137      	bne.n	8008ad0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d102      	bne.n	8008a74 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2200      	movs	r2, #0
 8008a72:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 f9ff 	bl	8008e7c <RTC_ByteToBcd2>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 f9f8 	bl	8008e7c <RTC_ByteToBcd2>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a90:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	789b      	ldrb	r3, [r3, #2]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 f9f0 	bl	8008e7c <RTC_ByteToBcd2>
 8008a9c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a9e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	78db      	ldrb	r3, [r3, #3]
 8008aa6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008aa8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 f9e2 	bl	8008e7c <RTC_ByteToBcd2>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008abc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008ac4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008aca:	4313      	orrs	r3, r2
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	e023      	b.n	8008b18 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d102      	bne.n	8008ae4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008af0:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008af6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	78db      	ldrb	r3, [r3, #3]
 8008afc:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008afe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b06:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008b08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008b0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008b14:	4313      	orrs	r3, r2
 8008b16:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	22ca      	movs	r2, #202	; 0xca
 8008b2a:	625a      	str	r2, [r3, #36]	; 0x24
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2253      	movs	r2, #83	; 0x53
 8008b32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b3c:	d14a      	bne.n	8008bd4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b4c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008b5e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008b60:	f7f9 fa8e 	bl	8002080 <HAL_GetTick>
 8008b64:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008b66:	e015      	b.n	8008b94 <HAL_RTC_SetAlarm_IT+0x164>
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b68:	f7f9 fa8a 	bl	8002080 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b76:	d90d      	bls.n	8008b94 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	22ff      	movs	r2, #255	; 0xff
 8008b7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2203      	movs	r2, #3
 8008b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e07e      	b.n	8008c92 <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0e2      	beq.n	8008b68 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bc0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bd0:	609a      	str	r2, [r3, #8]
 8008bd2:	e049      	b.n	8008c68 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689a      	ldr	r2, [r3, #8]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008be2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008bf4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008bf6:	f7f9 fa43 	bl	8002080 <HAL_GetTick>
 8008bfa:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008bfc:	e015      	b.n	8008c2a <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008bfe:	f7f9 fa3f 	bl	8002080 <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c0c:	d90d      	bls.n	8008c2a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	22ff      	movs	r2, #255	; 0xff
 8008c14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2203      	movs	r2, #3
 8008c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e033      	b.n	8008c92 <HAL_RTC_SetAlarm_IT+0x262>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0e2      	beq.n	8008bfe <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	69fa      	ldr	r2, [r7, #28]
 8008c3e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c56:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689a      	ldr	r2, [r3, #8]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c66:	609a      	str	r2, [r3, #8]
#if !defined(DUAL_CORE)
  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c76:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	22ff      	movs	r2, #255	; 0xff
 8008c7e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3724      	adds	r7, #36	; 0x24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd90      	pop	{r4, r7, pc}
	...

08008c9c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
#if defined(DUAL_CORE)
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8008ca4:	f7f9 fb4c 	bl	8002340 <HAL_GetCurrentCPUID>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d104      	bne.n	8008cb8 <HAL_RTC_AlarmIRQHandler+0x1c>
  {
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008cae:	4b22      	ldr	r3, [pc, #136]	; (8008d38 <HAL_RTC_AlarmIRQHandler+0x9c>)
 8008cb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008cb4:	609a      	str	r2, [r3, #8]
 8008cb6:	e003      	b.n	8008cc0 <HAL_RTC_AlarmIRQHandler+0x24>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
 8008cb8:	4b20      	ldr	r3, [pc, #128]	; (8008d3c <HAL_RTC_AlarmIRQHandler+0xa0>)
 8008cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008cbe:	609a      	str	r2, [r3, #8]
  }
#endif /* RTC_MISR_ALRBMF */

#if defined(RTC_ISR_ALRAF)
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d012      	beq.n	8008cf4 <HAL_RTC_AlarmIRQHandler+0x58>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <HAL_RTC_AlarmIRQHandler+0x58>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008cec:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f826 	bl	8008d40 <HAL_RTC_AlarmAEventCallback>
  }
#endif /* RTC_ISR_ALRAF */

#if defined(RTC_ISR_ALRBF)
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d012      	beq.n	8008d28 <HAL_RTC_AlarmIRQHandler+0x8c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <HAL_RTC_AlarmIRQHandler+0x8c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008d20:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f8e4 	bl	8008ef0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008d30:	bf00      	nop
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	58000080 	.word	0x58000080
 8008d3c:	580000c0 	.word	0x580000c0

08008d40 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68da      	ldr	r2, [r3, #12]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d6a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008d6c:	f7f9 f988 	bl	8002080 <HAL_GetTick>
 8008d70:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d72:	e009      	b.n	8008d88 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d74:	f7f9 f984 	bl	8002080 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d82:	d901      	bls.n	8008d88 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e007      	b.n	8008d98 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0ee      	beq.n	8008d74 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d11d      	bne.n	8008df6 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008dc4:	f7f9 f95c 	bl	8002080 <HAL_GetTick>
 8008dc8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008dca:	e00d      	b.n	8008de8 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008dcc:	f7f9 f958 	bl	8002080 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dda:	d905      	bls.n	8008de8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2203      	movs	r2, #3
 8008de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0ea      	beq.n	8008dcc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008e0c:	4b1a      	ldr	r3, [pc, #104]	; (8008e78 <RTC_ExitInitMode+0x78>)
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	4a19      	ldr	r2, [pc, #100]	; (8008e78 <RTC_ExitInitMode+0x78>)
 8008e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e16:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008e18:	4b17      	ldr	r3, [pc, #92]	; (8008e78 <RTC_ExitInitMode+0x78>)
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f003 0320 	and.w	r3, r3, #32
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10c      	bne.n	8008e3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff ff95 	bl	8008d54 <HAL_RTC_WaitForSynchro>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01e      	beq.n	8008e6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2203      	movs	r2, #3
 8008e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	73fb      	strb	r3, [r7, #15]
 8008e3c:	e017      	b.n	8008e6e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e3e:	4b0e      	ldr	r3, [pc, #56]	; (8008e78 <RTC_ExitInitMode+0x78>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	4a0d      	ldr	r2, [pc, #52]	; (8008e78 <RTC_ExitInitMode+0x78>)
 8008e44:	f023 0320 	bic.w	r3, r3, #32
 8008e48:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff ff82 	bl	8008d54 <HAL_RTC_WaitForSynchro>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2203      	movs	r2, #3
 8008e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e62:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <RTC_ExitInitMode+0x78>)
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	4a04      	ldr	r2, [pc, #16]	; (8008e78 <RTC_ExitInitMode+0x78>)
 8008e68:	f043 0320 	orr.w	r3, r3, #32
 8008e6c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	58004000 	.word	0x58004000

08008e7c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8008e8e:	e005      	b.n	8008e9c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008e96:	7afb      	ldrb	r3, [r7, #11]
 8008e98:	3b0a      	subs	r3, #10
 8008e9a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008e9c:	7afb      	ldrb	r3, [r7, #11]
 8008e9e:	2b09      	cmp	r3, #9
 8008ea0:	d8f6      	bhi.n	8008e90 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	011b      	lsls	r3, r3, #4
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	7afb      	ldrb	r3, [r7, #11]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	b2db      	uxtb	r3, r3
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
 8008ec8:	091b      	lsrs	r3, r3, #4
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	461a      	mov	r2, r3
 8008ece:	0092      	lsls	r2, r2, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	f003 030f 	and.w	r3, r3, #15
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	b2db      	uxtb	r3, r3
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e0eb      	b.n	80090f2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a75      	ldr	r2, [pc, #468]	; (80090fc <HAL_SPI_Init+0x1f8>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00f      	beq.n	8008f4a <HAL_SPI_Init+0x46>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a74      	ldr	r2, [pc, #464]	; (8009100 <HAL_SPI_Init+0x1fc>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00a      	beq.n	8008f4a <HAL_SPI_Init+0x46>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a72      	ldr	r2, [pc, #456]	; (8009104 <HAL_SPI_Init+0x200>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d005      	beq.n	8008f4a <HAL_SPI_Init+0x46>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	2b0f      	cmp	r3, #15
 8008f44:	d901      	bls.n	8008f4a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e0d3      	b.n	80090f2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 ff62 	bl	8009e14 <SPI_GetPacketSize>
 8008f50:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a69      	ldr	r2, [pc, #420]	; (80090fc <HAL_SPI_Init+0x1f8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d00c      	beq.n	8008f76 <HAL_SPI_Init+0x72>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a67      	ldr	r2, [pc, #412]	; (8009100 <HAL_SPI_Init+0x1fc>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d007      	beq.n	8008f76 <HAL_SPI_Init+0x72>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a66      	ldr	r2, [pc, #408]	; (8009104 <HAL_SPI_Init+0x200>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d002      	beq.n	8008f76 <HAL_SPI_Init+0x72>
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b08      	cmp	r3, #8
 8008f74:	d811      	bhi.n	8008f9a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f7a:	4a60      	ldr	r2, [pc, #384]	; (80090fc <HAL_SPI_Init+0x1f8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d009      	beq.n	8008f94 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a5e      	ldr	r2, [pc, #376]	; (8009100 <HAL_SPI_Init+0x1fc>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d004      	beq.n	8008f94 <HAL_SPI_Init+0x90>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a5d      	ldr	r2, [pc, #372]	; (8009104 <HAL_SPI_Init+0x200>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d104      	bne.n	8008f9e <HAL_SPI_Init+0x9a>
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b10      	cmp	r3, #16
 8008f98:	d901      	bls.n	8008f9e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e0a9      	b.n	80090f2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7f8 fc9a 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0201 	bic.w	r2, r2, #1
 8008fce:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fd8:	d119      	bne.n	800900e <HAL_SPI_Init+0x10a>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fe2:	d103      	bne.n	8008fec <HAL_SPI_Init+0xe8>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d008      	beq.n	8008ffe <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10c      	bne.n	800900e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ffc:	d107      	bne.n	800900e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800900c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69da      	ldr	r2, [r3, #28]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	431a      	orrs	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	431a      	orrs	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009020:	ea42 0103 	orr.w	r1, r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68da      	ldr	r2, [r3, #12]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	430a      	orrs	r2, r1
 800902e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	431a      	orrs	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	431a      	orrs	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	431a      	orrs	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009062:	431a      	orrs	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800906e:	ea42 0103 	orr.w	r1, r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d113      	bne.n	80090ae <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009098:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0201 	bic.w	r2, r2, #1
 80090bc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	40013000 	.word	0x40013000
 8009100:	40003800 	.word	0x40003800
 8009104:	40003c00 	.word	0x40003c00

08009108 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08a      	sub	sp, #40	; 0x28
 800910c:	af02      	add	r7, sp, #8
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	603b      	str	r3, [r7, #0]
 8009114:	4613      	mov	r3, r2
 8009116:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3320      	adds	r3, #32
 800911e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_SPI_Transmit+0x2a>
 800912e:	2302      	movs	r3, #2
 8009130:	e1d7      	b.n	80094e2 <HAL_SPI_Transmit+0x3da>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800913a:	f7f8 ffa1 	bl	8002080 <HAL_GetTick>
 800913e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b01      	cmp	r3, #1
 800914a:	d007      	beq.n	800915c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800914c:	2302      	movs	r3, #2
 800914e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009158:	7efb      	ldrb	r3, [r7, #27]
 800915a:	e1c2      	b.n	80094e2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_SPI_Transmit+0x60>
 8009162:	88fb      	ldrh	r3, [r7, #6]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d107      	bne.n	8009178 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009174:	7efb      	ldrb	r3, [r7, #27]
 8009176:	e1b4      	b.n	80094e2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2203      	movs	r2, #3
 800917c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	88fa      	ldrh	r2, [r7, #6]
 8009192:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	88fa      	ldrh	r2, [r7, #6]
 800919a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80091c8:	d107      	bne.n	80091da <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	4b96      	ldr	r3, [pc, #600]	; (800943c <HAL_SPI_Transmit+0x334>)
 80091e2:	4013      	ands	r3, r2
 80091e4:	88f9      	ldrh	r1, [r7, #6]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	6812      	ldr	r2, [r2, #0]
 80091ea:	430b      	orrs	r3, r1
 80091ec:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0201 	orr.w	r2, r2, #1
 80091fc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009206:	d107      	bne.n	8009218 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	2b0f      	cmp	r3, #15
 800921e:	d947      	bls.n	80092b0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009220:	e03f      	b.n	80092a2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b02      	cmp	r3, #2
 800922e:	d114      	bne.n	800925a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6812      	ldr	r2, [r2, #0]
 800923a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009240:	1d1a      	adds	r2, r3, #4
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009258:	e023      	b.n	80092a2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800925a:	f7f8 ff11 	bl	8002080 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d803      	bhi.n	8009272 <HAL_SPI_Transmit+0x16a>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009270:	d102      	bne.n	8009278 <HAL_SPI_Transmit+0x170>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d114      	bne.n	80092a2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 fcfd 	bl	8009c78 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800928c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e11f      	b.n	80094e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1b9      	bne.n	8009222 <HAL_SPI_Transmit+0x11a>
 80092ae:	e0f2      	b.n	8009496 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	2b07      	cmp	r3, #7
 80092b6:	f240 80e7 	bls.w	8009488 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80092ba:	e05d      	b.n	8009378 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d132      	bne.n	8009330 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d918      	bls.n	8009308 <HAL_SPI_Transmit+0x200>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d014      	beq.n	8009308 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6812      	ldr	r2, [r2, #0]
 80092e8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	3b02      	subs	r3, #2
 80092fe:	b29a      	uxth	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009306:	e037      	b.n	8009378 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800930c:	881a      	ldrh	r2, [r3, #0]
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009316:	1c9a      	adds	r2, r3, #2
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009322:	b29b      	uxth	r3, r3
 8009324:	3b01      	subs	r3, #1
 8009326:	b29a      	uxth	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800932e:	e023      	b.n	8009378 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009330:	f7f8 fea6 	bl	8002080 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	429a      	cmp	r2, r3
 800933e:	d803      	bhi.n	8009348 <HAL_SPI_Transmit+0x240>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009346:	d102      	bne.n	800934e <HAL_SPI_Transmit+0x246>
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d114      	bne.n	8009378 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f000 fc92 	bl	8009c78 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009362:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e0b4      	b.n	80094e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800937e:	b29b      	uxth	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	d19b      	bne.n	80092bc <HAL_SPI_Transmit+0x1b4>
 8009384:	e087      	b.n	8009496 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	f003 0302 	and.w	r3, r3, #2
 8009390:	2b02      	cmp	r3, #2
 8009392:	d155      	bne.n	8009440 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800939a:	b29b      	uxth	r3, r3
 800939c:	2b03      	cmp	r3, #3
 800939e:	d918      	bls.n	80093d2 <HAL_SPI_Transmit+0x2ca>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a4:	2b40      	cmp	r3, #64	; 0x40
 80093a6:	d914      	bls.n	80093d2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6812      	ldr	r2, [r2, #0]
 80093b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b8:	1d1a      	adds	r2, r3, #4
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3b04      	subs	r3, #4
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093d0:	e05a      	b.n	8009488 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093d8:	b29b      	uxth	r3, r3
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d917      	bls.n	800940e <HAL_SPI_Transmit+0x306>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d013      	beq.n	800940e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ea:	881a      	ldrh	r2, [r3, #0]
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f4:	1c9a      	adds	r2, r3, #2
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009400:	b29b      	uxth	r3, r3
 8009402:	3b02      	subs	r3, #2
 8009404:	b29a      	uxth	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800940c:	e03c      	b.n	8009488 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3320      	adds	r3, #32
 8009418:	7812      	ldrb	r2, [r2, #0]
 800941a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800942c:	b29b      	uxth	r3, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009438:	e026      	b.n	8009488 <HAL_SPI_Transmit+0x380>
 800943a:	bf00      	nop
 800943c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009440:	f7f8 fe1e 	bl	8002080 <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	429a      	cmp	r2, r3
 800944e:	d803      	bhi.n	8009458 <HAL_SPI_Transmit+0x350>
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d102      	bne.n	800945e <HAL_SPI_Transmit+0x356>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d114      	bne.n	8009488 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 fc0a 	bl	8009c78 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009472:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e02c      	b.n	80094e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800948e:	b29b      	uxth	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	f47f af78 	bne.w	8009386 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	2200      	movs	r2, #0
 800949e:	2108      	movs	r1, #8
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fc89 	bl	8009db8 <SPI_WaitOnFlagUntilTimeout>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d007      	beq.n	80094bc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094b2:	f043 0220 	orr.w	r2, r3, #32
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 fbdb 	bl	8009c78 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e000      	b.n	80094e2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80094e0:	7efb      	ldrb	r3, [r7, #27]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3720      	adds	r7, #32
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop

080094ec <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4613      	mov	r3, r2
 80094f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009504:	2b01      	cmp	r3, #1
 8009506:	d101      	bne.n	800950c <HAL_SPI_Transmit_DMA+0x20>
 8009508:	2302      	movs	r3, #2
 800950a:	e128      	b.n	800975e <HAL_SPI_Transmit_DMA+0x272>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b01      	cmp	r3, #1
 800951e:	d007      	beq.n	8009530 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8009520:	2302      	movs	r3, #2
 8009522:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	e116      	b.n	800975e <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <HAL_SPI_Transmit_DMA+0x50>
 8009536:	88fb      	ldrh	r3, [r7, #6]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d107      	bne.n	800954c <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	e108      	b.n	800975e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2203      	movs	r2, #3
 8009550:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	88fa      	ldrh	r2, [r7, #6]
 8009566:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	88fa      	ldrh	r2, [r7, #6]
 800956e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800959c:	d107      	bne.n	80095ae <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095ac:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	2b0f      	cmp	r3, #15
 80095b4:	d905      	bls.n	80095c2 <HAL_SPI_Transmit_DMA+0xd6>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095c0:	d10f      	bne.n	80095e2 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80095c6:	2b07      	cmp	r3, #7
 80095c8:	d913      	bls.n	80095f2 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d4:	d00d      	beq.n	80095f2 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095da:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80095dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095e0:	d007      	beq.n	80095f2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	e0b5      	b.n	800975e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	2b07      	cmp	r3, #7
 80095f8:	d820      	bhi.n	800963c <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009604:	d109      	bne.n	800961a <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800960c:	b29b      	uxth	r3, r3
 800960e:	3301      	adds	r3, #1
 8009610:	105b      	asrs	r3, r3, #1
 8009612:	b29a      	uxth	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009624:	d11e      	bne.n	8009664 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800962c:	b29b      	uxth	r3, r3
 800962e:	3303      	adds	r3, #3
 8009630:	109b      	asrs	r3, r3, #2
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800963a:	e013      	b.n	8009664 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	2b0f      	cmp	r3, #15
 8009642:	d80f      	bhi.n	8009664 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800964e:	d109      	bne.n	8009664 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009656:	b29b      	uxth	r3, r3
 8009658:	3301      	adds	r3, #1
 800965a:	105b      	asrs	r3, r3, #1
 800965c:	b29a      	uxth	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009668:	4a3f      	ldr	r2, [pc, #252]	; (8009768 <HAL_SPI_Transmit_DMA+0x27c>)
 800966a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009670:	4a3e      	ldr	r2, [pc, #248]	; (800976c <HAL_SPI_Transmit_DMA+0x280>)
 8009672:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009678:	4a3d      	ldr	r2, [pc, #244]	; (8009770 <HAL_SPI_Transmit_DMA+0x284>)
 800967a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009680:	2200      	movs	r2, #0
 8009682:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689a      	ldr	r2, [r3, #8]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009692:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800969c:	4619      	mov	r1, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3320      	adds	r3, #32
 80096a4:	461a      	mov	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	f7f9 f9b7 	bl	8002a20 <HAL_DMA_Start_IT>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00f      	beq.n	80096d8 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096be:	f043 0210 	orr.w	r2, r3, #16
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	e042      	b.n	800975e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e2:	d108      	bne.n	80096f6 <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6859      	ldr	r1, [r3, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	4b21      	ldr	r3, [pc, #132]	; (8009774 <HAL_SPI_Transmit_DMA+0x288>)
 80096f0:	400b      	ands	r3, r1
 80096f2:	6053      	str	r3, [r2, #4]
 80096f4:	e009      	b.n	800970a <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4b1d      	ldr	r3, [pc, #116]	; (8009774 <HAL_SPI_Transmit_DMA+0x288>)
 80096fe:	4013      	ands	r3, r2
 8009700:	88f9      	ldrh	r1, [r7, #6]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	6812      	ldr	r2, [r2, #0]
 8009706:	430b      	orrs	r3, r1
 8009708:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689a      	ldr	r2, [r3, #8]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009718:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	691a      	ldr	r2, [r3, #16]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8009728:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f042 0201 	orr.w	r2, r2, #1
 8009738:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009742:	d107      	bne.n	8009754 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009752:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	08009be3 	.word	0x08009be3
 800976c:	08009b9d 	.word	0x08009b9d
 8009770:	08009bff 	.word	0x08009bff
 8009774:	ffff0000 	.word	0xffff0000

08009778 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08a      	sub	sp, #40	; 0x28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009790:	6a3a      	ldr	r2, [r7, #32]
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	4013      	ands	r3, r2
 8009796:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80097aa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3330      	adds	r3, #48	; 0x30
 80097b2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d113      	bne.n	80097e6 <HAL_SPI_IRQHandler+0x6e>
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	f003 0320 	and.w	r3, r3, #32
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10e      	bne.n	80097e6 <HAL_SPI_IRQHandler+0x6e>
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	f003 0304 	and.w	r3, r3, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d009      	beq.n	80097e6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	4798      	blx	r3
    handled = 1UL;
 80097e2:	2301      	movs	r3, #1
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10f      	bne.n	8009810 <HAL_SPI_IRQHandler+0x98>
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <HAL_SPI_IRQHandler+0x98>
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	4798      	blx	r3
    handled = 1UL;
 800980c:	2301      	movs	r3, #1
 800980e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	f003 0320 	and.w	r3, r3, #32
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10f      	bne.n	800983a <HAL_SPI_IRQHandler+0xc2>
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00a      	beq.n	800983a <HAL_SPI_IRQHandler+0xc2>
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	f003 0304 	and.w	r3, r3, #4
 800982a:	2b00      	cmp	r3, #0
 800982c:	d105      	bne.n	800983a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	4798      	blx	r3
    handled = 1UL;
 8009836:	2301      	movs	r3, #1
 8009838:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	2b00      	cmp	r3, #0
 800983e:	f040 816f 	bne.w	8009b20 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	f003 0308 	and.w	r3, r3, #8
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 80a0 	beq.w	800998e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	699a      	ldr	r2, [r3, #24]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f042 0208 	orr.w	r2, r2, #8
 800985c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f042 0210 	orr.w	r2, r2, #16
 800986c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	699a      	ldr	r2, [r3, #24]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800987c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	691a      	ldr	r2, [r3, #16]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0208 	bic.w	r2, r2, #8
 800988c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00f      	beq.n	80098b8 <HAL_SPI_IRQHandler+0x140>
 8009898:	7cfb      	ldrb	r3, [r7, #19]
 800989a:	2b04      	cmp	r3, #4
 800989c:	d004      	beq.n	80098a8 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d007      	beq.n	80098b8 <HAL_SPI_IRQHandler+0x140>
 80098a8:	7cfb      	ldrb	r3, [r7, #19]
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	d059      	beq.n	8009962 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d154      	bne.n	8009962 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d13d      	bne.n	8009942 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80098c6:	e036      	b.n	8009936 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	2b0f      	cmp	r3, #15
 80098ce:	d90b      	bls.n	80098e8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80098da:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098e0:	1d1a      	adds	r2, r3, #4
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	665a      	str	r2, [r3, #100]	; 0x64
 80098e6:	e01d      	b.n	8009924 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	2b07      	cmp	r3, #7
 80098ee:	d90b      	bls.n	8009908 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	8812      	ldrh	r2, [r2, #0]
 80098f8:	b292      	uxth	r2, r2
 80098fa:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009900:	1c9a      	adds	r2, r3, #2
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	665a      	str	r2, [r3, #100]	; 0x64
 8009906:	e00d      	b.n	8009924 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009914:	7812      	ldrb	r2, [r2, #0]
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800992a:	b29b      	uxth	r3, r3
 800992c:	3b01      	subs	r3, #1
 800992e:	b29a      	uxth	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1c2      	bne.n	80098c8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f998 	bl	8009c78 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f914 	bl	8009b88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8009960:	e0e3      	b.n	8009b2a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009962:	7cfb      	ldrb	r3, [r7, #19]
 8009964:	2b05      	cmp	r3, #5
 8009966:	d103      	bne.n	8009970 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f8f9 	bl	8009b60 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800996e:	e0d9      	b.n	8009b24 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009970:	7cfb      	ldrb	r3, [r7, #19]
 8009972:	2b04      	cmp	r3, #4
 8009974:	d103      	bne.n	800997e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f8e8 	bl	8009b4c <HAL_SPI_RxCpltCallback>
    return;
 800997c:	e0d2      	b.n	8009b24 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800997e:	7cfb      	ldrb	r3, [r7, #19]
 8009980:	2b03      	cmp	r3, #3
 8009982:	f040 80cf 	bne.w	8009b24 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f8d6 	bl	8009b38 <HAL_SPI_TxCpltCallback>
    return;
 800998c:	e0ca      	b.n	8009b24 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00d      	beq.n	80099b4 <HAL_SPI_IRQHandler+0x23c>
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d008      	beq.n	80099b4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	699a      	ldr	r2, [r3, #24]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099b0:	619a      	str	r2, [r3, #24]

    return;
 80099b2:	e0ba      	b.n	8009b2a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 80b5 	beq.w	8009b2a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00f      	beq.n	80099ea <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099d0:	f043 0204 	orr.w	r2, r3, #4
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099e8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00f      	beq.n	8009a14 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099fa:	f043 0201 	orr.w	r2, r3, #1
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	699a      	ldr	r2, [r3, #24]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a12:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00f      	beq.n	8009a3e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a24:	f043 0208 	orr.w	r2, r3, #8
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	699a      	ldr	r2, [r3, #24]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a3c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00f      	beq.n	8009a68 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699a      	ldr	r2, [r3, #24]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0220 	orr.w	r2, r2, #32
 8009a66:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d05a      	beq.n	8009b28 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6919      	ldr	r1, [r3, #16]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	4b28      	ldr	r3, [pc, #160]	; (8009b30 <HAL_SPI_IRQHandler+0x3b8>)
 8009a8e:	400b      	ands	r3, r1
 8009a90:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009a9c:	d138      	bne.n	8009b10 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009aac:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d013      	beq.n	8009ade <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aba:	4a1e      	ldr	r2, [pc, #120]	; (8009b34 <HAL_SPI_IRQHandler+0x3bc>)
 8009abc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7f9 fd34 	bl	8003530 <HAL_DMA_Abort_IT>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d007      	beq.n	8009ade <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ad4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d020      	beq.n	8009b28 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aea:	4a12      	ldr	r2, [pc, #72]	; (8009b34 <HAL_SPI_IRQHandler+0x3bc>)
 8009aec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7f9 fd1c 	bl	8003530 <HAL_DMA_Abort_IT>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d014      	beq.n	8009b28 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009b0e:	e00b      	b.n	8009b28 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f835 	bl	8009b88 <HAL_SPI_ErrorCallback>
    return;
 8009b1e:	e003      	b.n	8009b28 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009b20:	bf00      	nop
 8009b22:	e002      	b.n	8009b2a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009b24:	bf00      	nop
 8009b26:	e000      	b.n	8009b2a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009b28:	bf00      	nop
  }
}
 8009b2a:	3728      	adds	r7, #40	; 0x28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	fffffc94 	.word	0xfffffc94
 8009b34:	08009c45 	.word	0x08009c45

08009b38 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b07      	cmp	r3, #7
 8009bb4:	d011      	beq.n	8009bda <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc0:	d103      	bne.n	8009bca <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff ffb8 	bl	8009b38 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009bc8:	e007      	b.n	8009bda <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	691a      	ldr	r2, [r3, #16]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f042 0208 	orr.w	r2, r2, #8
 8009bd8:	611a      	str	r2, [r3, #16]
}
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bee:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f7ff ffbf 	bl	8009b74 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bf6:	bf00      	nop
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7fa fdfd 	bl	800480c <HAL_DMA_GetError>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d011      	beq.n	8009c3c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 f82d 	bl	8009c78 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c24:	f043 0210 	orr.w	r2, r3, #16
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f7ff ffa6 	bl	8009b88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff ff8c 	bl	8009b88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c70:	bf00      	nop
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0208 	orr.w	r2, r2, #8
 8009c96:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699a      	ldr	r2, [r3, #24]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f042 0210 	orr.w	r2, r2, #16
 8009ca6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f022 0201 	bic.w	r2, r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6919      	ldr	r1, [r3, #16]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b3c      	ldr	r3, [pc, #240]	; (8009db4 <SPI_CloseTransfer+0x13c>)
 8009cc4:	400b      	ands	r3, r1
 8009cc6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689a      	ldr	r2, [r3, #8]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009cd6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d014      	beq.n	8009d0e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00f      	beq.n	8009d0e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	699a      	ldr	r2, [r3, #24]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f042 0220 	orr.w	r2, r2, #32
 8009d0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d014      	beq.n	8009d44 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00f      	beq.n	8009d44 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d2a:	f043 0204 	orr.w	r2, r3, #4
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	699a      	ldr	r2, [r3, #24]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d42:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00f      	beq.n	8009d6e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d54:	f043 0201 	orr.w	r2, r3, #1
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	699a      	ldr	r2, [r3, #24]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d6c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00f      	beq.n	8009d98 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d7e:	f043 0208 	orr.w	r2, r3, #8
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	699a      	ldr	r2, [r3, #24]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d96:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009da8:	bf00      	nop
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr
 8009db4:	fffffc90 	.word	0xfffffc90

08009db8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	603b      	str	r3, [r7, #0]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009dc8:	e010      	b.n	8009dec <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dca:	f7f8 f959 	bl	8002080 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	69ba      	ldr	r2, [r7, #24]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d803      	bhi.n	8009de2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de0:	d102      	bne.n	8009de8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e00f      	b.n	8009e0c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	695a      	ldr	r2, [r3, #20]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	4013      	ands	r3, r2
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	bf0c      	ite	eq
 8009dfc:	2301      	moveq	r3, #1
 8009dfe:	2300      	movne	r3, #0
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	461a      	mov	r2, r3
 8009e04:	79fb      	ldrb	r3, [r7, #7]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d0df      	beq.n	8009dca <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e20:	095b      	lsrs	r3, r3, #5
 8009e22:	3301      	adds	r3, #1
 8009e24:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	3307      	adds	r3, #7
 8009e32:	08db      	lsrs	r3, r3, #3
 8009e34:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e049      	b.n	8009ef0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d106      	bne.n	8009e76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7f7 fdff 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2202      	movs	r2, #2
 8009e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3304      	adds	r3, #4
 8009e86:	4619      	mov	r1, r3
 8009e88:	4610      	mov	r0, r2
 8009e8a:	f000 fc0b 	bl	800a6a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d001      	beq.n	8009f10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e047      	b.n	8009fa0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2202      	movs	r2, #2
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a23      	ldr	r2, [pc, #140]	; (8009fac <HAL_TIM_Base_Start+0xb4>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d01d      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2a:	d018      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a1f      	ldr	r2, [pc, #124]	; (8009fb0 <HAL_TIM_Base_Start+0xb8>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d013      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a1e      	ldr	r2, [pc, #120]	; (8009fb4 <HAL_TIM_Base_Start+0xbc>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d00e      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a1c      	ldr	r2, [pc, #112]	; (8009fb8 <HAL_TIM_Base_Start+0xc0>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d009      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a1b      	ldr	r2, [pc, #108]	; (8009fbc <HAL_TIM_Base_Start+0xc4>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d004      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a19      	ldr	r2, [pc, #100]	; (8009fc0 <HAL_TIM_Base_Start+0xc8>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d115      	bne.n	8009f8a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	4b17      	ldr	r3, [pc, #92]	; (8009fc4 <HAL_TIM_Base_Start+0xcc>)
 8009f66:	4013      	ands	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b06      	cmp	r3, #6
 8009f6e:	d015      	beq.n	8009f9c <HAL_TIM_Base_Start+0xa4>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f76:	d011      	beq.n	8009f9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f042 0201 	orr.w	r2, r2, #1
 8009f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f88:	e008      	b.n	8009f9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f042 0201 	orr.w	r2, r2, #1
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e000      	b.n	8009f9e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	40010000 	.word	0x40010000
 8009fb0:	40000400 	.word	0x40000400
 8009fb4:	40000800 	.word	0x40000800
 8009fb8:	40000c00 	.word	0x40000c00
 8009fbc:	40010400 	.word	0x40010400
 8009fc0:	40001800 	.word	0x40001800
 8009fc4:	00010007 	.word	0x00010007

08009fc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e049      	b.n	800a06e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d106      	bne.n	8009ff4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f841 	bl	800a076 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3304      	adds	r3, #4
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f000 fb4c 	bl	800a6a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
	...

0800a08c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d109      	bne.n	800a0b0 <HAL_TIM_PWM_Start+0x24>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	bf14      	ite	ne
 800a0a8:	2301      	movne	r3, #1
 800a0aa:	2300      	moveq	r3, #0
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	e03c      	b.n	800a12a <HAL_TIM_PWM_Start+0x9e>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b04      	cmp	r3, #4
 800a0b4:	d109      	bne.n	800a0ca <HAL_TIM_PWM_Start+0x3e>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	bf14      	ite	ne
 800a0c2:	2301      	movne	r3, #1
 800a0c4:	2300      	moveq	r3, #0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	e02f      	b.n	800a12a <HAL_TIM_PWM_Start+0x9e>
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	d109      	bne.n	800a0e4 <HAL_TIM_PWM_Start+0x58>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	bf14      	ite	ne
 800a0dc:	2301      	movne	r3, #1
 800a0de:	2300      	moveq	r3, #0
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	e022      	b.n	800a12a <HAL_TIM_PWM_Start+0x9e>
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	2b0c      	cmp	r3, #12
 800a0e8:	d109      	bne.n	800a0fe <HAL_TIM_PWM_Start+0x72>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	bf14      	ite	ne
 800a0f6:	2301      	movne	r3, #1
 800a0f8:	2300      	moveq	r3, #0
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	e015      	b.n	800a12a <HAL_TIM_PWM_Start+0x9e>
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2b10      	cmp	r3, #16
 800a102:	d109      	bne.n	800a118 <HAL_TIM_PWM_Start+0x8c>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	bf14      	ite	ne
 800a110:	2301      	movne	r3, #1
 800a112:	2300      	moveq	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	e008      	b.n	800a12a <HAL_TIM_PWM_Start+0x9e>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b01      	cmp	r3, #1
 800a122:	bf14      	ite	ne
 800a124:	2301      	movne	r3, #1
 800a126:	2300      	moveq	r3, #0
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e09c      	b.n	800a26c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d104      	bne.n	800a142 <HAL_TIM_PWM_Start+0xb6>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2202      	movs	r2, #2
 800a13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a140:	e023      	b.n	800a18a <HAL_TIM_PWM_Start+0xfe>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b04      	cmp	r3, #4
 800a146:	d104      	bne.n	800a152 <HAL_TIM_PWM_Start+0xc6>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a150:	e01b      	b.n	800a18a <HAL_TIM_PWM_Start+0xfe>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b08      	cmp	r3, #8
 800a156:	d104      	bne.n	800a162 <HAL_TIM_PWM_Start+0xd6>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a160:	e013      	b.n	800a18a <HAL_TIM_PWM_Start+0xfe>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b0c      	cmp	r3, #12
 800a166:	d104      	bne.n	800a172 <HAL_TIM_PWM_Start+0xe6>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a170:	e00b      	b.n	800a18a <HAL_TIM_PWM_Start+0xfe>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b10      	cmp	r3, #16
 800a176:	d104      	bne.n	800a182 <HAL_TIM_PWM_Start+0xf6>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a180:	e003      	b.n	800a18a <HAL_TIM_PWM_Start+0xfe>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2201      	movs	r2, #1
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 fe8c 	bl	800aeb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a35      	ldr	r2, [pc, #212]	; (800a274 <HAL_TIM_PWM_Start+0x1e8>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d013      	beq.n	800a1ca <HAL_TIM_PWM_Start+0x13e>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a34      	ldr	r2, [pc, #208]	; (800a278 <HAL_TIM_PWM_Start+0x1ec>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d00e      	beq.n	800a1ca <HAL_TIM_PWM_Start+0x13e>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a32      	ldr	r2, [pc, #200]	; (800a27c <HAL_TIM_PWM_Start+0x1f0>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d009      	beq.n	800a1ca <HAL_TIM_PWM_Start+0x13e>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a31      	ldr	r2, [pc, #196]	; (800a280 <HAL_TIM_PWM_Start+0x1f4>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d004      	beq.n	800a1ca <HAL_TIM_PWM_Start+0x13e>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a2f      	ldr	r2, [pc, #188]	; (800a284 <HAL_TIM_PWM_Start+0x1f8>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d101      	bne.n	800a1ce <HAL_TIM_PWM_Start+0x142>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e000      	b.n	800a1d0 <HAL_TIM_PWM_Start+0x144>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a22      	ldr	r2, [pc, #136]	; (800a274 <HAL_TIM_PWM_Start+0x1e8>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d01d      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1f6:	d018      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a22      	ldr	r2, [pc, #136]	; (800a288 <HAL_TIM_PWM_Start+0x1fc>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d013      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a21      	ldr	r2, [pc, #132]	; (800a28c <HAL_TIM_PWM_Start+0x200>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d00e      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a1f      	ldr	r2, [pc, #124]	; (800a290 <HAL_TIM_PWM_Start+0x204>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d009      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a17      	ldr	r2, [pc, #92]	; (800a278 <HAL_TIM_PWM_Start+0x1ec>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d004      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a1b      	ldr	r2, [pc, #108]	; (800a294 <HAL_TIM_PWM_Start+0x208>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d115      	bne.n	800a256 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	4b19      	ldr	r3, [pc, #100]	; (800a298 <HAL_TIM_PWM_Start+0x20c>)
 800a232:	4013      	ands	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b06      	cmp	r3, #6
 800a23a:	d015      	beq.n	800a268 <HAL_TIM_PWM_Start+0x1dc>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a242:	d011      	beq.n	800a268 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f042 0201 	orr.w	r2, r2, #1
 800a252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a254:	e008      	b.n	800a268 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f042 0201 	orr.w	r2, r2, #1
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	e000      	b.n	800a26a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a268:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	40010000 	.word	0x40010000
 800a278:	40010400 	.word	0x40010400
 800a27c:	40014000 	.word	0x40014000
 800a280:	40014400 	.word	0x40014400
 800a284:	40014800 	.word	0x40014800
 800a288:	40000400 	.word	0x40000400
 800a28c:	40000800 	.word	0x40000800
 800a290:	40000c00 	.word	0x40000c00
 800a294:	40001800 	.word	0x40001800
 800a298:	00010007 	.word	0x00010007

0800a29c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e0fd      	b.n	800a4b2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b14      	cmp	r3, #20
 800a2c2:	f200 80f0 	bhi.w	800a4a6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a2c6:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2cc:	0800a321 	.word	0x0800a321
 800a2d0:	0800a4a7 	.word	0x0800a4a7
 800a2d4:	0800a4a7 	.word	0x0800a4a7
 800a2d8:	0800a4a7 	.word	0x0800a4a7
 800a2dc:	0800a361 	.word	0x0800a361
 800a2e0:	0800a4a7 	.word	0x0800a4a7
 800a2e4:	0800a4a7 	.word	0x0800a4a7
 800a2e8:	0800a4a7 	.word	0x0800a4a7
 800a2ec:	0800a3a3 	.word	0x0800a3a3
 800a2f0:	0800a4a7 	.word	0x0800a4a7
 800a2f4:	0800a4a7 	.word	0x0800a4a7
 800a2f8:	0800a4a7 	.word	0x0800a4a7
 800a2fc:	0800a3e3 	.word	0x0800a3e3
 800a300:	0800a4a7 	.word	0x0800a4a7
 800a304:	0800a4a7 	.word	0x0800a4a7
 800a308:	0800a4a7 	.word	0x0800a4a7
 800a30c:	0800a425 	.word	0x0800a425
 800a310:	0800a4a7 	.word	0x0800a4a7
 800a314:	0800a4a7 	.word	0x0800a4a7
 800a318:	0800a4a7 	.word	0x0800a4a7
 800a31c:	0800a465 	.word	0x0800a465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68b9      	ldr	r1, [r7, #8]
 800a326:	4618      	mov	r0, r3
 800a328:	f000 fa56 	bl	800a7d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	699a      	ldr	r2, [r3, #24]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0208 	orr.w	r2, r2, #8
 800a33a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	699a      	ldr	r2, [r3, #24]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0204 	bic.w	r2, r2, #4
 800a34a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6999      	ldr	r1, [r3, #24]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	691a      	ldr	r2, [r3, #16]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	619a      	str	r2, [r3, #24]
      break;
 800a35e:	e0a3      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68b9      	ldr	r1, [r7, #8]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 fac6 	bl	800a8f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	699a      	ldr	r2, [r3, #24]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a37a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	699a      	ldr	r2, [r3, #24]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a38a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6999      	ldr	r1, [r3, #24]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	021a      	lsls	r2, r3, #8
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	430a      	orrs	r2, r1
 800a39e:	619a      	str	r2, [r3, #24]
      break;
 800a3a0:	e082      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fb2f 	bl	800aa0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69da      	ldr	r2, [r3, #28]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f042 0208 	orr.w	r2, r2, #8
 800a3bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69da      	ldr	r2, [r3, #28]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f022 0204 	bic.w	r2, r2, #4
 800a3cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	69d9      	ldr	r1, [r3, #28]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	691a      	ldr	r2, [r3, #16]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	61da      	str	r2, [r3, #28]
      break;
 800a3e0:	e062      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68b9      	ldr	r1, [r7, #8]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 fb95 	bl	800ab18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	69da      	ldr	r2, [r3, #28]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	69da      	ldr	r2, [r3, #28]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a40c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	69d9      	ldr	r1, [r3, #28]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	021a      	lsls	r2, r3, #8
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	61da      	str	r2, [r3, #28]
      break;
 800a422:	e041      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68b9      	ldr	r1, [r7, #8]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 fbdc 	bl	800abe8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f042 0208 	orr.w	r2, r2, #8
 800a43e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f022 0204 	bic.w	r2, r2, #4
 800a44e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	691a      	ldr	r2, [r3, #16]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a462:	e021      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68b9      	ldr	r1, [r7, #8]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 fc1e 	bl	800acac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a47e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a48e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	021a      	lsls	r2, r3, #8
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4a4:	e000      	b.n	800a4a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a4a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop

0800a4bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d101      	bne.n	800a4d4 <HAL_TIM_ConfigClockSource+0x18>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e0db      	b.n	800a68c <HAL_TIM_ConfigClockSource+0x1d0>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	4b69      	ldr	r3, [pc, #420]	; (800a694 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a63      	ldr	r2, [pc, #396]	; (800a698 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	f000 80a9 	beq.w	800a662 <HAL_TIM_ConfigClockSource+0x1a6>
 800a510:	4a61      	ldr	r2, [pc, #388]	; (800a698 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a512:	4293      	cmp	r3, r2
 800a514:	f200 80ae 	bhi.w	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a518:	4a60      	ldr	r2, [pc, #384]	; (800a69c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	f000 80a1 	beq.w	800a662 <HAL_TIM_ConfigClockSource+0x1a6>
 800a520:	4a5e      	ldr	r2, [pc, #376]	; (800a69c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a522:	4293      	cmp	r3, r2
 800a524:	f200 80a6 	bhi.w	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a528:	4a5d      	ldr	r2, [pc, #372]	; (800a6a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	f000 8099 	beq.w	800a662 <HAL_TIM_ConfigClockSource+0x1a6>
 800a530:	4a5b      	ldr	r2, [pc, #364]	; (800a6a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a532:	4293      	cmp	r3, r2
 800a534:	f200 809e 	bhi.w	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a538:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a53c:	f000 8091 	beq.w	800a662 <HAL_TIM_ConfigClockSource+0x1a6>
 800a540:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a544:	f200 8096 	bhi.w	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a54c:	f000 8089 	beq.w	800a662 <HAL_TIM_ConfigClockSource+0x1a6>
 800a550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a554:	f200 808e 	bhi.w	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a55c:	d03e      	beq.n	800a5dc <HAL_TIM_ConfigClockSource+0x120>
 800a55e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a562:	f200 8087 	bhi.w	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a56a:	f000 8085 	beq.w	800a678 <HAL_TIM_ConfigClockSource+0x1bc>
 800a56e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a572:	d87f      	bhi.n	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a574:	2b70      	cmp	r3, #112	; 0x70
 800a576:	d01a      	beq.n	800a5ae <HAL_TIM_ConfigClockSource+0xf2>
 800a578:	2b70      	cmp	r3, #112	; 0x70
 800a57a:	d87b      	bhi.n	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a57c:	2b60      	cmp	r3, #96	; 0x60
 800a57e:	d050      	beq.n	800a622 <HAL_TIM_ConfigClockSource+0x166>
 800a580:	2b60      	cmp	r3, #96	; 0x60
 800a582:	d877      	bhi.n	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a584:	2b50      	cmp	r3, #80	; 0x50
 800a586:	d03c      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x146>
 800a588:	2b50      	cmp	r3, #80	; 0x50
 800a58a:	d873      	bhi.n	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a58c:	2b40      	cmp	r3, #64	; 0x40
 800a58e:	d058      	beq.n	800a642 <HAL_TIM_ConfigClockSource+0x186>
 800a590:	2b40      	cmp	r3, #64	; 0x40
 800a592:	d86f      	bhi.n	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a594:	2b30      	cmp	r3, #48	; 0x30
 800a596:	d064      	beq.n	800a662 <HAL_TIM_ConfigClockSource+0x1a6>
 800a598:	2b30      	cmp	r3, #48	; 0x30
 800a59a:	d86b      	bhi.n	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a59c:	2b20      	cmp	r3, #32
 800a59e:	d060      	beq.n	800a662 <HAL_TIM_ConfigClockSource+0x1a6>
 800a5a0:	2b20      	cmp	r3, #32
 800a5a2:	d867      	bhi.n	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d05c      	beq.n	800a662 <HAL_TIM_ConfigClockSource+0x1a6>
 800a5a8:	2b10      	cmp	r3, #16
 800a5aa:	d05a      	beq.n	800a662 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a5ac:	e062      	b.n	800a674 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6818      	ldr	r0, [r3, #0]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	6899      	ldr	r1, [r3, #8]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f000 fc57 	bl	800ae70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a5d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	609a      	str	r2, [r3, #8]
      break;
 800a5da:	e04e      	b.n	800a67a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6818      	ldr	r0, [r3, #0]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	6899      	ldr	r1, [r3, #8]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	f000 fc40 	bl	800ae70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689a      	ldr	r2, [r3, #8]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5fe:	609a      	str	r2, [r3, #8]
      break;
 800a600:	e03b      	b.n	800a67a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6818      	ldr	r0, [r3, #0]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	6859      	ldr	r1, [r3, #4]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	461a      	mov	r2, r3
 800a610:	f000 fbb0 	bl	800ad74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2150      	movs	r1, #80	; 0x50
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 fc0a 	bl	800ae34 <TIM_ITRx_SetConfig>
      break;
 800a620:	e02b      	b.n	800a67a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6818      	ldr	r0, [r3, #0]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	6859      	ldr	r1, [r3, #4]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	461a      	mov	r2, r3
 800a630:	f000 fbcf 	bl	800add2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2160      	movs	r1, #96	; 0x60
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 fbfa 	bl	800ae34 <TIM_ITRx_SetConfig>
      break;
 800a640:	e01b      	b.n	800a67a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6859      	ldr	r1, [r3, #4]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	461a      	mov	r2, r3
 800a650:	f000 fb90 	bl	800ad74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2140      	movs	r1, #64	; 0x40
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 fbea 	bl	800ae34 <TIM_ITRx_SetConfig>
      break;
 800a660:	e00b      	b.n	800a67a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4619      	mov	r1, r3
 800a66c:	4610      	mov	r0, r2
 800a66e:	f000 fbe1 	bl	800ae34 <TIM_ITRx_SetConfig>
        break;
 800a672:	e002      	b.n	800a67a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a674:	bf00      	nop
 800a676:	e000      	b.n	800a67a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a678:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	ffceff88 	.word	0xffceff88
 800a698:	00100040 	.word	0x00100040
 800a69c:	00100030 	.word	0x00100030
 800a6a0:	00100020 	.word	0x00100020

0800a6a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a40      	ldr	r2, [pc, #256]	; (800a7b8 <TIM_Base_SetConfig+0x114>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d013      	beq.n	800a6e4 <TIM_Base_SetConfig+0x40>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c2:	d00f      	beq.n	800a6e4 <TIM_Base_SetConfig+0x40>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a3d      	ldr	r2, [pc, #244]	; (800a7bc <TIM_Base_SetConfig+0x118>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d00b      	beq.n	800a6e4 <TIM_Base_SetConfig+0x40>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a3c      	ldr	r2, [pc, #240]	; (800a7c0 <TIM_Base_SetConfig+0x11c>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d007      	beq.n	800a6e4 <TIM_Base_SetConfig+0x40>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a3b      	ldr	r2, [pc, #236]	; (800a7c4 <TIM_Base_SetConfig+0x120>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d003      	beq.n	800a6e4 <TIM_Base_SetConfig+0x40>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a3a      	ldr	r2, [pc, #232]	; (800a7c8 <TIM_Base_SetConfig+0x124>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d108      	bne.n	800a6f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a2f      	ldr	r2, [pc, #188]	; (800a7b8 <TIM_Base_SetConfig+0x114>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d01f      	beq.n	800a73e <TIM_Base_SetConfig+0x9a>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a704:	d01b      	beq.n	800a73e <TIM_Base_SetConfig+0x9a>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a2c      	ldr	r2, [pc, #176]	; (800a7bc <TIM_Base_SetConfig+0x118>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d017      	beq.n	800a73e <TIM_Base_SetConfig+0x9a>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a2b      	ldr	r2, [pc, #172]	; (800a7c0 <TIM_Base_SetConfig+0x11c>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d013      	beq.n	800a73e <TIM_Base_SetConfig+0x9a>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a2a      	ldr	r2, [pc, #168]	; (800a7c4 <TIM_Base_SetConfig+0x120>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d00f      	beq.n	800a73e <TIM_Base_SetConfig+0x9a>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a29      	ldr	r2, [pc, #164]	; (800a7c8 <TIM_Base_SetConfig+0x124>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d00b      	beq.n	800a73e <TIM_Base_SetConfig+0x9a>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a28      	ldr	r2, [pc, #160]	; (800a7cc <TIM_Base_SetConfig+0x128>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d007      	beq.n	800a73e <TIM_Base_SetConfig+0x9a>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a27      	ldr	r2, [pc, #156]	; (800a7d0 <TIM_Base_SetConfig+0x12c>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d003      	beq.n	800a73e <TIM_Base_SetConfig+0x9a>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a26      	ldr	r2, [pc, #152]	; (800a7d4 <TIM_Base_SetConfig+0x130>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d108      	bne.n	800a750 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	689a      	ldr	r2, [r3, #8]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a10      	ldr	r2, [pc, #64]	; (800a7b8 <TIM_Base_SetConfig+0x114>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d00f      	beq.n	800a79c <TIM_Base_SetConfig+0xf8>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a12      	ldr	r2, [pc, #72]	; (800a7c8 <TIM_Base_SetConfig+0x124>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d00b      	beq.n	800a79c <TIM_Base_SetConfig+0xf8>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a11      	ldr	r2, [pc, #68]	; (800a7cc <TIM_Base_SetConfig+0x128>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d007      	beq.n	800a79c <TIM_Base_SetConfig+0xf8>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a10      	ldr	r2, [pc, #64]	; (800a7d0 <TIM_Base_SetConfig+0x12c>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d003      	beq.n	800a79c <TIM_Base_SetConfig+0xf8>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a0f      	ldr	r2, [pc, #60]	; (800a7d4 <TIM_Base_SetConfig+0x130>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d103      	bne.n	800a7a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	691a      	ldr	r2, [r3, #16]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	615a      	str	r2, [r3, #20]
}
 800a7aa:	bf00      	nop
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40010000 	.word	0x40010000
 800a7bc:	40000400 	.word	0x40000400
 800a7c0:	40000800 	.word	0x40000800
 800a7c4:	40000c00 	.word	0x40000c00
 800a7c8:	40010400 	.word	0x40010400
 800a7cc:	40014000 	.word	0x40014000
 800a7d0:	40014400 	.word	0x40014400
 800a7d4:	40014800 	.word	0x40014800

0800a7d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a1b      	ldr	r3, [r3, #32]
 800a7e6:	f023 0201 	bic.w	r2, r3, #1
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4b37      	ldr	r3, [pc, #220]	; (800a8e0 <TIM_OC1_SetConfig+0x108>)
 800a804:	4013      	ands	r3, r2
 800a806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f023 0303 	bic.w	r3, r3, #3
 800a80e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f023 0302 	bic.w	r3, r3, #2
 800a820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	4313      	orrs	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a2d      	ldr	r2, [pc, #180]	; (800a8e4 <TIM_OC1_SetConfig+0x10c>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d00f      	beq.n	800a854 <TIM_OC1_SetConfig+0x7c>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a2c      	ldr	r2, [pc, #176]	; (800a8e8 <TIM_OC1_SetConfig+0x110>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00b      	beq.n	800a854 <TIM_OC1_SetConfig+0x7c>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a2b      	ldr	r2, [pc, #172]	; (800a8ec <TIM_OC1_SetConfig+0x114>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d007      	beq.n	800a854 <TIM_OC1_SetConfig+0x7c>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a2a      	ldr	r2, [pc, #168]	; (800a8f0 <TIM_OC1_SetConfig+0x118>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d003      	beq.n	800a854 <TIM_OC1_SetConfig+0x7c>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a29      	ldr	r2, [pc, #164]	; (800a8f4 <TIM_OC1_SetConfig+0x11c>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d10c      	bne.n	800a86e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f023 0308 	bic.w	r3, r3, #8
 800a85a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4313      	orrs	r3, r2
 800a864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f023 0304 	bic.w	r3, r3, #4
 800a86c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a1c      	ldr	r2, [pc, #112]	; (800a8e4 <TIM_OC1_SetConfig+0x10c>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d00f      	beq.n	800a896 <TIM_OC1_SetConfig+0xbe>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a1b      	ldr	r2, [pc, #108]	; (800a8e8 <TIM_OC1_SetConfig+0x110>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00b      	beq.n	800a896 <TIM_OC1_SetConfig+0xbe>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a1a      	ldr	r2, [pc, #104]	; (800a8ec <TIM_OC1_SetConfig+0x114>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d007      	beq.n	800a896 <TIM_OC1_SetConfig+0xbe>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a19      	ldr	r2, [pc, #100]	; (800a8f0 <TIM_OC1_SetConfig+0x118>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d003      	beq.n	800a896 <TIM_OC1_SetConfig+0xbe>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a18      	ldr	r2, [pc, #96]	; (800a8f4 <TIM_OC1_SetConfig+0x11c>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d111      	bne.n	800a8ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a89c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	685a      	ldr	r2, [r3, #4]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	621a      	str	r2, [r3, #32]
}
 800a8d4:	bf00      	nop
 800a8d6:	371c      	adds	r7, #28
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	fffeff8f 	.word	0xfffeff8f
 800a8e4:	40010000 	.word	0x40010000
 800a8e8:	40010400 	.word	0x40010400
 800a8ec:	40014000 	.word	0x40014000
 800a8f0:	40014400 	.word	0x40014400
 800a8f4:	40014800 	.word	0x40014800

0800a8f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	f023 0210 	bic.w	r2, r3, #16
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4b34      	ldr	r3, [pc, #208]	; (800a9f4 <TIM_OC2_SetConfig+0xfc>)
 800a924:	4013      	ands	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a92e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	021b      	lsls	r3, r3, #8
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	4313      	orrs	r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f023 0320 	bic.w	r3, r3, #32
 800a942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	011b      	lsls	r3, r3, #4
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a29      	ldr	r2, [pc, #164]	; (800a9f8 <TIM_OC2_SetConfig+0x100>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d003      	beq.n	800a960 <TIM_OC2_SetConfig+0x68>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a28      	ldr	r2, [pc, #160]	; (800a9fc <TIM_OC2_SetConfig+0x104>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d10d      	bne.n	800a97c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	011b      	lsls	r3, r3, #4
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	4313      	orrs	r3, r2
 800a972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a97a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a1e      	ldr	r2, [pc, #120]	; (800a9f8 <TIM_OC2_SetConfig+0x100>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d00f      	beq.n	800a9a4 <TIM_OC2_SetConfig+0xac>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a1d      	ldr	r2, [pc, #116]	; (800a9fc <TIM_OC2_SetConfig+0x104>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00b      	beq.n	800a9a4 <TIM_OC2_SetConfig+0xac>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a1c      	ldr	r2, [pc, #112]	; (800aa00 <TIM_OC2_SetConfig+0x108>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d007      	beq.n	800a9a4 <TIM_OC2_SetConfig+0xac>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a1b      	ldr	r2, [pc, #108]	; (800aa04 <TIM_OC2_SetConfig+0x10c>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d003      	beq.n	800a9a4 <TIM_OC2_SetConfig+0xac>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a1a      	ldr	r2, [pc, #104]	; (800aa08 <TIM_OC2_SetConfig+0x110>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d113      	bne.n	800a9cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	621a      	str	r2, [r3, #32]
}
 800a9e6:	bf00      	nop
 800a9e8:	371c      	adds	r7, #28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	feff8fff 	.word	0xfeff8fff
 800a9f8:	40010000 	.word	0x40010000
 800a9fc:	40010400 	.word	0x40010400
 800aa00:	40014000 	.word	0x40014000
 800aa04:	40014400 	.word	0x40014400
 800aa08:	40014800 	.word	0x40014800

0800aa0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 0303 	bic.w	r3, r3, #3
 800aa42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	021b      	lsls	r3, r3, #8
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a27      	ldr	r2, [pc, #156]	; (800ab04 <TIM_OC3_SetConfig+0xf8>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d003      	beq.n	800aa72 <TIM_OC3_SetConfig+0x66>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a26      	ldr	r2, [pc, #152]	; (800ab08 <TIM_OC3_SetConfig+0xfc>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d10d      	bne.n	800aa8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	021b      	lsls	r3, r3, #8
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a1c      	ldr	r2, [pc, #112]	; (800ab04 <TIM_OC3_SetConfig+0xf8>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d00f      	beq.n	800aab6 <TIM_OC3_SetConfig+0xaa>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a1b      	ldr	r2, [pc, #108]	; (800ab08 <TIM_OC3_SetConfig+0xfc>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d00b      	beq.n	800aab6 <TIM_OC3_SetConfig+0xaa>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a1a      	ldr	r2, [pc, #104]	; (800ab0c <TIM_OC3_SetConfig+0x100>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d007      	beq.n	800aab6 <TIM_OC3_SetConfig+0xaa>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a19      	ldr	r2, [pc, #100]	; (800ab10 <TIM_OC3_SetConfig+0x104>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d003      	beq.n	800aab6 <TIM_OC3_SetConfig+0xaa>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a18      	ldr	r2, [pc, #96]	; (800ab14 <TIM_OC3_SetConfig+0x108>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d113      	bne.n	800aade <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aabc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	011b      	lsls	r3, r3, #4
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	4313      	orrs	r3, r2
 800aad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	011b      	lsls	r3, r3, #4
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	4313      	orrs	r3, r2
 800aadc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	621a      	str	r2, [r3, #32]
}
 800aaf8:	bf00      	nop
 800aafa:	371c      	adds	r7, #28
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	40010000 	.word	0x40010000
 800ab08:	40010400 	.word	0x40010400
 800ab0c:	40014000 	.word	0x40014000
 800ab10:	40014400 	.word	0x40014400
 800ab14:	40014800 	.word	0x40014800

0800ab18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	021b      	lsls	r3, r3, #8
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	031b      	lsls	r3, r3, #12
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a18      	ldr	r2, [pc, #96]	; (800abd4 <TIM_OC4_SetConfig+0xbc>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d00f      	beq.n	800ab98 <TIM_OC4_SetConfig+0x80>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a17      	ldr	r2, [pc, #92]	; (800abd8 <TIM_OC4_SetConfig+0xc0>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d00b      	beq.n	800ab98 <TIM_OC4_SetConfig+0x80>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a16      	ldr	r2, [pc, #88]	; (800abdc <TIM_OC4_SetConfig+0xc4>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d007      	beq.n	800ab98 <TIM_OC4_SetConfig+0x80>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a15      	ldr	r2, [pc, #84]	; (800abe0 <TIM_OC4_SetConfig+0xc8>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d003      	beq.n	800ab98 <TIM_OC4_SetConfig+0x80>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a14      	ldr	r2, [pc, #80]	; (800abe4 <TIM_OC4_SetConfig+0xcc>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d109      	bne.n	800abac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	019b      	lsls	r3, r3, #6
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	621a      	str	r2, [r3, #32]
}
 800abc6:	bf00      	nop
 800abc8:	371c      	adds	r7, #28
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	40010000 	.word	0x40010000
 800abd8:	40010400 	.word	0x40010400
 800abdc:	40014000 	.word	0x40014000
 800abe0:	40014400 	.word	0x40014400
 800abe4:	40014800 	.word	0x40014800

0800abe8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ac28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	041b      	lsls	r3, r3, #16
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a17      	ldr	r2, [pc, #92]	; (800ac98 <TIM_OC5_SetConfig+0xb0>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d00f      	beq.n	800ac5e <TIM_OC5_SetConfig+0x76>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a16      	ldr	r2, [pc, #88]	; (800ac9c <TIM_OC5_SetConfig+0xb4>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d00b      	beq.n	800ac5e <TIM_OC5_SetConfig+0x76>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a15      	ldr	r2, [pc, #84]	; (800aca0 <TIM_OC5_SetConfig+0xb8>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d007      	beq.n	800ac5e <TIM_OC5_SetConfig+0x76>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a14      	ldr	r2, [pc, #80]	; (800aca4 <TIM_OC5_SetConfig+0xbc>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d003      	beq.n	800ac5e <TIM_OC5_SetConfig+0x76>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a13      	ldr	r2, [pc, #76]	; (800aca8 <TIM_OC5_SetConfig+0xc0>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d109      	bne.n	800ac72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	685a      	ldr	r2, [r3, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	621a      	str	r2, [r3, #32]
}
 800ac8c:	bf00      	nop
 800ac8e:	371c      	adds	r7, #28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	40010000 	.word	0x40010000
 800ac9c:	40010400 	.word	0x40010400
 800aca0:	40014000 	.word	0x40014000
 800aca4:	40014400 	.word	0x40014400
 800aca8:	40014800 	.word	0x40014800

0800acac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800acac:	b480      	push	{r7}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	021b      	lsls	r3, r3, #8
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	051b      	lsls	r3, r3, #20
 800acf6:	693a      	ldr	r2, [r7, #16]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a18      	ldr	r2, [pc, #96]	; (800ad60 <TIM_OC6_SetConfig+0xb4>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d00f      	beq.n	800ad24 <TIM_OC6_SetConfig+0x78>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a17      	ldr	r2, [pc, #92]	; (800ad64 <TIM_OC6_SetConfig+0xb8>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00b      	beq.n	800ad24 <TIM_OC6_SetConfig+0x78>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a16      	ldr	r2, [pc, #88]	; (800ad68 <TIM_OC6_SetConfig+0xbc>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d007      	beq.n	800ad24 <TIM_OC6_SetConfig+0x78>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a15      	ldr	r2, [pc, #84]	; (800ad6c <TIM_OC6_SetConfig+0xc0>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d003      	beq.n	800ad24 <TIM_OC6_SetConfig+0x78>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a14      	ldr	r2, [pc, #80]	; (800ad70 <TIM_OC6_SetConfig+0xc4>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d109      	bne.n	800ad38 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	029b      	lsls	r3, r3, #10
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	697a      	ldr	r2, [r7, #20]
 800ad3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	685a      	ldr	r2, [r3, #4]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	621a      	str	r2, [r3, #32]
}
 800ad52:	bf00      	nop
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	40010000 	.word	0x40010000
 800ad64:	40010400 	.word	0x40010400
 800ad68:	40014000 	.word	0x40014000
 800ad6c:	40014400 	.word	0x40014400
 800ad70:	40014800 	.word	0x40014800

0800ad74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b087      	sub	sp, #28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	f023 0201 	bic.w	r2, r3, #1
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f023 030a 	bic.w	r3, r3, #10
 800adb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	621a      	str	r2, [r3, #32]
}
 800adc6:	bf00      	nop
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800add2:	b480      	push	{r7}
 800add4:	b087      	sub	sp, #28
 800add6:	af00      	add	r7, sp, #0
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	f023 0210 	bic.w	r2, r3, #16
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6a1b      	ldr	r3, [r3, #32]
 800adf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800adfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	031b      	lsls	r3, r3, #12
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	4313      	orrs	r3, r2
 800ae06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	697a      	ldr	r2, [r7, #20]
 800ae1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	621a      	str	r2, [r3, #32]
}
 800ae26:	bf00      	nop
 800ae28:	371c      	adds	r7, #28
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
	...

0800ae34 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	4b09      	ldr	r3, [pc, #36]	; (800ae6c <TIM_ITRx_SetConfig+0x38>)
 800ae48:	4013      	ands	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae4c:	683a      	ldr	r2, [r7, #0]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	f043 0307 	orr.w	r3, r3, #7
 800ae56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	609a      	str	r2, [r3, #8]
}
 800ae5e:	bf00      	nop
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	ffcfff8f 	.word	0xffcfff8f

0800ae70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	021a      	lsls	r2, r3, #8
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	431a      	orrs	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	609a      	str	r2, [r3, #8]
}
 800aea4:	bf00      	nop
 800aea6:	371c      	adds	r7, #28
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	f003 031f 	and.w	r3, r3, #31
 800aec2:	2201      	movs	r2, #1
 800aec4:	fa02 f303 	lsl.w	r3, r2, r3
 800aec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6a1a      	ldr	r2, [r3, #32]
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	43db      	mvns	r3, r3
 800aed2:	401a      	ands	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6a1a      	ldr	r2, [r3, #32]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f003 031f 	and.w	r3, r3, #31
 800aee2:	6879      	ldr	r1, [r7, #4]
 800aee4:	fa01 f303 	lsl.w	r3, r1, r3
 800aee8:	431a      	orrs	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	621a      	str	r2, [r3, #32]
}
 800aeee:	bf00      	nop
 800aef0:	371c      	adds	r7, #28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
	...

0800aefc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d101      	bne.n	800af14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af10:	2302      	movs	r3, #2
 800af12:	e068      	b.n	800afe6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2202      	movs	r2, #2
 800af20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a2e      	ldr	r2, [pc, #184]	; (800aff4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d004      	beq.n	800af48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a2d      	ldr	r2, [pc, #180]	; (800aff8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d108      	bne.n	800af5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	4313      	orrs	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a1e      	ldr	r2, [pc, #120]	; (800aff4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d01d      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af86:	d018      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a1b      	ldr	r2, [pc, #108]	; (800affc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d013      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a1a      	ldr	r2, [pc, #104]	; (800b000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d00e      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a18      	ldr	r2, [pc, #96]	; (800b004 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d009      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a13      	ldr	r2, [pc, #76]	; (800aff8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d004      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a14      	ldr	r2, [pc, #80]	; (800b008 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d10c      	bne.n	800afd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3714      	adds	r7, #20
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	40010000 	.word	0x40010000
 800aff8:	40010400 	.word	0x40010400
 800affc:	40000400 	.word	0x40000400
 800b000:	40000800 	.word	0x40000800
 800b004:	40000c00 	.word	0x40000c00
 800b008:	40001800 	.word	0x40001800

0800b00c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b016:	2300      	movs	r3, #0
 800b018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b020:	2b01      	cmp	r3, #1
 800b022:	d101      	bne.n	800b028 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b024:	2302      	movs	r3, #2
 800b026:	e065      	b.n	800b0f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	4313      	orrs	r3, r2
 800b04a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	4313      	orrs	r3, r2
 800b058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4313      	orrs	r3, r2
 800b066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	4313      	orrs	r3, r2
 800b074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	695b      	ldr	r3, [r3, #20]
 800b080:	4313      	orrs	r3, r2
 800b082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08e:	4313      	orrs	r3, r2
 800b090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	041b      	lsls	r3, r3, #16
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a16      	ldr	r2, [pc, #88]	; (800b100 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d004      	beq.n	800b0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a14      	ldr	r2, [pc, #80]	; (800b104 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d115      	bne.n	800b0e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c0:	051b      	lsls	r3, r3, #20
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	69db      	ldr	r3, [r3, #28]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	6a1b      	ldr	r3, [r3, #32]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	40010000 	.word	0x40010000
 800b104:	40010400 	.word	0x40010400

0800b108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e042      	b.n	800b1a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b120:	2b00      	cmp	r3, #0
 800b122:	d106      	bne.n	800b132 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7f6 fcff 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2224      	movs	r2, #36	; 0x24
 800b136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f022 0201 	bic.w	r2, r2, #1
 800b148:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fb60 	bl	800b810 <UART_SetConfig>
 800b150:	4603      	mov	r3, r0
 800b152:	2b01      	cmp	r3, #1
 800b154:	d101      	bne.n	800b15a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e022      	b.n	800b1a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d002      	beq.n	800b168 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f001 f8b4 	bl	800c2d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689a      	ldr	r2, [r3, #8]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f042 0201 	orr.w	r2, r2, #1
 800b196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f001 f93b 	bl	800c414 <UART_CheckIdleState>
 800b19e:	4603      	mov	r3, r0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d131      	bne.n	800b224 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <HAL_UART_Receive_DMA+0x24>
 800b1c6:	88fb      	ldrh	r3, [r7, #6]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e02a      	b.n	800b226 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d101      	bne.n	800b1de <HAL_UART_Receive_DMA+0x36>
 800b1da:	2302      	movs	r3, #2
 800b1dc:	e023      	b.n	800b226 <HAL_UART_Receive_DMA+0x7e>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a0f      	ldr	r2, [pc, #60]	; (800b230 <HAL_UART_Receive_DMA+0x88>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d00e      	beq.n	800b214 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b200:	2b00      	cmp	r3, #0
 800b202:	d007      	beq.n	800b214 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b212:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b214:	88fb      	ldrh	r3, [r7, #6]
 800b216:	461a      	mov	r2, r3
 800b218:	68b9      	ldr	r1, [r7, #8]
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f001 f9c6 	bl	800c5ac <UART_Start_Receive_DMA>
 800b220:	4603      	mov	r3, r0
 800b222:	e000      	b.n	800b226 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b224:	2302      	movs	r3, #2
  }
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	58000c00 	.word	0x58000c00

0800b234 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b254:	69fa      	ldr	r2, [r7, #28]
 800b256:	f640 030f 	movw	r3, #2063	; 0x80f
 800b25a:	4013      	ands	r3, r2
 800b25c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d118      	bne.n	800b296 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	f003 0320 	and.w	r3, r3, #32
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d013      	beq.n	800b296 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	f003 0320 	and.w	r3, r3, #32
 800b274:	2b00      	cmp	r3, #0
 800b276:	d104      	bne.n	800b282 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d009      	beq.n	800b296 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 8282 	beq.w	800b790 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	4798      	blx	r3
      }
      return;
 800b294:	e27c      	b.n	800b790 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 80ef 	beq.w	800b47c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	4b73      	ldr	r3, [pc, #460]	; (800b470 <HAL_UART_IRQHandler+0x23c>)
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d105      	bne.n	800b2b4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b2a8:	69ba      	ldr	r2, [r7, #24]
 800b2aa:	4b72      	ldr	r3, [pc, #456]	; (800b474 <HAL_UART_IRQHandler+0x240>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 80e4 	beq.w	800b47c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d010      	beq.n	800b2e0 <HAL_UART_IRQHandler+0xac>
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00b      	beq.n	800b2e0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2d6:	f043 0201 	orr.w	r2, r3, #1
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	f003 0302 	and.w	r3, r3, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d010      	beq.n	800b30c <HAL_UART_IRQHandler+0xd8>
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00b      	beq.n	800b30c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b302:	f043 0204 	orr.w	r2, r3, #4
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	f003 0304 	and.w	r3, r3, #4
 800b312:	2b00      	cmp	r3, #0
 800b314:	d010      	beq.n	800b338 <HAL_UART_IRQHandler+0x104>
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f003 0301 	and.w	r3, r3, #1
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00b      	beq.n	800b338 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2204      	movs	r2, #4
 800b326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b32e:	f043 0202 	orr.w	r2, r3, #2
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	f003 0308 	and.w	r3, r3, #8
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d015      	beq.n	800b36e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	f003 0320 	and.w	r3, r3, #32
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d104      	bne.n	800b356 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b34c:	697a      	ldr	r2, [r7, #20]
 800b34e:	4b48      	ldr	r3, [pc, #288]	; (800b470 <HAL_UART_IRQHandler+0x23c>)
 800b350:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00b      	beq.n	800b36e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2208      	movs	r2, #8
 800b35c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b364:	f043 0208 	orr.w	r2, r3, #8
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b374:	2b00      	cmp	r3, #0
 800b376:	d011      	beq.n	800b39c <HAL_UART_IRQHandler+0x168>
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00c      	beq.n	800b39c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b38a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b392:	f043 0220 	orr.w	r2, r3, #32
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 81f6 	beq.w	800b794 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	f003 0320 	and.w	r3, r3, #32
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d011      	beq.n	800b3d6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	f003 0320 	and.w	r3, r3, #32
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d104      	bne.n	800b3c6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d007      	beq.n	800b3d6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e8:	2b40      	cmp	r3, #64	; 0x40
 800b3ea:	d004      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d031      	beq.n	800b45a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f001 f964 	bl	800c6c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b406:	2b40      	cmp	r3, #64	; 0x40
 800b408:	d123      	bne.n	800b452 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	689a      	ldr	r2, [r3, #8]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b418:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d013      	beq.n	800b44a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b426:	4a14      	ldr	r2, [pc, #80]	; (800b478 <HAL_UART_IRQHandler+0x244>)
 800b428:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b42e:	4618      	mov	r0, r3
 800b430:	f7f8 f87e 	bl	8003530 <HAL_DMA_Abort_IT>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d017      	beq.n	800b46a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b43e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b448:	e00f      	b.n	800b46a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f9ca 	bl	800b7e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b450:	e00b      	b.n	800b46a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f9c6 	bl	800b7e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b458:	e007      	b.n	800b46a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f9c2 	bl	800b7e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b468:	e194      	b.n	800b794 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b46a:	bf00      	nop
    return;
 800b46c:	e192      	b.n	800b794 <HAL_UART_IRQHandler+0x560>
 800b46e:	bf00      	nop
 800b470:	10000001 	.word	0x10000001
 800b474:	04000120 	.word	0x04000120
 800b478:	0800c877 	.word	0x0800c877

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b480:	2b01      	cmp	r3, #1
 800b482:	f040 810f 	bne.w	800b6a4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	f003 0310 	and.w	r3, r3, #16
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 8109 	beq.w	800b6a4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	f003 0310 	and.w	r3, r3, #16
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 8103 	beq.w	800b6a4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2210      	movs	r2, #16
 800b4a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b0:	2b40      	cmp	r3, #64	; 0x40
 800b4b2:	f040 80bb 	bne.w	800b62c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a96      	ldr	r2, [pc, #600]	; (800b718 <HAL_UART_IRQHandler+0x4e4>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d059      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a94      	ldr	r2, [pc, #592]	; (800b71c <HAL_UART_IRQHandler+0x4e8>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d053      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a92      	ldr	r2, [pc, #584]	; (800b720 <HAL_UART_IRQHandler+0x4ec>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d04d      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a90      	ldr	r2, [pc, #576]	; (800b724 <HAL_UART_IRQHandler+0x4f0>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d047      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a8e      	ldr	r2, [pc, #568]	; (800b728 <HAL_UART_IRQHandler+0x4f4>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d041      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a8c      	ldr	r2, [pc, #560]	; (800b72c <HAL_UART_IRQHandler+0x4f8>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d03b      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a8a      	ldr	r2, [pc, #552]	; (800b730 <HAL_UART_IRQHandler+0x4fc>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d035      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a88      	ldr	r2, [pc, #544]	; (800b734 <HAL_UART_IRQHandler+0x500>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d02f      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a86      	ldr	r2, [pc, #536]	; (800b738 <HAL_UART_IRQHandler+0x504>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d029      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a84      	ldr	r2, [pc, #528]	; (800b73c <HAL_UART_IRQHandler+0x508>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d023      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a82      	ldr	r2, [pc, #520]	; (800b740 <HAL_UART_IRQHandler+0x50c>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d01d      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a80      	ldr	r2, [pc, #512]	; (800b744 <HAL_UART_IRQHandler+0x510>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d017      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a7e      	ldr	r2, [pc, #504]	; (800b748 <HAL_UART_IRQHandler+0x514>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d011      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a7c      	ldr	r2, [pc, #496]	; (800b74c <HAL_UART_IRQHandler+0x518>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d00b      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a7a      	ldr	r2, [pc, #488]	; (800b750 <HAL_UART_IRQHandler+0x51c>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d005      	beq.n	800b576 <HAL_UART_IRQHandler+0x342>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a78      	ldr	r2, [pc, #480]	; (800b754 <HAL_UART_IRQHandler+0x520>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d105      	bne.n	800b582 <HAL_UART_IRQHandler+0x34e>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	b29b      	uxth	r3, r3
 800b580:	e004      	b.n	800b58c <HAL_UART_IRQHandler+0x358>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b58e:	893b      	ldrh	r3, [r7, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 8101 	beq.w	800b798 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b59c:	893a      	ldrh	r2, [r7, #8]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	f080 80fa 	bcs.w	800b798 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	893a      	ldrh	r2, [r7, #8]
 800b5a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5b6:	d02b      	beq.n	800b610 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	689a      	ldr	r2, [r3, #8]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f022 0201 	bic.w	r2, r2, #1
 800b5d6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	689a      	ldr	r2, [r3, #8]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5e6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2220      	movs	r2, #32
 800b5ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f022 0210 	bic.w	r2, r2, #16
 800b604:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7f7 fc72 	bl	8002ef4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	b29b      	uxth	r3, r3
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f8e7 	bl	800b7f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b62a:	e0b5      	b.n	800b798 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b638:	b29b      	uxth	r3, r3
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b644:	b29b      	uxth	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	f000 80a8 	beq.w	800b79c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b64c:	897b      	ldrh	r3, [r7, #10]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 80a4 	beq.w	800b79c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b662:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	6899      	ldr	r1, [r3, #8]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	4b3a      	ldr	r3, [pc, #232]	; (800b758 <HAL_UART_IRQHandler+0x524>)
 800b670:	400b      	ands	r3, r1
 800b672:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2220      	movs	r2, #32
 800b678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f022 0210 	bic.w	r2, r2, #16
 800b696:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b698:	897b      	ldrh	r3, [r7, #10]
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f8ab 	bl	800b7f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6a2:	e07b      	b.n	800b79c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00d      	beq.n	800b6ca <HAL_UART_IRQHandler+0x496>
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d008      	beq.n	800b6ca <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b6c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 f907 	bl	800c8d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6c8:	e06b      	b.n	800b7a2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d012      	beq.n	800b6fa <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d104      	bne.n	800b6e8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d008      	beq.n	800b6fa <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d057      	beq.n	800b7a0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	4798      	blx	r3
    }
    return;
 800b6f8:	e052      	b.n	800b7a0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b700:	2b00      	cmp	r3, #0
 800b702:	d02b      	beq.n	800b75c <HAL_UART_IRQHandler+0x528>
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d026      	beq.n	800b75c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f001 f8c7 	bl	800c8a2 <UART_EndTransmit_IT>
    return;
 800b714:	e045      	b.n	800b7a2 <HAL_UART_IRQHandler+0x56e>
 800b716:	bf00      	nop
 800b718:	40020010 	.word	0x40020010
 800b71c:	40020028 	.word	0x40020028
 800b720:	40020040 	.word	0x40020040
 800b724:	40020058 	.word	0x40020058
 800b728:	40020070 	.word	0x40020070
 800b72c:	40020088 	.word	0x40020088
 800b730:	400200a0 	.word	0x400200a0
 800b734:	400200b8 	.word	0x400200b8
 800b738:	40020410 	.word	0x40020410
 800b73c:	40020428 	.word	0x40020428
 800b740:	40020440 	.word	0x40020440
 800b744:	40020458 	.word	0x40020458
 800b748:	40020470 	.word	0x40020470
 800b74c:	40020488 	.word	0x40020488
 800b750:	400204a0 	.word	0x400204a0
 800b754:	400204b8 	.word	0x400204b8
 800b758:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b762:	2b00      	cmp	r3, #0
 800b764:	d008      	beq.n	800b778 <HAL_UART_IRQHandler+0x544>
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d003      	beq.n	800b778 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f001 f8c4 	bl	800c8fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b776:	e014      	b.n	800b7a2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00f      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x56e>
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	da0c      	bge.n	800b7a2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f001 f8ae 	bl	800c8ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b78e:	e008      	b.n	800b7a2 <HAL_UART_IRQHandler+0x56e>
      return;
 800b790:	bf00      	nop
 800b792:	e006      	b.n	800b7a2 <HAL_UART_IRQHandler+0x56e>
    return;
 800b794:	bf00      	nop
 800b796:	e004      	b.n	800b7a2 <HAL_UART_IRQHandler+0x56e>
      return;
 800b798:	bf00      	nop
 800b79a:	e002      	b.n	800b7a2 <HAL_UART_IRQHandler+0x56e>
      return;
 800b79c:	bf00      	nop
 800b79e:	e000      	b.n	800b7a2 <HAL_UART_IRQHandler+0x56e>
    return;
 800b7a0:	bf00      	nop
  }
}
 800b7a2:	3720      	adds	r7, #32
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b810:	b5b0      	push	{r4, r5, r7, lr}
 800b812:	b08e      	sub	sp, #56	; 0x38
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689a      	ldr	r2, [r3, #8]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	431a      	orrs	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	431a      	orrs	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	4313      	orrs	r3, r2
 800b834:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	4bbf      	ldr	r3, [pc, #764]	; (800bb3c <UART_SetConfig+0x32c>)
 800b83e:	4013      	ands	r3, r2
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	6812      	ldr	r2, [r2, #0]
 800b844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b846:	430b      	orrs	r3, r1
 800b848:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68da      	ldr	r2, [r3, #12]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	430a      	orrs	r2, r1
 800b85e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4ab5      	ldr	r2, [pc, #724]	; (800bb40 <UART_SetConfig+0x330>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d004      	beq.n	800b87a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a1b      	ldr	r3, [r3, #32]
 800b874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b876:	4313      	orrs	r3, r2
 800b878:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	689a      	ldr	r2, [r3, #8]
 800b880:	4bb0      	ldr	r3, [pc, #704]	; (800bb44 <UART_SetConfig+0x334>)
 800b882:	4013      	ands	r3, r2
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	6812      	ldr	r2, [r2, #0]
 800b888:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b88a:	430b      	orrs	r3, r1
 800b88c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b894:	f023 010f 	bic.w	r1, r3, #15
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	430a      	orrs	r2, r1
 800b8a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4aa7      	ldr	r2, [pc, #668]	; (800bb48 <UART_SetConfig+0x338>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d176      	bne.n	800b99c <UART_SetConfig+0x18c>
 800b8ae:	4ba7      	ldr	r3, [pc, #668]	; (800bb4c <UART_SetConfig+0x33c>)
 800b8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8b6:	2b28      	cmp	r3, #40	; 0x28
 800b8b8:	d86c      	bhi.n	800b994 <UART_SetConfig+0x184>
 800b8ba:	a201      	add	r2, pc, #4	; (adr r2, 800b8c0 <UART_SetConfig+0xb0>)
 800b8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c0:	0800b965 	.word	0x0800b965
 800b8c4:	0800b995 	.word	0x0800b995
 800b8c8:	0800b995 	.word	0x0800b995
 800b8cc:	0800b995 	.word	0x0800b995
 800b8d0:	0800b995 	.word	0x0800b995
 800b8d4:	0800b995 	.word	0x0800b995
 800b8d8:	0800b995 	.word	0x0800b995
 800b8dc:	0800b995 	.word	0x0800b995
 800b8e0:	0800b96d 	.word	0x0800b96d
 800b8e4:	0800b995 	.word	0x0800b995
 800b8e8:	0800b995 	.word	0x0800b995
 800b8ec:	0800b995 	.word	0x0800b995
 800b8f0:	0800b995 	.word	0x0800b995
 800b8f4:	0800b995 	.word	0x0800b995
 800b8f8:	0800b995 	.word	0x0800b995
 800b8fc:	0800b995 	.word	0x0800b995
 800b900:	0800b975 	.word	0x0800b975
 800b904:	0800b995 	.word	0x0800b995
 800b908:	0800b995 	.word	0x0800b995
 800b90c:	0800b995 	.word	0x0800b995
 800b910:	0800b995 	.word	0x0800b995
 800b914:	0800b995 	.word	0x0800b995
 800b918:	0800b995 	.word	0x0800b995
 800b91c:	0800b995 	.word	0x0800b995
 800b920:	0800b97d 	.word	0x0800b97d
 800b924:	0800b995 	.word	0x0800b995
 800b928:	0800b995 	.word	0x0800b995
 800b92c:	0800b995 	.word	0x0800b995
 800b930:	0800b995 	.word	0x0800b995
 800b934:	0800b995 	.word	0x0800b995
 800b938:	0800b995 	.word	0x0800b995
 800b93c:	0800b995 	.word	0x0800b995
 800b940:	0800b985 	.word	0x0800b985
 800b944:	0800b995 	.word	0x0800b995
 800b948:	0800b995 	.word	0x0800b995
 800b94c:	0800b995 	.word	0x0800b995
 800b950:	0800b995 	.word	0x0800b995
 800b954:	0800b995 	.word	0x0800b995
 800b958:	0800b995 	.word	0x0800b995
 800b95c:	0800b995 	.word	0x0800b995
 800b960:	0800b98d 	.word	0x0800b98d
 800b964:	2301      	movs	r3, #1
 800b966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b96a:	e222      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b96c:	2304      	movs	r3, #4
 800b96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b972:	e21e      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b974:	2308      	movs	r3, #8
 800b976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b97a:	e21a      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b97c:	2310      	movs	r3, #16
 800b97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b982:	e216      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b984:	2320      	movs	r3, #32
 800b986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b98a:	e212      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b98c:	2340      	movs	r3, #64	; 0x40
 800b98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b992:	e20e      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b994:	2380      	movs	r3, #128	; 0x80
 800b996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b99a:	e20a      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a6b      	ldr	r2, [pc, #428]	; (800bb50 <UART_SetConfig+0x340>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d130      	bne.n	800ba08 <UART_SetConfig+0x1f8>
 800b9a6:	4b69      	ldr	r3, [pc, #420]	; (800bb4c <UART_SetConfig+0x33c>)
 800b9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9aa:	f003 0307 	and.w	r3, r3, #7
 800b9ae:	2b05      	cmp	r3, #5
 800b9b0:	d826      	bhi.n	800ba00 <UART_SetConfig+0x1f0>
 800b9b2:	a201      	add	r2, pc, #4	; (adr r2, 800b9b8 <UART_SetConfig+0x1a8>)
 800b9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b8:	0800b9d1 	.word	0x0800b9d1
 800b9bc:	0800b9d9 	.word	0x0800b9d9
 800b9c0:	0800b9e1 	.word	0x0800b9e1
 800b9c4:	0800b9e9 	.word	0x0800b9e9
 800b9c8:	0800b9f1 	.word	0x0800b9f1
 800b9cc:	0800b9f9 	.word	0x0800b9f9
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9d6:	e1ec      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b9d8:	2304      	movs	r3, #4
 800b9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9de:	e1e8      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b9e0:	2308      	movs	r3, #8
 800b9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9e6:	e1e4      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ee:	e1e0      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b9f0:	2320      	movs	r3, #32
 800b9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9f6:	e1dc      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800b9f8:	2340      	movs	r3, #64	; 0x40
 800b9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9fe:	e1d8      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800ba00:	2380      	movs	r3, #128	; 0x80
 800ba02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba06:	e1d4      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a51      	ldr	r2, [pc, #324]	; (800bb54 <UART_SetConfig+0x344>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d130      	bne.n	800ba74 <UART_SetConfig+0x264>
 800ba12:	4b4e      	ldr	r3, [pc, #312]	; (800bb4c <UART_SetConfig+0x33c>)
 800ba14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba16:	f003 0307 	and.w	r3, r3, #7
 800ba1a:	2b05      	cmp	r3, #5
 800ba1c:	d826      	bhi.n	800ba6c <UART_SetConfig+0x25c>
 800ba1e:	a201      	add	r2, pc, #4	; (adr r2, 800ba24 <UART_SetConfig+0x214>)
 800ba20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba24:	0800ba3d 	.word	0x0800ba3d
 800ba28:	0800ba45 	.word	0x0800ba45
 800ba2c:	0800ba4d 	.word	0x0800ba4d
 800ba30:	0800ba55 	.word	0x0800ba55
 800ba34:	0800ba5d 	.word	0x0800ba5d
 800ba38:	0800ba65 	.word	0x0800ba65
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba42:	e1b6      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800ba44:	2304      	movs	r3, #4
 800ba46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba4a:	e1b2      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800ba4c:	2308      	movs	r3, #8
 800ba4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba52:	e1ae      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800ba54:	2310      	movs	r3, #16
 800ba56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba5a:	e1aa      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800ba5c:	2320      	movs	r3, #32
 800ba5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba62:	e1a6      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800ba64:	2340      	movs	r3, #64	; 0x40
 800ba66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba6a:	e1a2      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800ba6c:	2380      	movs	r3, #128	; 0x80
 800ba6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba72:	e19e      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a37      	ldr	r2, [pc, #220]	; (800bb58 <UART_SetConfig+0x348>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d130      	bne.n	800bae0 <UART_SetConfig+0x2d0>
 800ba7e:	4b33      	ldr	r3, [pc, #204]	; (800bb4c <UART_SetConfig+0x33c>)
 800ba80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba82:	f003 0307 	and.w	r3, r3, #7
 800ba86:	2b05      	cmp	r3, #5
 800ba88:	d826      	bhi.n	800bad8 <UART_SetConfig+0x2c8>
 800ba8a:	a201      	add	r2, pc, #4	; (adr r2, 800ba90 <UART_SetConfig+0x280>)
 800ba8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba90:	0800baa9 	.word	0x0800baa9
 800ba94:	0800bab1 	.word	0x0800bab1
 800ba98:	0800bab9 	.word	0x0800bab9
 800ba9c:	0800bac1 	.word	0x0800bac1
 800baa0:	0800bac9 	.word	0x0800bac9
 800baa4:	0800bad1 	.word	0x0800bad1
 800baa8:	2300      	movs	r3, #0
 800baaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baae:	e180      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bab0:	2304      	movs	r3, #4
 800bab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab6:	e17c      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bab8:	2308      	movs	r3, #8
 800baba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800babe:	e178      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bac0:	2310      	movs	r3, #16
 800bac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bac6:	e174      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bac8:	2320      	movs	r3, #32
 800baca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bace:	e170      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bad0:	2340      	movs	r3, #64	; 0x40
 800bad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bad6:	e16c      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bad8:	2380      	movs	r3, #128	; 0x80
 800bada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bade:	e168      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a1d      	ldr	r2, [pc, #116]	; (800bb5c <UART_SetConfig+0x34c>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d142      	bne.n	800bb70 <UART_SetConfig+0x360>
 800baea:	4b18      	ldr	r3, [pc, #96]	; (800bb4c <UART_SetConfig+0x33c>)
 800baec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baee:	f003 0307 	and.w	r3, r3, #7
 800baf2:	2b05      	cmp	r3, #5
 800baf4:	d838      	bhi.n	800bb68 <UART_SetConfig+0x358>
 800baf6:	a201      	add	r2, pc, #4	; (adr r2, 800bafc <UART_SetConfig+0x2ec>)
 800baf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafc:	0800bb15 	.word	0x0800bb15
 800bb00:	0800bb1d 	.word	0x0800bb1d
 800bb04:	0800bb25 	.word	0x0800bb25
 800bb08:	0800bb2d 	.word	0x0800bb2d
 800bb0c:	0800bb35 	.word	0x0800bb35
 800bb10:	0800bb61 	.word	0x0800bb61
 800bb14:	2300      	movs	r3, #0
 800bb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1a:	e14a      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb22:	e146      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bb24:	2308      	movs	r3, #8
 800bb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb2a:	e142      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb32:	e13e      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bb34:	2320      	movs	r3, #32
 800bb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb3a:	e13a      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bb3c:	cfff69f3 	.word	0xcfff69f3
 800bb40:	58000c00 	.word	0x58000c00
 800bb44:	11fff4ff 	.word	0x11fff4ff
 800bb48:	40011000 	.word	0x40011000
 800bb4c:	58024400 	.word	0x58024400
 800bb50:	40004400 	.word	0x40004400
 800bb54:	40004800 	.word	0x40004800
 800bb58:	40004c00 	.word	0x40004c00
 800bb5c:	40005000 	.word	0x40005000
 800bb60:	2340      	movs	r3, #64	; 0x40
 800bb62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb66:	e124      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bb68:	2380      	movs	r3, #128	; 0x80
 800bb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb6e:	e120      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4acc      	ldr	r2, [pc, #816]	; (800bea8 <UART_SetConfig+0x698>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d176      	bne.n	800bc68 <UART_SetConfig+0x458>
 800bb7a:	4bcc      	ldr	r3, [pc, #816]	; (800beac <UART_SetConfig+0x69c>)
 800bb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb82:	2b28      	cmp	r3, #40	; 0x28
 800bb84:	d86c      	bhi.n	800bc60 <UART_SetConfig+0x450>
 800bb86:	a201      	add	r2, pc, #4	; (adr r2, 800bb8c <UART_SetConfig+0x37c>)
 800bb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8c:	0800bc31 	.word	0x0800bc31
 800bb90:	0800bc61 	.word	0x0800bc61
 800bb94:	0800bc61 	.word	0x0800bc61
 800bb98:	0800bc61 	.word	0x0800bc61
 800bb9c:	0800bc61 	.word	0x0800bc61
 800bba0:	0800bc61 	.word	0x0800bc61
 800bba4:	0800bc61 	.word	0x0800bc61
 800bba8:	0800bc61 	.word	0x0800bc61
 800bbac:	0800bc39 	.word	0x0800bc39
 800bbb0:	0800bc61 	.word	0x0800bc61
 800bbb4:	0800bc61 	.word	0x0800bc61
 800bbb8:	0800bc61 	.word	0x0800bc61
 800bbbc:	0800bc61 	.word	0x0800bc61
 800bbc0:	0800bc61 	.word	0x0800bc61
 800bbc4:	0800bc61 	.word	0x0800bc61
 800bbc8:	0800bc61 	.word	0x0800bc61
 800bbcc:	0800bc41 	.word	0x0800bc41
 800bbd0:	0800bc61 	.word	0x0800bc61
 800bbd4:	0800bc61 	.word	0x0800bc61
 800bbd8:	0800bc61 	.word	0x0800bc61
 800bbdc:	0800bc61 	.word	0x0800bc61
 800bbe0:	0800bc61 	.word	0x0800bc61
 800bbe4:	0800bc61 	.word	0x0800bc61
 800bbe8:	0800bc61 	.word	0x0800bc61
 800bbec:	0800bc49 	.word	0x0800bc49
 800bbf0:	0800bc61 	.word	0x0800bc61
 800bbf4:	0800bc61 	.word	0x0800bc61
 800bbf8:	0800bc61 	.word	0x0800bc61
 800bbfc:	0800bc61 	.word	0x0800bc61
 800bc00:	0800bc61 	.word	0x0800bc61
 800bc04:	0800bc61 	.word	0x0800bc61
 800bc08:	0800bc61 	.word	0x0800bc61
 800bc0c:	0800bc51 	.word	0x0800bc51
 800bc10:	0800bc61 	.word	0x0800bc61
 800bc14:	0800bc61 	.word	0x0800bc61
 800bc18:	0800bc61 	.word	0x0800bc61
 800bc1c:	0800bc61 	.word	0x0800bc61
 800bc20:	0800bc61 	.word	0x0800bc61
 800bc24:	0800bc61 	.word	0x0800bc61
 800bc28:	0800bc61 	.word	0x0800bc61
 800bc2c:	0800bc59 	.word	0x0800bc59
 800bc30:	2301      	movs	r3, #1
 800bc32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc36:	e0bc      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bc38:	2304      	movs	r3, #4
 800bc3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc3e:	e0b8      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bc40:	2308      	movs	r3, #8
 800bc42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc46:	e0b4      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bc48:	2310      	movs	r3, #16
 800bc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc4e:	e0b0      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bc50:	2320      	movs	r3, #32
 800bc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc56:	e0ac      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bc58:	2340      	movs	r3, #64	; 0x40
 800bc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc5e:	e0a8      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bc60:	2380      	movs	r3, #128	; 0x80
 800bc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc66:	e0a4      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a90      	ldr	r2, [pc, #576]	; (800beb0 <UART_SetConfig+0x6a0>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d130      	bne.n	800bcd4 <UART_SetConfig+0x4c4>
 800bc72:	4b8e      	ldr	r3, [pc, #568]	; (800beac <UART_SetConfig+0x69c>)
 800bc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc76:	f003 0307 	and.w	r3, r3, #7
 800bc7a:	2b05      	cmp	r3, #5
 800bc7c:	d826      	bhi.n	800bccc <UART_SetConfig+0x4bc>
 800bc7e:	a201      	add	r2, pc, #4	; (adr r2, 800bc84 <UART_SetConfig+0x474>)
 800bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc84:	0800bc9d 	.word	0x0800bc9d
 800bc88:	0800bca5 	.word	0x0800bca5
 800bc8c:	0800bcad 	.word	0x0800bcad
 800bc90:	0800bcb5 	.word	0x0800bcb5
 800bc94:	0800bcbd 	.word	0x0800bcbd
 800bc98:	0800bcc5 	.word	0x0800bcc5
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca2:	e086      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bca4:	2304      	movs	r3, #4
 800bca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcaa:	e082      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bcac:	2308      	movs	r3, #8
 800bcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb2:	e07e      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bcb4:	2310      	movs	r3, #16
 800bcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcba:	e07a      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bcbc:	2320      	movs	r3, #32
 800bcbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcc2:	e076      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bcc4:	2340      	movs	r3, #64	; 0x40
 800bcc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcca:	e072      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bccc:	2380      	movs	r3, #128	; 0x80
 800bcce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcd2:	e06e      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a76      	ldr	r2, [pc, #472]	; (800beb4 <UART_SetConfig+0x6a4>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d130      	bne.n	800bd40 <UART_SetConfig+0x530>
 800bcde:	4b73      	ldr	r3, [pc, #460]	; (800beac <UART_SetConfig+0x69c>)
 800bce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce2:	f003 0307 	and.w	r3, r3, #7
 800bce6:	2b05      	cmp	r3, #5
 800bce8:	d826      	bhi.n	800bd38 <UART_SetConfig+0x528>
 800bcea:	a201      	add	r2, pc, #4	; (adr r2, 800bcf0 <UART_SetConfig+0x4e0>)
 800bcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf0:	0800bd09 	.word	0x0800bd09
 800bcf4:	0800bd11 	.word	0x0800bd11
 800bcf8:	0800bd19 	.word	0x0800bd19
 800bcfc:	0800bd21 	.word	0x0800bd21
 800bd00:	0800bd29 	.word	0x0800bd29
 800bd04:	0800bd31 	.word	0x0800bd31
 800bd08:	2300      	movs	r3, #0
 800bd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0e:	e050      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd10:	2304      	movs	r3, #4
 800bd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd16:	e04c      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd18:	2308      	movs	r3, #8
 800bd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd1e:	e048      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd20:	2310      	movs	r3, #16
 800bd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd26:	e044      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd28:	2320      	movs	r3, #32
 800bd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd2e:	e040      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd30:	2340      	movs	r3, #64	; 0x40
 800bd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd36:	e03c      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd38:	2380      	movs	r3, #128	; 0x80
 800bd3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd3e:	e038      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a5c      	ldr	r2, [pc, #368]	; (800beb8 <UART_SetConfig+0x6a8>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d130      	bne.n	800bdac <UART_SetConfig+0x59c>
 800bd4a:	4b58      	ldr	r3, [pc, #352]	; (800beac <UART_SetConfig+0x69c>)
 800bd4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd4e:	f003 0307 	and.w	r3, r3, #7
 800bd52:	2b05      	cmp	r3, #5
 800bd54:	d826      	bhi.n	800bda4 <UART_SetConfig+0x594>
 800bd56:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <UART_SetConfig+0x54c>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800bd75 	.word	0x0800bd75
 800bd60:	0800bd7d 	.word	0x0800bd7d
 800bd64:	0800bd85 	.word	0x0800bd85
 800bd68:	0800bd8d 	.word	0x0800bd8d
 800bd6c:	0800bd95 	.word	0x0800bd95
 800bd70:	0800bd9d 	.word	0x0800bd9d
 800bd74:	2302      	movs	r3, #2
 800bd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7a:	e01a      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd7c:	2304      	movs	r3, #4
 800bd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd82:	e016      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd84:	2308      	movs	r3, #8
 800bd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd8a:	e012      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd8c:	2310      	movs	r3, #16
 800bd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd92:	e00e      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd94:	2320      	movs	r3, #32
 800bd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd9a:	e00a      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bd9c:	2340      	movs	r3, #64	; 0x40
 800bd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bda2:	e006      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bda4:	2380      	movs	r3, #128	; 0x80
 800bda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdaa:	e002      	b.n	800bdb2 <UART_SetConfig+0x5a2>
 800bdac:	2380      	movs	r3, #128	; 0x80
 800bdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a40      	ldr	r2, [pc, #256]	; (800beb8 <UART_SetConfig+0x6a8>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	f040 80ef 	bne.w	800bf9c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bdbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bdc2:	2b20      	cmp	r3, #32
 800bdc4:	dc46      	bgt.n	800be54 <UART_SetConfig+0x644>
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	f2c0 8081 	blt.w	800bece <UART_SetConfig+0x6be>
 800bdcc:	3b02      	subs	r3, #2
 800bdce:	2b1e      	cmp	r3, #30
 800bdd0:	d87d      	bhi.n	800bece <UART_SetConfig+0x6be>
 800bdd2:	a201      	add	r2, pc, #4	; (adr r2, 800bdd8 <UART_SetConfig+0x5c8>)
 800bdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd8:	0800be5b 	.word	0x0800be5b
 800bddc:	0800becf 	.word	0x0800becf
 800bde0:	0800be63 	.word	0x0800be63
 800bde4:	0800becf 	.word	0x0800becf
 800bde8:	0800becf 	.word	0x0800becf
 800bdec:	0800becf 	.word	0x0800becf
 800bdf0:	0800be73 	.word	0x0800be73
 800bdf4:	0800becf 	.word	0x0800becf
 800bdf8:	0800becf 	.word	0x0800becf
 800bdfc:	0800becf 	.word	0x0800becf
 800be00:	0800becf 	.word	0x0800becf
 800be04:	0800becf 	.word	0x0800becf
 800be08:	0800becf 	.word	0x0800becf
 800be0c:	0800becf 	.word	0x0800becf
 800be10:	0800be83 	.word	0x0800be83
 800be14:	0800becf 	.word	0x0800becf
 800be18:	0800becf 	.word	0x0800becf
 800be1c:	0800becf 	.word	0x0800becf
 800be20:	0800becf 	.word	0x0800becf
 800be24:	0800becf 	.word	0x0800becf
 800be28:	0800becf 	.word	0x0800becf
 800be2c:	0800becf 	.word	0x0800becf
 800be30:	0800becf 	.word	0x0800becf
 800be34:	0800becf 	.word	0x0800becf
 800be38:	0800becf 	.word	0x0800becf
 800be3c:	0800becf 	.word	0x0800becf
 800be40:	0800becf 	.word	0x0800becf
 800be44:	0800becf 	.word	0x0800becf
 800be48:	0800becf 	.word	0x0800becf
 800be4c:	0800becf 	.word	0x0800becf
 800be50:	0800bec1 	.word	0x0800bec1
 800be54:	2b40      	cmp	r3, #64	; 0x40
 800be56:	d036      	beq.n	800bec6 <UART_SetConfig+0x6b6>
 800be58:	e039      	b.n	800bece <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be5a:	f7fb ff7f 	bl	8007d5c <HAL_RCCEx_GetD3PCLK1Freq>
 800be5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800be60:	e03b      	b.n	800beda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be62:	f107 0314 	add.w	r3, r7, #20
 800be66:	4618      	mov	r0, r3
 800be68:	f7fb ff8e 	bl	8007d88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be70:	e033      	b.n	800beda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be72:	f107 0308 	add.w	r3, r7, #8
 800be76:	4618      	mov	r0, r3
 800be78:	f7fc f8da 	bl	8008030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be80:	e02b      	b.n	800beda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be82:	4b0a      	ldr	r3, [pc, #40]	; (800beac <UART_SetConfig+0x69c>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 0320 	and.w	r3, r3, #32
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d009      	beq.n	800bea2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be8e:	4b07      	ldr	r3, [pc, #28]	; (800beac <UART_SetConfig+0x69c>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	08db      	lsrs	r3, r3, #3
 800be94:	f003 0303 	and.w	r3, r3, #3
 800be98:	4a08      	ldr	r2, [pc, #32]	; (800bebc <UART_SetConfig+0x6ac>)
 800be9a:	fa22 f303 	lsr.w	r3, r2, r3
 800be9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bea0:	e01b      	b.n	800beda <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800bea2:	4b06      	ldr	r3, [pc, #24]	; (800bebc <UART_SetConfig+0x6ac>)
 800bea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bea6:	e018      	b.n	800beda <UART_SetConfig+0x6ca>
 800bea8:	40011400 	.word	0x40011400
 800beac:	58024400 	.word	0x58024400
 800beb0:	40007800 	.word	0x40007800
 800beb4:	40007c00 	.word	0x40007c00
 800beb8:	58000c00 	.word	0x58000c00
 800bebc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bec0:	4bc4      	ldr	r3, [pc, #784]	; (800c1d4 <UART_SetConfig+0x9c4>)
 800bec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bec4:	e009      	b.n	800beda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800becc:	e005      	b.n	800beda <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800bece:	2300      	movs	r3, #0
 800bed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800beda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 81da 	beq.w	800c296 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee6:	4abc      	ldr	r2, [pc, #752]	; (800c1d8 <UART_SetConfig+0x9c8>)
 800bee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beec:	461a      	mov	r2, r3
 800beee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bef4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685a      	ldr	r2, [r3, #4]
 800befa:	4613      	mov	r3, r2
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	4413      	add	r3, r2
 800bf00:	6a3a      	ldr	r2, [r7, #32]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d305      	bcc.n	800bf12 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf0c:	6a3a      	ldr	r2, [r7, #32]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d903      	bls.n	800bf1a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf18:	e1bd      	b.n	800c296 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f04f 0100 	mov.w	r1, #0
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf26:	4aac      	ldr	r2, [pc, #688]	; (800c1d8 <UART_SetConfig+0x9c8>)
 800bf28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	f04f 0300 	mov.w	r3, #0
 800bf32:	f7f4 f9d1 	bl	80002d8 <__aeabi_uldivmod>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	f04f 0200 	mov.w	r2, #0
 800bf42:	f04f 0300 	mov.w	r3, #0
 800bf46:	020b      	lsls	r3, r1, #8
 800bf48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf4c:	0202      	lsls	r2, r0, #8
 800bf4e:	6879      	ldr	r1, [r7, #4]
 800bf50:	6849      	ldr	r1, [r1, #4]
 800bf52:	0849      	lsrs	r1, r1, #1
 800bf54:	4608      	mov	r0, r1
 800bf56:	f04f 0100 	mov.w	r1, #0
 800bf5a:	1814      	adds	r4, r2, r0
 800bf5c:	eb43 0501 	adc.w	r5, r3, r1
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	461a      	mov	r2, r3
 800bf66:	f04f 0300 	mov.w	r3, #0
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	f7f4 f9b3 	bl	80002d8 <__aeabi_uldivmod>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	4613      	mov	r3, r2
 800bf78:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf80:	d308      	bcc.n	800bf94 <UART_SetConfig+0x784>
 800bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf88:	d204      	bcs.n	800bf94 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf90:	60da      	str	r2, [r3, #12]
 800bf92:	e180      	b.n	800c296 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf9a:	e17c      	b.n	800c296 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	69db      	ldr	r3, [r3, #28]
 800bfa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfa4:	f040 80bf 	bne.w	800c126 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800bfa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfac:	2b20      	cmp	r3, #32
 800bfae:	dc49      	bgt.n	800c044 <UART_SetConfig+0x834>
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	db7c      	blt.n	800c0ae <UART_SetConfig+0x89e>
 800bfb4:	2b20      	cmp	r3, #32
 800bfb6:	d87a      	bhi.n	800c0ae <UART_SetConfig+0x89e>
 800bfb8:	a201      	add	r2, pc, #4	; (adr r2, 800bfc0 <UART_SetConfig+0x7b0>)
 800bfba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbe:	bf00      	nop
 800bfc0:	0800c04b 	.word	0x0800c04b
 800bfc4:	0800c053 	.word	0x0800c053
 800bfc8:	0800c0af 	.word	0x0800c0af
 800bfcc:	0800c0af 	.word	0x0800c0af
 800bfd0:	0800c05b 	.word	0x0800c05b
 800bfd4:	0800c0af 	.word	0x0800c0af
 800bfd8:	0800c0af 	.word	0x0800c0af
 800bfdc:	0800c0af 	.word	0x0800c0af
 800bfe0:	0800c06b 	.word	0x0800c06b
 800bfe4:	0800c0af 	.word	0x0800c0af
 800bfe8:	0800c0af 	.word	0x0800c0af
 800bfec:	0800c0af 	.word	0x0800c0af
 800bff0:	0800c0af 	.word	0x0800c0af
 800bff4:	0800c0af 	.word	0x0800c0af
 800bff8:	0800c0af 	.word	0x0800c0af
 800bffc:	0800c0af 	.word	0x0800c0af
 800c000:	0800c07b 	.word	0x0800c07b
 800c004:	0800c0af 	.word	0x0800c0af
 800c008:	0800c0af 	.word	0x0800c0af
 800c00c:	0800c0af 	.word	0x0800c0af
 800c010:	0800c0af 	.word	0x0800c0af
 800c014:	0800c0af 	.word	0x0800c0af
 800c018:	0800c0af 	.word	0x0800c0af
 800c01c:	0800c0af 	.word	0x0800c0af
 800c020:	0800c0af 	.word	0x0800c0af
 800c024:	0800c0af 	.word	0x0800c0af
 800c028:	0800c0af 	.word	0x0800c0af
 800c02c:	0800c0af 	.word	0x0800c0af
 800c030:	0800c0af 	.word	0x0800c0af
 800c034:	0800c0af 	.word	0x0800c0af
 800c038:	0800c0af 	.word	0x0800c0af
 800c03c:	0800c0af 	.word	0x0800c0af
 800c040:	0800c0a1 	.word	0x0800c0a1
 800c044:	2b40      	cmp	r3, #64	; 0x40
 800c046:	d02e      	beq.n	800c0a6 <UART_SetConfig+0x896>
 800c048:	e031      	b.n	800c0ae <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c04a:	f7fa ff1b 	bl	8006e84 <HAL_RCC_GetPCLK1Freq>
 800c04e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c050:	e033      	b.n	800c0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c052:	f7fa ff2d 	bl	8006eb0 <HAL_RCC_GetPCLK2Freq>
 800c056:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c058:	e02f      	b.n	800c0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c05a:	f107 0314 	add.w	r3, r7, #20
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fb fe92 	bl	8007d88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c068:	e027      	b.n	800c0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c06a:	f107 0308 	add.w	r3, r7, #8
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fb ffde 	bl	8008030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c078:	e01f      	b.n	800c0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c07a:	4b58      	ldr	r3, [pc, #352]	; (800c1dc <UART_SetConfig+0x9cc>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	2b00      	cmp	r3, #0
 800c084:	d009      	beq.n	800c09a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c086:	4b55      	ldr	r3, [pc, #340]	; (800c1dc <UART_SetConfig+0x9cc>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	08db      	lsrs	r3, r3, #3
 800c08c:	f003 0303 	and.w	r3, r3, #3
 800c090:	4a53      	ldr	r2, [pc, #332]	; (800c1e0 <UART_SetConfig+0x9d0>)
 800c092:	fa22 f303 	lsr.w	r3, r2, r3
 800c096:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c098:	e00f      	b.n	800c0ba <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c09a:	4b51      	ldr	r3, [pc, #324]	; (800c1e0 <UART_SetConfig+0x9d0>)
 800c09c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c09e:	e00c      	b.n	800c0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0a0:	4b4c      	ldr	r3, [pc, #304]	; (800c1d4 <UART_SetConfig+0x9c4>)
 800c0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0a4:	e009      	b.n	800c0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0ac:	e005      	b.n	800c0ba <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c0b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 80ea 	beq.w	800c296 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c6:	4a44      	ldr	r2, [pc, #272]	; (800c1d8 <UART_SetConfig+0x9c8>)
 800c0c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0d4:	005a      	lsls	r2, r3, #1
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	085b      	lsrs	r3, r3, #1
 800c0dc:	441a      	add	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	2b0f      	cmp	r3, #15
 800c0ee:	d916      	bls.n	800c11e <UART_SetConfig+0x90e>
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f6:	d212      	bcs.n	800c11e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	f023 030f 	bic.w	r3, r3, #15
 800c100:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	085b      	lsrs	r3, r3, #1
 800c106:	b29b      	uxth	r3, r3
 800c108:	f003 0307 	and.w	r3, r3, #7
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c110:	4313      	orrs	r3, r2
 800c112:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c11a:	60da      	str	r2, [r3, #12]
 800c11c:	e0bb      	b.n	800c296 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c124:	e0b7      	b.n	800c296 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c126:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c12a:	2b20      	cmp	r3, #32
 800c12c:	dc4a      	bgt.n	800c1c4 <UART_SetConfig+0x9b4>
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f2c0 8086 	blt.w	800c240 <UART_SetConfig+0xa30>
 800c134:	2b20      	cmp	r3, #32
 800c136:	f200 8083 	bhi.w	800c240 <UART_SetConfig+0xa30>
 800c13a:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <UART_SetConfig+0x930>)
 800c13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c140:	0800c1cb 	.word	0x0800c1cb
 800c144:	0800c1e5 	.word	0x0800c1e5
 800c148:	0800c241 	.word	0x0800c241
 800c14c:	0800c241 	.word	0x0800c241
 800c150:	0800c1ed 	.word	0x0800c1ed
 800c154:	0800c241 	.word	0x0800c241
 800c158:	0800c241 	.word	0x0800c241
 800c15c:	0800c241 	.word	0x0800c241
 800c160:	0800c1fd 	.word	0x0800c1fd
 800c164:	0800c241 	.word	0x0800c241
 800c168:	0800c241 	.word	0x0800c241
 800c16c:	0800c241 	.word	0x0800c241
 800c170:	0800c241 	.word	0x0800c241
 800c174:	0800c241 	.word	0x0800c241
 800c178:	0800c241 	.word	0x0800c241
 800c17c:	0800c241 	.word	0x0800c241
 800c180:	0800c20d 	.word	0x0800c20d
 800c184:	0800c241 	.word	0x0800c241
 800c188:	0800c241 	.word	0x0800c241
 800c18c:	0800c241 	.word	0x0800c241
 800c190:	0800c241 	.word	0x0800c241
 800c194:	0800c241 	.word	0x0800c241
 800c198:	0800c241 	.word	0x0800c241
 800c19c:	0800c241 	.word	0x0800c241
 800c1a0:	0800c241 	.word	0x0800c241
 800c1a4:	0800c241 	.word	0x0800c241
 800c1a8:	0800c241 	.word	0x0800c241
 800c1ac:	0800c241 	.word	0x0800c241
 800c1b0:	0800c241 	.word	0x0800c241
 800c1b4:	0800c241 	.word	0x0800c241
 800c1b8:	0800c241 	.word	0x0800c241
 800c1bc:	0800c241 	.word	0x0800c241
 800c1c0:	0800c233 	.word	0x0800c233
 800c1c4:	2b40      	cmp	r3, #64	; 0x40
 800c1c6:	d037      	beq.n	800c238 <UART_SetConfig+0xa28>
 800c1c8:	e03a      	b.n	800c240 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1ca:	f7fa fe5b 	bl	8006e84 <HAL_RCC_GetPCLK1Freq>
 800c1ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1d0:	e03c      	b.n	800c24c <UART_SetConfig+0xa3c>
 800c1d2:	bf00      	nop
 800c1d4:	003d0900 	.word	0x003d0900
 800c1d8:	0800d264 	.word	0x0800d264
 800c1dc:	58024400 	.word	0x58024400
 800c1e0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1e4:	f7fa fe64 	bl	8006eb0 <HAL_RCC_GetPCLK2Freq>
 800c1e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1ea:	e02f      	b.n	800c24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1ec:	f107 0314 	add.w	r3, r7, #20
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fb fdc9 	bl	8007d88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1fa:	e027      	b.n	800c24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1fc:	f107 0308 	add.w	r3, r7, #8
 800c200:	4618      	mov	r0, r3
 800c202:	f7fb ff15 	bl	8008030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c20a:	e01f      	b.n	800c24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c20c:	4b2c      	ldr	r3, [pc, #176]	; (800c2c0 <UART_SetConfig+0xab0>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 0320 	and.w	r3, r3, #32
 800c214:	2b00      	cmp	r3, #0
 800c216:	d009      	beq.n	800c22c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c218:	4b29      	ldr	r3, [pc, #164]	; (800c2c0 <UART_SetConfig+0xab0>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	08db      	lsrs	r3, r3, #3
 800c21e:	f003 0303 	and.w	r3, r3, #3
 800c222:	4a28      	ldr	r2, [pc, #160]	; (800c2c4 <UART_SetConfig+0xab4>)
 800c224:	fa22 f303 	lsr.w	r3, r2, r3
 800c228:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c22a:	e00f      	b.n	800c24c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c22c:	4b25      	ldr	r3, [pc, #148]	; (800c2c4 <UART_SetConfig+0xab4>)
 800c22e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c230:	e00c      	b.n	800c24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c232:	4b25      	ldr	r3, [pc, #148]	; (800c2c8 <UART_SetConfig+0xab8>)
 800c234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c236:	e009      	b.n	800c24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c23c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c23e:	e005      	b.n	800c24c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c240:	2300      	movs	r3, #0
 800c242:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c24a:	bf00      	nop
    }

    if (pclk != 0U)
 800c24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d021      	beq.n	800c296 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	4a1d      	ldr	r2, [pc, #116]	; (800c2cc <UART_SetConfig+0xabc>)
 800c258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c25c:	461a      	mov	r2, r3
 800c25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c260:	fbb3 f2f2 	udiv	r2, r3, r2
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	085b      	lsrs	r3, r3, #1
 800c26a:	441a      	add	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	fbb2 f3f3 	udiv	r3, r2, r3
 800c274:	b29b      	uxth	r3, r3
 800c276:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	2b0f      	cmp	r3, #15
 800c27c:	d908      	bls.n	800c290 <UART_SetConfig+0xa80>
 800c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c284:	d204      	bcs.n	800c290 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c28c:	60da      	str	r2, [r3, #12]
 800c28e:	e002      	b.n	800c296 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c2b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3738      	adds	r7, #56	; 0x38
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bdb0      	pop	{r4, r5, r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	58024400 	.word	0x58024400
 800c2c4:	03d09000 	.word	0x03d09000
 800c2c8:	003d0900 	.word	0x003d0900
 800c2cc:	0800d264 	.word	0x0800d264

0800c2d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2dc:	f003 0301 	and.w	r3, r3, #1
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00a      	beq.n	800c2fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fe:	f003 0302 	and.w	r3, r3, #2
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00a      	beq.n	800c31c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	430a      	orrs	r2, r1
 800c31a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00a      	beq.n	800c33e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	430a      	orrs	r2, r1
 800c33c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c342:	f003 0308 	and.w	r3, r3, #8
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00a      	beq.n	800c360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	430a      	orrs	r2, r1
 800c35e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c364:	f003 0310 	and.w	r3, r3, #16
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00a      	beq.n	800c382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	430a      	orrs	r2, r1
 800c380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c386:	f003 0320 	and.w	r3, r3, #32
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00a      	beq.n	800c3a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d01a      	beq.n	800c3e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	430a      	orrs	r2, r1
 800c3c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3ce:	d10a      	bne.n	800c3e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	430a      	orrs	r2, r1
 800c3e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00a      	beq.n	800c408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	430a      	orrs	r2, r1
 800c406:	605a      	str	r2, [r3, #4]
  }
}
 800c408:	bf00      	nop
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af02      	add	r7, sp, #8
 800c41a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c424:	f7f5 fe2c 	bl	8002080 <HAL_GetTick>
 800c428:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 0308 	and.w	r3, r3, #8
 800c434:	2b08      	cmp	r3, #8
 800c436:	d10e      	bne.n	800c456 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 f82f 	bl	800c4aa <UART_WaitOnFlagUntilTimeout>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c452:	2303      	movs	r3, #3
 800c454:	e025      	b.n	800c4a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 0304 	and.w	r3, r3, #4
 800c460:	2b04      	cmp	r3, #4
 800c462:	d10e      	bne.n	800c482 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c468:	9300      	str	r3, [sp, #0]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f819 	bl	800c4aa <UART_WaitOnFlagUntilTimeout>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c47e:	2303      	movs	r3, #3
 800c480:	e00f      	b.n	800c4a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2220      	movs	r2, #32
 800c486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2220      	movs	r2, #32
 800c48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b084      	sub	sp, #16
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	60f8      	str	r0, [r7, #12]
 800c4b2:	60b9      	str	r1, [r7, #8]
 800c4b4:	603b      	str	r3, [r7, #0]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4ba:	e062      	b.n	800c582 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c2:	d05e      	beq.n	800c582 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4c4:	f7f5 fddc 	bl	8002080 <HAL_GetTick>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	1ad3      	subs	r3, r2, r3
 800c4ce:	69ba      	ldr	r2, [r7, #24]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d302      	bcc.n	800c4da <UART_WaitOnFlagUntilTimeout+0x30>
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d11d      	bne.n	800c516 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	689a      	ldr	r2, [r3, #8]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f022 0201 	bic.w	r2, r2, #1
 800c4f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2220      	movs	r2, #32
 800c4fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2220      	movs	r2, #32
 800c506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c512:	2303      	movs	r3, #3
 800c514:	e045      	b.n	800c5a2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d02e      	beq.n	800c582 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	69db      	ldr	r3, [r3, #28]
 800c52a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c52e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c532:	d126      	bne.n	800c582 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c53c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c54c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	689a      	ldr	r2, [r3, #8]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f022 0201 	bic.w	r2, r2, #1
 800c55c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2220      	movs	r2, #32
 800c562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2220      	movs	r2, #32
 800c56a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2220      	movs	r2, #32
 800c572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c57e:	2303      	movs	r3, #3
 800c580:	e00f      	b.n	800c5a2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	69da      	ldr	r2, [r3, #28]
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	4013      	ands	r3, r2
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	429a      	cmp	r2, r3
 800c590:	bf0c      	ite	eq
 800c592:	2301      	moveq	r3, #1
 800c594:	2300      	movne	r3, #0
 800c596:	b2db      	uxtb	r3, r3
 800c598:	461a      	mov	r2, r3
 800c59a:	79fb      	ldrb	r3, [r7, #7]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d08d      	beq.n	800c4bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
	...

0800c5ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	88fa      	ldrh	r2, [r7, #6]
 800c5c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2222      	movs	r2, #34	; 0x22
 800c5d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d02c      	beq.n	800c63a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5e4:	4a25      	ldr	r2, [pc, #148]	; (800c67c <UART_Start_Receive_DMA+0xd0>)
 800c5e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5ec:	4a24      	ldr	r2, [pc, #144]	; (800c680 <UART_Start_Receive_DMA+0xd4>)
 800c5ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5f4:	4a23      	ldr	r2, [pc, #140]	; (800c684 <UART_Start_Receive_DMA+0xd8>)
 800c5f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3324      	adds	r3, #36	; 0x24
 800c60a:	4619      	mov	r1, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c610:	461a      	mov	r2, r3
 800c612:	88fb      	ldrh	r3, [r7, #6]
 800c614:	f7f6 fa04 	bl	8002a20 <HAL_DMA_Start_IT>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00d      	beq.n	800c63a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2210      	movs	r2, #16
 800c622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2220      	movs	r2, #32
 800c632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	e01c      	b.n	800c674 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c650:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f042 0201 	orr.w	r2, r2, #1
 800c660:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	689a      	ldr	r2, [r3, #8]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c670:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	0800c729 	.word	0x0800c729
 800c680:	0800c7bf 	.word	0x0800c7bf
 800c684:	0800c7f7 	.word	0x0800c7f7

0800c688 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c69e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	689a      	ldr	r2, [r3, #8]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c6ae:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2220      	movs	r2, #32
 800c6b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c6da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	6899      	ldr	r1, [r3, #8]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	4b0f      	ldr	r3, [pc, #60]	; (800c724 <UART_EndRxTransfer+0x60>)
 800c6e8:	400b      	ands	r3, r1
 800c6ea:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d107      	bne.n	800c704 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f022 0210 	bic.w	r2, r2, #16
 800c702:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2220      	movs	r2, #32
 800c708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c718:	bf00      	nop
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr
 800c724:	effffffe 	.word	0xeffffffe

0800c728 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c734:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	69db      	ldr	r3, [r3, #28]
 800c73a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c73e:	d02b      	beq.n	800c798 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c756:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	689a      	ldr	r2, [r3, #8]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f022 0201 	bic.w	r2, r2, #1
 800c766:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	689a      	ldr	r2, [r3, #8]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c776:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2220      	movs	r2, #32
 800c77c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c784:	2b01      	cmp	r3, #1
 800c786:	d107      	bne.n	800c798 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f022 0210 	bic.w	r2, r2, #16
 800c796:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d107      	bne.n	800c7b0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f7ff f825 	bl	800b7f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c7ae:	e002      	b.n	800c7b6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f7ff f803 	bl	800b7bc <HAL_UART_RxCpltCallback>
}
 800c7b6:	bf00      	nop
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ca:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d109      	bne.n	800c7e8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7da:	085b      	lsrs	r3, r3, #1
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	4619      	mov	r1, r3
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff f809 	bl	800b7f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c7e6:	e002      	b.n	800c7ee <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f7fe fff1 	bl	800b7d0 <HAL_UART_RxHalfCpltCallback>
}
 800c7ee:	bf00      	nop
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b086      	sub	sp, #24
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c802:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c80a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c812:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c81e:	2b80      	cmp	r3, #128	; 0x80
 800c820:	d109      	bne.n	800c836 <UART_DMAError+0x40>
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	2b21      	cmp	r3, #33	; 0x21
 800c826:	d106      	bne.n	800c836 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c830:	6978      	ldr	r0, [r7, #20]
 800c832:	f7ff ff29 	bl	800c688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c840:	2b40      	cmp	r3, #64	; 0x40
 800c842:	d109      	bne.n	800c858 <UART_DMAError+0x62>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b22      	cmp	r3, #34	; 0x22
 800c848:	d106      	bne.n	800c858 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c852:	6978      	ldr	r0, [r7, #20]
 800c854:	f7ff ff36 	bl	800c6c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c85e:	f043 0210 	orr.w	r2, r3, #16
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c868:	6978      	ldr	r0, [r7, #20]
 800c86a:	f7fe ffbb 	bl	800b7e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c86e:	bf00      	nop
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b084      	sub	sp, #16
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c882:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2200      	movs	r2, #0
 800c888:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f7fe ffa5 	bl	800b7e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c89a:	bf00      	nop
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8b8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2220      	movs	r2, #32
 800c8be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f7fe ff6d 	bl	800b7a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8ce:	bf00      	nop
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c8d6:	b480      	push	{r7}
 800c8d8:	b083      	sub	sp, #12
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c8de:	bf00      	nop
 800c8e0:	370c      	adds	r7, #12
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b083      	sub	sp, #12
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c8f2:	bf00      	nop
 800c8f4:	370c      	adds	r7, #12
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c8fe:	b480      	push	{r7}
 800c900:	b083      	sub	sp, #12
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c906:	bf00      	nop
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c912:	b480      	push	{r7}
 800c914:	b085      	sub	sp, #20
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c920:	2b01      	cmp	r3, #1
 800c922:	d101      	bne.n	800c928 <HAL_UARTEx_DisableFifoMode+0x16>
 800c924:	2302      	movs	r3, #2
 800c926:	e027      	b.n	800c978 <HAL_UARTEx_DisableFifoMode+0x66>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2224      	movs	r2, #36	; 0x24
 800c934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f022 0201 	bic.w	r2, r2, #1
 800c94e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c956:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2220      	movs	r2, #32
 800c96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3714      	adds	r7, #20
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c994:	2b01      	cmp	r3, #1
 800c996:	d101      	bne.n	800c99c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c998:	2302      	movs	r3, #2
 800c99a:	e02d      	b.n	800c9f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2224      	movs	r2, #36	; 0x24
 800c9a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f022 0201 	bic.w	r2, r2, #1
 800c9c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	683a      	ldr	r2, [r7, #0]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f84f 	bl	800ca7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2220      	movs	r2, #32
 800c9ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d101      	bne.n	800ca18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca14:	2302      	movs	r3, #2
 800ca16:	e02d      	b.n	800ca74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2224      	movs	r2, #36	; 0x24
 800ca24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f022 0201 	bic.w	r2, r2, #1
 800ca3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	683a      	ldr	r2, [r7, #0]
 800ca50:	430a      	orrs	r2, r1
 800ca52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f811 	bl	800ca7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2220      	movs	r2, #32
 800ca66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d108      	bne.n	800ca9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca9c:	e031      	b.n	800cb02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca9e:	2310      	movs	r3, #16
 800caa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800caa2:	2310      	movs	r3, #16
 800caa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	0e5b      	lsrs	r3, r3, #25
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	f003 0307 	and.w	r3, r3, #7
 800cab4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	0f5b      	lsrs	r3, r3, #29
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	f003 0307 	and.w	r3, r3, #7
 800cac4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cac6:	7bbb      	ldrb	r3, [r7, #14]
 800cac8:	7b3a      	ldrb	r2, [r7, #12]
 800caca:	4911      	ldr	r1, [pc, #68]	; (800cb10 <UARTEx_SetNbDataToProcess+0x94>)
 800cacc:	5c8a      	ldrb	r2, [r1, r2]
 800cace:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cad2:	7b3a      	ldrb	r2, [r7, #12]
 800cad4:	490f      	ldr	r1, [pc, #60]	; (800cb14 <UARTEx_SetNbDataToProcess+0x98>)
 800cad6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cad8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cadc:	b29a      	uxth	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
 800cae6:	7b7a      	ldrb	r2, [r7, #13]
 800cae8:	4909      	ldr	r1, [pc, #36]	; (800cb10 <UARTEx_SetNbDataToProcess+0x94>)
 800caea:	5c8a      	ldrb	r2, [r1, r2]
 800caec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800caf0:	7b7a      	ldrb	r2, [r7, #13]
 800caf2:	4908      	ldr	r1, [pc, #32]	; (800cb14 <UARTEx_SetNbDataToProcess+0x98>)
 800caf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800caf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cb02:	bf00      	nop
 800cb04:	3714      	adds	r7, #20
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	0800d27c 	.word	0x0800d27c
 800cb14:	0800d284 	.word	0x0800d284

0800cb18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb18:	b084      	sub	sp, #16
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	f107 001c 	add.w	r0, r7, #28
 800cb26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d120      	bne.n	800cb72 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	68da      	ldr	r2, [r3, #12]
 800cb40:	4b2a      	ldr	r3, [pc, #168]	; (800cbec <USB_CoreInit+0xd4>)
 800cb42:	4013      	ands	r3, r2
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cb54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d105      	bne.n	800cb66 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 fa60 	bl	800d02c <USB_CoreReset>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	73fb      	strb	r3, [r7, #15]
 800cb70:	e01a      	b.n	800cba8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fa54 	bl	800d02c <USB_CoreReset>
 800cb84:	4603      	mov	r3, r0
 800cb86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d106      	bne.n	800cb9c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	639a      	str	r2, [r3, #56]	; 0x38
 800cb9a:	e005      	b.n	800cba8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d116      	bne.n	800cbdc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cbbc:	4b0c      	ldr	r3, [pc, #48]	; (800cbf0 <USB_CoreInit+0xd8>)
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	f043 0206 	orr.w	r2, r3, #6
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	f043 0220 	orr.w	r2, r3, #32
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbe8:	b004      	add	sp, #16
 800cbea:	4770      	bx	lr
 800cbec:	ffbdffbf 	.word	0xffbdffbf
 800cbf0:	03ee0000 	.word	0x03ee0000

0800cbf4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	f023 0201 	bic.w	r2, r3, #1
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc08:	2300      	movs	r3, #0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	370c      	adds	r7, #12
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	460b      	mov	r3, r1
 800cc20:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cc2e:	78fb      	ldrb	r3, [r7, #3]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d106      	bne.n	800cc42 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	60da      	str	r2, [r3, #12]
 800cc40:	e00b      	b.n	800cc5a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cc42:	78fb      	ldrb	r3, [r7, #3]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d106      	bne.n	800cc56 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	60da      	str	r2, [r3, #12]
 800cc54:	e001      	b.n	800cc5a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	e003      	b.n	800cc62 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cc5a:	2032      	movs	r0, #50	; 0x32
 800cc5c:	f7f5 fa1c 	bl	8002098 <HAL_Delay>

  return HAL_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
	...

0800cc6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b086      	sub	sp, #24
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cc7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cc86:	2300      	movs	r3, #0
 800cc88:	613b      	str	r3, [r7, #16]
 800cc8a:	e009      	b.n	800cca0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	3340      	adds	r3, #64	; 0x40
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	2200      	movs	r2, #0
 800cc98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	613b      	str	r3, [r7, #16]
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	2b0e      	cmp	r3, #14
 800cca4:	d9f2      	bls.n	800cc8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d11c      	bne.n	800cce6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccba:	f043 0302 	orr.w	r3, r3, #2
 800ccbe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	601a      	str	r2, [r3, #0]
 800cce4:	e005      	b.n	800ccf2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd04:	4619      	mov	r1, r3
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	680b      	ldr	r3, [r1, #0]
 800cd10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d10c      	bne.n	800cd32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d104      	bne.n	800cd28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cd1e:	2100      	movs	r1, #0
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f949 	bl	800cfb8 <USB_SetDevSpeed>
 800cd26:	e008      	b.n	800cd3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cd28:	2101      	movs	r1, #1
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f944 	bl	800cfb8 <USB_SetDevSpeed>
 800cd30:	e003      	b.n	800cd3a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cd32:	2103      	movs	r1, #3
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f93f 	bl	800cfb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cd3a:	2110      	movs	r1, #16
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f8f3 	bl	800cf28 <USB_FlushTxFifo>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f911 	bl	800cf74 <USB_FlushRxFifo>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd62:	461a      	mov	r2, r3
 800cd64:	2300      	movs	r3, #0
 800cd66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd6e:	461a      	mov	r2, r3
 800cd70:	2300      	movs	r3, #0
 800cd72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd80:	2300      	movs	r3, #0
 800cd82:	613b      	str	r3, [r7, #16]
 800cd84:	e043      	b.n	800ce0e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	015a      	lsls	r2, r3, #5
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd9c:	d118      	bne.n	800cdd0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10a      	bne.n	800cdba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	015a      	lsls	r2, r3, #5
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	4413      	add	r3, r2
 800cdac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cdb6:	6013      	str	r3, [r2, #0]
 800cdb8:	e013      	b.n	800cde2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	015a      	lsls	r2, r3, #5
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cdcc:	6013      	str	r3, [r2, #0]
 800cdce:	e008      	b.n	800cde2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cddc:	461a      	mov	r2, r3
 800cdde:	2300      	movs	r3, #0
 800cde0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	015a      	lsls	r2, r3, #5
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	4413      	add	r3, r2
 800cdea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdee:	461a      	mov	r2, r3
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	015a      	lsls	r2, r3, #5
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce00:	461a      	mov	r2, r3
 800ce02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	613b      	str	r3, [r7, #16]
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce10:	693a      	ldr	r2, [r7, #16]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d3b7      	bcc.n	800cd86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce16:	2300      	movs	r3, #0
 800ce18:	613b      	str	r3, [r7, #16]
 800ce1a:	e043      	b.n	800cea4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	015a      	lsls	r2, r3, #5
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	4413      	add	r3, r2
 800ce24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce32:	d118      	bne.n	800ce66 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10a      	bne.n	800ce50 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	015a      	lsls	r2, r3, #5
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	4413      	add	r3, r2
 800ce42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce46:	461a      	mov	r2, r3
 800ce48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce4c:	6013      	str	r3, [r2, #0]
 800ce4e:	e013      	b.n	800ce78 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	015a      	lsls	r2, r3, #5
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	4413      	add	r3, r2
 800ce58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce62:	6013      	str	r3, [r2, #0]
 800ce64:	e008      	b.n	800ce78 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	015a      	lsls	r2, r3, #5
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce72:	461a      	mov	r2, r3
 800ce74:	2300      	movs	r3, #0
 800ce76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	015a      	lsls	r2, r3, #5
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	4413      	add	r3, r2
 800ce80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce84:	461a      	mov	r2, r3
 800ce86:	2300      	movs	r3, #0
 800ce88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	015a      	lsls	r2, r3, #5
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	4413      	add	r3, r2
 800ce92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce96:	461a      	mov	r2, r3
 800ce98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	3301      	adds	r3, #1
 800cea2:	613b      	str	r3, [r7, #16]
 800cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d3b7      	bcc.n	800ce1c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ceba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cebe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cecc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d105      	bne.n	800cee0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	699b      	ldr	r3, [r3, #24]
 800ced8:	f043 0210 	orr.w	r2, r3, #16
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	699a      	ldr	r2, [r3, #24]
 800cee4:	4b0e      	ldr	r3, [pc, #56]	; (800cf20 <USB_DevInit+0x2b4>)
 800cee6:	4313      	orrs	r3, r2
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ceec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d005      	beq.n	800cefe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	f043 0208 	orr.w	r2, r3, #8
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cefe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d105      	bne.n	800cf10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	699a      	ldr	r2, [r3, #24]
 800cf08:	4b06      	ldr	r3, [pc, #24]	; (800cf24 <USB_DevInit+0x2b8>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cf10:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3718      	adds	r7, #24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf1c:	b004      	add	sp, #16
 800cf1e:	4770      	bx	lr
 800cf20:	803c3800 	.word	0x803c3800
 800cf24:	40000004 	.word	0x40000004

0800cf28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	019b      	lsls	r3, r3, #6
 800cf3a:	f043 0220 	orr.w	r2, r3, #32
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	3301      	adds	r3, #1
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	4a09      	ldr	r2, [pc, #36]	; (800cf70 <USB_FlushTxFifo+0x48>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d901      	bls.n	800cf54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cf50:	2303      	movs	r3, #3
 800cf52:	e006      	b.n	800cf62 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	f003 0320 	and.w	r3, r3, #32
 800cf5c:	2b20      	cmp	r3, #32
 800cf5e:	d0f0      	beq.n	800cf42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3714      	adds	r7, #20
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	00030d40 	.word	0x00030d40

0800cf74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2210      	movs	r2, #16
 800cf84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	60fb      	str	r3, [r7, #12]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	4a09      	ldr	r2, [pc, #36]	; (800cfb4 <USB_FlushRxFifo+0x40>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d901      	bls.n	800cf98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cf94:	2303      	movs	r3, #3
 800cf96:	e006      	b.n	800cfa6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	691b      	ldr	r3, [r3, #16]
 800cf9c:	f003 0310 	and.w	r3, r3, #16
 800cfa0:	2b10      	cmp	r3, #16
 800cfa2:	d0f0      	beq.n	800cf86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	00030d40 	.word	0x00030d40

0800cfb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	78fb      	ldrb	r3, [r7, #3]
 800cfd2:	68f9      	ldr	r1, [r7, #12]
 800cfd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfea:	b480      	push	{r7}
 800cfec:	b085      	sub	sp, #20
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d004:	f023 0303 	bic.w	r3, r3, #3
 800d008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d018:	f043 0302 	orr.w	r3, r3, #2
 800d01c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	3714      	adds	r7, #20
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b085      	sub	sp, #20
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d034:	2300      	movs	r3, #0
 800d036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	3301      	adds	r3, #1
 800d03c:	60fb      	str	r3, [r7, #12]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	4a13      	ldr	r2, [pc, #76]	; (800d090 <USB_CoreReset+0x64>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d901      	bls.n	800d04a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d046:	2303      	movs	r3, #3
 800d048:	e01b      	b.n	800d082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	daf2      	bge.n	800d038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d052:	2300      	movs	r3, #0
 800d054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	f043 0201 	orr.w	r2, r3, #1
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	3301      	adds	r3, #1
 800d066:	60fb      	str	r3, [r7, #12]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4a09      	ldr	r2, [pc, #36]	; (800d090 <USB_CoreReset+0x64>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d901      	bls.n	800d074 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d070:	2303      	movs	r3, #3
 800d072:	e006      	b.n	800d082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	691b      	ldr	r3, [r3, #16]
 800d078:	f003 0301 	and.w	r3, r3, #1
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d0f0      	beq.n	800d062 <USB_CoreReset+0x36>

  return HAL_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3714      	adds	r7, #20
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	00030d40 	.word	0x00030d40

0800d094 <calloc>:
 800d094:	4b02      	ldr	r3, [pc, #8]	; (800d0a0 <calloc+0xc>)
 800d096:	460a      	mov	r2, r1
 800d098:	4601      	mov	r1, r0
 800d09a:	6818      	ldr	r0, [r3, #0]
 800d09c:	f000 b842 	b.w	800d124 <_calloc_r>
 800d0a0:	2401139c 	.word	0x2401139c

0800d0a4 <__errno>:
 800d0a4:	4b01      	ldr	r3, [pc, #4]	; (800d0ac <__errno+0x8>)
 800d0a6:	6818      	ldr	r0, [r3, #0]
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	2401139c 	.word	0x2401139c

0800d0b0 <__libc_init_array>:
 800d0b0:	b570      	push	{r4, r5, r6, lr}
 800d0b2:	4d0d      	ldr	r5, [pc, #52]	; (800d0e8 <__libc_init_array+0x38>)
 800d0b4:	4c0d      	ldr	r4, [pc, #52]	; (800d0ec <__libc_init_array+0x3c>)
 800d0b6:	1b64      	subs	r4, r4, r5
 800d0b8:	10a4      	asrs	r4, r4, #2
 800d0ba:	2600      	movs	r6, #0
 800d0bc:	42a6      	cmp	r6, r4
 800d0be:	d109      	bne.n	800d0d4 <__libc_init_array+0x24>
 800d0c0:	4d0b      	ldr	r5, [pc, #44]	; (800d0f0 <__libc_init_array+0x40>)
 800d0c2:	4c0c      	ldr	r4, [pc, #48]	; (800d0f4 <__libc_init_array+0x44>)
 800d0c4:	f000 f8b6 	bl	800d234 <_init>
 800d0c8:	1b64      	subs	r4, r4, r5
 800d0ca:	10a4      	asrs	r4, r4, #2
 800d0cc:	2600      	movs	r6, #0
 800d0ce:	42a6      	cmp	r6, r4
 800d0d0:	d105      	bne.n	800d0de <__libc_init_array+0x2e>
 800d0d2:	bd70      	pop	{r4, r5, r6, pc}
 800d0d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0d8:	4798      	blx	r3
 800d0da:	3601      	adds	r6, #1
 800d0dc:	e7ee      	b.n	800d0bc <__libc_init_array+0xc>
 800d0de:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0e2:	4798      	blx	r3
 800d0e4:	3601      	adds	r6, #1
 800d0e6:	e7f2      	b.n	800d0ce <__libc_init_array+0x1e>
 800d0e8:	0800d294 	.word	0x0800d294
 800d0ec:	0800d294 	.word	0x0800d294
 800d0f0:	0800d294 	.word	0x0800d294
 800d0f4:	0800d298 	.word	0x0800d298

0800d0f8 <memcpy>:
 800d0f8:	440a      	add	r2, r1
 800d0fa:	4291      	cmp	r1, r2
 800d0fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d100:	d100      	bne.n	800d104 <memcpy+0xc>
 800d102:	4770      	bx	lr
 800d104:	b510      	push	{r4, lr}
 800d106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d10a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d10e:	4291      	cmp	r1, r2
 800d110:	d1f9      	bne.n	800d106 <memcpy+0xe>
 800d112:	bd10      	pop	{r4, pc}

0800d114 <memset>:
 800d114:	4402      	add	r2, r0
 800d116:	4603      	mov	r3, r0
 800d118:	4293      	cmp	r3, r2
 800d11a:	d100      	bne.n	800d11e <memset+0xa>
 800d11c:	4770      	bx	lr
 800d11e:	f803 1b01 	strb.w	r1, [r3], #1
 800d122:	e7f9      	b.n	800d118 <memset+0x4>

0800d124 <_calloc_r>:
 800d124:	b513      	push	{r0, r1, r4, lr}
 800d126:	434a      	muls	r2, r1
 800d128:	4611      	mov	r1, r2
 800d12a:	9201      	str	r2, [sp, #4]
 800d12c:	f000 f80a 	bl	800d144 <_malloc_r>
 800d130:	4604      	mov	r4, r0
 800d132:	b118      	cbz	r0, 800d13c <_calloc_r+0x18>
 800d134:	9a01      	ldr	r2, [sp, #4]
 800d136:	2100      	movs	r1, #0
 800d138:	f7ff ffec 	bl	800d114 <memset>
 800d13c:	4620      	mov	r0, r4
 800d13e:	b002      	add	sp, #8
 800d140:	bd10      	pop	{r4, pc}
	...

0800d144 <_malloc_r>:
 800d144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d146:	1ccd      	adds	r5, r1, #3
 800d148:	f025 0503 	bic.w	r5, r5, #3
 800d14c:	3508      	adds	r5, #8
 800d14e:	2d0c      	cmp	r5, #12
 800d150:	bf38      	it	cc
 800d152:	250c      	movcc	r5, #12
 800d154:	2d00      	cmp	r5, #0
 800d156:	4606      	mov	r6, r0
 800d158:	db01      	blt.n	800d15e <_malloc_r+0x1a>
 800d15a:	42a9      	cmp	r1, r5
 800d15c:	d903      	bls.n	800d166 <_malloc_r+0x22>
 800d15e:	230c      	movs	r3, #12
 800d160:	6033      	str	r3, [r6, #0]
 800d162:	2000      	movs	r0, #0
 800d164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d166:	f000 f857 	bl	800d218 <__malloc_lock>
 800d16a:	4921      	ldr	r1, [pc, #132]	; (800d1f0 <_malloc_r+0xac>)
 800d16c:	680a      	ldr	r2, [r1, #0]
 800d16e:	4614      	mov	r4, r2
 800d170:	b99c      	cbnz	r4, 800d19a <_malloc_r+0x56>
 800d172:	4f20      	ldr	r7, [pc, #128]	; (800d1f4 <_malloc_r+0xb0>)
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	b923      	cbnz	r3, 800d182 <_malloc_r+0x3e>
 800d178:	4621      	mov	r1, r4
 800d17a:	4630      	mov	r0, r6
 800d17c:	f000 f83c 	bl	800d1f8 <_sbrk_r>
 800d180:	6038      	str	r0, [r7, #0]
 800d182:	4629      	mov	r1, r5
 800d184:	4630      	mov	r0, r6
 800d186:	f000 f837 	bl	800d1f8 <_sbrk_r>
 800d18a:	1c43      	adds	r3, r0, #1
 800d18c:	d123      	bne.n	800d1d6 <_malloc_r+0x92>
 800d18e:	230c      	movs	r3, #12
 800d190:	6033      	str	r3, [r6, #0]
 800d192:	4630      	mov	r0, r6
 800d194:	f000 f846 	bl	800d224 <__malloc_unlock>
 800d198:	e7e3      	b.n	800d162 <_malloc_r+0x1e>
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	1b5b      	subs	r3, r3, r5
 800d19e:	d417      	bmi.n	800d1d0 <_malloc_r+0x8c>
 800d1a0:	2b0b      	cmp	r3, #11
 800d1a2:	d903      	bls.n	800d1ac <_malloc_r+0x68>
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	441c      	add	r4, r3
 800d1a8:	6025      	str	r5, [r4, #0]
 800d1aa:	e004      	b.n	800d1b6 <_malloc_r+0x72>
 800d1ac:	6863      	ldr	r3, [r4, #4]
 800d1ae:	42a2      	cmp	r2, r4
 800d1b0:	bf0c      	ite	eq
 800d1b2:	600b      	streq	r3, [r1, #0]
 800d1b4:	6053      	strne	r3, [r2, #4]
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f000 f834 	bl	800d224 <__malloc_unlock>
 800d1bc:	f104 000b 	add.w	r0, r4, #11
 800d1c0:	1d23      	adds	r3, r4, #4
 800d1c2:	f020 0007 	bic.w	r0, r0, #7
 800d1c6:	1ac2      	subs	r2, r0, r3
 800d1c8:	d0cc      	beq.n	800d164 <_malloc_r+0x20>
 800d1ca:	1a1b      	subs	r3, r3, r0
 800d1cc:	50a3      	str	r3, [r4, r2]
 800d1ce:	e7c9      	b.n	800d164 <_malloc_r+0x20>
 800d1d0:	4622      	mov	r2, r4
 800d1d2:	6864      	ldr	r4, [r4, #4]
 800d1d4:	e7cc      	b.n	800d170 <_malloc_r+0x2c>
 800d1d6:	1cc4      	adds	r4, r0, #3
 800d1d8:	f024 0403 	bic.w	r4, r4, #3
 800d1dc:	42a0      	cmp	r0, r4
 800d1de:	d0e3      	beq.n	800d1a8 <_malloc_r+0x64>
 800d1e0:	1a21      	subs	r1, r4, r0
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f000 f808 	bl	800d1f8 <_sbrk_r>
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	d1dd      	bne.n	800d1a8 <_malloc_r+0x64>
 800d1ec:	e7cf      	b.n	800d18e <_malloc_r+0x4a>
 800d1ee:	bf00      	nop
 800d1f0:	2401d52c 	.word	0x2401d52c
 800d1f4:	2401d530 	.word	0x2401d530

0800d1f8 <_sbrk_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4d06      	ldr	r5, [pc, #24]	; (800d214 <_sbrk_r+0x1c>)
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4604      	mov	r4, r0
 800d200:	4608      	mov	r0, r1
 800d202:	602b      	str	r3, [r5, #0]
 800d204:	f7f4 fe56 	bl	8001eb4 <_sbrk>
 800d208:	1c43      	adds	r3, r0, #1
 800d20a:	d102      	bne.n	800d212 <_sbrk_r+0x1a>
 800d20c:	682b      	ldr	r3, [r5, #0]
 800d20e:	b103      	cbz	r3, 800d212 <_sbrk_r+0x1a>
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	bd38      	pop	{r3, r4, r5, pc}
 800d214:	2401dd04 	.word	0x2401dd04

0800d218 <__malloc_lock>:
 800d218:	4801      	ldr	r0, [pc, #4]	; (800d220 <__malloc_lock+0x8>)
 800d21a:	f000 b809 	b.w	800d230 <__retarget_lock_acquire_recursive>
 800d21e:	bf00      	nop
 800d220:	2401dd0c 	.word	0x2401dd0c

0800d224 <__malloc_unlock>:
 800d224:	4801      	ldr	r0, [pc, #4]	; (800d22c <__malloc_unlock+0x8>)
 800d226:	f000 b804 	b.w	800d232 <__retarget_lock_release_recursive>
 800d22a:	bf00      	nop
 800d22c:	2401dd0c 	.word	0x2401dd0c

0800d230 <__retarget_lock_acquire_recursive>:
 800d230:	4770      	bx	lr

0800d232 <__retarget_lock_release_recursive>:
 800d232:	4770      	bx	lr

0800d234 <_init>:
 800d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d236:	bf00      	nop
 800d238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d23a:	bc08      	pop	{r3}
 800d23c:	469e      	mov	lr, r3
 800d23e:	4770      	bx	lr

0800d240 <_fini>:
 800d240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d242:	bf00      	nop
 800d244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d246:	bc08      	pop	{r3}
 800d248:	469e      	mov	lr, r3
 800d24a:	4770      	bx	lr
